uint64_t sub_1004DD1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1004DD228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1004DD2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DD2C0);
}

uint64_t sub_1004DD2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_1004DD330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DD344);
}

uint64_t sub_1004DD344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_1004DD3B8()
{
  uint64_t result = type metadata accessor for MACAddress();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1004DD450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v14 = v13[12];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for MACAddress();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v23 = v13[16];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      unint64_t v26 = *((void *)v25 + 1);
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        uint64_t v27 = *(void *)v25;
        sub_1000361E0(*(void *)v25, *((void *)v25 + 1));
        *(void *)v24 = v27;
        *((void *)v24 + 1) = v26;
      }
      uint64_t v28 = v13[20];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      *(void *)v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v13[24];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v32[2] = v33[2];
      *(_WORD *)v32 = *(_WORD *)v33;
      goto LABEL_17;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for MACAddress();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      uint64_t v20 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      *(_WORD *)v21 = *(_WORD *)v22;
      v21[2] = v22[2];
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_1004DD7D4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    uint64_t v6 = sub_10000588C(&qword_101643D80);
    uint64_t v7 = a1 + *(int *)(v6 + 48);
    uint64_t v8 = type metadata accessor for MACAddress();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    if (!result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    uint64_t v10 = (uint64_t *)(a1 + *(int *)(v6 + 64));
    unint64_t v11 = v10[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v10;
      return sub_10001CFB8(v12, v11);
    }
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for MACAddress();
    uint64_t v13 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v3);
    if (!result)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

char *sub_1004DD9D4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    unint64_t v11 = (int *)sub_10000588C(&qword_101643D80);
    uint64_t v12 = v11[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for MACAddress();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v21 = v11[16];
    v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    unint64_t v24 = *((void *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v25 = *(void *)v23;
      sub_1000361E0(*(void *)v23, *((void *)v23 + 1));
      *(void *)v22 = v25;
      *((void *)v22 + 1) = v24;
    }
    uint64_t v26 = v11[20];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[24];
    v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    v30[2] = v31[2];
    *(_WORD *)v30 = *(_WORD *)v31;
    goto LABEL_15;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for MACAddress();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v18 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    *(_WORD *)uint64_t v19 = *(_WORD *)v20;
    v19[2] = v20[2];
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_1004DDD14(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004DB9C0((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      unint64_t v11 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v12 = v11[12];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for MACAddress();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v22 = v11[16];
      uint64_t v23 = &a1[v22];
      unint64_t v24 = &a2[v22];
      unint64_t v25 = *((void *)v24 + 1);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      }
      else
      {
        uint64_t v26 = *(void *)v24;
        sub_1000361E0(*(void *)v24, *((void *)v24 + 1));
        *(void *)uint64_t v23 = v26;
        *((void *)v23 + 1) = v25;
      }
      uint64_t v27 = v11[20];
      uint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      uint64_t v30 = *(void *)v29;
      v28[8] = v29[8];
      *(void *)uint64_t v28 = v30;
      uint64_t v31 = v11[24];
      v32 = &a1[v31];
      v33 = &a2[v31];
      LOWORD(v30) = *(_WORD *)v33;
      v32[2] = v33[2];
      *(_WORD *)v32 = v30;
      goto LABEL_16;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for MACAddress();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      uint64_t v18 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      char v21 = v20[2];
      *(_WORD *)uint64_t v19 = *(_WORD *)v20;
      v19[2] = v21;
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1004DE078(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
    unint64_t v11 = (int *)sub_10000588C(&qword_101643D80);
    uint64_t v12 = v11[12];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for MACAddress();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
    uint64_t v21 = v11[20];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    v22[8] = v23[8];
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v24 = v11[24];
    unint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    *(_WORD *)unint64_t v25 = *(_WORD *)v26;
    v25[2] = v26[2];
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for MACAddress();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v18 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    *(_WORD *)uint64_t v19 = *(_WORD *)v20;
    v19[2] = v20[2];
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_1004DE388(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004DB9C0((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      unint64_t v11 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v12 = v11[12];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      uint64_t v15 = type metadata accessor for MACAddress();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      uint64_t v21 = v11[20];
      uint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      v22[8] = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      uint64_t v24 = v11[24];
      unint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      *(_WORD *)unint64_t v25 = *(_WORD *)v26;
      v25[2] = v26[2];
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for MACAddress();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      uint64_t v18 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      *(_WORD *)uint64_t v19 = *(_WORD *)v20;
      v19[2] = v20[2];
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1004DE6BC()
{
  sub_1004DE7D8();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v3;
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout();
      uint64_t v5 = &v2;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void sub_1004DE7D8()
{
  if (!qword_1016498F0)
  {
    type metadata accessor for MACAddress();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1016498F0);
    }
  }
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.Version(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1004DE860(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1004DE87C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version()
{
  return &type metadata for OwnedBeaconGroup.Version;
}

unint64_t sub_1004DE8B0()
{
  unint64_t result = qword_101647998;
  if (!qword_101647998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647998);
  }
  return result;
}

unint64_t sub_1004DE908()
{
  unint64_t result = qword_1016479A0;
  if (!qword_1016479A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479A0);
  }
  return result;
}

unint64_t sub_1004DE960()
{
  unint64_t result = qword_1016479A8;
  if (!qword_1016479A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479A8);
  }
  return result;
}

unint64_t sub_1004DE9B8()
{
  unint64_t result = qword_1016479B0;
  if (!qword_1016479B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479B0);
  }
  return result;
}

unint64_t sub_1004DEA10()
{
  unint64_t result = qword_1016479B8;
  if (!qword_1016479B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479B8);
  }
  return result;
}

unint64_t sub_1004DEA68()
{
  unint64_t result = qword_1016479C0;
  if (!qword_1016479C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479C0);
  }
  return result;
}

unint64_t sub_1004DEAC0()
{
  unint64_t result = qword_1016479C8;
  if (!qword_1016479C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479C8);
  }
  return result;
}

unint64_t sub_1004DEB18()
{
  unint64_t result = qword_1016479D0;
  if (!qword_1016479D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479D0);
  }
  return result;
}

unint64_t sub_1004DEB6C()
{
  unint64_t result = qword_1016479D8;
  if (!qword_1016479D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479D8);
  }
  return result;
}

unint64_t sub_1004DEBC0()
{
  unint64_t result = qword_1016479E0;
  if (!qword_1016479E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479E0);
  }
  return result;
}

unint64_t sub_1004DEC14()
{
  unint64_t result = qword_1016479F0;
  if (!qword_1016479F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016479F0);
  }
  return result;
}

uint64_t sub_1004DEC68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644974726170 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54676E6972696170 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004DED6C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101647A50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004DF6CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v10[15] = 0;
  __int16 v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v10[13] = 1;
  sub_1004DEB6C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  int v8 = v10[14];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7 | (v8 << 16) | v7 & 0x100u;
}

uint64_t sub_1004DEF30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004DF030(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79636167656CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F6973726576 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004DF128(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016479F8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101647A00);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101647A08);
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)sub_10001CD44(a1, a1[3]);
  sub_1004DF5D0();
  uint64_t v13 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_6;
  }
  uint64_t v14 = v26;
  uint64_t v22 = v6;
  uint64_t v27 = a1;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    sub_10000588C(&qword_10163FA98);
    *uint64_t v19 = &type metadata for OwnedBeaconGroup.Version;
    uint64_t v12 = (uint64_t)v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
    a1 = v27;
LABEL_6:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v12;
  }
  uint64_t v16 = (uint64_t)v27;
  int v28 = *(unsigned __int8 *)(v15 + 32);
  if (v28)
  {
    char v30 = 1;
    sub_1004DF624();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v23;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
    uint64_t v16 = (uint64_t)v27;
  }
  else
  {
    char v29 = 0;
    sub_1004DF678();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
    uint64_t v12 = 0;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  return v12;
}

unint64_t sub_1004DF5D0()
{
  unint64_t result = qword_101647A10;
  if (!qword_101647A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A10);
  }
  return result;
}

unint64_t sub_1004DF624()
{
  unint64_t result = qword_101647A20;
  if (!qword_101647A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A20);
  }
  return result;
}

unint64_t sub_1004DF678()
{
  unint64_t result = qword_101647A28;
  if (!qword_101647A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A28);
  }
  return result;
}

unint64_t sub_1004DF6CC()
{
  unint64_t result = qword_101647A58;
  if (!qword_101647A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A58);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.LegacyCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys;
}

unsigned char *_s12searchpartyd16OwnedBeaconGroupV12SerialNumberV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004DF7F0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.VersionedCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys;
}

unsigned char *_s12searchpartyd16OwnedBeaconGroupV15PairingMetadataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DF8F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys;
}

unint64_t sub_1004DF930()
{
  unint64_t result = qword_101647A68;
  if (!qword_101647A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A68);
  }
  return result;
}

unint64_t sub_1004DF988()
{
  unint64_t result = qword_101647A70;
  if (!qword_101647A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A70);
  }
  return result;
}

unint64_t sub_1004DF9E0()
{
  unint64_t result = qword_101647A78;
  if (!qword_101647A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A78);
  }
  return result;
}

unint64_t sub_1004DFA38()
{
  unint64_t result = qword_101647A80;
  if (!qword_101647A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A80);
  }
  return result;
}

unint64_t sub_1004DFA90()
{
  unint64_t result = qword_101647A88;
  if (!qword_101647A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A88);
  }
  return result;
}

unint64_t sub_1004DFAE8()
{
  unint64_t result = qword_101647A90;
  if (!qword_101647A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A90);
  }
  return result;
}

unint64_t sub_1004DFB40()
{
  unint64_t result = qword_101647A98;
  if (!qword_101647A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647A98);
  }
  return result;
}

unint64_t sub_1004DFB98()
{
  unint64_t result = qword_101647AA0;
  if (!qword_101647AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AA0);
  }
  return result;
}

unint64_t sub_1004DFBF0()
{
  unint64_t result = qword_101647AA8;
  if (!qword_101647AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AA8);
  }
  return result;
}

unint64_t sub_1004DFC48()
{
  unint64_t result = qword_101647AB0;
  if (!qword_101647AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AB0);
  }
  return result;
}

unint64_t sub_1004DFCA0()
{
  unint64_t result = qword_101647AB8;
  if (!qword_101647AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AB8);
  }
  return result;
}

unint64_t sub_1004DFCF8()
{
  unint64_t result = qword_101647AC0;
  if (!qword_101647AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AC0);
  }
  return result;
}

unint64_t sub_1004DFD50()
{
  unint64_t result = qword_101647AC8;
  if (!qword_101647AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AC8);
  }
  return result;
}

unint64_t sub_1004DFDA8()
{
  unint64_t result = qword_101647AD0;
  if (!qword_101647AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647AD0);
  }
  return result;
}

uint64_t sub_1004DFDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1004DFE68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FMNAccountType();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1004DFECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1004DFF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1004DFF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1004DFFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1004E005C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004E0070);
}

uint64_t sub_1004E0070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1004E00DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004E00F0);
}

uint64_t sub_1004E00F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AccessoryLostModeEndPoint()
{
  uint64_t result = qword_101647B38;
  if (!qword_101647B38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004E01AC()
{
  uint64_t result = type metadata accessor for FMNAccountType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1004E0238()
{
  URLComponents.init()();
  URLComponents.scheme.setter();
  unint64_t v0 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  v1._object = (void *)0x80000001013FEF60;
  String.append(_:)(v1);
  v0(v8, 0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4
    && (NSString v5 = String._bridgeToObjectiveC()(),
        id v6 = [v2 stringForKey:v5],
        v5,
        v6))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABD54(v8[0]);
    swift_bridgeObjectRelease();
  }
  return URLComponents.host.setter();
}

uint64_t sub_1004E0438()
{
  return sub_1004E0238();
}

unsigned char *storeEnumTagSinglePayload for IdentitySigningType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E051CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningType()
{
  return &type metadata for IdentitySigningType;
}

unint64_t sub_1004E0558()
{
  unint64_t result = qword_101647B70;
  if (!qword_101647B70)
  {
    sub_10000592C(&qword_101647B78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647B70);
  }
  return result;
}

void sub_1004E05B4(void *a1@<X8>)
{
  *a1 = &off_1015A19E8;
}

unint64_t sub_1004E05C8()
{
  unint64_t result = qword_101647B80;
  if (!qword_101647B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101647B80);
  }
  return result;
}

unint64_t sub_1004E061C(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0x746375646F72702ELL;
      break;
    case 9:
      unint64_t result = 0x676E69726961702ELL;
      break;
    case 11:
      unint64_t result = 0x6F4C72656E776F2ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1004E0780()
{
  return sub_1004E061C(*v0);
}

uint64_t sub_1004E0788(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 192) = a2;
  *(void *)(v2 + 88) = a1;
  return _swift_task_switch(sub_1004E07AC, 0, 0);
}

uint64_t sub_1004E07AC()
{
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = 0x80000001013F1C90;
    uint64_t v3 = 0xD00000000000001DLL;
  }
  v0[12] = v3;
  v0[13] = v5;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10170E390;
  v0[14] = qword_10170E390;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1004E0930;
  return unsafeBlocking<A>(_:)(v0 + 6, sub_10001D704, v6, &type metadata for Configuration);
}

uint64_t sub_1004E0930()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004E0A48, 0, 0);
}

uint64_t sub_1004E0A48()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);
  uint64_t v2 = sub_1010ABD40(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1004E1628(v2);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 193) = sub_100272DF8(v1, (uint64_t)v3);
  swift_bridgeObjectRelease();
  if (((1 << v1) & 0x7EF) != 0)
  {
    uint64_t v4 = v0 + 72;
    uint64_t v5 = qword_10170E390;
    *(void *)(v0 + 128) = qword_10170E390;
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1004E0C04;
  }
  else
  {
    uint64_t v4 = v0 + 56;
    uint64_t v5 = qword_10170E390;
    *(void *)(v0 + 160) = qword_10170E390;
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1004E0FE0;
  }
  return unsafeBlocking<A>(_:)(v4, sub_10001D704, v5, &type metadata for Configuration);
}

uint64_t sub_1004E0C04()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004E0D1C, 0, 0);
}

uint64_t sub_1004E0D1C()
{
  v0[2] = sub_1010ABD20(v0[9]);
  v0[3] = v1;
  swift_bridgeObjectRelease();
  uint64_t v2 = qword_10170E390;
  v0[18] = qword_10170E390;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1004E0E10;
  return unsafeBlocking<A>(_:)(v0 + 10, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_1004E0E10()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004E0F28, 0, 0);
}

uint64_t sub_1004E0F28()
{
  uint64_t v1 = sub_1010ABD2C(*(void *)(v0 + 80));
  long long v8 = *(_OWORD *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 193);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v5 = v8;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = v1;
  *(_WORD *)(v5 + 40) = 257;
  *(unsigned char *)(v5 + 42) = v2;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1004E0FE0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004E10F8, 0, 0);
}

uint64_t sub_1004E10F8()
{
  v0[4] = sub_1010ABD00(v0[7]);
  v0[5] = v1;
  swift_bridgeObjectRelease();
  uint64_t v2 = qword_10170E390;
  v0[22] = qword_10170E390;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1004E11EC;
  return unsafeBlocking<A>(_:)(v0 + 8, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_1004E11EC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004E1304, 0, 0);
}

uint64_t sub_1004E1304()
{
  uint64_t v1 = sub_1010ABD0C(*(void *)(v0 + 64));
  long long v8 = *(_OWORD *)(v0 + 32);
  char v2 = *(unsigned char *)(v0 + 193);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v5 = v8;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(void *)(v5 + 32) = v1;
  *(_WORD *)(v5 + 40) = 0;
  *(unsigned char *)(v5 + 42) = v2;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void *sub_1004E13B8()
{
  sub_1000B6F38(0, 7, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1000B6F38(v1 > 1, v2 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  _swiftEmptyArrayStorage[v2 + 4] = 5;
  unint64_t v4 = _swiftEmptyArrayStorage[3];
  unint64_t v5 = v2 + 2;
  if (v3 >= v4 >> 1)
  {
    sub_1000B6F38(v4 > 1, v2 + 2, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v5;
  _swiftEmptyArrayStorage[v3 + 4] = 2;
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v7 = v2 + 3;
  if (v5 >= v6 >> 1)
  {
    sub_1000B6F38(v6 > 1, v2 + 3, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v7;
  _swiftEmptyArrayStorage[v5 + 4] = 1;
  uint64_t v8 = qword_101361390[asc_10159F22B[0]];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v5 + 2;
  if (v7 >= v9 >> 1)
  {
    sub_1000B6F38(v9 > 1, v7 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  _swiftEmptyArrayStorage[v7 + 4] = v8;
  uint64_t v11 = qword_101361390[asc_10159F22B[1]];
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  unint64_t v13 = v7 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1000B6F38(v12 > 1, v10 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  _swiftEmptyArrayStorage[v10 + 4] = v11;
  uint64_t v14 = qword_101361390[asc_10159F22B[2]];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  unint64_t v16 = v10 + 2;
  if (v13 >= v15 >> 1)
  {
    sub_1000B6F38(v15 > 1, v13 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16;
  _swiftEmptyArrayStorage[v13 + 4] = v14;
  uint64_t v17 = qword_101361390[asc_10159F22B[3]];
  unint64_t v18 = _swiftEmptyArrayStorage[3];
  unint64_t v19 = v13 + 2;
  if (v16 >= v18 >> 1)
  {
    sub_1000B6F38(v18 > 1, v16 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v19;
  _swiftEmptyArrayStorage[v16 + 4] = v17;
  return result;
}

void *sub_1004E1628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unint64_t v4 = _swiftEmptyArrayStorage;
LABEL_5:
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v2 + 8 * v3++);
  while (2)
  {
    unint64_t v7 = (char *)&off_10159F5F0 + v5++;
    char v8 = v7[32];
    switch(v8)
    {
      case 1:
        if (v6 != 2) {
          goto LABEL_7;
        }
        goto LABEL_30;
      case 2:
        if (v6 == 3) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 3:
        if (v6 == 4) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 4:
        if (v6 == 5) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 5:
        if (v6 == 6) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 6:
        if (v6 == 11) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 7:
        if (v6 == 12) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 8:
        if (v6 == 7) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 9:
        if (v6 == 8) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 10:
        if (v6 == 9) {
          goto LABEL_30;
        }
        goto LABEL_7;
      case 11:
        if (v6 == 10) {
          goto LABEL_30;
        }
        goto LABEL_7;
      default:
        if (v6 != 1)
        {
LABEL_7:
          if (v5 == 12) {
            goto LABEL_4;
          }
          continue;
        }
LABEL_30:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v4 = sub_100A6E934(0, v4[2] + 1, 1, v4);
        }
        unint64_t v10 = v4[2];
        unint64_t v9 = v4[3];
        if (v10 >= v9 >> 1) {
          unint64_t v4 = sub_100A6E934((void *)(v9 > 1), v10 + 1, 1, v4);
        }
        v4[2] = v10 + 1;
        *((unsigned char *)v4 + v10 + 32) = v8;
LABEL_4:
        if (v3 != v1) {
          goto LABEL_5;
        }
        swift_bridgeObjectRelease();
        return v4;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for IdentitySigningHeaderError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004E18B4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningHeaderError()
{
  return &type metadata for IdentitySigningHeaderError;
}

unint64_t sub_1004E18F0()
{
  unint64_t result = qword_101647B90;
  if (!qword_101647B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647B90);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsAutoMeStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E1A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsAutoMeStatus()
{
  return &type metadata for SecureLocationsAutoMeStatus;
}

uint64_t destroy for SecureLocationsPublishClientContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext()
{
  return &type metadata for SecureLocationsPublishClientContext;
}

uint64_t destroy for SecureLocationsClientContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  LOBYTE(v4) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SecureLocationsClientContext(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsClientContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext()
{
  return &type metadata for SecureLocationsClientContext;
}

uint64_t sub_1004E20CC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004E212C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1004E2180()
{
  unint64_t result = qword_101647B98;
  if (!qword_101647B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647B98);
  }
  return result;
}

uint64_t sub_1004E21D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647BA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004E29E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[0] = *(void *)(v3 + 48);
    char v11 = 3;
    sub_10000588C(&qword_101647BB0);
    sub_1004E2A38();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1004E2B08(v3 + 56, (uint64_t)v12);
    sub_1004E2B08((uint64_t)v12, (uint64_t)v10);
    char v11 = 4;
    sub_1004E2B70();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v10[0] = *(void *)(v3 + 112);
    char v11 = 5;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1004E2444()
{
  unint64_t result = 0x6E656B6F54737061;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6449746E65696C63;
      break;
    case 2:
      unint64_t result = 0x41747865746E6F63;
      break;
    case 3:
      unint64_t result = 0x53776F6C6C616873;
      break;
    case 4:
      unint64_t result = 0x746174536576696CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004E251C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004E2FE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E2544(uint64_t a1)
{
  unint64_t v2 = sub_1004E29E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E2580(uint64_t a1)
{
  unint64_t v2 = sub_1004E29E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E25BC(void *a1)
{
  return sub_1004E21D4(a1);
}

uint64_t sub_1004E2610(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647BD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004E2BC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + 48);
    char v13 = 3;
    sub_1004E2C18();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 72);
    v10[15] = 5;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1004E284C()
{
  unint64_t result = 0x6E656B6F54737061;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6449746E65696C63;
      break;
    case 2:
      unint64_t result = 0x41747865746E6F63;
      break;
    case 3:
      unint64_t result = 0x7453654D6F747561;
      break;
    case 4:
      unint64_t result = 0x526873696C627570;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004E292C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004E3298(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E2954(uint64_t a1)
{
  unint64_t v2 = sub_1004E2BC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E2990(uint64_t a1)
{
  unint64_t v2 = sub_1004E2BC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E29CC(void *a1)
{
  return sub_1004E2610(a1);
}

unint64_t sub_1004E29E4()
{
  unint64_t result = qword_101647BA8;
  if (!qword_101647BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BA8);
  }
  return result;
}

unint64_t sub_1004E2A38()
{
  unint64_t result = qword_101647BB8;
  if (!qword_101647BB8)
  {
    sub_10000592C(&qword_101647BB0);
    sub_1004E2AB4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BB8);
  }
  return result;
}

unint64_t sub_1004E2AB4()
{
  unint64_t result = qword_101647BC0;
  if (!qword_101647BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BC0);
  }
  return result;
}

uint64_t sub_1004E2B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101647BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004E2B70()
{
  unint64_t result = qword_101647BD0;
  if (!qword_101647BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BD0);
  }
  return result;
}

unint64_t sub_1004E2BC4()
{
  unint64_t result = qword_101647BE0;
  if (!qword_101647BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BE0);
  }
  return result;
}

unint64_t sub_1004E2C18()
{
  unint64_t result = qword_101647BE8;
  if (!qword_101647BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BE8);
  }
  return result;
}

unint64_t sub_1004E2C6C()
{
  unint64_t result = qword_101647BF0;
  if (!qword_101647BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsPublishClientContext.CodingKeys;
}

unsigned char *_s12searchpartyd35SecureLocationsPublishClientContextV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E2DA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsClientContext.CodingKeys;
}

unint64_t sub_1004E2DDC()
{
  unint64_t result = qword_101647BF8;
  if (!qword_101647BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647BF8);
  }
  return result;
}

unint64_t sub_1004E2E34()
{
  unint64_t result = qword_101647C00;
  if (!qword_101647C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647C00);
  }
  return result;
}

unint64_t sub_1004E2E8C()
{
  unint64_t result = qword_101647C08;
  if (!qword_101647C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647C08);
  }
  return result;
}

unint64_t sub_1004E2EE4()
{
  unint64_t result = qword_101647C10;
  if (!qword_101647C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647C10);
  }
  return result;
}

unint64_t sub_1004E2F3C()
{
  unint64_t result = qword_101647C18;
  if (!qword_101647C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647C18);
  }
  return result;
}

unint64_t sub_1004E2F94()
{
  unint64_t result = qword_101647C20;
  if (!qword_101647C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647C20);
  }
  return result;
}

uint64_t sub_1004E2FE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x53776F6C6C616873 && a2 == 0xEC00000073746174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746174536576696CLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FF0A0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1004E3298(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7453654D6F747561 && a2 == 0xEC00000073757461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x526873696C627570 && a2 == 0xED00006E6F736165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FF0A0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void sub_1004E3560(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
    sub_10033149C(&qword_101648030, (unint64_t *)&qword_10166BF90);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v34;
    uint64_t v39 = v35;
    uint64_t v4 = v36;
    uint64_t v5 = v37;
    unint64_t v6 = v38;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v39 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v32 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v31 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v10 = v5;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_43;
    }
    sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v33;
    swift_unknownObjectRelease();
    if (!v33) {
      goto LABEL_43;
    }
LABEL_31:
    id v17 = [v13 appleID];
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v30 = v2;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = (void *)v19;
      sub_1000336D4();
      char v20 = StringProtocol.contains<A>(_:)();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v20)
      {
        uint64_t v22 = (void *)IDSCopyIDForEmailAddress();

        if (!v22) {
          goto LABEL_45;
        }
        char v23 = 0;
      }
      else
      {
        uint64_t v22 = (void *)IDSCopyIDForPhoneNumber();

        if (!v22) {
          goto LABEL_46;
        }
        char v23 = 1;
      }
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v31 = sub_100A6F880(0, v31[2] + 1, 1, v31);
      }
      unint64_t v28 = v31[2];
      unint64_t v27 = v31[3];
      if (v28 >= v27 >> 1) {
        uint64_t v31 = sub_100A6F880((void *)(v27 > 1), v28 + 1, 1, v31);
      }
      v31[2] = v28 + 1;
      char v29 = &v31[3 * v28];
      *((unsigned char *)v29 + 32) = v23;
      v29[5] = v24;
      v29[6] = v26;
      uint64_t v2 = v30;
    }
    else
    {
    }
  }
  if (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_30:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_31;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v32) {
      goto LABEL_43;
    }
    unint64_t v15 = *(void *)(v39 + 8 * v14);
    ++v5;
    if (!v15)
    {
      uint64_t v5 = v10 + 2;
      if (v10 + 2 >= v32) {
        goto LABEL_43;
      }
      unint64_t v15 = *(void *)(v39 + 8 * v5);
      if (!v15)
      {
        uint64_t v5 = v10 + 3;
        if (v10 + 3 >= v32) {
          goto LABEL_43;
        }
        unint64_t v15 = *(void *)(v39 + 8 * v5);
        if (!v15)
        {
          uint64_t v5 = v10 + 4;
          if (v10 + 4 >= v32) {
            goto LABEL_43;
          }
          unint64_t v15 = *(void *)(v39 + 8 * v5);
          if (!v15)
          {
            uint64_t v5 = v10 + 5;
            if (v10 + 5 >= v32) {
              goto LABEL_43;
            }
            unint64_t v15 = *(void *)(v39 + 8 * v5);
            if (!v15)
            {
              uint64_t v16 = v10 + 6;
              while (v32 != v16)
              {
                unint64_t v15 = *(void *)(v39 + 8 * v16++);
                if (v15)
                {
                  uint64_t v5 = v16 - 1;
                  goto LABEL_29;
                }
              }
LABEL_43:
              sub_100132C20();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_30;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
}

void sub_1004E39B8(uint64_t a1)
{
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  uint64_t v3 = v2 & *(void *)(a1 + 56);
  int64_t v20 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v4 = 0;
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  for (v3 &= v3 - 1; ; uint64_t v3 = (v7 - 1) & v7)
  {
    sub_1000336D4();
    swift_bridgeObjectRetain();
    char v9 = StringProtocol.contains<A>(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v9)
    {
      unint64_t v11 = (void *)IDSCopyIDForEmailAddress();

      if (!v11) {
        goto LABEL_35;
      }
      char v12 = 0;
    }
    else
    {
      unint64_t v11 = (void *)IDSCopyIDForPhoneNumber();

      if (!v11) {
        goto LABEL_36;
      }
      char v12 = 1;
    }
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_100A6F880(0, v5[2] + 1, 1, v5);
    }
    unint64_t v17 = v5[2];
    unint64_t v16 = v5[3];
    if (v17 >= v16 >> 1) {
      uint64_t v5 = sub_100A6F880((void *)(v16 > 1), v17 + 1, 1, v5);
    }
    v5[2] = v17 + 1;
    unint64_t v18 = &v5[3 * v17];
    *((unsigned char *)v18 + 32) = v12;
    v18[5] = v13;
    v18[6] = v15;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v6 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v6 >= v20) {
      goto LABEL_32;
    }
    uint64_t v7 = *(void *)(v19 + 8 * v6);
    ++v4;
    if (!v7)
    {
      int64_t v4 = v6 + 1;
      if (v6 + 1 >= v20) {
        goto LABEL_32;
      }
      uint64_t v7 = *(void *)(v19 + 8 * v4);
      if (!v7)
      {
        int64_t v4 = v6 + 2;
        if (v6 + 2 >= v20) {
          goto LABEL_32;
        }
        uint64_t v7 = *(void *)(v19 + 8 * v4);
        if (!v7)
        {
          int64_t v4 = v6 + 3;
          if (v6 + 3 >= v20) {
            goto LABEL_32;
          }
          uint64_t v7 = *(void *)(v19 + 8 * v4);
          if (!v7) {
            break;
          }
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v8 = v6 + 4;
  if (v8 >= v20)
  {
LABEL_32:
    swift_release();
    return;
  }
  uint64_t v7 = *(void *)(v19 + 8 * v8);
  if (v7)
  {
    int64_t v4 = v8;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v4 >= v20) {
      goto LABEL_32;
    }
    uint64_t v7 = *(void *)(v19 + 8 * v4);
    ++v8;
    if (v7) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void *sub_1004E3C90(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101645D70);
  __chkstk_darwin(v2 - 8);
  int64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Destination();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v32 = (char *)&v28 - v9;
  uint64_t v33 = v8;
  uint64_t v10 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(a1 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v35 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v37 = _swiftEmptyArrayStorage;
  int64_t v30 = v14;
  uint64_t v31 = a1 + 56;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_4:
  for (v13 &= v13 - 1; ; uint64_t v13 = (v19 - 1) & v19)
  {
    swift_bridgeObjectRetain();
    Destination.init(stringRepresentation:)();
    if ((*v15)(v4, 1, v5) == 1)
    {
      unint64_t result = (void *)sub_10001DAB4((uint64_t)v4, &qword_101645D70);
      if (v13) {
        goto LABEL_4;
      }
    }
    else
    {
      NSString v21 = *v35;
      uint64_t v22 = v32;
      (*v35)(v32, v4, v5);
      uint64_t v34 = v21;
      v21(v36, v22, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v37 = (void *)sub_100A6F818(0, v37[2] + 1, 1, (unint64_t)v37);
      }
      unint64_t v24 = v37[2];
      unint64_t v23 = v37[3];
      unint64_t v25 = v24 + 1;
      int64_t v14 = v30;
      uint64_t v10 = v31;
      if (v24 >= v23 >> 1)
      {
        unint64_t v29 = v24 + 1;
        unint64_t v27 = (void *)sub_100A6F818(v23 > 1, v24 + 1, 1, (unint64_t)v37);
        unint64_t v25 = v29;
        uint64_t v37 = v27;
      }
      uint64_t v26 = v37;
      v37[2] = v25;
      unint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v34)((char *)v26+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v24, v36, v5);
      if (v13) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v18 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v14) {
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)(v10 + 8 * v18);
    ++v17;
    if (!v19)
    {
      int64_t v17 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void *)(v10 + 8 * v17);
      if (!v19)
      {
        int64_t v17 = v18 + 2;
        if (v18 + 2 >= v14) {
          goto LABEL_29;
        }
        uint64_t v19 = *(void *)(v10 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v18 + 3;
          if (v18 + 3 >= v14) {
            goto LABEL_29;
          }
          uint64_t v19 = *(void *)(v10 + 8 * v17);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v14)
  {
LABEL_29:
    swift_release();
    return v37;
  }
  uint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
    int64_t v17 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)(v10 + 8 * v17);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004E4044(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Destination();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v39 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v43 = v3 + 16;
  uint64_t v42 = v3 + 32;
  int64_t v40 = (unint64_t)(v10 + 63) >> 6;
  v41 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  unint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v35 = v8;
  uint64_t v36 = a1;
  if (v12) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v17 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v17 < v40)
    {
      unint64_t v18 = *(void *)(v39 + 8 * v17);
      ++v14;
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v40) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v39 + 8 * v14);
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 2;
      if (v17 + 2 >= v40) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v39 + 8 * v14);
      if (v18) {
        goto LABEL_22;
      }
      int64_t v14 = v17 + 3;
      if (v17 + 3 >= v40) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v39 + 8 * v14);
      if (v18)
      {
LABEL_22:
        unint64_t v12 = (v18 - 1) & v18;
        for (unint64_t i = __clz(__rbit64(v18)) + (v14 << 6); ; unint64_t i = v15 | (v14 << 6))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(void *)(a1 + 48) + *(void *)(v3 + 72) * i, v2);
          (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
          uint64_t v20 = Destination.destination.getter();
          uint64_t v22 = v21;
          v23._countAndFlagsBits = 0x3A6F746C69616DLL;
          v23._object = (void *)0xE700000000000000;
          if (String.hasPrefix(_:)(v23))
          {
            int v37 = 0;
          }
          else
          {
            v24._countAndFlagsBits = 980182388;
            v24._object = (void *)0xE400000000000000;
            if (String.hasPrefix(_:)(v24))
            {
              int v29 = 1;
            }
            else
            {
              v25._countAndFlagsBits = 0x3A6E656B6F74;
              v25._object = (void *)0xE600000000000000;
              if (String.hasPrefix(_:)(v25)
                || (v26._countAndFlagsBits = 0x6B6F742D666C6573,
                    v26._object = (void *)0xEB000000003A6E65,
                    String.hasPrefix(_:)(v26)))
              {
                int v29 = 2;
              }
              else
              {
                v27._countAndFlagsBits = 0x3A656369766564;
                v27._object = (void *)0xE700000000000000;
                if (String.hasPrefix(_:)(v27))
                {
                  int v29 = 3;
                }
                else
                {
                  v28._countAndFlagsBits = 0x3A6E6F6973736573;
                  v28._object = (void *)0xE800000000000000;
                  if (!String.hasPrefix(_:)(v28))
                  {
                    swift_bridgeObjectRelease();
                    uint64_t result = (*v41)(v6, v2);
                    if (!v12) {
                      goto LABEL_7;
                    }
                    goto LABEL_6;
                  }
                  int v29 = 4;
                }
              }
            }
            int v37 = v29;
          }
          (*v41)(v6, v2);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100A6F880(0, v38[2] + 1, 1, v38);
            unint64_t v38 = (void *)result;
          }
          unint64_t v31 = v38[2];
          unint64_t v30 = v38[3];
          if (v31 >= v30 >> 1)
          {
            uint64_t result = (uint64_t)sub_100A6F880((void *)(v30 > 1), v31 + 1, 1, v38);
            unint64_t v38 = (void *)result;
          }
          int64_t v32 = v38;
          v38[2] = v31 + 1;
          uint64_t v33 = &v32[3 * v31];
          *((unsigned char *)v33 + 32) = v37;
          v33[5] = v20;
          v33[6] = v22;
          uint64_t v8 = v35;
          a1 = v36;
          if (!v12) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v15 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }
      }
      int64_t v19 = v17 + 4;
      if (v19 < v40)
      {
        unint64_t v18 = *(void *)(v39 + 8 * v19);
        if (v18)
        {
          int64_t v14 = v19;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v14 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_43;
          }
          if (v14 >= v40) {
            break;
          }
          unint64_t v18 = *(void *)(v39 + 8 * v14);
          ++v19;
          if (v18) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_41:
    swift_release();
    return (uint64_t)v38;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void *sub_1004E44B8(uint64_t a1, uint64_t *a2)
{
  v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = __chkstk_darwin(v6);
  int64_t v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v38 = (char *)&v38 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v43 = v9;
  uint64_t v44 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v45 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v46 = a1;
  unint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v42 = v9 + 16;
  unint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v39 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v18 = 0;
  v41 = _swiftEmptyArrayStorage;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v21 = v18 + 1;
    if (!__OFADD__(v18, 1))
    {
      if (v21 < v45)
      {
        unint64_t v22 = *(void *)(v44 + 8 * v21);
        ++v18;
        if (v22) {
          goto LABEL_23;
        }
        int64_t v18 = v21 + 1;
        if (v21 + 1 >= v45) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v44 + 8 * v18);
        if (v22) {
          goto LABEL_23;
        }
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v44 + 8 * v18);
        if (v22) {
          goto LABEL_23;
        }
        int64_t v18 = v21 + 3;
        if (v21 + 3 >= v45) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v44 + 8 * v18);
        if (v22)
        {
LABEL_23:
          unint64_t v14 = (v22 - 1) & v22;
          for (unint64_t i = __clz(__rbit64(v22)) + (v18 << 6); ; unint64_t i = v19 | (v18 << 6))
          {
            uint64_t v24 = *v47;
            if (!*(void *)(*v47 + 16)) {
              break;
            }
            uint64_t v25 = *(void *)(v46 + 48) + 24 * i;
            uint64_t v26 = *(void *)(v25 + 16);
            uint64_t v27 = *(void *)(v25 + 8);
            unsigned __int8 v28 = *(unsigned char *)v25;
            swift_bridgeObjectRetain();
            unint64_t v29 = sub_100724500(v28, v27, v26);
            if (v30)
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v5, *(void *)(v24 + 56) + *(void *)(v43 + 72) * v29, v6);
              uint64_t v31 = 0;
            }
            else
            {
              uint64_t v31 = 1;
            }
            (*v15)(v5, v31, 1, v6);
            swift_bridgeObjectRelease();
            if ((*v16)(v5, 1, v6) == 1) {
              goto LABEL_6;
            }
            int64_t v32 = *v39;
            uint64_t v33 = v38;
            (*v39)(v38, v5, v6);
            v32(v40, v33, v6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v41 = (void *)sub_100A6F668(0, v41[2] + 1, 1, (unint64_t)v41);
            }
            unint64_t v35 = v41[2];
            unint64_t v34 = v41[3];
            if (v35 >= v34 >> 1) {
              v41 = (void *)sub_100A6F668(v34 > 1, v35 + 1, 1, (unint64_t)v41);
            }
            uint64_t v36 = v40;
            int v37 = v41;
            v41[2] = v35 + 1;
            uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v32)((char *)v37+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v35, v36, v6);
            if (!v14) {
              goto LABEL_8;
            }
LABEL_7:
            unint64_t v19 = __clz(__rbit64(v14));
            v14 &= v14 - 1;
          }
          (*v15)(v5, 1, 1, v6);
LABEL_6:
          uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
          if (!v14) {
            continue;
          }
          goto LABEL_7;
        }
        int64_t v23 = v21 + 4;
        if (v23 < v45)
        {
          unint64_t v22 = *(void *)(v44 + 8 * v23);
          if (v22)
          {
            int64_t v18 = v23;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v18 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_37;
            }
            if (v18 >= v45) {
              break;
            }
            unint64_t v22 = *(void *)(v44 + 8 * v18);
            ++v23;
            if (v22) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_35:
      swift_release();
      return v41;
    }
    break;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void *sub_1004E4944(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    int v14 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 24 * v10);
    if ((v14 - 2) >= 4)
    {
      if (v14)
      {
        swift_bridgeObjectRetain();
        v18._countAndFlagsBits = 980182388;
        v18._object = (void *)0xE400000000000000;
        String.deletingPrefix(_:)(v18);
        NSString v16 = String._bridgeToObjectiveC()();
        int64_t v17 = &selRef_handleWithPhoneNumber_;
      }
      else
      {
        swift_bridgeObjectRetain();
        v15._countAndFlagsBits = 0x3A6F746C69616DLL;
        v15._object = (void *)0xE700000000000000;
        String.deletingPrefix(_:)(v15);
        NSString v16 = String._bridgeToObjectiveC()();
        int64_t v17 = &selRef_handleWithEmailAddress_;
      }
      swift_bridgeObjectRelease();
      id v19 = [self *v17:v16];
      swift_bridgeObjectRelease();

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 >= v6) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_1004E4BC4(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v10 - 1) & v10;
LABEL_5:
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_100444F00(v8);
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1004E4D34(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000B7A5C(0, v1, 0);
    uint64_t v3 = (void *)(a1 + 184);
    do
    {
      char v4 = *((unsigned char *)v3 - 16);
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1) {
        sub_1000B7A5C(v8 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      int64_t v9 = &_swiftEmptyArrayStorage[3 * v7];
      *((unsigned char *)v9 + 32) = v4;
      v9[5] = v6;
      v9[6] = v5;
      v3 += 20;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

int64_t sub_1004E4E24(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (int64_t)v3;
  }
  uint64_t v4 = a1;
  sub_1000B7E98(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  int64_t result = sub_10115FE18(v4);
  int64_t v6 = result;
  int v8 = v7;
  char v10 = v9 & 1;
  uint64_t v28 = v4;
  uint64_t v29 = v4 + 56;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v4 + 32))
  {
    if (((*(void *)(v29 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_19;
    }
    if (*(_DWORD *)(v4 + 36) != v8) {
      goto LABEL_20;
    }
    int64_t v11 = v3;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v6;
    unsigned __int8 v13 = *(unsigned char *)v12;
    uint64_t v15 = *(void *)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v16 = *a2;
    uint64_t v17 = *(void *)(*a2 + 16);
    swift_bridgeObjectRetain();
    unsigned __int8 v32 = v13;
    char v33 = v10;
    uint64_t v31 = v15;
    if (v17)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v18 = sub_100724500(v13, v15, v14);
      if (v19)
      {
        uint64_t v20 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v18);
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        sub_1000361E0(*v20, v21);
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v21 = 0xF000000000000000;
      }
      uint64_t v3 = v11;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v21 = 0xF000000000000000;
      uint64_t v3 = v11;
    }
    unint64_t v24 = v3[2];
    unint64_t v23 = v3[3];
    if (v24 >= v23 >> 1) {
      sub_1000B7E98(v23 > 1, v24 + 1, 1);
    }
    v3[2] = v24 + 1;
    uint64_t v25 = &v3[5 * v24];
    *((unsigned char *)v25 + 32) = v32;
    v25[5] = v31;
    v25[6] = v14;
    v25[7] = v22;
    v25[8] = v21;
    uint64_t v4 = v28;
    int64_t result = sub_10052CBA0(v6, v8, v33 & 1, v28);
    int64_t v6 = result;
    int v8 = v26;
    char v10 = v27 & 1;
    if (!--v2)
    {
      sub_1001A1CB8(result, v26, v27 & 1);
      return (int64_t)v3;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1004E5040@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  uint64_t v13 = sub_10000588C(&qword_101644998);
  uint64_t v14 = a5 + *(int *)(v13 + 40);
  UUID.init()();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100010324(v9, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15, v9);
  v29[3] = &type metadata for Bool;
  LOBYTE(v29[0]) = 1;
  uint64_t v16 = (void (*)(char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v29, (uint64_t)v12);
  v16(v28, 0);
  sub_10000588C(&qword_1016552B0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  *(void *)(v17 + 32) = v27;
  *(void *)(v17 + 40) = a4;
  v29[0] = v17;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101654A30);
  sub_100176E3C();
  uint64_t v18 = v29[5];
  uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v21 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
  }
  else
  {
    uint64_t v23 = v19;
    uint64_t v24 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v25 = (uint64_t *)(a5 + *(int *)(v13 + 44));
    uint64_t *v25 = v23;
    v25[1] = v24;
  }
  return result;
}

uint64_t sub_1004E52F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *a3 = a1;
  uint64_t v10 = sub_10000588C(&qword_101645808);
  uint64_t v11 = (char *)a3 + *(int *)(v10 + 40);
  UUID.init()();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v6, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
  v27[3] = &type metadata for Bool;
  LOBYTE(v27[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v27, (uint64_t)v9);
  v13(v26, 0);
  sub_10000588C(&qword_1016483A0);
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)a2;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  *(_OWORD *)(v14 + 32) = v15;
  long long v17 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  *(_OWORD *)(v14 + 64) = v17;
  *(void *)(v14 + 80) = *(void *)(a2 + 48);
  v27[0] = v14;
  sub_100552904(a2);
  sub_10000588C(&qword_101641CA0);
  sub_100552954((unint64_t *)&qword_101641CA8, &qword_101641CA0, (void (*)(void))sub_100341314);
  uint64_t v18 = v27[5];
  uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v18)
  {
    swift_release();
    sub_1005529C0(a2);
    swift_bridgeObjectRelease();
    uint64_t v21 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v11, v21);
  }
  else
  {
    uint64_t v23 = v19;
    uint64_t v24 = v20;
    swift_release();
    sub_1005529C0(a2);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = (void *)((char *)a3 + *(int *)(v10 + 44));
    uint64_t *v25 = v23;
    v25[1] = v24;
  }
  return result;
}

uint64_t sub_1004E55E8()
{
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x80000001013F4260;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x6F6973726576202CLL;
  v2._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x69746E656469202CLL;
  v4._object = (void *)0xEE00203A72656966;
  String.append(_:)(v4);
  uint64_t v5 = sub_10000588C(&qword_101644998);
  type metadata accessor for UUID();
  sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x64616F6C79617020;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  uint64_t v8 = (uint64_t *)(v0 + *(int *)(v5 + 44));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000361E0(*v8, v10);
  v11._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v9, v10);
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t sub_1004E57F0()
{
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x80000001013F4260;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x6F6973726576202CLL;
  v2._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x69746E656469202CLL;
  v4._object = (void *)0xEE00203A72656966;
  String.append(_:)(v4);
  uint64_t v5 = sub_10000588C(&qword_101645808);
  type metadata accessor for UUID();
  sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x64616F6C79617020;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  uint64_t v8 = (uint64_t *)(v0 + *(int *)(v5 + 44));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000361E0(*v8, v10);
  v11._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v9, v10);
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t sub_1004E59EC(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v26 = *v2;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v25 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v23 = (char *)&v22 - v10;
  Swift::String v11 = *(void (**)(void))(v7 + 16);
  v11();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  sub_100552A0C(a1, (uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  sub_100551764((uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  long long v15 = v23;
  long long v16 = v24;
  ((void (*)(char *, char *, uint64_t))v11)(v24, v23, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v18 = (v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v17, v16, v6);
  uint64_t v20 = (uint64_t (**)())(v19 + v18);
  *uint64_t v20 = sub_100546170;
  v20[1] = (uint64_t (*)())v14;
  *(void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = v26;
  swift_retain();
  swift_retain();
  sub_10000588C((uint64_t *)&unk_101638DC0);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  return swift_release();
}

uint64_t sub_1004E5D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v105 = a2;
  uint64_t v106 = a3;
  uint64_t v4 = type metadata accessor for ShareRecord();
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v94 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v103 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v100 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v101 = *(void *)(v8 - 8);
  uint64_t v102 = v8;
  __chkstk_darwin(v8);
  v99 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1 + *(int *)(v4 + 24);
  (*(void (**)(char *, uint64_t))(v19 + 16))(v17, v18);
  sub_1004F84B0(1, 1, (uint64_t)v17, (uint64_t)&aBlock);
  v93 = v14;
  uint64_t v90 = v11;
  uint64_t v95 = v12;
  uint64_t v85 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v6;
  int v84 = aBlock;
  v83 = (NSURL *)v110;
  v91 = v111;
  v92 = (void (*)(void, void))v112;
  sub_100ACCD98(v18, (uint64_t)&v107);
  if (v108)
  {
    sub_10001CEB0(&v107, (uint64_t)&aBlock);
    uint64_t v20 = v112;
    uint64_t v21 = v113;
    sub_10001CD44(&aBlock, (uint64_t)v112);
    if ((*((uint64_t (**)(void *, uint64_t (*)()))v21 + 14))(v20, v21)) {
      uint64_t v22 = &off_1015A1238;
    }
    else {
      uint64_t v22 = &off_1015A1260;
    }
    Swift::Int v89 = sub_100DF2D1C((uint64_t)v22);
    uint64_t v23 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
  }
  else
  {
    sub_10001DAB4((uint64_t)&v107, (uint64_t *)&unk_10163BBE0);
    uint64_t v23 = sub_100DF2D1C((uint64_t)&off_1015A1288);
    Swift::Int v89 = v23;
  }
  uint64_t v24 = a1;
  uint64_t v25 = v4;
  uint64_t v26 = (uint64_t)v93;
  uint64_t v27 = *(void *)(v104 + 416);
  __chkstk_darwin(v23);
  v93 = v28;
  uint64_t v29 = v90;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v87 = 0;
  BOOL v30 = sub_1010E6390(v26, 0);
  uint64_t v32 = v95 + 8;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v31(v26, v29);
  v88 = v31;
  uint64_t v95 = v32;
  if (v30)
  {
    uint64_t v33 = sub_1010E6390(v24 + *(int *)(v25 + 28), 1);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_101342130;
      uint64_t v35 = UUID.uuidString.getter();
      uint64_t v37 = v36;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_10000B4CC();
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 40) = v37;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v38 = v97;
      uint64_t v39 = v96;
      uint64_t v40 = v98;
      (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, enum case for DispatchQoS.QoSClass.default(_:), v98);
      v41 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      uint64_t v42 = swift_allocObject();
      uint64_t v43 = v106;
      *(void *)(v42 + 16) = v105;
      *(void *)(v42 + 24) = v43;
      v113 = sub_10041ED88;
      uint64_t v114 = v42;
      aBlock = _NSConcreteStackBlock;
      uint64_t v110 = 1107296256;
      v111 = sub_1004B5480;
      v112 = &unk_1015C8430;
      uint64_t v44 = _Block_copy(&aBlock);
      swift_retain();
      int64_t v45 = v99;
      static DispatchQoS.unspecified.getter();
      *(void *)&long long v107 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v46 = v100;
      uint64_t v47 = v86;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v44);

      sub_10001CFB8((uint64_t)v91, (unint64_t)v92);
      goto LABEL_20;
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v82 = qword_10170EFB0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_101342130;
    uint64_t v49 = UUID.uuidString.getter();
    uint64_t v51 = v50;
    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 64) = sub_10000B4CC();
    *(void *)(v48 + 32) = v49;
    *(void *)(v48 + 40) = v51;
    os_log(_:dso:log:_:_:)();
    uint64_t v33 = swift_bridgeObjectRelease();
  }
  uint64_t v82 = v5;
  __chkstk_darwin(v33);
  uint64_t v52 = (uint64_t)v93;
  OS_dispatch_queue.sync<A>(execute:)();
  BOOL v53 = sub_1010E6390(v26, 1);
  v54 = v88;
  v88(v26, v29);
  if (v53)
  {
    static Date.trustedNow.getter(v26);
    sub_1010E5A24(v52, v26, 1);
    v54(v26, v29);
    v55 = (unsigned __int8 *)(v24 + *(int *)(v25 + 36));
    uint64_t v56 = *((void *)v55 + 1);
    uint64_t v57 = *((void *)v55 + 2);
    unint64_t v58 = *(void *)(v27 + 16);
    int v59 = *v55;
    uint64_t v60 = v85;
    sub_100552A0C(v24, v85, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    unint64_t v61 = (*(unsigned __int8 *)(v94 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    unint64_t v62 = (v82 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = v104;
    sub_100551764(v60, v63 + v61, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    v64 = (void *)(v63 + v62);
    uint64_t v65 = v106;
    void *v64 = v105;
    v64[1] = v65;
    swift_retain();
    swift_retain();
    unint64_t v66 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v81 = v58;
    v67 = v91;
    v68 = v92;
    sub_1004FF81C(v84, v83, (void (*)(void, void, void))v91, v92, v66, v59, v56, v57, 0, v81, 0, 0, v89, (unsigned int (*)(uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton, 0, (void (*)(void ***))sub_10052EE54, (void (*)(void ***))v63);
    sub_10001CFB8((uint64_t)v67, (unint64_t)v68);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_101342130;
  uint64_t v71 = UUID.uuidString.getter();
  uint64_t v73 = v72;
  *(void *)(v70 + 56) = &type metadata for String;
  *(void *)(v70 + 64) = sub_10000B4CC();
  *(void *)(v70 + 32) = v71;
  *(void *)(v70 + 40) = v73;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v74 = v97;
  v75 = v96;
  uint64_t v76 = v98;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, enum case for DispatchQoS.QoSClass.default(_:), v98);
  v77 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
  uint64_t v78 = swift_allocObject();
  uint64_t v79 = v106;
  *(void *)(v78 + 16) = v105;
  *(void *)(v78 + 24) = v79;
  v113 = sub_10041ED88;
  uint64_t v114 = v78;
  aBlock = _NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  v111 = sub_1004B5480;
  v112 = &unk_1015C83B8;
  v80 = _Block_copy(&aBlock);
  swift_retain();
  int64_t v45 = v99;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v107 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v46 = v100;
  uint64_t v47 = v86;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  sub_10001CFB8((uint64_t)v91, (unint64_t)v92);
  _Block_release(v80);

LABEL_20:
  (*(void (**)(char *, uint64_t))(v103 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v45, v102);
  return swift_release();
}

uint64_t sub_1004E6E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = (NSURL *)type metadata accessor for DispatchWorkItemFlags();
  reserved = v5[-1]._reserved;
  BOOL v30 = v5;
  __chkstk_darwin(v5);
  v27[3] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  v27[2] = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  v27[1] = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1 + *(int *)(v9 + 20));
  sub_1004F84B0(3, 1, (uint64_t)v14, (uint64_t)aBlock);
  uint64_t v16 = (void (*)(void, void, void))aBlock[2];
  unint64_t v17 = (void (*)(void, void))aBlock[3];
  int v18 = LOBYTE(aBlock[0]);
  uint64_t v19 = (unsigned __int8 *)(a1 + *(int *)(v9 + 28));
  reserved = (void *)*((void *)v19 + 1);
  BOOL v30 = (NSURL *)aBlock[1];
  uint64_t v28 = *((void *)v19 + 2);
  LODWORD(v9) = *v19;
  sub_100552A0C(a1, (uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v27[0];
  sub_100551764((uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for SharedBeaconRecord);
  uint64_t v22 = (void *)(v21 + ((v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v22 = v31;
  v22[1] = a3;
  swift_retain();
  swift_retain();
  unint64_t v23 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = sub_101158790((uint64_t)&off_1015A12B0);
  uint64_t v25 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  sub_1004FF81C(v18, v30, v16, v17, v23, v9, (uint64_t)reserved, v28, 0, 0, 1, 0, v24, v25, 0, (void (*)(void ***))sub_100545850, (void (*)(void ***))v21);
  sub_10001CFB8((uint64_t)v16, (unint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004E75CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v4 = (NSURL *)type metadata accessor for DispatchWorkItemFlags();
  reserved = v4[-1]._reserved;
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v36 = *((void *)v9 - 1);
  uint64_t v10 = *(void *)(v36 + 64);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  uint64_t v12 = MyAccessoryFamilyShareResponseEnvelope - 8;
  uint64_t v13 = __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = a1 + v9[5];
  uint64_t v19 = type metadata accessor for UUID();
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  v20(&v17[*(int *)(v12 + 28)], a1 + v9[6], v19);
  sub_100552A0C((uint64_t)v17, (uint64_t)v15, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  sub_1004F879C(3, 2, (uint64_t)v15, (uint64_t)aBlock);
  uint64_t v21 = (void (*)(void, void, void))aBlock[2];
  uint64_t v22 = (void (*)(void, void))aBlock[3];
  LODWORD(v20) = LOBYTE(aBlock[0]);
  unint64_t v23 = (unsigned __int8 *)(a1 + v9[7]);
  reserved = (void *)*((void *)v23 + 1);
  uint64_t v47 = (NSURL *)aBlock[1];
  uint64_t v45 = *((void *)v23 + 2);
  LODWORD(v44) = *v23;
  uint64_t v24 = a1;
  uint64_t v25 = v37;
  sub_100552A0C(v24, v37, type metadata accessor for SharedBeaconRecord);
  unint64_t v26 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v27 = (v10 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v38;
  sub_100551764(v25, v28 + v26, type metadata accessor for SharedBeaconRecord);
  uint64_t v29 = (void *)(v28 + v27);
  uint64_t v30 = v49;
  void *v29 = v48;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  unint64_t v31 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = sub_101158790((uint64_t)&off_1015A12D8);
  uint64_t v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  sub_1004FF81C((int)v20, v47, v21, v22, v31, (int)v44, (uint64_t)reserved, v45, 0, 0, 1, 0, v32, v33, 0, (void (*)(void ***))sub_1005458EC, (void (*)(void ***))v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8((uint64_t)v21, (unint64_t)v22);
  return sub_100552C2C((uint64_t)v17, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_1004E7DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))
{
  return a9(a1, a2, a3, a4, a5, *(unsigned __int8 *)a6, a6[1], a6[2], a6[3], a7, a8);
}

void sub_1004E7E1C(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, void (*a4)(void, void)@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, long long a14)
{
  v206 = (char *)a5;
  uint64_t v15 = v14;
  unint64_t v197 = a8;
  uint64_t v199 = a7;
  uint64_t v191 = a9;
  os_log_t v202 = *v15;
  uint64_t v21 = sub_10000588C(&qword_101638CF0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  v193 = (char *)&v180 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v198 = (char *)&v180 - v24;
  uint64_t v25 = type metadata accessor for UUID();
  v204 = *(void **)(v25 - 8);
  uint64_t v205 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  v192 = (char *)&v180 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  v194 = (char *)&v180 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v180 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v180 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  v200 = (char *)&v180 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v180 - v38;
  unsigned __int8 v210 = a1;
  uint64_t v211 = a2;
  v212 = a3;
  v213 = a4;
  int64_t v40 = *(void *)(a6 + 16);
  uint64_t v41 = _swiftEmptyArrayStorage;
  v201 = (void (*)(void, void, void))v32;
  if (v40)
  {
    v203 = v35;
    uint64_t v42 = (char *)&v180 - v38;
    uint64_t v43 = v15;
    os_log_t v208 = (os_log_t)_swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v40, 0);
    uint64_t v41 = v208;
    uint64_t v44 = (objc_class **)(a6 + 48);
    do
    {
      uint64_t v46 = *(v44 - 1);
      uint64_t v45 = *v44;
      os_log_t v208 = v41;
      unint64_t isa = (unint64_t)v41[2].isa;
      unint64_t v47 = (unint64_t)v41[3].isa;
      swift_bridgeObjectRetain();
      if (isa >= v47 >> 1)
      {
        sub_1000B6ED0(v47 > 1, isa + 1, 1);
        uint64_t v41 = v208;
      }
      v41[2].unint64_t isa = (Class)(isa + 1);
      uint64_t v49 = &v41[2 * isa];
      v49[4].unint64_t isa = v46;
      v49[5].unint64_t isa = v45;
      v44 += 3;
      --v40;
    }
    while (v40);
    uint64_t v15 = v43;
    uint64_t v39 = v42;
    uint64_t v35 = v203;
  }
  uint64_t v50 = sub_101158614((uint64_t)v41);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10000588C(&qword_101647E50);
  sub_100062734(&qword_101647E58, &qword_101647E50);
  unint64_t v51 = v207;
  uint64_t v52 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v207 = v53;
  v190 = v39;
  uint64_t v195 = v50;
  v189 = v15;
  uint64_t v196 = v52;
  uint64_t v187 = 0;
  swift_release();
  long long v179 = a14;
  unint64_t v54 = 0x6567617373656DLL;
  if (a11) {
    unint64_t v54 = 0xD000000000000017;
  }
  unint64_t v186 = v54;
  unint64_t v55 = 0x80000001013FF860;
  if ((a11 & 1) == 0) {
    unint64_t v55 = 0xE700000000000000;
  }
  unint64_t v188 = v55;
  uint64_t v56 = v199;
  unint64_t v197 = sub_10052F868((uint64_t)v206, 0, v199, v197, a10 & 1, a11 & 1, a12, a13, v179);
  uint64_t v57 = v56;
  uint64_t v58 = (uint64_t)v198;
  sub_10001D074(v57, (uint64_t)v198, &qword_101638CF0);
  int v59 = v204;
  uint64_t v60 = v205;
  uint64_t v61 = (uint64_t)(v204 + 6);
  unint64_t v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v204[6];
  unsigned int v63 = v62(v58, 1, v205);
  uint64_t v199 = v61;
  v185 = v62;
  if (v63 == 1)
  {
    sub_10001DAB4(v58, &qword_101638CF0);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_100010324(v64, (uint64_t)qword_10170F168);
    LODWORD(v198) = v210;
    uint64_t v65 = (uint64_t)v212;
    v200 = (char *)v211;
    unint64_t v66 = (unint64_t)v213;
    ((void (*)(void, char *, uint64_t))v59[2])(v201, v206, v60);
    swift_bridgeObjectRetain();
    sub_1000361E0(v65, v66);
    swift_bridgeObjectRetain();
    unint64_t v67 = v188;
    swift_bridgeObjectRetain();
    sub_1000361E0(v65, v66);
    v68 = v59;
    v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    LODWORD(v203) = v70;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (char *)swift_slowAlloc();
      v190 = v72;
      *(_DWORD *)uint64_t v71 = 136316162;
      os_log_t v208 = v202;
      v209 = v72;
      sub_10000588C(&qword_101647E70);
      uint64_t v73 = String.init<A>(describing:)();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v73, v74, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v186, v67, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 22) = 2080;
      uint64_t v75 = sub_10052A690(v198, (uint64_t)v200, v65, v66);
      unint64_t v77 = v76;
      sub_10001CFB8(v65, v66);
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v75, v77, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v65, v66);
      *(_WORD *)(v71 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v78 = Set.description.getter();
      unint64_t v80 = v79;
      swift_bridgeObjectRelease();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v78, v80, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      unint64_t v81 = v201;
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v82, v83, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v206 = (char *)v204[1];
      ((void (*)(void (*)(void, void, void), uint64_t))v206)(v81, v205);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v203, "%s: Sending %s: %s to %s with identifier: %s", (uint8_t *)v71, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v65, v66);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v65, v66);
      swift_bridgeObjectRelease_n();
      v206 = (char *)v68[1];
      ((void (*)(void (*)(void, void, void), uint64_t))v206)(v201, v60);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v59[4])(v190, v58, v60);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    sub_100010324(v84, (uint64_t)qword_10170F168);
    LODWORD(v198) = v210;
    uint64_t v85 = v212;
    uint64_t v184 = v211;
    uint64_t v86 = v213;
    uint64_t v87 = (void (*)(uint64_t, char *, uint64_t))v59[2];
    v87((uint64_t)v200, v190, v60);
    v203 = v35;
    v87((uint64_t)v35, v206, v60);
    sub_1000361E0((uint64_t)v85, (unint64_t)v86);
    swift_bridgeObjectRetain();
    v201 = v85;
    v206 = (char *)v86;
    sub_1000361E0((uint64_t)v85, (unint64_t)v86);
    swift_bridgeObjectRetain();
    unint64_t v88 = v188;
    swift_bridgeObjectRetain();
    Swift::Int v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.default.getter();
    int v91 = v90;
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v92 = swift_slowAlloc();
      v93 = (void *)swift_slowAlloc();
      v183 = v93;
      *(_DWORD *)uint64_t v92 = 136316418;
      int v182 = v91;
      os_log_t v208 = v202;
      v209 = (char *)v93;
      sub_10000588C(&qword_101647E70);
      os_log_t v181 = v89;
      uint64_t v94 = String.init<A>(describing:)();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v94, v95, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v186, v88, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v92 + 22) = 2080;
      v96 = v201;
      uint64_t v97 = (void (*)(void, void))v206;
      uint64_t v98 = sub_10052A690(v198, v184, (uint64_t)v201, (unint64_t)v206);
      unint64_t v100 = v99;
      sub_10001CFB8((uint64_t)v96, (unint64_t)v97);
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v98, v100, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v96, (unint64_t)v97);
      *(_WORD *)(v92 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v101 = Set.description.getter();
      unint64_t v103 = v102;
      swift_bridgeObjectRelease();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v101, v103, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v104 = (uint64_t)v200;
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v105, v106, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      long long v107 = (void (*)(uint64_t, uint64_t))v204[1];
      v107(v104, v60);
      *(_WORD *)(v92 + 52) = 2080;
      uint64_t v108 = v203;
      uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v109, v110, (uint64_t *)&v209);
      v111 = &qword_101637000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v107((uint64_t)v108, v60);
      os_log_t v112 = v181;
      _os_log_impl((void *)&_mh_execute_header, v181, (os_log_type_t)v182, "%s: Sending %s: %s to %s\nin response to %s with identifier: %s", (uint8_t *)v92, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v206 = (char *)v107;
      v107((uint64_t)v190, v60);
      unint64_t v113 = v197;
      goto LABEL_26;
    }
    uint64_t v114 = v201;
    v115 = (void (*)(void, void))v206;
    sub_10001CFB8((uint64_t)v201, (unint64_t)v206);

    v116 = (void (*)(char *, uint64_t))v59[1];
    v116(v203, v60);
    v116(v200, v60);
    swift_bridgeObjectRelease_n();
    sub_10001CFB8((uint64_t)v114, (unint64_t)v115);
    swift_bridgeObjectRelease_n();
    v206 = (char *)v116;
    v116(v190, v60);
  }
  unint64_t v113 = v197;
  v111 = &qword_101637000;
LABEL_26:
  if (v111[123] != -1) {
    swift_once();
  }
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v118 = sub_100010324(v117, (uint64_t)qword_10170F168);
  swift_bridgeObjectRetain_n();
  v203 = (char *)v118;
  v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v119, v120))
  {
    uint64_t v121 = swift_slowAlloc();
    v122 = (void (*)(void, void, void))swift_slowAlloc();
    v201 = v122;
    *(_DWORD *)uint64_t v121 = 136315394;
    os_log_t v208 = v202;
    v209 = (char *)v122;
    sub_10000588C(&qword_101647E70);
    uint64_t v123 = String.init<A>(describing:)();
    os_log_t v208 = (os_log_t)sub_1008FA0F0(v123, v124, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v125 = Dictionary.description.getter();
    unint64_t v127 = v126;
    swift_bridgeObjectRelease();
    os_log_t v208 = (os_log_t)sub_1008FA0F0(v125, v127, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v128 = v113;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "%s: IDSSendMessageOptions: %s", (uint8_t *)v121, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v128 = v113;
  }
  type metadata accessor for AnalyticsEvent(0);
  v129 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v129 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  v130 = &v129[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v131 = type metadata accessor for DispatchTime();
  v132 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56);
  v132(v130, 1, 1, v131);
  v132(&v129[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v131);
  *((void *)v129 + 15) = 0xD000000000000026;
  *((void *)v129 + 16) = 0x80000001013FF810;
  type metadata accessor for Transaction();
  unsigned __int8 v133 = v210;
  uint64_t v135 = v211;
  uint64_t v134 = (uint64_t)v212;
  unint64_t v136 = (unint64_t)v213;
  uint64_t v137 = swift_allocObject();
  *(void *)(v137 + 16) = v129;
  *(unsigned char *)(v137 + 24) = v133;
  *(void *)(v137 + 32) = v135;
  *(void *)(v137 + 40) = v134;
  *(void *)(v137 + 48) = v136;
  sub_1000361E0(v134, v136);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  os_log_t v138 = v189[8];
  Class v139 = Data._bridgeToObjectiveC()().super.isa;
  sub_100529FB0(v195);
  swift_bridgeObjectRelease();
  Class v140 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100653C34(v128);
  swift_bridgeObjectRelease();
  Class v141 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  os_log_t v208 = 0;
  v209 = 0;
  LODWORD(v134) = [v138 sendData:v139 toDestinations:v140 priority:300 options:v141 identifier:&v208 error:&v209];

  os_log_t v142 = v208;
  v143 = v209;
  v144 = v142;
  v145 = v144;
  if (!v134)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    uint64_t v155 = v196;
    unint64_t v156 = v207;
    goto LABEL_37;
  }
  __chkstk_darwin(v144);
  uint64_t v146 = v196;
  *(&v180 - 4) = (uint64_t)&v210;
  *(&v180 - 3) = v146;
  unint64_t v147 = v207;
  *(void *)&long long v179 = v207;
  uint64_t v149 = (uint64_t)&v148[4];
  v150 = v148 + 16;
  os_unfair_lock_lock(v148 + 16);
  uint64_t v151 = v187;
  sub_10052F2F4(v149);
  if (v151)
  {
    os_unfair_lock_unlock(v150);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v150);
    if (v145)
    {
      uint64_t v187 = 0;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v152 = (uint64_t)v193;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v153 = v205;
      if (v185(v152, 1, v205) != 1)
      {
        v158 = v204;
        v159 = (char *)(v204 + 4);
        v160 = v194;
        v201 = (void (*)(void, void, void))v204[4];
        v201(v194, v152, v153);
        LODWORD(v200) = v210;
        uint64_t v161 = (uint64_t)v212;
        uint64_t v199 = v211;
        unint64_t v162 = (unint64_t)v213;
        v163 = (void (*)(char *, char *, uint64_t))v158[2];
        v164 = v192;
        v163(v192, v160, v153);
        sub_1000361E0(v161, v162);
        sub_1000361E0(v161, v162);
        v165 = Logger.logObject.getter();
        os_log_type_t v166 = static os_log_type_t.default.getter();
        int v167 = v166;
        if (os_log_type_enabled(v165, v166))
        {
          uint64_t v168 = swift_slowAlloc();
          v203 = v159;
          uint64_t v169 = v168;
          v170 = (char *)swift_slowAlloc();
          v198 = v170;
          *(_DWORD *)uint64_t v169 = 136315650;
          LODWORD(v197) = v167;
          os_log_t v208 = v202;
          v209 = v170;
          sub_10000588C(&qword_101647E70);
          os_log_t v202 = v165;
          uint64_t v171 = String.init<A>(describing:)();
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v171, v172, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v169 + 12) = 2080;
          uint64_t v173 = sub_10052A690(v200, v199, v161, v162);
          unint64_t v175 = v174;
          sub_10001CFB8(v161, v162);
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v173, v175, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v161, v162);
          *(_WORD *)(v169 + 22) = 2080;
          sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          v176 = v192;
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter();
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v177, v178, (uint64_t *)&v209);
          uint64_t v153 = v205;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v206)(v176, v153);
          v165 = v202;
          _os_log_impl((void *)&_mh_execute_header, v202, (os_log_type_t)v197, "%s: Sent message %s with identifier: %s", (uint8_t *)v169, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10001CFB8(v196, v207);
          swift_release();
        }
        else
        {
          sub_10001CFB8(v161, v162);
          swift_release();
          sub_10001CFB8(v161, v162);
          ((void (*)(char *, uint64_t))v206)(v164, v153);
          sub_10001CFB8(v196, v207);
        }

        v201(v191, v194, v153);
        goto LABEL_38;
      }
      sub_10001DAB4(v152, &qword_101638CF0);
      sub_10015CEB8();
      swift_allocError();
      void *v154 = 0;
      swift_willThrow();
      swift_release();
      uint64_t v155 = v146;
      unint64_t v156 = v147;
LABEL_37:
      sub_10001CFB8(v155, v156);
LABEL_38:

      return;
    }
    sub_10015CEB8();
    swift_allocError();
    void *v157 = 0;
    swift_willThrow();
    swift_release();
    sub_10001CFB8(v146, v147);
  }
}

void sub_1004E9540(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, void (*a4)(void, void)@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, long long a14)
{
  v206 = (char *)a5;
  uint64_t v15 = v14;
  unint64_t v197 = a8;
  uint64_t v199 = a7;
  uint64_t v191 = a9;
  os_log_t v202 = *v15;
  uint64_t v21 = sub_10000588C(&qword_101638CF0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  v193 = (char *)&v180 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v198 = (char *)&v180 - v24;
  uint64_t v25 = type metadata accessor for UUID();
  v204 = *(void **)(v25 - 8);
  uint64_t v205 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  v192 = (char *)&v180 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  v194 = (char *)&v180 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v180 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v180 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  v200 = (char *)&v180 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v180 - v38;
  unsigned __int8 v210 = a1;
  uint64_t v211 = a2;
  v212 = a3;
  v213 = a4;
  int64_t v40 = *(void *)(a6 + 16);
  uint64_t v41 = _swiftEmptyArrayStorage;
  v201 = (void (*)(void, void, void))v32;
  if (v40)
  {
    v203 = v35;
    uint64_t v42 = (char *)&v180 - v38;
    uint64_t v43 = v15;
    os_log_t v208 = (os_log_t)_swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v40, 0);
    uint64_t v41 = v208;
    uint64_t v44 = (objc_class **)(a6 + 48);
    do
    {
      uint64_t v46 = *(v44 - 1);
      uint64_t v45 = *v44;
      os_log_t v208 = v41;
      unint64_t isa = (unint64_t)v41[2].isa;
      unint64_t v47 = (unint64_t)v41[3].isa;
      swift_bridgeObjectRetain();
      if (isa >= v47 >> 1)
      {
        sub_1000B6ED0(v47 > 1, isa + 1, 1);
        uint64_t v41 = v208;
      }
      v41[2].unint64_t isa = (Class)(isa + 1);
      uint64_t v49 = &v41[2 * isa];
      v49[4].unint64_t isa = v46;
      v49[5].unint64_t isa = v45;
      v44 += 3;
      --v40;
    }
    while (v40);
    uint64_t v15 = v43;
    uint64_t v39 = v42;
    uint64_t v35 = v203;
  }
  uint64_t v50 = sub_101158614((uint64_t)v41);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10000588C(&qword_101647F28);
  sub_100062734(&qword_101647F30, &qword_101647F28);
  unint64_t v51 = v207;
  uint64_t v52 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v207 = v53;
  v190 = v39;
  uint64_t v195 = v50;
  v189 = v15;
  uint64_t v196 = v52;
  uint64_t v187 = 0;
  swift_release();
  long long v179 = a14;
  unint64_t v54 = 0x6567617373656DLL;
  if (a11) {
    unint64_t v54 = 0xD000000000000017;
  }
  unint64_t v186 = v54;
  unint64_t v55 = 0x80000001013FF860;
  if ((a11 & 1) == 0) {
    unint64_t v55 = 0xE700000000000000;
  }
  unint64_t v188 = v55;
  uint64_t v56 = v199;
  unint64_t v197 = sub_10052F868((uint64_t)v206, 0, v199, v197, a10 & 1, a11 & 1, a12, a13, v179);
  uint64_t v57 = v56;
  uint64_t v58 = (uint64_t)v198;
  sub_10001D074(v57, (uint64_t)v198, &qword_101638CF0);
  int v59 = v204;
  uint64_t v60 = v205;
  uint64_t v61 = (uint64_t)(v204 + 6);
  unint64_t v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v204[6];
  unsigned int v63 = v62(v58, 1, v205);
  uint64_t v199 = v61;
  v185 = v62;
  if (v63 == 1)
  {
    sub_10001DAB4(v58, &qword_101638CF0);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_100010324(v64, (uint64_t)qword_10170F168);
    LODWORD(v198) = v210;
    uint64_t v65 = (uint64_t)v212;
    v200 = (char *)v211;
    unint64_t v66 = (unint64_t)v213;
    ((void (*)(void, char *, uint64_t))v59[2])(v201, v206, v60);
    swift_bridgeObjectRetain();
    sub_1000361E0(v65, v66);
    swift_bridgeObjectRetain();
    unint64_t v67 = v188;
    swift_bridgeObjectRetain();
    sub_1000361E0(v65, v66);
    v68 = v59;
    v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    LODWORD(v203) = v70;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (char *)swift_slowAlloc();
      v190 = v72;
      *(_DWORD *)uint64_t v71 = 136316162;
      os_log_t v208 = v202;
      v209 = v72;
      sub_10000588C(&qword_101647F48);
      uint64_t v73 = String.init<A>(describing:)();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v73, v74, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v186, v67, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 22) = 2080;
      uint64_t v75 = sub_10052A690(v198, (uint64_t)v200, v65, v66);
      unint64_t v77 = v76;
      sub_10001CFB8(v65, v66);
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v75, v77, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v65, v66);
      *(_WORD *)(v71 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v78 = Set.description.getter();
      unint64_t v80 = v79;
      swift_bridgeObjectRelease();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v78, v80, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      unint64_t v81 = v201;
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v82, v83, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v206 = (char *)v204[1];
      ((void (*)(void (*)(void, void, void), uint64_t))v206)(v81, v205);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v203, "%s: Sending %s: %s to %s with identifier: %s", (uint8_t *)v71, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v65, v66);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v65, v66);
      swift_bridgeObjectRelease_n();
      v206 = (char *)v68[1];
      ((void (*)(void (*)(void, void, void), uint64_t))v206)(v201, v60);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v59[4])(v190, v58, v60);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    sub_100010324(v84, (uint64_t)qword_10170F168);
    LODWORD(v198) = v210;
    uint64_t v85 = v212;
    uint64_t v184 = v211;
    uint64_t v86 = v213;
    uint64_t v87 = (void (*)(uint64_t, char *, uint64_t))v59[2];
    v87((uint64_t)v200, v190, v60);
    v203 = v35;
    v87((uint64_t)v35, v206, v60);
    sub_1000361E0((uint64_t)v85, (unint64_t)v86);
    swift_bridgeObjectRetain();
    v201 = v85;
    v206 = (char *)v86;
    sub_1000361E0((uint64_t)v85, (unint64_t)v86);
    swift_bridgeObjectRetain();
    unint64_t v88 = v188;
    swift_bridgeObjectRetain();
    Swift::Int v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.default.getter();
    int v91 = v90;
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v92 = swift_slowAlloc();
      v93 = (void *)swift_slowAlloc();
      v183 = v93;
      *(_DWORD *)uint64_t v92 = 136316418;
      int v182 = v91;
      os_log_t v208 = v202;
      v209 = (char *)v93;
      sub_10000588C(&qword_101647F48);
      os_log_t v181 = v89;
      uint64_t v94 = String.init<A>(describing:)();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v94, v95, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v186, v88, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v92 + 22) = 2080;
      v96 = v201;
      uint64_t v97 = (void (*)(void, void))v206;
      uint64_t v98 = sub_10052A690(v198, v184, (uint64_t)v201, (unint64_t)v206);
      unint64_t v100 = v99;
      sub_10001CFB8((uint64_t)v96, (unint64_t)v97);
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v98, v100, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v96, (unint64_t)v97);
      *(_WORD *)(v92 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v101 = Set.description.getter();
      unint64_t v103 = v102;
      swift_bridgeObjectRelease();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v101, v103, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v104 = (uint64_t)v200;
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v105, v106, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      long long v107 = (void (*)(uint64_t, uint64_t))v204[1];
      v107(v104, v60);
      *(_WORD *)(v92 + 52) = 2080;
      uint64_t v108 = v203;
      uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v208 = (os_log_t)sub_1008FA0F0(v109, v110, (uint64_t *)&v209);
      v111 = &qword_101637000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v107((uint64_t)v108, v60);
      os_log_t v112 = v181;
      _os_log_impl((void *)&_mh_execute_header, v181, (os_log_type_t)v182, "%s: Sending %s: %s to %s\nin response to %s with identifier: %s", (uint8_t *)v92, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v206 = (char *)v107;
      v107((uint64_t)v190, v60);
      unint64_t v113 = v197;
      goto LABEL_26;
    }
    uint64_t v114 = v201;
    v115 = (void (*)(void, void))v206;
    sub_10001CFB8((uint64_t)v201, (unint64_t)v206);

    v116 = (void (*)(char *, uint64_t))v59[1];
    v116(v203, v60);
    v116(v200, v60);
    swift_bridgeObjectRelease_n();
    sub_10001CFB8((uint64_t)v114, (unint64_t)v115);
    swift_bridgeObjectRelease_n();
    v206 = (char *)v116;
    v116(v190, v60);
  }
  unint64_t v113 = v197;
  v111 = &qword_101637000;
LABEL_26:
  if (v111[123] != -1) {
    swift_once();
  }
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v118 = sub_100010324(v117, (uint64_t)qword_10170F168);
  swift_bridgeObjectRetain_n();
  v203 = (char *)v118;
  v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v119, v120))
  {
    uint64_t v121 = swift_slowAlloc();
    v122 = (void (*)(void, void, void))swift_slowAlloc();
    v201 = v122;
    *(_DWORD *)uint64_t v121 = 136315394;
    os_log_t v208 = v202;
    v209 = (char *)v122;
    sub_10000588C(&qword_101647F48);
    uint64_t v123 = String.init<A>(describing:)();
    os_log_t v208 = (os_log_t)sub_1008FA0F0(v123, v124, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v125 = Dictionary.description.getter();
    unint64_t v127 = v126;
    swift_bridgeObjectRelease();
    os_log_t v208 = (os_log_t)sub_1008FA0F0(v125, v127, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v128 = v113;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "%s: IDSSendMessageOptions: %s", (uint8_t *)v121, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v128 = v113;
  }
  type metadata accessor for AnalyticsEvent(0);
  v129 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v129 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  v130 = &v129[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v131 = type metadata accessor for DispatchTime();
  v132 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56);
  v132(v130, 1, 1, v131);
  v132(&v129[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v131);
  *((void *)v129 + 15) = 0xD000000000000026;
  *((void *)v129 + 16) = 0x80000001013FF810;
  type metadata accessor for Transaction();
  unsigned __int8 v133 = v210;
  uint64_t v135 = v211;
  uint64_t v134 = (uint64_t)v212;
  unint64_t v136 = (unint64_t)v213;
  uint64_t v137 = swift_allocObject();
  *(void *)(v137 + 16) = v129;
  *(unsigned char *)(v137 + 24) = v133;
  *(void *)(v137 + 32) = v135;
  *(void *)(v137 + 40) = v134;
  *(void *)(v137 + 48) = v136;
  sub_1000361E0(v134, v136);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  os_log_t v138 = v189[8];
  Class v139 = Data._bridgeToObjectiveC()().super.isa;
  sub_100529FB0(v195);
  swift_bridgeObjectRelease();
  Class v140 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100653C34(v128);
  swift_bridgeObjectRelease();
  Class v141 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  os_log_t v208 = 0;
  v209 = 0;
  LODWORD(v134) = [v138 sendData:v139 toDestinations:v140 priority:300 options:v141 identifier:&v208 error:&v209];

  os_log_t v142 = v208;
  v143 = v209;
  v144 = v142;
  v145 = v144;
  if (!v134)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    uint64_t v155 = v196;
    unint64_t v156 = v207;
    goto LABEL_37;
  }
  __chkstk_darwin(v144);
  uint64_t v146 = v196;
  *(&v180 - 4) = (uint64_t)&v210;
  *(&v180 - 3) = v146;
  unint64_t v147 = v207;
  *(void *)&long long v179 = v207;
  uint64_t v149 = (uint64_t)&v148[4];
  v150 = v148 + 16;
  os_unfair_lock_lock(v148 + 16);
  uint64_t v151 = v187;
  sub_100546008(v149);
  if (v151)
  {
    os_unfair_lock_unlock(v150);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v150);
    if (v145)
    {
      uint64_t v187 = 0;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v152 = (uint64_t)v193;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v153 = v205;
      if (v185(v152, 1, v205) != 1)
      {
        v158 = v204;
        v159 = (char *)(v204 + 4);
        v160 = v194;
        v201 = (void (*)(void, void, void))v204[4];
        v201(v194, v152, v153);
        LODWORD(v200) = v210;
        uint64_t v161 = (uint64_t)v212;
        uint64_t v199 = v211;
        unint64_t v162 = (unint64_t)v213;
        v163 = (void (*)(char *, char *, uint64_t))v158[2];
        v164 = v192;
        v163(v192, v160, v153);
        sub_1000361E0(v161, v162);
        sub_1000361E0(v161, v162);
        v165 = Logger.logObject.getter();
        os_log_type_t v166 = static os_log_type_t.default.getter();
        int v167 = v166;
        if (os_log_type_enabled(v165, v166))
        {
          uint64_t v168 = swift_slowAlloc();
          v203 = v159;
          uint64_t v169 = v168;
          v170 = (char *)swift_slowAlloc();
          v198 = v170;
          *(_DWORD *)uint64_t v169 = 136315650;
          LODWORD(v197) = v167;
          os_log_t v208 = v202;
          v209 = v170;
          sub_10000588C(&qword_101647F48);
          os_log_t v202 = v165;
          uint64_t v171 = String.init<A>(describing:)();
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v171, v172, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v169 + 12) = 2080;
          uint64_t v173 = sub_10052A690(v200, v199, v161, v162);
          unint64_t v175 = v174;
          sub_10001CFB8(v161, v162);
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v173, v175, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v161, v162);
          *(_WORD *)(v169 + 22) = 2080;
          sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          v176 = v192;
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter();
          os_log_t v208 = (os_log_t)sub_1008FA0F0(v177, v178, (uint64_t *)&v209);
          uint64_t v153 = v205;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v206)(v176, v153);
          v165 = v202;
          _os_log_impl((void *)&_mh_execute_header, v202, (os_log_type_t)v197, "%s: Sent message %s with identifier: %s", (uint8_t *)v169, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10001CFB8(v196, v207);
          swift_release();
        }
        else
        {
          sub_10001CFB8(v161, v162);
          swift_release();
          sub_10001CFB8(v161, v162);
          ((void (*)(char *, uint64_t))v206)(v164, v153);
          sub_10001CFB8(v196, v207);
        }

        v201(v191, v194, v153);
        goto LABEL_38;
      }
      sub_10001DAB4(v152, &qword_101638CF0);
      sub_10015CEB8();
      swift_allocError();
      void *v154 = 0;
      swift_willThrow();
      swift_release();
      uint64_t v155 = v146;
      unint64_t v156 = v147;
LABEL_37:
      sub_10001CFB8(v155, v156);
LABEL_38:

      return;
    }
    sub_10015CEB8();
    swift_allocError();
    void *v157 = 0;
    swift_willThrow();
    swift_release();
    sub_10001CFB8(v146, v147);
  }
}

uint64_t sub_1004EAC64()
{
  uint64_t v2 = v0;
  uint64_t result = sub_1004F8A80(13, 1, 0, 0xE000000000000000, (uint64_t)v21);
  if (!v1)
  {
    int v19 = v21[0];
    uint64_t v4 = v23;
    unint64_t v17 = v22;
    unint64_t v5 = v24;
    uint64_t v6 = sub_10052A504((uint64_t (*)(void))sub_100529898);
    uint64_t v7 = sub_10052DCD4((uint64_t)v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1004E4D34(v7);
    swift_bridgeObjectRelease();
    uint64_t v9 = dispatch_group_create();
    sub_10000588C(&qword_101647F08);
    uint64_t v10 = swift_allocObject();
    *(_DWORD *)(v10 + 24) = 0;
    *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
    uint64_t v11 = v8[2];
    if (v11)
    {
      swift_bridgeObjectRetain();
      unint64_t v20 = (void (*)(void, void))v5;
      uint64_t v12 = v8 + 6;
      uint64_t v18 = v2;
      do
      {
        uint64_t v14 = (void (*)(void, void))*(v12 - 1);
        unint64_t v13 = *v12;
        int v15 = *((unsigned __int8 *)v12 - 16);
        swift_bridgeObjectRetain();
        dispatch_group_enter(v9);
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v16 = v9;
        sub_100530248(v19, v17, v4, v20, (uint64_t)_swiftEmptyDictionarySingleton, v15, v14, v13, 0, (void (*)(void, void, void))0x404E000000000000, 0, 1u, (uint64_t)&_swiftEmptySetSingleton, (unsigned int (*)(uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton, 0, v18, v15, (uint64_t)v14, v13,
          v10,
          v16);

        swift_release();
        swift_bridgeObjectRelease_n();
        v12 += 3;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      unint64_t v5 = (unint64_t)v20;
    }
    OS_dispatch_group.wait()();
    swift_bridgeObjectRelease();

    swift_release();
    return sub_10001CFB8((uint64_t)v4, v5);
  }
  return result;
}

void sub_1004EAE84(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v34 - v11;
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v34 - v12;
  id v39 = [self standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v39 BOOLForKey:v14];

  if (v15)
  {
    uint64_t v16 = sub_10000588C(&qword_101647FE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 2, 2, v16);
    id v17 = v39;

    return;
  }
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v39 valueForKey:v18];

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v40, 0, sizeof(v40));
  }
  uint64_t v20 = a1;
  uint64_t v21 = (uint64_t)v38;
  sub_10001D608((uint64_t)v40, (uint64_t)v41, (uint64_t *)&unk_101644360);
  if (!v41[3])
  {
    sub_10001DAB4((uint64_t)v41, (uint64_t *)&unk_101644360);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_16;
  }
  int v22 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, v22 ^ 1u, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_16:

    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_10163AC90);
LABEL_17:
    uint64_t v31 = sub_10000588C(&qword_101647FE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a1, 1, 2, v31);
    return;
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v23(v13, v4, v5);
  static Date.trustedNow.getter(v21);
  sub_10052EE80((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v32(v21, v5);
    v32((uint64_t)v13, v5);
    goto LABEL_17;
  }
  uint64_t v37 = (void (*)(uint64_t, char *, uint64_t))v23;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170D788);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v13, v5);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v41[0] = v36;
    uint64_t v35 = v27;
    *(_DWORD *)uint64_t v27 = 136446210;
    uint64_t v34 = v27 + 4;
    sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v40[0] = sub_1008FA0F0(v28, v29, v41);
    uint64_t v20 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v9, v5);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Item sharing throttled. Try again after %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v9, v5);
  }
  v30(v38, v5);
  v37(v20, v13, v5);
  uint64_t v33 = sub_10000588C(&qword_101647FE8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v20, 0, 2, v33);
}

uint64_t sub_1004EB530()
{
  id v1 = [*(id *)(v0 + 56) destination];
  if (v1)
  {
    uint64_t v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = (void *)0x80000001013FCB60;
    unint64_t v3 = 0xD000000000000011;
  }
  sub_10000588C(&qword_101648358);
  sub_100062734(&qword_101648360, &qword_101648358);
  v6._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v3;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 60;
}

uint64_t sub_1004EB69C(double a1, double a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v90 = a7;
  uint64_t v110 = a6;
  uint64_t v109 = (void *)type metadata accessor for Date();
  uint64_t v108 = *(v109 - 1);
  __chkstk_darwin(v109);
  uint64_t v89 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  int v91 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t v94 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v92 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v100);
  unint64_t v99 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v18 - 8);
  uint64_t v98 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v97 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v21);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v22 = swift_allocObject();
  *(void *)(v7 + 40) = v22;
  uint64_t v101 = v7 + 40;
  uint64_t v105 = qword_101644860;
  *(void *)(v7 + qword_101644860) = 0;
  uint64_t v102 = qword_101644868;
  *(void *)(v7 + qword_101644868) = 0;
  *(_DWORD *)(v22 + 16) = 0;
  uint64_t v103 = qword_101644870;
  *(void *)(v7 + qword_101644870) = 0;
  uint64_t v23 = (uint64_t *)(v7 + qword_101644878);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v104 = v23;
  uint64_t v24 = qword_101644880;
  uint64_t v88 = sub_10000588C(&qword_101648430);
  swift_allocObject();
  uint64_t v25 = PassthroughSubject.init()();
  uint64_t v107 = v24;
  *(void *)(v7 + v24) = v25;
  uint64_t v26 = qword_101644888;
  uint64_t v87 = sub_10000588C(&qword_101648438);
  swift_allocObject();
  uint64_t v27 = PassthroughSubject.init()();
  uint64_t v106 = v26;
  *(void *)(v7 + v26) = v27;
  *(void *)(v7 + qword_101644890) = 0;
  *(void *)(v7 + qword_101644898) = 0;
  *(void *)(v7 + qword_1016448A0) = 0;
  *(void *)(v7 + qword_1016448B0) = 0;
  uint64_t v28 = qword_1016448B8;
  uint64_t v117 = SharingCircleWildAdvertisementKey.init(key:);
  uint64_t v118 = 0;
  aBlock = _NSConcreteStackBlock;
  unint64_t v114 = 1107296256;
  v115 = sub_1004B5480;
  v116 = &unk_1015CB388;
  _Block_copy(&aBlock);
  os_log_t v112 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v29 = v110;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v7 + v28) = DispatchWorkItem.init(flags:block:)();
  *(void *)(v7 + qword_1016448C0) = 0;
  static Date.distantPast.getter();
  *(unsigned char *)(v7 + qword_1016448D0) = 0;
  uint64_t v30 = *(void *)(v29 + 16);
  unint64_t v31 = *(void *)(v29 + 24);
  swift_bridgeObjectRetain();
  uint64_t v32 = (void *)sub_10042D654(v30, v31);
  swift_bridgeObjectRelease();
  if (!v32)
  {
    swift_bridgeObjectRelease();
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100010324(v50, (uint64_t)qword_10170F168);
    swift_retain();
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v53 = 136446210;
      uint64_t v54 = v29;
      uint64_t v55 = *(void *)(v29 + 16);
      unint64_t v56 = *(void *)(v54 + 24);
      swift_bridgeObjectRetain();
      os_log_t v112 = (void *)sub_1008FA0F0(v55, v56, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unable to obtain account for service: %{public}s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v61 = v109;
    uint64_t v62 = v108;
    unsigned int v63 = v104;
    uint64_t v64 = v102;
    goto LABEL_24;
  }
  sub_10000588C(&qword_101648440);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  aBlock = a4;
  unint64_t v114 = a5;
  id v34 = v32;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  sub_10115915C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  id v35 = objc_allocWithZone((Class)IDSSession);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v37 = [v35 initWithAccount:v34 destinations:isa transportType:0];

  if (!v37)
  {
    swift_bridgeObjectRelease();
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100010324(v57, (uint64_t)qword_10170F168);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unable to create IDSSession!", v60, 2u);
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release();
    }
    uint64_t v61 = v109;
    uint64_t v62 = v108;
    unsigned int v63 = v104;
    uint64_t v64 = v102;
    goto LABEL_24;
  }
  id v84 = v34;
  unint64_t v83 = a4;
  unint64_t v85 = a5;
  uint64_t v101 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  aBlock = 0;
  unint64_t v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  aBlock = (void *)0xD00000000000002BLL;
  unint64_t v114 = 0x80000001013FCBB0;
  uint64_t v38 = v29;
  uint64_t v39 = *(void *)(v29 + 16);
  int64_t v40 = *(void **)(v29 + 24);
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  uint64_t v86 = aBlock;
  (*(void (**)(char *, void, uint64_t))(v95 + 104))(v97, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v96);
  static DispatchQoS.unspecified.getter();
  aBlock = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v42 = v38;
  *(void *)(v8 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v8 + 56) = v37;
  *(void *)(v8 + qword_101644858) = v38;
  swift_retain();
  id v43 = v37;
  id v44 = [v43 sessionID];
  if (!v44)
  {

    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v45 = v44;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = v91;
  UUID.init(uuidString:)();
  uint64_t v47 = (uint64_t)v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = v94;
  uint64_t v49 = v93;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v47, 1, v93) == 1)
  {

    swift_bridgeObjectRelease();
    swift_release();
    sub_10001DAB4(v47, &qword_101638CF0);
LABEL_17:
    swift_release();

    uint64_t v61 = v109;
    uint64_t v62 = v108;
    unsigned int v63 = v104;
    uint64_t v64 = v102;
LABEL_24:
    swift_release();
    swift_release();

    swift_release();
    sub_1000A1534(*v63);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void *))(v62 + 8))(v8 + qword_1016448C8, v61);
    sub_10000588C(&qword_101648358);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v65 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v92, v47, v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v8 + qword_10170DE80, v65, v49);
  aBlock = *(void **)(v8 + v106);
  sub_100062734(&qword_101648448, &qword_101648438);
  *(void *)(v8 + qword_10170DE90) = Publisher.eraseToAnyPublisher()();
  aBlock = *(void **)(v8 + v107);
  sub_100062734(&qword_101648450, &qword_101648430);
  *(void *)(v8 + qword_10170DE88) = Publisher.eraseToAnyPublisher()();
  uint64_t v66 = v89;
  static Date.trustedNow.getter(v89);
  (*(void (**)(uint64_t, uint64_t, void *))(v108 + 32))(v8 + qword_1016448A8, v66, v109);
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = v90;
  unint64_t v67 = (objc_class *)type metadata accessor for MessagingSessionDelegateTrampoline();
  v68 = (char *)objc_allocWithZone(v67);
  *(void *)&v68[OBJC_IVAR____TtC12searchpartyd34MessagingSessionDelegateTrampoline_delegate + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_1015C08D8;
  swift_unknownObjectWeakAssign();
  v111.receiver = v68;
  v111.super_class = v67;
  id v69 = [super init];
  uint64_t v70 = qword_101644868;
  uint64_t v71 = *(void **)(v8 + qword_101644868);
  *(void *)(v8 + qword_101644868) = v69;

  [v43 setDelegate:*(void *)(v8 + v70) queue:*(void *)(v8 + 48)];
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  sub_100010324(v72, (uint64_t)qword_10170F168);
  swift_retain_n();
  unint64_t v73 = v85;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = swift_slowAlloc();
    uint64_t v109 = (void *)swift_slowAlloc();
    aBlock = v109;
    *(_DWORD *)uint64_t v76 = 136446722;
    uint64_t v77 = sub_1004EB530();
    os_log_t v112 = (void *)sub_1008FA0F0(v77, v78, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2080;
    swift_bridgeObjectRetain();
    os_log_t v112 = (void *)sub_1008FA0F0((uint64_t)v83, v73, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v76 + 22) = 2082;
    uint64_t v79 = *(void *)(v42 + 16);
    unint64_t v80 = *(void *)(v42 + 24);
    swift_bridgeObjectRetain();
    os_log_t v112 = (void *)sub_1008FA0F0(v79, v80, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Created new session: %{public}s for destination: %s service: %{public}s", (uint8_t *)v76, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v93);
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v49);
  }
  return v8;
}

uint64_t sub_1004EC8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v4 = sub_10000588C(&qword_101648420);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  __chkstk_darwin(v8);
  uint64_t v38 = a1;
  uint64_t v11 = *(void *)(a1 + qword_101644870);
  if (v11)
  {
    uint64_t v37 = v2;
    uint64_t v12 = qword_1016373D8;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F168);
    swift_retain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v17 = sub_1004EB530();
      uint64_t v39 = sub_1008FA0F0(v17, v18, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Returning existing inviteFuture", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v40 = v11;
    sub_10000588C(&qword_101648400);
    sub_100062734(&qword_101648408, &qword_101648400);
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    goto LABEL_10;
  }
  uint64_t v34 = v10;
  uint64_t v35 = qword_101644870;
  uint64_t v37 = v5;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
  uint64_t v19 = v36;
  uint64_t v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v2)
  {
    uint64_t v24 = v20;
    uint64_t v37 = 0;
    unint64_t v33 = v21;
    swift_release();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v38;
    swift_weakInit();
    sub_100552A0C(v19, (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    unint64_t v27 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v25;
    sub_100551764((uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v29 = (uint64_t *)(v28 + ((v9 + v27 + 7) & 0xFFFFFFFFFFFFFFF8));
    unint64_t v30 = v33;
    uint64_t *v29 = v24;
    v29[1] = v30;
    sub_10000588C(&qword_101648400);
    swift_allocObject();
    sub_1000361E0(v24, v30);
    uint64_t v31 = Future.init(_:)();
    *(void *)(v26 + v35) = v31;
    swift_retain();
    swift_release();
    uint64_t v40 = v31;
    sub_100062734(&qword_101648408, &qword_101648400);
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    sub_10001CFB8(v24, v30);
LABEL_10:
    swift_release();
    return v22;
  }
  swift_errorRelease();
  swift_release();
  uint64_t v40 = 3;
  sub_10000588C(&qword_101648358);
  sub_10015CEB8();
  Fail.init(error:)();
  sub_100062734(&qword_101648428, &qword_101648420);
  uint64_t v22 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v4);
  return v22;
}

void sub_1004ECEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v33 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v19 = Strong;
    v33[2] = v11;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_1003B4058;
    *(void *)(v20 + 24) = v17;
    unint64_t v21 = (uint64_t (**)(uint64_t, char))(v19 + qword_101644878);
    uint64_t v22 = *(void *)(v19 + qword_101644878);
    char *v21 = sub_100553F70;
    v21[1] = (uint64_t (*)(uint64_t, char))v20;
    swift_retain();
    sub_1000A1534(v22);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170F168);
    sub_100552A0C(a4, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    swift_retain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446466;
      v33[1] = a6;
      uint64_t v27 = sub_1004EB530();
      uint64_t v34 = sub_1008FA0F0(v27, v28, &v35);
      v33[0] = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      sub_100552A0C((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v34 = sub_1008FA0F0(v29, v30, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100552C2C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: Sending invitation with context: [%s]", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100552C2C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    }

    id v31 = *(id *)(v19 + 56);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v31 sendInvitationWithData:isa declineOnError:1];
    swift_release();
  }
  else
  {
    swift_retain();
    swift_release();
  }
}

void sub_1004ED294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, SEL *a6)
{
  uint64_t v33 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v11 = __chkstk_darwin(v33);
  uint64_t v32 = (uint64_t)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - v13;
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F168);
  sub_100552A0C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    int v29 = v18;
    uint64_t v20 = v19;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v35 = v30;
    *(_DWORD *)uint64_t v20 = 136446466;
    os_log_t v27 = v16;
    unint64_t v28 = a5;
    uint64_t v21 = sub_1004EB530();
    uint64_t v34 = sub_1008FA0F0(v21, v22, &v35);
    uint64_t v31 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    sub_100552A0C((uint64_t)v14, v32, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v34 = sub_1008FA0F0(v23, v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100552C2C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v16 = v27;
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v29, v28, (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_100552C2C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  }

  os_log_type_t v25 = *(void **)(a1 + 56);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v25 *a6 isa];
}

uint64_t sub_1004ED5D8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[32])
  {
    uint64_t v32 = v1[32];
    uint64_t v33 = v11;
    uint64_t v34 = v9;
    uint64_t v35 = v6;
    uint64_t v36 = result;
    uint64_t v12 = qword_1016373D8;
    uint64_t v31 = v1[33];
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F168);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v38 = v30;
      aBlock[0] = v3;
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_10000588C(&qword_101647E70);
      uint64_t v17 = String.init<A>(describing:)();
      aBlock[0] = sub_1008FA0F0(v17, v18, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      uint64_t v19 = sub_1004EB530();
      uint64_t v20 = v4;
      unint64_t v22 = v21;
      swift_release();
      aBlock[0] = sub_1008FA0F0(v19, v22, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v4 = v20;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: invalidated %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v31;
    uint64_t v25 = v32;
    v23[2] = v32;
    v23[3] = v24;
    v23[4] = a1;
    void aBlock[4] = sub_1005518DC;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015CA898;
    uint64_t v26 = _Block_copy(aBlock);
    sub_1000BD0E8(v25);
    swift_retain();
    os_log_t v27 = v33;
    static DispatchQoS.unspecified.getter();
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v28 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    sub_1000A1534(v25);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v4);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v36);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004EDADC(uint64_t a1)
{
  uint64_t v4 = sub_10000588C(&qword_101645808);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v32 - v8;
  if (*(void *)(v1 + qword_101644860))
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_retain();
    uint64_t v1 = PropertyListEncoder.init()();
    sub_100062734(&qword_101648398, &qword_101645808);
    uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v2)
    {
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v13 = v10;
      unint64_t v37 = v11;
      swift_release();
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F168);
      sub_10001D074(a1, (uint64_t)v9, &qword_101645808);
      swift_retain_n();
      os_log_type_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      int v17 = v16;
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v18 = swift_slowAlloc();
        int v34 = v17;
        uint64_t v19 = v18;
        uint64_t v35 = swift_slowAlloc();
        uint64_t v40 = v35;
        *(_DWORD *)uint64_t v19 = 136446722;
        uint64_t v36 = v13;
        os_log_t v33 = v15;
        uint64_t v20 = sub_1004EB530();
        uint64_t v38 = sub_1008FA0F0(v20, v21, &v40);
        v32[1] = &v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2082;
        sub_10001D074((uint64_t)v9, (uint64_t)v7, &qword_101645808);
        sub_10001DAB4((uint64_t)v9, &qword_101645808);
        uint64_t v22 = sub_1004E57F0();
        unint64_t v24 = v23;
        sub_10001DAB4((uint64_t)v7, &qword_101645808);
        uint64_t v38 = sub_1008FA0F0(v22, v24, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2082;
        swift_release();
        type metadata accessor for UUID();
        sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v13 = v36;
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v38 = sub_1008FA0F0(v25, v26, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        os_log_t v27 = v33;
        _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "%{public}s: Sending: %{public}s over session: %{public}s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
        sub_10001DAB4((uint64_t)v9, &qword_101645808);

        swift_release_n();
      }
      uint64_t v28 = swift_allocObject();
      swift_weakInit();
      uint64_t v29 = (void *)swift_allocObject();
      v29[2] = v28;
      v29[3] = v13;
      unint64_t v30 = v37;
      v29[4] = v37;
      sub_10000588C(&qword_1016449E0);
      swift_allocObject();
      sub_1000361E0(v13, v30);
      uint64_t v40 = Future.init(_:)();
      sub_100062734(qword_1016449E8, &qword_1016449E0);
      uint64_t v1 = Publisher.eraseToAnyPublisher()();
      swift_release();
      sub_10001CFB8(v13, v30);
      swift_release();
    }
  }
  else
  {
    sub_10015CEB8();
    swift_allocError();
    *uint64_t v12 = 4;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_1004EE034(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v3);
  uint64_t v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000588C(&qword_1016449C8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void *)(v1 + qword_101644860);
  if (v10)
  {
    uint64_t v35 = v1;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_retain();
    PropertyListEncoder.init()();
    sub_100062734(&qword_1016449D8, &qword_101644998);
    uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v13 = v12;
    swift_release();
    unint64_t v33 = v13;
    uint64_t v34 = v10;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F168);
    sub_10001D074(a1, (uint64_t)v5, &qword_101644998);
    swift_retain_n();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446722;
      int v32 = v18;
      uint64_t v20 = sub_1004EB530();
      uint64_t v36 = sub_1008FA0F0(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v22 = sub_1004E55E8();
      uint64_t v36 = sub_1008FA0F0(v22, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v5, &qword_101644998);
      *(_WORD *)(v19 + 22) = 2082;
      swift_release();
      type metadata accessor for UUID();
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_1008FA0F0(v24, v25, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v32, "%{public}s: Sending (Internal): %{public}s over session: %{public}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      sub_10001DAB4((uint64_t)v5, &qword_101644998);

      swift_release();
    }
    uint64_t v26 = v11;
    unint64_t v27 = v33;
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v28;
    v29[3] = v26;
    v29[4] = v27;
    sub_10000588C(&qword_1016449E0);
    swift_allocObject();
    sub_1000361E0(v26, v27);
    uint64_t v37 = Future.init(_:)();
    sub_100062734(qword_1016449E8, &qword_1016449E0);
    uint64_t v14 = Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_10001CFB8(v26, v27);
    swift_release();
  }
  else
  {
    uint64_t v37 = 4;
    sub_10015CEB8();
    Fail.init(error:)();
    sub_100062734(&qword_1016449D0, &qword_1016449C8);
    uint64_t v14 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v14;
}

uint64_t sub_1004EE668()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if ((v17 & 1) == 0)
  {
    unint64_t v12 = dispatch_group_create();
    sub_1004E5040(2, 1, 0, 0xE000000000000000, (uint64_t)v10);
    dispatch_group_enter(v12);
    uint64_t v17 = sub_1004EE034((uint64_t)v10);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v0;
    uint64_t v14 = v12;
    swift_retain();
    sub_10000588C(&qword_1016449B8);
    sub_100062734(&qword_1016449C0, &qword_1016449B8);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
    v15(v5, v1);
    OS_dispatch_group.wait(timeout:)();

    v15(v7, v1);
    return sub_10001DAB4((uint64_t)v10, &qword_101644998);
  }
  return result;
}

void sub_1004EEB14(unint64_t a1, char a2, dispatch_group_t group)
{
  if (a2)
  {
    sub_1001EE1D4(a1);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F168);
    sub_100434678(a1, 1);
    swift_retain();
    sub_100434678(a1, 1);
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v9 = sub_1004EB530();
      sub_1008FA0F0(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      sub_10015CEB8();
      uint64_t v11 = Error.localizedDescription.getter();
      sub_1008FA0F0(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100434684(a1, 1);
      sub_100434684(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s: Error sending .shuttingDown: %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100434684(a1, 1);
    }
    else
    {
      sub_100434684(a1, 1);
      swift_release_n();
      sub_100434684(a1, 1);
      sub_100434684(a1, 1);
    }
  }
  dispatch_group_leave(group);
}

void sub_1004EED90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v85 = a2;
  uint64_t v84 = a1;
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v88 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v86 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  os_log_type_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v96 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016483C8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v100 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v99 = (char *)&v73 - v14;
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v97 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  int v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v102 = (uint64_t)&v73 - v19;
  uint64_t v20 = type metadata accessor for DateInterval();
  uint64_t v83 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v103 = (uint64_t)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v104 = (uint64_t)&v73 - v24;
  __chkstk_darwin(v23);
  uint64_t v105 = (uint64_t)&v73 - v25;
  uint64_t v26 = type metadata accessor for Date();
  unint64_t v27 = *(uint64_t **)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v93 = (uint64_t)&v73 - v31;
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v95 = v15;
  uint64_t v92 = v26;
  os_log(_:dso:log:_:_:)();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v26 = 0;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v32 = aBlock[0];
  uint64_t v33 = v93;
  static Date.trustedNow.getter(v93);
  uint64_t v34 = sub_1010AB7EC(v32);
  if ((unsigned __int128)(v34 * (__int128)60) >> 64 != (60 * v34) >> 63)
  {
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v78 = v7;
  uint64_t v80 = v20;
  uint64_t v79 = v27;
  uint64_t v35 = v30;
  uint64_t v36 = v92;
  uint64_t v101 = (void (*)(char *, uint64_t, uint64_t))v27[2];
  v101(v30, v33, v92);
  DateInterval.init(start:duration:)();
  uint64_t v34 = sub_1010AB814(v32);
  if ((unsigned __int128)(v34 * (__int128)60) >> 64 != (60 * v34) >> 63)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v101(v30, v33, v36);
  DateInterval.init(start:duration:)();
  uint64_t v37 = sub_1010AB800(v32);
  uint64_t v34 = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v37 * (__int128)60) >> 64 == (60 * v37) >> 63)
  {
    v101(v35, v33, v36);
    DateInterval.init(start:duration:)();
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 152);
    uint64_t v15 = (uint64_t)sub_100ACF5FC();
    os_log_type_t v7 = (char *)sub_10092E8E4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v27 = *(uint64_t **)(v15 + 16);
    if (v27)
    {
      uint64_t v39 = *(unsigned __int8 *)(v97 + 80);
      uint64_t v101 = v38;
      uint64_t v40 = v15 + ((v39 + 32) & ~v39);
      uint64_t v98 = *(char **)(v97 + 72);
      uint64_t v94 = (char *)v15;
      swift_bridgeObjectRetain();
      uint64_t v41 = v102;
      do
      {
        sub_100552A0C(v40, v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v42 = sub_100B6DD88();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v7;
        uint64_t v44 = (uint64_t)v42;
        uint64_t v41 = v102;
        sub_10016F264(v44, v102, isUniquelyReferenced_nonNull_native);
        os_log_type_t v7 = (char *)aBlock[0];
        swift_bridgeObjectRelease();
        sub_100552C2C(v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        v40 += (uint64_t)v98;
        unint64_t v27 = (uint64_t *)((char *)v27 - 1);
      }
      while (v27);
      uint64_t v15 = (uint64_t)v94;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = 0;
    uint64_t v77 = v45;
    *(void *)(v45 + 16) = 0;
    uint64_t v47 = (void *)(v45 + 16);
    uint64_t v48 = 1 << v7[32];
    uint64_t v49 = -1;
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    unint64_t v50 = v49 & *((void *)v7 + 8);
    unint64_t v51 = (unint64_t)(v48 + 63) >> 6;
    uint64_t v74 = v51 - 1;
    uint64_t v95 = v51;
    unint64_t v75 = v51 - 5;
    uint64_t v94 = v7 + 64;
    uint64_t v76 = v7 + 104;
    uint64_t v20 = (uint64_t)v99;
    unint64_t v30 = v100;
    uint64_t v98 = v7;
    while (!v50)
    {
      uint64_t v55 = v46 + 1;
      if (__OFADD__(v46, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      if (v55 >= v95)
      {
        uint64_t v102 = v46;
      }
      else
      {
        unint64_t v56 = *(void *)&v94[8 * v55];
        if (v56) {
          goto LABEL_22;
        }
        if (v46 + 2 >= v95)
        {
          uint64_t v102 = v46 + 1;
        }
        else
        {
          unint64_t v56 = *(void *)&v94[8 * v46 + 16];
          if (v56)
          {
            uint64_t v55 = v46 + 2;
            goto LABEL_22;
          }
          if (v46 + 3 >= v95)
          {
            uint64_t v102 = v46 + 2;
          }
          else
          {
            unint64_t v56 = *(void *)&v94[8 * v46 + 24];
            if (v56)
            {
              uint64_t v55 = v46 + 3;
LABEL_22:
              uint64_t v101 = (void (*)(char *, uint64_t, uint64_t))((v56 - 1) & v56);
              uint64_t v102 = v55;
              unint64_t v52 = __clz(__rbit64(v56)) + (v55 << 6);
LABEL_18:
              sub_100552A0C(*((void *)v7 + 6) + *(void *)(v97 + 72) * v52, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v53 = *((void *)v7 + 7);
              unint64_t v27 = &qword_1016483D0;
              uint64_t v54 = sub_10000588C(&qword_1016483D0);
              *(void *)&v30[*(int *)(v54 + 48)] = *(void *)(v53 + 8 * v52);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v30, 0, 1, v54);
              swift_bridgeObjectRetain();
              goto LABEL_25;
            }
            uint64_t v55 = v46 + 4;
            if (v46 + 4 >= v95)
            {
              uint64_t v102 = v46 + 3;
            }
            else
            {
              unint64_t v56 = *(void *)&v94[8 * v55];
              if (v56) {
                goto LABEL_22;
              }
              while (v75 != v46)
              {
                unint64_t v56 = *(void *)&v76[8 * v46++];
                if (v56)
                {
                  uint64_t v55 = v46 + 4;
                  goto LABEL_22;
                }
              }
              uint64_t v102 = v74;
            }
          }
        }
      }
      unint64_t v27 = &qword_1016483D0;
      uint64_t v57 = sub_10000588C(&qword_1016483D0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v30, 1, 1, v57);
      uint64_t v101 = 0;
LABEL_25:
      sub_10001D608((uint64_t)v30, v20, &qword_1016483C8);
      uint64_t v15 = sub_10000588C(&qword_1016483D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v20, 1, v15) == 1)
      {
        swift_release();
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v61 = v81;
        uint64_t v62 = v78;
        uint64_t v63 = v82;
        (*(void (**)(char *, void, uint64_t))(v81 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v82);
        uint64_t v64 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
        uint64_t v65 = (void *)swift_allocObject();
        uint64_t v66 = v85;
        v65[2] = v84;
        v65[3] = v66;
        v65[4] = v77;
        void aBlock[4] = sub_1005537E4;
        aBlock[5] = v65;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015CB220;
        unint64_t v67 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        v68 = v86;
        static DispatchQoS.unspecified.getter();
        uint64_t v106 = _swiftEmptyArrayStorage;
        sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        id v69 = v88;
        uint64_t v70 = v91;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v67);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v69, v70);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v89);
        ((void (*)(uint64_t, uint64_t))v79[1])(v93, v92);
        uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
        uint64_t v72 = v80;
        v71(v103, v80);
        v71(v104, v72);
        v71(v105, v72);
        swift_release();
        swift_release();
        return;
      }
      uint64_t v58 = *(void *)(v20 + *(int *)(v15 + 48));
      sub_100551764(v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v59 = *(void *)(v58 + 16);
      if (v59)
      {
        uint64_t v15 = v58 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
        uint64_t v60 = *(void *)(v96 + 72);
        do
        {
          sub_100552A0C(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          sub_10051C540((uint64_t)v10, v3, v105, (uint64_t)v18, v104, v103, v47);
          sub_100552C2C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          v15 += v60;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease();
        sub_100552C2C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_100552C2C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = (uint64_t)v99;
      unint64_t v30 = v100;
      os_log_type_t v7 = v98;
      unint64_t v50 = (unint64_t)v101;
      uint64_t v46 = v102;
    }
    uint64_t v101 = (void (*)(char *, uint64_t, uint64_t))((v50 - 1) & v50);
    uint64_t v102 = v46;
    unint64_t v52 = __clz(__rbit64(v50)) | (v46 << 6);
    goto LABEL_18;
  }
LABEL_50:
  __break(1u);
  __break(1u);
}

uint64_t sub_1004EFC80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DFA0);
  sub_100010324(v0, (uint64_t)qword_10170DFA0);
  return Logger.init(subsystem:category:)();
}

void *sub_1004EFCFC()
{
  if (*(void *)(v0 + 352))
  {
    uint64_t v1 = *(void **)(v0 + 352);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for CryptoKeyStreamInspector(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    uint64_t v1 = sub_100816D94(v3);
    swift_release();
    *(void *)(v2 + 352) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_1004EFD84()
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v1 = result;
    id v2 = (id)MobileGestalt_copy_productType_obj();

    if (v2)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    String.lowercased()();
    swift_bridgeObjectRelease();
    sub_1005506B0();
    sub_1000336D4();
    static PartialMatchCase<>.first(containing:)();
    swift_bridgeObjectRelease();
    return (id)(v3 != 5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004EFE60@<X0>(uint64_t a1@<X8>)
{
  id v2 = sub_10052A504((uint64_t (*)(void))sub_10052A3EC);
  uint64_t v3 = v2[2];
  if (!v3)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    sub_1005511F4(&v21);
    int v18 = &v21;
    goto LABEL_8;
  }
  long long v4 = *((_OWORD *)v2 + 9);
  long long v27 = *((_OWORD *)v2 + 8);
  long long v28 = v4;
  long long v5 = *((_OWORD *)v2 + 11);
  long long v29 = *((_OWORD *)v2 + 10);
  long long v30 = v5;
  long long v6 = *((_OWORD *)v2 + 5);
  long long v23 = *((_OWORD *)v2 + 4);
  long long v24 = v6;
  long long v7 = *((_OWORD *)v2 + 7);
  long long v25 = *((_OWORD *)v2 + 6);
  long long v26 = v7;
  long long v8 = *((_OWORD *)v2 + 3);
  long long v21 = *((_OWORD *)v2 + 2);
  long long v22 = v8;
  if ((BYTE3(v29) & 1) == 0)
  {
    uint64_t v9 = 24;
    while (--v3)
    {
      unint64_t v10 = (long long *)&v2[v9];
      v9 += 20;
      long long v11 = v10[1];
      long long v21 = *v10;
      long long v22 = v11;
      long long v12 = v10[2];
      long long v13 = v10[3];
      long long v14 = v10[5];
      long long v25 = v10[4];
      long long v26 = v14;
      long long v23 = v12;
      long long v24 = v13;
      long long v15 = v10[6];
      long long v16 = v10[7];
      long long v17 = v10[9];
      long long v29 = v10[8];
      long long v30 = v17;
      long long v27 = v15;
      long long v28 = v16;
      if (BYTE3(v29)) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  v20[6] = v27;
  v20[7] = v28;
  v20[8] = v29;
  v20[9] = v30;
  v20[2] = v23;
  v20[3] = v24;
  v20[4] = v25;
  v20[5] = v26;
  v20[0] = v21;
  v20[1] = v22;
  SharingCircleWildAdvertisementKey.init(key:)(v20);
  sub_1000A3AA8((uint64_t)&v21);
  swift_bridgeObjectRelease();
  int v18 = v20;
LABEL_8:
  sub_10001D608((uint64_t)v18, (uint64_t)v31, &qword_1016482D0);
  return sub_10001D608((uint64_t)v31, a1, &qword_1016482D0);
}

void *sub_1004EFFB4()
{
  return sub_10052A504((uint64_t (*)(void))sub_100529898);
}

uint64_t sub_1004EFFCC()
{
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }

  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_1004F005C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004E59EC(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004F00BC(uint64_t a1)
{
  return sub_1004F00E0(a1);
}

uint64_t sub_1004F00E0(uint64_t a1)
{
  uint64_t v28 = sub_10000588C(&qword_1016483F0);
  uint64_t v30 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  long long v26 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C(&qword_1016483F8);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  long long v27 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  long long v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  long long v21 = type metadata accessor for BeaconSharingSessionContext;
  uint64_t v22 = a1;
  sub_100552A0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = ((v9 + 24) & ~v9) + v6;
  uint64_t v24 = (v9 + 24) & ~v9;
  uint64_t v20 = v9 | 7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  sub_100551764((uint64_t)v7, v10 + ((v9 + 24) & ~v9), (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  sub_10000588C(&qword_101648400);
  swift_allocObject();
  uint64_t v25 = Future.init(_:)();
  uint64_t v32 = v25;
  sub_100552A0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  uint64_t v11 = swift_allocObject();
  sub_100551764((uint64_t)v7, v11 + ((v9 + 16) & ~v9), (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_101648358);
  sub_10000588C(&qword_101645788);
  sub_100062734(&qword_101648408, &qword_101648400);
  sub_100062734(&qword_101645790, &qword_101645788);
  long long v12 = v26;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  sub_100552A0C(v22, (uint64_t)v7, (uint64_t (*)(void))v21);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  sub_100551764((uint64_t)v7, v14 + v24, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  sub_100062734(&qword_101648410, &qword_1016483F0);
  long long v16 = v27;
  uint64_t v15 = v28;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v15);
  sub_100062734(&qword_101648418, &qword_1016483F8);
  uint64_t v17 = v29;
  uint64_t v18 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v17);
  return v18;
}

uint64_t sub_1004F05DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  sub_10000588C(&qword_10164DBB0);
  v5[4] = swift_task_alloc();
  return _swift_task_switch(sub_1004F0674, a4, 0);
}

uint64_t sub_1004F0674()
{
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1004F072C, 0, 0);
}

uint64_t sub_1004F072C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  sub_1000212B0(v2, (uint64_t)&unk_1016483E8, (uint64_t)v5);
  swift_release();
  sub_10001DAB4(v2, &qword_10164DBB0);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1004F0840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v7 = sub_10000588C(&qword_10163BDA0);
  v5[5] = v7;
  v5[6] = *(void *)(v7 - 8);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10163BDA8);
  v5[9] = v8;
  v5[10] = *(void *)(v8 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10163BDB0);
  v5[12] = v9;
  v5[13] = *(void *)(v9 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1004F09D8, a4, 0);
}

uint64_t sub_1004F09D8()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  type metadata accessor for Transaction();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return _swift_task_switch(sub_1004F0AF8, 0, 0);
}

uint64_t sub_1004F0AF8()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F0BD8;
  uint64_t v5 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v5);
}

uint64_t sub_1004F0BD8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1004F0CD4, 0, 0);
}

uint64_t sub_1004F0CD4()
{
  if (v0[2])
  {
    swift_release();
    swift_retain();
    uint64_t v1 = (void *)swift_task_alloc();
    v0[16] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1004F0E20;
    uint64_t v2 = v0[4];
    return unsafeBlocking<A>(_:)(v1, sub_1005538F8, v2, (char *)&type metadata for () + 8);
  }
  else
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_1004F0E20()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004F0F38, 0, 0);
}

uint64_t sub_1004F0F38()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004F0BD8;
  uint64_t v2 = *(void *)(v0 + 96);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v2);
}

uint64_t sub_1004F0FE4()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1004F105C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a12 + 80) & 1) == 0)
  {
    sub_100551D5C(a12 + 64, (uint64_t)v16);
    sub_1010C9104(a6, a7, a8, a9, a10, a11);
    return sub_100551DB8((uint64_t)v16);
  }
  return result;
}

uint64_t sub_1004F1104()
{
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  sub_100551D08();
  swift_bridgeObjectRetain();
  uint64_t v1 = Set.description.getter();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)();
}

uint64_t sub_1004F1228()
{
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  swift_bridgeObjectRetain();
  uint64_t v1 = Array.description.getter();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return CurrentValueSubject.send(_:)();
}

void sub_1004F1350(uint64_t a1, int a2, void (*a3)(char *, uint64_t), char *a4, uint64_t a5)
{
  v194 = a3;
  LODWORD(v188) = a2;
  uint64_t v182 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v182);
  v183 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v177 = (uint64_t)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v184 = (uint64_t)&v164 - v13;
  __chkstk_darwin(v12);
  uint64_t v185 = (uint64_t)&v164 - v14;
  uint64_t v190 = type metadata accessor for UUID();
  uint64_t v192 = *(void *)(v190 - 8);
  uint64_t v15 = __chkstk_darwin(v190);
  os_log_type_t v166 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_t v181 = (char *)&v164 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v164 - v19;
  uint64_t v176 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v173 = (char *)&v164 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for DispatchQoS();
  uint64_t v172 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v171 = (char *)&v164 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v169 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v169 + 64);
  uint64_t v25 = __chkstk_darwin(v23);
  long long v179 = (char *)&v164 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v180 = (void (*)(char *, uint64_t, uint64_t))((char *)&v164 - v27);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v167 = (uint64_t)&v164 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v178 = (char *)&v164 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v170 = (uint64_t)&v164 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v168 = (uint64_t)&v164 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v193 = (uint64_t)&v164 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v164 - v38;
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = sub_100010324(v40, (uint64_t)qword_10170DE98);
  sub_100552A0C(a1, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v196 = v41;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v186 = a5;
  uint64_t v195 = v23;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v189 = a1;
    uint64_t v46 = v45;
    uint64_t v165 = swift_slowAlloc();
    aBlock[0] = v165;
    *(_DWORD *)uint64_t v46 = 136315650;
    uint64_t v191 = v20;
    uint64_t v47 = sub_100495A24();
    v198 = (void *)sub_1008FA0F0(v47, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100552C2C((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain();
    v198 = (void *)sub_1008FA0F0((uint64_t)v194, (unint64_t)a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v46 + 22) = 2080;
    swift_retain();
    uint64_t v49 = sub_1004EB530();
    unint64_t v51 = v50;
    swift_release();
    v198 = (void *)sub_1008FA0F0(v49, v51, aBlock);
    uint64_t v20 = v191;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "sessionInvitationReceived: context: %s from: %s session: %s", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v189;
    swift_slowDealloc();
  }
  else
  {
    sub_100552C2C((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v52 = v193;
  sub_100552A0C(a1, v193, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unexpected .incoming context!", v61, 2u);
      swift_slowDealloc();
    }

    uint64_t v62 = v52;
    goto LABEL_53;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v189 = a1;
    uint64_t v63 = v192;
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v192 + 32);
    uint64_t v65 = v190;
    v64(v20, v52, v190);
    char v66 = sub_100533CC8((int)v188, (uint64_t)v194, (uint64_t)a4);
    uint64_t v191 = v20;
    if ((v66 & 1) == 0)
    {
      uint64_t v98 = v189;
      unint64_t v99 = v180;
      sub_100552A0C(v189, (uint64_t)v180, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      swift_bridgeObjectRetain_n();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 136315394;
        uint64_t v103 = sub_100495A24();
        v198 = (void *)sub_1008FA0F0(v103, v104, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100552C2C((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        *(_WORD *)(v102 + 12) = 2080;
        sub_100B967D0(v188, (uint64_t)v194, a4);
        v198 = (void *)sub_1008FA0F0(v105, v106, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v98 = v189;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Declining incoming %s invitation because not from a family member: %s", (uint8_t *)v102, 0x16u);
        swift_arrayDestroy();
        uint64_t v65 = v190;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100552C2C((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
      uint64_t v133 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v135 = v134;
      uint64_t v136 = swift_release();
      __chkstk_darwin(v136);
      *(&v164 - 4) = v137;
      *(&v164 - 3) = v98;
      *(&v164 - 2) = v133;
      *(&v164 - 1) = v135;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      sub_10001CFB8(v133, v135);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v191, v65);
      return;
    }
    uint64_t v180 = v64;
    unint64_t v67 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v68 = v181;
    uint64_t v193 = v63 + 16;
    v67(v181, v20, v65);
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    unint64_t v188 = v67;
    if (v71)
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136315138;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      v198 = (void *)sub_1008FA0F0(v73, v74, aBlock);
      unint64_t v67 = v188;
      uint64_t v65 = v190;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v194 = *(void (**)(char *, uint64_t))(v63 + 8);
      v194(v68, v65);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Incoming .selfBeaconingDevice invitation for %s", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v194 = *(void (**)(char *, uint64_t))(v63 + 8);
      v194(v68, v65);
    }

    uint64_t v110 = (uint64_t)v183;
    uint64_t v112 = v184;
    uint64_t v111 = v185;
    unint64_t v113 = v191;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v114 = aBlock[0];
    swift_getKeyPath();
    sub_1010AD23C(v114, v111);
    swift_bridgeObjectRelease();
    swift_release();
    v67((char *)v112, v113, v65);
    uint64_t v115 = v192;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 56))(v112, 0, 1, v65);
    uint64_t v116 = v110 + *(int *)(v182 + 48);
    sub_10001D074(v111, v110, &qword_101638CF0);
    sub_10001D074(v112, v116, &qword_101638CF0);
    uint64_t v117 = v111;
    uint64_t v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
    if (v118(v110, 1, v65) == 1)
    {
      sub_10001DAB4(v112, &qword_101638CF0);
      sub_10001DAB4(v117, &qword_101638CF0);
      if (v118(v116, 1, v65) == 1)
      {
        sub_10001DAB4(v110, &qword_101638CF0);
        uint64_t v119 = v189;
LABEL_47:
        uint64_t v141 = v167;
        sub_100552A0C(v119, v167, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        os_log_t v142 = Logger.logObject.getter();
        os_log_type_t v143 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v142, v143))
        {
          v144 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)v144 = 136315138;
          uint64_t v145 = sub_100495A24();
          v198 = (void *)sub_1008FA0F0(v145, v146, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100552C2C(v141, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
          _os_log_impl((void *)&_mh_execute_header, v142, v143, "Accepting incoming %s invitation because it is this device", v144, 0xCu);
          swift_arrayDestroy();
          uint64_t v65 = v190;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100552C2C(v141, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        }

        uint64_t v91 = v187;
        uint64_t v97 = v179;
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
        uint64_t v157 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v159 = v158;
        uint64_t v160 = swift_release();
        __chkstk_darwin(v160);
        *(&v164 - 4) = v161;
        *(&v164 - 3) = v119;
        *(&v164 - 2) = v157;
        *(&v164 - 1) = v159;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        sub_10001CFB8(v157, v159);
        unint64_t v162 = (void (*)(char *, uint64_t, uint64_t))v188;
        v194(v191, v65);
        uint64_t v163 = v65;
        uint64_t v90 = v186;
        v162(v97, v186 + qword_10170DE80, v163);
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v126 = v177;
      sub_10001D074(v110, v177, &qword_101638CF0);
      if (v118(v116, 1, v65) != 1)
      {
        os_log_t v138 = v166;
        v180(v166, v116, v65);
        sub_10052EE80((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v139 = dispatch thunk of static Equatable.== infix(_:_:)();
        Class v140 = (void (*)(uint64_t, uint64_t))v194;
        v194(v138, v65);
        sub_10001DAB4(v184, &qword_101638CF0);
        sub_10001DAB4(v185, &qword_101638CF0);
        v140(v126, v65);
        sub_10001DAB4(v110, &qword_101638CF0);
        uint64_t v119 = v189;
        uint64_t v127 = (uint64_t)v178;
        if (v139) {
          goto LABEL_47;
        }
LABEL_40:
        sub_100552A0C(v119, v127, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        uint64_t v128 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v128, v129))
        {
          v130 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)v130 = 136315138;
          uint64_t v131 = sub_100495A24();
          v198 = (void *)sub_1008FA0F0(v131, v132, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100552C2C(v127, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "Accepting incoming %s invitation because it is not this device", v130, 0xCu);
          swift_arrayDestroy();
          uint64_t v65 = v190;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100552C2C(v127, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        }

        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
        uint64_t v147 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v149 = v148;
        uint64_t v150 = swift_release();
        __chkstk_darwin(v150);
        *(&v164 - 4) = v151;
        *(&v164 - 3) = v119;
        *(&v164 - 2) = v147;
        *(&v164 - 1) = v149;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        sub_10001CFB8(v147, v149);
        v194(v191, v65);
        return;
      }
      sub_10001DAB4(v184, &qword_101638CF0);
      sub_10001DAB4(v185, &qword_101638CF0);
      v194((char *)v126, v65);
    }
    sub_10001DAB4(v110, (uint64_t *)&unk_10166EAF0);
    uint64_t v119 = v189;
    uint64_t v127 = (uint64_t)v178;
    goto LABEL_40;
  }
  uint64_t v191 = a4;
  uint64_t v55 = *(void *)(v52 + 8);
  unint64_t v54 = *(void *)(v52 + 16);
  swift_bridgeObjectRetain();
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315138;
    swift_bridgeObjectRetain();
    v198 = (void *)sub_1008FA0F0(v55, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Incoming .meDevice invitation for %s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v75 = v187;
  uint64_t v76 = v191;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (LOBYTE(aBlock[0]) != 1)
  {
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Ignoring invite since this is not a Me device", v109, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if ((sub_10050F0D0() & 1) == 0)
  {
    uint64_t v120 = v170;
    sub_100552A0C(a1, v170, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v123 = 136315138;
      uint64_t v124 = sub_100495A24();
      v198 = (void *)sub_1008FA0F0(v124, v125, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100552C2C(v120, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Declining incoming %s invitation because this Me device cannot accept incoming requests", v123, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100552C2C(v120, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    }

    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v152 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v154 = v153;
    uint64_t v155 = swift_release();
    __chkstk_darwin(v155);
    *(&v164 - 4) = v156;
    *(&v164 - 3) = a1;
    *(&v164 - 2) = v152;
    *(&v164 - 1) = v154;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    sub_10001CFB8(v152, v154);
    return;
  }
  char v77 = sub_100B967D0(v188, (uint64_t)v194, v76);
  uint64_t v79 = v78;
  uint64_t v81 = v80;
  uint64_t v82 = *(void **)(v75 + 280);
  uint64_t v83 = a1;
  uint64_t v84 = v168;
  sub_100552A0C(v83, v168, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  unint64_t v85 = (*(unsigned __int8 *)(v169 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
  unint64_t v86 = (v24 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v87 = (v86 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v88 = swift_allocObject();
  sub_100551764(v84, v88 + v85, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  unint64_t v89 = v88 + v86;
  uint64_t v90 = v186;
  uint64_t v91 = v187;
  *(unsigned char *)unint64_t v89 = v77;
  *(void *)(v89 + 8) = v79;
  *(void *)(v89 + 16) = v81;
  *(void *)(v88 + v87) = v90;
  *(void *)(v88 + ((v87 + 15) & 0xFFFFFFFFFFFFFFF8)) = v91;
  void aBlock[4] = (uint64_t)sub_1005517CC;
  aBlock[5] = v88;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_1015CA820;
  uint64_t v92 = _Block_copy(aBlock);
  swift_retain();
  id v93 = v82;
  swift_retain();
  uint64_t v94 = v171;
  static DispatchQoS.unspecified.getter();
  v198 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v95 = v173;
  uint64_t v96 = v176;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v92);

  (*(void (**)(char *, uint64_t))(v175 + 8))(v95, v96);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v94, v174);
  swift_release();
  uint64_t v97 = v179;
  (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v179, v90 + qword_10170DE80, v190);
LABEL_51:
  swift_storeEnumTagMultiPayload();
  if (*(void *)(v91 + 440))
  {
    aBlock[0] = v90;
    swift_retain();
    dispatch thunk of AsynchronousCache.insert(key:value:)();
    swift_release();
    uint64_t v62 = (uint64_t)v97;
LABEL_53:
    sub_100552C2C(v62, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    return;
  }
  __break(1u);
}

void sub_1004F3008(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170DE98);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  if (v13)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v25 = v1;
    swift_retain();
    uint64_t v15 = sub_1004EB530();
    uint64_t v26 = v4;
    unint64_t v17 = v16;
    swift_release();
    uint64_t v31 = (void *)sub_1008FA0F0(v15, v17, aBlock);
    uint64_t v2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v4 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Session invalidated: %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (*(void *)(v2 + 440))
  {
    aBlock[0] = a1;
    sub_100062734(&qword_101648350, &qword_101648358);
    swift_retain();
    AsynchronousCache<>.removeCachedValue(_:)();
    swift_release();
    uint64_t v18 = *(void **)(v2 + 280);
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = a1;
    void aBlock[4] = (uint64_t)sub_1005515B0;
    aBlock[5] = v20;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015CA7D0;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    id v22 = v18;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v31 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v23 = v28;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v4);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v29);
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1004F3514()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1004F35B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  type metadata accessor for UUID();
  sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = a5;
  *(void *)(v8 + 80) = a6;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004F371C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a12 + 104))
  {
    sub_10055124C(a12 + 96, (uint64_t)v16);
    sub_1010BBC78(a6, a7, a8, a9, a11);
    return sub_1005512A8((uint64_t)v16);
  }
  return result;
}

uint64_t sub_1004F37B8()
{
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  swift_bridgeObjectRetain();
  uint64_t v1 = Array.description.getter();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)();
}

uint64_t sub_1004F38E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(*(void *)result + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v4 - 1;
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = 32; ; i += 160)
    {
      long long v8 = *(_OWORD *)(v3 + i + 16);
      long long v26 = *(_OWORD *)(v3 + i);
      long long v27 = v8;
      long long v9 = *(_OWORD *)(v3 + i + 32);
      long long v10 = *(_OWORD *)(v3 + i + 48);
      long long v11 = *(_OWORD *)(v3 + i + 80);
      long long v30 = *(_OWORD *)(v3 + i + 64);
      long long v31 = v11;
      long long v28 = v9;
      long long v29 = v10;
      long long v12 = *(_OWORD *)(v3 + i + 96);
      long long v13 = *(_OWORD *)(v3 + i + 112);
      long long v14 = *(_OWORD *)(v3 + i + 144);
      long long v34 = *(_OWORD *)(v3 + i + 128);
      long long v35 = v14;
      long long v32 = v12;
      long long v33 = v13;
      if (BYTE3(v34) == 1)
      {
        sub_1000A3AA8((uint64_t)&v26);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v36 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000B7514(0, v6[2] + 1, 1);
          uint64_t v6 = v36;
        }
        unint64_t v17 = v6[2];
        unint64_t v16 = v6[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000B7514(v16 > 1, v17 + 1, 1);
          uint64_t v6 = v36;
        }
        v6[2] = v17 + 1;
        uint64_t v18 = &v6[20 * v17];
        long long v19 = v27;
        v18[2] = v26;
        v18[3] = v19;
        long long v20 = v28;
        long long v21 = v29;
        long long v22 = v31;
        v18[6] = v30;
        v18[7] = v22;
        v18[4] = v20;
        v18[5] = v21;
        long long v23 = v32;
        long long v24 = v33;
        long long v25 = v35;
        v18[10] = v34;
        v18[11] = v25;
        v18[8] = v23;
        v18[9] = v24;
      }
      if (!v5) {
        break;
      }
      --v5;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1004F3A44@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)result;
  int64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    long long v11 = a2;
    sub_1000B7A5C(0, v3, 0);
    uint64_t v4 = (void *)(v2 + 184);
    do
    {
      char v5 = *((unsigned char *)v4 - 16);
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      uint64_t result = swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        uint64_t result = sub_1000B7A5C(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      long long v10 = &_swiftEmptyArrayStorage[3 * v9];
      *((unsigned char *)v10 + 32) = v5;
      v10[5] = v7;
      void v10[6] = v6;
      v4 += 20;
      --v3;
    }
    while (v3);
    a2 = v11;
  }
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

void *sub_1004F3B2C(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 16))
  {
    swift_beginAccess();
    if (swift_weakLoadStrong()
      && (sub_1004EFE60((uint64_t)v2),
          swift_release(),
          sub_10001D608((uint64_t)v2, (uint64_t)v3, &qword_1016482D0),
          sub_10028E60C((uint64_t)v3) != 1))
    {
      v4[6] = v3[6];
      v4[7] = v3[7];
      v4[8] = v3[8];
      v4[9] = v3[9];
      v4[2] = v3[2];
      v4[3] = v3[3];
      v4[4] = v3[4];
      v4[5] = v3[5];
      v4[0] = v3[0];
      v4[1] = v3[1];
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        sub_1004F3D60(v4);
        sub_100550AD0(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        return (void *)swift_release();
      }
      else
      {
        return sub_100550AD0(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      return (void *)os_log(_:dso:log:_:_:)();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t result = (void *)swift_weakLoadStrong();
    if (result)
    {
      static os_log_type_t.info.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      return (void *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1004F3D60(long long *a1)
{
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  uint64_t v29 = 60;
  unint64_t v30 = 0xE100000000000000;
  long long v4 = a1[7];
  long long v25 = a1[6];
  long long v26 = v4;
  long long v5 = a1[9];
  long long v27 = a1[8];
  long long v28 = v5;
  long long v6 = a1[3];
  long long v21 = a1[2];
  long long v22 = v6;
  long long v7 = a1[5];
  long long v23 = a1[4];
  long long v24 = v7;
  long long v8 = a1[1];
  long long v19 = *a1;
  long long v20 = v8;
  sub_10055065C();
  v9._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  uint64_t v12 = *((void *)a1 + 12);
  long long v11 = (void *)*((void *)a1 + 13);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = 60;
  *(void *)(v3 + 40) = 0xE100000000000000;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(NSObject **)(v1 + 208);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100551230;
  *(void *)(v16 + 24) = v1;
  *(void *)&long long v21 = sub_1003B7AE0;
  *((void *)&v21 + 1) = v16;
  *(void *)&long long v19 = _NSConcreteStackBlock;
  *((void *)&v19 + 1) = 1107296256;
  *(void *)&long long v20 = sub_1000A70B0;
  *((void *)&v20 + 1) = &unk_1015CA528;
  unint64_t v17 = _Block_copy(&v19);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v15, v17);
  _Block_release(v17);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v15) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004F3FF8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
    sub_1004F4070(a1 + *(int *)(v3 + 20));
    sub_1004F42FC(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004F4070(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v8 = *(void **)(v2 + 208);
  *long long v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
LABEL_5:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v14 = [self standardUserDefaults];
  uint64_t v15 = sub_10052A504((uint64_t (*)(void))sub_10052A3EC);
  *(void *)&v17[-32] = __chkstk_darwin(v15);
  *(void *)&v17[-24] = v14;
  *(void *)&v17[-16] = a1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();

  return swift_bridgeObjectRelease();
}

void *sub_1004F42FC(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v3 = v2;
  v267 = a2;
  uint64_t v294 = type metadata accessor for FamilyCryptoKeysV2();
  uint64_t v292 = *(void *)(v294 - 8);
  uint64_t v5 = __chkstk_darwin(v294);
  v246 = (char *)v231 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v293 = (void *)((char *)v231 - v8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v231 - v9;
  uint64_t MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
  uint64_t v11 = __chkstk_darwin(MyAccessoryKeyEnvelope);
  uint64_t v254 = (uint64_t)v231 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v272 = (char *)v231 - v13;
  uint64_t v295 = type metadata accessor for TimeBasedKey();
  uint64_t v261 = *(void *)(v295 - 8);
  uint64_t v14 = __chkstk_darwin(v295);
  v291 = (void *)((char *)v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v290 = (uint64_t)v231 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v286 = (char *)v231 - v19;
  __chkstk_darwin(v18);
  uint64_t v284 = (uint64_t)v231 - v20;
  uint64_t v283 = type metadata accessor for FamilyCryptoKeysV1();
  uint64_t v279 = *(void *)(v283 - 8);
  uint64_t v21 = __chkstk_darwin(v283);
  v285 = (void *)((char *)v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v282 = (uint64_t)v231 - v23;
  uint64_t v233 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0);
  uint64_t v24 = __chkstk_darwin(v233);
  uint64_t v232 = (uint64_t)v231 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v234 = (uint64_t)v231 - v26;
  uint64_t v27 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v27 - 8);
  uint64_t v264 = (uint64_t)v231 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v288 = *(void *)(v275 - 8);
  uint64_t v29 = __chkstk_darwin(v275);
  uint64_t v258 = (uint64_t)v231 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v263 = (uint64_t)v231 - v32;
  __chkstk_darwin(v31);
  long long v34 = (char *)v231 - v33;
  uint64_t v280 = type metadata accessor for UUID();
  uint64_t v269 = *(void *)(v280 - 8);
  uint64_t v35 = *(void *)(v269 + 64);
  uint64_t v36 = __chkstk_darwin(v280);
  v273 = (char *)v231 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v36);
  v257 = (char *)v231 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v240 = (char *)v231 - v40;
  __chkstk_darwin(v39);
  v281 = (char *)v231 - v41;
  uint64_t v42 = sub_10000588C(&qword_101638CF0);
  uint64_t v43 = __chkstk_darwin(v42 - 8);
  v256 = (char *)v231 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v268 = (char *)v231 - v45;
  uint64_t v46 = type metadata accessor for DispatchPredicate();
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v49 = (void *)((char *)v231 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v50 = *(void **)(v3 + 208);
  *uint64_t v49 = v50;
  (*(void (**)(void *, void, uint64_t))(v47 + 104))(v49, enum case for DispatchPredicate.onQueue(_:), v46);
  id v51 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v47 + 8))(v49, v46);
  if ((v50 & 1) == 0) {
    goto LABEL_86;
  }
  sub_1004EFE60((uint64_t)v308);
  sub_10001D608((uint64_t)v308, (uint64_t)v309, &qword_1016482D0);
  uint64_t result = (void *)sub_10028E60C((uint64_t)v309);
  if (result == 1)
  {
    if (a1) {
      return (void *)a1();
    }
    return result;
  }
  uint64_t v53 = v3;
  Swift::String v316 = (Swift::String)v309[6];
  long long v317 = v309[7];
  long long v318 = v309[8];
  long long v319 = v309[9];
  long long v312 = v309[2];
  long long v313 = v309[3];
  long long v314 = v309[4];
  long long v315 = v309[5];
  long long v310 = v309[0];
  long long v311 = v309[1];
  uint64_t result = (void *)sub_1004F7A2C((uint64_t)&v310);
  unint64_t v54 = result;
  uint64_t v241 = result[2];
  if (v241)
  {
    unint64_t v55 = 0;
    uint64_t v289 = 0;
    uint64_t v56 = v269;
    uint64_t v57 = *(unsigned __int8 *)(v269 + 80);
    v249 = (char *)result + ((v57 + 32) & ~v57);
    v277 = v34;
    uint64_t v278 = v269 + 16;
    uint64_t v248 = v269 + 48;
    v270 = (void (**)(uint64_t, char *, uint64_t))(v269 + 32);
    v244 = a1;
    v245 = (v288 + 48);
    uint64_t v238 = v57 | 7;
    uint64_t v239 = (v57 + 24) & ~v57;
    unint64_t v237 = (v35 + v239 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v236 = (v237 + 167) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v235 = v236 + 16;
    v243 = (uint64_t (**)(void *, uint64_t))(v269 + 8);
    v276 = v285 + 1;
    uint64_t v271 = v269 + 56;
    v231[0] = (v269 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v242 = xmmword_101347BA0;
    v231[1] = (char *)&type metadata for () + 8;
    uint64_t v58 = v280;
    uint64_t v59 = v281;
    v287 = v10;
    uint64_t v259 = v53;
    v247 = result;
    while (1)
    {
      unint64_t v60 = v54[2];
      uint64_t v61 = v268;
      if (v55 >= v60)
      {
        __break(1u);
LABEL_86:
        __break(1u);
        return result;
      }
      uint64_t v62 = &v249[*(void *)(v56 + 72) * v55];
      v274 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      v274(v268, v62, v58);
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
      v63(v61, 0, 1, v58);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v61, 1, v58) == 1) {
        goto LABEL_57;
      }
      v262 = v63;
      uint64_t v64 = *v270;
      (*v270)((uint64_t)v59, v61, v58);
      uint64_t v65 = v264;
      v266 = *(void (**)(char *, char *, uint64_t))(v53 + 152);
      sub_100ACEADC((uint64_t)v59, v264);
      uint64_t v66 = v275;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v245->isa)(v65, 1, v275) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v65, (uint64_t *)&unk_101653D50);
        sub_1004F70CC(v59, &v310);
        unsigned __int8 v210 = sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        if (v244) {
          ((void (*)(void *))v244)(v210);
        }
        return (void *)(*v243)(v59, v58);
      }
      v265 = v64;
      unint64_t v260 = v55;
      uint64_t v67 = (uint64_t)v277;
      sub_100551764(v65, (uint64_t)v277, type metadata accessor for SharedBeaconRecord);
      LODWORD(v288) = static os_log_type_t.info.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      uint64_t v250 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = v242;
      *((void *)&v252 + 1) = v67 + *(int *)(v66 + 20);
      uint64_t v69 = UUID.uuidString.getter();
      uint64_t v71 = v70;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v72 = sub_10000B4CC();
      *(void *)(v68 + 64) = v72;
      *(void *)(v68 + 32) = v69;
      *(void *)(v68 + 40) = v71;
      uint64_t v306 = 60;
      unint64_t v307 = 0xE100000000000000;
      Swift::String v302 = v316;
      long long v303 = v317;
      long long v304 = v318;
      long long v305 = v319;
      long long v298 = v312;
      long long v299 = v313;
      long long v300 = v314;
      long long v301 = v315;
      long long v296 = v310;
      long long v297 = v311;
      sub_10055065C();
      v73._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      v74._countAndFlagsBits = 8250;
      v74._object = (void *)0xE200000000000000;
      String.append(_:)(v74);
      Swift::String v75 = v316;
      swift_bridgeObjectRetain();
      String.append(_:)(v75);
      uint64_t v76 = v275;
      swift_bridgeObjectRelease();
      v77._countAndFlagsBits = 62;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      uint64_t v78 = v306;
      unint64_t v79 = v307;
      *(void *)(v68 + 96) = &type metadata for String;
      *(void *)(v68 + 104) = v72;
      unint64_t v251 = v72;
      uint64_t v80 = v67;
      *(void *)(v68 + 72) = v78;
      *(void *)(v68 + 80) = v79;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = *(int *)(v76 + 44);
      uint64_t v82 = *(void *)(v67 + v81);
      uint64_t v83 = v263;
      sub_100552A0C(v67, v263, type metadata accessor for SharedBeaconRecord);
      if (v82 != -1) {
        break;
      }
      uint64_t v84 = *(void *)(v83 + *(int *)(v76 + 48));
      sub_100552C2C(v83, type metadata accessor for SharedBeaconRecord);
      uint64_t v85 = v280;
      unint64_t v86 = v286;
      if (v84 != -1) {
        goto LABEL_15;
      }
      type metadata accessor for BeaconKeyManager(0);
      uint64_t v163 = v289;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v164 = sub_1006D8358(v67, 0);
      uint64_t v166 = v165;
      unsigned __int8 v168 = v167;
      swift_release();
      uint64_t v169 = v265;
      if (v168 != 1)
      {
        if (v168 == 255) {
          goto LABEL_74;
        }
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        sub_100550AA0(v164, v166, v168);
        swift_bridgeObjectRelease();
LABEL_76:
        static os_log_type_t.error.getter();
        uint64_t v221 = swift_allocObject();
        *(_OWORD *)(v221 + 16) = xmmword_101342130;
        uint64_t v222 = UUID.uuidString.getter();
        unint64_t v223 = v251;
        *(void *)(v221 + 56) = &type metadata for String;
        *(void *)(v221 + 64) = v223;
        *(void *)(v221 + 32) = v222;
        *(void *)(v221 + 40) = v224;
        goto LABEL_77;
      }
      v274(v240, v281, v85);
      int64_t v170 = *(void *)(v164 + 16);
      if (v170)
      {
        uint64_t v288 = (uint64_t)v163;
        uint64_t v289 = v166;
        *(void *)&long long v296 = _swiftEmptyArrayStorage;
        sub_1000B7DB4(0, v170, 0);
        uint64_t v171 = v164;
        uint64_t v172 = v164 + ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80));
        uint64_t v173 = *(void *)(v261 + 72);
        do
        {
          uint64_t v174 = v284;
          sub_100552A0C(v172, v284, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_100552A0C(v174, (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v176 = v285;
          uint64_t v175 = v286;
          void *v285 = *v86;
          uint64_t v177 = v295;
          unint64_t v178 = &v175[*(int *)(v295 + 20)];
          long long v179 = (char *)v176 + *(int *)(v283 + 20);
          uint64_t v180 = type metadata accessor for DateInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 16))(v179, v178, v180);
          uint64_t v181 = (uint64_t)v286;
          uint64_t v182 = &v286[*(int *)(v177 + 24)];
          unint64_t v183 = *((void *)v182 + 5);
          if (v183 >> 60 == 15)
          {
            uint64_t v184 = *((void *)v182 + 2);
            unint64_t v185 = *((void *)v182 + 3);
            sub_1000361E0(v184, v185);
            sub_100552C2C(v181, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          }
          else
          {
            uint64_t v184 = *((void *)v182 + 4);
            sub_1000361E0(v184, *((void *)v182 + 5));
            sub_100552C2C(v181, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            unint64_t v185 = v183 | 0x2000000000000000;
          }
          uint64_t v186 = v282;
          uint64_t v187 = *(int *)(v283 + 24);
          uint64_t v188 = (uint64_t)v285;
          *(void *)((char *)v285 + v187) = v184;
          *(void *)((char *)v276 + v187) = v185;
          sub_100551764(v188, v186, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
          sub_100552C2C(v284, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v189 = (void *)v296;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7DB4(0, v189[2] + 1, 1);
            uint64_t v189 = (void *)v296;
          }
          unint64_t v191 = v189[2];
          unint64_t v190 = v189[3];
          if (v191 >= v190 >> 1)
          {
            sub_1000B7DB4(v190 > 1, v191 + 1, 1);
            uint64_t v189 = (void *)v296;
          }
          v189[2] = v191 + 1;
          sub_100551764(v282, (uint64_t)v189+ ((*(unsigned __int8 *)(v279 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v279 + 80))+ *(void *)(v279 + 72) * v191, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
          v172 += v173;
          --v170;
          unint64_t v86 = v286;
        }
        while (v170);
        sub_100550AA0(v171, v289, 1u);
        uint64_t v85 = v280;
        uint64_t v163 = v288;
        uint64_t v169 = v265;
      }
      else
      {
        sub_100550AA0(v164, v166, 1u);
        uint64_t v189 = _swiftEmptyArrayStorage;
      }
      uint64_t v192 = v234;
      v169(v234, v240, v85);
      *(void *)(v192 + *(int *)(v233 + 20)) = v189;
      uint64_t v193 = v232;
      sub_100552A0C(v192, v232, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
      sub_1004F8F60(0, 1, v193, (uint64_t)&v296);
      if (v163)
      {
        swift_bridgeObjectRelease();
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        static os_log_type_t.error.getter();
        uint64_t v226 = swift_allocObject();
        *(_OWORD *)(v226 + 16) = xmmword_101342130;
        swift_getErrorValue();
        uint64_t v227 = Error.localizedDescription.getter();
        unint64_t v228 = v251;
        *(void *)(v226 + 56) = &type metadata for String;
        *(void *)(v226 + 64) = v228;
        *(void *)(v226 + 32) = v227;
        *(void *)(v226 + 40) = v229;
        os_log(_:dso:log:_:_:)();
        uint64_t v230 = swift_bridgeObjectRelease();
        if (v244) {
          ((void (*)(uint64_t))v244)(v230);
        }
        swift_errorRelease();
        sub_100552C2C(v234, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
        goto LABEL_79;
      }
      uint64_t v288 = *((void *)&v296 + 1);
      uint64_t v289 = 0;
      long long v252 = v297;
      LODWORD(v250) = v296;
      v253 = (void *)*((void *)&v319 + 1);
      v266 = (void (*)(char *, char *, uint64_t))v319;
      LODWORD(v251) = BYTE8(v318);
      v194 = (void (*)(unint64_t, char *, uint64_t))v169;
      uint64_t v195 = (uint64_t)v256;
      v262(v256, 1, 1, v85);
      uint64_t v196 = swift_allocObject();
      uint64_t v197 = v259;
      swift_weakInit();
      v198 = v257;
      v274(v257, v281, v85);
      unint64_t v199 = swift_allocObject();
      *(void *)(v199 + 16) = v196;
      v194(v199 + v239, v198, v85);
      v200 = (_OWORD *)(v199 + v237);
      long long v201 = v317;
      v200[6] = v316;
      v200[7] = v201;
      long long v202 = v319;
      v200[8] = v318;
      v200[9] = v202;
      long long v203 = v313;
      v200[2] = v312;
      v200[3] = v203;
      long long v204 = v315;
      v200[4] = v314;
      v200[5] = v204;
      long long v205 = v311;
      _OWORD *v200 = v310;
      v200[1] = v205;
      v206 = (uint64_t (**)(void))(v199 + v236);
      uint64_t v207 = (uint64_t)v244;
      uint64_t v58 = v85;
      os_log_t v208 = v267;
      char *v206 = v244;
      v206[1] = v208;
      swift_retain();
      sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100550B3C);
      uint64_t v53 = v197;
      sub_1000BD0E8(v207);
      long long v209 = v252;
      sub_1005361E0(v250, v288, v252, *((unint64_t *)&v252 + 1), v251, v266, (uint64_t)v253, 0, v195, 0, 1, 0, (void (*)(void, void))sub_100550D30, v199);
      swift_release();
      sub_10001CFB8(v209, *((unint64_t *)&v209 + 1));
      sub_10001DAB4(v195, &qword_101638CF0);
      uint64_t v161 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope;
      uint64_t v162 = v192;
LABEL_39:
      sub_100552C2C(v162, v161);
      unint64_t v55 = v260 + 1;
      sub_100552C2C((uint64_t)v277, type metadata accessor for SharedBeaconRecord);
      uint64_t v59 = v281;
      (*v243)(v281, v58);
      uint64_t result = (void *)swift_release();
      uint64_t v56 = v269;
      unint64_t v54 = v247;
      if (v55 == v241)
      {
        v262(v268, 1, 1, v58);
        goto LABEL_57;
      }
    }
    sub_100552C2C(v83, type metadata accessor for SharedBeaconRecord);
LABEL_15:
    uint64_t v87 = *(void *)(v67 + v81);
    uint64_t v88 = v258;
    sub_100552A0C(v67, v258, type metadata accessor for SharedBeaconRecord);
    if (v87 == -1)
    {
      sub_100552C2C(v88, type metadata accessor for SharedBeaconRecord);
LABEL_67:
      swift_bridgeObjectRelease();
      sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
      static os_log_type_t.error.getter();
      uint64_t v211 = swift_allocObject();
      *(_OWORD *)(v211 + 16) = xmmword_101342130;
      uint64_t v212 = UUID.uuidString.getter();
      unint64_t v213 = v251;
      *(void *)(v211 + 56) = &type metadata for String;
      *(void *)(v211 + 64) = v213;
      *(void *)(v211 + 32) = v212;
      *(void *)(v211 + 40) = v214;
LABEL_77:
      os_log(_:dso:log:_:_:)();
      uint64_t v225 = swift_bridgeObjectRelease();
      if (v244) {
        ((void (*)(uint64_t))v244)(v225);
      }
LABEL_79:
      uint64_t v220 = v80;
LABEL_80:
      sub_100552C2C(v220, type metadata accessor for SharedBeaconRecord);
      return (void *)(*v243)(v281, v280);
    }
    uint64_t v89 = *(void *)(v88 + *(int *)(v76 + 48));
    sub_100552C2C(v88, type metadata accessor for SharedBeaconRecord);
    if (v89 == -1) {
      goto LABEL_67;
    }
    type metadata accessor for BeaconKeyManager(0);
    uint64_t v90 = v289;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v288 = sub_1006D8358(v67, 0);
    uint64_t v92 = v91;
    unsigned __int8 v94 = v93;
    swift_release();
    if (v94 != 1)
    {
      if (v94 == 255)
      {
LABEL_74:
        swift_bridgeObjectRelease();
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
      }
      else
      {
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        sub_100550AA0(v288, v92, v94);
        swift_bridgeObjectRelease();
      }
      goto LABEL_76;
    }
    v253 = (void *)v92;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v95 = (void (*)(char *, char *, uint64_t))sub_1006D8358(v80, 1);
    uint64_t v97 = v96;
    unsigned __int8 v99 = v98;
    swift_release();
    if (v99 != 1)
    {
      if (v99 == 255)
      {
        swift_bridgeObjectRelease();
        sub_100550AA0(v288, (uint64_t)v253, 1u);
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
      }
      else
      {
        sub_100550AA0(v288, (uint64_t)v253, 1u);
        sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
        sub_100550AA0((uint64_t)v95, v97, v99);
        swift_bridgeObjectRelease();
      }
      goto LABEL_76;
    }
    *(void *)&long long v252 = v97;
    *((void *)&v252 + 1) = v90;
    uint64_t v58 = v280;
    v274(v273, v281, v280);
    uint64_t v100 = v288;
    Class v101 = *(Class *)(v288 + 16);
    v266 = v95;
    if (v101)
    {
      *(void *)&long long v296 = _swiftEmptyArrayStorage;
      sub_1000B7D78(0, (int64_t)v101, 0);
      uint64_t v102 = v100 + ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80));
      uint64_t v289 = *(void *)(v261 + 72);
      do
      {
        uint64_t v103 = v290;
        sub_100552A0C(v102, v290, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v104 = v291;
        sub_100552A0C(v103, (uint64_t)v291, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v105 = v293;
        void *v293 = *v104;
        uint64_t v106 = v295;
        uint64_t v107 = (char *)v104 + *(int *)(v295 + 20);
        uint64_t v108 = v294;
        uint64_t v109 = (char *)v105 + *(int *)(v294 + 20);
        uint64_t v110 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16))(v109, v107, v110);
        uint64_t v111 = (char *)v104 + *(int *)(v106 + 24);
        uint64_t v112 = *((void *)v111 + 2);
        unint64_t v113 = *((void *)v111 + 3);
        sub_1000361E0(v112, v113);
        sub_100552C2C((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v114 = (void *)((char *)v105 + *(int *)(v108 + 24));
        *uint64_t v114 = v112;
        v114[1] = v113;
        uint64_t v115 = (uint64_t)v105;
        uint64_t v116 = (uint64_t)v287;
        sub_100551764(v115, (uint64_t)v287, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552C2C(v103, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v117 = (void *)v296;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7D78(0, v117[2] + 1, 1);
          uint64_t v117 = (void *)v296;
        }
        unint64_t v119 = v117[2];
        unint64_t v118 = v117[3];
        if (v119 >= v118 >> 1)
        {
          sub_1000B7D78(v118 > 1, v119 + 1, 1);
          uint64_t v117 = (void *)v296;
        }
        v117[2] = v119 + 1;
        sub_100551764(v116, (uint64_t)v117+ ((*(unsigned __int8 *)(v292 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v292 + 80))+ *(void *)(v292 + 72) * v119, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        v102 += v289;
        Class v101 = (Class)((char *)v101 - 1);
      }
      while (v101);
      sub_100550AA0(v288, (uint64_t)v253, 1u);
      uint64_t v58 = v280;
      uint64_t v80 = (uint64_t)v277;
      uint64_t v95 = v266;
    }
    else
    {
      sub_100550AA0(v288, (uint64_t)v253, 1u);
      uint64_t v117 = _swiftEmptyArrayStorage;
    }
    int64_t v120 = *((void *)v95 + 2);
    v253 = v117;
    if (v120)
    {
      *(void *)&long long v296 = _swiftEmptyArrayStorage;
      sub_1000B7D78(0, v120, 0);
      uint64_t v121 = (uint64_t)v95
           + ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80));
      uint64_t v288 = *(void *)(v261 + 72);
      uint64_t v122 = (uint64_t)v246;
      do
      {
        uint64_t v289 = v120;
        uint64_t v123 = v122;
        uint64_t v124 = v290;
        sub_100552A0C(v121, v290, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v125 = v291;
        sub_100552A0C(v124, (uint64_t)v291, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v126 = (uint64_t)v293;
        void *v293 = *v125;
        uint64_t v127 = v295;
        uint64_t v128 = (char *)v125 + *(int *)(v295 + 20);
        uint64_t v129 = v294;
        uint64_t v130 = v126 + *(int *)(v294 + 20);
        uint64_t v131 = type metadata accessor for DateInterval();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v131 - 8) + 16))(v130, v128, v131);
        unint64_t v132 = (char *)v125 + *(int *)(v127 + 24);
        uint64_t v133 = *((void *)v132 + 2);
        unint64_t v134 = *((void *)v132 + 3);
        sub_1000361E0(v133, v134);
        sub_100552C2C((uint64_t)v125, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v135 = (uint64_t *)(v126 + *(int *)(v129 + 24));
        *unint64_t v135 = v133;
        v135[1] = v134;
        uint64_t v122 = v123;
        sub_100551764(v126, v123, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552C2C(v124, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v136 = (void *)v296;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7D78(0, v136[2] + 1, 1);
          uint64_t v136 = (void *)v296;
        }
        unint64_t v138 = v136[2];
        unint64_t v137 = v136[3];
        uint64_t v139 = v292;
        uint64_t v140 = v289;
        if (v138 >= v137 >> 1)
        {
          sub_1000B7D78(v137 > 1, v138 + 1, 1);
          uint64_t v136 = (void *)v296;
        }
        v136[2] = v138 + 1;
        sub_100551764(v122, (uint64_t)v136+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * v138, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        v121 += v288;
        int64_t v120 = v140 - 1;
      }
      while (v120);
      sub_100550AA0((uint64_t)v266, v252, 1u);
      uint64_t v58 = v280;
      uint64_t v141 = (uint64_t)v277;
    }
    else
    {
      uint64_t v141 = v80;
      sub_100550AA0((uint64_t)v95, v252, 1u);
      uint64_t v136 = _swiftEmptyArrayStorage;
    }
    uint64_t v142 = (uint64_t)v272;
    os_log_type_t v143 = (void (*)(unint64_t, char *, uint64_t))v265;
    v265((uint64_t)v272, v273, v58);
    uint64_t v144 = MyAccessoryKeyEnvelope;
    *(void *)(v142 + *(int *)(MyAccessoryKeyEnvelope + 20)) = v253;
    *(void *)(v142 + *(int *)(v144 + 24)) = v136;
    uint64_t v145 = v254;
    sub_100552A0C(v142, v254, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
    uint64_t v146 = *((void *)&v252 + 1);
    sub_1004F9244(0, 2, v145, (uint64_t)&v296);
    uint64_t v147 = v244;
    if (v146)
    {
      swift_bridgeObjectRelease();
      sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
      static os_log_type_t.error.getter();
      uint64_t v215 = swift_allocObject();
      *(_OWORD *)(v215 + 16) = xmmword_101342130;
      swift_getErrorValue();
      uint64_t v216 = Error.localizedDescription.getter();
      unint64_t v217 = v251;
      *(void *)(v215 + 56) = &type metadata for String;
      *(void *)(v215 + 64) = v217;
      *(void *)(v215 + 32) = v216;
      *(void *)(v215 + 40) = v218;
      os_log(_:dso:log:_:_:)();
      uint64_t v219 = swift_bridgeObjectRelease();
      if (v147) {
        ((void (*)(uint64_t))v147)(v219);
      }
      swift_errorRelease();
      sub_100552C2C(v142, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
      uint64_t v220 = v141;
      goto LABEL_80;
    }
    uint64_t v288 = *((void *)&v296 + 1);
    uint64_t v289 = 0;
    long long v252 = v297;
    LODWORD(v250) = v296;
    v253 = (void *)*((void *)&v319 + 1);
    v266 = (void (*)(char *, char *, uint64_t))v319;
    LODWORD(v251) = BYTE8(v318);
    uint64_t v148 = (uint64_t)v256;
    v262(v256, 1, 1, v58);
    uint64_t v149 = swift_allocObject();
    swift_weakInit();
    uint64_t v150 = v257;
    v274(v257, v281, v58);
    unint64_t v151 = swift_allocObject();
    *(void *)(v151 + 16) = v149;
    v143(v151 + v239, v150, v58);
    uint64_t v152 = (_OWORD *)(v151 + v237);
    long long v153 = v317;
    v152[6] = v316;
    v152[7] = v153;
    long long v154 = v319;
    v152[8] = v318;
    v152[9] = v154;
    long long v155 = v313;
    v152[2] = v312;
    v152[3] = v155;
    long long v156 = v315;
    v152[4] = v314;
    v152[5] = v156;
    long long v157 = v311;
    *uint64_t v152 = v310;
    v152[1] = v157;
    unint64_t v158 = (uint64_t (**)(void))(v151 + v236);
    unint64_t v159 = v267;
    void *v158 = v147;
    v158[1] = v159;
    sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100550B3C);
    uint64_t v53 = v259;
    sub_1000BD0E8((uint64_t)v147);
    swift_retain();
    long long v160 = v252;
    sub_1005361E0(v250, v288, v252, *((unint64_t *)&v252 + 1), v251, v266, (uint64_t)v253, 0, v148, 0, 1, 0, (void (*)(void, void))sub_100550AB8, v151);
    swift_release();
    sub_10001CFB8(v160, *((unint64_t *)&v160 + 1));
    sub_10001DAB4(v148, &qword_101638CF0);
    uint64_t v161 = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope;
    uint64_t v162 = (uint64_t)v272;
    goto LABEL_39;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v269 + 56))(v268, 1, 1, v280);
LABEL_57:
  swift_bridgeObjectRelease();
  return sub_100550AD0(v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005509F0);
}

uint64_t sub_1004F63D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void **)(v1 + 56);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (*(void *)(v1 + 48))
    {
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    }
    else
    {
      static DispatchQoS.background.getter();
      uint64_t v12 = swift_allocObject();
      swift_weakInit();
      uint64_t v13 = swift_allocObject();
      swift_weakInit();
      type metadata accessor for XPCActivity();
      swift_allocObject();
      uint64_t v14 = sub_1009D9B34(0xD000000000000034, (void *)0x80000001013FFFB0, (uint64_t)v4, (uint64_t)sub_10054DE50, v12, (uint64_t)sub_10054DE58, v13);
      swift_release();
      swift_release();
      *(void *)(v1 + 48) = v14;
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004F6650(uint64_t a1, void *a2, char *a3)
{
  uint64_t v80 = a3;
  id v82 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v103 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v79 = (char *)v76 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  Class v101 = (char *)v76 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v96 = (char *)v76 - v14;
  __chkstk_darwin(v13);
  unint64_t v86 = (char *)v76 - v15;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v17);
  unsigned __int8 v93 = (char *)v76 - v21;
  uint64_t v78 = *(void *)(a1 + 16);
  if (v78)
  {
    v76[1] = v3;
    uint64_t v77 = a1 + 32;
    unsigned __int8 v98 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    unsigned __int8 v99 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v102 = (void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v91 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    unint64_t v104 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    v76[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    uint64_t v97 = v6;
    uint64_t v92 = v19;
    do
    {
      uint64_t v85 = v22;
      uint64_t v23 = v77 + 160 * v22;
      uint64_t v24 = *(void *)(v23 + 16);
      uint64_t v25 = *(void **)(v23 + 24);
      uint64_t v105 = 0x79654B7974726964;
      unint64_t v106 = 0xEA00000000002D73;
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      uint64_t v81 = v105;
      unint64_t v84 = v106;
      NSString v27 = String._bridgeToObjectiveC()();
      id v28 = [v82 stringArrayForKey:v27];

      if (v28)
      {
        uint64_t v29 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v29 = _swiftEmptyArrayStorage;
      }
      uint64_t v30 = v93;
      uint64_t v31 = v29[2];
      if (v31)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = v29 + 5;
        uint64_t v33 = (char *)_swiftEmptyArrayStorage;
        do
        {
          swift_bridgeObjectRetain();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          if ((*v99)(v19, 1, v5) == 1)
          {
            sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
          }
          else
          {
            long long v34 = *v98;
            uint64_t v35 = v86;
            (*v98)(v86, v19, v5);
            v34(v96, v35, v5);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v33 = (char *)sub_100A6F668(0, *((void *)v33 + 2) + 1, 1, (unint64_t)v33);
            }
            unint64_t v37 = *((void *)v33 + 2);
            unint64_t v36 = *((void *)v33 + 3);
            uint64_t v6 = v97;
            if (v37 >= v36 >> 1) {
              uint64_t v33 = (char *)sub_100A6F668(v36 > 1, v37 + 1, 1, (unint64_t)v33);
            }
            *((void *)v33 + 2) = v37 + 1;
            v34(&v33[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v37], v96, v5);
            uint64_t v19 = v92;
          }
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        uint64_t v30 = v93;
      }
      else
      {
        uint64_t v33 = (char *)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      uint64_t v38 = v33;
      uint64_t v90 = sub_10052EE80(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = Set.init(minimumCapacity:)();
      uint64_t v40 = *((void *)v33 + 2);
      unint64_t v94 = (unint64_t)v102 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v41 = v91;
      uint64_t v89 = v40;
      uint64_t v83 = v38;
      if (v40)
      {
        v76[2] = (unint64_t)v91 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v42 = 0;
        uint64_t v88 = (char *)v38 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        uint64_t v100 = *(void *)(v6 + 72);
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
        v43(v30, v88, v5);
        while (1)
        {
          uint64_t v87 = *v41;
          v87(v30, 0, 1, v5);
          if ((*v99)(v30, 1, v5) == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v19 = v92;
            goto LABEL_36;
          }
          uint64_t v95 = v42;
          (*v98)(v103, v30, v5);
          swift_bridgeObjectRetain();
          uint64_t v47 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v48 = -1 << *(unsigned char *)(v39 + 32);
          unint64_t v49 = v47 & ~v48;
          if ((*(void *)(v39 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49))
          {
            uint64_t v50 = ~v48;
            while (1)
            {
              uint64_t v51 = (uint64_t)v101;
              uint64_t v52 = v43;
              v43(v101, (char *)(*(void *)(v39 + 48) + v49 * v100), v5);
              sub_10052EE80((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
              char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
              unint64_t v54 = *v104;
              (*v104)(v51, v5);
              if (v53) {
                break;
              }
              unint64_t v49 = (v49 + 1) & v50;
              uint64_t v43 = v52;
              if (((*(void *)(v39 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
                goto LABEL_22;
              }
            }
            swift_bridgeObjectRelease();
            v54((uint64_t)v103, v5);
            uint64_t v43 = v52;
          }
          else
          {
LABEL_22:
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v45 = (uint64_t)v101;
            uint64_t v46 = v103;
            v43(v101, v103, v5);
            uint64_t v105 = v39;
            sub_100DDDE60(v45, v49, isUniquelyReferenced_nonNull_native);
            uint64_t v39 = v105;
            swift_bridgeObjectRelease();
            (*v104)((uint64_t)v46, v5);
          }
          uint64_t v42 = v95 + 1;
          uint64_t v6 = v97;
          uint64_t v30 = v93;
          uint64_t v41 = v91;
          if (v95 + 1 == v89) {
            break;
          }
          v43(v93, &v88[v100 * v42], v5);
        }
        uint64_t v19 = v92;
        v87(v93, 1, 1, v5);
      }
      else
      {
        (*v91)(v30, 1, 1, v5);
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = *v102;
LABEL_36:
      uint64_t v105 = v39;
      unint64_t v55 = v79;
      v43(v79, v80, v5);
      swift_bridgeObjectRetain();
      uint64_t v56 = (uint64_t)v101;
      sub_100DC8CB8((uint64_t)v101, v55);
      uint64_t v57 = v56;
      uint64_t v58 = *v104;
      (*v104)(v57, v5);
      uint64_t v59 = v105;
      swift_bridgeObjectRetain();
      LOBYTE(v55) = sub_10072A704(v39, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v55)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v60 = swift_bridgeObjectRetain();
        uint64_t v61 = sub_1007100E0(v60);
        swift_bridgeObjectRelease();
        int64_t v62 = v61[2];
        if (v62)
        {
          uint64_t v107 = _swiftEmptyArrayStorage;
          sub_1000B6ED0(0, v62, 0);
          unint64_t v63 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
          uint64_t v64 = v6;
          uint64_t v90 = (uint64_t)v61;
          uint64_t v65 = (char *)v61 + v63;
          uint64_t v95 = *(void *)(v64 + 72);
          uint64_t v66 = v43;
          do
          {
            uint64_t v67 = (uint64_t)v101;
            v43(v101, v65, v5);
            uint64_t v100 = UUID.uuidString.getter();
            uint64_t v69 = v68;
            v58(v67, v5);
            uint64_t v70 = v107;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B6ED0(0, v70[2] + 1, 1);
              uint64_t v70 = v107;
            }
            unint64_t v72 = v70[2];
            unint64_t v71 = v70[3];
            if (v72 >= v71 >> 1)
            {
              sub_1000B6ED0(v71 > 1, v72 + 1, 1);
              uint64_t v70 = v107;
            }
            v70[2] = v72 + 1;
            Swift::String v73 = &v70[2 * v72];
            v73[4] = v100;
            v73[5] = v69;
            v65 += v95;
            --v62;
            uint64_t v43 = v66;
          }
          while (v62);
          swift_release();
          uint64_t v6 = v97;
          uint64_t v19 = v92;
        }
        else
        {
          swift_release();
        }
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        NSString v75 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v82 setValue:isa forKey:v75];
      }
      uint64_t v22 = v85 + 1;
    }
    while (v85 + 1 != v78);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1004F70CC(void *a1, long long *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v84 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  id v82 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v85 = (char *)v77 - v9;
  __chkstk_darwin(v8);
  uint64_t v83 = (char *)v77 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v77 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (void *)((char *)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v2 + 208);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    uint64_t v80 = v16;
    static os_log_type_t.info.getter();
    if (qword_101637258 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v79 = qword_10170EFB0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
  uint64_t v81 = a1;
  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v27 = sub_10000B4CC();
  *(void *)(v23 + 64) = v27;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  uint64_t v96 = 60;
  unint64_t v97 = 0xE100000000000000;
  long long v28 = a2[7];
  long long v92 = a2[6];
  long long v93 = v28;
  long long v29 = a2[9];
  long long v94 = a2[8];
  long long v95 = v29;
  long long v30 = a2[3];
  long long v88 = a2[2];
  long long v89 = v30;
  long long v31 = a2[5];
  long long v90 = a2[4];
  long long v91 = v31;
  long long v32 = a2[1];
  long long v86 = *a2;
  long long v87 = v32;
  sub_10055065C();
  v33._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 8250;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  uint64_t v36 = *((void *)a2 + 12);
  uint64_t v35 = (void *)*((void *)a2 + 13);
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = v36;
  v37._object = v35;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 62;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v96;
  unint64_t v40 = v97;
  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v27;
  *(void *)(v23 + 72) = v39;
  *(void *)(v23 + 80) = v40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v41 = [self standardUserDefaults];
  Swift::String v42 = (Swift::String)a2[1];
  *(void *)&long long v86 = 0x79654B7974726964;
  *((void *)&v86 + 1) = 0xEA00000000002D73;
  String.append(_:)(v42);
  uint64_t v43 = *((void *)&v86 + 1);
  v77[1] = v86;
  NSString v44 = String._bridgeToObjectiveC()();
  id v45 = [v41 stringArrayForKey:v44];

  if (v45)
  {
    uint64_t v46 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v46 = _swiftEmptyArrayStorage;
  }
  uint64_t v47 = v46[2];
  uint64_t v48 = (char *)_swiftEmptyArrayStorage;
  uint64_t v49 = (uint64_t)v81;
  if (v47)
  {
    uint64_t v78 = v43;
    uint64_t v79 = (uint64_t)v41;
    uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v84 + 32);
    swift_bridgeObjectRetain();
    v77[0] = v46;
    uint64_t v52 = v46 + 5;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v50)(v14, 1, v5) == 1)
      {
        sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
      }
      else
      {
        char v53 = *v51;
        unint64_t v54 = v83;
        (*v51)(v83, v14, v5);
        v53(v85, v54, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = (char *)sub_100A6F668(0, *((void *)v48 + 2) + 1, 1, (unint64_t)v48);
        }
        unint64_t v56 = *((void *)v48 + 2);
        unint64_t v55 = *((void *)v48 + 3);
        if (v56 >= v55 >> 1) {
          uint64_t v48 = (char *)sub_100A6F668(v55 > 1, v56 + 1, 1, (unint64_t)v48);
        }
        *((void *)v48 + 2) = v56 + 1;
        v53(&v48[((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))+ *(void *)(v84 + 72) * v56], v85, v5);
      }
      v52 += 2;
      --v47;
    }
    while (v47);
    swift_bridgeObjectRelease();
    uint64_t v49 = (uint64_t)v81;
    id v41 = (id)v79;
    uint64_t v43 = v78;
  }
  swift_bridgeObjectRelease();
  uint64_t v57 = sub_101158244((uint64_t)v48);
  swift_bridgeObjectRelease();
  *(void *)&long long v86 = v57;
  swift_bridgeObjectRetain();
  uint64_t v58 = (uint64_t)v80;
  sub_101126F68(v49, (uint64_t)v80);
  sub_10001DAB4(v58, &qword_101638CF0);
  uint64_t v59 = v86;
  swift_bridgeObjectRetain();
  LOBYTE(v58) = sub_10072A704(v57, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (*(void *)(v59 + 16))
  {
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = sub_1007100E0(v60);
    swift_bridgeObjectRelease();
    int64_t v62 = v61[2];
    if (v62)
    {
      uint64_t v78 = v43;
      uint64_t v79 = (uint64_t)v41;
      uint64_t v96 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B6ED0(0, v62, 0);
      uint64_t v85 = *(char **)(v84 + 16);
      unint64_t v63 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v81 = v61;
      uint64_t v64 = (char *)v61 + v63;
      uint64_t v83 = *(char **)(v84 + 72);
      v84 += 16;
      uint64_t v65 = (void (**)(char *, uint64_t))(v84 - 8);
      do
      {
        uint64_t v66 = v82;
        ((void (*)(char *, char *, uint64_t))v85)(v82, v64, v5);
        uint64_t v67 = UUID.uuidString.getter();
        uint64_t v69 = v68;
        (*v65)(v66, v5);
        uint64_t v70 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B6ED0(0, *(void *)(v70 + 16) + 1, 1);
          uint64_t v70 = v96;
        }
        unint64_t v72 = *(void *)(v70 + 16);
        unint64_t v71 = *(void *)(v70 + 24);
        if (v72 >= v71 >> 1)
        {
          sub_1000B6ED0(v71 > 1, v72 + 1, 1);
          uint64_t v70 = v96;
        }
        *(void *)(v70 + 16) = v72 + 1;
        unint64_t v73 = v70 + 16 * v72;
        *(void *)(v73 + 32) = v67;
        *(void *)(v73 + 40) = v69;
        uint64_t v64 = &v83[(void)v64];
        --v62;
      }
      while (v62);
      swift_release();
      id v41 = (id)v79;
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v41 setValue:isa forKey:v76];
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v41 setValue:0 forKey:v74];
  }
}

uint64_t sub_1004F7A2C(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  Swift::String v38 = (char *)v35 - v10;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (void *)((char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v1 + 208);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    id v18 = [self standardUserDefaults];
    Swift::String v19 = *(Swift::String *)(a1 + 16);
    uint64_t v40 = 0x79654B7974726964;
    unint64_t v41 = 0xEA00000000002D73;
    String.append(_:)(v19);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v18 stringArrayForKey:v20];

    if (v21)
    {
      id v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = v22[2];
      if (v23) {
        goto LABEL_4;
      }
    }
    else
    {
      id v22 = _swiftEmptyArrayStorage;
      uint64_t v23 = _swiftEmptyArrayStorage[2];
      if (v23)
      {
LABEL_4:
        id v36 = v18;
        uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
        uint64_t v25 = (void (**)(char *, char *, uint64_t))(v39 + 32);
        swift_bridgeObjectRetain();
        v35[1] = v22;
        uint64_t v26 = v22 + 5;
        unint64_t v27 = _swiftEmptyArrayStorage;
        Swift::String v37 = v9;
        do
        {
          swift_bridgeObjectRetain();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          if ((*v24)(v5, 1, v6) == 1)
          {
            sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
          }
          else
          {
            long long v28 = *v25;
            long long v29 = v38;
            (*v25)(v38, v5, v6);
            v28(v9, v29, v6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v27 = (void *)sub_100A6F668(0, v27[2] + 1, 1, (unint64_t)v27);
            }
            unint64_t v31 = v27[2];
            unint64_t v30 = v27[3];
            if (v31 >= v30 >> 1) {
              unint64_t v27 = (void *)sub_100A6F668(v30 > 1, v31 + 1, 1, (unint64_t)v27);
            }
            v27[2] = v31 + 1;
            unint64_t v32 = (unint64_t)v27
                + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
                + *(void *)(v39 + 72) * v31;
            uint64_t v9 = v37;
            v28((char *)v32, v37, v6);
          }
          v26 += 2;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
        id v18 = v36;
        goto LABEL_16;
      }
    }
    unint64_t v27 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_101158244((uint64_t)v27);
    swift_bridgeObjectRelease();
    Swift::String v34 = sub_1007100E0(v33);

    swift_bridgeObjectRelease();
    return (uint64_t)v34;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004F7EA4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1004F8D04(a1, a2, a3, &qword_1016481F8, &qword_101648200, &qword_101648208, (void (*)(void))sub_100550480, a4);
}

uint64_t sub_1004F7EE8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016481D8);
  uint64_t v14 = *(void *)(type metadata accessor for PeerTrustAckEnvelopeV1(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for PeerTrustAckEnvelopeV1);
  v22[0] = v16;
  sub_10000588C(&qword_1016481E0);
  sub_1005503DC();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for PeerTrustAckEnvelopeV1);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F81CC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016481B8);
  uint64_t v14 = *(void *)(type metadata accessor for CircleTrustAckEnvelopeV1(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for CircleTrustAckEnvelopeV1);
  v22[0] = v16;
  sub_10000588C(&qword_1016481C0);
  sub_100550338();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for CircleTrustAckEnvelopeV1);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F84B0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v24[3] = &type metadata for Bool;
  LOBYTE(v24[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v24, (uint64_t)v11);
  v13(v23, 0);
  sub_10000588C(&qword_10163BC50);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, a3, v14);
  v24[0] = v17;
  sub_10000588C((uint64_t *)&unk_1016636E0);
  sub_100545790();
  uint64_t v18 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v4)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v25;
    *(void *)(a4 + 16) = v21;
    *(void *)(a4 + 24) = v22;
  }
  return result;
}

uint64_t sub_1004F879C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101647EE8);
  uint64_t v14 = *(void *)(type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101647EF0);
  sub_100545CA4();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F8A80@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a2;
  int v21 = a1;
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100010324(v9, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v23[3] = &type metadata for Bool;
  LOBYTE(v23[0]) = 1;
  uint64_t v14 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v23, (uint64_t)v12);
  v14(v22, 0);
  sub_10000588C(&qword_1016552B0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a4;
  v23[0] = v15;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101654A30);
  sub_100176E3C();
  uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v5)
  {
    *(unsigned char *)a5 = v21;
    *(void *)(a5 + 8) = v24;
    *(void *)(a5 + 16) = v16;
    *(void *)(a5 + 24) = v18;
  }
  return result;
}

uint64_t sub_1004F8CC0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1004F8D04(a1, a2, a3, &qword_101648238, &qword_10163FFB0, &qword_101648240, (void (*)(void))sub_100545E70, a4);
}

uint64_t sub_1004F8D04@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X5>, void (*a7)(void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a6;
  unint64_t v27 = a7;
  uint64_t v25 = a2;
  HIDWORD(v24) = a1;
  uint64_t v12 = type metadata accessor for CodingUserInfoKey();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100010324(v12, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  v29[3] = &type metadata for Bool;
  LOBYTE(v29[0]) = 1;
  uint64_t v17 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v29, (uint64_t)v15);
  v17(v28, 0);
  sub_10000588C(a4);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  *(void *)(v18 + 32) = a3;
  v29[0] = v18;
  swift_bridgeObjectRetain();
  sub_10000588C(a5);
  sub_100552954(v26, a5, v27);
  uint64_t v19 = v29[5];
  uint64_t v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v19)
  {
    *(unsigned char *)a8 = BYTE4(v24);
    *(void *)(a8 + 8) = v25;
    *(void *)(a8 + 16) = v20;
    *(void *)(a8 + 24) = v22;
  }
  return result;
}

uint64_t sub_1004F8F60@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016482D8);
  uint64_t v14 = *(void *)(type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_1016482E0);
  sub_100550E1C();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F9244@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648310);
  uint64_t v14 = *(void *)(type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648318);
  sub_100551150();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F9528@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016480A8);
  uint64_t v14 = *(void *)(type metadata accessor for FamilyShareEnvelopeV1(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for FamilyShareEnvelopeV1);
  v22[0] = v16;
  sub_10000588C(&qword_1016480B0);
  sub_10054E410();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for FamilyShareEnvelopeV1);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F980C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648078);
  uint64_t v14 = *(void *)(type metadata accessor for LegacyShareEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for LegacyShareEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648080);
  sub_10054E1D8();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for LegacyShareEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F9AF0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016480D0);
  uint64_t v14 = *(void *)(type metadata accessor for FindMyAirPodsFamilyShareEnvelope() - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_1016480D8);
  sub_10054E788();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004F9DD4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016480F8);
  uint64_t v14 = *(void *)(type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648100);
  sub_10054E900();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FA0B8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_10163A778);
  uint64_t v14 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  v22[0] = v16;
  sub_10000588C(&qword_101657CE0);
  sub_100545E70();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FA39C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_1016483A8);
  uint64_t v14 = *(void *)(type metadata accessor for BeaconLocationUpdate() - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
  v22[0] = v16;
  sub_10000588C(&qword_1016483B0);
  sub_100552B88();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FA680@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648150);
  uint64_t v14 = *(void *)(type metadata accessor for FindMyAccessoryFamilyKeyEnvelope() - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648158);
  sub_10054F88C();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FA964@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648170);
  uint64_t v14 = *(void *)(type metadata accessor for SelfBeaconingKeyEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for SelfBeaconingKeyEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648178);
  sub_10054F930();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for SelfBeaconingKeyEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FAC48@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648198);
  uint64_t v14 = *(void *)(type metadata accessor for KeyRequestEnvelope() - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_1016481A0);
  sub_100550294();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FAF2C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_10163A7E0);
  uint64_t v14 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for SharedBeaconRecord);
  v22[0] = v16;
  sub_10000588C(&qword_10163A040);
  sub_10054FA5C();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for SharedBeaconRecord);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FB210@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101648218);
  uint64_t v14 = *(void *)(type metadata accessor for SecureLocationsKeyUpdateEnvelope(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  v22[0] = v16;
  sub_10000588C(&qword_101648220);
  sub_100550554();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FB4F4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = 1;
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v22, (uint64_t)v11);
  v13(v21, 0);
  sub_10000588C(&qword_101647F68);
  uint64_t v14 = *(void *)(type metadata accessor for CircleTrustDeclineEnvelopeV1(0) - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_100552A0C(a3, v16 + v15, type metadata accessor for CircleTrustDeclineEnvelopeV1);
  v22[0] = v16;
  sub_10000588C(&qword_101647F70);
  sub_1005460C8();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v19 = v18;
  swift_release();
  sub_100552C2C(a3, type metadata accessor for CircleTrustDeclineEnvelopeV1);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(unsigned char *)a4 = a1;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = v17;
    *(void *)(a4 + 24) = v19;
  }
  return result;
}

uint64_t sub_1004FB7D8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1004F8D04(a1, a2, a3, &qword_101648330, &qword_101648338, &qword_101648340, (void (*)(void))sub_100551484, a4);
}

uint64_t sub_1004FB81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001D074(a1, (uint64_t)v12, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_errorRelease();
    if (!a5) {
      return result;
    }
    return a5(result);
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v19 = *(id *)(Strong + 208);
    uint64_t v20 = swift_release();
    __chkstk_darwin(v20);
    *(void *)&v21[-32] = a2;
    *(void *)&v21[-24] = a3;
    *(void *)&v21[-16] = a4;
    sub_10000588C((uint64_t *)&unk_101638DC0);
    OS_dispatch_queue.sync<A>(execute:)();
  }
  uint64_t result = sub_10001DAB4((uint64_t)v12, &qword_101642760);
  if (a5) {
    return a5(result);
  }
  return result;
}

uint64_t sub_1004FBA94@<X0>(void *a1@<X1>, long long *a2@<X2>, BOOL *a3@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v7 = result;
  if (result)
  {
    sub_1004F70CC(a1, a2);
    uint64_t result = swift_release();
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t sub_1004FBB28(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 48) = 0;
    uint64_t v4 = *(NSObject **)(v3 + 16);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_100550644;
    *(void *)(v5 + 24) = v3;
    v7[4] = sub_1003B7AE0;
    v7[5] = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_1000A70B0;
    v7[3] = &unk_1015CA0A0;
    uint64_t v6 = _Block_copy(v7);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v4, v6);
    _Block_release(v6);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if (v4) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1004FBCD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v58 = a1;
  sub_10001D608(a1, (uint64_t)v63, &qword_1016549D0);
  uint64_t v56 = v63[0];
  uint64_t v57 = v63[1];
  uint64_t v55 = v63[2];
  uint64_t v53 = v63[3];
  uint64_t v54 = v63[4];
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101660BF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ShareRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - v17;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 2;
LABEL_18:
    *a2 = v29;
    a2[1] = v25;
    a2[2] = v26;
    a2[3] = v27;
    a2[4] = v28;
    return result;
  }
  uint64_t v60 = v5;
  uint64_t v50 = v16;
  uint64_t v61 = result;
  int64_t v62 = v18;
  swift_retain();
  uint64_t v20 = sub_100ACF5FC();
  *(void *)uint64_t v64 = _swiftEmptyDictionarySingleton;
  uint64_t v21 = *((void *)v20 + 2);
  if (v21)
  {
    uint64_t v52 = v7;
    uint64_t v51 = v6;
    uint64_t v22 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
    uint64_t v23 = (uint64_t)&v20[(*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)];
    uint64_t v24 = *(void *)(v22 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100AD3588(v64, v23);
      v23 += v24;
      --v21;
    }
    while (v21);
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t v6 = v51;
    uint64_t v7 = v52;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = swift_bridgeObjectRetain();
  unint64_t v31 = sub_1004E4BC4(v30);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v64 = v31;
  swift_bridgeObjectRetain();
  sub_100529500((void **)v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)v64 + 16))
  {
    sub_100552A0C(*(void *)v64 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
  }
  uint64_t v33 = (uint64_t)v62;
  uint64_t v34 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v32, 1, v12);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t v35 = &qword_101660BF0;
    uint64_t v36 = (uint64_t)v11;
LABEL_15:
    sub_10001DAB4(v36, v35);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v29 = 2;
    os_log(_:dso:log:_:_:)();
    uint64_t result = swift_release();
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    goto LABEL_18;
  }
  sub_100551764((uint64_t)v11, v33, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  sub_10001D074(v33 + *(int *)(v12 + 32), v34, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v34, 1, v6) == 1)
  {
    sub_100552C2C(v33, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v35 = (uint64_t *)&unk_10163AC90;
    uint64_t v36 = v34;
    goto LABEL_15;
  }
  Swift::String v37 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v59, v34, v6);
  sub_10001D608(v58, (uint64_t)v64, &qword_1016549D0);
  if (v64[0] != 2)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    uint64_t result = sub_100552C2C(v33, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v25 = v57;
    uint64_t v29 = v56;
    uint64_t v26 = v55;
    uint64_t v28 = v54;
    uint64_t v27 = v53;
    goto LABEL_18;
  }
  uint64_t v52 = v7;
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101347BA0;
  sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v39 = v6;
  uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v42 = v41;
  *(void *)(v38 + 56) = &type metadata for String;
  unint64_t v43 = sub_10000B4CC();
  *(void *)(v38 + 64) = v43;
  *(void *)(v38 + 32) = v40;
  *(void *)(v38 + 40) = v42;
  uint64_t v44 = (uint64_t)v62;
  sub_100552A0C((uint64_t)v62, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  uint64_t v45 = String.init<A>(describing:)();
  *(void *)(v38 + 96) = &type metadata for String;
  *(void *)(v38 + 104) = v43;
  uint64_t v46 = v59;
  *(void *)(v38 + 72) = v45;
  *(void *)(v38 + 80) = v47;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  Date.timeIntervalSinceNow.getter();
  double v49 = v48;
  swift_release();
  if ((~*(void *)&v49 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v49 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v49 < 9.22337204e18)
  {
    uint64_t v25 = (uint64_t)v49;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v46, v39);
    uint64_t result = sub_100552C2C(v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v28 = 707;
    uint64_t v26 = 60;
    uint64_t v29 = 1;
    uint64_t v27 = 1;
    goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1004FC534(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      uint64_t v6 = *(NSObject **)(v5 + 56);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = sub_10054DE60;
      *(void *)(v7 + 24) = v5;
      void aBlock[4] = sub_1003B7AE0;
      aBlock[5] = v7;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000A70B0;
      aBlock[3] = &unk_1015C9088;
      uint64_t v8 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v6, v8);
      _Block_release(v8);
      LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t result = swift_release();
      if (v6)
      {
        __break(1u);
        return result;
      }
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1004FC6D0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ShareRecord();
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v43 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (void (**)(char *, char *, uint64_t))((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v61 = (uint64_t)&v43 - v14;
  uint64_t v55 = a1;
  uint64_t v15 = sub_100ACF5FC();
  v62[0] = _swiftEmptyDictionarySingleton;
  uint64_t v16 = *((void *)v15 + 2);
  uint64_t v60 = v9;
  if (v16)
  {
    uint64_t v58 = v13;
    uint64_t v17 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
    uint64_t v18 = (uint64_t)&v15[(*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)];
    uint64_t v19 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100AD3588(v62, v18);
      v18 += v19;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease_n();
    uint64_t v9 = v60;
    uint64_t v13 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = sub_1004E4BC4(v20);
  swift_bridgeObjectRelease();
  v62[0] = v21;
  swift_bridgeObjectRetain();
  sub_100529500(v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = v62[0];
  static Date.trustedNow.getter(v61);
  dispatch_group_t v54 = dispatch_group_create();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v23 = v22[2];
  if (v23)
  {
    uint64_t v24 = *(unsigned __int8 *)(v59 + 80);
    unint64_t v43 = v22;
    uint64_t v25 = (uint64_t)v22 + ((v24 + 32) & ~v24);
    uint64_t v26 = *(void *)(v59 + 72);
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    uint64_t v48 = v24 | 7;
    uint64_t v49 = (v24 + 16) & ~v24;
    unint64_t v47 = ((unint64_t)v57 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v46 = v47 + 8;
    uint64_t v57 = (void (**)(char *, uint64_t))(v44 + 8);
    uint64_t v58 = (void (**)(char *, char *, uint64_t))(v44 + 32);
    long long v45 = xmmword_101342130;
    uint64_t v51 = v10;
    uint64_t v52 = v4;
    uint64_t v50 = v26;
    uint64_t v59 = v44 + 48;
    do
    {
      sub_100552A0C(v25, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      sub_10001D074((uint64_t)&v9[*(int *)(v5 + 32)], (uint64_t)v4, (uint64_t *)&unk_10163AC90);
      if ((*v27)(v4, 1, v10) == 1)
      {
        sub_100552C2C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        (*v58)((char *)v13, v4, v10);
        sub_10052EE80((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        {
          int v56 = static os_log_type_t.default.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v45;
          uint64_t v29 = (uint64_t)v9;
          uint64_t v30 = v53;
          sub_100552A0C(v29, v53, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          unint64_t v31 = v13;
          uint64_t v32 = String.init<A>(describing:)();
          uint64_t v33 = v5;
          uint64_t v35 = v34;
          *(void *)(v28 + 56) = &type metadata for String;
          *(void *)(v28 + 64) = sub_10000B4CC();
          *(void *)(v28 + 32) = v32;
          *(void *)(v28 + 40) = v35;
          uint64_t v13 = v31;
          uint64_t v5 = v33;
          uint64_t v10 = v51;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          dispatch_group_t v36 = v54;
          dispatch_group_enter(v54);
          uint64_t v4 = v52;
          sub_100552A0C((uint64_t)v60, v30, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          uint64_t v37 = swift_allocObject();
          uint64_t v38 = v30;
          uint64_t v9 = v60;
          sub_100551764(v38, v37 + v49, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          *(void *)(v37 + v47) = v36;
          uint64_t v39 = v36;
          sub_1004E5D28((uint64_t)v9, (uint64_t)sub_10054E078, v37);
          uint64_t v26 = v50;
          swift_release();
        }
        (*v57)((char *)v13, v10);
        sub_100552C2C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))v59;
      }
      v25 += v26;
      --v23;
    }
    while (v23);
  }
  swift_release();
  dispatch_group_t v40 = v54;
  OS_dispatch_group.wait()();
  sub_1004F63D0(v41);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v61, v10);
}

void sub_1004FCDD8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
    sub_100552A0C(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    unint64_t v13 = sub_10000B4CC();
    *(void *)(v9 + 64) = v13;
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    v20[1] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v9 + 96) = &type metadata for String;
    *(void *)(v9 + 104) = v13;
    *(void *)(v9 + 72) = v14;
    *(void *)(v9 + 80) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    sub_100552A0C(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a3);
}

uint64_t sub_1004FD08C(uint64_t a1)
{
  Transaction.capture()();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_1004FD248()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StableIdentifier();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v36 - v7;
  __chkstk_darwin(v6);
  uint64_t v42 = (uint64_t)v36 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v44 = (uint64_t)v36 - v13;
  uint64_t result = (uint64_t)sub_100ACF5FC();
  uint64_t v15 = result;
  uint64_t v16 = _swiftEmptyArrayStorage;
  long long v45 = _swiftEmptyArrayStorage;
  uint64_t v39 = *(void *)(result + 16);
  if (!v39)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v35 = sub_10052DA90((uint64_t)v16, v1);
    swift_release();
    swift_release();
    return (uint64_t)v35;
  }
  unint64_t v17 = 0;
  uint64_t v37 = v5;
  uint64_t v38 = v8;
  v36[0] = v1;
  v36[1] = v5 + 8;
  uint64_t v18 = v2;
  while (v17 < *(void *)(v15 + 16))
  {
    uint64_t v19 = v15;
    unint64_t v20 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    uint64_t v21 = *(void *)(v40 + 72);
    uint64_t v22 = v15 + v20 + v21 * v17;
    uint64_t v23 = v44;
    sub_100552A0C(v22, v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = v23 + *(int *)(v41 + 24);
    uint64_t v25 = v42;
    sub_100552A0C(v24, v42, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v26 = v18;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100552C2C(v25, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v28 = v24;
    uint64_t v29 = (uint64_t)v38;
    sub_100552A0C(v28, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload == 1)
    {
      sub_100552C2C(v29, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v18 = v26;
      uint64_t v15 = v19;
      goto LABEL_13;
    }
    uint64_t v30 = (uint64_t)v37;
    sub_100552A0C(v29, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int v31 = swift_getEnumCaseMultiPayload();
    uint64_t v18 = v26;
    if (v31 == 2)
    {
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v19;
LABEL_12:
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v30, v32);
      sub_100552C2C(v29, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v16 = v45;
LABEL_13:
      sub_100551764(v44, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B74D8(0, v16[2] + 1, 1);
      }
      uint64_t v16 = v45;
      unint64_t v34 = v45[2];
      unint64_t v33 = v45[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000B74D8(v33 > 1, v34 + 1, 1);
        uint64_t v16 = v45;
      }
      v16[2] = v34 + 1;
      uint64_t result = sub_100551764(v43, (uint64_t)v16 + v20 + v34 * v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      goto LABEL_4;
    }
    uint64_t v15 = v19;
    if (v31 == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_100552C2C(v30, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100552C2C(v29, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t result = sub_100552C2C(v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_4:
    if (v39 == ++v17)
    {
      uint64_t v16 = v45;
      uint64_t v1 = v36[0];
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004FD750(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  int v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ShareInstruction();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = dispatch_group_create();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 0;
  uint64_t v32 = (unsigned char *)(v12 + 16);
  uint64_t v13 = *(int *)(v5 + 32);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  sub_100552A0C(a1 + *(int *)(v14 + 24) + v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  LOBYTE(v13) = swift_getEnumCaseMultiPayload() != 0;
  sub_100552C2C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  dispatch_group_enter(v11);
  uint64_t v15 = *(void *)(v30 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  uint64_t v17 = a1 + *(int *)(v5 + 36);
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = *(void *)(v17 + 16);
  *(unsigned char *)(v16 + 32) = *(unsigned char *)v17;
  *(void *)(v16 + 40) = v18;
  *(void *)(v16 + 48) = v19;
  sub_100552A0C(a1, (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ShareInstruction);
  unint64_t v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v11;
  *(void *)(v21 + 24) = v12;
  sub_100551764((uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10054F0DC;
  *(void *)(v22 + 24) = v21;
  *(unsigned char *)(v22 + 32) = v13;
  uint64_t v23 = type metadata accessor for TaskPriority();
  uint64_t v24 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v31, 1, 1, v23);
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = sub_10054F198;
  v25[5] = v22;
  v25[6] = v15;
  v25[7] = v16;
  swift_bridgeObjectRetain();
  uint64_t v26 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1008F5E44(v24, (uint64_t)&unk_101648118, (uint64_t)v25);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v27 = v32;
  swift_beginAccess();
  if (*v27 == 1)
  {
    swift_release();

    return 0;
  }
  else
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v33 = 8;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();

    uint64_t v28 = v34;
    swift_release();
  }
  return v28;
}

void sub_1004FDBDC(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    goto LABEL_7;
  }
  uint64_t v9 = type metadata accessor for ShareInstruction();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_7;
  }
  uint64_t v10 = a5 + *(int *)(v9 + 28);
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  unsigned __int8 v13 = *(unsigned char *)v10;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100724500(v13, v12, v11);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v16 = *(unsigned char *)(*(void *)(a1 + 56) + v14);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_7:
    char v17 = 0;
    goto LABEL_8;
  }
  char v17 = 1;
LABEL_8:
  swift_beginAccess();
  *(unsigned char *)(a4 + 16) = v17;
  dispatch_group_leave(a3);
}

uint64_t sub_1004FDCA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v5 = v36;
  uint64_t v6 = sub_1004FD750(a1);
  if (!v6)
  {
    uint64_t v8 = type metadata accessor for ShareInstruction();
    v35[0] = a1 + *(int *)(v8 + 24);
    uint64_t v9 = sub_100B6DD88();
    __chkstk_darwin(v9);
    v35[-2] = a1;
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(sub_1000A49D8((uint64_t (*)(char *))sub_10054EC7C, &v35[-4], (uint64_t)v9) + 16);
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
      sub_100552A0C(v35[0], (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v14 = v13;
      *(void *)(v11 + 56) = &type metadata for String;
      unint64_t v15 = sub_10000B4CC();
      *(void *)(v11 + 64) = v15;
      *(void *)(v11 + 32) = v12;
      *(void *)(v11 + 40) = v14;
      uint64_t v16 = a1 + *(int *)(v8 + 28);
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v17 = *(void *)(v16 + 16);
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v15;
      *(void *)(v11 + 72) = v18;
      *(void *)(v11 + 80) = v17;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v19 = 1;
    }
    else
    {
      uint64_t v20 = v9[2];
      swift_bridgeObjectRelease();
      uint64_t v21 = sub_1010ABE24(v5);
      if (v20 >= v21)
      {
        uint64_t v24 = v21;
        swift_bridgeObjectRelease();
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_101347500;
        sub_100552A0C(v35[0], (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v26 = String.init<A>(describing:)();
        uint64_t v28 = v27;
        *(void *)(v25 + 56) = &type metadata for String;
        unint64_t v29 = sub_10000B4CC();
        *(void *)(v25 + 32) = v26;
        *(void *)(v25 + 40) = v28;
        *(void *)(v25 + 96) = &type metadata for Int;
        *(void *)(v25 + 104) = &protocol witness table for Int;
        *(void *)(v25 + 64) = v29;
        *(void *)(v25 + 72) = v20;
        *(void *)(v25 + 136) = &type metadata for Int;
        *(void *)(v25 + 144) = &protocol witness table for Int;
        *(void *)(v25 + 112) = v24;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0);
        uint64_t v19 = 9;
      }
      else
      {
        uint64_t v22 = sub_1010ABE38(v5);
        swift_bridgeObjectRelease();
        uint64_t v23 = *(void *)(sub_1004FD248() + 16);
        if (v23 < v22)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_101347500;
        sub_100552A0C(v35[0], (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v31 = String.init<A>(describing:)();
        uint64_t v33 = v32;
        *(void *)(v30 + 56) = &type metadata for String;
        *(void *)(v30 + 64) = sub_10000B4CC();
        *(void *)(v30 + 32) = v31;
        *(void *)(v30 + 40) = v33;
        swift_bridgeObjectRelease();
        *(void *)(v30 + 96) = &type metadata for Int;
        *(void *)(v30 + 104) = &protocol witness table for Int;
        *(void *)(v30 + 72) = v23;
        *(void *)(v30 + 136) = &type metadata for Int;
        *(void *)(v30 + 144) = &protocol witness table for Int;
        *(void *)(v30 + 112) = v22;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0);
        uint64_t v19 = 10;
      }
    }
    v35[1] = v19;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return v36;
  }
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

BOOL sub_1004FE270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareRecord();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (unsigned __int8 *)(a1 + *(int *)(v5 + 36));
  int v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = (unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ShareInstruction() + 28));
  if (v9 == *v12)
  {
    if (v10 == *((void *)v12 + 1) && v11 == *((void *)v12 + 2))
    {
      sub_100552A0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_100552A0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      BOOL v15 = 0;
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = &v7[*(int *)(v4 + 40)];
    uint64_t v18 = *(void *)v16;
    unint64_t v17 = *((void *)v16 + 1);
    uint64_t v19 = v18 & 0xFFFFFFFFFFFFLL;
    if ((v17 & 0x2000000000000000) != 0) {
      uint64_t v20 = HIBYTE(v17) & 0xF;
    }
    else {
      uint64_t v20 = v19;
    }
    BOOL v15 = v20 != 0;
  }
  else
  {
    sub_100552A0C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    BOOL v15 = 0;
  }
LABEL_14:
  sub_100552C2C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  return v15;
}

uint64_t sub_1004FE40C(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v7 = a1;
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7 == 2) {
    return 1;
  }
  uint64_t v12 = dispatch_group_create();
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = 0;
  dispatch_group_enter(v12);
  uint64_t v14 = *(void *)(v3 + 24);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v12;
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = sub_10052F418;
  *(void *)(v17 + 40) = v15;
  *(void *)(v17 + 48) = v14;
  *(unsigned char *)(v17 + 56) = a1;
  *(void *)(v17 + 64) = a2;
  *(void *)(v17 + 72) = a3;
  swift_retain();
  uint64_t v18 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1008F5E44((uint64_t)v10, (uint64_t)&unk_101647EE0, v17);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();

  swift_beginAccess();
  uint64_t v11 = *(unsigned __int8 *)(v13 + 16);
  swift_release();
  return v11;
}

void sub_1004FE610(char a1, uint64_t a2, NSObject *a3)
{
  *(unsigned char *)(a2 + 16) = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_1004FE668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v22 = a1;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  int v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101648068);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_10001D074(v22, (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_101648068);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v24;
  *(void *)(v17 + 16) = v23;
  *(void *)(v17 + 24) = v18;
  sub_10001D608((uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, &qword_101648068);
  void aBlock[4] = sub_10054EC10;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C96C8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v29 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v20 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
  return swift_release();
}

uint64_t sub_1004FEABC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100B6DD88();
  v11[2] = a1;
  uint64_t v5 = sub_1000A49D8((uint64_t (*)(char *))sub_10054E9A4, v11, (uint64_t)v4);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = type metadata accessor for ShareRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  if (v6)
  {
    sub_100552A0C(v5+ ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80)), a2, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
  return swift_bridgeObjectRelease();
}

void sub_1004FEBCC(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  type metadata accessor for ShareInstruction();
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  uint64_t v9 = UUID.uuidString.getter();
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 72) = v9;
  *(void *)(v4 + 80) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1004FEED4(a1);
  if (!v23)
  {
    static os_log_type_t.default.getter();
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    aBlock = (void **)sub_10054DE38;
    uint64_t v18 = a2;
    swift_retain();
    sub_10000588C(&qword_101648070);
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = v8;
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v13;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(NSObject **)(a2 + 56);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10054DE3C;
    *(void *)(v15 + 24) = a2;
    uint64_t v21 = sub_100132424;
    uint64_t v22 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256;
    uint64_t v19 = sub_1000A70B0;
    uint64_t v20 = &unk_1015C9038;
    unint64_t v16 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v14, v16);
    _Block_release(v16);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v14) {
      __break(1u);
    }
  }
}

void sub_1004FEED4(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + *(int *)(type metadata accessor for ShareInstruction() + 24);
  sub_100552A0C(v8 + v2[6], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_100552C2C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload)
  {
    if (sub_10111198C())
    {
      if (sub_100DF1520(*(void *)(v8 + v2[16]), *(void *)(v8 + v2[17]))) {
        sub_100512DB0(a1);
      }
      else {
        sub_100514610(a1);
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_101342130;
      sub_100552A0C(v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v11 = String.init<A>(describing:)();
      uint64_t v13 = v12;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 64) = sub_10000B4CC();
      *(void *)(v10 + 32) = v11;
      *(void *)(v10 + 40) = v13;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_10051156C(a1);
  }
}

uint64_t sub_1004FF164(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v35 = a3;
  uint64_t v36 = a5;
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = sub_10000588C(&qword_101648068);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v32 - v18);
  sub_10001D074(a1, (uint64_t)&v32 - v18, &qword_101648068);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    uint64_t v38 = v20;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      uint64_t v21 = v37;
      sub_10052EE80(&qword_101638668, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v38 == 14)
      {
        static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        *uint64_t v17 = v20;
        swift_storeEnumTagMultiPayload();
        swift_errorRetain();
        a4(v17);

LABEL_14:
        swift_errorRelease();
        return sub_10001DAB4((uint64_t)v17, &qword_101648068);
      }
    }
    uint64_t v27 = a4;
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    uint64_t v38 = v20;
    swift_errorRetain();
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10000B4CC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    *uint64_t v17 = v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v27(v17);
    goto LABEL_14;
  }
  uint64_t v34 = a4;
  sub_100551764((uint64_t)v19, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v32 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  sub_100552A0C((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_10000B4CC();
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100A9E7EC(1);
  sub_1004FEBCC(v35, a2);
  sub_100552A0C((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  swift_storeEnumTagMultiPayload();
  v34(v17);
  sub_10001DAB4((uint64_t)v17, &qword_101648068);
  return sub_100552C2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_1004FF81C(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), long long a15, void (*a16)(void ***), void (*a17)(void ***))
{
  uint64_t v135 = a8;
  uint64_t v134 = a7;
  LODWORD(v133) = a6;
  uint64_t v118 = a5;
  unint64_t v125 = a4;
  uint64_t v124 = a3;
  uint64_t v123 = a2;
  LODWORD(v122) = a1;
  uint64_t v141 = a17;
  uint64_t v140 = a16;
  uint64_t v121 = (uint64_t (**)(uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  int64_t v120 = (void (*)(unsigned char *, uint64_t))*(v121 - 1);
  __chkstk_darwin(v121);
  unint64_t v119 = &v104[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v139 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v139);
  uint64_t v19 = (void ***)&v104[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v114 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v20 = __chkstk_darwin(v114);
  uint64_t v111 = &v104[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  uint64_t v112 = &v104[-v22];
  uint64_t v127 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v132 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = &v104[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v130 = type metadata accessor for DispatchQoS();
  uint64_t v131 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v129 = &v104[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v117 = &v104[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  uint64_t v116 = &v104[-v28];
  uint64_t v136 = type metadata accessor for UUID();
  uint64_t v137 = *(void *)(v136 - 8);
  uint64_t v29 = *(void *)(v137 + 64);
  uint64_t v30 = __chkstk_darwin(v136);
  uint64_t v110 = &v104[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = &v104[-v32];
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v115 = &v104[-v35];
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = &v104[-v37];
  __chkstk_darwin(v36);
  uint64_t v128 = &v104[-v39];
  uint64_t v40 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = &v104[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v42);
  unint64_t v46 = &v104[-v45];
  static SystemInfo.lockState.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
  v48(v44, v40);
  v48(v46, v40);
  if (v47)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v148 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v19 = aBlock;
    swift_storeEnumTagMultiPayload();
    v140(v19);
    return sub_10001DAB4((uint64_t)v19, &qword_101642760);
  }
  char v49 = v133;
  uint64_t v50 = v134;
  uint64_t v51 = v135;
  uint64_t v52 = v138;
  if ((sub_1004FE40C(v133, v134, v135) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = sub_10000B4CC();
    *(void *)(v59 + 32) = v50;
    *(void *)(v59 + 40) = v51;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v148 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v53 = v52;
  char v54 = v49;
  unint64_t v106 = a14;
  uint64_t v107 = a13;
  int v108 = a12;
  unint64_t v139 = a10;
  int v105 = a11 & 1;
  uint64_t v109 = *(void *)(v53 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v137 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v54;
    *(void *)(inited + 40) = v50;
    *(void *)(inited + 48) = v51;
    uint64_t v57 = (void (*)(void, void))v116;
    uint64_t v58 = v136;
    (*v55)(v116, 1, 1, v136);
    swift_bridgeObjectRetain();
    sub_100500E44(v122, v123, (uint64_t)v124, (unint64_t)v125, v118, inited, v57, v139, (uint64_t)v38, v105, v108 & 1, v107, v106, a15);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v65 = *(NSURL **)(v137 + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(v128, v38, v58);
    uint64_t v66 = v58;
  }
  else
  {
    uint64_t v61 = v51;
    uint64_t v62 = swift_initStackObject();
    *(_OWORD *)(v62 + 16) = xmmword_101342130;
    *(unsigned char *)(v62 + 32) = v54;
    *(void *)(v62 + 40) = v50;
    *(void *)(v62 + 48) = v61;
    uint64_t v63 = (uint64_t)v117;
    uint64_t v66 = v136;
    (*v55)(v117, 1, 1, v136);
    swift_bridgeObjectRetain();
    UUID.init()();
    uint64_t v64 = v115;
    sub_1004E7E1C(v122, (uint64_t)v123, v124, v125, v33, v62, v63, v139, (uint64_t)v115, v105, v108 & 1, v107, (uint64_t)v106, a15);
    swift_bridgeObjectRelease();
    uint64_t v67 = v137;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v33, v66);
    sub_10001DAB4(v63, &qword_101638CF0);
    uint64_t v65 = *(NSURL **)(v67 + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v65)(v128, v64, v66);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v139 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_101342130;
  uint64_t v69 = v128;
  uint64_t v70 = UUID.uuidString.getter();
  uint64_t v72 = v71;
  *(void *)(v68 + 56) = &type metadata for String;
  *(void *)(v68 + 64) = sub_10000B4CC();
  *(void *)(v68 + 32) = v70;
  *(void *)(v68 + 40) = v72;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v73 = v138;
  uint64_t v135 = *(void *)(v138 + 176);
  uint64_t v74 = v137;
  uint64_t v115 = *(unsigned char **)(v137 + 16);
  uint64_t v134 = v137 + 16;
  NSString v75 = v110;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v115)(v110, v69, v66);
  uint64_t v76 = *(unsigned __int8 *)(v74 + 80);
  uint64_t v77 = (v76 + 24) & ~v76;
  uint64_t v122 = v77 + v29;
  uint64_t v133 = v77;
  unint64_t v125 = (void (*)(void, void))(v76 | 7);
  uint64_t v78 = v77 + v29 + 7;
  uint64_t v79 = v73;
  unint64_t v80 = v78 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v73;
  uint64_t v124 = (void (*)(void, void, void))(v74 + 32);
  ((void (*)(uint64_t, unsigned char *, uint64_t))v65)(v81 + v77, v75, v66);
  *(void *)(v81 + v80) = v139;
  uint64_t v146 = sub_10052EEE4;
  uint64_t v147 = v81;
  aBlock = _NSConcreteStackBlock;
  uint64_t v143 = 1107296256;
  uint64_t v121 = &v144;
  uint64_t v144 = sub_1004B5480;
  uint64_t v145 = &unk_1015C84D0;
  id v82 = _Block_copy(&aBlock);
  uint64_t v123 = v65;
  uint64_t v83 = v82;
  swift_retain();
  swift_retain();
  uint64_t v84 = v129;
  static DispatchQoS.unspecified.getter();
  uint64_t v148 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v119 = (unsigned char *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v118 = sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v117 = (unsigned char *)sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v85 = v126;
  uint64_t v86 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v83);
  long long v87 = *(void (**)(unsigned char *, uint64_t))(v132 + 8);
  v132 += 8;
  int64_t v120 = v87;
  v87(v85, v86);
  long long v88 = *(unsigned char **)(v131 + 8);
  v131 += 8;
  uint64_t v116 = v88;
  ((void (*)(unsigned char *, uint64_t))v88)(v84, v130);
  swift_release();
  long long v89 = v128;
  uint64_t v90 = v136;
  long long v91 = v115;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v115)(v75, v128, v136);
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v79;
  ((void (*)(uint64_t, unsigned char *, uint64_t))v123)(v92 + v133, v75, v90);
  long long v93 = (void (**)(void ***))(v92 + v80);
  long long v94 = v140;
  long long v95 = v141;
  char *v93 = v140;
  v93[1] = v95;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = v94;
  *(void *)(v96 + 24) = v95;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  unint64_t v97 = v111;
  static DispatchTime.now()();
  unsigned __int8 v98 = v112;
  + infix(_:_:)();
  uint64_t v141 = *(void (**)(void ***))(v113 + 8);
  uint64_t v99 = v114;
  ((void (*)(unsigned char *, uint64_t))v141)(v97, v114);
  uint64_t v100 = v136;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v91)(v75, v89, v136);
  uint64_t v101 = swift_allocObject();
  *(void *)(v101 + 16) = v138;
  ((void (*)(uint64_t, unsigned char *, uint64_t))v123)(v101 + v133, v75, v100);
  uint64_t v146 = sub_10052EF48;
  uint64_t v147 = v101;
  aBlock = _NSConcreteStackBlock;
  uint64_t v143 = 1107296256;
  uint64_t v144 = sub_1004B5480;
  uint64_t v145 = &unk_1015C8570;
  uint64_t v102 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v103 = v129;
  static DispatchQoS.unspecified.getter();
  uint64_t v148 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v102);
  swift_release();
  v120(v85, v86);
  ((void (*)(unsigned char *, uint64_t))v116)(v103, v130);
  ((void (*)(unsigned char *, uint64_t))v141)(v98, v99);
  (*(void (**)(unsigned char *, uint64_t))(v137 + 8))(v89, v136);
  return swift_release();
}

void sub_100500E44(unsigned __int8 a1@<W0>, NSURL *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, void)@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, uint64_t a12, unsigned int (*a13)(uint64_t, uint64_t, uint64_t), long long a14)
{
  unint64_t v236 = a4;
  uint64_t v230 = a6;
  unint64_t v231 = a8;
  uint64_t v229 = a7;
  uint64_t v226 = a5;
  uint64_t v222 = a9;
  uint64_t v227 = *v14;
  unint64_t v228 = v14;
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v224 = (char *)&v208 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v225 = (NSURL *)((char *)&v208 - v21);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v233 = v22;
  uint64_t v234 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v232 = (char *)&v208 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v235 = (char *)&v208 - v26;
  uint64_t v238 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v238 - 8);
  uint64_t v28 = __chkstk_darwin(v238);
  unint64_t v223 = (char *)&v208 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v208 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v208 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v208 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v208 - v40;
  __chkstk_darwin(v39);
  unsigned __int8 v240 = a1;
  uint64_t v241 = a2;
  uint64_t v242 = a3;
  uint64_t v43 = (char *)&v208 - v42;
  unint64_t v243 = v236;
  UUID.init()();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10000588C(&qword_101647E50);
  sub_100062734(&qword_101647E58, &qword_101647E50);
  uint64_t v44 = (uint64_t)v237;
  uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v43, v238);
    swift_release();
    return;
  }
  uint64_t v218 = v41;
  char v47 = v229;
  uint64_t v214 = v35;
  uint64_t v215 = v38;
  uint64_t v219 = (void *)v27;
  uint64_t v220 = v45;
  unint64_t v221 = v46;
  unsigned __int8 v210 = v32;
  unint64_t v236 = 0;
  unint64_t v237 = v43;
  long long v216 = a14;
  uint64_t v49 = a12;
  uint64_t v48 = (uint64_t)a13;
  char v50 = a11;
  int v51 = a10 & 1;
  swift_release();
  uint64_t v52 = v230;
  int64_t v53 = *(void *)(v230 + 16);
  char v54 = _swiftEmptyArrayStorage;
  uint64_t v55 = v238;
  LODWORD(v217) = a11;
  if (v53)
  {
    LODWORD(v211) = a10 & 1;
    uint64_t v212 = a12;
    unint64_t v213 = a13;
    v244 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v53, 0);
    char v54 = v244;
    int v56 = (uint64_t *)(v52 + 48);
    uint64_t v57 = (uint64_t)v47;
    do
    {
      uint64_t v59 = *(v56 - 1);
      uint64_t v58 = *v56;
      v244 = v54;
      unint64_t v61 = v54[2];
      unint64_t v60 = v54[3];
      swift_bridgeObjectRetain();
      if (v61 >= v60 >> 1)
      {
        sub_1000B6ED0(v60 > 1, v61 + 1, 1);
        char v54 = v244;
      }
      v54[2] = v61 + 1;
      uint64_t v62 = &v54[2 * v61];
      v62[4] = v59;
      v62[5] = v58;
      v56 += 3;
      --v53;
    }
    while (v53);
    uint64_t v55 = v238;
    char v50 = v217;
    uint64_t v48 = (uint64_t)v213;
    uint64_t v49 = v212;
    int v51 = (int)v211;
  }
  else
  {
    uint64_t v57 = (uint64_t)v47;
  }
  uint64_t v230 = sub_101158614((uint64_t)v54);
  swift_bridgeObjectRelease();
  unint64_t v231 = sub_10052F868((uint64_t)v237, 0, v57, v231, v51, v50 & 1, v49, v48, v216);
  uint64_t v63 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v64 = v232;
  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v65 = v218;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v66 = v219 + 1;
  uint64_t v229 = (void (*)(void, void))v219[1];
  v229(v65, v55);
  uint64_t v67 = v235;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v68 = v234 + 8;
  uint64_t v69 = *(void (**)(char *, uint64_t))(v234 + 8);
  uint64_t v70 = v64;
  uint64_t v71 = v57;
  uint64_t v72 = v233;
  v69(v70, v233);
  uint64_t v73 = v220;
  unint64_t v74 = v221;
  unint64_t v75 = v236;
  Data.write(to:options:)();
  if (v75)
  {
    sub_10001CFB8(v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v69(v67, v72);
    v229(v237, v238);
    return;
  }
  uint64_t v234 = v68;
  uint64_t v232 = (char *)v69;
  if (v217) {
    unint64_t v76 = 0xD000000000000017;
  }
  else {
    unint64_t v76 = 0x6567617373656DLL;
  }
  unint64_t v77 = 0x80000001013FF860;
  if ((v217 & 1) == 0) {
    unint64_t v77 = 0xE700000000000000;
  }
  uint64_t v218 = (char *)v77;
  uint64_t v78 = v225;
  sub_10001D074(v71, (uint64_t)v225, &qword_101638CF0);
  uint64_t v79 = v219;
  uint64_t v81 = v219 + 6;
  unint64_t v80 = (unsigned int (*)(NSURL *, uint64_t, uint64_t))v219[6];
  uint64_t v82 = v238;
  unsigned int v83 = v80(v78, 1, v238);
  *((void *)&v216 + 1) = v66;
  unint64_t v236 = 0;
  *(void *)&long long v216 = v81;
  unint64_t v213 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v80;
  unint64_t v217 = v76;
  if (v83 == 1)
  {
    sub_10001DAB4((uint64_t)v78, &qword_101638CF0);
    uint64_t v84 = v227;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    sub_100010324(v85, (uint64_t)qword_10170F168);
    int v86 = v240;
    uint64_t v87 = v242;
    uint64_t v225 = v241;
    unint64_t v88 = v243;
    swift_bridgeObjectRetain();
    sub_1000361E0(v87, v88);
    swift_bridgeObjectRetain();
    unint64_t v89 = (unint64_t)v218;
    swift_bridgeObjectRetain();
    sub_1000361E0(v87, v88);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.default.getter();
    int v92 = v91;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v93 = swift_slowAlloc();
      LODWORD(v215) = v92;
      uint64_t v94 = v93;
      uint64_t v214 = (void *)swift_slowAlloc();
      id v239 = v214;
      *(_DWORD *)uint64_t v94 = 136315906;
      v244 = v84;
      sub_10000588C(&qword_101647E70);
      LODWORD(v212) = v86;
      uint64_t v95 = String.init<A>(describing:)();
      v244 = (void *)sub_1008FA0F0(v95, v96, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 12) = 2080;
      swift_bridgeObjectRetain();
      v244 = (void *)sub_1008FA0F0(v217, v89, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v94 + 22) = 2080;
      uint64_t v97 = sub_10052A690(v212, (uint64_t)v225, v87, v88);
      unint64_t v99 = v98;
      sub_10001CFB8(v87, v88);
      v244 = (void *)sub_1008FA0F0(v97, v99, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v87, v88);
      *(_WORD *)(v94 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v100 = Set.description.getter();
      unint64_t v102 = v101;
      swift_bridgeObjectRelease();
      v244 = (void *)sub_1008FA0F0(v100, v102, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v215, "%s: Sending %s (resource): %s to %s", (uint8_t *)v94, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v87, v88);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v87, v88);

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v103 = v215;
    ((void (*)(char *, NSURL *, uint64_t))v79[4])(v215, v78, v82);
    uint64_t v104 = v82;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    sub_100010324(v105, (uint64_t)qword_10170F168);
    LODWORD(v212) = v240;
    uint64_t v106 = v242;
    uint64_t v211 = v241;
    unint64_t v107 = v243;
    int v108 = v214;
    ((void (*)(void *, char *, uint64_t))v79[2])(v214, v103, v104);
    sub_1000361E0(v106, v107);
    swift_bridgeObjectRetain();
    sub_1000361E0(v106, v107);
    swift_bridgeObjectRetain();
    unint64_t v109 = (unint64_t)v218;
    swift_bridgeObjectRetain();
    uint64_t v110 = v103;
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.default.getter();
    LODWORD(v225) = v112;
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = swift_slowAlloc();
      long long v209 = (void *)swift_slowAlloc();
      id v239 = v209;
      *(_DWORD *)uint64_t v113 = 136316162;
      v244 = v227;
      sub_10000588C(&qword_101647E70);
      uint64_t v114 = String.init<A>(describing:)();
      v244 = (void *)sub_1008FA0F0(v114, v115, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 12) = 2080;
      swift_bridgeObjectRetain();
      v244 = (void *)sub_1008FA0F0(v217, v109, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v113 + 22) = 2080;
      uint64_t v116 = sub_10052A690(v212, (uint64_t)v211, v106, v107);
      unint64_t v118 = v117;
      sub_10001CFB8(v106, v107);
      v244 = (void *)sub_1008FA0F0(v116, v118, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v106, v107);
      *(_WORD *)(v113 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v119 = Set.description.getter();
      unint64_t v121 = v120;
      swift_bridgeObjectRelease();
      v244 = (void *)sub_1008FA0F0(v119, v121, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v122 = v214;
      uint64_t v123 = v238;
      uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter();
      v244 = (void *)sub_1008FA0F0(v124, v125, (uint64_t *)&v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v126 = (void (*)(char *, uint64_t))v229;
      v229(v122, v123);
      _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v225, "%s: Sending %s (resource): %s to %s in response to %s", (uint8_t *)v113, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v126(v215, v123);
    }
    else
    {
      sub_10001CFB8(v106, v107);

      uint64_t v127 = v238;
      uint64_t v128 = (void (*)(char *, uint64_t))v229;
      v229(v108, v238);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v106, v107);
      swift_bridgeObjectRelease_n();
      v128(v110, v127);
    }
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v129 = type metadata accessor for Logger();
  uint64_t v130 = sub_100010324(v129, (uint64_t)qword_10170F168);
  swift_bridgeObjectRetain_n();
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.default.getter();
  BOOL v133 = os_log_type_enabled(v131, v132);
  uint64_t v218 = (char *)v130;
  if (v133)
  {
    uint64_t v134 = swift_slowAlloc();
    uint64_t v225 = (NSURL *)swift_slowAlloc();
    id v239 = v225;
    *(_DWORD *)uint64_t v134 = 136315394;
    v244 = v227;
    sub_10000588C(&qword_101647E70);
    uint64_t v135 = String.init<A>(describing:)();
    v244 = (void *)sub_1008FA0F0(v135, v136, (uint64_t *)&v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v134 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v137 = Dictionary.description.getter();
    unint64_t v139 = v138;
    swift_bridgeObjectRelease();
    v244 = (void *)sub_1008FA0F0(v137, v139, (uint64_t *)&v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "%s: IDSSendMessageOptions: %s", (uint8_t *)v134, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v140 = v228;
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v141 = (void **)swift_allocObject();
  swift_defaultActor_initialize();
  v141[14] = (void *)sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v142 = (char *)v141 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  uint64_t v143 = type metadata accessor for DispatchTime();
  uint64_t v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56);
  v144(v142, 1, 1, v143);
  v144((char *)v141 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, 1, 1, v143);
  v141[15] = (void *)0xD000000000000026;
  v141[16] = (void *)0x80000001013FF810;
  type metadata accessor for Transaction();
  unsigned __int8 v145 = v240;
  uint64_t v147 = v241;
  uint64_t v146 = v242;
  unint64_t v148 = v243;
  uint64_t v149 = swift_allocObject();
  *(void *)(v149 + 16) = v141;
  *(unsigned char *)(v149 + 24) = v145;
  *(void *)(v149 + 32) = v147;
  *(void *)(v149 + 40) = v146;
  *(void *)(v149 + 48) = v148;
  sub_1000361E0(v146, v148);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v225 = (NSURL *)v140[8];
  URL._bridgeToObjectiveC()(v225);
  unint64_t v151 = v150;
  sub_1006546C8(v226);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100529FB0(v230);
  swift_bridgeObjectRelease();
  Class v153 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100653C34(v231);
  swift_bridgeObjectRelease();
  Class v154 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v244 = 0;
  id v239 = 0;
  LODWORD(v148) = [(NSURL *)v225 sendResourceAtURL:v151 metadata:isa toDestinations:v153 priority:300 options:v154 identifier:&v244 error:&v239];

  id v155 = v244;
  id v156 = v239;
  id v157 = v155;
  unint64_t v158 = v157;
  if (!v148)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001CFB8(v220, v221);
    swift_release();
    long long v179 = v235;
LABEL_41:
    ((void (*)(char *, uint64_t))v232)(v179, v233);
    uint64_t v177 = (uint64_t)v237;
    uint64_t v178 = v238;
    goto LABEL_42;
  }
  unint64_t v159 = v141;
  __chkstk_darwin(v157);
  *(&v208 - 4) = (uint64_t)&v240;
  unint64_t v160 = v221;
  *(&v208 - 3) = v220;
  unint64_t v207 = v160;
  uint64_t v162 = (uint64_t)&v161[4];
  uint64_t v163 = v161 + 16;
  os_unfair_lock_lock(v161 + 16);
  unint64_t v164 = v236;
  sub_10052F028(v162);
  unint64_t v236 = v164;
  if (v164)
  {
    os_unfair_lock_unlock(v163);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v163);
  id v165 = [self defaultManager];
  uint64_t v166 = v235;
  URL._bridgeToObjectiveC()(v167);
  uint64_t v169 = v168;
  v244 = 0;
  unsigned __int8 v170 = [v165 removeItemAtURL:v168 error:&v244];

  id v171 = v244;
  if ((v170 & 1) == 0)
  {
    uint64_t v180 = v244;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001CFB8(v220, v221);
    swift_release();
    long long v179 = v166;
    goto LABEL_41;
  }
  uint64_t v172 = (void (*)(char *, uint64_t))v232;
  if (v158)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v173 = v171;
    uint64_t v174 = (uint64_t)v224;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v175 = v238;
    if (v213(v174, 1, v238) != 1)
    {
      unint64_t v228 = v159;
      unint64_t v183 = v219;
      uint64_t v184 = v210;
      uint64_t v230 = v219[4];
      unint64_t v231 = (unint64_t)(v219 + 4);
      ((void (*)(char *, uint64_t, uint64_t))v230)(v210, v174, v175);
      LODWORD(v226) = v240;
      uint64_t v185 = v242;
      uint64_t v225 = v241;
      unint64_t v186 = v243;
      uint64_t v187 = v223;
      ((void (*)(char *, char *, uint64_t))v183[2])(v223, v184, v175);
      sub_1000361E0(v185, v186);
      sub_1000361E0(v185, v186);
      uint64_t v188 = Logger.logObject.getter();
      os_log_type_t v189 = static os_log_type_t.default.getter();
      int v190 = v189;
      if (os_log_type_enabled(v188, v189))
      {
        uint64_t v191 = swift_slowAlloc();
        uint64_t v219 = (void *)swift_slowAlloc();
        v244 = v219;
        *(_DWORD *)uint64_t v191 = 136315650;
        LODWORD(v224) = v190;
        uint64_t v192 = sub_10052A2CC();
        id v239 = (id)sub_1008FA0F0(v192, v193, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v191 + 12) = 2080;
        uint64_t v194 = sub_10052A690(v226, (uint64_t)v225, v185, v186);
        unint64_t v196 = v195;
        sub_10001CFB8(v185, v186);
        uint64_t v197 = v194;
        uint64_t v175 = v238;
        id v239 = (id)sub_1008FA0F0(v197, v196, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v185, v186);
        *(_WORD *)(v191 + 22) = 2080;
        sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        v198 = v223;
        uint64_t v199 = dispatch thunk of CustomStringConvertible.description.getter();
        id v239 = (id)sub_1008FA0F0(v199, v200, (uint64_t *)&v244);
        long long v201 = v210;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        long long v202 = v198;
        long long v203 = (void (*)(char *, uint64_t))v229;
        v229(v202, v175);
        _os_log_impl((void *)&_mh_execute_header, v188, (os_log_type_t)v224, "%s: Sent message (resource) %s with identifier: %s", (uint8_t *)v191, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10001CFB8(v220, v221);
        swift_release();

        ((void (*)(char *, uint64_t))v232)(v235, v233);
        v203(v237, v175);
        uint64_t v204 = v222;
      }
      else
      {
        sub_10001CFB8(v185, v186);
        sub_10001CFB8(v220, v221);

        long long v205 = v187;
        v206 = (void (*)(char *, uint64_t))v229;
        v229(v205, v175);
        sub_10001CFB8(v185, v186);
        swift_release();
        ((void (*)(char *, uint64_t))v232)(v166, v233);
        v206(v237, v175);
        uint64_t v204 = v222;
        long long v201 = v210;
      }
      ((void (*)(uint64_t, char *, uint64_t))v230)(v204, v201, v175);
      goto LABEL_43;
    }
    sub_10001DAB4(v174, &qword_101638CF0);
    sub_10015CEB8();
    swift_allocError();
    void *v176 = 0;
    swift_willThrow();
    sub_10001CFB8(v220, v221);
    swift_release();
    v172(v166, v233);
    uint64_t v177 = (uint64_t)v237;
    uint64_t v178 = v175;
LABEL_42:
    v229(v177, v178);
LABEL_43:

    return;
  }
  sub_10015CEB8();
  swift_allocError();
  *uint64_t v181 = 0;
  id v182 = v171;
  swift_willThrow();
  sub_10001CFB8(v220, v221);
  swift_release();
  v172(v166, v233);
  v229(v237, v238);
}

uint64_t sub_1005028C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0x8000000000000000;
  sub_10016EC64(a3, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 200) = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_endAccess();
}

uint64_t sub_100502A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a2 + 176);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  uint64_t v20 = (void *)(v19 + v18);
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  void aBlock[4] = sub_10052F19C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C8660;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

uint64_t sub_100502DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v46 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 200);
  if (!*(void *)(v16 + 16)) {
    return swift_endAccess();
  }
  unint64_t v17 = sub_1007240CC(a2);
  if ((v18 & 1) == 0) {
    return swift_endAccess();
  }
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  if (v19 >> 62)
  {
    if (v19 >> 62 == 1)
    {
      uint64_t v20 = v19 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain();
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v43 = (void *)v19;
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_101342130;
      unint64_t aBlock = v19 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v24 = v23;
      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_10000B4CC();
      *(void *)(v21 + 32) = v22;
      *(void *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
      uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      uint64_t v26 = (void *)swift_allocObject();
      uint64_t v27 = v45;
      v26[2] = v44;
      v26[3] = v27;
      v26[4] = v20;
      int v56 = sub_10052F1CC;
      uint64_t v57 = v26;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v53 = 1107296256;
      char v54 = sub_1004B5480;
      uint64_t v55 = &unk_1015C86B0;
      uint64_t v28 = _Block_copy(&aBlock);
      unint64_t v29 = (unint64_t)v43;
      sub_100510360((unint64_t)v43);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      int v51 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v30 = v46;
      uint64_t v31 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v28);

      sub_100173E5C(v29);
      sub_100173E5C(v29);
    }
    else
    {
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
      uint64_t v43 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
      unint64_t v37 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v45;
      *(void *)(v38 + 16) = v44;
      *(void *)(v38 + 24) = v39;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v38 + v37, (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      int v56 = sub_10052F1F8;
      uint64_t v57 = (void *)v38;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v53 = 1107296256;
      char v54 = sub_1004B5480;
      uint64_t v55 = &unk_1015C8700;
      uint64_t v40 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      int v51 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v30 = v46;
      uint64_t v31 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v41 = v43;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);
    }
  }
  else
  {
    swift_retain();
    static os_log_type_t.error.getter();
    uint64_t v43 = (void *)v19;
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
    uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v45;
    *(void *)(v34 + 16) = v44;
    *(void *)(v34 + 24) = v35;
    int v56 = sub_10052F224;
    uint64_t v57 = (void *)v34;
    unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
    uint64_t v53 = 1107296256;
    char v54 = sub_1004B5480;
    uint64_t v55 = &unk_1015C8750;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    int v51 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v30 = v46;
    uint64_t v31 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);

    sub_100173E5C((unint64_t)v43);
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v49);
  return swift_release();
}

uint64_t sub_100503810(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_10000588C(a4);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = a3;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  a1(v9);
  return sub_10001DAB4((uint64_t)v9, a4);
}

void sub_1005038D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  dispatch_group_t v37 = a6;
  uint64_t v35 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v16);
  char v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  sub_10001D074(a1, (uint64_t)v18, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_10170EFB0;
    if (os_log_type_enabled((os_log_t)qword_10170EFB0, v19))
    {
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v21 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_1008FA0F0(v35, a4, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v38 = sub_1008FA0F0(v22, v23, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Failed to send message to %s: (%s)", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v24 = swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v18, v9);
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_10170EFB0;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    os_log_type_t v27 = v25;
    if (os_log_type_enabled(v26, v25))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v39[0] = v34;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_1008FA0F0(v35, a4, v39);
      uint64_t v35 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_1008FA0F0(v29, v30, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      v31(v13, v9);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully sent message to %s: (%s)", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v31)(v15, v9);
    }
    else
    {
      uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
      v32(v13, v9);
      uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v32)(v15, v9);
    }
  }
  __chkstk_darwin(v24);
  *(&v33 - 2) = v36;
  sub_10000588C(&qword_101647F10);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  dispatch_group_leave(v37);
}

uint64_t sub_100503ED0(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101642760);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a2, (uint64_t)v7, &qword_101642760);
  unint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = sub_100A70C10(0, *(void *)(v8 + 16) + 1, 1, v8);
  }
  unint64_t v10 = *(void *)(v8 + 16);
  unint64_t v9 = *(void *)(v8 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v8 = sub_100A70C10(v9 > 1, v10 + 1, 1, v8);
  }
  *(void *)(v8 + 16) = v10 + 1;
  uint64_t result = sub_10001D608((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, &qword_101642760);
  *a1 = v8;
  return result;
}

void sub_100504030(unsigned __int8 a1@<W0>, NSObject *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, char a11, char a12)
{
  uint64_t v171 = a5;
  LODWORD(v167) = a7;
  uint64_t v163 = a8;
  uint64_t v18 = *v12;
  uint64_t v169 = v12;
  uint64_t v170 = v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  id v165 = (char *)v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unsigned __int8 v168 = ((char *)v151 - v22);
  uint64_t v173 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v173 - 8);
  uint64_t v24 = __chkstk_darwin(v173);
  uint64_t v166 = (char *)v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v164 = (char *)v151 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = ((char *)v151 - v29);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)v151 - v32;
  __chkstk_darwin(v31);
  unsigned __int8 v176 = a1;
  uint64_t v177 = a2;
  uint64_t v178 = a3;
  unint64_t v179 = a4;
  uint64_t v35 = (char *)v151 - v34;
  UUID.init()();
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = v171;
  *(void *)(inited + 40) = a6;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_101158614(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10000588C(&qword_1016482F8);
  sub_100062734(&qword_101648300, &qword_1016482F8);
  uint64_t v38 = v172;
  uint64_t v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v173);
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  os_log_t v159 = v30;
  uint64_t v171 = v39;
  uint64_t v172 = v37;
  unint64_t v162 = v40;
  uint64_t v155 = 0;
  swift_release();
  int v41 = v167 & 1;
  unint64_t v42 = 0x6567617373656DLL;
  if (a12) {
    unint64_t v42 = 0xD000000000000017;
  }
  unint64_t v158 = v42;
  if (a12) {
    unint64_t v43 = 0x80000001013FF860;
  }
  else {
    unint64_t v43 = 0xE700000000000000;
  }
  unsigned __int8 v167 = v35;
  unint64_t v160 = sub_100535D24((uint64_t)v35, v41, a9, a10, a11 & 1, a12 & 1);
  uint64_t v44 = (uint64_t)v168;
  sub_10001D074(a9, (uint64_t)v168, &qword_101638CF0);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  uint64_t v46 = v173;
  uint64_t v157 = v23 + 48;
  id v156 = v45;
  unsigned int v47 = v45(v44, 1, v173);
  uint64_t v48 = &qword_101637000;
  uint64_t v161 = v23;
  if (v47 == 1)
  {
    sub_10001DAB4(v44, &qword_101638CF0);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100010324(v49, (uint64_t)qword_10170F168);
    LODWORD(v168) = v176;
    uint64_t v50 = v178;
    os_log_t v159 = v177;
    unint64_t v51 = v179;
    uint64_t v52 = v172;
    swift_bridgeObjectRetain();
    sub_1000361E0(v50, v51);
    swift_bridgeObjectRetain();
    unint64_t v53 = v43;
    swift_bridgeObjectRetain();
    sub_1000361E0(v50, v51);
    char v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    unsigned int v56 = v55;
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      Class v154 = v58;
      *(_DWORD *)uint64_t v57 = 136315906;
      uint64_t v174 = v170;
      uint64_t v175 = v58;
      sub_10000588C(&qword_101648308);
      uint64_t v59 = String.init<A>(describing:)();
      unsigned int v153 = v56;
      uint64_t v174 = sub_1008FA0F0(v59, v60, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v174 = sub_1008FA0F0((uint64_t)v158, v53, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 22) = 2080;
      uint64_t v61 = sub_10052A690(v168, (uint64_t)v159, v50, v51);
      unint64_t v63 = v62;
      sub_10001CFB8(v50, v51);
      uint64_t v174 = sub_1008FA0F0(v61, v63, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v50, v51);
      *(_WORD *)(v57 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v64 = Set.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v174 = sub_1008FA0F0(v64, v66, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v153, "%s: Sending %s: %s to %s", (uint8_t *)v57, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v48 = &qword_101637000;
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v50, v51);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v50, v51);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v67 = v52;
  }
  else
  {
    uint64_t v68 = v23;
    uint64_t v69 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v33, v44, v46);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_100010324(v70, (uint64_t)qword_10170F168);
    unsigned int v153 = v176;
    uint64_t v71 = v178;
    uint64_t v152 = v177;
    unint64_t v72 = v179;
    os_log_t v73 = v159;
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v23 + 16))(v159, v69, v46);
    sub_1000361E0(v71, v72);
    uint64_t v67 = v172;
    swift_bridgeObjectRetain();
    sub_1000361E0(v71, v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.info.getter();
    LODWORD(v154) = v75;
    BOOL v76 = os_log_type_enabled(v74, v75);
    unsigned __int8 v168 = v69;
    if (v76)
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      v151[1] = v78;
      *(_DWORD *)uint64_t v77 = 136316162;
      v151[0] = v74;
      uint64_t v174 = v170;
      uint64_t v175 = v78;
      sub_10000588C(&qword_101648308);
      uint64_t v79 = String.init<A>(describing:)();
      uint64_t v174 = sub_1008FA0F0(v79, v80, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v77 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v174 = sub_1008FA0F0((uint64_t)v158, v43, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v77 + 22) = 2080;
      uint64_t v81 = sub_10052A690(v153, (uint64_t)v152, v71, v72);
      unint64_t v83 = v82;
      sub_10001CFB8(v71, v72);
      uint64_t v174 = sub_1008FA0F0(v81, v83, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v71, v72);
      *(_WORD *)(v77 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v84 = Set.description.getter();
      unint64_t v86 = v85;
      swift_bridgeObjectRelease();
      uint64_t v174 = sub_1008FA0F0(v84, v86, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v77 + 42) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v87 = v159;
      uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v174 = sub_1008FA0F0(v88, v89, (uint64_t *)&v175);
      uint64_t v90 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v91 = *(void (**)(os_log_t, uint64_t))(v90 + 8);
      v91(v87, v46);
      os_log_t v92 = v151[0];
      _os_log_impl((void *)&_mh_execute_header, v151[0], (os_log_type_t)v154, "%s: Sending %s: %s to %s in response to %s", (uint8_t *)v77, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v67 = v172;
      swift_slowDealloc();

      v91(v168, v46);
      uint64_t v48 = &qword_101637000;
    }
    else
    {
      sub_10001CFB8(v71, v72);

      uint64_t v93 = *(void (**)(os_log_t, uint64_t))(v68 + 8);
      v93(v73, v46);
      swift_bridgeObjectRelease_n();
      sub_10001CFB8(v71, v72);
      swift_bridgeObjectRelease_n();
      v93(v168, v46);
      uint64_t v48 = &qword_101637000;
    }
  }
  if (v48[123] != -1) {
    swift_once();
  }
  uint64_t v94 = type metadata accessor for Logger();
  uint64_t v95 = sub_100010324(v94, (uint64_t)qword_10170F168);
  uint64_t v96 = v160;
  swift_bridgeObjectRetain_n();
  unsigned __int8 v168 = v95;
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.info.getter();
  int v99 = v98;
  BOOL v100 = os_log_type_enabled(v97, v98);
  uint64_t v101 = v170;
  if (v100)
  {
    uint64_t v102 = swift_slowAlloc();
    LODWORD(v159) = v99;
    uint64_t v103 = v102;
    unint64_t v158 = swift_slowAlloc();
    uint64_t v174 = v101;
    uint64_t v175 = v158;
    *(_DWORD *)uint64_t v103 = 136315394;
    sub_10000588C(&qword_101648308);
    uint64_t v104 = String.init<A>(describing:)();
    uint64_t v174 = sub_1008FA0F0(v104, v105, (uint64_t *)&v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v103 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v106 = Dictionary.description.getter();
    unint64_t v108 = v107;
    swift_bridgeObjectRelease();
    uint64_t v174 = sub_1008FA0F0(v106, v108, (uint64_t *)&v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v67 = v172;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v159, "%s: IDSSendMessageOptions: %s", (uint8_t *)v103, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v109 = (void *)v169[7];
  unint64_t v110 = v162;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100529FB0(v67);
  swift_bridgeObjectRelease();
  Class v112 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100653C34(v96);
  swift_bridgeObjectRelease();
  Class v113 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  unsigned int v114 = [v109 sendData:isa toDestinations:v112 priority:300 options:v113 identifier:&v174 error:&v175];

  unint64_t v115 = (void *)v174;
  uint64_t v116 = v175;
  id v117 = v115;
  unint64_t v118 = v117;
  if (!v114)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001CFB8(v171, v110);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v167, v173);
    goto LABEL_30;
  }
  uint64_t v119 = v171;
  uint64_t v120 = v173;
  if (v117)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v121 = (uint64_t)v165;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (v156(v121, 1, v120) == 1)
    {
      sub_10001DAB4(v121, &qword_101638CF0);
      sub_10015CEB8();
      swift_allocError();
      *uint64_t v122 = 0;
      swift_willThrow();
      sub_10001CFB8(v119, v162);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v167, v120);
LABEL_30:

      return;
    }
    uint64_t v124 = v161;
    unint64_t v125 = *(uint64_t **)(v161 + 32);
    uint64_t v126 = v164;
    uint64_t v172 = v161 + 32;
    uint64_t v169 = v125;
    ((void (*)(char *, uint64_t, uint64_t))v125)(v164, v121, v120);
    LODWORD(v165) = v176;
    uint64_t v127 = v178;
    unint64_t v160 = (unint64_t)v177;
    unint64_t v128 = v179;
    (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v166, v126, v120);
    sub_1000361E0(v127, v128);
    sub_1000361E0(v127, v128);
    uint64_t v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.info.getter();
    int v131 = v130;
    if (os_log_type_enabled(v129, v130))
    {
      uint64_t v132 = swift_slowAlloc();
      os_log_t v159 = v129;
      uint64_t v133 = v132;
      uint64_t v134 = swift_slowAlloc();
      unsigned __int8 v168 = v134;
      *(_DWORD *)uint64_t v133 = 136315650;
      LODWORD(v158) = v131;
      uint64_t v174 = v170;
      uint64_t v175 = v134;
      sub_10000588C(&qword_101648308);
      uint64_t v135 = String.init<A>(describing:)();
      uint64_t v174 = sub_1008FA0F0(v135, v136, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v133 + 12) = 2080;
      uint64_t v137 = sub_10052A690(v165, v160, v127, v128);
      unint64_t v139 = v138;
      sub_10001CFB8(v127, v128);
      uint64_t v140 = v137;
      uint64_t v141 = v173;
      uint64_t v174 = sub_1008FA0F0(v140, v139, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v142 = v127;
      uint64_t v143 = v141;
      sub_10001CFB8(v142, v128);
      *(_WORD *)(v133 + 22) = 2080;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v144 = v166;
      uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v174 = sub_1008FA0F0(v145, v146, (uint64_t *)&v175);
      uint64_t v126 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v147 = *(void (**)(char *, uint64_t))(v161 + 8);
      v147(v144, v141);
      os_log_t v148 = v159;
      _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v158, "%s: Sent message %s with identifier: %s", (uint8_t *)v133, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8(v171, v162);

      v147(v167, v141);
      uint64_t v149 = v163;
    }
    else
    {
      sub_10001CFB8(v127, v128);
      sub_10001CFB8(v119, v162);

      uint64_t v150 = *(void (**)(char *, uint64_t))(v124 + 8);
      v150(v166, v120);
      sub_10001CFB8(v127, v128);
      v150(v167, v120);
      uint64_t v149 = v163;
      uint64_t v143 = v120;
    }
    ((void (*)(uint64_t, char *, uint64_t))v169)(v149, v126, v143);
  }
  else
  {
    sub_10015CEB8();
    swift_allocError();
    *uint64_t v123 = 0;
    swift_willThrow();
    sub_10001CFB8(v119, v162);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v167, v120);
  }
}

uint64_t sub_100505454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = *(NSObject **)(a2 + 176);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v15 = (void *)(v14 + ((v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v15 = a4;
  v15[1] = a5;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100550F98;
  *(void *)(v16 + 24) = v14;
  void aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015CA3E8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v17);
  _Block_release(v17);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005056A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v46 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 200);
  if (!*(void *)(v16 + 16)) {
    return swift_endAccess();
  }
  unint64_t v17 = sub_1007240CC(a2);
  if ((v18 & 1) == 0) {
    return swift_endAccess();
  }
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  if (v19 >> 62)
  {
    if (v19 >> 62 == 1)
    {
      uint64_t v20 = v19 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain();
      swift_errorRetain();
      static os_log_type_t.error.getter();
      unint64_t v43 = (void *)v19;
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_101342130;
      unint64_t aBlock = v19 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v24 = v23;
      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_10000B4CC();
      *(void *)(v21 + 32) = v22;
      *(void *)(v21 + 40) = v24;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
      uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      uint64_t v26 = (void *)swift_allocObject();
      uint64_t v27 = v45;
      v26[2] = v44;
      v26[3] = v27;
      v26[4] = v20;
      unsigned int v56 = sub_100554A0C;
      uint64_t v57 = v26;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v53 = 1107296256;
      char v54 = sub_1004B5480;
      os_log_type_t v55 = &unk_1015CA438;
      uint64_t v28 = _Block_copy(&aBlock);
      unint64_t v29 = (unint64_t)v43;
      sub_100510360((unint64_t)v43);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      unint64_t v51 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v30 = v46;
      uint64_t v31 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v28);

      sub_100173E5C(v29);
      sub_100173E5C(v29);
    }
    else
    {
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
      unint64_t v43 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
      unint64_t v37 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v45;
      *(void *)(v38 + 16) = v44;
      *(void *)(v38 + 24) = v39;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v38 + v37, (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      unsigned int v56 = sub_10052F1F8;
      uint64_t v57 = (void *)v38;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v53 = 1107296256;
      char v54 = sub_1004B5480;
      os_log_type_t v55 = &unk_1015CA488;
      unint64_t v40 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      unint64_t v51 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v30 = v46;
      uint64_t v31 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      int v41 = v43;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);
    }
  }
  else
  {
    swift_retain();
    static os_log_type_t.error.getter();
    unint64_t v43 = (void *)v19;
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
    uint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v45;
    *(void *)(v34 + 16) = v44;
    *(void *)(v34 + 24) = v35;
    unsigned int v56 = sub_1005545F0;
    uint64_t v57 = (void *)v34;
    unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
    uint64_t v53 = 1107296256;
    char v54 = sub_1004B5480;
    os_log_type_t v55 = &unk_1015CA4D8;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v51 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v30 = v46;
    uint64_t v31 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);

    sub_100173E5C((unint64_t)v43);
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v49);
  return swift_release();
}

uint64_t sub_10050608C(void (*a1)(uint64_t *))
{
  uint64_t v2 = type metadata accessor for URLError.Code();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for URLError();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  static URLError.Code.timedOut.getter();
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10052EE80(&qword_101647EA8, (void (*)(uint64_t))&type metadata accessor for URLError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v10 = URLError._nsError.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v9 = v10;
  swift_storeEnumTagMultiPayload();
  a1(v9);
  return sub_10001DAB4((uint64_t)v9, &qword_101642760);
}

uint64_t sub_1005062A0(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a3, v8);
  swift_storeEnumTagMultiPayload();
  a1(v7);
  return sub_10001DAB4((uint64_t)v7, &qword_101642760);
}

uint64_t sub_100506394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  v27[1] = a4;
  uint64_t v28 = a2;
  uint64_t v31 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v34 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.error.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10000B4CC();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  uint64_t v20 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = v31;
  v21[2] = v28;
  v21[3] = v22;
  v21[4] = a1;
  void aBlock[4] = v29;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v30;
  uint64_t v23 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v37 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v24 = v34;
  uint64_t v25 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  return swift_release();
}

uint64_t sub_100506820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_beginAccess();
  uint64_t v13 = v17;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0x8000000000000000;
  sub_10016EC64(v13, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *(void *)(a2 + 200) = v18;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_endAccess();
}

uint64_t sub_100506A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  v27[1] = a3;
  void v27[2] = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v18 = *(void *)(a1 + 200);
  if (!*(void *)(v18 + 16)) {
    return swift_endAccess();
  }
  unint64_t v19 = sub_1007240CC(a2);
  if ((v20 & 1) == 0) {
    return swift_endAccess();
  }
  unint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  uint64_t result = swift_endAccess();
  if (!(v21 >> 62))
  {
    swift_retain_n();
    static os_log_type_t.error.getter();
    v27[0] = v21;
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_beginAccess();
    unint64_t v23 = sub_100164B48(a2);
    swift_endAccess();
    sub_10052F150(v23);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    unint64_t v25 = v27[0];
    void aBlock[4] = v28;
    aBlock[5] = v27[0];
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = v29;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);

    sub_100173E5C(v25);
    sub_100173E5C(v25);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
    return swift_release();
  }
  return result;
}

void sub_100506ED4()
{
  uint64_t v0 = type metadata accessor for URLError.Code();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for URLError();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URLError.Code.timedOut.getter();
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10052EE80(&qword_101647EA8, (void (*)(uint64_t))&type metadata accessor for URLError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v5 = (void *)URLError._nsError.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  Future.finish(error:)();
}

uint64_t sub_100507060()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10000588C(&qword_101647FA0);
  sub_1010AC674(v1);
  swift_bridgeObjectRelease();
  uint64_t result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  qword_101647C28 = result;
  return result;
}

uint64_t sub_100507130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100507154, 0, 0);
}

uint64_t sub_100507154()
{
  if (qword_101636B60 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v7 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005072A0;
  uint64_t v5 = v0[3];
  return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t (*)(void), void))v7)(v5, &unk_101647F98, v3, SharingCircleWildAdvertisementKey.init(key:), 0);
}

uint64_t sub_1005072A0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v2 = sub_1005545E8;
  }
  else
  {
    uint64_t v2 = sub_1005073D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005073D8()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 64) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100507400(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100507420, 0, 0);
}

uint64_t sub_100507420()
{
  (*(void (**)(void))(v0 + 16))();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(1);
}

uint64_t sub_10050748C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = type metadata accessor for Transaction();
    __chkstk_darwin(v1);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100507560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  uint64_t v20 = *(void *)(a2 + 192);
  sub_100552A0C(a3, (uint64_t)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v19;
  *(void *)(v15 + 24) = a2;
  sub_100551764((uint64_t)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  void aBlock[4] = sub_1005467F8;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C8EA8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

uint64_t sub_100507900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  Transaction.capture()();
  sub_100507BA8(a3);
  type metadata accessor for Transaction();
  sub_100552A0C(a3, (uint64_t)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  sub_100551764((uint64_t)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

unsigned char *sub_100507BA8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (void *)((char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v3 + 192);
  *unint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v12 = v6 + 8;
  v13(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_4;
  }
  uint64_t result = sub_100507E00(a1);
  if (v2) {
    return result;
  }
  unint64_t v8 = result;
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  int v22 = static os_log_type_t.default.getter();
  if (qword_101637280 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  v21[1] = qword_10170EFD8;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10050951C(a1, v11);
  sub_100509C04(a1, (uint64_t)v8, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (unsigned char *)swift_bridgeObjectRelease();
}

unsigned char *sub_100507E00(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)&long long v147 = a1;
  uint64_t v137 = type metadata accessor for CorrelationIdentifierMap();
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  unint64_t v138 = (uint64_t *)&v130[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for ShareRecord();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v141 = &v130[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v143 = (uint64_t *)&v130[-v9];
  __chkstk_darwin(v8);
  uint64_t v11 = &v130[-v10];
  uint64_t v12 = sub_10000588C(&qword_101660BF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v130[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v144 = &v130[-v16];
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = &v130[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v148[0] = 0x7365547265646E75;
  v148[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v149 == 1)
  {
    sub_10092F00C((uint64_t)_swiftEmptyArrayStorage);
    return &_swiftEmptySetSingleton;
  }
  uint64_t v21 = (void *)v1[24];
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = *(void (**)(void *, uint64_t))(v18 + 8);
  uint64_t v23 = v18 + 8;
  v24(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_50:
    v148[0] = v25;
    sub_10089F65C(v23);
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  uint64_t v134 = v147 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v26 = sub_100B6DD88();
  uint64_t v27 = (uint64_t)v26;
  uint64_t v2 = (uint64_t *)v26[2];
  *(void *)&long long v147 = v4;
  uint64_t v142 = v2;
  if (v2)
  {
    uint64_t v135 = v15;
    uint64_t v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    unint64_t v140 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v29 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v30 = v141;
      sub_100552A0C(v28, (uint64_t)v141, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v31 = &v30[*(int *)(v4 + 36)];
      int v32 = *v31;
      uint64_t v33 = *((void *)v31 + 2);
      uint64_t v145 = (void *)*((void *)v31 + 1);
      swift_bridgeObjectRetain();
      sub_100552C2C((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      LODWORD(v146) = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v29 = sub_100A6F880(0, v29[2] + 1, 1, v29);
      }
      unint64_t v36 = v29[2];
      unint64_t v35 = v29[3];
      if (v36 >= v35 >> 1) {
        uint64_t v29 = sub_100A6F880((void *)(v35 > 1), v36 + 1, 1, v29);
      }
      v29[2] = v36 + 1;
      unint64_t v37 = &v29[3 * v36];
      *((unsigned char *)v37 + 32) = (_BYTE)v146;
      v37[5] = (uint64_t)v145;
      v37[6] = v33;
      v28 += v140;
      uint64_t v2 = (uint64_t *)((char *)v2 - 1);
      uint64_t v4 = v147;
    }
    while (v2);
    swift_bridgeObjectRelease();
    uint64_t v15 = v135;
    uint64_t v2 = v142;
  }
  else
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
  }
  uint64_t v141 = (unsigned char *)sub_101158CCC((uint64_t)v29);
  swift_bridgeObjectRelease();
  unint64_t v140 = sub_10054D3D4();
  uint64_t v38 = Set.init(minimumCapacity:)();
  uint64_t v39 = 0;
  uint64_t v149 = v38;
  uint64_t v145 = (void *)(v5 + 48);
  unint64_t v146 = (char *)(v5 + 56);
  if (v2) {
    goto LABEL_16;
  }
LABEL_22:
  while (2)
  {
    uint64_t v45 = 1;
    uint64_t v39 = v2;
LABEL_24:
    uint64_t v46 = v144;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))v146)(v144, v45, 1, v4);
    sub_10001D608((uint64_t)v46, (uint64_t)v15, &qword_101660BF0);
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))*v145)(v15, 1, v4) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v55 = v149;
      uint64_t v56 = v139;
      sub_100544B78();
      uint64_t v5 = v56;
      if (v56)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = (unsigned char *)v57;
        int64_t v58 = *(void *)(v57 + 16);
        uint64_t v59 = _swiftEmptyArrayStorage;
        if (v58)
        {
          unint64_t v146 = (char *)v55;
          uint64_t v139 = 0;
          v148[0] = _swiftEmptyArrayStorage;
          sub_1000B7A5C(0, v58, 0);
          uint64_t v59 = (void *)v148[0];
          *(void *)&long long v147 = v15;
          unint64_t v60 = (unint64_t *)(v15 + 64);
          do
          {
            char v61 = *((unsigned char *)v60 - 32);
            uint64_t v63 = *(v60 - 3);
            uint64_t v62 = *(v60 - 2);
            uint64_t v64 = *(v60 - 1);
            unint64_t v65 = *v60;
            swift_bridgeObjectRetain();
            sub_100037A38(v64, v65);
            sub_100037A24(v64, v65);
            v148[0] = v59;
            unint64_t v67 = v59[2];
            unint64_t v66 = v59[3];
            if (v67 >= v66 >> 1)
            {
              sub_1000B7A5C(v66 > 1, v67 + 1, 1);
              uint64_t v59 = (void *)v148[0];
            }
            v59[2] = v67 + 1;
            uint64_t v68 = &v59[3 * v67];
            *((unsigned char *)v68 + 32) = v61;
            v60 += 5;
            v68[5] = v63;
            v68[6] = v62;
            --v58;
          }
          while (v58);
          uint64_t v5 = v139;
          uint64_t v55 = (uint64_t)v146;
          uint64_t v15 = (unsigned char *)v147;
        }
        uint64_t v4 = sub_101158CCC((uint64_t)v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v69 = v141;
        uint64_t v70 = swift_bridgeObjectRetain();
        uint64_t v71 = sub_1009DD750(v70, v55);
        uint64_t v72 = swift_bridgeObjectRetain();
        uint64_t v73 = sub_1009DD750(v72, v71);
        unint64_t v74 = (void *)swift_allocObject();
        v74[2] = v73;
        v74[3] = v55;
        v74[4] = v69;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v2 = (uint64_t *)v137;
        uint64_t v29 = v138;
        unsafeFromAsyncTask<A>(_:)();
        if (!v5)
        {
          uint64_t v27 = v55;
          swift_release();
          os_log_type_t v75 = sub_1004E3C90(v4);
          sub_101159814((uint64_t)v75);
          swift_bridgeObjectRelease();
          uint64_t v38 = CorrelationIdentifierMap.map(destinations:)();
          goto LABEL_39;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_45:
      swift_bridgeObjectRelease();
      return v15;
    }
    uint64_t v47 = v143;
    sub_100551764((uint64_t)v15, (uint64_t)v143, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v48 = (unsigned __int8 *)v47 + *(int *)(v4 + 36);
    uint64_t v49 = *((void *)v48 + 1);
    uint64_t v50 = *((void *)v48 + 2);
    unint64_t v51 = v15;
    Swift::Int v52 = *v48;
    swift_bridgeObjectRetain();
    sub_100552C2C((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v29 = &v149;
    Swift::Int v53 = v52;
    uint64_t v15 = v51;
    uint64_t v2 = v142;
    uint64_t v54 = v49;
    uint64_t v4 = v147;
    sub_100DCC8B8((uint64_t)v148, v53, v54, v50);
    uint64_t v38 = swift_bridgeObjectRelease();
    if (v39 == v2) {
      continue;
    }
    break;
  }
LABEL_16:
  while ((unint64_t)v39 < *(void *)(v27 + 16))
  {
    uint64_t v29 = (uint64_t *)((char *)v39 + 1);
    sub_100552A0C(v27+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * (void)v39, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    unint64_t v40 = (uint64_t *)&v11[*(int *)(v4 + 40)];
    uint64_t v42 = *v40;
    unint64_t v41 = v40[1];
    uint64_t v43 = v42 & 0xFFFFFFFFFFFFLL;
    if ((v41 & 0x2000000000000000) != 0) {
      uint64_t v44 = HIBYTE(v41) & 0xF;
    }
    else {
      uint64_t v44 = v43;
    }
    if (v44)
    {
      sub_100551764((uint64_t)v11, (uint64_t)v144, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v45 = 0;
      uint64_t v39 = (uint64_t *)((char *)v39 + 1);
      goto LABEL_24;
    }
    uint64_t v38 = sub_100552C2C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v39 = (uint64_t *)((char *)v39 + 1);
    if (v2 == v29) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_39:
  uint64_t v76 = v38;
  swift_bridgeObjectRelease();
  uint64_t v77 = sub_1004E3C90(v27);
  sub_101159814((uint64_t)v77);
  swift_bridgeObjectRelease();
  uint64_t v78 = CorrelationIdentifierMap.map(destinations:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t *))(v136 + 8))(v29, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v79 = v78;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v79 + 16) <= *(void *)(v76 + 16) >> 3)
  {
    v148[0] = v76;
    sub_10089F65C(v79);
  }
  else
  {
    sub_1008A41F8(v79, v76);
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = CorrelationIdentifierMap.map(correlationIdentifiers:)();
  *(void *)&long long v147 = v15;
  uint64_t v81 = sub_1004E4044(v80);
  swift_bridgeObjectRelease();
  uint64_t v15 = (unsigned char *)sub_101158CCC(v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v82 = sub_1004E3C90((uint64_t)v141);
  sub_101159814((uint64_t)v82);
  swift_bridgeObjectRelease();
  uint64_t v5 = 0;
  uint64_t v83 = CorrelationIdentifierMap.map(destinations:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v84 = sub_1004E3C90(v4);
  sub_101159814((uint64_t)v84);
  swift_bridgeObjectRelease();
  uint64_t v23 = CorrelationIdentifierMap.map(destinations:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v83;
  if (*(void *)(v23 + 16) <= *(void *)(v83 + 16) >> 3) {
    goto LABEL_50;
  }
  sub_1008A41F8(v23, v83);
  swift_bridgeObjectRelease();
LABEL_51:
  unint64_t v86 = v138;
  uint64_t v87 = v136;
  uint64_t v88 = CorrelationIdentifierMap.map(correlationIdentifiers:)();
  if (v5)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v87 + 8))(v86, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v89 = sub_1004E4044(v88);
  swift_bridgeObjectRelease();
  sub_101158CCC(v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v90 = sub_10092F00C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v142 = *(uint64_t **)(v147 + 16);
  uint64_t v139 = 0;
  if (!v142)
  {
    swift_bridgeObjectRelease();
LABEL_85:
    LODWORD(v146) = static os_log_type_t.default.getter();
    if (qword_101637280 != -1) {
LABEL_88:
    }
      swift_once();
    uint64_t v143 = (uint64_t *)qword_10170EFD8;
    uint64_t v145 = (void *)sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v116 = swift_allocObject();
    long long v147 = xmmword_101342130;
    *(_OWORD *)(v116 + 16) = xmmword_101342130;
    uint64_t v117 = UUID.uuidString.getter();
    uint64_t v119 = v118;
    *(void *)(v116 + 56) = &type metadata for String;
    uint64_t v120 = (unsigned char *)sub_10000B4CC();
    *(void *)(v116 + 64) = v120;
    uint64_t v144 = v120;
    *(void *)(v116 + 32) = v117;
    *(void *)(v116 + 40) = v119;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    unint64_t v146 = (char *)qword_10170EFD8;
    uint64_t v121 = swift_allocObject();
    *(_OWORD *)(v121 + 16) = v147;
    swift_bridgeObjectRetain();
    uint64_t v122 = Set.description.getter();
    uint64_t v124 = v123;
    swift_bridgeObjectRelease();
    *(void *)(v121 + 56) = &type metadata for String;
    *(void *)(v121 + 64) = v120;
    *(void *)(v121 + 32) = v122;
    *(void *)(v121 + 40) = v124;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v125 = swift_allocObject();
    *(_OWORD *)(v125 + 16) = v147;
    swift_bridgeObjectRetain();
    uint64_t v126 = Set.description.getter();
    uint64_t v128 = v127;
    swift_bridgeObjectRelease();
    uint64_t v129 = v144;
    *(void *)(v125 + 56) = &type metadata for String;
    *(void *)(v125 + 64) = v129;
    *(void *)(v125 + 32) = v126;
    *(void *)(v125 + 40) = v128;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v136 + 8))(v138, v137);
    return v15;
  }
  uint64_t v141 = (unsigned char *)(v147 + 32);
  unint64_t v146 = v15 + 56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_log_type_t v91 = 0;
  os_log_t v92 = (void *)v90;
  while (1)
  {
    uint64_t v93 = &v141[40 * (void)v91];
    uint64_t v94 = v93[2];
    uint64_t v95 = v93[3];
    unint64_t v96 = v93[4];
    if (*((void *)v15 + 2)) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_100037A38(v95, v96);
    swift_bridgeObjectRetain();
    sub_100037A38(v95, v96);
    swift_bridgeObjectRetain();
    sub_100037A24(v95, v96);
    swift_bridgeObjectRelease();
LABEL_56:
    swift_bridgeObjectRelease();
    os_log_type_t v91 = (uint64_t *)((char *)v91 + 1);
    sub_100037A24(v95, v96);
    swift_bridgeObjectRelease();
    if (v91 == v142)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_85;
    }
  }
  uint64_t v143 = v91;
  Swift::UInt v97 = *(unsigned __int8 *)v93;
  uint64_t v144 = (unsigned char *)v93[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v97);
  swift_bridgeObjectRetain();
  sub_100037A38(v95, v96);
  swift_bridgeObjectRetain();
  sub_100037A38(v95, v96);
  uint64_t v145 = v92;
  os_log_type_t v98 = v144;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v99 = Hasher._finalize()();
  uint64_t v100 = -1 << v15[32];
  unint64_t v101 = v99 & ~v100;
  if (((*(void *)&v146[(v101 >> 3) & 0xFFFFFFFFFFFFFF8] >> v101) & 1) == 0)
  {
    uint64_t v106 = v95;
LABEL_71:
    sub_100037A24(v106, v96);
    swift_bridgeObjectRelease();
    os_log_t v92 = v145;
    os_log_type_t v91 = v143;
    goto LABEL_56;
  }
  unint64_t v133 = v96;
  uint64_t v135 = (unsigned char *)v95;
  uint64_t v102 = ~v100;
  uint64_t v103 = *((void *)v15 + 6);
  while (1)
  {
    uint64_t v104 = (unsigned __int8 *)(v103 + 24 * v101);
    if (*v104 == v97)
    {
      BOOL v105 = *((unsigned char **)v104 + 1) == v98 && *((void *)v104 + 2) == v94;
      if (v105 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
    }
    unint64_t v101 = (v101 + 1) & v102;
    if (((*(void *)&v146[(v101 >> 3) & 0xFFFFFFFFFFFFFF8] >> v101) & 1) == 0)
    {
      uint64_t v95 = (uint64_t)v135;
      uint64_t v106 = (uint64_t)v135;
      unint64_t v96 = v133;
      goto LABEL_71;
    }
  }
  unint64_t v96 = v133;
  if (v133 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    os_log_t v92 = v145;
    os_log_type_t v91 = v143;
    uint64_t v95 = (uint64_t)v135;
    goto LABEL_56;
  }
  uint64_t v95 = (uint64_t)v135;
  sub_1000361E0((uint64_t)v135, v133);
  sub_1000361E0(v95, v96);
  unint64_t v107 = v145;
  LODWORD(v132) = swift_isUniquelyReferenced_nonNull_native();
  v148[0] = v107;
  unint64_t v109 = sub_100724500(v97, (uint64_t)v98, v94);
  uint64_t v110 = v107[2];
  BOOL v111 = (v108 & 1) == 0;
  uint64_t v112 = v110 + v111;
  if (__OFADD__(v110, v111))
  {
    __break(1u);
    goto LABEL_88;
  }
  if (v107[3] >= v112)
  {
    if (v132)
    {
      os_log_t v92 = (void *)v148[0];
      if (v108) {
        goto LABEL_79;
      }
    }
    else
    {
      int v131 = v108;
      unint64_t v132 = v109;
      sub_100E82A10();
      unint64_t v109 = v132;
      os_log_t v92 = (void *)v148[0];
      if (v131) {
        goto LABEL_79;
      }
    }
LABEL_81:
    sub_100E7CD40(v109, v97, (uint64_t)v98, v94, v95, v96, v92);
    swift_bridgeObjectRetain();
    goto LABEL_82;
  }
  int v131 = v108;
  sub_100E6E934(v112, v132);
  unint64_t v113 = sub_100724500(v97, (uint64_t)v98, v94);
  if ((v131 & 1) == (v114 & 1))
  {
    unint64_t v109 = v113;
    os_log_t v92 = (void *)v148[0];
    if ((v131 & 1) == 0) {
      goto LABEL_81;
    }
LABEL_79:
    uint64_t v115 = v92[7] + 16 * v109;
    sub_10001CFB8(*(void *)v115, *(void *)(v115 + 8));
    *(void *)uint64_t v115 = v95;
    *(void *)(v115 + 8) = v96;
LABEL_82:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037A24(v95, v96);
    sub_100037A24(v95, v96);
    os_log_type_t v91 = v143;
    goto LABEL_56;
  }
  uint64_t result = (unsigned char *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100509110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100509134, 0, 0);
}

uint64_t sub_100509134()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = swift_allocObject();
  v0[6] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1004E3C90(v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10054F358;
  *(void *)(v6 + 24) = v4;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1005092A0;
  uint64_t v8 = v0[2];
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)(v8, 0xD00000000000001BLL, 0x80000001013F3BA0, v5, sub_10054F360, v6);
}

uint64_t sub_1005092A0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100509418;
  }
  else {
    uint64_t v2 = sub_1005093B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005093B4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100509418()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10050947C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a4;
  if ((sub_100DC7D04(a4, a5, a6, a7) & 1) == 0)
  {
    if (sub_100DC7D04(v11, a5, a6, a8)) {
      uint64_t v11 = v11;
    }
    else {
      uint64_t v11 = a1;
    }
  }
  swift_bridgeObjectRetain();
  return v11;
}

uint64_t sub_10050951C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v3 + 192);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v36 = a2 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  long long v39 = xmmword_101347BA0;
  uint64_t v38 = (char *)&type metadata for () + 8;
  uint64_t v40 = a2;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v42 = (v16 - 1) & v16;
  int64_t v43 = v17;
  for (unint64_t i = __clz(__rbit64(v16)) | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v20 << 6))
  {
    uint64_t v23 = *(void *)(a2 + 48) + 24 * i;
    uint64_t v24 = *(void *)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
    unsigned __int8 v26 = *(unsigned char *)v23;
    type metadata accessor for OwnedBeaconRecord();
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100B6DD88();
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10052E99C((uint64_t)v27, v26, v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v28 = v3;
    if (qword_101637280 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = v39;
    uint64_t v30 = UUID.uuidString.getter();
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    unint64_t v33 = sub_10000B4CC();
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v32;
    *(void *)(v29 + 96) = &type metadata for String;
    *(void *)(v29 + 104) = v33;
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 72) = v24;
    *(void *)(v29 + 80) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = type metadata accessor for Transaction();
    __chkstk_darwin(v34);
    *(&v35 - 2) = (uint64_t)v44;
    *(&v35 - 1) = v28;
    static Transaction.named<A>(_:with:)();
    uint64_t result = swift_bridgeObjectRelease();
    a2 = v40;
    uint64_t v3 = v28;
    unint64_t v16 = v42;
    int64_t v17 = v43;
    if (v42) {
      goto LABEL_5;
    }
LABEL_6:
    BOOL v19 = __OFADD__(v17, 1);
    int64_t v20 = v17 + 1;
    if (v19)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v37) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    if (!v21) {
      break;
    }
LABEL_16:
    uint64_t v42 = (v21 - 1) & v21;
    int64_t v43 = v20;
  }
  int64_t v22 = v20 + 1;
  if (v20 + 1 >= v37) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v22 = v20 + 2;
  if (v20 + 2 >= v37) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21) {
    goto LABEL_15;
  }
  int64_t v22 = v20 + 3;
  if (v20 + 3 >= v37) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
LABEL_15:
    int64_t v20 = v22;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v20 >= v37) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v22;
    if (v21) {
      goto LABEL_16;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100509954(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(type metadata accessor for ShareRecord() - 8);
    uint64_t v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      swift_retain();
      sub_1004E5D28(v6, (uint64_t)sub_10054F218, v4);
      swift_release();
      v6 += v7;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100509A48(uint64_t a1)
{
  Transaction.capture()();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
}

void sub_100509C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v104 = a3;
  uint64_t v100 = a2;
  os_log_type_t v98 = (void *)a1;
  uint64_t v94 = type metadata accessor for ShareInstruction();
  __chkstk_darwin(v94);
  uint64_t v93 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SharingRampState();
  __chkstk_darwin(v5 - 8);
  uint64_t v99 = (uint64_t)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v9 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (id *)((char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v95 = v3;
  uint64_t v14 = (void *)v3[24];
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0) {
    goto LABEL_58;
  }
  id v16 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v17 = [v16 aa_primaryAppleAccount];

  v82[0] = v17;
  if (!v17)
  {
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      goto LABEL_59;
    }
    goto LABEL_7;
  }
  sub_10000588C(&qword_101639230);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v85 = v109;
  if (!v109)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170D788);
    int64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No BeaconSharingService available!", v24, 2u);
      swift_slowDealloc();
    }

LABEL_55:
    return;
  }
  id v18 = [v82[0] aa_altDSID];
  if (v18)
  {
    BOOL v19 = v18;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v92 = v20;
  }
  else
  {
    uint64_t v91 = 0;
    unint64_t v92 = 0xE000000000000000;
  }
  uint64_t v25 = v9;
  uint64_t v26 = *(void *)(v100 + 56);
  uint64_t v86 = v100 + 56;
  uint64_t v27 = 1 << *(unsigned char *)(v100 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v87 = (unint64_t)(v27 + 63) >> 6;
  unint64_t v90 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v30 = (void (**)(char *, uint64_t))(v7 + 8);
  unint64_t v31 = v29;
  uint64_t v89 = v30;
  swift_bridgeObjectRetain();
  int64_t v32 = 0;
  uint64_t v105 = 0;
  unint64_t v96 = 0x80000001013FFB60;
  unint64_t v97 = 0x80000001013FFB30;
  *(void *)&long long v33 = 141558275;
  long long v83 = v33;
  v82[1] = (char *)&type metadata for Any + 8;
  long long v84 = xmmword_101342130;
  uint64_t v88 = (char *)&type metadata for () + 8;
  while (1)
  {
    if (v31)
    {
      unint64_t v54 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v55 = v54 | (v32 << 6);
      goto LABEL_32;
    }
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_57;
    }
    if (v32 >= v87) {
      goto LABEL_54;
    }
    unint64_t v57 = *(void *)(v86 + 8 * v32);
    if (!v57) {
      break;
    }
LABEL_31:
    unint64_t v31 = (v57 - 1) & v57;
    unint64_t v55 = __clz(__rbit64(v57)) + (v32 << 6);
LABEL_32:
    uint64_t v59 = (unsigned __int8 *)(*(void *)(v100 + 48) + 24 * v55);
    int v60 = *v59;
    uint64_t v62 = *((void *)v59 + 1);
    char v61 = (void *)*((void *)v59 + 2);
    swift_bridgeObjectRetain();
    uint64_t v63 = v99;
    sub_1004EAE84(v99);
    uint64_t v64 = sub_10000588C(&qword_101647FE8);
    int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 2, v64);
    sub_100552C2C(v63, (uint64_t (*)(void))type metadata accessor for SharingRampState);
    if (v65 != 2) {
      goto LABEL_43;
    }
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100010324(v66, (uint64_t)qword_10170D788);
    unint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Beacon sharing is allowed to use item sharing for self beacons.", v69, 2u);
      swift_slowDealloc();
    }

    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = v85;
    *(unsigned char *)(v70 + 24) = v60;
    *(void *)(v70 + 32) = v62;
    *(void *)(v70 + 40) = v61;
    swift_bridgeObjectRetain();
    swift_retain();
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    int v71 = v109;
    swift_bridgeObjectRetain();
    if (v71 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = v83;
        *(void *)(v74 + 4) = 1752392040;
        *(_WORD *)(v74 + 12) = 2081;
        swift_bridgeObjectRetain();
        *(void *)(v74 + 14) = sub_1008FA0F0(v62, (unint64_t)v61, &v109);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Destination has devices requiring legacy shares to %{private,mask.hash}s.", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
LABEL_43:
      uint64_t v78 = *(void *)(v104 + 16);
      unint64_t v102 = v31;
      int64_t v103 = v32;
      int v101 = v60;
      if (v78)
      {
        swift_bridgeObjectRetain();
        unint64_t v79 = sub_100724500(v60, v62, (uint64_t)v61);
        if (v80)
        {
          uint64_t v34 = (uint64_t *)(*(void *)(v104 + 56) + 16 * v79);
          uint64_t v35 = *v34;
          unint64_t v36 = v34[1];
          sub_1000361E0(*v34, v36);
          swift_bridgeObjectRelease();
          type metadata accessor for OwnedBeaconRecord();
          uint64_t v37 = UUID.data.getter();
          unint64_t v39 = v38;
          uint64_t v109 = v37;
          unint64_t v110 = v38;
          sub_1000361E0(v35, v36);
          sub_1000361E0(v37, v39);
          sub_100A42CBC(v35, v36);
          sub_10001CFB8(v35, v36);
          sub_10001CFB8(v37, v39);
          uint64_t v40 = v109;
          unint64_t v41 = v110;
          uint64_t v107 = v109;
          unint64_t v108 = v110;
          sub_1000362FC();
          DataProtocol.stableUUID.getter();
          sub_10001CFB8(v35, v36);
          sub_10001CFB8(v40, v41);
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
      }
      static os_log_type_t.error.getter();
      if (qword_101637280 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = v84;
      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = sub_10000B4CC();
      *(void *)(v81 + 32) = v62;
      *(void *)(v81 + 40) = v61;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      UUID.init()();
LABEL_18:
      uint64_t v42 = v25;
      int64_t v43 = (void *)v62;
      uint64_t v45 = v93;
      uint64_t v44 = (int *)v94;
      uint64_t v46 = v98;
      sub_100552A0C((uint64_t)v98, (uint64_t)&v93[*(int *)(v94 + 24)], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*v90)(&v45[v44[8]], v42, v106);
      uint64_t v47 = &v45[v44[9]];
      uint64_t v48 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
      *uint64_t v45 = 1;
      unint64_t v49 = v92;
      *((void *)v45 + 1) = v91;
      *((void *)v45 + 2) = v49;
      uint64_t v50 = &v45[v44[7]];
      char v51 = v101;
      *uint64_t v50 = v101;
      *((void *)v50 + 1) = v43;
      *((void *)v50 + 2) = v61;
      uint64_t v52 = type metadata accessor for Transaction();
      __chkstk_darwin(v52);
      v82[-6] = v95;
      v82[-5] = v45;
      v82[-4] = v46;
      LOBYTE(v82[-3]) = v51;
      v82[-2] = v43;
      v82[-1] = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v53 = v105;
      static Transaction.named<A>(_:with:)();
      uint64_t v105 = v53;
      swift_bridgeObjectRelease();
      (*v89)(v42, v106);
      sub_100552C2C((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
      uint64_t v25 = v42;
      unint64_t v31 = v102;
      int64_t v32 = v103;
    }
    else
    {
      os_log_type_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = v83;
        *(void *)(v77 + 4) = 1752392040;
        *(_WORD *)(v77 + 12) = 2081;
        swift_bridgeObjectRetain();
        *(void *)(v77 + 14) = sub_1008FA0F0(v62, (unint64_t)v61, &v109);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Skipping sending .automatic_legacy share to %{private,mask.hash}s since they have no devices not capable of item sharing", (uint8_t *)v77, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  int64_t v58 = v32 + 1;
  if (v32 + 1 >= v87) {
    goto LABEL_54;
  }
  unint64_t v57 = *(void *)(v86 + 8 * v58);
  if (v57) {
    goto LABEL_30;
  }
  int64_t v58 = v32 + 2;
  if (v32 + 2 >= v87) {
    goto LABEL_54;
  }
  unint64_t v57 = *(void *)(v86 + 8 * v58);
  if (v57) {
    goto LABEL_30;
  }
  int64_t v58 = v32 + 3;
  if (v32 + 3 >= v87)
  {
LABEL_54:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  unint64_t v57 = *(void *)(v86 + 8 * v58);
  if (v57)
  {
LABEL_30:
    int64_t v32 = v58;
    goto LABEL_31;
  }
  while (1)
  {
    int64_t v32 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      break;
    }
    if (v32 >= v87) {
      goto LABEL_54;
    }
    unint64_t v57 = *(void *)(v86 + 8 * v32);
    ++v58;
    if (v57) {
      goto LABEL_31;
    }
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once();
LABEL_7:
  os_log(_:dso:log:_:_:)();
}

uint64_t sub_10050A98C(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return _swift_task_switch(sub_10050A9AC, 0, 0);
}

uint64_t sub_10050A9AC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10050AAE8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10050AAE8(uint64_t a1)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 120);
  swift_task_dealloc();
  *uint64_t v3 = a1;
  return _swift_task_switch(sub_10050AC00, 0, 0);
}

uint64_t sub_10050AC00()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10050AC60(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100412FFC;
  return sub_1000F652C(a3, a4, a5);
}

uint64_t sub_10050AD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = a6;
  uint64_t v53 = a4;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v43 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v43);
  uint64_t v44 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = *(void *)(v47 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v47);
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  id v18 = (char *)&v42 - v17;
  sub_100552A0C(v53, (uint64_t)&v42 - v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  char v51 = v16;
  sub_100552A0C((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  sub_100551764((uint64_t)v18, v20 + v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v50 = v20;
  unint64_t v21 = v20 + ((v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v45 = a5;
  *(unsigned char *)unint64_t v21 = a5;
  *(void *)(v21 + 8) = v54;
  *(void *)(v21 + 16) = a7;
  uint64_t v52 = a1;
  swift_retain_n();
  uint64_t v53 = a7;
  swift_bridgeObjectRetain_n();
  int v46 = static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v42 = xmmword_101347BA0;
  *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
  uint64_t v23 = type metadata accessor for ShareInstruction();
  uint64_t v24 = v49;
  sub_100552A0C(v49 + *(int *)(v23 + 24), (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v27 = v26;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v28 = sub_10000B4CC();
  *(void *)(v22 + 64) = v28;
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  uint64_t v29 = v24 + *(int *)(v23 + 28);
  uint64_t v30 = *(void *)(v29 + 8);
  uint64_t v31 = *(void *)(v29 + 16);
  *(void *)(v22 + 96) = &type metadata for String;
  *(void *)(v22 + 104) = v28;
  *(void *)(v22 + 72) = v30;
  *(void *)(v22 + 80) = v31;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = v48;
  uint64_t v33 = sub_1004FDCA8(v24);
  if (v33)
  {
    uint64_t v34 = v33;
    static os_log_type_t.error.getter();
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = v42;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = v28;
    *(void *)(v35 + 32) = v30;
    *(void *)(v35 + 40) = v31;
    uint64_t v55 = v34;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v36 = String.init<A>(describing:)();
    *(void *)(v35 + 96) = &type metadata for String;
    *(void *)(v35 + 104) = v28;
    *(void *)(v35 + 72) = v36;
    *(void *)(v35 + 80) = v37;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v38 = (uint64_t)v44;
    *uint64_t v44 = v34;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    uint64_t v39 = (uint64_t)v51;
    sub_10050B1F8(v38, v52, (uint64_t)v51, v45, v54, v53);
    swift_errorRelease();
    sub_10001DAB4(v38, &qword_101648068);
    swift_release();
  }
  else
  {
    uint64_t v40 = v50;
    swift_retain();
    sub_10053826C(v24, v32, (uint64_t)sub_10054D900, v40);
    swift_release();
    swift_release();
    uint64_t v39 = (uint64_t)v51;
  }
  swift_release();
  sub_100552C2C(v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10050B1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v11, &qword_101648068);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101347500;
    type metadata accessor for OwnedBeaconRecord();
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v17;
    *(void *)(v13 + 64) = v17;
    *(void *)(v13 + 72) = a5;
    *(void *)(v13 + 80) = a6;
    v26[1] = v12;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)(v13 + 136) = &type metadata for String;
    *(void *)(v13 + 144) = v17;
    *(void *)(v13 + 112) = v18;
    *(void *)(v13 + 120) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
    type metadata accessor for OwnedBeaconRecord();
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000B4CC();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 72) = a5;
    *(void *)(v21 + 80) = a6;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v11, &qword_101648068);
  }
}

unint64_t sub_10050B4D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void **a5)
{
  uint64_t v83 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  unint64_t v79 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v78 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v76 = v11;
  uint64_t v77 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  uint64_t v19 = (unint64_t *)(a2 + 200);
  swift_beginAccess();
  uint64_t v20 = *(void *)(a2 + 200);
  if (*(void *)(v20 + 16))
  {
    unint64_t v21 = sub_1007240CC(a3);
    if (v22)
    {
      unint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_endAccess();
      if (v23 >> 62)
      {
        if (v23 >> 62 == 1)
        {
          swift_errorRetain();
          static os_log_type_t.error.getter();
          if (qword_101637258 != -1) {
            swift_once();
          }
          os_log(_:dso:log:_:_:)();
          return sub_100173E5C(v23);
        }
        else
        {
          static os_log_type_t.error.getter();
          if (qword_101637258 != -1) {
            swift_once();
          }
          return os_log(_:dso:log:_:_:)();
        }
      }
      if (a4)
      {
        uint64_t v29 = v16;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
        swift_beginAccess();
        swift_retain_n();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v91 = *v19;
        *uint64_t v19 = 0x8000000000000000;
        unint64_t v31 = v23;
        sub_10016EC64(0x8000000000000000, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
        *uint64_t v19 = v91;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v15);
        swift_endAccess();
        static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_101342130;
        sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v35 = v34;
        *(void *)(v32 + 56) = &type metadata for String;
        *(void *)(v32 + 64) = sub_10000B4CC();
        *(void *)(v32 + 32) = v33;
        *(void *)(v32 + 40) = v35;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v37 = v76;
        uint64_t v36 = v77;
        (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
        uint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
        uint64_t v88 = sub_10055287C;
        uint64_t v89 = v31;
        unint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v85 = 1107296256;
        uint64_t v86 = sub_1004B5480;
        int64_t v87 = &unk_1015CAE10;
        uint64_t v39 = _Block_copy(&aBlock);
        swift_retain();
        unint64_t v40 = v31;
        unint64_t v41 = v78;
        static DispatchQoS.unspecified.getter();
        unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
        sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        long long v42 = v79;
        uint64_t v43 = v83;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v44 = v39;
      }
      else
      {
        unint64_t v75 = v23;
        if (a5)
        {
          sub_100510360(v23);
          sub_100510360(v23);
          swift_errorRetain();
          LODWORD(v74) = static os_log_type_t.error.getter();
          if (qword_101637258 != -1) {
            swift_once();
          }
          uint64_t v73 = qword_10170EFB0;
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v45 = swift_allocObject();
          *(_OWORD *)(v45 + 16) = xmmword_101347BA0;
          sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v47 = v46;
          *(void *)(v45 + 56) = &type metadata for String;
          unint64_t v48 = sub_10000B4CC();
          *(void *)(v45 + 64) = v48;
          *(void *)(v45 + 32) = v72;
          *(void *)(v45 + 40) = v47;
          unint64_t aBlock = a5;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v49 = String.init<A>(describing:)();
          *(void *)(v45 + 96) = &type metadata for String;
          *(void *)(v45 + 104) = v48;
          *(void *)(v45 + 72) = v49;
          *(void *)(v45 + 80) = v50;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
          char v51 = a5;
          swift_beginAccess();
          swift_errorRetain();
          char v52 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v91 = *v19;
          *uint64_t v19 = 0x8000000000000000;
          sub_10016EC64((unint64_t)a5 | 0x4000000000000000, (uint64_t)v18, v52);
          *uint64_t v19 = v91;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
          swift_endAccess();
          sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
          uint64_t v54 = v76;
          uint64_t v53 = v77;
          (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
          uint64_t v55 = (void *)static OS_dispatch_queue.global(qos:)();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v54);
          uint64_t v56 = swift_allocObject();
          unint64_t v57 = v75;
          *(void *)(v56 + 16) = v75;
          *(void *)(v56 + 24) = v51;
          uint64_t v88 = sub_100552854;
          uint64_t v89 = v56;
          unint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v85 = 1107296256;
          uint64_t v86 = sub_1004B5480;
          int64_t v87 = &unk_1015CADE8;
          int64_t v58 = _Block_copy(&aBlock);
          sub_100510360(v57);
          swift_errorRetain();
          uint64_t v59 = v78;
          static DispatchQoS.unspecified.getter();
          unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
          sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          int v60 = v79;
          uint64_t v61 = v83;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v58);

          sub_100173E5C(v57);
          swift_errorRelease();
          sub_100173E5C(v57);
          (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v61);
          (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v82);
          return swift_release();
        }
        swift_retain_n();
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        uint64_t v74 = qword_10170EFB0;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_101342130;
        sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v65 = v64;
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = sub_10000B4CC();
        *(void *)(v62 + 32) = v63;
        *(void *)(v62 + 40) = v65;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
        type metadata accessor for SPOwnerSessionError(0);
        unint64_t aBlock = 0;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v66 = v91 | 0x4000000000000000;
        swift_beginAccess();
        char v67 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v90 = (void *)*v19;
        *uint64_t v19 = 0x8000000000000000;
        sub_10016EC64(v66, (uint64_t)v18, v67);
        *uint64_t v19 = (unint64_t)v90;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        swift_endAccess();
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v69 = v76;
        uint64_t v68 = v77;
        (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
        uint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v69);
        unint64_t v40 = v75;
        uint64_t v88 = sub_10055153C;
        uint64_t v89 = v75;
        unint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v85 = 1107296256;
        uint64_t v86 = sub_1004B5480;
        int64_t v87 = &unk_1015CAD98;
        uint64_t v70 = _Block_copy(&aBlock);
        swift_retain();
        unint64_t v41 = v78;
        static DispatchQoS.unspecified.getter();
        unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
        sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        long long v42 = v79;
        uint64_t v43 = v83;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v44 = v70;
      }
      _Block_release(v44);

      sub_100173E5C(v40);
      sub_100173E5C(v40);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v42, v43);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v41, v82);
      return swift_release();
    }
  }
  swift_endAccess();
  static os_log_type_t.debug.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_10000B4CC();
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10050C488(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a8;
  uint64_t v30 = a5;
  uint64_t v31 = a7;
  v27[1] = a6;
  int v29 = a4;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  uint64_t v28 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(a2 + 176);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = v18 + v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v18, v17, v14);
  *(unsigned char *)(v20 + v19) = v29;
  uint64_t v21 = v31;
  *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + v20 + 8) = v30;
  void aBlock[4] = v21;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v33;
  char v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_errorRetain();
  unint64_t v23 = v28;
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v25 = v34;
  uint64_t v24 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v37);
  return swift_release();
}

unint64_t sub_10050C850(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void **a5)
{
  uint64_t v83 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  unint64_t v79 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v78 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v76 = v11;
  uint64_t v77 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  uint64_t v19 = (unint64_t *)(a2 + 200);
  swift_beginAccess();
  uint64_t v20 = *(void *)(a2 + 200);
  if (!*(void *)(v20 + 16) || (unint64_t v21 = sub_1007240CC(a3), (v22 & 1) == 0))
  {
    swift_endAccess();
    static os_log_type_t.error.getter();
    if (qword_101637258 == -1)
    {
LABEL_9:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_101342130;
      uint64_t v26 = UUID.uuidString.getter();
      uint64_t v28 = v27;
      *(void *)(v25 + 56) = &type metadata for String;
      *(void *)(v25 + 64) = sub_10000B4CC();
      *(void *)(v25 + 32) = v26;
      *(void *)(v25 + 40) = v28;
      os_log(_:dso:log:_:_:)();
      return swift_bridgeObjectRelease();
    }
LABEL_25:
    swift_once();
    goto LABEL_9;
  }
  unint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  swift_endAccess();
  if (!(v23 >> 62))
  {
    if (a4)
    {
      uint64_t v29 = v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
      swift_beginAccess();
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v91 = *v19;
      *uint64_t v19 = 0x8000000000000000;
      unint64_t v31 = v23;
      sub_10016EC64(0x8000000000000000, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
      *uint64_t v19 = v91;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v15);
      swift_endAccess();
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_101342130;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = v34;
      *(void *)(v32 + 56) = &type metadata for String;
      *(void *)(v32 + 64) = sub_10000B4CC();
      *(void *)(v32 + 32) = v33;
      *(void *)(v32 + 40) = v35;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v37 = v76;
      uint64_t v36 = v77;
      (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
      uint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
      uint64_t v88 = sub_100554A04;
      uint64_t v89 = v31;
      unint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v85 = 1107296256;
      uint64_t v86 = sub_1004B5480;
      int64_t v87 = &unk_1015CA780;
      uint64_t v39 = _Block_copy(&aBlock);
      swift_retain();
      unint64_t v40 = v31;
      unint64_t v41 = v78;
      static DispatchQoS.unspecified.getter();
      unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v42 = v79;
      uint64_t v43 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v44 = v39;
    }
    else
    {
      unint64_t v75 = v23;
      if (a5)
      {
        sub_100510360(v23);
        sub_100510360(v23);
        swift_errorRetain();
        LODWORD(v74) = static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        uint64_t v73 = qword_10170EFB0;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_101347BA0;
        sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v47 = v46;
        *(void *)(v45 + 56) = &type metadata for String;
        unint64_t v48 = sub_10000B4CC();
        *(void *)(v45 + 64) = v48;
        *(void *)(v45 + 32) = v72;
        *(void *)(v45 + 40) = v47;
        unint64_t aBlock = a5;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v49 = String.init<A>(describing:)();
        *(void *)(v45 + 96) = &type metadata for String;
        *(void *)(v45 + 104) = v48;
        *(void *)(v45 + 72) = v49;
        *(void *)(v45 + 80) = v50;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        char v51 = a5;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
        swift_beginAccess();
        swift_errorRetain();
        char v52 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v91 = *v19;
        *uint64_t v19 = 0x8000000000000000;
        sub_10016EC64((unint64_t)a5 | 0x4000000000000000, (uint64_t)v18, v52);
        *uint64_t v19 = v91;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        swift_endAccess();
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v54 = v76;
        uint64_t v53 = v77;
        (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
        uint64_t v55 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v54);
        uint64_t v56 = swift_allocObject();
        unint64_t v57 = v75;
        *(void *)(v56 + 16) = v75;
        *(void *)(v56 + 24) = v51;
        uint64_t v88 = sub_100554A58;
        uint64_t v89 = v56;
        unint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v85 = 1107296256;
        uint64_t v86 = sub_1004B5480;
        int64_t v87 = &unk_1015CA758;
        int64_t v58 = _Block_copy(&aBlock);
        sub_100510360(v57);
        swift_errorRetain();
        uint64_t v59 = v78;
        static DispatchQoS.unspecified.getter();
        unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
        sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        int v60 = v79;
        uint64_t v61 = v83;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v58);

        sub_100173E5C(v57);
        swift_errorRelease();
        sub_100173E5C(v57);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v61);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v82);
        return swift_release();
      }
      swift_retain_n();
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      uint64_t v74 = qword_10170EFB0;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_101342130;
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v65 = v64;
      *(void *)(v62 + 56) = &type metadata for String;
      *(void *)(v62 + 64) = sub_10000B4CC();
      *(void *)(v62 + 32) = v63;
      *(void *)(v62 + 40) = v65;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
      type metadata accessor for SPOwnerSessionError(0);
      unint64_t aBlock = 0;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v66 = v91 | 0x4000000000000000;
      swift_beginAccess();
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v90 = (void *)*v19;
      *uint64_t v19 = 0x8000000000000000;
      sub_10016EC64(v66, (uint64_t)v18, v67);
      *uint64_t v19 = (unint64_t)v90;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      swift_endAccess();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v69 = v76;
      uint64_t v68 = v77;
      (*(void (**)(char *, void, uint64_t))(v77 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v76);
      uint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v69);
      unint64_t v40 = v75;
      uint64_t v88 = (uint64_t (*)())sub_10055153C;
      uint64_t v89 = v75;
      unint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v85 = 1107296256;
      uint64_t v86 = sub_1004B5480;
      int64_t v87 = &unk_1015CA708;
      uint64_t v70 = _Block_copy(&aBlock);
      swift_retain();
      unint64_t v41 = v78;
      static DispatchQoS.unspecified.getter();
      unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      long long v42 = v79;
      uint64_t v43 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v44 = v70;
    }
    _Block_release(v44);

    sub_100173E5C(v40);
    sub_100173E5C(v40);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v41, v82);
    return swift_release();
  }
  if (v23 >> 62 != 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 == -1) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  swift_errorRetain();
  static os_log_type_t.error.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  return sub_100173E5C(v23);
}

void sub_10050D850()
{
  type metadata accessor for CommandError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10052EE80((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Future.finish(error:)();
}

void sub_10050D900(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  if (a3)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_beginAccess();
    *(void *)(a5 + 16) = a1;
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    *(void *)(a4 + 24) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a6);
}

void sub_10050D9D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    *(void *)(a3 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a5);
}

uint64_t sub_10050DA9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v2 + 280);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a1;
  *(void *)(v12 + 16) = v11;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a1 + 32);
  *(void *)(v12 + 72) = *(void *)(a1 + 48);
  void aBlock[4] = sub_1005528F8;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CAE60;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v10;
  swift_retain();
  sub_100552904(a1);
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_10050DDC0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    if (qword_101636B00 != -1) {
LABEL_33:
    }
      swift_once();
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170DE98);
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134217984;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "sendLiveLocation sending to %ld", v8, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    swift_beginAccess();
    uint64_t v9 = *(void *)(v4 + 272);
    uint64_t v10 = v9 + 64;
    uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v12 = -1;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    unint64_t v13 = v12 & *(void *)(v9 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v15 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v17 = v16 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v15 >= v14) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v15);
        if (!v21)
        {
          int64_t v22 = v15 + 1;
          if (v15 + 1 >= v14) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v10 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v15 + 2;
            if (v15 + 2 >= v14) {
              goto LABEL_29;
            }
            unint64_t v21 = *(void *)(v10 + 8 * v22);
            if (!v21)
            {
              int64_t v22 = v15 + 3;
              if (v15 + 3 >= v14) {
                goto LABEL_29;
              }
              unint64_t v21 = *(void *)(v10 + 8 * v22);
              if (!v21)
              {
                int64_t v22 = v15 + 4;
                if (v15 + 4 >= v14)
                {
LABEL_29:
                  swift_release();
                  return swift_release();
                }
                unint64_t v21 = *(void *)(v10 + 8 * v22);
                if (!v21)
                {
                  while (1)
                  {
                    int64_t v15 = v22 + 1;
                    if (__OFADD__(v22, 1)) {
                      goto LABEL_32;
                    }
                    if (v15 >= v14) {
                      goto LABEL_29;
                    }
                    unint64_t v21 = *(void *)(v10 + 8 * v15);
                    ++v22;
                    if (v21) {
                      goto LABEL_24;
                    }
                  }
                }
              }
            }
          }
          int64_t v15 = v22;
        }
LABEL_24:
        unint64_t v13 = (v21 - 1) & v21;
        unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v9 + 56) + 8 * v17);
      swift_retain();
      sub_10050E0B8(a2, v4, v18);
      swift_release();
    }
  }
  return result;
}

uint64_t sub_10050E0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000588C(&qword_101645808);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100552904(a1);
  sub_1004E52F8(1, a1, v9);
  if (v3)
  {
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DE98);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v29 = 0;
      uint64_t v14 = v13;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = v27;
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v30 = v3;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v28 = v10;
      uint64_t v30 = sub_1008FA0F0(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_retain();
      uint64_t v17 = sub_1004EB530();
      unint64_t v19 = v18;
      swift_release();
      uint64_t v30 = sub_1008FA0F0(v17, v19, &v31);
      uint64_t v10 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "sendMessage error: %{public}s to session %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_release_n();
    }
    if (qword_101637070 != -1) {
      swift_once();
    }
    sub_100010324(v10, (uint64_t)qword_10170EC30);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      int64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ending messagingsession due to error", v22, 2u);
      swift_slowDealloc();
    }

    sub_1004EE668();
    [*(id *)(a3 + 56) endSession];
    sub_1004ED5D8(a3);
    if (qword_101637440 != -1) {
      swift_once();
    }
    uint64_t v31 = v3;
    swift_errorRetain();
    swift_retain();
    sub_10000588C(&qword_101638D40);
    uint64_t v23 = String.init<A>(describing:)();
    sub_1010DD508(1, v23, v24);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v31 = sub_1004EDADC((uint64_t)v9);
    sub_10000588C(&qword_1016449B8);
    sub_100062734(&qword_1016449C0, &qword_1016449B8);
    uint64_t v25 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    sub_10001DAB4((uint64_t)v9, &qword_101645808);
    *(void *)(a2 + 296) = v25;
    return swift_release();
  }
}

void sub_10050E5F0()
{
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170DE98);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "sendLocation complete", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10050E6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101648368);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + qword_10170DE88);
  id v24 = *(id *)(v3 + 280);
  id v13 = v24;
  uint64_t v25 = v12;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  swift_retain();
  id v15 = v13;
  sub_10000588C(&qword_101645788);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101645790, &qword_101645788);
  sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v7, &qword_10163C6C8);

  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v22;
  uint64_t v19 = v23;
  v17[2] = v16;
  v17[3] = v18;
  v17[4] = v19;
  sub_100062734(&qword_101648370, &qword_101648368);
  swift_bridgeObjectRetain();
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_10050E9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v9 = Strong;
  if (v7)
  {
    sub_1001EE1D4(v6);
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DE98);
    sub_1001EE1D4(v6);
    sub_1001EE1D4(v6);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)id v13 = 136315138;
      sub_1001EE1D4(v6);
      unint64_t v14 = sub_1001EE00C(v6);
      unint64_t v16 = v15;
      sub_100483968(v6, 1);
      uint64_t v33 = sub_1008FA0F0(v14, v16, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100483968(v6, 1);
      sub_100483968(v6, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error getting session available %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_100483968(v6, 1);
    }
    else
    {
      swift_release();
      sub_100483968(v6, 1);
      sub_100483968(v6, 1);
      sub_1001EE1E4(v6);
    }
    return;
  }
  swift_beginAccess();
  uint64_t v17 = *(void *)(v9 + 272);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (*(void *)(v17 + 16))
  {
    sub_100483974(v6, 0);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_100723FF4(a3, a4);
    if (v20)
    {
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v19);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1004EE668();
      [*(id *)(v21 + 56) endSession];
      sub_1004ED5D8(v21);
      swift_beginAccess();
      sub_100164C40(a3, a4);
      swift_endAccess();
      swift_release();
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DE98);
      swift_bridgeObjectRetain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        v31[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_1008FA0F0(a3, a4, v31);
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found existing session for %s. Ended and removed it from cache", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  swift_endAccess();
LABEL_17:
  swift_beginAccess();
  sub_100483974(v6, 0);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)(v9 + 272);
  *(void *)(v9 + 272) = 0x8000000000000000;
  sub_10016F124(v6, a3, a4, isUniquelyReferenced_nonNull_native);
  *(void *)(v9 + 272) = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  v31[0] = a3;
  v31[1] = a4;
  char v32 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  if (*((void *)p_ivar_base_size + 352) != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100010324(v27, (uint64_t)qword_10170DE98);
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1008FA0F0(a3, a4, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Configured incoming live session for handle %s and called startLocate on listener", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    sub_100483968(v6, 0);
  }
  else
  {
    sub_100483968(v6, 0);

    swift_release();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10050F0D0()
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  char v1 = sub_100D0C0B0();
  swift_release();
  uint64_t v2 = self;
  swift_retain();
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned int v5 = [v3 BOOLForKey:v4];
  swift_release();

  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  long long v35 = v23;
  long long v36 = v24;
  long long v37 = v25;
  long long v31 = v19;
  long long v32 = v20;
  long long v33 = v21;
  long long v34 = v22;
  long long v27 = v15;
  long long v28 = v16;
  long long v29 = v17;
  long long v30 = v18;
  v26[0] = v13;
  v26[1] = v14;
  sub_100551984((uint64_t)v26);
  uint64_t v6 = v27;
  swift_beginAccess();
  if (v1)
  {
    if (*(void *)(*(void *)(v0 + 272) + 16) < v6) {
      uint64_t v7 = v5 ^ 1;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170DE98);
  swift_retain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67110144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 14) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 20) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v11 + 30) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "canAcceptRequestForLiveSession isLocationPublishingDevice %{BOOL}d isAutoMeActive %{BOOL}d isWithinMaxSessionLimit %{BOOL}d sessCount %ld maxAllowed %ld  ", (uint8_t *)v11, 0x28u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return v7;
}

uint64_t sub_10050F43C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v11);
  long long v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170DE98);
  uint64_t v31 = a1;
  sub_100552A0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  swift_bridgeObjectRetain_n();
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v30 = a5;
    uint64_t v18 = v17;
    uint64_t v28 = swift_slowAlloc();
    v33[0] = v28;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = sub_100495A24();
    uint64_t v32 = sub_1008FA0F0(v19, v20, v33);
    uint64_t v29 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100552C2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_1008FA0F0(a3, a4, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accepting incoming %s invitation because this device is enabled for location publishing and from follower %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v30;
    swift_slowDealloc();
  }
  else
  {
    sub_100552C2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10052EE80(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
  uint64_t v21 = v31;
  uint64_t v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v24 = v23;
  uint64_t v25 = swift_release();
  __chkstk_darwin(v25);
  *(&v27 - 4) = a5;
  *(&v27 - 3) = v21;
  *(&v27 - 2) = v22;
  *(&v27 - 1) = v24;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_10001CFB8(v22, v24);
  return sub_10050E6D8(a3, a4, a5);
}

uint64_t sub_10050F824(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10050F884(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10050F884(uint64_t a1)
{
  uint64_t v53 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unsigned int v5 = (void *)((char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 280);
  *unsigned int v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0) {
    goto LABEL_50;
  }
  uint64_t v9 = (uint64_t *)(v1 + 272);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v1 + 272);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v50 = v1;
  uint64_t v51 = v10 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v52 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v54 = v10;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  *(void *)&long long v16 = 136315138;
  long long v49 = v16;
  v48[1] = (char *)&type metadata for Any + 8;
  if (v14) {
    goto LABEL_36;
  }
LABEL_8:
  int64_t v17 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v17 < v52)
    {
      unint64_t v18 = *(void *)(v51 + 8 * v17);
      int64_t v19 = v15 + 1;
      if (v18) {
        goto LABEL_21;
      }
      int64_t v19 = v15 + 2;
      if (v15 + 2 >= v52) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v51 + 8 * v19);
      if (v18) {
        goto LABEL_21;
      }
      int64_t v19 = v15 + 3;
      if (v15 + 3 >= v52) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v51 + 8 * v19);
      if (v18)
      {
LABEL_21:
        unint64_t v14 = (v18 - 1) & v18;
        int64_t v55 = v19;
        for (unint64_t i = __clz(__rbit64(v18)) + (v19 << 6); ; unint64_t i = v37 | (v15 << 6))
        {
          uint64_t v22 = (uint64_t *)(*(void *)(v54 + 48) + 16 * i);
          uint64_t v23 = *v22;
          uint64_t v24 = v22[1];
          uint64_t v25 = *(void **)(*(void *)(*(void *)(v54 + 56) + 8 * i) + 56);
          swift_bridgeObjectRetain();
          swift_retain();
          id v26 = [v25 sessionID];
          if (v26)
          {
            uint64_t v27 = v26;
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v30 = v29;
          }
          else
          {
            uint64_t v28 = 0;
            uint64_t v30 = 0;
          }
          uint64_t v31 = v9;
          id v32 = [*(id *)(v53 + 56) sessionID];
          if (v32)
          {
            long long v33 = v32;
            uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v36 = v35;

            if (v30)
            {
              if (!v36) {
                goto LABEL_34;
              }
              if (v28 == v34 && v30 == v36)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v38 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_release();
LABEL_35:
                  uint64_t v9 = v31;
                  int64_t v15 = v55;
                  if (!v14) {
                    goto LABEL_8;
                  }
                  goto LABEL_36;
                }
              }
            }
            else if (v36)
            {
LABEL_34:
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t result = swift_bridgeObjectRelease();
              goto LABEL_35;
            }
          }
          else if (v30)
          {
            goto LABEL_34;
          }
          if (qword_101636B00 != -1) {
            swift_once();
          }
          uint64_t v39 = type metadata accessor for Logger();
          sub_100010324(v39, (uint64_t)qword_10170DE98);
          swift_bridgeObjectRetain_n();
          unint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.default.getter();
          uint64_t v9 = v31;
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            v57[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v42 = v49;
            swift_bridgeObjectRetain();
            *(void *)(v42 + 4) = sub_1008FA0F0(v23, v24, v57);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Removing live session for %s", (uint8_t *)v42, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v43 = sub_100723FF4(v23, v24);
          char v45 = v44;
          swift_bridgeObjectRelease();
          if (v45)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v47 = *v31;
            uint64_t v56 = *v31;
            *uint64_t v31 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100E82DA0();
              uint64_t v47 = v56;
            }
            swift_bridgeObjectRelease();
            sub_100168934(v43, v47);
            *uint64_t v31 = v47;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_bridgeObjectRelease();
          v57[0] = v23;
          v57[1] = v24;
          char v58 = 2;
          swift_retain();
          PassthroughSubject.send(_:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t result = swift_release();
          int64_t v15 = v55;
          if (!v14) {
            goto LABEL_8;
          }
LABEL_36:
          unint64_t v37 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          int64_t v55 = v15;
        }
      }
      uint64_t v20 = v15 + 4;
      if (v15 + 4 < v52)
      {
        unint64_t v18 = *(void *)(v51 + 8 * v20);
        if (v18)
        {
          int64_t v19 = v15 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v19 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_49;
          }
          if (v19 >= v52) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v51 + 8 * v19);
          ++v20;
          if (v18) {
            goto LABEL_21;
          }
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

void sub_10050FE9C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = sub_100724A78(v7);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    BOOL v11 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
  BOOL v11 = v10 > 0;
LABEL_6:
  swift_beginAccess();
  *(unsigned char *)(a2 + 16) = v11;
  dispatch_group_leave(a4);
}

uint64_t sub_10050FF38(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _swiftEmptyDictionarySingleton;
  sub_10000588C(&qword_10163BAB0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  *(unsigned char *)(v15 + 32) = a1;
  *(void *)(v15 + 40) = a2;
  *(void *)(v15 + 48) = a3;
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  *(void *)(v16 + 56) = v14;
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
  unint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = sub_10054E2FC;
  v18[5] = v16;
  v18[6] = v5;
  v18[7] = v15;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1008F5E44((uint64_t)v13, (uint64_t)&unk_1016480A0, (uint64_t)v18);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_10051013C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_10001DAB4(v0 + 64, &qword_1016482C0);
  swift_release();
  sub_10001DAB4(v0 + 96, &qword_1016482C8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 336));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1005102D4()
{
  sub_10051013C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BeaconSharingManager()
{
  return self;
}

unint64_t *initializeBufferWithCopyOfBuffer for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100510360(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_100510360(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRetain();
  }
  if (!(result >> 62)) {
    return swift_retain();
  }
  return result;
}

unint64_t destroy for BeaconSharingManager.MessageState(unint64_t *a1)
{
  return sub_100173E5C(*a1);
}

unint64_t *assignWithCopy for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100510360(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100173E5C(v4);
  return a1;
}

unint64_t *assignWithTake for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100173E5C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconSharingManager.MessageState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.MessageState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1005104A4(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

unint64_t *sub_1005104C0(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.MessageState()
{
  return &type metadata for BeaconSharingManager.MessageState;
}

uint64_t sub_1005104FC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100552A0C(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t result = sub_1004FA0B8(16, 1, (uint64_t)v5, (uint64_t)&v19);
  if (!v1)
  {
    uint64_t v7 = v21;
    unint64_t v18 = v20;
    unint64_t v8 = v22;
    int v9 = v19;
    uint64_t v10 = sub_10052A504((uint64_t (*)(void))sub_100529898);
    uint64_t v11 = sub_1004E4D34((uint64_t)v10);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0;
    uint64_t v20 = (NSURL *)0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000017;
    uint64_t v20 = (NSURL *)0x80000001013FF980;
    v12._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    unint64_t v13 = v19;
    uint64_t v14 = v20;
    uint64_t v15 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
    *(void *)&long long v16 = v13;
    *((void *)&v16 + 1) = v14;
    sub_100531978(v9, v18, v7, v8, (uint64_t)v11, 0, 1, 0, (uint64_t)&_swiftEmptySetSingleton, v15, v16, sub_1005238DC);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10001CFB8((uint64_t)v7, (unint64_t)v8);
  }
  return result;
}

uint64_t sub_100510700()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StableIdentifier();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  unint64_t v8 = (char *)v35 - v7;
  __chkstk_darwin(v6);
  uint64_t v41 = (uint64_t)v35 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v42 = (uint64_t)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v43 = (uint64_t)v35 - v13;
  uint64_t result = (uint64_t)sub_100ACF5FC();
  uint64_t v15 = result;
  long long v16 = _swiftEmptyArrayStorage;
  char v44 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(result + 16);
  if (v38)
  {
    unint64_t v17 = 0;
    uint64_t v36 = v5;
    unint64_t v37 = v8;
    v35[1] = v1;
    void v35[2] = v5 + 8;
    while (1)
    {
      if (v17 >= *(void *)(v15 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = v15;
      unint64_t v19 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v20 = *(void *)(v39 + 72);
      uint64_t v21 = v15 + v19 + v20 * v17;
      uint64_t v22 = v43;
      sub_100552A0C(v21, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v23 = v22 + *(int *)(v40 + 24);
      uint64_t v24 = v41;
      sub_100552A0C(v23, v41, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v25 = v2;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100552C2C(v24, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v27 = v23;
      uint64_t v28 = (uint64_t)v37;
      sub_100552A0C(v27, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1) {
        break;
      }
      sub_100552A0C(v28, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v29 = swift_getEnumCaseMultiPayload();
      uint64_t v2 = v25;
      if (v29 == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = v18;
LABEL_12:
        swift_bridgeObjectRelease();
        uint64_t v30 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v36, v30);
        sub_100552C2C(v28, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        long long v16 = v44;
LABEL_13:
        sub_100551764(v43, v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v16[2] + 1, 1);
        }
        long long v16 = v44;
        unint64_t v32 = v44[2];
        unint64_t v31 = v44[3];
        if (v32 >= v31 >> 1)
        {
          sub_1000B74D8(v31 > 1, v32 + 1, 1);
          long long v16 = v44;
        }
        v16[2] = v32 + 1;
        uint64_t result = sub_100551764(v42, (uint64_t)v16 + v19 + v32 * v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      uint64_t v15 = v18;
      if (v29 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      sub_100552C2C((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100552C2C(v28, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t result = sub_100552C2C(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_4:
      if (v38 == ++v17)
      {
        long long v16 = v44;
        goto LABEL_19;
      }
    }
    sub_100552C2C(v28, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v2 = v25;
    uint64_t v15 = v18;
    goto LABEL_13;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v33 = v16[2];
  swift_release();
  if (!v33) {
    return sub_101158CCC((uint64_t)_swiftEmptyArrayStorage);
  }
  swift_retain();
  uint64_t v34 = sub_10106BBE0();
  swift_release();
  return (uint64_t)v34;
}

uint64_t sub_100510C1C(unsigned __int8 *a1, char *a2)
{
  return sub_10071D124(*a1, *a2);
}

Swift::Int sub_100510C28()
{
  return Hasher._finalize()();
}

uint64_t sub_100510CEC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100510D98()
{
  return Hasher._finalize()();
}

unint64_t sub_100510E58@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100545724(*a1);
  *a2 = result;
  return result;
}

void sub_100510E88(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E6F687069;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684107369;
      goto LABEL_3;
    case 2:
      *a1 = 1685024873;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 6513005;
      a1[1] = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_100510F0C(void *a1@<X8>)
{
  *a1 = &off_1015A1B10;
}

uint64_t sub_100510F1C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for BeaconLocationUpdate();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100552A0C(a4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
  sub_1004FA39C(9, 1, (uint64_t)v11, (uint64_t)v19);
  char v12 = v19[0];
  uint64_t v14 = v19[1];
  uint64_t v13 = v19[2];
  unint64_t v15 = v19[3];
  uint64_t v16 = type metadata accessor for Transaction();
  __chkstk_darwin(v16);
  *(void *)&v18[-64] = v4;
  v18[-56] = v12;
  *(void *)&v18[-48] = v14;
  *(void *)&v18[-40] = v13;
  *(void *)&v18[-32] = v15;
  v18[-24] = a1;
  *(void *)&v18[-16] = a2;
  *(void *)&v18[-8] = a3;
  static Transaction.named<A>(_:with:)();
  return sub_10001CFB8(v13, v15);
}

uint64_t sub_100511174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1005111B8(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&off_1015A1B60, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, void, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t, char, uint64_t, uint64_t))sub_10053A780);
}

uint64_t sub_1005111B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, void, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t, char, uint64_t, uint64_t))
{
  Swift::Int v16 = sub_100DF2D1C(a10);
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  char v22 = a7;
  __int16 v21 = 257;
  char v20 = 0;
  a11(a3, a4, a5, a6, v17, a7, a8, a9, v20, 0, v21, v16, v18, 0, 0, a2, a1, v22, a8, a9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005112D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v10, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v13 = sub_10000B4CC();
    *(void *)(v12 + 64) = v13;
    *(void *)(v12 + 32) = a4;
    *(void *)(v12 + 40) = a5;
    v18[1] = v11;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v13;
    *(void *)(v12 + 72) = v14;
    *(void *)(v12 + 80) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10000B4CC();
    *(void *)(v17 + 32) = a4;
    *(void *)(v17 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v10, &qword_101642760);
  }
}

uint64_t sub_10051156C(uint64_t a1)
{
  uint64_t v165 = a1;
  uint64_t v1 = type metadata accessor for CryptoKeys();
  uint64_t v155 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v156 = (uint64_t)&v141 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for LegacyShareEnvelope(0);
  uint64_t v3 = __chkstk_darwin(v143);
  uint64_t v144 = (uint64_t)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v145 = (uint64_t)&v141 - v5;
  uint64_t v169 = type metadata accessor for TimeBasedKey();
  uint64_t v147 = *(void *)(v169 - 8);
  uint64_t v6 = __chkstk_darwin(v169);
  uint64_t v154 = (uint64_t)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unsigned int v153 = (char *)&v141 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v141 - v11;
  __chkstk_darwin(v10);
  uint64_t v177 = (uint64_t)&v141 - v13;
  uint64_t v172 = type metadata accessor for FamilyCryptoKeysV1();
  uint64_t v168 = *(void *)(v172 - 8);
  uint64_t v14 = __chkstk_darwin(v172);
  unint64_t v162 = (char *)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v171 = (unint64_t)&v141 - v16;
  uint64_t v148 = type metadata accessor for FamilyShareEnvelopeV1(0);
  uint64_t v17 = __chkstk_darwin(v148);
  uint64_t v149 = (uint64_t)&v141 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v151 = (uint64_t)&v141 - v19;
  uint64_t v159 = type metadata accessor for UUID();
  int64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v160 = (uint64_t)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v152);
  uint64_t v157 = (uint64_t)&v141 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char **)((char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v141 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Date();
  int v29 = *(void (***)(char *, uint64_t))(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v32 = (char *)&v141 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v141 - v33;
  uint64_t v170 = type metadata accessor for DateInterval();
  uint64_t v163 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v167 = (uint64_t)&v141 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v36 = [self defaultStore];
  if (!v36)
  {
    __break(1u);
    goto LABEL_55;
  }
  unint64_t v37 = v36;
  uint64_t v38 = (void (**)(char *, uint64_t))[v36 aa_primaryAppleAccount];

  uint64_t v166 = v38;
  if (!v38)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v173 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return swift_willThrow();
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v39 = v164;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v142 = v39;
  uint64_t v40 = sub_1010AB7B0(v174[0]);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v34);
  if ((unsigned __int128)(v40 * (__int128)60) >> 64 != (60 * v40) >> 63)
  {
    __break(1u);
LABEL_53:
    swift_once();
LABEL_19:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = xmmword_101342130;
    id v73 = [v29 v24[192]];
    uint64_t v74 = v167;
    if (v73)
    {
      unint64_t v75 = v73;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;

      *(void *)(v72 + 56) = &type metadata for String;
      *(void *)(v72 + 64) = sub_10000B4CC();
      *(void *)(v72 + 32) = v76;
      *(void *)(v72 + 40) = v78;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v173 = 7;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 8))(v74, v170);
    }
LABEL_56:
    __break(1u);
    JUMPOUT(0x100512DA0);
  }
  uint64_t v150 = v24;
  DateInterval.init(start:duration:)();
  unint64_t v146 = (int *)type metadata accessor for ShareInstruction();
  sub_10001D074(v165 + v146[9], (uint64_t)v27, (uint64_t *)&unk_10163AC90);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v29[6])(v27, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v27, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v29[4])(v32, v27, v28);
    DateInterval.end.getter();
    char v42 = static Date.< infix(_:_:)();
    uint64_t v43 = v29[1];
    v43(v34, v28);
    if (v42)
    {
      ((void (*)(char *, char *, uint64_t))v29[2])(v34, v32, v28);
      DateInterval.end.setter();
    }
    v43(v32, v28);
  }
  uint64_t v24 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  int v29 = v166;
  id v44 = [v166 username];
  char v45 = v162;
  if (!v44)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v46 = v44;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v49)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 == -1) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
  int v50 = v47;
  uint64_t v51 = v48;
  uint64_t v52 = v49;
  uint64_t v53 = v146;
  uint64_t v54 = v165;
  uint64_t v55 = v165 + v146[6];
  uint64_t v56 = v157;
  sub_100552A0C(v55, v157, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v57 = v54 + v53[8];
  uint64_t v58 = v160;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 16))(v160, v57, v159);
  uint64_t v59 = v150;
  sub_10120D630(v50, v51, v52, 0, 0xE000000000000000, v56, v58, 1, v150);
  uint64_t v60 = v167;
  uint64_t v61 = sub_10052D5B0(v55, v167, 0, 0, 0);
  uint64_t v63 = v61;
  uint64_t v64 = v62;
  uint64_t v65 = v166;
  switch(v66)
  {
    case 1:
      int64_t v79 = *(void *)(v61 + 16);
      uint64_t v80 = _swiftEmptyArrayStorage;
      uint64_t v160 = v62;
      uint64_t v159 = v61;
      int64_t v158 = v79;
      if (v79)
      {
        v174[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1000B7DB4(0, v79, 0);
        uint64_t v81 = v63 + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
        uint64_t v164 = *(void *)(v147 + 72);
        uint64_t v82 = (void (**)(char *, char *, uint64_t))(v163 + 16);
        int64_t v83 = v79;
        do
        {
          uint64_t v84 = v177;
          sub_100552A0C(v81, v177, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_100552A0C(v84, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          *(void *)char v45 = *(void *)v12;
          uint64_t v85 = v169;
          (*v82)(&v45[*(int *)(v172 + 20)], &v12[*(int *)(v169 + 20)], v170);
          uint64_t v86 = &v12[*(int *)(v85 + 24)];
          unint64_t v87 = *((void *)v86 + 5);
          if (v87 >> 60 == 15)
          {
            uint64_t v88 = *((void *)v86 + 2);
            unint64_t v89 = *((void *)v86 + 3);
            sub_1000361E0(v88, v89);
            sub_100552C2C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          }
          else
          {
            uint64_t v88 = *((void *)v86 + 4);
            sub_1000361E0(v88, *((void *)v86 + 5));
            sub_100552C2C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            unint64_t v89 = v87 | 0x2000000000000000;
          }
          uint64_t v90 = v171;
          uint64_t v91 = *(int *)(v172 + 24);
          *(void *)&v45[v91] = v88;
          *(void *)&v45[v91 + 8] = v89;
          sub_100551764((uint64_t)v45, v90, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
          sub_100552C2C(v177, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v80 = (void *)v174[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7DB4(0, v80[2] + 1, 1);
            uint64_t v80 = (void *)v174[0];
          }
          unint64_t v93 = v80[2];
          unint64_t v92 = v80[3];
          if (v93 >= v92 >> 1)
          {
            sub_1000B7DB4(v92 > 1, v93 + 1, 1);
            uint64_t v80 = (void *)v174[0];
          }
          v80[2] = v93 + 1;
          sub_100551764(v171, (uint64_t)v80+ ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80))+ *(void *)(v168 + 72) * v93, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
          v81 += v164;
          --v83;
        }
        while (v83);
        uint64_t v63 = v159;
        uint64_t v64 = v160;
        sub_1002F6A08(v159, v160, 1u);
        uint64_t v60 = v167;
        uint64_t v59 = v150;
        uint64_t v65 = v166;
      }
      uint64_t v98 = v151;
      sub_100552A0C((uint64_t)v59, v151, type metadata accessor for SharedBeaconRecord);
      *(void *)(v98 + *(int *)(v148 + 20)) = v80;
      uint64_t v99 = v98;
      uint64_t v100 = v98;
      uint64_t v101 = v149;
      sub_100552A0C(v100, v149, type metadata accessor for FamilyShareEnvelopeV1);
      uint64_t v102 = v142;
      sub_1004F9528(0, 2, v101, (uint64_t)v174);
      if (v102)
      {

        sub_1002F6A08(v63, v64, 1u);
        sub_100552C2C(v99, type metadata accessor for FamilyShareEnvelopeV1);
        goto LABEL_38;
      }
      LODWORD(v177) = LOBYTE(v174[0]);
      uint64_t v104 = v174[1];
      uint64_t v105 = v175;
      unint64_t v106 = v176;
      sub_10000588C(&qword_101642890);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_101342130;
      *(void *)(inited + 32) = 0x44495344746C41;
      *(void *)(inited + 40) = 0xE700000000000000;
      uint64_t v108 = v165;
      uint64_t v109 = *(void *)(v165 + 16);
      *(void *)(inited + 48) = *(void *)(v165 + 8);
      *(void *)(inited + 56) = v109;
      swift_bridgeObjectRetain();
      unint64_t v110 = sub_10092D8F8(inited);
      uint64_t v111 = type metadata accessor for Transaction();
      __chkstk_darwin(v111);
      *(&v141 - 8) = v161;
      *((unsigned char *)&v141 - 56) = v177;
      *(&v141 - 6) = v104;
      *(&v141 - 5) = v105;
      uint64_t v169 = v105;
      unint64_t v171 = v106;
      *(&v141 - 4) = v106;
      *(&v141 - 3) = v110;
      *(&v141 - 2) = v108;
      uint64_t v168 = v112;
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
      uint64_t v113 = v108 + v146[7];
      uint64_t v177 = *(void *)(v113 + 8);
      uint64_t v172 = *(void *)(v113 + 16);
      LOBYTE(v108) = *(unsigned char *)v113;
      char v114 = dispatch_group_create();
      uint64_t v115 = sub_101158790((uint64_t)&off_1015A1A68);
      uint64_t v116 = swift_allocObject();
      *(unsigned char *)(v116 + 16) = 0;
      dispatch_group_enter(v114);
      uint64_t v117 = (void *)swift_allocObject();
      v117[2] = v116;
      v117[3] = v115;
      v117[4] = v114;
      swift_retain();
      uint64_t v118 = v114;
      sub_10050FF38(v108, v177, v172, (uint64_t)sub_10054E158, (uint64_t)v117);
      swift_release();
      OS_dispatch_group.wait()();

      swift_beginAccess();
      LODWORD(v106) = *(unsigned __int8 *)(v116 + 16);
      swift_release();
      if (v106 != 1)
      {

        sub_10001CFB8(v169, v171);
        sub_1002F6A08(v159, v160, 1u);
        sub_100552C2C(v151, type metadata accessor for FamilyShareEnvelopeV1);
        int64_t v103 = v150;
        goto LABEL_39;
      }
      uint64_t v119 = v166;
      uint64_t v120 = v159;
      int64_t v121 = v158;
      if (v158)
      {
        v174[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000B7E2C(0, v158, 0);
        uint64_t v122 = v120 + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
        uint64_t v123 = *(void *)(v147 + 72);
        uint64_t v124 = (void *)v174[0];
        uint64_t v125 = v156;
        uint64_t v126 = (uint64_t)v153;
        do
        {
          int64_t v127 = v121;
          sub_100552A0C(v122, v126, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v128 = v154;
          sub_100552A0C(v126, v154, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_100721DCC(v128, v125);
          sub_100552C2C(v126, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7E2C(0, v124[2] + 1, 1);
            uint64_t v124 = (void *)v174[0];
          }
          unint64_t v130 = v124[2];
          unint64_t v129 = v124[3];
          if (v130 >= v129 >> 1)
          {
            sub_1000B7E2C(v129 > 1, v130 + 1, 1);
            uint64_t v124 = (void *)v174[0];
          }
          v124[2] = v130 + 1;
          uint64_t v125 = v156;
          sub_100551764(v156, (uint64_t)v124+ ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80))+ *(void *)(v155 + 72) * v130, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
          v122 += v123;
          int64_t v121 = v127 - 1;
        }
        while (v127 != 1);
        sub_1002F6A08(v159, v160, 1u);
        uint64_t v60 = v167;
        uint64_t v119 = v166;
      }
      else
      {
        sub_1002F6A08(v159, v160, 1u);
        uint64_t v124 = _swiftEmptyArrayStorage;
      }
      uint64_t v131 = v145;
      sub_100552A0C((uint64_t)v150, v145, type metadata accessor for SharedBeaconRecord);
      *(void *)(v131 + *(int *)(v143 + 20)) = v124;
      uint64_t v132 = v144;
      sub_100552A0C(v131, v144, type metadata accessor for LegacyShareEnvelope);
      uint64_t v133 = sub_1004F980C(0, 1, v132, (uint64_t)v174);
      unint64_t v134 = v171;
      uint64_t v135 = v169;
      uint64_t v136 = v175;
      unint64_t v137 = v176;
      __chkstk_darwin(v133);
      *(&v141 - 6) = v161;
      *((unsigned char *)&v141 - 40) = v138;
      *(&v141 - 4) = v139;
      *(&v141 - 3) = v136;
      uint64_t v140 = v165;
      *(&v141 - 2) = v137;
      *(&v141 - 1) = v140;
      static Transaction.named<A>(_:with:)();

      sub_10001CFB8(v135, v134);
      sub_100552C2C(v145, type metadata accessor for LegacyShareEnvelope);
      sub_100552C2C(v151, type metadata accessor for FamilyShareEnvelopeV1);
      sub_100552C2C((uint64_t)v150, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v60, v170);
      return sub_10001CFB8(v136, v137);
    case 2:
      sub_1002F6A08(v61, v62, 2u);
      goto LABEL_33;
    case 3:
LABEL_33:
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_101342130;
      uint64_t v95 = UUID.uuidString.getter();
      uint64_t v97 = v96;
      *(void *)(v94 + 56) = &type metadata for String;
      *(void *)(v94 + 64) = sub_10000B4CC();
      *(void *)(v94 + 32) = v95;
      *(void *)(v94 + 40) = v97;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v173 = 14;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      goto LABEL_38;
    default:
      uint64_t v67 = v61;
      uint64_t v160 = v62;
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_101342130;
      uint64_t v69 = UUID.uuidString.getter();
      uint64_t v71 = v70;
      *(void *)(v68 + 56) = &type metadata for String;
      *(void *)(v68 + 64) = sub_10000B4CC();
      *(void *)(v68 + 32) = v69;
      *(void *)(v68 + 40) = v71;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v173 = 14;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      sub_1002F6A08(v67, v160, 0);
LABEL_38:
      int64_t v103 = v59;
LABEL_39:
      sub_100552C2C((uint64_t)v103, type metadata accessor for SharedBeaconRecord);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 8))(v60, v170);
      break;
  }
  return result;
}

void sub_100512DB0(uint64_t a1)
{
  uint64_t v208 = type metadata accessor for Date();
  uint64_t v210 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v192 = (char *)&v181 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for TimeBasedKey();
  uint64_t v204 = *(void *)(v221 - 8);
  uint64_t v4 = __chkstk_darwin(v221);
  uint64_t v215 = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v220 = (unint64_t)&v181 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  long long v205 = (char *)&v181 - v9;
  __chkstk_darwin(v8);
  uint64_t v218 = (uint64_t)&v181 - v10;
  uint64_t v224 = type metadata accessor for FamilyCryptoKeysV1();
  *(void *)&long long v222 = *(void *)(v224 - 8);
  uint64_t v11 = __chkstk_darwin(v224);
  unint64_t v193 = (uint64_t *)((char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v196 = (uint64_t *)((char *)&v181 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v197 = (uint64_t *)((char *)&v181 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  v198 = (uint64_t *)((char *)&v181 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v223 = (uint64_t *)((char *)&v181 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v219 = (uint64_t)&v181 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v181 - v24;
  __chkstk_darwin(v23);
  *(void *)&long long v217 = (char *)&v181 - v26;
  uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
  uint64_t v27 = __chkstk_darwin(MyAirPodsFamilyShareEnvelope);
  uint64_t v202 = (uint64_t)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v203 = (uint64_t)&v181 - v29;
  uint64_t v213 = type metadata accessor for UUID();
  uint64_t v200 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  uint64_t v214 = (uint64_t)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v31 - 8);
  uint64_t v199 = (uint64_t)&v181 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v33 = __chkstk_darwin(v195);
  uint64_t v194 = (uint64_t)&v181 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v206 = (uint64_t)&v181 - v36;
  __chkstk_darwin(v35);
  unint64_t v207 = (_OWORD *)((char *)&v181 - v37);
  uint64_t v38 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v38 - 8);
  uint64_t v40 = (char *)&v181 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DateInterval();
  uint64_t v212 = *(void *)(v41 - 8);
  uint64_t v42 = __chkstk_darwin(v41);
  id v44 = (char *)&v181 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v42);
  int v47 = (char *)&v181 - v46;
  __chkstk_darwin(v45);
  uint64_t v211 = (char *)&v181 - v48;
  id v49 = [self defaultStore];
  if (!v49)
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }
  int v50 = v49;
  id v51 = [v49 aa_primaryAppleAccount];

  if (!v51)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v226 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  uint64_t v52 = v51;
  uint64_t v191 = v25;
  uint64_t v190 = type metadata accessor for ShareInstruction();
  uint64_t v53 = *(int *)(v190 + 24);
  uint64_t v216 = v1;
  uint64_t v54 = a1;
  uint64_t v55 = a1 + v53;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v210 + 56))(v40, 1, 1, v208);
  uint64_t v189 = v55;
  sub_100516248((uint64_t)v47, (uint64_t)v44, v55, (uint64_t)v40);
  sub_10001DAB4((uint64_t)v40, (uint64_t *)&unk_10163AC90);
  uint64_t v56 = v212;
  uint64_t v57 = v212 + 8;
  uint64_t v58 = *(void (**)(char *, uint64_t))(v212 + 8);
  v58(v44, v41);
  uint64_t v59 = (uint64_t)v211;
  (*(void (**)(void))(v56 + 32))();
  uint64_t v60 = v216;
  uint64_t v61 = sub_100516D20(v54, v59);
  if (v60)
  {
    v58((char *)v59, v41);

    return;
  }
  uint64_t v186 = v61;
  uint64_t v187 = v62;
  uint64_t v185 = 0;
  id v182 = v58;
  uint64_t v183 = v57;
  uint64_t v188 = v54;
  id v184 = v52;
  id v63 = [v52 username];
  if (!v63) {
    goto LABEL_45;
  }
  uint64_t v64 = v63;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  uint64_t v68 = v191;
  uint64_t v69 = v205;
  if (!v67)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v91 = swift_allocObject();
    *(_OWORD *)(v91 + 16) = xmmword_101342130;
    id v92 = v184;
    id v93 = [v184 username];
    if (v93)
    {
      uint64_t v94 = v93;
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v97 = v96;

      *(void *)(v91 + 56) = &type metadata for String;
      *(void *)(v91 + 64) = sub_10000B4CC();
      *(void *)(v91 + 32) = v95;
      *(void *)(v91 + 40) = v97;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v226 = 0;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      uint64_t v98 = (char *)v59;
LABEL_36:
      v182(v98, v41);
      return;
    }
    goto LABEL_46;
  }
  int v70 = v65;
  uint64_t v71 = v66;
  uint64_t v72 = v67;
  uint64_t v73 = v199;
  sub_100552A0C(v189, v199, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v74 = v214;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 16))(v214, v188 + *(int *)(v190 + 32), v213);
  unint64_t v75 = v207;
  sub_10120D630(v70, v71, v72, 0, 0xE000000000000000, v73, v74, 1, v207);
  sub_100552A0C((uint64_t)v75, v206, type metadata accessor for SharedBeaconRecord);
  int64_t v76 = *(void *)(v186 + 16);
  uint64_t v77 = _swiftEmptyArrayStorage;
  uint64_t v216 = v41;
  if (v76)
  {
    v225[0] = _swiftEmptyArrayStorage;
    uint64_t v78 = v186;
    sub_1000B7DB4(0, v76, 0);
    uint64_t v79 = v78 + ((*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80));
    uint64_t v214 = *(void *)(v204 + 72);
    uint64_t v80 = (void (**)(char *, char *, uint64_t))(v212 + 16);
    uint64_t v213 = (uint64_t)(v68 + 8);
    do
    {
      uint64_t v81 = v218;
      sub_100552A0C(v79, v218, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_100552A0C(v81, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      *(void *)uint64_t v68 = *(void *)v69;
      uint64_t v82 = v221;
      (*v80)(&v68[*(int *)(v224 + 20)], &v69[*(int *)(v221 + 20)], v41);
      int64_t v83 = &v69[*(int *)(v82 + 24)];
      unint64_t v84 = *((void *)v83 + 5);
      if (v84 >> 60 == 15)
      {
        uint64_t v85 = *((void *)v83 + 2);
        unint64_t v86 = *((void *)v83 + 3);
        sub_1000361E0(v85, v86);
        sub_100552C2C((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      }
      else
      {
        uint64_t v85 = *((void *)v83 + 4);
        sub_1000361E0(v85, *((void *)v83 + 5));
        sub_100552C2C((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v86 = v84 | 0x2000000000000000;
      }
      uint64_t v87 = *(int *)(v224 + 24);
      *(void *)&v68[v87] = v85;
      *(void *)(v213 + v87) = v86;
      sub_100551764((uint64_t)v68, v217, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      sub_100552C2C(v218, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v88 = (void *)v225[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7DB4(0, v88[2] + 1, 1);
        uint64_t v88 = (void *)v225[0];
      }
      unint64_t v90 = v88[2];
      unint64_t v89 = v88[3];
      if (v90 >= v89 >> 1)
      {
        sub_1000B7DB4(v89 > 1, v90 + 1, 1);
        uint64_t v88 = (void *)v225[0];
      }
      v88[2] = v90 + 1;
      sub_100551764(v217, (uint64_t)v88+ ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80))+ *(void *)(v222 + 72) * v90, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      v79 += v214;
      --v76;
      uint64_t v41 = v216;
    }
    while (v76);
    swift_bridgeObjectRelease();
    uint64_t v77 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v88 = _swiftEmptyArrayStorage;
  }
  int64_t v99 = *(void *)(v187 + 16);
  uint64_t v100 = v212;
  if (v99)
  {
    v225[0] = _swiftEmptyArrayStorage;
    uint64_t v101 = v187;
    sub_1000B7DB4(0, v99, 0);
    uint64_t v102 = v101 + ((*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80));
    uint64_t v103 = *(void *)(v204 + 72);
    uint64_t v104 = (void (**)(char *, char *, uint64_t))(v100 + 16);
    uint64_t v105 = v223 + 1;
    do
    {
      unint64_t v106 = v220;
      sub_100552A0C(v102, v220, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v107 = v106;
      uint64_t v108 = v215;
      sub_100552A0C(v107, (uint64_t)v215, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v109 = (char *)v223;
      *unint64_t v223 = *(void *)v108;
      uint64_t v110 = v221;
      uint64_t v111 = v41;
      uint64_t v112 = (uint64_t)v108;
      (*v104)(&v109[*(int *)(v224 + 20)], &v108[*(int *)(v221 + 20)], v111);
      uint64_t v113 = &v108[*(int *)(v110 + 24)];
      unint64_t v114 = *((void *)v113 + 5);
      if (v114 >> 60 == 15)
      {
        uint64_t v115 = *((void *)v113 + 2);
        unint64_t v116 = *((void *)v113 + 3);
        sub_1000361E0(v115, v116);
        sub_100552C2C(v112, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      }
      else
      {
        uint64_t v115 = *((void *)v113 + 4);
        sub_1000361E0(v115, *((void *)v113 + 5));
        sub_100552C2C(v112, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v116 = v114 | 0x2000000000000000;
      }
      uint64_t v117 = (uint64_t)v223;
      uint64_t v118 = *(int *)(v224 + 24);
      *(void *)((char *)v223 + v118) = v115;
      *(void *)((char *)v105 + v118) = v116;
      sub_100551764(v117, v219, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      sub_100552C2C(v220, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v77 = (void *)v225[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7DB4(0, v77[2] + 1, 1);
        uint64_t v77 = (void *)v225[0];
      }
      unint64_t v120 = v77[2];
      unint64_t v119 = v77[3];
      if (v120 >= v119 >> 1)
      {
        sub_1000B7DB4(v119 > 1, v120 + 1, 1);
        uint64_t v77 = (void *)v225[0];
      }
      void v77[2] = v120 + 1;
      sub_100551764(v219, (uint64_t)v77+ ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80))+ *(void *)(v222 + 72) * v120, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      v102 += v103;
      --v99;
      uint64_t v41 = v216;
    }
    while (v99);
  }
  swift_bridgeObjectRelease();
  uint64_t v121 = v203;
  sub_100551764(v206, v203, type metadata accessor for SharedBeaconRecord);
  uint64_t v122 = MyAirPodsFamilyShareEnvelope;
  uint64_t v123 = *(int *)(MyAirPodsFamilyShareEnvelope + 20);
  *(void *)(v121 + v123) = v88;
  uint64_t v124 = *(int *)(v122 + 24);
  *(void *)(v121 + v124) = v77;
  uint64_t v125 = v202;
  sub_100552A0C(v121, v202, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
  uint64_t v126 = v185;
  sub_1004F9AF0(0, 4, v125, (uint64_t)v225);
  uint64_t v127 = v188;
  if (v126)
  {

    sub_100552C2C(v121, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    sub_100552C2C((uint64_t)v207, type metadata accessor for SharedBeaconRecord);
    uint64_t v98 = v211;
    goto LABEL_36;
  }
  uint64_t v185 = 0;
  LODWORD(v219) = LOBYTE(v225[0]);
  uint64_t v218 = v225[1];
  unint64_t v223 = (void *)v225[2];
  uint64_t v221 = v225[3];
  sub_10000588C(&qword_101642890);
  uint64_t inited = swift_initStackObject();
  long long v217 = xmmword_101342130;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x44495344746C41;
  *(void *)(inited + 40) = 0xE700000000000000;
  uint64_t v129 = *(void *)(v127 + 16);
  *(void *)(inited + 48) = *(void *)(v127 + 8);
  *(void *)(inited + 56) = v129;
  swift_bridgeObjectRetain();
  unint64_t v220 = sub_10092D8F8(inited);
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t v215 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v130 = swift_allocObject();
  *(_OWORD *)(v130 + 16) = v217;
  sub_100552A0C(v121, v194, type metadata accessor for SharedBeaconRecord);
  uint64_t v131 = String.init<A>(describing:)();
  uint64_t v133 = v132;
  *(void *)(v130 + 56) = &type metadata for String;
  unint64_t v134 = sub_10000B4CC();
  *(void *)(v130 + 64) = v134;
  *(void *)(v130 + 32) = v131;
  *(void *)(v130 + 40) = v133;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v135 = *(void *)(v121 + v123);
  uint64_t v136 = *(void *)(v135 + 16);
  uint64_t v137 = v216;
  char v138 = v211;
  if (v136)
  {
    *(void *)&long long v217 = v134;
    uint64_t v139 = v222;
    unint64_t v140 = (*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
    uint64_t v141 = v135 + v140;
    sub_100552A0C(v135 + v140, (uint64_t)v198, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
    uint64_t v142 = v136 - 1;
    uint64_t v143 = *(void *)(v139 + 72);
    uint64_t v144 = v197;
    sub_100552A0C(v141 + v143 * v142, (uint64_t)v197, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
    uint64_t v145 = *(void *)(v121 + v124);
    uint64_t v146 = *(void *)(v145 + 16);
    if (v146)
    {
      uint64_t v147 = v145 + v140;
      sub_100552A0C(v145 + v140, (uint64_t)v196, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      sub_100552A0C(v147 + (v146 - 1) * v143, (uint64_t)v193, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      LODWORD(v213) = static os_log_type_t.default.getter();
      uint64_t v214 = qword_10170EFB0;
      uint64_t v148 = swift_allocObject();
      long long v222 = xmmword_10134BF90;
      *(_OWORD *)(v148 + 16) = xmmword_10134BF90;
      uint64_t v149 = *v198;
      *(void *)(v148 + 56) = &type metadata for UInt64;
      *(void *)(v148 + 64) = &protocol witness table for UInt64;
      *(void *)(v148 + 32) = v149;
      uint64_t v150 = *v144;
      *(void *)(v148 + 96) = &type metadata for UInt64;
      *(void *)(v148 + 104) = &protocol witness table for UInt64;
      *(void *)(v148 + 72) = v150;
      uint64_t v151 = v192;
      DateInterval.start.getter();
      uint64_t v152 = sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v153 = v208;
      uint64_t v212 = v152;
      uint64_t v154 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v156 = v155;
      uint64_t v158 = v210 + 8;
      uint64_t v157 = *(void (**)(char *, uint64_t))(v210 + 8);
      v157(v151, v153);
      uint64_t v210 = v158;
      uint64_t v159 = v217;
      *(void *)(v148 + 136) = &type metadata for String;
      *(void *)(v148 + 144) = v159;
      uint64_t v160 = v159;
      *(void *)(v148 + 112) = v154;
      *(void *)(v148 + 120) = v156;
      DateInterval.end.getter();
      uint64_t v161 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v163 = v162;
      v157(v151, v153);
      *(void *)(v148 + 176) = &type metadata for String;
      *(void *)(v148 + 184) = v160;
      *(void *)(v148 + 152) = v161;
      *(void *)(v148 + 160) = v163;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      LODWORD(v213) = static os_log_type_t.default.getter();
      uint64_t v214 = qword_10170EFB0;
      uint64_t v164 = swift_allocObject();
      *(_OWORD *)(v164 + 16) = v222;
      uint64_t v165 = *v196;
      *(void *)(v164 + 56) = &type metadata for UInt64;
      *(void *)(v164 + 32) = v165;
      uint64_t v166 = v193;
      uint64_t v167 = *v193;
      *(void *)(v164 + 96) = &type metadata for UInt64;
      *(void *)(v164 + 104) = &protocol witness table for UInt64;
      *(void *)(v164 + 64) = &protocol witness table for UInt64;
      *(void *)(v164 + 72) = v167;
      DateInterval.start.getter();
      uint64_t v168 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v170 = v169;
      v157(v151, v153);
      uint64_t v171 = v217;
      *(void *)(v164 + 136) = &type metadata for String;
      *(void *)(v164 + 144) = v171;
      *(void *)(v164 + 112) = v168;
      *(void *)(v164 + 120) = v170;
      DateInterval.end.getter();
      uint64_t v172 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v174 = v173;
      uint64_t v175 = v151;
      uint64_t v121 = v203;
      v157(v175, v153);
      uint64_t v176 = v217;
      *(void *)(v164 + 176) = &type metadata for String;
      *(void *)(v164 + 184) = v176;
      uint64_t v144 = v197;
      *(void *)(v164 + 152) = v172;
      *(void *)(v164 + 160) = v174;
      char v138 = v211;
      uint64_t v137 = v216;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100552C2C((uint64_t)v166, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      sub_100552C2C((uint64_t)v196, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
    }
    sub_100552C2C((uint64_t)v144, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
    sub_100552C2C((uint64_t)v198, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
  }
  uint64_t v177 = type metadata accessor for Transaction();
  __chkstk_darwin(v177);
  *(&v181 - 8) = v209;
  *((unsigned char *)&v181 - 56) = v219;
  uint64_t v178 = (uint64_t)v223;
  *(&v181 - 6) = v218;
  *(&v181 - 5) = v178;
  unint64_t v180 = v220;
  unint64_t v179 = v221;
  *(&v181 - 4) = v221;
  *(&v181 - 3) = v180;
  *(&v181 - 2) = v188;
  static Transaction.named<A>(_:with:)();

  sub_100552C2C(v121, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
  sub_100552C2C((uint64_t)v207, type metadata accessor for SharedBeaconRecord);
  v182(v138, v137);
  sub_10001CFB8(v178, v179);
  swift_bridgeObjectRelease();
}

void sub_100514610(uint64_t a1)
{
  uint64_t v185 = type metadata accessor for Date();
  uint64_t v187 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v171 = (char *)v163 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = type metadata accessor for TimeBasedKey();
  uint64_t v182 = *(void *)(v197 - 8);
  uint64_t v3 = __chkstk_darwin(v197);
  unint64_t v195 = (unint64_t)v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v196 = (char *)v163 - v5;
  uint64_t v200 = type metadata accessor for FamilyCryptoKeysV2();
  *(void *)&long long v198 = *(void *)(v200 - 8);
  uint64_t v6 = __chkstk_darwin(v200);
  uint64_t v174 = (void *)((char *)v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v175 = (void *)((char *)v163 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v176 = (void *)((char *)v163 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v163 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v199 = (char *)v163 - v16;
  __chkstk_darwin(v15);
  uint64_t v177 = (char *)v163 - v17;
  uint64_t MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  uint64_t v18 = __chkstk_darwin(MyAccessoryFamilyShareEnvelope);
  uint64_t v180 = (uint64_t)v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v181 = (uint64_t)v163 - v20;
  uint64_t v193 = type metadata accessor for UUID();
  *(void *)&long long v192 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v191 = (char *)v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v22 - 8);
  uint64_t v178 = (uint64_t)v163 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v24 = __chkstk_darwin(v173);
  uint64_t v172 = (uint64_t)v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v183 = (uint64_t)v163 - v27;
  __chkstk_darwin(v26);
  id v184 = (_OWORD *)((char *)v163 - v28);
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)v163 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DateInterval();
  uint64_t v190 = *(void *)(v32 - 8);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (char *)v163 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)v163 - v37;
  __chkstk_darwin(v36);
  uint64_t v188 = (char *)v163 - v39;
  id v40 = [self defaultStore];
  if (!v40)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  uint64_t v41 = v40;
  id v42 = [v40 aa_primaryAppleAccount];

  id v189 = v42;
  if (!v42)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v202 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  uint64_t v169 = v14;
  uint64_t v170 = type metadata accessor for ShareInstruction();
  uint64_t v43 = a1 + *(int *)(v170 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v187 + 56))(v31, 1, 1, v185);
  sub_100516248((uint64_t)v38, (uint64_t)v35, v43, (uint64_t)v31);
  sub_10001DAB4((uint64_t)v31, (uint64_t *)&unk_10163AC90);
  uint64_t v44 = v190;
  uint64_t v46 = v190 + 8;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v190 + 8);
  v45(v35, v32);
  uint64_t v47 = (uint64_t)v188;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v188, v38, v32);
  uint64_t v48 = v194;
  uint64_t v49 = sub_100516D20(a1, v47);
  if (v48)
  {
    v45((char *)v47, v32);

    return;
  }
  uint64_t v167 = v49;
  uint64_t v168 = v50;
  uint64_t v164 = 0;
  uint64_t v166 = (void (*)(uint64_t, uint64_t))v45;
  uint64_t v165 = a1;
  uint64_t v194 = v32;
  id v51 = [v189 username];
  if (!v51) {
    goto LABEL_40;
  }
  uint64_t v52 = v51;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v55)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_101342130;
    id v82 = v189;
    id v83 = [v189 username];
    if (v83)
    {
      unint64_t v84 = v83;
      uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v87 = v86;

      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = sub_10000B4CC();
      *(void *)(v81 + 32) = v85;
      *(void *)(v81 + 40) = v87;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v202 = 0;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      v166(v47, v194);
      return;
    }
    goto LABEL_41;
  }
  int v56 = v53;
  uint64_t v57 = v54;
  uint64_t v58 = v55;
  v163[1] = v46;
  uint64_t v59 = v178;
  sub_100552A0C(v43, v178, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v60 = (uint64_t)v191;
  (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v165 + *(int *)(v170 + 32), v193);
  uint64_t v61 = v184;
  sub_10120D630(v56, v57, v58, 0, 0xE000000000000000, v59, v60, 1, v184);
  sub_100552A0C((uint64_t)v61, v183, type metadata accessor for SharedBeaconRecord);
  uint64_t v62 = v167;
  int64_t v63 = *(void *)(v167 + 16);
  if (v63)
  {
    v201[0] = _swiftEmptyArrayStorage;
    sub_1000B7D78(0, v63, 0);
    uint64_t v64 = v62 + ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
    *(void *)&long long v192 = *(void *)(v182 + 72);
    uint64_t v191 = (char *)(v190 + 16);
    uint64_t v65 = v194;
    uint64_t v66 = (uint64_t)v177;
    uint64_t v67 = (uint64_t)v196;
    uint64_t v68 = v199;
    uint64_t v69 = v200;
    do
    {
      uint64_t v193 = v63;
      sub_100552A0C(v64, v67, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      int v70 = (char *)v195;
      sub_100552A0C(v67, v195, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      *(void *)uint64_t v68 = *(void *)v70;
      uint64_t v71 = v197;
      (*(void (**)(char *, char *, uint64_t))v191)(&v68[*(int *)(v69 + 20)], &v70[*(int *)(v197 + 20)], v65);
      uint64_t v72 = &v70[*(int *)(v71 + 24)];
      uint64_t v73 = *((void *)v72 + 2);
      unint64_t v74 = *((void *)v72 + 3);
      sub_1000361E0(v73, v74);
      sub_100552C2C((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      unint64_t v75 = (uint64_t *)&v68[*(int *)(v69 + 24)];
      uint64_t *v75 = v73;
      v75[1] = v74;
      sub_100551764((uint64_t)v68, v66, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      sub_100552C2C(v67, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      int64_t v76 = (void *)v201[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7D78(0, v76[2] + 1, 1);
        int64_t v76 = (void *)v201[0];
      }
      unint64_t v78 = v76[2];
      unint64_t v77 = v76[3];
      if (v78 >= v77 >> 1)
      {
        sub_1000B7D78(v77 > 1, v78 + 1, 1);
        int64_t v76 = (void *)v201[0];
      }
      v76[2] = v78 + 1;
      sub_100551764(v66, (uint64_t)v76+ ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80))+ *(void *)(v198 + 72) * v78, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      v64 += v192;
      int64_t v63 = v193 - 1;
      uint64_t v65 = v194;
    }
    while (v193 != 1);
    swift_bridgeObjectRelease();
    uint64_t v79 = v168;
    uint64_t v80 = v190;
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v76 = _swiftEmptyArrayStorage;
    uint64_t v65 = v194;
    uint64_t v79 = v168;
    uint64_t v80 = v190;
  }
  uint64_t v190 = (uint64_t)v76;
  int64_t v88 = *(void *)(v79 + 16);
  if (v88)
  {
    v201[0] = _swiftEmptyArrayStorage;
    uint64_t v89 = v79;
    sub_1000B7D78(0, v88, 0);
    uint64_t v90 = v89 + ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
    *(void *)&long long v192 = *(void *)(v182 + 72);
    uint64_t v191 = (char *)(v80 + 16);
    uint64_t v91 = (uint64_t)v169;
    id v92 = (char *)v195;
    uint64_t v93 = (uint64_t)v196;
    uint64_t v95 = v199;
    uint64_t v94 = v200;
    do
    {
      uint64_t v193 = v88;
      sub_100552A0C(v90, v93, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_100552A0C(v93, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      *(void *)uint64_t v95 = *(void *)v92;
      uint64_t v96 = v197;
      (*(void (**)(char *, char *, uint64_t))v191)(&v95[*(int *)(v94 + 20)], &v92[*(int *)(v197 + 20)], v194);
      uint64_t v97 = &v92[*(int *)(v96 + 24)];
      uint64_t v98 = *((void *)v97 + 2);
      unint64_t v99 = *((void *)v97 + 3);
      sub_1000361E0(v98, v99);
      sub_100552C2C((uint64_t)v92, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v100 = (uint64_t *)&v95[*(int *)(v94 + 24)];
      uint64_t *v100 = v98;
      v100[1] = v99;
      sub_100551764((uint64_t)v95, v91, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      sub_100552C2C(v93, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v101 = (void *)v201[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7D78(0, v101[2] + 1, 1);
        uint64_t v101 = (void *)v201[0];
      }
      unint64_t v103 = v101[2];
      unint64_t v102 = v101[3];
      if (v103 >= v102 >> 1)
      {
        sub_1000B7D78(v102 > 1, v103 + 1, 1);
        uint64_t v101 = (void *)v201[0];
      }
      v101[2] = v103 + 1;
      sub_100551764(v91, (uint64_t)v101+ ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80))+ *(void *)(v198 + 72) * v103, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      v90 += v192;
      int64_t v88 = v193 - 1;
    }
    while (v193 != 1);
    swift_bridgeObjectRelease();
    uint64_t v65 = v194;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v101 = _swiftEmptyArrayStorage;
  }
  uint64_t v104 = v181;
  sub_100551764(v183, v181, type metadata accessor for SharedBeaconRecord);
  uint64_t v105 = MyAccessoryFamilyShareEnvelope;
  uint64_t v106 = *(int *)(MyAccessoryFamilyShareEnvelope + 20);
  *(void *)(v104 + v106) = v190;
  uint64_t v107 = *(int *)(v105 + 24);
  *(void *)(v104 + v107) = v101;
  uint64_t v108 = v180;
  sub_100552A0C(v104, v180, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  uint64_t v109 = v164;
  sub_1004F9DD4(0, 3, v108, (uint64_t)v201);
  uint64_t v110 = v188;
  uint64_t v111 = (void (*)(char *, uint64_t))v166;
  if (v109)
  {

    sub_100552C2C(v104, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    sub_100552C2C((uint64_t)v184, type metadata accessor for SharedBeaconRecord);
    v111(v110, v65);
  }
  else
  {
    uint64_t v190 = v107;
    uint64_t v164 = 0;
    int v112 = LOBYTE(v201[0]);
    uint64_t v193 = v201[1];
    unint64_t v196 = (char *)v201[3];
    uint64_t v197 = v201[2];
    sub_10000588C(&qword_101642890);
    uint64_t inited = swift_initStackObject();
    long long v192 = xmmword_101342130;
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = 0x44495344746C41;
    *(void *)(inited + 40) = 0xE700000000000000;
    uint64_t v114 = *(void *)(v165 + 16);
    *(void *)(inited + 48) = *(void *)(v165 + 8);
    *(void *)(inited + 56) = v114;
    swift_bridgeObjectRetain();
    unint64_t v195 = sub_10092D8F8(inited);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v191 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v115 = swift_allocObject();
    *(_OWORD *)(v115 + 16) = v192;
    sub_100552A0C(v104, v172, type metadata accessor for SharedBeaconRecord);
    uint64_t v116 = String.init<A>(describing:)();
    uint64_t v118 = v117;
    *(void *)(v115 + 56) = &type metadata for String;
    *(void *)&long long v192 = sub_10000B4CC();
    *(void *)(v115 + 64) = v192;
    *(void *)(v115 + 32) = v116;
    *(void *)(v115 + 40) = v118;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v119 = *(void *)(v104 + v106);
    uint64_t v120 = *(void *)(v119 + 16);
    uint64_t v121 = v186;
    uint64_t v122 = v188;
    if (v120)
    {
      LODWORD(v183) = v112;
      uint64_t v123 = v198;
      unint64_t v124 = (*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80);
      uint64_t v125 = v119 + v124;
      sub_100552A0C(v119 + v124, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v126 = v120 - 1;
      uint64_t v127 = *(void *)(v123 + 72);
      uint64_t v128 = v175;
      sub_100552A0C(v125 + v127 * v126, (uint64_t)v175, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v129 = *(void *)(v104 + v190);
      uint64_t v130 = *(void *)(v129 + 16);
      if (v130)
      {
        uint64_t v131 = v129 + v124;
        sub_100552A0C(v129 + v124, (uint64_t)v174, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552A0C(v131 + (v130 - 1) * v127, (uint64_t)v199, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        LODWORD(v182) = static os_log_type_t.default.getter();
        uint64_t v190 = qword_10170EFB0;
        uint64_t v132 = swift_allocObject();
        long long v198 = xmmword_10134BF90;
        *(_OWORD *)(v132 + 16) = xmmword_10134BF90;
        uint64_t v133 = *v176;
        *(void *)(v132 + 56) = &type metadata for UInt64;
        *(void *)(v132 + 64) = &protocol witness table for UInt64;
        *(void *)(v132 + 32) = v133;
        uint64_t v134 = *v128;
        *(void *)(v132 + 96) = &type metadata for UInt64;
        *(void *)(v132 + 104) = &protocol witness table for UInt64;
        *(void *)(v132 + 72) = v134;
        uint64_t v135 = v171;
        DateInterval.start.getter();
        uint64_t v136 = sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v137 = v185;
        uint64_t v180 = v136;
        uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v140 = v139;
        uint64_t v142 = v187 + 8;
        uint64_t v141 = *(void (**)(char *, uint64_t))(v187 + 8);
        v141(v135, v137);
        uint64_t v187 = v142;
        uint64_t v143 = v192;
        *(void *)(v132 + 136) = &type metadata for String;
        *(void *)(v132 + 144) = v143;
        *(void *)(v132 + 112) = v138;
        *(void *)(v132 + 120) = v140;
        DateInterval.end.getter();
        uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v146 = v145;
        v141(v135, v137);
        *(void *)(v132 + 176) = &type metadata for String;
        *(void *)(v132 + 184) = v143;
        *(void *)(v132 + 152) = v144;
        *(void *)(v132 + 160) = v146;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        LODWORD(v182) = static os_log_type_t.default.getter();
        uint64_t v190 = qword_10170EFB0;
        uint64_t v147 = swift_allocObject();
        *(_OWORD *)(v147 + 16) = v198;
        uint64_t v148 = *v174;
        *(void *)(v147 + 56) = &type metadata for UInt64;
        *(void *)(v147 + 32) = v148;
        uint64_t v149 = v199;
        uint64_t v150 = *(void *)v199;
        *(void *)(v147 + 96) = &type metadata for UInt64;
        *(void *)(v147 + 104) = &protocol witness table for UInt64;
        *(void *)(v147 + 64) = &protocol witness table for UInt64;
        *(void *)(v147 + 72) = v150;
        DateInterval.start.getter();
        uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v153 = v152;
        v141(v135, v137);
        uint64_t v154 = v192;
        *(void *)(v147 + 136) = &type metadata for String;
        *(void *)(v147 + 144) = v154;
        *(void *)(v147 + 112) = v151;
        *(void *)(v147 + 120) = v153;
        DateInterval.end.getter();
        uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v157 = v156;
        uint64_t v158 = v137;
        uint64_t v128 = v175;
        v141(v135, v158);
        uint64_t v104 = v181;
        *(void *)(v147 + 176) = &type metadata for String;
        *(void *)(v147 + 184) = v154;
        uint64_t v121 = v186;
        *(void *)(v147 + 152) = v155;
        *(void *)(v147 + 160) = v157;
        uint64_t v122 = v188;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100552C2C((uint64_t)v149, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552C2C((uint64_t)v174, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      }
      sub_100552C2C((uint64_t)v128, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      sub_100552C2C((uint64_t)v176, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      LOBYTE(v112) = v183;
    }
    uint64_t v159 = type metadata accessor for Transaction();
    __chkstk_darwin(v159);
    v163[-8] = v121;
    LOBYTE(v163[-7]) = v112;
    unint64_t v161 = (unint64_t)v196;
    uint64_t v160 = v197;
    v163[-6] = v193;
    v163[-5] = v160;
    unint64_t v162 = v195;
    v163[-4] = v161;
    v163[-3] = v162;
    v163[-2] = v165;
    static Transaction.named<A>(_:with:)();

    sub_100552C2C(v104, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    sub_100552C2C((uint64_t)v184, type metadata accessor for SharedBeaconRecord);
    v166((uint64_t)v122, v194);
    sub_10001CFB8(v160, v161);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100515D6C(uint64_t (*a1)(uint64_t a1), uint64_t a2, int a3, NSURL *a4, void (*a5)(void, void, void), void (*a6)(void, void), uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v27 = a4;
  uint64_t v13 = type metadata accessor for SharingRampState();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004EAE84((uint64_t)v15);
  uint64_t v16 = sub_10000588C(&qword_101647FE8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 2, v16);
  sub_100552C2C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SharingRampState);
  if (v17 == 2) {
    uint64_t v18 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A1B88);
  }
  else {
    uint64_t v18 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton;
  }
  unint64_t v19 = sub_100654AC0(a7);
  uint64_t v20 = (unsigned __int8 *)(a8 + *(int *)(type metadata accessor for ShareInstruction() + 28));
  uint64_t v21 = *((void *)v20 + 1);
  uint64_t v22 = (void (*)(void, void, void))*((void *)v20 + 2);
  int v23 = *v20;
  Swift::Int v24 = sub_100DF2D1C((uint64_t)&off_1015A1BB0);
  swift_retain();
  sub_10053BE40(a3, v27, v28, v29, v19, v23, v21, v22, 1, 0, 1, 0, v24, v18, 0, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100515F78(uint64_t (*a1)(uint64_t a1), uint64_t a2, int a3, NSURL *a4, void (*a5)(void, void, void), void (*a6)(void, void), uint64_t a7)
{
  uint64_t v10 = (unsigned __int8 *)(a7 + *(int *)(type metadata accessor for ShareInstruction() + 28));
  uint64_t v11 = *((void *)v10 + 1);
  uint64_t v12 = (void (*)(void, void, void))*((void *)v10 + 2);
  int v13 = *v10;
  uint64_t v14 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A1BD8);
  swift_retain();
  unint64_t v15 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = sub_101158790((uint64_t)&off_1015A1C00);
  sub_10053D4AC(a3, a4, a5, a6, v15, v13, v11, v12, 0, 0, 1, 0, v16, v14, 0, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100516088(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v4, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return sub_10001DAB4((uint64_t)v4, &qword_101642760);
  }
  uint64_t v5 = *v4;
  static os_log_type_t.error.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  v11[1] = v5;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return swift_errorRelease();
}

uint64_t sub_100516248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = a4;
  uint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t v70 = a1;
  uint64_t v77 = type metadata accessor for DateInterval();
  uint64_t v69 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  unint64_t v75 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v71);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v67 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v63 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v64 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v63 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v72 = (char *)&v63 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v63 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  int64_t v76 = (char *)&v63 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v78 = (char *)&v63 - v30;
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v63 - v31;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v33 = v80;
  uint64_t v34 = sub_1010AB79C(v80);
  uint64_t v79 = v32;
  static Date.trustedNow.getter((uint64_t)v32);
  sub_1010AB814(v33);
  swift_bridgeObjectRelease();
  if (v34)
  {
    if (v34 == -1)
    {
      sub_100B6C53C((uint64_t)v9);
      uint64_t v35 = type metadata accessor for KeyAlignmentRecord();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v9, 1, v35) == 1)
      {
        sub_10001DAB4((uint64_t)v9, &qword_10163BB80);
        uint64_t v36 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v14, &v9[*(int *)(v35 + 32)], v15);
        sub_100552C2C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
        uint64_t v36 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v36, 1, v15);
      sub_100552A0C(v74, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v26, &v6[*(int *)(v71 + 32)], v15);
        sub_100552C2C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163AC90);
        uint64_t v39 = *(void (**)(void))(v16 + 32);
      }
      else
      {
        sub_100552C2C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v39 = *(void (**)(void))(v16 + 32);
        ((void (*)(char *, char *, uint64_t))v39)(v26, v14, v15);
      }
      uint64_t v38 = v78;
      v39();
      uint64_t v37 = v79;
    }
    else if (v34 < 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v78, v79, v15);
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_101342130;
      *(void *)(v40 + 56) = &type metadata for Int;
      *(void *)(v40 + 64) = &protocol witness table for Int;
      *(void *)(v40 + 32) = v34;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = v78;
      uint64_t v37 = v79;
    }
    else
    {
      uint64_t v38 = v78;
      uint64_t v37 = v79;
      Date.addingTimeInterval(_:)();
    }
  }
  else
  {
    uint64_t v38 = v78;
    uint64_t v37 = v79;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v78, v79, v15);
  }
  uint64_t v41 = v76;
  Date.addingTimeInterval(_:)();
  id v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v43 = v72;
  v42(v72, v38, v15);
  v42(v21, v41, v15);
  DateInterval.init(start:end:)();
  v42(v43, v37, v15);
  int64_t v63 = v42;
  v42(v21, v41, v15);
  DateInterval.init(start:end:)();
  LODWORD(v66) = static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t v65 = qword_10170EFB0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_101347500;
  uint64_t v45 = UUID.uuidString.getter();
  uint64_t v47 = v46;
  *(void *)(v44 + 56) = &type metadata for String;
  unint64_t v48 = sub_10000B4CC();
  *(void *)(v44 + 64) = v48;
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = v47;
  sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v44 + 96) = &type metadata for String;
  *(void *)(v44 + 104) = v48;
  *(void *)(v44 + 72) = v49;
  *(void *)(v44 + 80) = v50;
  uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v44 + 136) = &type metadata for String;
  *(void *)(v44 + 144) = v48;
  *(void *)(v44 + 112) = v51;
  *(void *)(v44 + 120) = v52;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v53 = v67;
  sub_10001D074(v68, v67, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v53, 1, v15) == 1)
  {
    uint64_t v54 = *(void (**)(char *, uint64_t))(v16 + 8);
    v54(v76, v15);
    v54(v78, v15);
    v54(v79, v15);
    sub_10001DAB4(v53, (uint64_t *)&unk_10163AC90);
    uint64_t v55 = v75;
  }
  else
  {
    int v56 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v64, v53, v15);
    uint64_t v57 = v72;
    uint64_t v55 = v75;
    DateInterval.end.getter();
    char v58 = static Date.< infix(_:_:)();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v16 + 8);
    v59(v57, v15);
    uint64_t v60 = v79;
    if (v58)
    {
      v63(v57, v56, v15);
      DateInterval.end.setter();
    }
    DateInterval.end.getter();
    char v61 = static Date.< infix(_:_:)();
    v59(v57, v15);
    if (v61)
    {
      v63(v57, v56, v15);
      DateInterval.end.setter();
    }
    v59(v56, v15);
    v59(v76, v15);
    v59(v78, v15);
    v59(v60, v15);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v69 + 32))(v70, v55, v77);
}

uint64_t sub_100516D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for ShareInstruction() + 24);
  uint64_t v4 = sub_10052D5B0(v3, a2, 0, 0, 0);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  switch(v8)
  {
    case 1:
      uint64_t v15 = sub_10052D5B0(v3, a2, 1, 0, 0);
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      switch(v19)
      {
        case 1:
          return v6;
        case 2:
          sub_1002F6A08(v15, v16, 2u);
          goto LABEL_14;
        case 3:
LABEL_14:
          sub_1002F6A08(v6, v7, 1u);
          uint64_t v6 = static os_log_type_t.default.getter();
          if (qword_101637258 == -1) {
            goto LABEL_15;
          }
          goto LABEL_17;
        default:
          sub_1002F6A08(v6, v7, 1u);
          uint64_t v6 = static os_log_type_t.default.getter();
          if (qword_101637258 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v20 = swift_allocObject();
          *(_OWORD *)(v20 + 16) = xmmword_101342130;
          type metadata accessor for OwnedBeaconRecord();
          uint64_t v21 = UUID.uuidString.getter();
          uint64_t v23 = v22;
          *(void *)(v20 + 56) = &type metadata for String;
          *(void *)(v20 + 64) = sub_10000B4CC();
          *(void *)(v20 + 32) = v21;
          *(void *)(v20 + 40) = v23;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_10054E82C();
          swift_allocError();
          swift_willThrow();
          uint64_t v13 = v17;
          uint64_t v14 = v18;
          goto LABEL_9;
      }
    case 2:
      sub_1002F6A08(v4, v5, 2u);
      goto LABEL_11;
    case 3:
LABEL_11:
      uint64_t v6 = static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
LABEL_17:
      }
        swift_once();
LABEL_15:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_101342130;
      type metadata accessor for OwnedBeaconRecord();
      uint64_t v25 = UUID.uuidString.getter();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_10000B4CC();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10054E82C();
      swift_allocError();
      swift_willThrow();
      break;
    default:
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_101342130;
      type metadata accessor for OwnedBeaconRecord();
      uint64_t v10 = UUID.uuidString.getter();
      uint64_t v12 = v11;
      *(void *)(v9 + 56) = &type metadata for String;
      *(void *)(v9 + 64) = sub_10000B4CC();
      *(void *)(v9 + 32) = v10;
      *(void *)(v9 + 40) = v12;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10054E82C();
      swift_allocError();
      swift_willThrow();
      uint64_t v13 = v6;
      uint64_t v14 = v7;
LABEL_9:
      sub_1002F6A08(v13, v14, 0);
      break;
  }
  return v6;
}

uint64_t sub_100517228(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t))
{
  unint64_t v13 = sub_100654AC0(a7);
  uint64_t v14 = (unsigned __int8 *)(a8 + *(int *)(type metadata accessor for ShareInstruction() + 28));
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v16 = *((void *)v14 + 2);
  uint64_t v17 = *(void *)(*(void *)(a2 + 416) + 16);
  uint64_t v18 = *v14;
  Swift::Int v19 = sub_100DF2D1C(a9);
  swift_retain();
  uint64_t v20 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  __int16 v23 = 0;
  char v22 = 1;
  a10(a3, a4, a5, a6, v13, v18, v15, v16, v22, v17, v23, v19, v20, 0, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10051734C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v4 = (NSURL *)type metadata accessor for DispatchWorkItemFlags();
  reserved = v4[-1]._reserved;
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  id v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v36 = *((void *)v9 - 1);
  uint64_t v10 = *(void *)(v36 + 64);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  uint64_t v12 = MyAccessoryFamilyShareResponseEnvelope - 8;
  uint64_t v13 = __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = a1 + v9[5];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v20(v17, v18, v19);
  v20(&v17[*(int *)(v12 + 28)], a1 + v9[6], v19);
  sub_100552A0C((uint64_t)v17, (uint64_t)v15, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  sub_1004F879C(2, 2, (uint64_t)v15, (uint64_t)aBlock);
  uint64_t v21 = (void (*)(void, void, void))aBlock[2];
  char v22 = (void (*)(void, void))aBlock[3];
  LODWORD(v20) = LOBYTE(aBlock[0]);
  __int16 v23 = (unsigned __int8 *)(a1 + v9[7]);
  reserved = (void *)*((void *)v23 + 1);
  uint64_t v47 = (NSURL *)aBlock[1];
  uint64_t v45 = *((void *)v23 + 2);
  LODWORD(v44) = *v23;
  uint64_t v24 = a1;
  uint64_t v25 = v37;
  sub_100552A0C(v24, v37, type metadata accessor for SharedBeaconRecord);
  unint64_t v26 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v27 = (v10 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v38;
  sub_100551764(v25, v28 + v26, type metadata accessor for SharedBeaconRecord);
  uint64_t v29 = (void *)(v28 + v27);
  uint64_t v30 = v49;
  void *v29 = v48;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  unint64_t v31 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = sub_101158790((uint64_t)&off_1015A1C78);
  uint64_t v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  sub_1004FF81C((int)v20, v47, v21, v22, v31, (int)v44, (uint64_t)reserved, v45, 0, 0, 1, 0, v32, v33, 0, (void (*)(void ***))sub_1005521B0, (void (*)(void ***))v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8((uint64_t)v21, (unint64_t)v22);
  return sub_100552C2C((uint64_t)v17, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_100517B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v19, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    char v22 = (void *)swift_allocObject();
    v22[2] = v33;
    v22[3] = a5;
    void v22[4] = v20;
    void aBlock[4] = sub_100554A10;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015CAC58;
    __int16 v23 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v24 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v24);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    return swift_release();
  }
  else
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v33;
    *(void *)(v26 + 24) = a5;
    swift_retain();
    sub_101073C68(v28, 0, (void (*)(uint64_t))sub_100554A4C, 0, (void (*)(uint64_t (*)(uint64_t)))sub_1005522B0, (void (*)(uint64_t (*)(uint64_t)))v26);
    swift_release();
    return sub_10001DAB4((uint64_t)v19, &qword_101642760);
  }
}

uint64_t sub_100518014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v43 + 64);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(v44, (uint64_t)v19, &qword_10163FFA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
    uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    char v22 = (void *)swift_allocObject();
    uint64_t v23 = v46;
    v22[2] = v45;
    v22[3] = v23;
    void v22[4] = v20;
    char v58 = sub_100554A10;
    uint64_t v59 = v22;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v55 = 1107296256;
    int v56 = sub_1004B5480;
    uint64_t v57 = &unk_1015CACD0;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v25 = v47;
    static DispatchQoS.unspecified.getter();
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v26 = v48;
    uint64_t v27 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v50);
  }
  else
  {
    sub_100551764((uint64_t)v19, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
    LODWORD(v44) = static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    sub_100552A0C((uint64_t)v16, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v29 = String.init<A>(describing:)();
    id v42 = v16;
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10000B4CC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
    uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v33 = (uint64_t)v42;
    sub_100552A0C((uint64_t)v42, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    unint64_t v34 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v46;
    *(void *)(v35 + 16) = v45;
    *(void *)(v35 + 24) = v36;
    sub_100551764((uint64_t)v14, v35 + v34, type metadata accessor for SharedBeaconRecord);
    char v58 = sub_100551EB8;
    uint64_t v59 = (void *)v35;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v55 = 1107296256;
    int v56 = sub_1004B5480;
    uint64_t v57 = &unk_1015CAD20;
    uint64_t v37 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v38 = v47;
    static DispatchQoS.unspecified.getter();
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v39 = v48;
    uint64_t v40 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v50);
    sub_100552C2C(v33, type metadata accessor for SharedBeaconRecord);
  }
  return swift_release();
}

uint64_t sub_10051885C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  v33[1] = a2;
  uint64_t v34 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v35 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v18, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v20 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = v42;
    void v21[2] = v41;
    v21[3] = v22;
    v21[4] = v19;
    void aBlock[4] = sub_10052A878;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015C8B60;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v24 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v25 = v37;
    uint64_t v26 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v38);
    return swift_release();
  }
  else
  {
    uint64_t v28 = v34;
    sub_100552A0C(v34, (uint64_t)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    unint64_t v29 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v30 = swift_allocObject();
    sub_100551764((uint64_t)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, type metadata accessor for SharedBeaconRecord);
    uint64_t v31 = (void *)(v30 + ((v15 + v29 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v32 = v42;
    *uint64_t v31 = v41;
    v31[1] = v32;
    swift_retain();
    sub_100DBAB30(v28, (uint64_t)sub_100545BD8, v30);
    swift_release();
    return sub_10001DAB4((uint64_t)v18, &qword_101642760);
  }
}

uint64_t sub_100518DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v8;
  if (a1)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v18 = v43;
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v38 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = v40;
    *(void *)(v19 + 16) = v39;
    *(void *)(v19 + 24) = v20;
    uint64_t v49 = sub_1005545EC;
    uint64_t v50 = v19;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_1004B5480;
    uint64_t v48 = &unk_1015C8C28;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v22 = (void *)v38;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
  }
  else
  {
    uint64_t v23 = v38;
    uint64_t v36 = v5;
    uint64_t v37 = v10;
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    sub_100552A0C(v23, (uint64_t)v17, type metadata accessor for SharedBeaconRecord);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v40;
    *(void *)(v29 + 16) = v39;
    *(void *)(v29 + 24) = v30;
    uint64_t v49 = sub_10041ED88;
    uint64_t v50 = v29;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_1004B5480;
    uint64_t v48 = &unk_1015C8BD8;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v32 = v37;
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v33 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v42);
  }
  return swift_release();
}

uint64_t sub_1005194BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = (NSURL *)type metadata accessor for DispatchWorkItemFlags();
  reserved = v5[-1]._reserved;
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  void v27[3] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  void v27[2] = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  v27[1] = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1 + *(int *)(v9 + 20));
  sub_1004F84B0(2, 1, (uint64_t)v14, (uint64_t)aBlock);
  uint64_t v16 = (void (*)(void, void, void))aBlock[2];
  uint64_t v17 = (void (*)(void, void))aBlock[3];
  int v18 = LOBYTE(aBlock[0]);
  uint64_t v19 = (unsigned __int8 *)(a1 + *(int *)(v9 + 28));
  reserved = (void *)*((void *)v19 + 1);
  uint64_t v30 = (NSURL *)aBlock[1];
  uint64_t v28 = *((void *)v19 + 2);
  LODWORD(v9) = *v19;
  sub_100552A0C(a1, (uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v27[0];
  sub_100551764((uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for SharedBeaconRecord);
  uint64_t v22 = (void *)(v21 + ((v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v22 = v31;
  v22[1] = a3;
  swift_retain();
  swift_retain();
  unint64_t v23 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = sub_101158790((uint64_t)&off_1015A1CA0);
  uint64_t v25 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  sub_1004FF81C(v18, v30, v16, v17, v23, v9, (uint64_t)reserved, v28, 0, 0, 1, 0, v24, v25, 0, (void (*)(void ***))sub_100551E28, (void (*)(void ***))v21);
  sub_10001CFB8((uint64_t)v16, (unint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100519C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v19, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v22 = (void *)swift_allocObject();
    v22[2] = v33;
    v22[3] = a5;
    void v22[4] = v20;
    void aBlock[4] = sub_100554A10;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015CAAC8;
    unint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v24 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v24);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    return swift_release();
  }
  else
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v33;
    *(void *)(v26 + 24) = a5;
    swift_retain();
    sub_101073C68(v28, 0, (void (*)(uint64_t))sub_10051A0D8, 0, (void (*)(uint64_t (*)(uint64_t)))sub_100551E6C, (void (*)(uint64_t (*)(uint64_t)))v26);
    swift_release();
    return sub_10001DAB4((uint64_t)v19, &qword_101642760);
  }
}

uint64_t sub_10051A0D8(uint64_t a1)
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(0);
  *(unsigned char *)(a1 + *(int *)(result + 52)) = 1;
  return result;
}

uint64_t sub_10051A10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v43 + 64);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(v44, (uint64_t)v19, &qword_10163FFA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
    uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v23 = v46;
    v22[2] = v45;
    v22[3] = v23;
    void v22[4] = v20;
    char v58 = sub_100551E8C;
    uint64_t v59 = v22;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v55 = 1107296256;
    int v56 = sub_1004B5480;
    uint64_t v57 = &unk_1015CAB40;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v25 = v47;
    static DispatchQoS.unspecified.getter();
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v26 = v48;
    uint64_t v27 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v50);
  }
  else
  {
    sub_100551764((uint64_t)v19, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
    LODWORD(v44) = static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    sub_100552A0C((uint64_t)v16, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v42 = v16;
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10000B4CC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
    uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v33 = (uint64_t)v42;
    sub_100552A0C((uint64_t)v42, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    unint64_t v34 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v46;
    *(void *)(v35 + 16) = v45;
    *(void *)(v35 + 24) = v36;
    sub_100551764((uint64_t)v14, v35 + v34, type metadata accessor for SharedBeaconRecord);
    char v58 = sub_100551EB8;
    uint64_t v59 = (void *)v35;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v55 = 1107296256;
    int v56 = sub_1004B5480;
    uint64_t v57 = &unk_1015CAB90;
    uint64_t v37 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v38 = v47;
    static DispatchQoS.unspecified.getter();
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v39 = v48;
    uint64_t v40 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v50);
    sub_100552C2C(v33, type metadata accessor for SharedBeaconRecord);
  }
  return swift_release();
}

uint64_t sub_10051A954(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100552A0C(a3, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload();
  a1(v7);
  return sub_10001DAB4((uint64_t)v7, &qword_10163FFA0);
}

uint64_t sub_10051AA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  v33[1] = a2;
  uint64_t v34 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v35 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v18, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v20 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = v42;
    void v21[2] = v41;
    v21[3] = v22;
    v21[4] = v19;
    void aBlock[4] = sub_10052A878;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015C89D0;
    uint64_t v23 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v24 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v25 = v37;
    uint64_t v26 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v38);
    return swift_release();
  }
  else
  {
    uint64_t v28 = v34;
    sub_100552A0C(v34, (uint64_t)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    unint64_t v29 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v30 = swift_allocObject();
    sub_100551764((uint64_t)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, type metadata accessor for SharedBeaconRecord);
    uint64_t v31 = (void *)(v30 + ((v15 + v29 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v32 = v42;
    *uint64_t v31 = v41;
    v31[1] = v32;
    swift_retain();
    sub_100DBAB30(v28, (uint64_t)sub_100545898, v30);
    swift_release();
    return sub_10001DAB4((uint64_t)v18, &qword_101642760);
  }
}

uint64_t sub_10051AFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v8;
  if (a1)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v18 = v43;
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v38 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = v40;
    *(void *)(v19 + 16) = v39;
    *(void *)(v19 + 24) = v20;
    uint64_t v49 = sub_1005458B0;
    uint64_t v50 = v19;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_1004B5480;
    uint64_t v48 = &unk_1015C8A98;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v22 = (void *)v38;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
  }
  else
  {
    uint64_t v23 = v38;
    uint64_t v36 = v5;
    uint64_t v37 = v10;
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    sub_100552A0C(v23, (uint64_t)v17, type metadata accessor for SharedBeaconRecord);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v40;
    *(void *)(v29 + 16) = v39;
    *(void *)(v29 + 24) = v30;
    uint64_t v49 = sub_10041ED88;
    uint64_t v50 = v29;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_1004B5480;
    uint64_t v48 = &unk_1015C8A48;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v32 = v37;
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v33 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v42);
  }
  return swift_release();
}

uint64_t sub_10051B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v52 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for ShareRecord();
  uint64_t v12 = *(void *)(v43 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v43);
  uint64_t v15 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(v52, (uint64_t)v20, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v54;
    v23[2] = v53;
    v23[3] = v24;
    void v23[4] = v21;
    void aBlock[4] = sub_10052A878;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015C8840;
    uint64_t v25 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v26 = v46;
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v27 = v48;
    uint64_t v28 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v28);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v49);
    return swift_release();
  }
  else
  {
    uint64_t v31 = v44;
    uint64_t v30 = v45;
    uint64_t v32 = *(void *)(v44 + 152);
    sub_100552A0C(v45, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    unint64_t v33 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v34 = (v13 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = (objc_class *)swift_allocObject();
    sub_100551764((uint64_t)v17, (uint64_t)v35 + v33, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    *(void *)((char *)v35 + v34) = v31;
    uint64_t v36 = (void *)((char *)v35 + ((v34 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v37 = v54;
    *uint64_t v36 = v53;
    v36[1] = v37;
    swift_retain();
    swift_retain();
    static os_log_type_t.default.getter();
    uint64_t v38 = v30;
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    sub_100552A0C(v30, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v42 = v41;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = sub_10000B4CC();
    *(void *)(v39 + 32) = v40;
    *(void *)(v39 + 40) = v42;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100B3FE20(v38, v32, (void (*)(uint64_t))sub_10052F7BC, v35);
    swift_release_n();
    return sub_10001DAB4((uint64_t)v20, &qword_101642760);
  }
}

uint64_t sub_10051BD48(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v47 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v42 = a3;
    uint64_t v43 = v12;
    uint64_t v20 = a2;
    uint64_t v44 = v10;
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101342130;
    sub_100552A0C(a2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_10000B4CC();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = v20 + *(int *)(v17 + 20);
    sub_1010E6004(v25, 0);
    sub_1010E6004(v25, 5);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    uint64_t v26 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v46;
    *(void *)(v27 + 16) = v45;
    *(void *)(v27 + 24) = v28;
    int v56 = sub_10041ED88;
    uint64_t v57 = v27;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v53 = 1107296256;
    uint64_t v54 = sub_1004B5480;
    uint64_t v55 = &unk_1015C8908;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v30 = v43;
    static DispatchQoS.unspecified.getter();
    uint64_t v51 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v31 = v47;
    uint64_t v32 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v44);
  }
  else
  {
    sub_1010E6004(a2 + *(int *)(v17 + 20), 1);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    unint64_t v33 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v46;
    *(void *)(v34 + 16) = v45;
    *(void *)(v34 + 24) = v35;
    int v56 = sub_100545770;
    uint64_t v57 = v34;
    unint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v53 = 1107296256;
    uint64_t v54 = sub_1004B5480;
    uint64_t v55 = &unk_1015C88B8;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v51 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v37 = v49;
    sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v38 = v48;
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v39 = v47;
    uint64_t v40 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v10);
  }
  return swift_release();
}

void sub_10051C484(void (*a1)())
{
  type metadata accessor for SPOwnerSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

uint64_t sub_10051C540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v59 = a7;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v63 = a3;
  uint64_t v9 = (int *)type metadata accessor for ShareRecord();
  __chkstk_darwin(v9);
  uint64_t v58 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v11 - 8);
  uint64_t v61 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DateInterval();
  uint64_t v73 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v60 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v58 - v20;
  uint64_t v22 = (unsigned __int8 *)(a1 + v9[9]);
  int v66 = *v22;
  uint64_t v23 = *((void *)v22 + 1);
  uint64_t v64 = *((void *)v22 + 2);
  uint64_t v65 = v23;
  uint64_t v69 = a2;
  uint64_t v24 = *(void *)(a2 + 416);
  uint64_t v25 = v9[5];
  uint64_t v62 = a1;
  uint64_t v76 = v24;
  char v77 = 5;
  uint64_t v75 = a1 + v25;
  uint64_t v78 = a1 + v25;
  uint64_t v26 = v74;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v74 = v26;
  uint64_t v71 = v24;
  LOBYTE(a2) = sub_1010E6390((uint64_t)v21, 5);
  uint64_t v72 = v17;
  uint64_t v70 = *(void (**)(char *, uint64_t))(v17 + 8);
  v70(v21, v16);
  if (a2)
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
    uint64_t v28 = v63;
    uint64_t v63 = v13;
    v27(v15, v28, v13);
    uint64_t v29 = v61;
    uint64_t v30 = v62;
    sub_10001D074(v62 + v9[8], v61, (uint64_t *)&unk_10163AC90);
    uint64_t v31 = (uint64_t)v15;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v29, 1, v16) == 1)
    {
      sub_10001DAB4(v29, (uint64_t *)&unk_10163AC90);
      uint64_t v32 = v70;
    }
    else
    {
      uint64_t v38 = v30;
      uint64_t v39 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v60, v29, v16);
      DateInterval.end.getter();
      char v40 = static Date.< infix(_:_:)();
      uint64_t v32 = v70;
      v70(v21, v16);
      if (v40)
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v21, v39, v16);
        uint64_t v41 = v31;
        DateInterval.end.setter();
        LODWORD(v72) = static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        uint64_t v61 = qword_10170EFB0;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_101347BA0;
        sub_100552A0C(v38, v58, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v43 = String.init<A>(describing:)();
        uint64_t v45 = v44;
        *(void *)(v42 + 56) = &type metadata for String;
        unint64_t v46 = sub_10000B4CC();
        *(void *)(v42 + 64) = v46;
        *(void *)(v42 + 32) = v43;
        *(void *)(v42 + 40) = v45;
        sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v42 + 96) = &type metadata for String;
        *(void *)(v42 + 104) = v46;
        *(void *)(v42 + 72) = v47;
        *(void *)(v42 + 80) = v48;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v32 = v70;
        v70(v60, v16);
        uint64_t v31 = v41;
      }
      else
      {
        v32(v39, v16);
      }
    }
    static Date.trustedNow.getter((uint64_t)v21);
    sub_1010E5A24(v75, (uint64_t)v21, 5);
    v32(v21, v16);
    uint64_t v49 = v74;
    sub_10051CCF4(v67, v31, v68, v50, v66, v65, v64);
    uint64_t v51 = v73;
    if (v49)
    {
      uint64_t v52 = v31;
      static os_log_type_t.error.getter();
      uint64_t v53 = v63;
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_101342130;
      uint64_t v79 = v49;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v55 = String.init<A>(describing:)();
      uint64_t v57 = v56;
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = sub_10000B4CC();
      *(void *)(v54 + 32) = v55;
      *(void *)(v54 + 40) = v57;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_1010E6004(v75, 5);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
      if (*v59) {
        return swift_errorRelease();
      }
      else {
        *uint64_t v59 = v49;
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v31, v63);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_101342130;
    uint64_t v34 = UUID.uuidString.getter();
    uint64_t v36 = v35;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_10000B4CC();
    *(void *)(v33 + 32) = v34;
    *(void *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10051CCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v115 = a3;
  uint64_t v8 = v7;
  uint64_t v118 = a6;
  int v117 = a5;
  uint64_t v12 = type metadata accessor for TimeBasedKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v105 - v17);
  uint64_t v19 = sub_10052D5B0(a1, a2, 0, 0, 0);
  uint64_t v21 = v19;
  switch(v22)
  {
    case 1:
      uint64_t v113 = a7;
      uint64_t v114 = v20;
      uint64_t v32 = type metadata accessor for OwnedBeaconRecord();
      uint64_t v33 = a1 + *(int *)(v32 + 24);
      uint64_t v111 = v32;
      uint64_t v112 = v33;
      if (sub_10111198C())
      {
        uint64_t v34 = (void *)sub_10052D5B0(a1, a2, 1, 0, 0);
        uint64_t v36 = v35;
        uint64_t v37 = v114;
        switch(v38)
        {
          case 1:
            goto LABEL_18;
          case 2:
            sub_1002F6A08(v21, v114, 1u);
            uint64_t v99 = (uint64_t)v34;
            uint64_t v37 = v36;
            unsigned __int8 v100 = 2;
            break;
          case 3:
            uint64_t v99 = v21;
            unsigned __int8 v100 = 1;
            break;
          default:
            uint64_t v39 = v36;
            sub_1002F6A08(v21, v114, 1u);
            static os_log_type_t.error.getter();
            if (qword_101637258 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v40 = swift_allocObject();
            *(_OWORD *)(v40 + 16) = xmmword_101342130;
            uint64_t v41 = UUID.uuidString.getter();
            uint64_t v43 = v42;
            *(void *)(v40 + 56) = &type metadata for String;
            *(void *)(v40 + 64) = sub_10000B4CC();
            *(void *)(v40 + 32) = v41;
            *(void *)(v40 + 40) = v43;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            sub_10054E82C();
            swift_allocError();
            swift_willThrow();
            uint64_t v28 = (uint64_t)v34;
            uint64_t v29 = v39;
            goto LABEL_5;
        }
        sub_1002F6A08(v99, v37, v100);
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v101 = swift_allocObject();
        *(_OWORD *)(v101 + 16) = xmmword_101342130;
        uint64_t v102 = UUID.uuidString.getter();
        uint64_t v104 = v103;
        *(void *)(v101 + 56) = &type metadata for String;
        *(void *)(v101 + 64) = sub_10000B4CC();
        *(void *)(v101 + 32) = v102;
        *(void *)(v101 + 40) = v104;
        goto LABEL_16;
      }
      uint64_t v34 = _swiftEmptyArrayStorage;
LABEL_18:
      char v48 = sub_10111198C();
      uint64_t v110 = v8;
      if ((v48 & 1) == 0)
      {
        uint64_t v109 = v34;
        LODWORD(v108) = static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v71 = swift_allocObject();
        *(_OWORD *)(v71 + 16) = xmmword_10134BF90;
        uint64_t v72 = *(void *)(v21 + 16);
        *(void *)(v71 + 56) = &type metadata for Int;
        *(void *)(v71 + 64) = &protocol witness table for Int;
        *(void *)(v71 + 32) = v72;
        type metadata accessor for DateInterval();
        sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v75 = v74;
        *(void *)(v71 + 96) = &type metadata for String;
        unint64_t v76 = sub_10000B4CC();
        *(void *)(v71 + 104) = v76;
        *(void *)(v71 + 72) = v73;
        *(void *)(v71 + 80) = v75;
        uint64_t v77 = UUID.uuidString.getter();
        *(void *)(v71 + 136) = &type metadata for String;
        *(void *)(v71 + 144) = v76;
        *(void *)(v71 + 112) = v77;
        *(void *)(v71 + 120) = v78;
        *(void *)(v71 + 176) = &type metadata for String;
        *(void *)(v71 + 184) = v76;
        uint64_t v50 = v113;
        *(void *)(v71 + 152) = v118;
        *(void *)(v71 + 160) = v50;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      uint64_t v49 = *(void *)(v21 + 16);
      uint64_t v50 = v113;
      if (!v49) {
        goto LABEL_28;
      }
      unint64_t v108 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v109 = v34;
      unint64_t v51 = v21 + v108;
      sub_100552A0C(v21 + v108, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v52 = v49 - 1;
      uint64_t v53 = *(void *)(v13 + 72);
      uint64_t v34 = v109;
      sub_100552A0C(v51 + v53 * v52, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v54 = v34[2];
      if (v54)
      {
        uint64_t v55 = (void *)((char *)v34 + v108);
        uint64_t v56 = (v54 - 1) * v53;
        uint64_t v57 = v34;
        uint64_t v58 = *v18;
        uint64_t v59 = *v16;
        uint64_t v60 = *(uint64_t *)((char *)v55 + v56);
        uint64_t v105 = *v55;
        uint64_t v106 = v60;
        LODWORD(v108) = static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        uint64_t v107 = qword_10170EFB0;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = xmmword_1013618C0;
        uint64_t v62 = *(void *)(v21 + 16);
        *(void *)(v61 + 56) = &type metadata for Int;
        *(void *)(v61 + 64) = &protocol witness table for Int;
        *(void *)(v61 + 32) = v62;
        *(void *)(v61 + 96) = &type metadata for UInt64;
        *(void *)(v61 + 104) = &protocol witness table for UInt64;
        *(void *)(v61 + 72) = v58;
        *(void *)(v61 + 136) = &type metadata for UInt64;
        *(void *)(v61 + 144) = &protocol witness table for UInt64;
        *(void *)(v61 + 112) = v59;
        uint64_t v63 = v57[2];
        *(void *)(v61 + 176) = &type metadata for Int;
        *(void *)(v61 + 184) = &protocol witness table for Int;
        *(void *)(v61 + 152) = v63;
        *(void *)(v61 + 216) = &type metadata for UInt64;
        *(void *)(v61 + 224) = &protocol witness table for UInt64;
        *(void *)(v61 + 192) = v105;
        *(void *)(v61 + 256) = &type metadata for UInt64;
        *(void *)(v61 + 264) = &protocol witness table for UInt64;
        *(void *)(v61 + 232) = v106;
        type metadata accessor for DateInterval();
        sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v106 = v65;
        *(void *)(v61 + 296) = &type metadata for String;
        unint64_t v66 = sub_10000B4CC();
        *(void *)(v61 + 304) = v66;
        uint64_t v67 = v106;
        *(void *)(v61 + 272) = v64;
        *(void *)(v61 + 280) = v67;
        uint64_t v68 = UUID.uuidString.getter();
        *(void *)(v61 + 336) = &type metadata for String;
        *(void *)(v61 + 344) = v66;
        *(void *)(v61 + 312) = v68;
        *(void *)(v61 + 320) = v69;
        *(void *)(v61 + 376) = &type metadata for String;
        *(void *)(v61 + 384) = v66;
        uint64_t v70 = v113;
        *(void *)(v61 + 352) = v118;
        *(void *)(v61 + 360) = v70;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100552C2C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v50 = v70;
        sub_100552C2C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
LABEL_27:
        uint64_t v34 = v109;
        goto LABEL_28;
      }
      sub_100552C2C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_100552C2C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v50 = v113;
LABEL_28:
      uint64_t v79 = v110;
      uint64_t v80 = v116;
      sub_10051F46C(v21, (uint64_t)v34, a1, v117, v118, v50);
      if (v80)
      {
        sub_1002F6A08(v21, v114, 1u);
        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        if (sub_10111198C()) {
          goto LABEL_35;
        }
        uint64_t v81 = dispatch_group_create();
        uint64_t v116 = sub_101158790((uint64_t)&off_1015A1760);
        uint64_t v82 = swift_allocObject();
        *(unsigned char *)(v82 + 16) = 0;
        id v83 = (unsigned __int8 *)(v82 + 16);
        dispatch_group_enter(v81);
        uint64_t v112 = *(void *)(v79 + 24);
        unint64_t v84 = (void *)swift_allocObject();
        uint64_t v85 = v116;
        v84[2] = v82;
        v84[3] = v85;
        v84[4] = v81;
        swift_retain();
        uint64_t v86 = v81;
        sub_10050FF38(v117, v118, v113, (uint64_t)sub_1005545F8, (uint64_t)v84);
        swift_release();
        OS_dispatch_group.wait()();

        swift_beginAccess();
        LODWORD(v81) = *v83;
        uint64_t v87 = swift_release();
        if (v81 != 1)
        {
LABEL_35:
          uint64_t v28 = v21;
          uint64_t v29 = v114;
          unsigned __int8 v30 = 1;
          return sub_1002F6A08(v28, v29, v30);
        }
        __chkstk_darwin(v87);
        *(&v105 - 2) = v115;
        int64_t v88 = sub_1011528A8((void (*)(uint64_t, uint64_t *))sub_10054F380, (uint64_t)(&v105 - 4), v21);
        sub_1002F6A08(v21, v114, 1u);
        LODWORD(v116) = static os_log_type_t.default.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = xmmword_10134BF90;
        uint64_t v90 = v88[2];
        *(void *)(v89 + 56) = &type metadata for Int;
        *(void *)(v89 + 64) = &protocol witness table for Int;
        *(void *)(v89 + 32) = v90;
        type metadata accessor for DateInterval();
        sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v93 = v92;
        *(void *)(v89 + 96) = &type metadata for String;
        unint64_t v94 = sub_10000B4CC();
        *(void *)(v89 + 104) = v94;
        *(void *)(v89 + 72) = v91;
        *(void *)(v89 + 80) = v93;
        uint64_t v95 = UUID.uuidString.getter();
        *(void *)(v89 + 136) = &type metadata for String;
        *(void *)(v89 + 144) = v94;
        *(void *)(v89 + 112) = v95;
        *(void *)(v89 + 120) = v96;
        *(void *)(v89 + 176) = &type metadata for String;
        *(void *)(v89 + 184) = v94;
        uint64_t v97 = v118;
        uint64_t v98 = v113;
        *(void *)(v89 + 152) = v118;
        *(void *)(v89 + 160) = v98;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_10051EBC4((uint64_t)v88, 5, a1, v117, v97, v98);
        return swift_bridgeObjectRelease();
      }
    case 2:
      sub_1002F6A08(v19, v20, 2u);
      goto LABEL_13;
    case 3:
LABEL_13:
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_101342130;
      type metadata accessor for OwnedBeaconRecord();
      uint64_t v45 = UUID.uuidString.getter();
      uint64_t v47 = v46;
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = sub_10000B4CC();
      *(void *)(v44 + 32) = v45;
      *(void *)(v44 + 40) = v47;
LABEL_16:
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10054E82C();
      swift_allocError();
      return swift_willThrow();
    default:
      uint64_t v23 = v20;
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_101342130;
      type metadata accessor for OwnedBeaconRecord();
      uint64_t v25 = UUID.uuidString.getter();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_10000B4CC();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10054E82C();
      swift_allocError();
      swift_willThrow();
      uint64_t v28 = v21;
      uint64_t v29 = v23;
LABEL_5:
      unsigned __int8 v30 = 0;
      return sub_1002F6A08(v28, v29, v30);
  }
}

uint64_t sub_10051DA14(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain();
  a1(v5);
  return swift_errorRelease();
}

uint64_t sub_10051DA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v33 - v14;
  uint64_t v16 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a3, a1, v16);
  uint64_t v17 = type metadata accessor for ShareRecord();
  uint64_t v18 = *(int *)(v17 + 28);
  uint64_t v36 = a2;
  uint64_t v19 = a2 + v18;
  DateInterval.start.getter();
  LOBYTE(a1) = static Date.> infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v15, v9);
  if (a1)
  {
    uint64_t v35 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v19, v9);
    DateInterval.start.setter();
    int v34 = static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    v33[1] = qword_10170EFB0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    DateInterval.start.getter();
    sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v23 = v22;
    v37(v15, v9);
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_10000B4CC();
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v35;
  }
  sub_10001D074(v36 + *(int *)(v17 + 32), (uint64_t)v8, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  DateInterval.end.getter();
  char v25 = static Date.< infix(_:_:)();
  uint64_t v26 = (uint64_t (*)(char *, uint64_t))v37;
  v37(v15, v9);
  if ((v25 & 1) == 0) {
    return v26(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v13, v9);
  DateInterval.end.setter();
  static os_log_type_t.default.getter();
  uint64_t v27 = v13;
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  DateInterval.end.getter();
  sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t (*)(char *, uint64_t))v37;
  v37(v15, v9);
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = sub_10000B4CC();
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v32(v27, v9);
}

uint64_t sub_10051DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = a2;
  uint64_t v95 = type metadata accessor for DateInterval();
  uint64_t v105 = *(void *)(v95 - 8);
  uint64_t v3 = __chkstk_darwin(v95);
  uint64_t v92 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v99 = (uint64_t)&v86 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v98 = (char *)&v86 - v8;
  __chkstk_darwin(v7);
  unsigned __int8 v100 = (char *)&v86 - v9;
  uint64_t v111 = type metadata accessor for Calendar.Component();
  uint64_t v115 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Calendar();
  uint64_t v114 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v104 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v113 = (uint64_t)&v86 - v17;
  uint64_t v109 = type metadata accessor for Date();
  uint64_t v112 = *(void **)(v109 - 8);
  uint64_t v18 = __chkstk_darwin(v109);
  uint64_t v89 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v96 = (char *)&v86 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v106 = (char *)&v86 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v107 = (char *)&v86 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v86 - v26;
  uint64_t v28 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t v97 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_101347BA0;
  uint64_t v93 = a1;
  sub_100552A0C(a1, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v90 = v28;
  uint64_t v32 = String.init<A>(describing:)();
  uint64_t v34 = v33;
  *(void *)(v31 + 56) = &type metadata for String;
  unint64_t v35 = sub_10000B4CC();
  *(void *)(v31 + 64) = v35;
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v34;
  uint64_t v36 = (unsigned __int8 *)(v108 + *(int *)(type metadata accessor for ShareRecord() + 36));
  uint64_t v38 = *((void *)v36 + 1);
  uint64_t v37 = *((void *)v36 + 2);
  int64_t v88 = v36;
  *(void *)(v31 + 96) = &type metadata for String;
  *(void *)(v31 + 104) = v35;
  unint64_t v91 = v35;
  *(void *)(v31 + 72) = v38;
  *(void *)(v31 + 80) = v37;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v27);
  static Calendar.current.getter();
  uint64_t v39 = v115;
  uint64_t v40 = v111;
  uint64_t v102 = *(void (**)(char *, void, uint64_t))(v115 + 104);
  v102(v11, enum case for Calendar.Component.day(_:), v111);
  uint64_t v41 = v113;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v103 = v11;
  uint64_t v115 = v39 + 8;
  uint64_t v101 = v42;
  v42(v11, v40);
  uint64_t v43 = v114 + 8;
  uint64_t v44 = *(void (**)(char *, uint64_t))(v114 + 8);
  v44(v13, v110);
  uint64_t v45 = v112;
  uint64_t v46 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v112[6];
  uint64_t v47 = v109;
  if (v46(v41, 1, v109) == 1)
  {
    sub_10001DAB4(v113, (uint64_t *)&unk_10163AC90);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return ((uint64_t (*)(char *, uint64_t))v45[1])(v27, v47);
  }
  uint64_t v49 = v13;
  uint64_t v114 = v43;
  unint64_t v94 = v27;
  uint64_t v87 = (void (*)(char *, uint64_t, uint64_t))v45[4];
  v87(v107, v113, v47);
  uint64_t v50 = v47;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v86 = 0;
  uint64_t v113 = v116;
  sub_1010AB7EC(v116);
  unint64_t v51 = v49;
  static Calendar.current.getter();
  uint64_t v52 = v103;
  uint64_t v53 = v111;
  v102(v103, enum case for Calendar.Component.minute(_:), v111);
  uint64_t v54 = (uint64_t)v104;
  uint64_t v55 = v94;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v101(v52, v53);
  v44(v51, v110);
  uint64_t v56 = v50;
  if (v46(v54, 1, v50) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v54, (uint64_t *)&unk_10163AC90);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v57 = (void (*)(char *, uint64_t))v112[1];
    v57(v107, v50);
    return ((uint64_t (*)(char *, uint64_t))v57)(v55, v50);
  }
  v87(v106, v54, v50);
  uint64_t v58 = v113;
  uint64_t v59 = sub_1010AB828(v113);
  uint64_t v60 = (uint64_t (*)(char *, char *, uint64_t))v112[2];
  uint64_t v61 = v96;
  uint64_t result = v60(v96, v55, v56);
  if ((unsigned __int128)(v59 * (__int128)60) >> 64 != (60 * v59) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  DateInterval.init(start:duration:)();
  uint64_t v62 = sub_1010AB83C(v58);
  swift_bridgeObjectRelease();
  uint64_t result = v60(v61, v55, v56);
  if ((unsigned __int128)(v62 * (__int128)60) >> 64 != (60 * v62) >> 63)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  DateInterval.init(start:duration:)();
  v60(v61, v107, v56);
  v60(v89, v106, v56);
  uint64_t v63 = (uint64_t)v92;
  DateInterval.init(start:end:)();
  uint64_t v64 = v99;
  sub_10051DA80(v63, v108, v99);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
  uint64_t v66 = v95;
  v105 += 8;
  v65(v63, v95);
  LODWORD(v114) = static os_log_type_t.default.getter();
  uint64_t v115 = qword_10170EFB0;
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_101347500;
  uint64_t v68 = v93;
  uint64_t v69 = UUID.uuidString.getter();
  unint64_t v70 = v91;
  *(void *)(v67 + 56) = &type metadata for String;
  *(void *)(v67 + 64) = v70;
  *(void *)(v67 + 32) = v69;
  *(void *)(v67 + 40) = v71;
  sub_10052EE80(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v67 + 96) = &type metadata for String;
  *(void *)(v67 + 104) = v70;
  *(void *)(v67 + 72) = v72;
  *(void *)(v67 + 80) = v73;
  uint64_t v74 = v88;
  uint64_t v75 = *((void *)v88 + 1);
  uint64_t v76 = *((void *)v88 + 2);
  *(void *)(v67 + 136) = &type metadata for String;
  *(void *)(v67 + 144) = v70;
  *(void *)(v67 + 112) = v75;
  *(void *)(v67 + 120) = v76;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  uint64_t v77 = (uint64_t)v100;
  swift_bridgeObjectRelease();
  uint64_t v78 = v64;
  uint64_t v79 = v86;
  sub_10051CCF4(v68, v78, v77, v80, *v74, v75, v76);
  if (v79)
  {
    static os_log_type_t.error.getter();
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_101342130;
    uint64_t v116 = v79;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v82 = String.init<A>(describing:)();
    *(void *)(v81 + 56) = &type metadata for String;
    *(void *)(v81 + 64) = v70;
    *(void *)(v81 + 32) = v82;
    *(void *)(v81 + 40) = v83;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  v65(v99, v66);
  v65((uint64_t)v98, v66);
  v65(v77, v66);
  unint64_t v84 = (void (*)(char *, uint64_t))v112[1];
  uint64_t v85 = v109;
  v84(v106, v109);
  v84(v107, v85);
  return ((uint64_t (*)(char *, uint64_t))v84)(v94, v85);
}

uint64_t sub_10051EBC4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v71 = a6;
  uint64_t v70 = a5;
  int v69 = a4;
  uint64_t v83 = a3;
  int v68 = a2;
  uint64_t v77 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v76 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  uint64_t v74 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v20 = dispatch_group_create();
  type metadata accessor for CryptoKeys();
  uint64_t v80 = Array.chunked(into:)();
  uint64_t v21 = swift_allocObject();
  uint64_t v78 = (void (*)(char *, char *, uint64_t))v21;
  *(void *)(v21 + 16) = 0;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v58 = (void *)(v21 + 16);
  if (v22)
  {
    DateInterval.end.getter();
    Date.timeIntervalSinceNow.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    unint64_t v66 = v24;
  }
  else
  {
    unint64_t v66 = 0x4105180000000000;
  }
  uint64_t v67 = *(void *)(v80 + 16);
  uint64_t v79 = v20;
  if (v67)
  {
    uint64_t v25 = v83 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
    uint64_t v65 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v26 = 0;
    uint64_t v64 = type metadata accessor for UUID();
    uint64_t v27 = *(void *)(v64 - 8);
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    uint64_t v62 = v27 + 16;
    long long v61 = xmmword_101342130;
    long long v59 = xmmword_101347500;
    uint64_t v60 = v15;
    uint64_t v82 = v25;
    while (1)
    {
      uint64_t v83 = v26;
      uint64_t v28 = *(void *)(v80 + 8 * v26 + 32);
      v63(v15, v25, v64);
      *(void *)&v15[*(int *)(v75 + 20)] = v28;
      uint64_t v29 = v73;
      sub_100552A0C((uint64_t)v15, v73, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      swift_bridgeObjectRetain_n();
      PropertyListEncoder.init()();
      if (qword_101637650 != -1) {
        swift_once();
      }
      uint64_t v30 = v77;
      uint64_t v31 = sub_100010324(v77, (uint64_t)static CodingUserInfoKey.messagingCoder);
      uint64_t v32 = (uint64_t)v76;
      (*v65)(v76, v31, v30);
      v85[3] = &type metadata for Bool;
      LOBYTE(v85[0]) = 1;
      uint64_t v33 = (void (*)(char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
      sub_10015DAA0((uint64_t)v85, v32);
      v33(v84, 0);
      sub_10000588C(&qword_101648130);
      unint64_t v34 = (*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v61;
      sub_100552A0C(v29, v35 + v34, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      v85[0] = v35;
      sub_10000588C(&qword_101648138);
      sub_10054F3D8();
      uint64_t v36 = (void (*)(void, void, void))dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      uint64_t v38 = v37;
      swift_release();
      sub_100552C2C(v29, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      if (v7) {
        break;
      }
      uint64_t v81 = 0;
      swift_bridgeObjectRelease();
      sub_1000361E0((uint64_t)v36, (unint64_t)v38);
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      ++v83;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v59;
      uint64_t v40 = *(void *)(v28 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v39 + 56) = &type metadata for Int;
      *(void *)(v39 + 64) = &protocol witness table for Int;
      *(void *)(v39 + 32) = v40;
      uint64_t v41 = UUID.uuidString.getter();
      uint64_t v43 = v42;
      *(void *)(v39 + 96) = &type metadata for String;
      unint64_t v44 = sub_10000B4CC();
      *(void *)(v39 + 72) = v41;
      *(void *)(v39 + 80) = v43;
      *(void *)(v39 + 136) = &type metadata for String;
      *(void *)(v39 + 144) = v44;
      uint64_t v45 = v70;
      *(void *)(v39 + 104) = v44;
      *(void *)(v39 + 112) = v45;
      uint64_t v46 = v71;
      *(void *)(v39 + 120) = v71;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = v79;
      dispatch_group_enter(v79);
      char v48 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A1710);
      uint64_t v49 = v47;
      uint64_t v50 = v78;
      swift_retain();
      unint64_t v51 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v52 = sub_101158790((uint64_t)&off_1015A1738);
      sub_100531BA4(v68, (NSURL *)1, v36, v38, v51, v69, v45, v46, 0, v66, 0, 0, v52, v48, 0, 0, v72, v49, v50);
      sub_10001CFB8((uint64_t)v36, (unint64_t)v38);
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v25 = v82;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = (uint64_t)v36;
      uint64_t v26 = v83;
      sub_10001CFB8(v53, (unint64_t)v38);
      uint64_t v15 = v60;
      sub_100552C2C((uint64_t)v60, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      uint64_t v7 = v81;
      if (v67 == v26) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    sub_100552C2C((uint64_t)v15, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v54 = v79;
    OS_dispatch_group.wait()();
    uint64_t v55 = v58;
    swift_beginAccess();
    if (*v55)
    {
      swift_errorRetain();
      swift_willThrow();

      return swift_release();
    }
  }
  return swift_release();
}

uint64_t sub_10051F46C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v145 = a6;
  uint64_t v144 = a5;
  int v143 = a4;
  uint64_t v158 = a3;
  uint64_t v152 = a2;
  uint64_t v154 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v140 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v141 = v7;
  uint64_t v142 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SharingRampState();
  __chkstk_darwin(v8 - 8);
  uint64_t v139 = (uint64_t)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FamilyCryptoKeysV1();
  uint64_t v161 = *(void *)(v10 - 8);
  unint64_t v162 = (char *)v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v163 = (uint64_t *)((char *)&v135 - v14);
  uint64_t v146 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  uint64_t v15 = __chkstk_darwin(v146);
  uint64_t v147 = (char *)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v148 = (char *)&v135 - v17;
  uint64_t v18 = type metadata accessor for TimeBasedKey();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (uint64_t *)((char *)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v135 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v164 = (char *)&v135 - v27;
  __chkstk_darwin(v26);
  uint64_t v167 = (char *)&v135 - v28;
  uint64_t v168 = (NSURL *)type metadata accessor for FamilyCryptoKeysV2();
  reserved = v168[-1]._reserved;
  uint64_t v29 = __chkstk_darwin(v168);
  uint64_t v31 = (char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v165 = (char *)&v135 - v33;
  __chkstk_darwin(v32);
  uint64_t v137 = (char *)&v135 - v34;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v159 = *(void *)(v35 - 8);
  uint64_t v160 = v35;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v155 = (char *)&v135 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v156 = (char *)&v135 - v38;
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  uint64_t v39 = __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  uint64_t v150 = (uint64_t)&v135 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v151 = (char *)&v135 - v41;
  uint64_t v42 = type metadata accessor for Date();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v135 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void (**)(void, void))(a1 + 16);
  uint64_t v169 = v18;
  int64_t v170 = (int64_t)v47;
  uint64_t v153 = a1;
  uint64_t v48 = v19;
  if (v47)
  {
    uint64_t v49 = v44;
    uint64_t v50 = v46;
    DateInterval.end.getter();
    Date.timeIntervalSinceNow.getter();
    unint64_t v52 = v51;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v49);
    unint64_t v138 = v52;
  }
  else
  {
    unint64_t v138 = 0x4105180000000000;
  }
  uint64_t v53 = v154;
  uint64_t v54 = v158;
  char v55 = sub_10111198C();
  uint64_t v56 = v54 + *(int *)(v53 + 20);
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 16);
  if (v55)
  {
    v57(v156, v56, v160);
    uint64_t v58 = _swiftEmptyArrayStorage;
    unint64_t v162 = v31;
    uint64_t v136 = v48;
    if (v170)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7D78(0, v170, 0);
      uint64_t v59 = v153 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      uint64_t v161 = *(void *)(v48 + 72);
      long long v61 = v168;
      uint64_t v60 = v169;
      uint64_t v62 = (uint64_t)v137;
      uint64_t v63 = (uint64_t)v167;
      uint64_t v65 = v164;
      uint64_t v64 = v165;
      do
      {
        uint64_t v163 = (void *)v59;
        sub_100552A0C(v59, v63, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100552A0C(v63, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        void *v64 = *v65;
        unint64_t v66 = (char *)v65 + *(int *)(v60 + 20);
        uint64_t v67 = v60;
        int v68 = (char *)v64 + SHIDWORD(v61->_baseURL);
        uint64_t v69 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v68, v66, v69);
        uint64_t v70 = (char *)v65 + *(int *)(v67 + 24);
        uint64_t v71 = *((void *)v70 + 2);
        unint64_t v72 = *((void *)v70 + 3);
        sub_1000361E0(v71, v72);
        sub_100552C2C((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v73 = (void *)((char *)v64 + SLODWORD(v61->_clients));
        *uint64_t v73 = v71;
        v73[1] = v72;
        sub_100551764((uint64_t)v64, v62, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552C2C(v63, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v58 = (void *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7D78(0, v58[2] + 1, 1);
          uint64_t v58 = (void *)v171[0];
        }
        unint64_t v75 = v58[2];
        unint64_t v74 = v58[3];
        uint64_t v60 = v169;
        if (v75 >= v74 >> 1)
        {
          sub_1000B7D78(v74 > 1, v75 + 1, 1);
          uint64_t v60 = v169;
          uint64_t v58 = (void *)v171[0];
        }
        v58[2] = v75 + 1;
        sub_100551764(v62, (uint64_t)v58+ ((*((unsigned __int8 *)reserved + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)reserved + 80))+ reserved[9] * v75, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        uint64_t v59 = (uint64_t)v163 + v161;
        --v170;
      }
      while (v170);
    }
    uint64_t v91 = v157;
    uint64_t v92 = v152;
    int64_t v93 = *(void *)(v152 + 16);
    unint64_t v94 = _swiftEmptyArrayStorage;
    if (v93)
    {
      uint64_t v163 = v58;
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7D78(0, v93, 0);
      uint64_t v95 = v92 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
      int64_t v170 = *(void *)(v136 + 72);
      uint64_t v96 = (uint64_t)v167;
      uint64_t v97 = v164;
      uint64_t v98 = v165;
      do
      {
        sub_100552A0C(v95, v96, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100552A0C(v96, (uint64_t)v97, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        *uint64_t v98 = *v97;
        unsigned __int8 v100 = v168;
        uint64_t v99 = v169;
        uint64_t v101 = (char *)v97 + *(int *)(v169 + 20);
        uint64_t v102 = (char *)v98 + SHIDWORD(v168->_baseURL);
        uint64_t v103 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16))(v102, v101, v103);
        uint64_t v104 = (char *)v97 + *(int *)(v99 + 24);
        uint64_t v105 = *((void *)v104 + 2);
        unint64_t v106 = *((void *)v104 + 3);
        sub_1000361E0(v105, v106);
        sub_100552C2C((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t clients_low = SLODWORD(v100->_clients);
        uint64_t v108 = (uint64_t)v162;
        uint64_t v109 = (void *)((char *)v98 + clients_low);
        *uint64_t v109 = v105;
        v109[1] = v106;
        sub_100551764((uint64_t)v98, v108, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        sub_100552C2C(v96, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v94 = (void *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7D78(0, v94[2] + 1, 1);
          unint64_t v94 = (void *)v171[0];
        }
        unint64_t v111 = v94[2];
        unint64_t v110 = v94[3];
        if (v111 >= v110 >> 1)
        {
          sub_1000B7D78(v110 > 1, v111 + 1, 1);
          unint64_t v94 = (void *)v171[0];
        }
        v94[2] = v111 + 1;
        sub_100551764(v108, (uint64_t)v94+ ((*((unsigned __int8 *)reserved + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)reserved + 80))+ reserved[9] * v111, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
        v95 += v170;
        --v93;
      }
      while (v93);
      uint64_t v91 = v157;
      uint64_t v58 = v163;
    }
    uint64_t v113 = (uint64_t)v151;
    (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v151, v156, v160);
    uint64_t v115 = MyAccessoryFamilyKeyEnvelope;
    *(void *)(v113 + *(int *)(MyAccessoryFamilyKeyEnvelope + 20)) = v58;
    *(void *)(v113 + *(int *)(v115 + 24)) = v94;
    uint64_t v116 = v150;
    sub_100552A0C(v113, v150, (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    sub_1004FA680(5, 3, v116, (uint64_t)v171);
    uint64_t v112 = v91;
    int v117 = (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope;
  }
  else
  {
    v57(v155, v56, v160);
    uint64_t v76 = _swiftEmptyArrayStorage;
    if (v170)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7DB4(0, v170, 0);
      uint64_t v77 = v153 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      uint64_t v78 = *(void *)(v48 + 72);
      do
      {
        sub_100552A0C(v77, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100552A0C((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        void *v13 = *v22;
        uint64_t v79 = v169;
        uint64_t v80 = (char *)v22 + *(int *)(v169 + 20);
        uint64_t v81 = (char *)v13 + *((int *)v162 + 5);
        uint64_t v82 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16))(v81, v80, v82);
        uint64_t v83 = (void *)((char *)v22 + *(int *)(v79 + 24));
        unint64_t v84 = v83[5];
        if (v84 >> 60 == 15)
        {
          uint64_t v85 = v83[2];
          unint64_t v86 = v83[3];
          sub_1000361E0(v85, v86);
          sub_100552C2C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        }
        else
        {
          uint64_t v85 = v83[4];
          sub_1000361E0(v85, v83[5]);
          sub_100552C2C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          unint64_t v86 = v84 | 0x2000000000000000;
        }
        uint64_t v87 = (uint64_t)v163;
        uint64_t v88 = *((int *)v162 + 6);
        *(void *)((char *)v13 + v88) = v85;
        *(void *)((char *)v13 + v88 + 8) = v86;
        sub_100551764((uint64_t)v13, v87, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
        sub_100552C2C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v76 = (void *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7DB4(0, v76[2] + 1, 1);
          uint64_t v76 = (void *)v171[0];
        }
        unint64_t v90 = v76[2];
        unint64_t v89 = v76[3];
        if (v90 >= v89 >> 1)
        {
          sub_1000B7DB4(v89 > 1, v90 + 1, 1);
          uint64_t v76 = (void *)v171[0];
        }
        v76[2] = v90 + 1;
        sub_100551764((uint64_t)v163, (uint64_t)v76+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(void *)(v161 + 72) * v90, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
        v77 += v78;
        --v170;
      }
      while (v170);
      uint64_t v112 = v157;
      uint64_t v113 = (uint64_t)v148;
      uint64_t v114 = (uint64_t)v147;
    }
    else
    {
      uint64_t v112 = v157;
      uint64_t v114 = (uint64_t)v147;
      uint64_t v113 = (uint64_t)v148;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v159 + 32))(v113, v155, v160);
    *(void *)(v113 + *(int *)(v146 + 20)) = v76;
    sub_100552A0C(v113, v114, type metadata accessor for SelfBeaconingKeyEnvelope);
    sub_1004FA964(5, 2, v114, (uint64_t)v171);
    int v117 = type metadata accessor for SelfBeaconingKeyEnvelope;
  }
  uint64_t result = sub_100552C2C(v113, v117);
  if (!v112)
  {
    LODWORD(v169) = LOBYTE(v171[0]);
    uint64_t v119 = (void (*)(void, void, void))v171[2];
    uint64_t v168 = (NSURL *)v171[1];
    int64_t v170 = v171[3];
    uint64_t v120 = v139;
    sub_1004EAE84(v139);
    uint64_t v121 = sub_10000588C(&qword_101647FE8);
    int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 48))(v120, 2, v121);
    sub_100552C2C(v120, (uint64_t (*)(void))type metadata accessor for SharingRampState);
    uint64_t v167 = 0;
    if (v122 == 2) {
      uint64_t v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A16C0);
    }
    else {
      uint64_t v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton;
    }
    Swift::Int v124 = sub_100DF2D1C((uint64_t)&off_1015A16E8);
    uint64_t v125 = v142;
    sub_100552A0C(v158, v142, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v126 = (*(unsigned __int8 *)(v140 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
    unint64_t v127 = (v141 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v128 = (void (*)(void ***))swift_allocObject();
    sub_100551764(v125, (uint64_t)v128 + v126, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v129 = (char *)v128 + v127;
    LODWORD(v125) = v143;
    char *v129 = v143;
    uint64_t v130 = v144;
    uint64_t v131 = v145;
    *((void *)v129 + 1) = v144;
    *((void *)v129 + 2) = v131;
    swift_bridgeObjectRetain();
    unint64_t v132 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v134 = v123;
    uint64_t v133 = (void (*)(void, void))v170;
    sub_1004FF81C(v169, v168, v119, (void (*)(void, void))v170, v132, v125, v130, v131, 1, v138, 0, 0, v124, v134, 0, (void (*)(void ***))sub_10054F860, v128);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_10001CFB8((uint64_t)v119, (unint64_t)v133);
  }
  return result;
}

uint64_t sub_100520510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v14, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = *v14;
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v16 + 64) = v17;
    *(void *)(v16 + 32) = a4;
    *(void *)(v16 + 40) = a5;
    uint64_t v29 = v15;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v17;
    *(void *)(v16 + 72) = v18;
    *(void *)(v16 + 80) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    v28[1] = static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000B4CC();
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    type metadata accessor for OwnedBeaconRecord();
    uint64_t v26 = UUID.uuidString.getter();
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 72) = v26;
    *(void *)(v21 + 80) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_100520868(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  *(void *)&long long v46 = type metadata accessor for DateInterval();
  uint64_t v55 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeBasedKey();
  uint64_t v10 = a1 + *(int *)(v9 + 20);
  DateInterval.end.getter();
  char v11 = DateInterval.contains(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = a1 + *(int *)(v9 + 24);
  uint64_t v14 = *(void *)v12;
  unint64_t v13 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)v12;
  unint64_t v16 = v13;
  if (v13 >> 60 == 15)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    unint64_t v16 = __DataStorage.init(length:)() | 0x4000000000000000;
    uint64_t v15 = 0x2000000000;
  }
  uint64_t v44 = v15;
  if (v11)
  {
    unint64_t v17 = *(void *)(v12 + 40);
    uint64_t v43 = *(void *)(v12 + 32);
    sub_100037A38(v43, v17);
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v17 = 0xF000000000000000;
  }
  uint64_t v18 = v46;
  (*(void (**)(char *, uint64_t, void))(v55 + 16))(v47, v10, v46);
  uint64_t v19 = *(void *)(v12 + 16);
  uint64_t v20 = *(void *)(v12 + 40);
  uint64_t v50 = v14;
  unint64_t v51 = v13;
  uint64_t v52 = v19;
  long long v46 = *(_OWORD *)(v12 + 24);
  long long v53 = v46;
  uint64_t v54 = v20;
  sub_100037A38(v14, v13);
  unint64_t v21 = v46;
  sub_1000361E0(v19, v46);
  uint64_t v22 = sub_100A8C640();
  unint64_t v24 = v23;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v25 = __DataStorage.init(length:)();
  uint64_t v48 = 0x2000000000;
  uint64_t v49 = v25;
  sub_10072AF34((int *)&v48, 0);
  int v26 = HIDWORD(v48) - v48;
  if (__OFSUB__(HIDWORD(v48), v48))
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v46 = v22;
    if (v26 == 32)
    {
      unint64_t v27 = v48 | ((unint64_t)HIDWORD(v48) << 32);
      unint64_t v45 = v16;
      uint64_t v28 = v49 | 0x4000000000000000;
      uint64_t v29 = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v41, v47, v18);
      uint64_t v30 = (int *)type metadata accessor for CryptoKeys();
      uint64_t v31 = (void *)(v29 + v30[5]);
      *uint64_t v31 = v43;
      v31[1] = v17;
      uint64_t v32 = (uint64_t *)(v29 + v30[6]);
      uint64_t *v32 = v19;
      v32[1] = v21;
      uint64_t v33 = (void *)(v29 + v30[7]);
      void *v33 = v46;
      v33[1] = v24;
      uint64_t v34 = (unint64_t *)(v29 + v30[8]);
      *uint64_t v34 = v27;
      v34[1] = v28;
      uint64_t v35 = (void *)(v29 + v30[9]);
      unint64_t v36 = v45;
      *uint64_t v35 = v44;
      v35[1] = v36;
    }
    else
    {
      uint64_t v37 = v26;
      sub_10013019C();
      uint64_t v38 = swift_allocError();
      *(void *)uint64_t v39 = 32;
      *(void *)(v39 + 8) = v37;
      *(unsigned char *)(v39 + 16) = 0;
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v18);
      sub_100037A24(v43, v17);
      sub_10001CFB8(v19, v21);
      sub_10001CFB8(v44, v16);
      sub_10001CFB8(v46, v24);
      *uint64_t v42 = v38;
    }
  }
}

uint64_t sub_100520C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v4 + 176);
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  void aBlock[4] = sub_10054FB48;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C9C68;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void sub_100520F40(uint64_t a1, void (*a2)(void **), uint64_t a3)
{
  uint64_t v150 = a3;
  uint64_t v149 = a2;
  uint64_t v148 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v145 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for DispatchQoS();
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v141 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for UUID();
  id v189 = *(NSURL **)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v139 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SharingRampState();
  __chkstk_darwin(v10 - 8);
  uint64_t v163 = (uint64_t)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for KeyRequestEnvelope();
  uint64_t v12 = __chkstk_darwin(v165);
  uint64_t v164 = (uint64_t)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v178 = (uint64_t)&v136 - v14;
  uint64_t v184 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v183 = (uint64_t)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v17 = *(void *)(v179 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = __chkstk_darwin(v179);
  uint64_t v162 = (uint64_t)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v167 = (uint64_t)&v136 - v21;
  __chkstk_darwin(v20);
  uint64_t v170 = (uint64_t)&v136 - v22;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  int v26 = (unint64_t *)((char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v169 = v3;
  unint64_t v27 = *(void **)(v3 + 176);
  *int v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  uint64_t v29 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v29 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  id v30 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v31 = [v30 aa_primaryAppleAccount];

  if (!v31)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v190 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v107 = aBlock;
    v149(aBlock);

    return;
  }
  id v140 = v31;
  id v32 = [v31 username];
  if (!v32)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  uint64_t v33 = v32;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  uint64_t v161 = v34;
  uint64_t v160 = v35;
  uint64_t v166 = v36;
  if (!v36)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v108 = swift_allocObject();
    *(_OWORD *)(v108 + 16) = xmmword_101342130;
    id v109 = v140;
    id v110 = [v140 username];
    if (v110)
    {
      unint64_t v111 = v110;
      uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v114 = v113;

      *(void *)(v108 + 56) = &type metadata for String;
      *(void *)(v108 + 64) = sub_10000B4CC();
      *(void *)(v108 + 32) = v112;
      *(void *)(v108 + 40) = v114;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v190 = 0;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v29 = (uint64_t)aBlock;
      swift_willThrow();

      goto LABEL_34;
    }
    goto LABEL_41;
  }
  uint64_t v138 = v5;
  uint64_t v37 = *(void *)(v148 + 16);
  if (v37)
  {
    uint64_t v137 = v4;
    uint64_t v187 = *(void *)(v169 + 416);
    uint64_t v38 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v39 = v148 + ((v38 + 32) & ~v38);
    uint64_t v182 = (void (**)(uint64_t, uint64_t))(v15 + 8);
    p_baseURL = &v189->_baseURL;
    uint64_t v157 = v38 | 7;
    uint64_t v158 = (v38 + 16) & ~v38;
    unint64_t v40 = (v18 + v158 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v136 = v40 + 24;
    unint64_t v156 = v40;
    unint64_t v155 = (v40 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v154 = v155 + 8;
    uint64_t v175 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    long long v176 = xmmword_101347BA0;
    unint64_t v153 = 0x80000001013FFB30;
    unint64_t v152 = 0x80000001013FFB60;
    uint64_t v42 = v170;
    uint64_t v43 = v179;
    while (1)
    {
      uint64_t v185 = v37;
      uint64_t v53 = sub_100552A0C(v39, v42, type metadata accessor for SharedBeaconRecord);
      uint64_t v54 = (unsigned __int8 *)(v42 + *(int *)(v43 + 28));
      int v55 = *v54;
      uint64_t v56 = *((void *)v54 + 2);
      uint64_t v188 = *((void *)v54 + 1);
      __chkstk_darwin(v53);
      uint64_t v186 = v57;
      swift_bridgeObjectRetain();
      uint64_t v58 = v183;
      uint64_t v59 = v184;
      OS_dispatch_queue.sync<A>(execute:)();
      id v189 = v41;
      BOOL v60 = sub_1010E6390(v58, 6);
      long long v61 = *v182;
      (*v182)(v58, v59);
      static os_log_type_t.default.getter();
      if (v60)
      {
        int v177 = v55;
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v176;
        uint64_t v63 = v186;
        uint64_t v64 = UUID.uuidString.getter();
        uint64_t v66 = v65;
        *(void *)(v62 + 56) = &type metadata for String;
        unint64_t v67 = sub_10000B4CC();
        *(void *)(v62 + 32) = v64;
        *(void *)(v62 + 40) = v66;
        *(void *)(v62 + 96) = &type metadata for String;
        *(void *)(v62 + 104) = v67;
        uint64_t v68 = v188;
        *(void *)(v62 + 64) = v67;
        *(void *)(v62 + 72) = v68;
        *(void *)(v62 + 80) = v56;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v69 = *p_baseURL;
        uint64_t v70 = v178;
        ((void (*)(uint64_t, uint64_t, uint64_t))*p_baseURL)(v178, v63, v168);
        uint64_t v71 = v70 + *(int *)(v165 + 20);
        *(unsigned char *)uint64_t v71 = v161;
        uint64_t v72 = v166;
        *(void *)(v71 + 8) = v160;
        *(void *)(v71 + 16) = v72;
        uint64_t v73 = v70;
        uint64_t v74 = v164;
        sub_100552A0C(v73, v164, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
        swift_bridgeObjectRetain();
        unint64_t v75 = v189;
        sub_1004FAC48(6, 2, v74, (uint64_t)&aBlock);
        if (v75)
        {
          uint64_t v29 = (uint64_t)v75;
          goto LABEL_33;
        }
        uint64_t v151 = v69;
        uint64_t v174 = v39;
        id v189 = 0;
        LODWORD(v173) = aBlock;
        uint64_t v172 = (NSURL *)v193;
        uint64_t v180 = v194;
        uint64_t v181 = (void (*)(void, void))v195;
        uint64_t v76 = v183;
        static Date.trustedNow.getter(v183);
        sub_1010E5A24(v63, v76, 6);
        v61(v76, v184);
        uint64_t v77 = v163;
        sub_1004EAE84(v163);
        uint64_t v78 = sub_10000588C(&qword_101647FE8);
        int v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48))(v77, 2, v78);
        sub_100552C2C(v77, (uint64_t (*)(void))type metadata accessor for SharingRampState);
        uint64_t v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton;
        if (v79 == 2) {
          uint64_t v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A1CC8);
        }
        unint64_t v171 = *(void *)(v187 + 16);
        Swift::Int v44 = sub_100DF2D1C((uint64_t)&off_1015A1CF0);
        uint64_t v42 = v170;
        uint64_t v45 = v167;
        sub_100552A0C(v170, v167, type metadata accessor for SharedBeaconRecord);
        long long v46 = (void (*)(void ***))swift_allocObject();
        sub_100551764(v45, (uint64_t)v46 + v158, type metadata accessor for SharedBeaconRecord);
        uint64_t v47 = (char *)v46 + v156;
        int v48 = v177;
        char *v47 = v177;
        uint64_t v49 = v188;
        *((void *)v47 + 1) = v188;
        *((void *)v47 + 2) = v56;
        *(void *)((char *)v46 + v155) = v169;
        swift_bridgeObjectRetain();
        swift_retain();
        unint64_t v50 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
        sub_1004FF81C(v173, v172, (void (*)(void, void, void))v180, v181, v50, v48, v49, v56, 0, v171, 0, 0, v44, v80, 0, (void (*)(void ***))sub_10054FE40, v46);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v179;
        uint64_t v51 = *(void *)(v42 + *(int *)(v179 + 44));
        uint64_t v52 = v162;
        sub_100552A0C(v42, v162, type metadata accessor for SharedBeaconRecord);
        if (v51 == -1)
        {
          uint64_t v87 = *(void *)(v52 + *(int *)(v43 + 48));
          sub_100552C2C(v52, type metadata accessor for SharedBeaconRecord);
          uint64_t v41 = v189;
          uint64_t v39 = v174;
          if (v87 == -1)
          {
            uint64_t v88 = dispatch_group_create();
            uint64_t v89 = sub_101158790((uint64_t)&off_1015A1D18);
            uint64_t v90 = swift_allocObject();
            *(unsigned char *)(v90 + 16) = 0;
            dispatch_group_enter(v88);
            uint64_t v91 = (void *)swift_allocObject();
            v91[2] = v90;
            v91[3] = v89;
            v91[4] = v88;
            swift_retain();
            uint64_t v92 = v88;
            sub_10050FF38(v177, v188, v56, (uint64_t)sub_1005545F8, (uint64_t)v91);
            uint64_t v42 = v170;
            swift_release();
            OS_dispatch_group.wait()();

            swift_beginAccess();
            int v93 = *(unsigned __int8 *)(v90 + 16);
            uint64_t v43 = v179;
            swift_release();
            if (v93 == 1)
            {
              uint64_t v94 = (uint64_t)v139;
              ((void (*)(char *, uint64_t, uint64_t))v151)(v139, v186, v168);
              sub_1004F84B0(6, 1, v94, (uint64_t)&aBlock);
              if (v41)
              {
                uint64_t v29 = (uint64_t)v41;
                sub_10001CFB8((uint64_t)v180, (unint64_t)v181);
LABEL_33:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                sub_100552C2C(v178, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
                sub_100552C2C(v170, type metadata accessor for SharedBeaconRecord);
                swift_bridgeObjectRelease();
                uint64_t v4 = v137;
                uint64_t v5 = v138;
LABEL_34:
                static os_log_type_t.error.getter();
                if (qword_101637258 == -1)
                {
LABEL_35:
                  sub_10000588C((uint64_t *)&unk_10163AD00);
                  uint64_t v124 = swift_allocObject();
                  *(_OWORD *)(v124 + 16) = xmmword_101342130;
                  unint64_t aBlock = (void **)v29;
                  swift_errorRetain();
                  sub_10000588C(&qword_101638D40);
                  uint64_t v125 = String.init<A>(describing:)();
                  uint64_t v127 = v126;
                  *(void *)(v124 + 56) = &type metadata for String;
                  *(void *)(v124 + 64) = sub_10000B4CC();
                  *(void *)(v124 + 32) = v125;
                  *(void *)(v124 + 40) = v127;
                  os_log(_:dso:log:_:_:)();
                  swift_bridgeObjectRelease();
                  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
                  uint64_t v128 = v142;
                  uint64_t v129 = v141;
                  uint64_t v130 = v143;
                  (*(void (**)(char *, void, uint64_t))(v142 + 104))(v141, enum case for DispatchQoS.QoSClass.default(_:), v143);
                  uint64_t v131 = (void *)static OS_dispatch_queue.global(qos:)();
                  (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v130);
                  unint64_t v132 = (void *)swift_allocObject();
                  uint64_t v133 = v150;
                  v132[2] = v149;
                  v132[3] = v133;
                  v132[4] = v29;
                  unint64_t v196 = sub_10052A878;
                  uint64_t v197 = v132;
                  unint64_t aBlock = _NSConcreteStackBlock;
                  uint64_t v193 = 1107296256;
                  uint64_t v194 = sub_1004B5480;
                  unint64_t v195 = &unk_1015C9CB8;
                  uint64_t v134 = _Block_copy(&aBlock);
                  swift_retain();
                  swift_errorRetain();
                  int v122 = v144;
                  static DispatchQoS.unspecified.getter();
                  uint64_t v191 = _swiftEmptyArrayStorage;
                  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_10000588C((uint64_t *)&unk_10163F350);
                  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
                  uint64_t v135 = v145;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  _Block_release(v134);

                  swift_errorRelease();
                  (*(void (**)(char *, uint64_t))(v5 + 8))(v135, v4);
                  goto LABEL_36;
                }
LABEL_39:
                swift_once();
                goto LABEL_35;
              }
              uint64_t v95 = v194;
              id v189 = (NSURL *)v193;
              uint64_t v96 = (void (*)(void, void))v195;
              LODWORD(v186) = aBlock;
              unint64_t v173 = *(void *)(v187 + 16);
              uint64_t v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_100DF2D1C((uint64_t)&off_1015A1D40);
              uint64_t v98 = v167;
              sub_100552A0C(v170, v167, type metadata accessor for SharedBeaconRecord);
              uint64_t v99 = (void (*)(void ***))swift_allocObject();
              sub_100551764(v98, (uint64_t)v99 + v158, type metadata accessor for SharedBeaconRecord);
              unsigned __int8 v100 = (char *)v99 + v156;
              int v101 = v177;
              char *v100 = v177;
              uint64_t v102 = v188;
              *((void *)v100 + 1) = v188;
              *((void *)v100 + 2) = v56;
              swift_bridgeObjectRetain();
              unint64_t v103 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
              uint64_t v104 = sub_101158790((uint64_t)&off_1015A1D68);
              uint64_t v105 = v102;
              uint64_t v39 = v174;
              sub_1004FF81C(v186, v189, (void (*)(void, void, void))v95, v96, v103, v101, v105, v56, 0, v173, 0, 0, v104, v97, 0, (void (*)(void ***))sub_1005501AC, v99);
              uint64_t v43 = v179;
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v106 = (uint64_t)v95;
              uint64_t v42 = v170;
              sub_10001CFB8(v106, (unint64_t)v96);
            }
          }
        }
        else
        {
          sub_100552C2C(v52, type metadata accessor for SharedBeaconRecord);
          uint64_t v41 = v189;
          uint64_t v39 = v174;
        }
        sub_10001CFB8((uint64_t)v180, (unint64_t)v181);
        swift_bridgeObjectRelease();
        sub_100552C2C(v178, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
      }
      else
      {
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v81 = swift_allocObject();
        *(_OWORD *)(v81 + 16) = v176;
        uint64_t v82 = UUID.uuidString.getter();
        uint64_t v84 = v83;
        *(void *)(v81 + 56) = &type metadata for String;
        unint64_t v85 = sub_10000B4CC();
        *(void *)(v81 + 32) = v82;
        *(void *)(v81 + 40) = v84;
        *(void *)(v81 + 96) = &type metadata for String;
        *(void *)(v81 + 104) = v85;
        uint64_t v86 = v188;
        *(void *)(v81 + 64) = v85;
        *(void *)(v81 + 72) = v86;
        *(void *)(v81 + 80) = v56;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v43 = v179;
        uint64_t v41 = v189;
      }
      sub_100552C2C(v42, type metadata accessor for SharedBeaconRecord);
      v39 += v175;
      uint64_t v37 = v185 - 1;
      if (v185 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v137;
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_31:
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v115 = v142;
  uint64_t v116 = v141;
  uint64_t v117 = v143;
  (*(void (**)(char *, void, uint64_t))(v142 + 104))(v141, enum case for DispatchQoS.QoSClass.default(_:), v143);
  uint64_t v118 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
  uint64_t v119 = swift_allocObject();
  uint64_t v120 = v150;
  *(void *)(v119 + 16) = v149;
  *(void *)(v119 + 24) = v120;
  unint64_t v196 = sub_10041ED88;
  uint64_t v197 = (void *)v119;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v193 = 1107296256;
  uint64_t v194 = sub_1004B5480;
  unint64_t v195 = &unk_1015C9D08;
  uint64_t v121 = _Block_copy(&aBlock);
  swift_retain();
  int v122 = v144;
  static DispatchQoS.unspecified.getter();
  uint64_t v191 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v123 = v145;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v121);

  (*(void (**)(char *, uint64_t))(v138 + 8))(v123, v4);
LABEL_36:
  (*(void (**)(char *, uint64_t))(v146 + 8))(v122, v147);
  swift_release();
}

uint64_t sub_10052280C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v16, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v16;
    v31[3] = static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101347500;
    uint64_t v19 = a2 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v23;
    *(void *)(v18 + 64) = v23;
    *(void *)(v18 + 72) = a4;
    *(void *)(v18 + 80) = a5;
    uint64_t v33 = v17;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v24 = String.init<A>(describing:)();
    *(void *)(v18 + 136) = &type metadata for String;
    *(void *)(v18 + 144) = v23;
    *(void *)(v18 + 112) = v24;
    *(void *)(v18 + 120) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1010E6004(v19, 6);
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 32))(v13, v16, v10);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_101342130;
    uint64_t v28 = UUID.uuidString.getter();
    uint64_t v30 = v29;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10000B4CC();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_100522B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v14, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = *v14;
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101347500;
    type metadata accessor for SharedBeaconRecord(0);
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v20 = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v20;
    *(void *)(v16 + 64) = v20;
    *(void *)(v16 + 72) = a4;
    *(void *)(v16 + 80) = a5;
    v28[1] = v15;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v21 = String.init<A>(describing:)();
    *(void *)(v16 + 136) = &type metadata for String;
    *(void *)(v16 + 144) = v20;
    *(void *)(v16 + 112) = v21;
    *(void *)(v16 + 120) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    uint64_t v25 = UUID.uuidString.getter();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_100522ED0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v14, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = *v14;
    swift_beginAccess();
    *(void *)(a3 + 16) = v15;
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  dispatch_group_leave(a2);
}

void sub_100523138(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(void, void), uint64_t a6, void (*a7)(void, void, void), uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v42 = a8;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v39 = a5;
  int v38 = a4;
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  uint64_t v15 = (int *)(updated - 8);
  uint64_t v16 = __chkstk_darwin(updated);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v35 - v19;
  dispatch_group_t v48 = dispatch_group_create();
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a1, v21);
  uint64_t v22 = (uint64_t *)&v20[v15[7]];
  uint64_t v36 = a2;
  uint64_t *v22 = a2;
  v22[1] = a3;
  uint64_t v23 = v42;
  *(void *)&v20[v15[8]] = v41;
  uint64_t v24 = (uint64_t *)&v20[v15[9]];
  uint64_t *v24 = v23;
  v24[1] = a9;
  uint64_t v25 = (uint64_t *)&v20[v15[10]];
  uint64_t *v25 = a10;
  v25[1] = a11;
  sub_100552A0C((uint64_t)v20, (uint64_t)v18, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, a9);
  sub_1000361E0(a10, a11);
  uint64_t v26 = v43;
  sub_1004FB210(10, 1, (uint64_t)v18, (uint64_t)v44);
  if (v26)
  {
    sub_100552C2C((uint64_t)v20, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  }
  else
  {
    uint64_t v43 = v45;
    uint64_t v41 = v46;
    uint64_t v27 = v47;
    LODWORD(v42) = v44[0];
    sub_1000361E0((uint64_t)v46, (unint64_t)v47);
    dispatch_group_t v28 = v48;
    dispatch_group_enter(v48);
    Swift::Int v29 = sub_100DF2D1C((uint64_t)&off_1015A1DB8);
    v35[1] = a3;
    swift_bridgeObjectRetain();
    uint64_t v30 = v40;
    swift_bridgeObjectRetain();
    id v31 = v28;
    unint64_t v32 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v34 = v41;
    sub_100542E54(v42, v43, v41, v27, v32, v38, v39, v30, 0, 0, 1, 0, v29, v33, 0, 0, v37, v36, a3,
      v38,
      (void (*)(void, void, void))v39,
      v30,
      v31);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8((uint64_t)v34, (unint64_t)v27);
    OS_dispatch_group.wait()();
    sub_10001CFB8((uint64_t)v34, (unint64_t)v27);

    sub_100552C2C((uint64_t)v20, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  }
}

void sub_100523464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, NSObject *a7)
{
  uint64_t v31 = a3;
  dispatch_group_t v32 = a7;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v17, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000B4CC();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_getErrorValue();
    swift_retain();
    uint64_t v22 = Error.localizedDescription.getter();
    sub_1010E156C(4, v22, v23);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    uint64_t v33 = 0xD000000000000012;
    uint64_t v34 = 0x8000000101400EB0;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = a5;
    v24._object = a6;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 32;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_getErrorValue();
    v26._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_1010DF9F0(a2, v31, v33, v34);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_101342130;
    uint64_t v28 = UUID.uuidString.getter();
    uint64_t v30 = v29;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10000B4CC();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  dispatch_group_leave(v32);
}

void sub_1005238DC()
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E7C8);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101642760);
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v4, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully forwarded separation state observation: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_100523AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v11, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170E7C8);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_1008FA0F0(a4, a5, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v24 = v12;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v24 = sub_1008FA0F0(v17, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to send observations to %s due to error: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170E7C8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134218242;
      uint64_t v23 = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      uint64_t v24 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_1008FA0F0(a4, a5, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Successfuly sent %ld observations to %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_10001DAB4((uint64_t)v11, &qword_101642760);
  }
}

uint64_t sub_100523F4C(unsigned __int8 *a1, char *a2)
{
  return sub_10071CF90(*a1, *a2);
}

Swift::Int sub_100523F58()
{
  return Hasher._finalize()();
}

uint64_t sub_100524034()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005240F8()
{
  return Hasher._finalize()();
}

unint64_t sub_1005241D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005489D4(*a1);
  *a2 = result;
  return result;
}

void sub_100524200(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E6F687069;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684107369;
      goto LABEL_3;
    case 2:
      *a1 = 1685024873;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6863746177;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 6513005;
      a1[1] = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1005242A0(void *a1@<X8>)
{
  *a1 = &off_1015A1E78;
}

uint64_t sub_1005242B0()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = *(void *)(sub_10052E7D4(v1) + 16);
  swift_bridgeObjectRelease();
  unsigned int v3 = *(unsigned __int8 *)(v0 + 376);
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  *(void *)(v4 + 56) = &type metadata for Bool;
  *(void *)(v4 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v4 + 32) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 64) = &protocol witness table for Int;
  *(void *)(v5 + 32) = v2 + v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v2 + v3;
}

uint64_t sub_100524434(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v37 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v36 = (uint64_t)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v15);
  uint64_t v17 = (unsigned __int8 *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v40 = 7;
    char v41 = 1;
    return a1(&v40);
  }
  v35[1] = a2;
  sub_100552A0C(a4, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *v17;
      uint64_t v20 = (void *)*((void *)v17 + 1);
      unint64_t v21 = *((void *)v17 + 2);
      uint64_t v22 = Strong;
    }
    else
    {
      uint64_t v28 = v38;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v38 + 32))(v14, v17, v12);
      uint64_t v22 = Strong;
      swift_retain();
      sub_100ACEADC((uint64_t)v14, (uint64_t)v9);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v10) == 1)
      {
        sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_101653D50);
        uint64_t v40 = 0;
        char v41 = 1;
        a1(&v40);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v12);
      }
      (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
      uint64_t v29 = v36;
      sub_100551764((uint64_t)v9, v36, type metadata accessor for SharedBeaconRecord);
      uint64_t v30 = (unsigned __int8 *)(v29 + *(int *)(v10 + 28));
      uint64_t v19 = *v30;
      uint64_t v20 = (void *)*((void *)v30 + 1);
      unint64_t v21 = *((void *)v30 + 2);
      swift_bridgeObjectRetain();
      sub_100552C2C(v29, type metadata accessor for SharedBeaconRecord);
    }
    uint64_t v31 = *(void *)(v22 + 24);
    sub_10000588C(&qword_101648358);
    swift_allocObject();
    swift_retain();
    uint64_t v32 = sub_1004EB69C(60.0, 30.0, v19, v20, v21, v31, 6);
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = __chkstk_darwin(v32);
      v35[-4] = v22;
      v35[-3] = a4;
      v35[-2] = v34;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v40 = v33;
      char v41 = 0;
      swift_retain();
      a1(&v40);
      swift_release();
      return swift_release_n();
    }
    else
    {
      uint64_t v40 = 0;
      char v41 = 1;
      a1(&v40);
      return swift_release();
    }
  }
  else
  {
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170DE98);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unexpected .incoming context!", v27, 2u);
      swift_slowDealloc();
    }

    swift_release();
    return sub_100552C2C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  }
}

uint64_t sub_1005249C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100552A0C(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0x8000000000000000;
  sub_10016F3E4(a3, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 448) = v12;
  swift_bridgeObjectRelease();
  sub_100552C2C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  return swift_endAccess();
}

uint64_t sub_100524AF0@<X0>(void *a1@<X8>)
{
  sub_10000588C(&qword_101645788);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  *a1 = v3;
  return result;
}

uint64_t sub_100524B78@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    __chkstk_darwin(Strong);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
    swift_release();
  }
  *a2 = v3;
  return swift_retain();
}

uint64_t sub_100524C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 448);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100724AE4(a2);
  LOBYTE(a2) = v5;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100E82FA0();
      uint64_t v7 = v11;
    }
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = type metadata accessor for BeaconSharingSessionContext();
    sub_100552C2C(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    sub_100168B0C(v4, v7);
    *uint64_t v3 = v7;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100524D94(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  uint64_t v27 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v23 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  uint64_t v24 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_100552A0C(v25, (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v5);
  unint64_t v14 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  unint64_t v15 = (v9 + *(unsigned __int8 *)(v6 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  sub_100551764((uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v14, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v16 + ((v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v28;
  void aBlock[4] = sub_100552FAC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CB040;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  unint64_t v18 = v27;
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v19 = v29;
  uint64_t v20 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v21 = (void *)v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v32);
  return swift_release();
}

uint64_t sub_1005252E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4 - 8);
  uint64_t v8 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  sub_10120DB08(*(void *)(a1 + *(int *)(v9 + 40)), *(void *)(a1 + *(int *)(v9 + 40) + 8), 1, a2, (uint64_t *)((char *)&v15 - v10));
  sub_100552A0C(a1, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  sub_100551764((uint64_t)v8, v13 + v12, type metadata accessor for SharedBeaconRecord);
  sub_100ABDED8((uint64_t)v11, 0, (uint64_t)sub_100553324, v13);
  swift_release();
  return sub_100552C2C((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100525488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = sub_10000588C(&qword_10163FFA0);
  __chkstk_darwin(v10);
  unint64_t v12 = (void *)((char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v12, &qword_10163FFA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
    sub_100552A0C(a2, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v18 = sub_10000B4CC();
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    v26[1] = v13;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v19 = String.init<A>(describing:)();
    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = v18;
    *(void *)(v14 + 72) = v19;
    *(void *)(v14 + 80) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100551764((uint64_t)v12, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101342130;
    sub_100552A0C((uint64_t)v9, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_10000B4CC();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_100552C2C((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  }
}

uint64_t sub_1005257F4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for UUID();
  v2[4] = swift_task_alloc();
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  v2[5] = v3;
  v2[6] = *(void *)(v3 + 64);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1005258E4, 0, 0);
}

uint64_t sub_1005258E4()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  type metadata accessor for WorkItemQueue.WorkItem();
  sub_100552A0C(v4, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_100551764(v1, v7 + v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v7 + ((v2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100525A54(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  v2[10] = type metadata accessor for OwnedBeaconRecord();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100525AE8, 0, 0);
}

uint64_t sub_100525AE8()
{
  uint64_t v16 = v0;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (*(unsigned char *)(v0 + 168) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100525E68;
    uint64_t v2 = *(void *)(v0 + 64);
    return sub_100526720(v2);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D788);
    sub_100552A0C(v5, v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 88);
    if (v9)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 141558275;
      *(void *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1008FA0F0(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100552C2C(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring non-me device family re-evaluation for %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100552C2C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100525E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *v3;
  *(void *)(v4 + 104) = a1;
  *(void *)(v4 + 112) = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_100525FB8, 0, 0);
  }
}

uint64_t sub_100525FB8()
{
  static os_log_type_t.default.getter();
  if (qword_101637280 != -1) {
    swift_once();
  }
  v0[15] = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v5 = sub_10000B4CC();
  v0[16] = v5;
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100526134;
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[8];
  return sub_100548A20(v8, v7);
}

uint64_t sub_100526134()
{
  uint64_t v2 = (void *)*v1;
  v2[18] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005262A8, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[19] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10052644C;
    uint64_t v4 = v2[13];
    uint64_t v5 = v2[8];
    return sub_10054C020(v5, v4);
  }
}

uint64_t sub_1005262A8()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 144);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && !*(unsigned char *)(v0 + 170))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v2 = *(void *)(v0 + 128);
    static os_log_type_t.error.getter();
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    *(void *)(v0 + 56) = v1;
    swift_errorRetain();
    uint64_t v4 = String.init<A>(describing:)();
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = v2;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10052644C;
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 64);
  return sub_10054C020(v8, v7);
}

uint64_t sub_10052644C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10052659C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10052659C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 48) = v1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && !*(unsigned char *)(v0 + 169))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 128);
    static os_log_type_t.error.getter();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    *(void *)(v0 + 16) = v2;
    swift_errorRetain();
    uint64_t v5 = String.init<A>(describing:)();
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = v3;
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100526720(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  v2[33] = type metadata accessor for OwnedBeaconRecord();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  sub_10000588C(&qword_101647FF8);
  v2[36] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CorrelationIdentifierMap();
  v2[37] = v3;
  v2[38] = *(void *)(v3 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = type metadata accessor for PeerCommunicationIdentifier();
  v2[42] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  v2[43] = v4;
  v2[44] = *(void *)(v4 - 8);
  v2[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[46] = v5;
  v2[47] = *(void *)(v5 - 8);
  v2[48] = swift_task_alloc();
  return _swift_task_switch(sub_100526948, 0, 0);
}

uint64_t sub_100526948()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 120) = 0x7365547265646E75;
  *(void *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 512))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void *, void *))(v0 + 8);
    return v1(&_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 40))
    {
      sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 392) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100526BCC;
      return v4();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100526BCC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100526CCC, 0, 0);
}

uint64_t sub_100526CCC()
{
  uint64_t v1 = *(void *)(v0 + 400);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 400);
    return _swift_task_switch(sub_100526EE8, v2, 0);
  }
  else
  {
    if (qword_101637068 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC18);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000010;
    v7[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100526EE8()
{
  *(void *)(v0 + 408) = *(void *)(*(void *)(v0 + 400) + 128);
  return _swift_task_switch(sub_100526F10, 0, 0);
}

uint64_t sub_100526F10()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100526FEC;
  uint64_t v2 = *(void *)(v0 + 408);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100526FEC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1005270E8, 0, 0);
}

uint64_t sub_1005270E8()
{
  uint64_t v1 = v0[31] + *(int *)(v0[33] + 20);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[53] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100527190;
  return sub_100E59F38(v1, 0);
}

uint64_t sub_100527190(uint64_t a1)
{
  *(void *)(*(void *)v1 + 432) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100527290, 0, 0);
}

uint64_t sub_100527290()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[54];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v21 = v0[50];
    uint64_t v22 = sub_101158244((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    v0[18] = v22;
    uint64_t v23 = (void *)swift_task_alloc();
    v0[55] = v23;
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_101653DC0);
    uint64_t v18 = sub_100062734(&qword_101648010, (uint64_t *)&unk_101653DC0);
    *uint64_t v23 = v0;
    v23[1] = sub_100527580;
    uint64_t v17 = v0[43];
    uint64_t v14 = (char *)&unk_101648008;
    uint64_t v15 = v21;
    uint64_t v16 = v24;
    return Sequence.asyncCompactMap<A>(_:)(v14, v15, v16, v17, v18);
  }
  uint64_t v4 = v0[46];
  uint64_t v3 = v0[47];
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v8 = v0[48];
    sub_100552A0C(v5, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v9 = *(void *)(v8 + *(int *)(v4 + 32));
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
      uint64_t v7 = _swiftEmptyArrayStorage;
      goto LABEL_4;
    }
    sub_10000588C(&qword_10163BC50);
    uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v12 = *(void *)(v11 + 72);
    unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t v14 = (char *)j__malloc_size(v7);
    if (!v12) {
      break;
    }
    if (&v14[-v13] == (char *)0x8000000000000000 && v12 == -1) {
      goto LABEL_20;
    }
    v7[2] = v10;
    v7[3] = 2 * ((uint64_t)&v14[-v13] / v12);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = sub_100711B04(&v26, (char *)v7 + v13, v10, v9);
    uint64_t v14 = (char *)sub_100132C20();
    if (v20 != v10) {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
LABEL_4:
    sub_100552C2C(v0[48], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100442D9C((uint64_t)v7);
    v5 += v6;
    if (!--v2)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return Sequence.asyncCompactMap<A>(_:)(v14, v15, v16, v17, v18);
}

uint64_t sub_100527580(uint64_t a1)
{
  *(void *)(*(void *)v1 + 448) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1005276A0, 0, 0);
}

uint64_t sub_1005276A0()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[43];
    uint64_t v3 = v0[44];
    uint64_t v5 = (void *)v0[42];
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v7 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v21 = v7;
    uint64_t v22 = v4;
    while (2)
    {
      uint64_t v9 = v0[45];
      uint64_t v10 = v0[42];
      sub_100552A0C(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100552A0C(v9 + *(int *)(v4 + 28), v10, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_100552C2C(v0[42], (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
          goto LABEL_4;
        case 3u:
          char v11 = *(unsigned char *)v0[42];
          uint64_t v12 = v5[1];
          uint64_t v13 = v5[2];
          goto LABEL_12;
        case 4u:
          char v11 = *(unsigned char *)v0[42];
          uint64_t v12 = v5[1];
          uint64_t v13 = v5[2];
          goto LABEL_11;
        case 5u:
          char v11 = *((unsigned char *)v5 + 16);
          uint64_t v12 = v5[3];
          uint64_t v13 = v5[4];
          swift_bridgeObjectRelease();
LABEL_11:
          swift_bridgeObjectRelease();
LABEL_12:
          sub_100552C2C(v0[45], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_100A6F880(0, v8[2] + 1, 1, v8);
          }
          unint64_t v15 = v8[2];
          unint64_t v14 = v8[3];
          if (v15 >= v14 >> 1) {
            uint64_t v8 = sub_100A6F880((void *)(v14 > 1), v15 + 1, 1, v8);
          }
          v8[2] = v15 + 1;
          uint64_t v16 = &v8[3 * v15];
          *((unsigned char *)v16 + 32) = v11;
          v16[5] = v12;
          v16[6] = v13;
          uint64_t v7 = v21;
          uint64_t v4 = v22;
          goto LABEL_5;
        case 6u:
        case 7u:
          goto LABEL_4;
        default:
          swift_bridgeObjectRelease();
LABEL_4:
          sub_100552C2C(v0[45], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
LABEL_5:
          v6 += v7;
          if (--v2) {
            continue;
          }
          swift_bridgeObjectRelease_n();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  v0[57] = sub_101158CCC((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[58] = v17;
  uint64_t v18 = sub_10000588C(&qword_101648018);
  *uint64_t v17 = v0;
  v17[1] = sub_1005279C8;
  uint64_t v19 = v0[32];
  return unsafeBlocking<A>(_:)(v0 + 19, sub_10054D3A8, v19, v18);
}

uint64_t sub_1005279C8()
{
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10052915C;
  }
  else
  {
    uint64_t v2 = sub_100527AF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100527AF8()
{
  uint64_t v1 = v0[19];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_1000B7A5C(0, v2, 0);
    uint64_t v3 = (unint64_t *)(v1 + 64);
    do
    {
      char v4 = *((unsigned char *)v3 - 32);
      uint64_t v5 = *(v3 - 3);
      uint64_t v6 = *(v3 - 2);
      uint64_t v7 = *(v3 - 1);
      unint64_t v8 = *v3;
      swift_bridgeObjectRetain();
      sub_100037A38(v7, v8);
      sub_100037A24(v7, v8);
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_1000B7A5C(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      char v11 = &_swiftEmptyArrayStorage[3 * v10];
      *((unsigned char *)v11 + 32) = v4;
      v3 += 5;
      v11[5] = v5;
      v11[6] = v6;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v0[57];
  v0[60] = sub_101158CCC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  v0[61] = sub_1009DD750(v13, v12);
  type metadata accessor for PeerTrustService();
  uint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = sub_100710A58(v14);
  v0[62] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[63] = v16;
  void *v16 = v0;
  v16[1] = sub_100527CF0;
  uint64_t v17 = v0[36];
  return sub_100E9CB44(v17, (uint64_t)v15);
}

uint64_t sub_100527CF0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100527E08, 0, 0);
}

uint64_t sub_100527E08()
{
  uint64_t v106 = v0;
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  char v4 = &qword_101637000;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v3, &qword_101647FF8);
LABEL_16:
    if (v4[13] != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EC18);
    swift_bridgeObjectRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      v105[0] = v39;
      sub_10054D3D4();
      swift_bridgeObjectRetain();
      uint64_t v40 = Set.description.getter();
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 192) = sub_1008FA0F0(v40, v42, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Using fallback logic to match %s.", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v43 = *(unint64_t **)(v0 + 480);
    uint64_t v44 = *(void *)(v0 + 456);
    if (*(void *)(v44 + 16) <= v43[2] >> 3)
    {
      v105[0] = *(void *)(v0 + 480);
      swift_bridgeObjectRetain();
      sub_10089F49C(v44);
      uint64_t v45 = (unint64_t *)v105[0];
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1008A3D94(v44, v43);
    }
    unint64_t v46 = v43[2];
    uint64_t v47 = *(void *)(v0 + 480);
    if (v46 <= *(void *)(v44 + 16) >> 3)
    {
      v105[0] = *(void *)(v0 + 456);
      sub_10089F49C(v47);
      swift_bridgeObjectRelease();
      uint64_t v102 = (unint64_t *)v105[0];
    }
    else
    {
      uint64_t v102 = sub_1008A3D94(*(void *)(v0 + 480), *(unint64_t **)(v0 + 456));
      swift_bridgeObjectRelease();
    }
    sub_100552A0C(*(void *)(v0 + 248), *(void *)(v0 + 272), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    dispatch_group_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = *(void *)(v0 + 272);
    if (v50)
    {
      uint64_t v52 = swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 141558275;
      *(void *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 184) = sub_1008FA0F0(v53, v54, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100552C2C(v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Processing beacon %{private,mask.hash}s.", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100552C2C(v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    swift_bridgeObjectRetain_n();
    int v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315138;
      sub_10054D3D4();
      swift_bridgeObjectRetain();
      uint64_t v58 = Set.description.getter();
      unint64_t v60 = v59;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168) = sub_1008FA0F0(v58, v60, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Possible KeyDrop shares %s.", v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v61 = (uint64_t)v102;
    swift_bridgeObjectRetain_n();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315138;
      sub_10054D3D4();
      swift_bridgeObjectRetain();
      uint64_t v65 = Set.description.getter();
      unint64_t v67 = v66;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 160) = sub_1008FA0F0(v65, v67, v105);
      uint64_t v61 = (uint64_t)v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "KeyDrop Shares to remove %s.", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release();
    }
    goto LABEL_36;
  }
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 456);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 320), v3, v1);
  uint64_t v7 = sub_1004E3C90(v6);
  sub_101159814((uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = CorrelationIdentifierMap.map(destinations:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    if (qword_101637068 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC18);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138543618;
      log = v15;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 208) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v17 + 12) = 2080;
      sub_10054D3D4();
      swift_bridgeObjectRetain();
      uint64_t v20 = Set.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 216) = sub_1008FA0F0(v20, v22, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v16, "Map lookup error: %{public}@ for %s.", (uint8_t *)v17, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 16))(*(void *)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 296));
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 312);
    uint64_t v27 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 296);
    uint64_t v28 = *(void *)(v0 + 304);
    if (v25)
    {
      uint64_t v101 = *(void *)(v0 + 320);
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      sub_10052EE80(&qword_101648028, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifierMap);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 200) = sub_1008FA0F0(v31, v32, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v33(v26, v29);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "map: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v33(v101, v29);
    }
    else
    {

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v34(v26, v29);
      swift_errorRelease();
      v34(v27, v29);
    }
    char v4 = &qword_101637000;
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v0 + 480);
  swift_bridgeObjectRelease();
  char v11 = sub_1004E3C90(v10);
  sub_101159814((uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = CorrelationIdentifierMap.map(destinations:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16) <= *(void *)(v12 + 16) >> 3)
  {
    v105[0] = v12;
    swift_bridgeObjectRetain();
    sub_10089F65C(v9);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1008A41F8(v9, v12);
  }
  uint64_t v13 = CorrelationIdentifierMap.map(correlationIdentifiers:)();
  uint64_t v70 = sub_1004E4044(v13);
  swift_bridgeObjectRelease();
  uint64_t v104 = sub_101158CCC(v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v12 + 16) <= *(void *)(v9 + 16) >> 3)
  {
    v105[0] = v9;
    sub_10089F65C(v12);
  }
  else
  {
    sub_1008A41F8(v12, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v71 = CorrelationIdentifierMap.map(correlationIdentifiers:)();
  uint64_t v72 = sub_1004E4044(v71);
  swift_bridgeObjectRelease();
  uint64_t v103 = sub_101158CCC(v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_101637068 != -1) {
    swift_once();
  }
  uint64_t v73 = *(void *)(v0 + 248);
  uint64_t v74 = *(void *)(v0 + 280);
  uint64_t v75 = type metadata accessor for Logger();
  sub_100010324(v75, (uint64_t)qword_10170EC18);
  sub_100552A0C(v73, v74, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.default.getter();
  BOOL v78 = os_log_type_enabled(v76, v77);
  uint64_t v79 = *(void *)(v0 + 280);
  if (v78)
  {
    uint64_t v80 = swift_slowAlloc();
    v105[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v80 = 141558275;
    *(void *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v80 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 176) = sub_1008FA0F0(v81, v82, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100552C2C(v79, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Processing beacon %{private,mask.hash}s.", (uint8_t *)v80, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100552C2C(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v45 = (unint64_t *)v104;
  swift_bridgeObjectRetain_n();
  uint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    unint64_t v85 = (uint8_t *)swift_slowAlloc();
    v105[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v85 = 136315138;
    sub_10054D3D4();
    swift_bridgeObjectRetain();
    uint64_t v86 = Set.description.getter();
    unint64_t v88 = v87;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 232) = sub_1008FA0F0(v86, v88, v105);
    uint64_t v45 = (unint64_t *)v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Possible KeyDrop shares %s.", v85, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v61 = v103;
  swift_bridgeObjectRetain_n();
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.default.getter();
  BOOL v91 = os_log_type_enabled(v89, v90);
  uint64_t v92 = *(void *)(v0 + 320);
  uint64_t v93 = *(void *)(v0 + 296);
  uint64_t v94 = *(void *)(v0 + 304);
  if (v91)
  {
    uint64_t v100 = *(void *)(v0 + 320);
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    v105[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v95 = 136315138;
    sub_10054D3D4();
    swift_bridgeObjectRetain();
    uint64_t v96 = Set.description.getter();
    unint64_t v98 = v97;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 224) = sub_1008FA0F0(v96, v98, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v45 = (unint64_t *)v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "KeyDrop Shares to remove %s.", v95, 0xCu);
    swift_arrayDestroy();
    uint64_t v61 = v103;
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v100, v93);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
  }
LABEL_36:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v68 = *(uint64_t (**)(unint64_t *, uint64_t))(v0 + 8);
  return v68(v45, v61);
}

uint64_t sub_10052915C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10052922C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  v3[7] = *(void *)(v6 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1005292FC, a3, 0);
}

uint64_t sub_1005292FC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_1005293EC, 0, 0);
}

uint64_t sub_1005293EC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_10054D2F8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  *uint64_t v4 = v0;
  v4[1] = sub_10027027C;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1005545F4, v3, v5);
}

Swift::Int sub_100529500(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ShareRecord() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B7373C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_10052A894(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1005295A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_1005295CC, 0, 0);
}

uint64_t sub_1005295CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100529668;
  uint64_t v2 = *(void *)(v0 + 40);
  return sub_10127A7C8(v2);
}

uint64_t sub_100529668(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100529808;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_100529790;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100529790()
{
  (*(void (**)(void, void))(v0 + 16))(*(void *)(v0 + 64), 0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100529808()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[2];
  swift_errorRetain();
  v2(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void *sub_100529898()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v4) {
    return _swiftEmptyArrayStorage;
  }
  Swift::Int result = [*(id *)(v0 + 64) devices];
  if (result)
  {
    uint64_t v3 = result;
    sub_10001D4B0(0, &qword_101647428);
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (void *)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005299B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v10;
  *(unsigned char *)(v8 + 64) = a7;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  return _swift_task_switch(sub_1005299E4, 0, 0);
}

uint64_t sub_1005299E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100529A84;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 64);
  return sub_101278E8C(v4, v2, v3);
}

uint64_t sub_100529A84(char a1)
{
  *(unsigned char *)(*(void *)v1 + 65) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100529B84, 0, 0);
}

uint64_t sub_100529B84()
{
  (*(void (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 65));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100529BEC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a3;
  *(void *)(v4 + 256) = a4;
  *(void *)(v4 + 240) = a2;
  *(unsigned char *)(v4 + 264) = a1;
  return _swift_task_switch(sub_100529C14, 0, 0);
}

uint64_t sub_100529C14()
{
  unint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 240);
  int v3 = *(unsigned __int8 *)(v0 + 264);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x546567617373656DLL;
  *(void *)(inited + 40) = 0xEB00000000657079;
  *(void *)(inited + 72) = &type metadata for Int32;
  *(void *)(inited + 80) = sub_10052F0FC();
  *(_DWORD *)(inited + 48) = v3;
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(unsigned char *)(inited + 111) = -18;
  *(void *)(inited + 136) = &type metadata for Int;
  unint64_t v5 = sub_100033838();
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x536567617373656DLL;
  *(void *)(inited + 168) = 0xEB00000000657A69;
  uint64_t v6 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      int v7 = *(_DWORD *)(v0 + 248);
      int v8 = *(_DWORD *)(v0 + 252);
      BOOL v9 = __OFSUB__(v8, v7);
      LODWORD(v6) = v8 - v7;
      if (v9)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100529DBCLL);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      *(void *)(inited + 200) = &type metadata for Int;
      *(void *)(inited + 208) = v5;
      *(void *)(inited + 176) = v6;
      *(_WORD *)(inited + 216) = 2;
      unint64_t v12 = sub_10092D7A8(inited);
      uint64_t v13 = *(uint64_t (**)(unint64_t))(v0 + 8);
      return v13(v12);
    case 2uLL:
      uint64_t v10 = *(void *)(*(void *)(v0 + 248) + 16);
      uint64_t v11 = *(void *)(*(void *)(v0 + 248) + 24);
      BOOL v9 = __OFSUB__(v11, v10);
      uint64_t v6 = v11 - v10;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = *(unsigned __int8 *)(v0 + 262);
      goto LABEL_6;
  }
}

uint64_t sub_100529DCC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a3;
  *(void *)(v4 + 256) = a4;
  *(void *)(v4 + 240) = a2;
  *(unsigned char *)(v4 + 264) = a1;
  return _swift_task_switch(sub_100529DF4, 0, 0);
}

uint64_t sub_100529DF4()
{
  unint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 240);
  int v3 = *(unsigned __int8 *)(v0 + 264);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x546567617373656DLL;
  *(void *)(inited + 40) = 0xEB00000000657079;
  *(void *)(inited + 72) = &type metadata for Int32;
  *(void *)(inited + 80) = sub_10052F0FC();
  *(_DWORD *)(inited + 48) = v3 + 1;
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(unsigned char *)(inited + 111) = -18;
  *(void *)(inited + 136) = &type metadata for Int;
  unint64_t v5 = sub_100033838();
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x536567617373656DLL;
  *(void *)(inited + 168) = 0xEB00000000657A69;
  uint64_t v6 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      int v7 = *(_DWORD *)(v0 + 248);
      int v8 = *(_DWORD *)(v0 + 252);
      BOOL v9 = __OFSUB__(v8, v7);
      LODWORD(v6) = v8 - v7;
      if (v9)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100529FA0);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      *(void *)(inited + 200) = &type metadata for Int;
      *(void *)(inited + 208) = v5;
      *(void *)(inited + 176) = v6;
      *(_WORD *)(inited + 216) = 2;
      unint64_t v12 = sub_10092D7A8(inited);
      uint64_t v13 = *(uint64_t (**)(unint64_t))(v0 + 8);
      return v13(v12);
    case 2uLL:
      uint64_t v10 = *(void *)(*(void *)(v0 + 248) + 16);
      uint64_t v11 = *(void *)(*(void *)(v0 + 248) + 24);
      BOOL v9 = __OFSUB__(v11, v10);
      uint64_t v6 = v11 - v10;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = *(unsigned __int8 *)(v0 + 262);
      goto LABEL_6;
  }
}

uint64_t sub_100529FB0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_101647E78);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  int v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_28;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v10 + 1;
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_37;
      }
      uint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_37;
          }
          uint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v6 = (v14 - 1) & v14;
    int64_t v10 = v15;
LABEL_28:
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v8[8 * v19];
      }
      while (v23 == -1);
      unint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v8[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    uint64_t v12 = v2[6] + 40 * v11;
    *(_OWORD *)uint64_t v12 = v24;
    *(_OWORD *)(v12 + 16) = v25;
    *(void *)(v12 + 32) = v26;
    ++v2[2];
  }
  int64_t v16 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_37:
    swift_release();
    sub_100132C20();
    return (uint64_t)v2;
  }
  uint64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10052A2A4(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 248) = a3;
  *(void *)(v4 + 256) = a4;
  *(void *)(v4 + 240) = a2;
  *(unsigned char *)(v4 + 264) = a1;
  return _swift_task_switch(sub_1005549F8, 0, 0);
}

uint64_t sub_10052A2CC()
{
  return String.init<A>(describing:)();
}

void sub_10052A304()
{
  unint64_t v1 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(void *)&v2[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_10160CB60;
  swift_unknownObjectWeakAssign();
  v10.receiver = v2;
  v10.super_class = v1;
  id v3 = [super init];
  uint64_t v4 = (void *)v0[5];
  v0[5] = v3;

  uint64_t v5 = (void *)v0[7];
  uint64_t v6 = (void *)v0[5];
  id v7 = objc_allocWithZone((Class)IDSServiceDelegateProperties);
  id v8 = v6;
  id v9 = [v7 init];
  [v5 addDelegate:v8 withDelegateProperties:v9 queue:v0[6]];
}

void *sub_10052A3EC()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = [*(id *)(v0 + 56) devices];
  if (result)
  {
    id v3 = result;
    sub_10001D4B0(0, &qword_101647428);
    uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (void *)v1;
  }
  __break(1u);
  return result;
}

void *sub_10052A504(uint64_t (*a1)(void))
{
  unint64_t v1 = a1();
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t result = (void *)sub_1000B7514(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      sub_100E8F03C(v6, (uint64_t)v17);
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1000B7514(v7 > 1, v8 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      id v9 = &_swiftEmptyArrayStorage[20 * v8];
      long long v10 = v17[1];
      v9[2] = v17[0];
      v9[3] = v10;
      long long v11 = v17[2];
      long long v12 = v17[3];
      long long v13 = v17[5];
      v9[6] = v17[4];
      v9[7] = v13;
      v9[4] = v11;
      v9[5] = v12;
      long long v14 = v17[6];
      long long v15 = v17[7];
      long long v16 = v17[9];
      v9[10] = v17[8];
      v9[11] = v16;
      v9[8] = v14;
      v9[9] = v15;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t sub_10052A678(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10052A690(a1, a2, a3, a4);
}

uint64_t sub_10052A684(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10052A690(a1, a2, a3, a4);
}

uint64_t sub_10052A690(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _StringGuts.grow(_:)(41);
  v6._countAndFlagsBits = 0x286567617373654DLL;
  v6._object = (void *)0xEE00203A65707974;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x6F6973726576202CLL;
  v7._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A7365747962202CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  switch(a4 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x10052A850);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      return 0;
  }
}

uint64_t sub_10052A860()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10052A87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10052A88C()
{
  return swift_release();
}

Swift::Int sub_10052A894(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v190 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  Swift::String v8 = (char *)&v190 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v197 = (uint64_t)&v190 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v203 = (uint64_t)&v190 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  long long v15 = (char *)&v190 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v190 - v16;
  uint64_t v220 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v220 - 8);
  uint64_t v19 = __chkstk_darwin(v220);
  uint64_t v211 = (char *)&v190 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v190 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  unint64_t v195 = (char *)&v190 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v202 = (char *)&v190 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  long long v192 = (char *)&v190 - v29;
  __chkstk_darwin(v28);
  uint64_t v193 = (char *)&v190 - v30;
  uint64_t v222 = type metadata accessor for ShareRecord();
  uint64_t v209 = *(void *)(v222 - 8);
  uint64_t v31 = __chkstk_darwin(v222);
  uint64_t v201 = (uint64_t)&v190 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v224 = (uint64_t)&v190 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  os_log_type_t v37 = (char *)&v190 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v229 = (uint64_t)&v190 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  unint64_t v42 = (char *)&v190 - v41;
  uint64_t v43 = __chkstk_darwin(v40);
  uint64_t v207 = (uint64_t)&v190 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v196 = (uint64_t)&v190 - v46;
  __chkstk_darwin(v45);
  uint64_t v194 = (uint64_t)&v190 - v47;
  uint64_t v230 = a1;
  Swift::Int v48 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v48);
  if (result >= v48)
  {
    if ((v48 & 0x8000000000000000) == 0)
    {
      if (v48) {
        return sub_10052BC2C(0, v48, 1, v230);
      }
      return result;
    }
    goto LABEL_163;
  }
  if (v48 >= 0) {
    uint64_t v50 = v48;
  }
  else {
    uint64_t v50 = v48 + 1;
  }
  if (v48 < -1)
  {
LABEL_171:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v212 = v5;
  Swift::Int v191 = result;
  if (v48 < 2)
  {
    unint64_t v208 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
    if (v48 != 1)
    {
      unint64_t v56 = _swiftEmptyArrayStorage[2];
      int v55 = (char *)_swiftEmptyArrayStorage;
      uint64_t v181 = _swiftEmptyArrayStorage;
      if (v56 < 2)
      {
LABEL_140:
        swift_bridgeObjectRelease();
        v181[2] = 0;
        return swift_bridgeObjectRelease();
      }
LABEL_127:
      uint64_t v182 = *v230;
      while (1)
      {
        unint64_t v183 = v56 - 2;
        if (v56 < 2) {
          goto LABEL_158;
        }
        if (!v182) {
          goto LABEL_170;
        }
        uint64_t v184 = v55;
        uint64_t v185 = *(void *)&v55[16 * v183 + 32];
        uint64_t v186 = *(void *)&v55[16 * v56 + 24];
        uint64_t v187 = v210;
        sub_10052C18C(v182 + *(void *)(v209 + 72) * v185, v182 + *(void *)(v209 + 72) * *(void *)&v55[16 * v56 + 16], v182 + *(void *)(v209 + 72) * v186, v208);
        if (v187) {
          goto LABEL_125;
        }
        if (v186 < v185) {
          goto LABEL_159;
        }
        uint64_t v210 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v184 = sub_100B73584((uint64_t)v184);
        }
        if (v183 >= *((void *)v184 + 2)) {
          goto LABEL_160;
        }
        uint64_t v188 = &v184[16 * v183 + 32];
        *(void *)uint64_t v188 = v185;
        *((void *)v188 + 1) = v186;
        unint64_t v189 = *((void *)v184 + 2);
        if (v56 > v189) {
          goto LABEL_161;
        }
        memmove(&v184[16 * v56 + 16], &v184[16 * v56 + 32], 16 * (v189 - v56));
        int v55 = v184;
        *((void *)v184 + 2) = v189 - 1;
        unint64_t v56 = v189 - 1;
        if (v189 <= 2) {
          goto LABEL_140;
        }
      }
    }
    uint64_t v190 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v51 = v50 >> 1;
    uint64_t v52 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v52 + 16) = v51;
    uint64_t v53 = *(unsigned __int8 *)(v209 + 80);
    uint64_t v190 = (void *)v52;
    unint64_t v208 = v52 + ((v53 + 32) & ~v53);
  }
  Swift::Int v54 = 0;
  uint64_t v221 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v214 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v215 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  int v55 = (char *)_swiftEmptyArrayStorage;
  uint64_t v206 = v15;
  long long v205 = v17;
  unint64_t v231 = v23;
  uint64_t v216 = v37;
  uint64_t v199 = v42;
  long long v217 = v8;
  while (1)
  {
    uint64_t v57 = v54 + 1;
    Swift::Int v227 = v48;
    uint64_t v200 = v55;
    Swift::Int v204 = v54;
    if (v54 + 1 >= v48)
    {
      uint64_t v66 = v220;
    }
    else
    {
      uint64_t v58 = *v230;
      uint64_t v59 = *(void *)(v209 + 72);
      Swift::Int v223 = v54 + 1;
      uint64_t v60 = v194;
      sub_100552A0C(v58 + v59 * v57, v194, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v198 = v58;
      uint64_t v228 = v59;
      sub_100552A0C(v58 + v59 * v204, v196, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v61 = v222;
      sub_10001D074(v60 + *(int *)(v222 + 32), (uint64_t)v17, (uint64_t *)&unk_10163AC90);
      uint64_t v62 = v220;
      os_log_type_t v63 = *v221;
      unsigned int v64 = (*v221)(v17, 1, v220);
      uint64_t v225 = v63;
      if (v64 == 1)
      {
        sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
        LODWORD(v226) = 0;
        uint64_t v65 = v196;
      }
      else
      {
        uint64_t v226 = *v215;
        v226(v193, v17, v62);
        uint64_t v67 = *(int *)(v61 + 32);
        uint64_t v68 = v196;
        sub_10001D074(v196 + v67, (uint64_t)v15, (uint64_t *)&unk_10163AC90);
        if (v63(v15, 1, v62) == 1)
        {
          uint64_t v65 = v68;
          (*v214)(v193, v62);
          sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163AC90);
          LODWORD(v226) = 0;
        }
        else
        {
          uint64_t v69 = v192;
          v226(v192, v15, v62);
          LODWORD(v226) = static Date.< infix(_:_:)();
          uint64_t v70 = v69;
          uint64_t v65 = v196;
          uint64_t v71 = *v214;
          (*v214)(v70, v62);
          v71(v193, v62);
        }
      }
      Swift::Int v72 = v227;
      sub_100552C2C(v65, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      sub_100552C2C(v194, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      Swift::Int v54 = v204;
      uint64_t v57 = v204 + 2;
      if (v204 + 2 >= v72)
      {
        uint64_t v90 = v228;
      }
      else
      {
        uint64_t v219 = v228 * v223;
        uint64_t v73 = v198;
        uint64_t v218 = v228 * v57;
        uint64_t v74 = (uint64_t)v199;
        while (1)
        {
          Swift::Int v223 = v57;
          uint64_t v75 = v207;
          sub_100552A0C(v73 + v218, v207, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          sub_100552A0C(v73 + v219, v74, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          uint64_t v76 = v222;
          uint64_t v77 = v75 + *(int *)(v222 + 32);
          uint64_t v78 = v203;
          sub_10001D074(v77, v203, (uint64_t *)&unk_10163AC90);
          uint64_t v79 = v220;
          uint64_t v80 = v225;
          if (v225((char *)v78, 1, v220) == 1)
          {
            sub_10001DAB4(v78, (uint64_t *)&unk_10163AC90);
            int v81 = 0;
          }
          else
          {
            uint64_t v82 = v78;
            uint64_t v83 = v202;
            uint64_t v213 = *v215;
            v213(v202, (char *)v82, v79);
            uint64_t v84 = v74 + *(int *)(v76 + 32);
            uint64_t v85 = v197;
            sub_10001D074(v84, v197, (uint64_t *)&unk_10163AC90);
            if (v80((char *)v85, 1, v79) == 1)
            {
              (*v214)(v83, v79);
              sub_10001DAB4(v85, (uint64_t *)&unk_10163AC90);
              int v81 = 0;
            }
            else
            {
              uint64_t v86 = v195;
              v213(v195, (char *)v85, v79);
              int v81 = static Date.< infix(_:_:)();
              unint64_t v87 = *v214;
              unint64_t v88 = v86;
              uint64_t v89 = v202;
              (*v214)(v88, v79);
              v87(v89, v79);
            }
            Swift::String v8 = v217;
          }
          uint64_t v90 = v228;
          uint64_t v74 = (uint64_t)v199;
          sub_100552C2C((uint64_t)v199, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          sub_100552C2C(v207, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          if ((v226 ^ v81)) {
            break;
          }
          uint64_t v57 = v223 + 1;
          v73 += v90;
          if (v227 == v223 + 1)
          {
            uint64_t v57 = v227;
            long long v15 = v206;
            uint64_t v17 = v205;
            goto LABEL_36;
          }
        }
        long long v15 = v206;
        uint64_t v17 = v205;
        uint64_t v57 = v223;
LABEL_36:
        Swift::Int v54 = v204;
      }
      uint64_t v66 = v220;
      if (v226)
      {
        if (v57 < v54) {
          goto LABEL_164;
        }
        if (v54 < v57)
        {
          uint64_t v91 = 0;
          uint64_t v92 = v90 * (v57 - 1);
          uint64_t v93 = v57 * v90;
          Swift::Int v94 = v54;
          uint64_t v95 = v54 * v90;
          do
          {
            if (v94 != v57 + v91 - 1)
            {
              uint64_t v96 = v198;
              if (!v198) {
                goto LABEL_169;
              }
              uint64_t v97 = v57;
              unint64_t v98 = v198 + v95;
              uint64_t v99 = v198 + v92;
              sub_100551764(v198 + v95, v201, (uint64_t (*)(void))type metadata accessor for ShareRecord);
              if (v95 < v92 || v98 >= v96 + v93)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v90 = v228;
              }
              else
              {
                uint64_t v90 = v228;
                if (v95 != v92) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_100551764(v201, v99, (uint64_t (*)(void))type metadata accessor for ShareRecord);
              uint64_t v57 = v97;
              Swift::String v8 = v217;
            }
            ++v94;
            --v91;
            v92 -= v90;
            v93 -= v90;
            v95 += v90;
          }
          while (v94 < v57 + v91);
          long long v15 = v206;
          uint64_t v17 = v205;
          uint64_t v66 = v220;
          Swift::Int v54 = v204;
        }
      }
    }
    if (v57 >= v227) {
      goto LABEL_76;
    }
    if (__OFSUB__(v57, v54)) {
      goto LABEL_162;
    }
    if (v57 - v54 >= v191) {
      goto LABEL_75;
    }
    if (__OFADD__(v204, v191)) {
      goto LABEL_165;
    }
    if (v204 + v191 >= v227) {
      Swift::Int v100 = v227;
    }
    else {
      Swift::Int v100 = v204 + v191;
    }
    if (v100 < v204) {
      goto LABEL_166;
    }
    if (v57 == v100)
    {
      Swift::Int v54 = v204;
      goto LABEL_76;
    }
    uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v209 + 72);
    uint64_t v102 = (void)v101 * (v57 - 1);
    uint64_t v213 = v101;
    uint64_t v103 = v57 * (void)v101;
    uint64_t v104 = v222;
    uint64_t v198 = v100;
    while (2)
    {
      uint64_t v107 = 0;
      Swift::Int v108 = v204;
      Swift::Int v223 = v57;
      uint64_t v218 = v103;
      uint64_t v219 = v102;
      while (1)
      {
        Swift::Int v227 = v108;
        uint64_t v109 = *v230;
        uint64_t v226 = (void (*)(char *, char *, uint64_t))(v103 + v107);
        uint64_t v110 = v103 + v107 + v109;
        uint64_t v111 = v229;
        sub_100552A0C(v110, v229, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v228 = v107;
        uint64_t v225 = (unsigned int (*)(char *, uint64_t, uint64_t))(v102 + v107);
        uint64_t v112 = v102 + v107 + v109;
        uint64_t v113 = (uint64_t)v216;
        sub_100552A0C(v112, (uint64_t)v216, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_10001D074(v111 + *(int *)(v104 + 32), (uint64_t)v8, (uint64_t *)&unk_10163AC90);
        uint64_t v114 = *v221;
        if ((*v221)(v8, 1, v66) == 1)
        {
          uint64_t v105 = (uint64_t)v8;
LABEL_63:
          uint64_t v103 = v218;
          uint64_t v102 = v219;
          sub_10001DAB4(v105, (uint64_t *)&unk_10163AC90);
          sub_100552C2C((uint64_t)v216, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          sub_100552C2C(v229, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          Swift::Int v106 = v223;
          goto LABEL_64;
        }
        uint64_t v115 = *v215;
        uint64_t v116 = v8;
        uint64_t v117 = v231;
        (*v215)(v231, v116, v66);
        uint64_t v118 = v113 + *(int *)(v104 + 32);
        uint64_t v119 = (uint64_t)v212;
        sub_10001D074(v118, (uint64_t)v212, (uint64_t *)&unk_10163AC90);
        if (v114((char *)v119, 1, v66) == 1)
        {
          (*v214)(v117, v66);
          uint64_t v105 = v119;
          Swift::String v8 = v217;
          uint64_t v104 = v222;
          goto LABEL_63;
        }
        uint64_t v120 = v113;
        uint64_t v121 = v211;
        v115(v211, (char *)v119, v66);
        char v122 = static Date.< infix(_:_:)();
        uint64_t v123 = *v214;
        (*v214)(v121, v66);
        v123(v231, v66);
        sub_100552C2C(v120, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_100552C2C(v229, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        if ((v122 & 1) == 0) {
          break;
        }
        uint64_t v124 = *v230;
        Swift::String v8 = v217;
        uint64_t v103 = v218;
        uint64_t v102 = v219;
        if (!*v230) {
          goto LABEL_167;
        }
        uint64_t v125 = v228;
        uint64_t v126 = v124 + v219 + v228;
        sub_100551764(v124 + v218 + v228, v224, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v66 = v220;
        uint64_t v104 = v222;
        swift_arrayInitWithTakeFrontToBack();
        sub_100551764(v224, v126, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v107 = v125 - (void)v213;
        Swift::Int v108 = v227 + 1;
        Swift::Int v106 = v223;
        if (v223 == v227 + 1) {
          goto LABEL_64;
        }
      }
      Swift::String v8 = v217;
      uint64_t v103 = v218;
      uint64_t v102 = v219;
      uint64_t v66 = v220;
      uint64_t v104 = v222;
      Swift::Int v106 = v223;
LABEL_64:
      uint64_t v57 = v106 + 1;
      v102 += (uint64_t)v213;
      v103 += (uint64_t)v213;
      if (v57 != v198) {
        continue;
      }
      break;
    }
    uint64_t v57 = v198;
    long long v15 = v206;
    uint64_t v17 = v205;
LABEL_75:
    Swift::Int v54 = v204;
LABEL_76:
    if (v57 < v54)
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
      goto LABEL_171;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v223 = v57;
    if (isUniquelyReferenced_nonNull_native) {
      int v55 = v200;
    }
    else {
      int v55 = sub_100B729CC(0, *((void *)v200 + 2) + 1, 1, v200);
    }
    unint64_t v129 = *((void *)v55 + 2);
    unint64_t v128 = *((void *)v55 + 3);
    unint64_t v56 = v129 + 1;
    if (v129 >= v128 >> 1) {
      int v55 = sub_100B729CC((char *)(v128 > 1), v129 + 1, 1, v55);
    }
    *((void *)v55 + 2) = v56;
    uint64_t v130 = v55 + 32;
    uint64_t v131 = &v55[16 * v129 + 32];
    Swift::Int v132 = v223;
    *(void *)uint64_t v131 = v204;
    *((void *)v131 + 1) = v132;
    if (v129) {
      break;
    }
    unint64_t v56 = 1;
LABEL_15:
    Swift::Int v48 = v230[1];
    Swift::Int v54 = v223;
    if (v223 >= v48)
    {
      uint64_t v181 = v190;
      if (v56 < 2) {
        goto LABEL_140;
      }
      goto LABEL_127;
    }
  }
  while (1)
  {
    unint64_t v133 = v56 - 1;
    if (v56 >= 4)
    {
      uint64_t v138 = &v130[16 * v56];
      uint64_t v139 = *((void *)v138 - 8);
      uint64_t v140 = *((void *)v138 - 7);
      BOOL v144 = __OFSUB__(v140, v139);
      uint64_t v141 = v140 - v139;
      if (v144) {
        goto LABEL_146;
      }
      uint64_t v143 = *((void *)v138 - 6);
      uint64_t v142 = *((void *)v138 - 5);
      BOOL v144 = __OFSUB__(v142, v143);
      uint64_t v136 = v142 - v143;
      char v137 = v144;
      if (v144) {
        goto LABEL_147;
      }
      unint64_t v145 = v56 - 2;
      uint64_t v146 = &v130[16 * v56 - 32];
      uint64_t v148 = *(void *)v146;
      uint64_t v147 = *((void *)v146 + 1);
      BOOL v144 = __OFSUB__(v147, v148);
      uint64_t v149 = v147 - v148;
      if (v144) {
        goto LABEL_149;
      }
      BOOL v144 = __OFADD__(v136, v149);
      uint64_t v150 = v136 + v149;
      if (v144) {
        goto LABEL_152;
      }
      if (v150 >= v141)
      {
        uint64_t v168 = &v130[16 * v133];
        uint64_t v170 = *(void *)v168;
        uint64_t v169 = *((void *)v168 + 1);
        BOOL v144 = __OFSUB__(v169, v170);
        uint64_t v171 = v169 - v170;
        if (v144) {
          goto LABEL_156;
        }
        BOOL v161 = v136 < v171;
        goto LABEL_113;
      }
    }
    else
    {
      if (v56 != 3)
      {
        uint64_t v162 = *((void *)v55 + 4);
        uint64_t v163 = *((void *)v55 + 5);
        BOOL v144 = __OFSUB__(v163, v162);
        uint64_t v155 = v163 - v162;
        char v156 = v144;
        goto LABEL_107;
      }
      uint64_t v135 = *((void *)v55 + 4);
      uint64_t v134 = *((void *)v55 + 5);
      BOOL v144 = __OFSUB__(v134, v135);
      uint64_t v136 = v134 - v135;
      char v137 = v144;
    }
    if (v137) {
      goto LABEL_148;
    }
    unint64_t v145 = v56 - 2;
    uint64_t v151 = &v130[16 * v56 - 32];
    uint64_t v153 = *(void *)v151;
    uint64_t v152 = *((void *)v151 + 1);
    BOOL v154 = __OFSUB__(v152, v153);
    uint64_t v155 = v152 - v153;
    char v156 = v154;
    if (v154) {
      goto LABEL_151;
    }
    uint64_t v157 = &v130[16 * v133];
    uint64_t v159 = *(void *)v157;
    uint64_t v158 = *((void *)v157 + 1);
    BOOL v144 = __OFSUB__(v158, v159);
    uint64_t v160 = v158 - v159;
    if (v144) {
      goto LABEL_154;
    }
    if (__OFADD__(v155, v160)) {
      goto LABEL_155;
    }
    if (v155 + v160 >= v136)
    {
      BOOL v161 = v136 < v160;
LABEL_113:
      if (v161) {
        unint64_t v133 = v145;
      }
      goto LABEL_115;
    }
LABEL_107:
    if (v156) {
      goto LABEL_150;
    }
    uint64_t v164 = &v130[16 * v133];
    uint64_t v166 = *(void *)v164;
    uint64_t v165 = *((void *)v164 + 1);
    BOOL v144 = __OFSUB__(v165, v166);
    uint64_t v167 = v165 - v166;
    if (v144) {
      goto LABEL_153;
    }
    if (v167 < v155) {
      goto LABEL_15;
    }
LABEL_115:
    unint64_t v172 = v133 - 1;
    if (v133 - 1 >= v56)
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if (!*v230) {
      goto LABEL_168;
    }
    unint64_t v173 = v8;
    uint64_t v174 = v55;
    uint64_t v175 = &v130[16 * v172];
    uint64_t v176 = *(void *)v175;
    int v177 = &v130[16 * v133];
    uint64_t v178 = *((void *)v177 + 1);
    uint64_t v179 = v210;
    sub_10052C18C(*v230 + *(void *)(v209 + 72) * *(void *)v175, *v230 + *(void *)(v209 + 72) * *(void *)v177, *v230 + *(void *)(v209 + 72) * v178, v208);
    if (v179) {
      break;
    }
    if (v178 < v176) {
      goto LABEL_143;
    }
    if (v133 > *((void *)v174 + 2)) {
      goto LABEL_144;
    }
    *(void *)uint64_t v175 = v176;
    *(void *)&v130[16 * v172 + 8] = v178;
    unint64_t v180 = *((void *)v174 + 2);
    if (v133 >= v180) {
      goto LABEL_145;
    }
    uint64_t v210 = 0;
    unint64_t v56 = v180 - 1;
    memmove(&v130[16 * v133], v177 + 16, 16 * (v180 - 1 - v133));
    int v55 = v174;
    *((void *)v174 + 2) = v180 - 1;
    BOOL v161 = v180 > 2;
    long long v15 = v206;
    uint64_t v17 = v205;
    Swift::String v8 = v173;
    if (!v161) {
      goto LABEL_15;
    }
  }
  uint64_t v181 = v190;
LABEL_125:
  swift_bridgeObjectRelease();
  v181[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10052BC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  os_log_type_t v63 = a4;
  uint64_t v47 = a1;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v53 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v49 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unsigned int v64 = (char *)&v45 - v15;
  uint64_t v65 = type metadata accessor for ShareRecord();
  uint64_t v16 = __chkstk_darwin(v65);
  uint64_t v59 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v66 = (uint64_t)&v45 - v19;
  uint64_t result = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v58 = a3;
  uint64_t v46 = a2;
  if (a3 != a2)
  {
    uint64_t v24 = *(void *)(v21 + 72);
    Swift::Int v54 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v55 = v24;
    uint64_t v51 = v10;
    uint64_t v52 = (void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v50 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v25 = v24 * (v58 - 1);
    uint64_t v26 = v24 * v58;
    Swift::Int v48 = (char *)&v45 - v22;
    while (2)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v47;
      uint64_t v56 = v25;
      uint64_t v57 = v26;
      while (1)
      {
        uint64_t v30 = *v63;
        uint64_t v62 = v26 + v28;
        sub_100552A0C(v26 + v28 + v30, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v61 = v25 + v28;
        sub_100552A0C(v25 + v28 + v30, v66, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_10001D074((uint64_t)&v23[*(int *)(v65 + 32)], (uint64_t)v10, (uint64_t *)&unk_10163AC90);
        uint64_t v31 = *v54;
        if ((*v54)(v10, 1, v11) == 1) {
          break;
        }
        uint64_t v60 = v29;
        uint64_t v32 = *v52;
        (*v52)(v64, v10, v11);
        uint64_t v33 = v53;
        sub_10001D074(v66 + *(int *)(v65 + 32), v53, (uint64_t *)&unk_10163AC90);
        if (v31((char *)v33, 1, v11) == 1)
        {
          (*v50)(v64, v11);
          uint64_t v27 = v33;
          uint64_t v10 = v51;
          uint64_t v25 = v56;
          goto LABEL_5;
        }
        uint64_t v34 = v64;
        uint64_t v35 = v11;
        uint64_t v36 = v49;
        v32(v49, (char *)v33, v35);
        char v37 = static Date.< infix(_:_:)();
        uint64_t v38 = *v50;
        uint64_t v39 = v36;
        uint64_t v11 = v35;
        uint64_t v40 = v34;
        uint64_t v41 = v66;
        uint64_t v23 = v48;
        (*v50)(v39, v11);
        v38(v40, v11);
        sub_100552C2C(v41, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t result = sub_100552C2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v10 = v51;
        uint64_t v25 = v56;
        uint64_t v26 = v57;
        uint64_t v42 = v60;
        if ((v37 & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v43 = *v63;
        if (!*v63)
        {
          __break(1u);
          return result;
        }
        uint64_t v44 = v43 + v56 + v28;
        sub_100551764(v43 + v57 + v28, v59, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_100551764(v59, v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        v28 -= v55;
        uint64_t v29 = v42 + 1;
        if (v58 == v29) {
          goto LABEL_6;
        }
      }
      uint64_t v27 = (uint64_t)v10;
LABEL_5:
      sub_10001DAB4(v27, (uint64_t *)&unk_10163AC90);
      sub_100552C2C(v66, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t result = sub_100552C2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v26 = v57;
LABEL_6:
      v25 += v55;
      v26 += v55;
      if (++v58 == v46) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t sub_10052C18C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v100 = a3;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v89 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v95 = (unint64_t)&v84 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v84 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v84 - v15;
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v98 - 8);
  uint64_t v18 = __chkstk_darwin(v98);
  uint64_t v85 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  Swift::Int v94 = (char *)&v84 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v86 = (void (**)(char *, uint64_t))((char *)&v84 - v23);
  __chkstk_darwin(v22);
  uint64_t v93 = (char *)&v84 - v24;
  uint64_t v25 = type metadata accessor for ShareRecord();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v97 = (uint64_t)&v84 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v99 = (uint64_t)&v84 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v35 = *(void *)(v34 + 72);
  if (!v35)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (a2 - a1 == 0x8000000000000000 && v35 == -1) {
    goto LABEL_72;
  }
  int64_t v36 = v100 - a2;
  if (v100 - a2 == 0x8000000000000000 && v35 == -1) {
    goto LABEL_73;
  }
  uint64_t v37 = (uint64_t)(a2 - a1) / v35;
  unint64_t v104 = a1;
  unint64_t v103 = a4;
  uint64_t v38 = v36 / v35;
  uint64_t v101 = v31;
  if (v37 >= v36 / v35)
  {
    if ((v38 & 0x8000000000000000) == 0)
    {
      uint64_t v40 = v38 * v35;
      uint64_t v99 = v33;
      if (a4 < a2 || a2 + v40 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v58 = a4 + v40;
      unint64_t v102 = a4 + v40;
      unint64_t v104 = a2;
      if (v40 >= 1 && a1 < a2)
      {
        uint64_t v60 = -v35;
        uint64_t v92 = (void (**)(void, void))a1;
        uint64_t v93 = (char *)(v17 + 48);
        uint64_t v86 = (void (**)(char *, uint64_t))(v17 + 8);
        unint64_t v87 = (char *)(v17 + 32);
        uint64_t v61 = (uint64_t *)&unk_10163AC90;
        unint64_t v88 = a4;
        uint64_t v91 = v60;
        uint64_t v62 = v99;
        do
        {
          uint64_t v63 = v97;
          sub_100552A0C(v58 + v60, v97, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          uint64_t v96 = (uint64_t (**)(char *, uint64_t, uint64_t))(a2 + v60);
          sub_100552A0C(a2 + v60, v62, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          uint64_t v64 = v101;
          uint64_t v65 = v95;
          sub_10001D074(v63 + *(int *)(v101 + 32), v95, v61);
          uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v93;
          uint64_t v67 = v98;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v93)(v65, 1, v98) == 1)
          {
            sub_10001DAB4(v65, v61);
            char v68 = 0;
            unint64_t v69 = v100;
            uint64_t v60 = v91;
          }
          else
          {
            uint64_t v90 = (char *)a2;
            uint64_t v70 = v65;
            uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))v87;
            Swift::Int v72 = v94;
            (*(void (**)(char *, uint64_t, uint64_t))v87)(v94, v70, v67);
            uint64_t v73 = v62 + *(int *)(v64 + 32);
            uint64_t v74 = v89;
            sub_10001D074(v73, v89, v61);
            if (v66(v74, 1, v67) == 1)
            {
              (*v86)(v72, v67);
              sub_10001DAB4(v74, v61);
              char v68 = 0;
            }
            else
            {
              uint64_t v75 = v61;
              uint64_t v76 = v85;
              v71(v85, v74, v67);
              char v68 = static Date.< infix(_:_:)();
              uint64_t v77 = *v86;
              uint64_t v78 = v76;
              uint64_t v61 = v75;
              (*v86)(v78, v67);
              v77(v94, v67);
            }
            unint64_t v69 = v100;
            a4 = v88;
            a2 = (unint64_t)v90;
            uint64_t v60 = v91;
          }
          unint64_t v79 = v69 + v60;
          sub_100552C2C(v99, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          sub_100552C2C(v97, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          if (v68)
          {
            uint64_t v80 = v92;
            if (v69 < a2 || v79 >= a2)
            {
              int v81 = (unsigned int (**)(void, void, void))v96;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              int v81 = (unsigned int (**)(void, void, void))v96;
              if (v69 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v104 += v60;
          }
          else
          {
            unint64_t v82 = v102;
            v102 += v60;
            uint64_t v80 = v92;
            if (v69 < v82 || v79 >= v82)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v69 != v82)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            int v81 = (unsigned int (**)(void, void, void))a2;
          }
          unint64_t v58 = v102;
          if (v102 <= a4) {
            break;
          }
          a2 = (unint64_t)v81;
          unint64_t v100 = v69 + v60;
        }
        while (v81 > (unsigned int (**)(void, void, void))v80);
      }
LABEL_70:
      sub_100B72E70(&v104, &v103, (uint64_t *)&v102);
      return 1;
    }
  }
  else if ((v37 & 0x8000000000000000) == 0)
  {
    uint64_t v39 = v37 * v35;
    uint64_t v97 = (uint64_t)&v84 - v32;
    if (a4 < a1 || a1 + v39 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v95 = a4 + v39;
    unint64_t v102 = a4 + v39;
    if (v39 >= 1 && a2 < v100)
    {
      uint64_t v96 = (uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
      uint64_t v91 = v35;
      uint64_t v92 = (void (**)(void, void))(v17 + 8);
      uint64_t v90 = v16;
      Swift::Int v94 = (char *)(v17 + 32);
      unint64_t v87 = v14;
      uint64_t v42 = v93;
      uint64_t v43 = v99;
      while (1)
      {
        uint64_t v44 = v97;
        sub_100552A0C(a2, v97, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_100552A0C(a4, v99, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_10001D074(v44 + *(int *)(v101 + 32), (uint64_t)v16, (uint64_t *)&unk_10163AC90);
        uint64_t v45 = *v96;
        uint64_t v46 = v98;
        unsigned int v47 = (*v96)(v16, 1, v98);
        uint64_t v48 = (uint64_t)v16;
        if (v47 == 1) {
          goto LABEL_26;
        }
        os_log_type_t v49 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))v94;
        (*(void (**)(char *, char *, uint64_t))v94)(v42, v16, v46);
        uint64_t v50 = v87;
        sub_10001D074(v43 + *(int *)(v101 + 32), (uint64_t)v87, (uint64_t *)&unk_10163AC90);
        if (v45(v50, 1, v46) == 1) {
          break;
        }
        uint64_t v55 = v86;
        v49(v86, v50, v46);
        char v56 = static Date.< infix(_:_:)();
        uint64_t v57 = (void (*)(char *, uint64_t))*v92;
        (*v92)(v55, v46);
        v57(v93, v46);
        sub_100552C2C(v43, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        sub_100552C2C(v97, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v16 = v90;
        if ((v56 & 1) == 0) {
          goto LABEL_27;
        }
        unint64_t v51 = v104;
        uint64_t v52 = v91;
        unint64_t v54 = a2 + v91;
        if (v104 < a2 || v104 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v104 == a2)
        {
          unint64_t v51 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_33:
        unint64_t v104 = v51 + v52;
        a4 = v103;
        if (v103 < v95)
        {
          a2 = v54;
          if (v54 < v100) {
            continue;
          }
        }
        goto LABEL_70;
      }
      (*v92)(v42, v46);
      uint64_t v48 = (uint64_t)v50;
      uint64_t v16 = v90;
      uint64_t v44 = v97;
LABEL_26:
      sub_10001DAB4(v48, (uint64_t *)&unk_10163AC90);
      sub_100552C2C(v99, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      sub_100552C2C(v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
LABEL_27:
      unint64_t v51 = v104;
      uint64_t v52 = v91;
      unint64_t v53 = v103 + v91;
      if (v104 < v103 || v104 >= v53)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v104 != v103)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v103 = v53;
      unint64_t v54 = a2;
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_74:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t sub_10052CBA0(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10052CC84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = a1;
  return _swift_task_switch(sub_10052CCB8, 0, 0);
}

uint64_t sub_10052CCB8()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(void *)(v1 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10052CD78;
  return sub_101194870((uint64_t)&unk_101647EC8, v1);
}

uint64_t sub_10052CD78()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_100554A5C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v1 = sub_10052CEC0;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10052CEC0()
{
  type metadata accessor for AnalyticsPublisher();
  v0[9] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10052CF74;
  uint64_t v2 = v0[6];
  return sub_101196838(v2);
}

uint64_t sub_10052CF74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10052D084(char *a1)
{
  char v2 = *a1;
  long long v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1005545FC;
  *(void *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(unsigned char *)(v4 + 264) = v2;
  return _swift_task_switch(sub_100529C14, 0, 0);
}

uint64_t sub_10052D150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = a1;
  return _swift_task_switch(sub_10052D184, 0, 0);
}

uint64_t sub_10052D184()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(void *)(v1 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10052D244;
  return sub_101194870((uint64_t)&unk_101647E88, v1);
}

uint64_t sub_10052D244()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_100554A60;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v1 = sub_10052D38C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10052D38C()
{
  type metadata accessor for AnalyticsPublisher();
  v0[9] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100554A14;
  uint64_t v2 = v0[6];
  return sub_101196838(v2);
}

uint64_t sub_10052D440(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v8 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      BOOL v9 = __OFSUB__(HIDWORD(a3), a3);
      int v10 = HIDWORD(a3) - a3;
      if (v9)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10052D4D4);
      }
      uint64_t v8 = v10;
      return a5(v5, v6, v8);
    case 2uLL:
      uint64_t v13 = a3 + 16;
      uint64_t v11 = *(void *)(a3 + 16);
      uint64_t v12 = *(void *)(v13 + 8);
      uint64_t v8 = v12 - v11;
      if (!__OFSUB__(v12, v11)) {
        return a5(v5, v6, v8);
      }
      goto LABEL_8;
    case 3uLL:
      return a5(v5, v6, v8);
    default:
      uint64_t v8 = BYTE6(a4);
      return a5(v5, v6, v8);
  }
}

uint64_t sub_10052D4E4(char *a1)
{
  char v2 = *a1;
  long long v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1005545FC;
  *(void *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(unsigned char *)(v4 + 264) = v2;
  return _swift_task_switch(sub_1005549F8, 0, 0);
}

uint64_t sub_10052D5B0(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[3] = type metadata accessor for OwnedBeaconRecord();
  void v22[4] = sub_10052EE80(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v13 = sub_10001D958(v22);
  sub_100552A0C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v14 = v21;
  sub_10001D010((uint64_t)v22, (uint64_t)&v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  sub_10001CEB0(&v21, v16 + 24);
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v17 = (unsigned char *)(v16 + v15 + v12);
  *uint64_t v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v18 = v21;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  return v18;
}

uint64_t sub_10052D82C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = a1;
  return _swift_task_switch(sub_10052D860, 0, 0);
}

uint64_t sub_10052D860()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(void *)(v1 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10052D244;
  return sub_101194870((uint64_t)&unk_101647F58, v1);
}

uint64_t sub_10052D920(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  int v4 = *a2;
  Swift::UInt v5 = *((void *)a2 + 1);
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      BOOL v8 = __OFSUB__(HIDWORD(a3), a3);
      int v9 = HIDWORD(a3) - a3;
      if (v8)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10052D9B4);
      }
      uint64_t v7 = v9;
      return sub_101065F30(v4 + 1, v5, v7);
    case 2uLL:
      uint64_t v12 = a3 + 16;
      uint64_t v10 = *(void *)(a3 + 16);
      uint64_t v11 = *(void *)(v12 + 8);
      uint64_t v7 = v11 - v10;
      if (!__OFSUB__(v11, v10)) {
        return sub_101065F30(v4 + 1, v5, v7);
      }
      goto LABEL_8;
    case 3uLL:
      return sub_101065F30(v4 + 1, v5, v7);
    default:
      uint64_t v7 = BYTE6(a4);
      return sub_101065F30(v4 + 1, v5, v7);
  }
}

uint64_t sub_10052D9C4(char *a1)
{
  char v2 = *a1;
  long long v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1005545FC;
  *(void *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(unsigned char *)(v4 + 264) = v2;
  return _swift_task_switch(sub_100529DF4, 0, 0);
}

void *sub_10052DA90(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = __chkstk_darwin(v20);
  long long v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int v9 = (char *)&v18 - v8;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v18 = v2;
    uint64_t v12 = *(void *)(v7 + 72);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v19;
    uint64_t v14 = _swiftEmptyArrayStorage;
    do
    {
      sub_100552A0C(v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = sub_100B6DD88()[2];
      swift_bridgeObjectRelease();
      if (v15)
      {
        sub_100551764((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v14[2] + 1, 1);
        }
        uint64_t v14 = v22;
        unint64_t v17 = v22[2];
        unint64_t v16 = v22[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000B74D8(v16 > 1, v17 + 1, 1);
          uint64_t v14 = v22;
        }
        void v14[2] = v17 + 1;
        sub_100551764((uint64_t)v6, (uint64_t)v14 + v19 + v17 * v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_100552C2C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v22;
  }
  return result;
}

uint64_t sub_10052DCD4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 32;
    unint64_t v32 = v1 - 1;
    do
    {
      if (v2 <= v1) {
        unint64_t v4 = v1;
      }
      else {
        unint64_t v4 = v2;
      }
      uint64_t v5 = (long long *)(v3 + 160 * v2);
      unint64_t v6 = v2;
      while (1)
      {
        if (v4 == v6)
        {
          __break(1u);
          return result;
        }
        long long v7 = v5[7];
        long long v28 = v5[6];
        long long v29 = v7;
        long long v8 = v5[9];
        long long v30 = v5[8];
        long long v31 = v8;
        long long v9 = v5[3];
        long long v24 = v5[2];
        long long v25 = v9;
        long long v10 = v5[5];
        long long v26 = v5[4];
        long long v27 = v10;
        long long v11 = v5[1];
        long long v22 = *v5;
        long long v23 = v11;
        sub_1000A3AA8((uint64_t)&v22);
        if (sub_1001A2714() == 2 && sub_1001A2BE0()) {
          break;
        }
        ++v6;
        uint64_t result = sub_1000A3BB4((uint64_t)&v22);
        v5 += 10;
        if (v1 == v6) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1000B7514(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1) {
        uint64_t result = sub_1000B7514(v12 > 1, v13 + 1, 1);
      }
      unint64_t v2 = v6 + 1;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      uint64_t v14 = &_swiftEmptyArrayStorage[20 * v13];
      long long v15 = v23;
      void v14[2] = v22;
      v14[3] = v15;
      long long v16 = v24;
      long long v17 = v25;
      long long v18 = v27;
      v14[6] = v26;
      v14[7] = v18;
      v14[4] = v16;
      v14[5] = v17;
      long long v19 = v28;
      long long v20 = v29;
      long long v21 = v31;
      v14[10] = v30;
      v14[11] = v21;
      v14[8] = v19;
      v14[9] = v20;
    }
    while (v32 != v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10052DE80(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemVersionNumber();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v24 - v11;
  if (qword_101636B58 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170DFA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a3, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    long long v26 = v10;
    uint64_t v17 = v16;
    uint64_t v25 = swift_slowAlloc();
    v29._countAndFlagsBits = v25;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1008FA0F0(a1, a2, &v29._countAndFlagsBits);
    v24[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v27 = v7;
    sub_10052EE80(&qword_101648258, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1008FA0F0(v18, v19, &v29._countAndFlagsBits);
    uint64_t v20 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v21 = *(void (**)(char *, uint64_t))(v20 + 8);
    v21(v12, v6);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "supportsItemConnection? %s %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    long long v10 = v26;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    long long v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v12, v6);
  }

  Swift::String v29 = String.lowercased()();
  sub_1005506B0();
  sub_1000336D4();
  static PartialMatchCase<>.first(containing:)();
  swift_bridgeObjectRelease();
  char v22 = 0;
  switch((char)v28)
  {
    case 5:
      return v22 & 1;
    default:
      SystemVersionNumber.init(stringLiteral:)();
      sub_10052EE80((unint64_t *)&qword_10163A550, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
      char v22 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
      v21(v10, v6);
      break;
  }
  return v22 & 1;
}

uint64_t sub_10052E2F4(long long *a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101648A20);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SystemVersionNumber();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v49 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = a1[1];
  long long v71 = *a1;
  long long v72 = v8;
  uint64_t v10 = *((void *)a1 + 4);
  unint64_t v9 = *((void *)a1 + 5);
  long long v11 = a1[4];
  long long v69 = a1[3];
  long long v70 = v11;
  uint64_t v12 = *((void *)a1 + 10);
  uint64_t v13 = *((void *)a1 + 11);
  uint64_t v14 = *((void *)a1 + 12);
  unsigned int v47 = (void *)*((void *)a1 + 13);
  long long v15 = a1[9];
  long long v16 = a1[7];
  long long v67 = a1[8];
  long long v68 = v15;
  long long v66 = v16;
  swift_bridgeObjectRetain();
  uint64_t v50 = v12;
  SystemVersionNumber.init(string:)();
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v48 = v5;
  if (v17(v4, 1, v5) == 1)
  {
    uint64_t v48 = v10;
    os_log_type_t v49 = (char *)v14;
    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_101648A20);
    int v46 = static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    uint64_t v64 = 60;
    unint64_t v65 = 0xE100000000000000;
    long long v19 = a1[1];
    long long v51 = *a1;
    long long v52 = v19;
    uint64_t v20 = v47;
    uint64_t v53 = v48;
    unint64_t v54 = v9;
    long long v21 = a1[4];
    long long v55 = a1[3];
    long long v56 = v21;
    uint64_t v22 = (uint64_t)v49;
    uint64_t v57 = v50;
    uint64_t v58 = v13;
    uint64_t v59 = v49;
    uint64_t v60 = v47;
    long long v23 = a1[8];
    long long v61 = a1[7];
    long long v62 = v23;
    long long v63 = a1[9];
    sub_10055065C();
    v24._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 8250;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = v22;
    v26._object = v20;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 62;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    uint64_t v28 = v64;
    unint64_t v29 = v65;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000B4CC();
    *(void *)(v18 + 32) = v28;
    *(void *)(v18 + 40) = v29;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    char v30 = 0;
  }
  else
  {
    uint64_t v31 = (uint64_t)v49;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v49, v4, v48);
    int v46 = sub_10052DE80(v10, v9, v31);
    int v45 = static os_log_type_t.default.getter();
    uint64_t v32 = v6;
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v44 = qword_10170EFB0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_101347BA0;
    uint64_t v64 = 60;
    unint64_t v65 = 0xE100000000000000;
    long long v51 = v71;
    long long v52 = v72;
    uint64_t v53 = v10;
    unint64_t v54 = v9;
    long long v55 = v69;
    long long v56 = v70;
    uint64_t v34 = v50;
    uint64_t v57 = v50;
    uint64_t v58 = v13;
    uint64_t v35 = v47;
    uint64_t v59 = (char *)v14;
    uint64_t v60 = v47;
    long long v62 = v67;
    long long v63 = v68;
    long long v61 = v66;
    sub_10055065C();
    v36._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 8250;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = v14;
    v38._object = v35;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 62;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    uint64_t v40 = v64;
    unint64_t v41 = v65;
    *(void *)(v33 + 56) = &type metadata for String;
    unint64_t v42 = sub_10000B4CC();
    *(void *)(v33 + 32) = v40;
    *(void *)(v33 + 40) = v41;
    *(void *)(v33 + 96) = &type metadata for String;
    *(void *)(v33 + 104) = v42;
    *(void *)(v33 + 64) = v42;
    *(void *)(v33 + 72) = v34;
    *(void *)(v33 + 80) = v13;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v49, v48);
    char v30 = v46;
  }
  return v30 & 1;
}

uint64_t sub_10052E7D4(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v6 = 32;
    while (v4 < *(void *)(v2 + 16))
    {
      long long v7 = *(_OWORD *)(v2 + v6 + 112);
      long long v8 = *(_OWORD *)(v2 + v6 + 80);
      long long v34 = *(_OWORD *)(v2 + v6 + 96);
      long long v35 = v7;
      long long v9 = *(_OWORD *)(v2 + v6 + 112);
      long long v10 = *(_OWORD *)(v2 + v6 + 144);
      long long v36 = *(_OWORD *)(v2 + v6 + 128);
      long long v37 = v10;
      long long v11 = *(_OWORD *)(v2 + v6 + 48);
      long long v12 = *(_OWORD *)(v2 + v6 + 16);
      long long v30 = *(_OWORD *)(v2 + v6 + 32);
      long long v31 = v11;
      long long v13 = *(_OWORD *)(v2 + v6 + 48);
      long long v14 = *(_OWORD *)(v2 + v6 + 80);
      long long v32 = *(_OWORD *)(v2 + v6 + 64);
      long long v33 = v14;
      long long v15 = *(_OWORD *)(v2 + v6 + 16);
      long long v28 = *(_OWORD *)(v2 + v6);
      long long v29 = v15;
      v38[6] = v34;
      v38[7] = v9;
      long long v16 = *(_OWORD *)(v2 + v6 + 144);
      v38[8] = v36;
      v38[9] = v16;
      v38[2] = v30;
      v38[3] = v13;
      v38[4] = v32;
      v38[5] = v8;
      v38[0] = v28;
      v38[1] = v12;
      sub_1000A3AA8((uint64_t)&v28);
      char v17 = sub_10052E2F4(v38);
      if (v1)
      {
        sub_1000A3BB4((uint64_t)&v28);
        swift_release();
        goto LABEL_15;
      }
      if (v17)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v39 = v5;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B7514(0, v5[2] + 1, 1);
          uint64_t v5 = v39;
        }
        unint64_t v19 = v5[2];
        unint64_t v18 = v5[3];
        if (v19 >= v18 >> 1)
        {
          uint64_t result = sub_1000B7514(v18 > 1, v19 + 1, 1);
          uint64_t v5 = v39;
        }
        v5[2] = v19 + 1;
        uint64_t v20 = &v5[20 * v19];
        long long v21 = v29;
        void v20[2] = v28;
        v20[3] = v21;
        long long v22 = v30;
        long long v23 = v31;
        long long v24 = v33;
        v20[6] = v32;
        v20[7] = v24;
        v20[4] = v22;
        v20[5] = v23;
        long long v25 = v34;
        long long v26 = v35;
        long long v27 = v37;
        _OWORD v20[10] = v36;
        v20[11] = v27;
        v20[8] = v25;
        v20[9] = v26;
      }
      else
      {
        uint64_t result = sub_1000A3BB4((uint64_t)&v28);
      }
      ++v4;
      v6 += 160;
      if (v3 == v4) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

void *sub_10052E99C(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for ShareRecord();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v31 = (uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v14 = (char *)v27 - v13;
  uint64_t result = _swiftEmptyArrayStorage;
  long long v32 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    v27[1] = v4;
    int v17 = a2;
    uint64_t v18 = *(void *)(v12 + 72);
    unint64_t v28 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = a1 + v28;
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v30 = v9;
    int v29 = v17;
    do
    {
      sub_100552A0C(v19, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      long long v21 = &v14[*(int *)(v9 + 36)];
      if (*v21 == v17
        && (*((void *)v21 + 1) == a3 ? (BOOL v22 = *((void *)v21 + 2) == a4) : (BOOL v22 = 0),
            v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t v23 = a3;
        uint64_t v24 = a4;
        sub_100551764((uint64_t)v14, v31, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7DF0(0, v20[2] + 1, 1);
        }
        uint64_t v20 = v32;
        unint64_t v26 = v32[2];
        unint64_t v25 = v32[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B7DF0(v25 > 1, v26 + 1, 1);
          uint64_t v20 = v32;
        }
        void v20[2] = v26 + 1;
        sub_100551764(v31, (uint64_t)v20 + v28 + v26 * v18, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        a4 = v24;
        a3 = v23;
        uint64_t v9 = v30;
        int v17 = v29;
      }
      else
      {
        sub_100552C2C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      }
      v19 += v18;
      --v16;
    }
    while (v16);
    return v32;
  }
  return result;
}

uint64_t sub_10052EC24@<X0>(uint64_t a1@<X8>)
{
  return sub_1010E5738(*(unsigned char *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10052EC48()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10052EE54(uint64_t a1)
{
  return sub_1005521DC(a1, (uint64_t (*)(void))type metadata accessor for ShareRecord, sub_10051B68C);
}

uint64_t sub_10052EE80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10052EEC8()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10052EEEC(uint64_t a1)
{
  return sub_1005536C0(a1, sub_100502A10);
}

uint64_t sub_10052EF04(uint64_t a1)
{
  return sub_100506394(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1015C85F8, (uint64_t)sub_100554A0C, (uint64_t)&unk_1015C8610);
}

uint64_t sub_10052EF48()
{
  return sub_100545DC4((uint64_t)"*** timed out waiting for IDS send ***", 38, (uint64_t)sub_10052F164, (uint64_t)&unk_1015C85C0);
}

uint64_t sub_10052EF78()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101647E60 + dword_101647E60);
  return v4(v2, v0 + 24);
}

uint64_t sub_10052F028(uint64_t a1)
{
  return sub_10052D440(a1, *(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1010661C8);
}

uint64_t sub_10052F05C()
{
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1005545FC;
  uint64_t v4 = (uint64_t (*)(char *))((char *)&dword_101647E80 + dword_101647E80);
  return v4(v2);
}

unint64_t sub_10052F0FC()
{
  unint64_t result = qword_101647E98;
  if (!qword_101647E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647E98);
  }
  return result;
}

unint64_t sub_10052F150(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return sub_100173E5C(result);
  }
  return result;
}

void sub_10052F164()
{
}

uint64_t sub_10052F180()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10052F19C()
{
  return sub_100550FB0(sub_100502DBC);
}

uint64_t sub_10052F1B4()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10052F1CC()
{
  return sub_100503810(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), &qword_101642760);
}

uint64_t sub_10052F1F8()
{
  return sub_100552564((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void, void, unint64_t))sub_1005062A0);
}

uint64_t sub_10052F224()
{
  return sub_10050608C(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t sub_10052F244()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101647EB0 + dword_101647EB0);
  return v4(v2, v0 + 24);
}

uint64_t sub_10052F2F4(uint64_t a1)
{
  return sub_10052D440(a1, *(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_101065F30);
}

uint64_t sub_10052F328()
{
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10013067C;
  uint64_t v4 = (uint64_t (*)(char *))((char *)&dword_101647EC0 + dword_101647EC0);
  return v4(v2);
}

uint64_t sub_10052F3C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10052F3D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10052F418(char a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(NSObject **)(v1 + 24);
  swift_beginAccess();
  *(unsigned char *)(v4 + 16) = a1;
  dispatch_group_leave(v3);
}

uint64_t sub_10052F46C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10052F4BC()
{
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100033F68;
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 64) = v3;
  *(void *)(v6 + 32) = v2;
  *(_OWORD *)(v6 + 16) = v7;
  return _swift_task_switch(sub_1005299E4, 0, 0);
}

uint64_t sub_10052F590()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10052F5A8()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10052F7BC(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = (uint64_t *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return sub_10051BD48(a1, v6, v7, v9, v10);
}

unint64_t sub_10052F868(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, long long a9)
{
  uint64_t v102 = a7;
  uint64_t v103 = a8;
  LODWORD(v101) = a6;
  LODWORD(v100) = a5;
  uint64_t v98 = a4;
  uint64_t v99 = a3;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v17;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  unint64_t v18 = sub_10092CEEC(inited);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  uint64_t v22 = UUID.data.getter();
  uint64_t v107 = &type metadata for Data;
  *(void *)&long long v106 = v22;
  *((void *)&v106 + 1) = v23;
  sub_100173E4C(&v106, v105);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v104 = v18;
  sub_10016C700(v105, v19, v21, isUniquelyReferenced_nonNull_native);
  unint64_t v25 = v104;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
    uint64_t v107 = &type metadata for Bool;
    LOBYTE(v106) = 1;
    sub_100173E4C(&v106, v105);
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v25;
    sub_10016C700(v105, v26, v28, v29);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10001D074(v99, (uint64_t)v12, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
  }
  else
  {
    uint64_t v30 = v97;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v97, v12, v13);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
    uint64_t v34 = UUID.uuidString.getter();
    uint64_t v107 = &type metadata for String;
    *(void *)&long long v106 = v34;
    *((void *)&v106 + 1) = v35;
    sub_100173E4C(&v106, v105);
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v25;
    sub_10016C700(v105, v31, v33, v36);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v13);
  }
  uint64_t v37 = v103;
  if ((v100 & 1) == 0)
  {
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;
    uint64_t v107 = &type metadata for Double;
    *(void *)&long long v106 = v98;
    sub_100173E4C(&v106, v105);
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v25;
    sub_10016C700(v105, v38, v40, v41);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v101)
  {
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    uint64_t v107 = &type metadata for Bool;
    LOBYTE(v106) = 1;
    sub_100173E4C(&v106, v105);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v25;
    sub_10016C700(v105, v42, v44, v45);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*((void *)&a9 + 1))
  {
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;
    uint64_t v107 = &type metadata for String;
    long long v106 = a9;
    sub_100173E4C(&v106, v105);
    swift_bridgeObjectRetain();
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v25;
    sub_10016C700(v105, v46, v48, v49);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v50 = v102;
  int64_t v51 = *(void *)(v102 + 16);
  if (v51)
  {
    unint64_t v96 = v25;
    *(void *)&long long v106 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v51, 0);
    uint64_t v52 = v106;
    int64_t v53 = sub_10115FE18(v50);
    int v55 = v54;
    char v57 = v56 & 1;
    uint64_t v101 = v50 + 56;
    uint64_t v100 = IDSRegistrationPropertySupportsBeaconSharingV3;
    uint64_t v99 = IDSRegistrationPropertySupportsBeaconSharingV2;
    uint64_t v98 = IDSRegistrationPropertySupportsSecureLocationsV1;
    uint64_t v97 = (char *)IDSRegistrationPropertySupportsFMDV2;
    do
    {
      if (v53 < 0 || v53 >= 1 << *(unsigned char *)(v50 + 32))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100530220);
      }
      if (((*(void *)(v101 + (((unint64_t)v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
        goto LABEL_34;
      }
      if (*(_DWORD *)(v50 + 36) != v55) {
        goto LABEL_35;
      }
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v59;
      *(void *)&long long v106 = v52;
      unint64_t v62 = *(void *)(v52 + 16);
      unint64_t v61 = *(void *)(v52 + 24);
      if (v62 >= v61 >> 1)
      {
        sub_1000B6ED0(v61 > 1, v62 + 1, 1);
        uint64_t v52 = v106;
      }
      *(void *)(v52 + 16) = v62 + 1;
      uint64_t v63 = v52 + 16 * v62;
      *(void *)(v63 + 32) = v58;
      *(void *)(v63 + 40) = v60;
      uint64_t v50 = v102;
      int64_t v64 = sub_10052CBA0(v53, v55, v57 & 1, v102);
      int64_t v53 = v64;
      int v55 = v65;
      char v57 = v66 & 1;
      --v51;
    }
    while (v51);
    sub_1001A1CB8(v64, v65, v66 & 1);
    uint64_t v67 = sub_101158614(v52);
    swift_release();
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v70 = v69;
    uint64_t v107 = (void *)sub_10000588C(&qword_101647EA0);
    *(void *)&long long v106 = v67;
    sub_100173E4C(&v106, v105);
    unint64_t v71 = v96;
    char v72 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v71;
    sub_10016C700(v105, v68, v70, v72);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v103;
  }
  int64_t v73 = *(void *)(v37 + 16);
  if (v73)
  {
    unint64_t v96 = v25;
    *(void *)&long long v106 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v73, 0);
    uint64_t v74 = v106;
    int64_t v75 = sub_10115FE18(v37);
    int v77 = v76;
    char v79 = v78 & 1;
    uint64_t v102 = v37 + 56;
    uint64_t v101 = IDSRegistrationPropertySupportsBeaconSharingV3;
    uint64_t v100 = IDSRegistrationPropertySupportsBeaconSharingV2;
    uint64_t v99 = IDSRegistrationPropertySupportsSecureLocationsV1;
    uint64_t v98 = IDSRegistrationPropertySupportsFMDV2;
    do
    {
      if (v75 < 0 || v75 >= 1 << *(unsigned char *)(v37 + 32)) {
        goto LABEL_36;
      }
      if (((*(void *)(v102 + (((unint64_t)v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v75) & 1) == 0) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v37 + 36) != v77) {
        goto LABEL_38;
      }
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v81;
      *(void *)&long long v106 = v74;
      unint64_t v84 = *(void *)(v74 + 16);
      unint64_t v83 = *(void *)(v74 + 24);
      if (v84 >= v83 >> 1)
      {
        sub_1000B6ED0(v83 > 1, v84 + 1, 1);
        uint64_t v74 = v106;
      }
      *(void *)(v74 + 16) = v84 + 1;
      uint64_t v85 = v74 + 16 * v84;
      *(void *)(v85 + 32) = v80;
      *(void *)(v85 + 40) = v82;
      uint64_t v37 = v103;
      int64_t v86 = sub_10052CBA0(v75, v77, v79 & 1, v103);
      int64_t v75 = v86;
      int v77 = v87;
      char v79 = v88 & 1;
      --v73;
    }
    while (v73);
    sub_1001A1CB8(v86, v87, v88 & 1);
    uint64_t v89 = sub_101158614(v74);
    swift_release();
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v92 = v91;
    uint64_t v107 = (void *)sub_10000588C(&qword_101647EA0);
    *(void *)&long long v106 = v89;
    sub_100173E4C(&v106, v105);
    unint64_t v93 = v96;
    char v94 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = v93;
    sub_10016C700(v105, v90, v92, v94);
    unint64_t v25 = v104;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v25;
}

uint64_t sub_100530248(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, void (*a7)(void, void), uint64_t a8, char a9, void (*a10)(void, void, void), char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), long long a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, unint64_t a19, uint64_t a20,void (*a21)(void, void, void))
{
  BOOL v144 = (uint64_t (**)(uint64_t))a8;
  uint64_t v143 = a7;
  LODWORD(v142) = a6;
  uint64_t v125 = a5;
  unint64_t v133 = a4;
  Swift::Int v132 = a3;
  uint64_t v131 = a2;
  LODWORD(v130) = a1;
  uint64_t v152 = a21;
  unint64_t v128 = (void (*)(char *, char *, uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v127 = *((void *)v128 - 1);
  __chkstk_darwin(v128);
  uint64_t v126 = (void (*)(char *, uint64_t))((char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v129 = type metadata accessor for DispatchTime();
  uint64_t v119 = *(void *)(v129 - 8);
  uint64_t v22 = __chkstk_darwin(v129);
  uint64_t v117 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v118 = (char *)&v115 - v24;
  uint64_t v135 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v140 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v134 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for DispatchQoS();
  uint64_t v139 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  char v137 = (char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101638CF0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v124 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v123 = (char *)&v115 - v30;
  uint64_t v145 = type metadata accessor for UUID();
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v31 = *(void *)(v146 + 64);
  uint64_t v32 = __chkstk_darwin(v145);
  uint64_t v136 = (char *)&v115 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v32);
  char v122 = (char *)&v115 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v121 = (uint64_t)&v115 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v120 = (uint64_t)&v115 - v38;
  __chkstk_darwin(v37);
  uint64_t v141 = (char *)&v115 - v39;
  uint64_t v147 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v147);
  char v41 = (void ***)((char *)&v115 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v115 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v115 - v47;
  uint64_t v49 = swift_allocObject();
  LODWORD(v148) = a17;
  *(unsigned char *)(v49 + 16) = a17;
  uint64_t v149 = a18;
  *(void *)(v49 + 24) = a18;
  *(void *)(v49 + 32) = a19;
  uint64_t v153 = v49;
  uint64_t v50 = v152;
  *(void *)(v49 + 40) = a20;
  *(void *)(v49 + 48) = v50;
  unint64_t v151 = a19;
  swift_bridgeObjectRetain();
  uint64_t v150 = a20;
  swift_retain();
  int64_t v51 = v50;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v46, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v42);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v50) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v43 + 8);
  v52(v46, v42);
  v52(v48, v42);
  if (v50)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v160 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    NSURL *v41 = aBlock;
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t)v41;
    uint64_t v54 = v148;
    uint64_t v55 = v149;
    unint64_t v56 = v151;
    uint64_t v57 = v150;
    uint64_t v58 = v51;
LABEL_11:
    sub_1005038D0(v53, v54, v55, v56, v57, v58);
    sub_10001DAB4((uint64_t)v41, &qword_101642760);
    return swift_release();
  }
  uint64_t v59 = v51;
  char v60 = v142;
  unint64_t v61 = v143;
  uint64_t v62 = (uint64_t)v144;
  if ((sub_1004FE40C(v142, (uint64_t)v143, (uint64_t)v144) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = xmmword_101342130;
    *(void *)(v69 + 56) = &type metadata for String;
    *(void *)(v69 + 64) = sub_10000B4CC();
    *(void *)(v69 + 32) = v61;
    *(void *)(v69 + 40) = v62;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v160 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    NSURL *v41 = aBlock;
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t)v41;
    uint64_t v54 = v148;
    uint64_t v55 = v149;
    unint64_t v56 = v151;
    uint64_t v57 = v150;
    uint64_t v58 = v59;
    goto LABEL_11;
  }
  uint64_t v148 = a14;
  uint64_t v149 = a13;
  LODWORD(v150) = a12;
  uint64_t v152 = a10;
  char v63 = a11 & 1;
  unint64_t v151 = *(void *)(a16 + 24);
  sub_10000588C(&qword_10163BAB0);
  int64_t v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v146 + 56);
  uint64_t v116 = a16;
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v60;
    *(void *)(inited + 40) = v61;
    *(void *)(inited + 48) = v62;
    char v66 = (void (*)(void, void))v123;
    uint64_t v67 = v145;
    (*v64)(v123, 1, 1, v145);
    swift_bridgeObjectRetain();
    uint64_t v68 = v120;
    sub_100500E44(v130, v131, (uint64_t)v132, (unint64_t)v133, v125, inited, v66, (unint64_t)v152, v120, v63, v150 & 1, v149, v148, a15);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v66, &qword_101638CF0);
    uint64_t v152 = *(void (**)(void, void, void))(v146 + 32);
    v152(v141, v68, v67);
  }
  else
  {
    uint64_t v70 = swift_initStackObject();
    *(_OWORD *)(v70 + 16) = xmmword_101342130;
    *(unsigned char *)(v70 + 32) = v60;
    *(void *)(v70 + 40) = v61;
    *(void *)(v70 + 48) = v62;
    uint64_t v71 = (uint64_t)v124;
    uint64_t v72 = v145;
    (*v64)(v124, 1, 1, v145);
    swift_bridgeObjectRetain();
    int64_t v73 = v122;
    UUID.init()();
    uint64_t v74 = v121;
    sub_1004E7E1C(v130, (uint64_t)v131, v132, v133, v73, v70, v71, (unint64_t)v152, v121, v63, v150 & 1, v149, (uint64_t)v148, a15);
    swift_bridgeObjectRelease();
    uint64_t v75 = v146;
    (*(void (**)(char *, uint64_t))(v146 + 8))(v73, v72);
    sub_10001DAB4(v71, &qword_101638CF0);
    uint64_t v152 = *(void (**)(void, void, void))(v75 + 32);
    v152(v141, v74, v72);
    uint64_t v67 = v72;
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v76 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_101342130;
  char v78 = v141;
  uint64_t v79 = UUID.uuidString.getter();
  uint64_t v81 = v80;
  *(void *)(v77 + 56) = &type metadata for String;
  *(void *)(v77 + 64) = sub_10000B4CC();
  *(void *)(v77 + 32) = v79;
  *(void *)(v77 + 40) = v81;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v82 = v116;
  uint64_t v130 = *(void *)(v116 + 176);
  uint64_t v83 = v146;
  unint64_t v128 = *(void (**)(char *, char *, uint64_t))(v146 + 16);
  unint64_t v151 = v146 + 16;
  unint64_t v84 = v136;
  v128(v136, v78, v67);
  uint64_t v85 = *(unsigned __int8 *)(v83 + 80);
  uint64_t v86 = v83;
  uint64_t v147 = ((v85 + 24) & ~v85) + v31;
  uint64_t v87 = (v85 + 24) & ~v85;
  uint64_t v149 = v87;
  uint64_t v150 = v85 | 7;
  uint64_t v88 = v67;
  unint64_t v89 = (v147 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v82;
  uint64_t v148 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v86 + 32);
  v152(v90 + v87, v84, v88);
  *(void *)(v90 + v89) = v76;
  uint64_t v158 = sub_10052EEE4;
  uint64_t v159 = v90;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v155 = 1107296256;
  BOOL v144 = &v156;
  char v156 = sub_1004B5480;
  uint64_t v157 = &unk_1015C8CF0;
  uint64_t v91 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v92 = v137;
  static DispatchQoS.unspecified.getter();
  uint64_t v160 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v142 = sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  unint64_t v133 = (void (*)(void, void))sub_10000588C((uint64_t *)&unk_10163F350);
  Swift::Int v132 = (void (*)(void, void, void))sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  unint64_t v93 = v134;
  uint64_t v94 = v76;
  uint64_t v95 = v135;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v91);
  unint64_t v96 = *(void (**)(void, void))(v140 + 8);
  v140 += 8;
  uint64_t v143 = v96;
  v96(v93, v95);
  uint64_t v97 = *(NSURL **)(v139 + 8);
  v139 += 8;
  uint64_t v131 = v97;
  ((void (*)(char *, uint64_t))v97)(v92, v138);
  swift_release();
  uint64_t v98 = v136;
  uint64_t v99 = v145;
  uint64_t v100 = v128;
  v128(v136, v141, v145);
  uint64_t v101 = swift_allocObject();
  *(void *)(v101 + 16) = v82;
  uint64_t v102 = v99;
  uint64_t v103 = (void (*)(uint64_t, char *, uint64_t))v152;
  v152(v101 + v149, v98, v102);
  unint64_t v104 = (void (**)(uint64_t))(v101 + v89);
  uint64_t v105 = (void (*)(uint64_t))v153;
  *unint64_t v104 = sub_100545D90;
  v104[1] = v105;
  swift_retain();
  swift_retain();
  uint64_t v127 = v94;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v106 = swift_allocObject();
  *(void *)(v106 + 16) = sub_100545D90;
  *(void *)(v106 + 24) = v105;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v107 = v117;
  static DispatchTime.now()();
  Swift::Int v108 = v118;
  + infix(_:_:)();
  uint64_t v126 = *(void (**)(char *, uint64_t))(v119 + 8);
  v126(v107, v129);
  uint64_t v109 = v136;
  uint64_t v110 = v145;
  v100(v136, v141, v145);
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = v116;
  v103(v111 + v149, v109, v110);
  uint64_t v158 = sub_10052EF48;
  uint64_t v159 = v111;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v155 = 1107296256;
  char v156 = sub_1004B5480;
  uint64_t v157 = &unk_1015C8D90;
  uint64_t v112 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v113 = v137;
  static DispatchQoS.unspecified.getter();
  uint64_t v160 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v112);
  swift_release();
  v143(v93, v95);
  ((void (*)(char *, uint64_t))v131)(v113, v138);
  v126(v108, v129);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v141, v145);
  swift_release();
  return swift_release();
}

uint64_t sub_100531978(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, void (*a6)(void, void, void), char a7, char a8, uint64_t a9, unsigned int (*a10)(uint64_t, uint64_t, uint64_t), long long a11, void (*a12)())
{
  uint64_t v14 = a12;
  uint64_t v15 = dispatch_group_create();
  sub_10000588C(&qword_101647F08);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(void *)(v16 + 16) = _swiftEmptyArrayStorage;
  uint64_t v17 = *(void *)(a5 + 16);
  if (v17)
  {
    char v26 = a7 & 1;
    swift_bridgeObjectRetain();
    unint64_t v18 = (unint64_t *)(a5 + 48);
    unsigned __int8 v25 = a8 & 1;
    do
    {
      uint64_t v19 = (void (*)(void, void))*(v18 - 1);
      unint64_t v20 = *v18;
      int v21 = *((unsigned __int8 *)v18 - 16);
      swift_bridgeObjectRetain();
      dispatch_group_enter(v15);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v22 = v15;
      sub_100530248(a1, a2, a3, a4, (uint64_t)_swiftEmptyDictionarySingleton, v21, v19, v20, 0, a6, v26, v25, a9, a10, a11, v27, v21, (uint64_t)v19, v20,
        v16,
        v22);

      swift_release();
      swift_bridgeObjectRelease_n();
      v18 += 3;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v14 = a12;
  }
  OS_dispatch_group.wait()();
  if (v14)
  {
    sub_10000588C(&qword_101647F10);
    OSAllocatedUnfairLock<A>.stateSnapshot.getter();
    v14();
    swift_bridgeObjectRelease();

    return swift_release();
  }
  else
  {

    return swift_release();
  }
}

uint64_t sub_100531BA4(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void (*a19)(char *, char *, uint64_t))
{
  uint64_t v139 = a8;
  uint64_t v138 = a7;
  LODWORD(v137) = a6;
  uint64_t v120 = a5;
  unint64_t v128 = a4;
  uint64_t v127 = a3;
  uint64_t v126 = a2;
  LODWORD(v125) = a1;
  uint64_t v123 = (void (*)(char *, uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v122 = *((void *)v123 - 1);
  __chkstk_darwin(v123);
  uint64_t v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DispatchTime();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v20 = __chkstk_darwin(v116);
  uint64_t v113 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v114 = (char *)&v108 - v22;
  uint64_t v130 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v135 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v129 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for DispatchQoS();
  uint64_t v134 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v131 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v119 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v118 = (char *)&v108 - v28;
  uint64_t v133 = type metadata accessor for UUID();
  uint64_t v140 = *(void *)(v133 - 8);
  uint64_t v29 = *(void *)(v140 + 64);
  uint64_t v30 = __chkstk_darwin(v133);
  uint64_t v124 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v108 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v117 = (uint64_t)&v108 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v108 - v37;
  __chkstk_darwin(v36);
  uint64_t v136 = (char *)&v108 - v39;
  unint64_t v142 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v142);
  char v41 = (void ***)((char *)&v108 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v108 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v108 - v47;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = a18;
  *(void *)(v49 + 24) = a19;
  uint64_t v144 = v49;
  uint64_t v141 = a18;
  uint64_t v143 = a19;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v46, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v42);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  int64_t v51 = *(void (**)(char *, uint64_t))(v43 + 8);
  v51(v46, v42);
  v51(v48, v42);
  if (v50)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 5;
LABEL_11:
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    NSURL *v41 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100522ED0((uint64_t)v41, v141, (uint64_t)v143, (uint64_t)"Successfully distributed keys: %@", 33);
    sub_10001DAB4((uint64_t)v41, &qword_101642760);
    return swift_release();
  }
  char v52 = v137;
  uint64_t v53 = v138;
  uint64_t v54 = v139;
  if ((sub_1004FE40C(v137, v138, v139) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = sub_10000B4CC();
    *(void *)(v59 + 32) = v53;
    *(void *)(v59 + 40) = v54;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 12;
    goto LABEL_11;
  }
  uint64_t v109 = a15;
  uint64_t v111 = a14;
  uint64_t v112 = a13;
  LODWORD(v141) = a12;
  unint64_t v142 = a10;
  int v110 = a11 & 1;
  uint64_t v108 = a17;
  uint64_t v143 = *(void (**)(char *, char *, uint64_t))(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v52;
    *(void *)(inited + 40) = v53;
    *(void *)(inited + 48) = v54;
    uint64_t v57 = (void (*)(void, void))v118;
    uint64_t v58 = v133;
    (*v55)(v118, 1, 1, v133);
    swift_bridgeObjectRetain();
    *((void *)&v106 + 1) = a16;
    *(void *)&long long v106 = v109;
    sub_100500E44(v125, v126, (uint64_t)v127, (unint64_t)v128, v120, inited, v57, v142, (uint64_t)v38, v110, v141 & 1, v112, v111, v106);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
    v143(v136, v38, v58);
    uint64_t v64 = v58;
  }
  else
  {
    uint64_t v60 = v54;
    uint64_t v61 = swift_initStackObject();
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    *(unsigned char *)(v61 + 32) = v52;
    *(void *)(v61 + 40) = v53;
    *(void *)(v61 + 48) = v60;
    uint64_t v62 = (uint64_t)v119;
    uint64_t v64 = v133;
    (*v55)(v119, 1, 1, v133);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v107 + 1) = a16;
    *(void *)&long long v107 = v109;
    uint64_t v63 = v117;
    sub_1004E7E1C(v125, (uint64_t)v126, v127, v128, v33, v61, v62, v142, v117, v110, v141 & 1, v112, (uint64_t)v111, v107);
    swift_bridgeObjectRelease();
    uint64_t v65 = v140;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v33, v64);
    sub_10001DAB4(v62, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v143(v136, (char *)v63, v64);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  char v66 = (void (*)(void, void, void))Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_101342130;
  uint64_t v68 = v136;
  uint64_t v69 = UUID.uuidString.getter();
  uint64_t v71 = v70;
  *(void *)(v67 + 56) = &type metadata for String;
  *(void *)(v67 + 64) = sub_10000B4CC();
  *(void *)(v67 + 32) = v69;
  *(void *)(v67 + 40) = v71;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v72 = v108;
  unint64_t v128 = *(void (**)(void, void))(v108 + 176);
  uint64_t v73 = v140;
  uint64_t v141 = *(NSObject **)(v140 + 16);
  unint64_t v142 = v140 + 16;
  uint64_t v74 = v124;
  ((void (*)(char *, char *, uint64_t))v141)(v124, v68, v64);
  uint64_t v75 = *(unsigned __int8 *)(v73 + 80);
  uint64_t v76 = v73;
  uint64_t v126 = (NSURL *)(((v75 + 24) & ~v75) + v29);
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v137 = v77;
  uint64_t v139 = v75 | 7;
  unint64_t v78 = ((unint64_t)&v126->super.isa + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v72;
  uint64_t v80 = v79 + v77;
  uint64_t v138 = v76 + 32;
  uint64_t v81 = (void (*)(uint64_t, char *, uint64_t))v143;
  v143((char *)v80, v74, v64);
  uint64_t v127 = v66;
  *(void *)(v79 + v78) = v66;
  uint64_t v149 = sub_10052EEE4;
  uint64_t v150 = v79;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v125 = &v147;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015C98D0;
  uint64_t v82 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v83 = v131;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v121 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v120 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  unint64_t v84 = v129;
  uint64_t v85 = v130;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v135 + 8);
  v135 += 8;
  uint64_t v123 = v86;
  v86(v84, v85);
  uint64_t v87 = *(char **)(v134 + 8);
  v134 += 8;
  uint64_t v119 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v132);
  swift_release();
  uint64_t v88 = v124;
  uint64_t v89 = v133;
  ((void (*)(char *, char *, uint64_t))v141)(v124, v136, v133);
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v72;
  v81(v90 + v137, v88, v89);
  uint64_t v91 = (void (**)(uint64_t))(v90 + v78);
  uint64_t v92 = (void (*)(uint64_t))v144;
  *uint64_t v91 = sub_10054F480;
  v91[1] = v92;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = sub_10054F480;
  *(void *)(v93 + 24) = v92;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v94 = v113;
  static DispatchTime.now()();
  uint64_t v95 = v114;
  + infix(_:_:)();
  uint64_t v118 = *(char **)(v115 + 8);
  uint64_t v96 = v116;
  ((void (*)(char *, uint64_t))v118)(v94, v116);
  uint64_t v97 = v88;
  uint64_t v98 = v88;
  uint64_t v99 = v133;
  ((void (*)(char *, char *, uint64_t))v141)(v98, v136, v133);
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 16) = v72;
  uint64_t v101 = v97;
  uint64_t v102 = v99;
  v143((char *)(v100 + v137), v101, v99);
  uint64_t v149 = sub_10052EF48;
  uint64_t v150 = v100;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015C9970;
  uint64_t v103 = _Block_copy(&aBlock);
  swift_retain();
  unint64_t v104 = v131;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v103);
  swift_release();
  v123(v84, v85);
  ((void (*)(char *, uint64_t))v119)(v104, v132);
  ((void (*)(char *, uint64_t))v118)(v95, v96);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v136, v102);
  swift_release();
  return swift_release();
}

uint64_t sub_100533208()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v60 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101648260);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  uint64_t v63 = v5;
  __chkstk_darwin(v4);
  uint64_t v61 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101648268);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  uint64_t v55 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101648270);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101648278);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  uint64_t v59 = v16;
  __chkstk_darwin(v15);
  uint64_t v53 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *(void **)(v0 + 24);
  uint64_t v19 = v18[18];
  v18[18] = sub_100550704;
  v18[19] = v1;
  swift_retain();
  sub_1000A1534(v19);
  uint64_t v20 = v18[20];
  v18[20] = sub_100550748;
  v18[21] = v1;
  swift_retain();
  sub_1000A1534(v20);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10055077C;
  *(void *)(v21 + 24) = v1;
  uint64_t v22 = v18[22];
  v18[22] = sub_1005507AC;
  v18[23] = v21;
  swift_retain();
  sub_1000A1534(v22);
  uint64_t v23 = v18[24];
  v18[24] = sub_1005507B0;
  v18[25] = v1;
  swift_retain();
  sub_1000A1534(v23);
  uint64_t v24 = v18[26];
  v18[26] = sub_1005507B8;
  v18[27] = v1;
  swift_retain();
  sub_1000A1534(v24);
  uint64_t v25 = v18[30];
  v18[30] = sub_1005507C0;
  v18[31] = v1;
  swift_retain();
  sub_1000A1534(v25);
  uint64_t v26 = v18[32];
  v18[32] = sub_1005507C4;
  v18[33] = v1;
  swift_retain();
  sub_1000A1534(v26);
  uint64_t v27 = *(void **)(v1 + 32);
  uint64_t v28 = v27[10];
  v27[10] = sub_1005507C8;
  v27[11] = v1;
  swift_retain();
  sub_1000A1534(v28);
  uint64_t v29 = v27[12];
  v27[12] = sub_10055080C;
  v27[13] = v1;
  swift_retain();
  sub_1000A1534(v29);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_100550840;
  *(void *)(v30 + 24) = v1;
  uint64_t v31 = v27[14];
  v27[14] = sub_1005507AC;
  v27[15] = v30;
  swift_retain();
  sub_1000A1534(v31);
  uint64_t v32 = v27[20];
  v27[20] = sub_1005508BC;
  v27[21] = v1;
  swift_retain();
  sub_1000A1534(v32);
  uint64_t aBlock = *(void *)(v1 + 432);
  swift_retain();
  sub_10000588C(&qword_10163A500);
  sub_10000588C(&qword_1016489C0);
  sub_100062734((unint64_t *)&unk_101656730, &qword_10163A500);
  Publisher.map<A>(_:)();
  swift_release();
  sub_10000588C(&qword_101648280);
  uint64_t v33 = v54;
  Publishers.Map.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v33);
  sub_100062734(&qword_101648288, &qword_101648270);
  sub_100552954(&qword_101648290, &qword_101648280, (void (*)(void))sub_1005508C4);
  uint64_t v34 = v53;
  uint64_t v35 = v56;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v35);
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_1016482A0, &qword_101648278);
  uint64_t v36 = v58;
  uint64_t v37 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v36);
  *(void *)(v1 + 216) = v37;
  swift_release();
  uint64_t aBlock = sub_100AB2A48();
  v70[0] = *(id *)(v1 + 208);
  id v38 = v70[0];
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v40 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v60, 1, 1, v39);
  id v41 = v38;
  sub_10000588C(&qword_1016482A8);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_1016482B0, &qword_1016482A8);
  sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
  uint64_t v42 = v61;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v40, &qword_10163C6C8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_1016482B8, &qword_101648260);
  uint64_t v43 = v62;
  uint64_t v44 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v43);
  *(void *)(v1 + 224) = v44;
  swift_release();
  swift_weakInit();
  swift_weakInit();
  swift_weakAssign();
  swift_weakAssign();
  sub_100550928((uint64_t)&aBlock, (uint64_t)v70);
  char v71 = 0;
  swift_beginAccess();
  sub_100062604((uint64_t)v70, v1 + 64, &qword_1016482C0);
  swift_endAccess();
  uint64_t v45 = *(void **)(v1 + 176);
  swift_weakInit();
  uint64_t v46 = swift_weakAssign();
  uint64_t v65 = (uint64_t)v45;
  sub_100550984(v46, (uint64_t)v70);
  swift_beginAccess();
  id v47 = v45;
  sub_100062604((uint64_t)v70, v1 + 96, &qword_1016482C8);
  swift_endAccess();
  *(void *)(*(void *)(v1 + 360) + 24) = &off_1015C8310;
  swift_unknownObjectWeakAssign();
  sub_100CCDBFC();
  sub_10052A304();
  uint64_t v48 = *(NSObject **)(v1 + 56);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = sub_100554A64;
  *(void *)(v49 + 24) = v1;
  uint64_t v68 = sub_1003B7AE0;
  uint64_t v69 = v49;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v65 = 1107296256;
  char v66 = sub_1000A70B0;
  uint64_t v67 = &unk_1015CA140;
  char v50 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v48, v50);
  _Block_release(v50);
  LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v48) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100533CC8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a2;
  LODWORD(v48) = a1;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = dispatch_group_create();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v47 = v8 + 16;
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  uint64_t v10 = (void *)(v9 + 16);
  dispatch_group_enter(v7);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v8;
  v11[3] = v9;
  void v11[4] = v7;
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v46 = *v13;
  v46(v6, 1, 1, v12);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = sub_100551A2C;
  *(void *)(v14 + 40) = v11;
  *(unsigned char *)(v14 + 48) = (_BYTE)v48;
  *(void *)(v14 + 56) = v49;
  *(void *)(v14 + 64) = a3;
  swift_retain();
  uint64_t v49 = v9;
  uint64_t v15 = (uint64_t)v6;
  swift_retain();
  uint64_t v16 = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1008F5E44(v15, (uint64_t)&unk_101648378, v14);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  if (!*v10)
  {
    uint64_t v42 = v13;
    uint64_t v43 = v12;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v8 + 24);
    if (v21)
    {
      uint64_t v39 = v15;
      uint64_t v44 = v8;
      uint64_t v40 = *(void *)(v8 + 16);
      uint64_t v45 = v21;
      swift_bridgeObjectRetain();
      uint64_t v22 = dispatch_group_create();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = 0;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = 0;
      dispatch_group_enter(v22);
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = v23;
      v25[3] = v24;
      v25[4] = v22;
      uint64_t v26 = qword_1016368B8;
      swift_retain_n();
      swift_retain_n();
      uint64_t v48 = v22;
      if (v26 != -1) {
        swift_once();
      }
      sub_10000588C(&qword_101648380);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v27 = v50;
      uint64_t v47 = v23;
      id v41 = (uint64_t *)(v23 + 16);
      if (v50)
      {
        static os_log_type_t.debug.getter();
        if (qword_101637280 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        swift_beginAccess();
        *(void *)(v23 + 16) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v28 = v48;
        dispatch_group_leave(v48);

        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10000588C(&qword_101648040);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v29 = v50;
        if (v51)
        {
          sub_10000588C(&qword_101638D40);
          swift_willThrowTypedImpl();
          uint64_t v50 = v29;
          swift_errorRetain();
          swift_errorRetain();
          swift_willThrowTypedImpl();
          swift_beginAccess();
          *(void *)(v24 + 16) = v29;
          swift_errorRelease();
          uint64_t v28 = v48;
          dispatch_group_leave(v48);
          sub_10015B4A8(v29, 1);
          sub_10015B4A8(v29, 1);
        }
        else
        {
          sub_1004E3560(v50);
          uint64_t v31 = v30;
          sub_10015B4A8(v29, 0);
          uint64_t v32 = sub_101158CCC(v31);
          swift_bridgeObjectRelease();
          uint64_t v33 = v39;
          v46((char *)v39, 1, 1, v43);
          uint64_t v34 = (void *)swift_allocObject();
          v34[2] = 0;
          v34[3] = 0;
          v34[4] = v32;
          v34[5] = sub_100551BD0;
          v34[6] = v25;
          swift_retain();
          sub_1008F5E44(v33, (uint64_t)&unk_101648388, (uint64_t)v34);
          uint64_t v28 = v48;

          swift_release();
        }
        swift_release();
        swift_release();
        swift_release();
      }
      OS_dispatch_group.wait()();
      swift_beginAccess();
      if (*(void *)(v24 + 16))
      {
        uint64_t v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v24;
        swift_errorRetain();
        swift_bridgeObjectRelease();
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_101342130;
        uint64_t v36 = _convertErrorToNSError(_:)();
        *(void *)(v35 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
        *(void *)(v35 + 64) = sub_10033149C((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
        *(void *)(v35 + 32) = v36;
        os_log(_:dso:log:_:_:)();

        swift_errorRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_5;
      }
      uint64_t v37 = v41;
      swift_beginAccess();
      uint64_t v38 = *v37;
      if (*v37)
      {
        swift_bridgeObjectRetain();
        char v19 = sub_100DC6054(v40, v45, v38);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v19 & 1;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_release();
    goto LABEL_6;
  }
  swift_errorRetain();
  static os_log_type_t.error.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = _convertErrorToNSError(_:)();
  *(void *)(v17 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
  *(void *)(v17 + 64) = sub_10033149C((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
  *(void *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)();

  swift_errorRelease();
  swift_release();
  swift_release();
LABEL_5:
  swift_bridgeObjectRelease();
LABEL_6:
  char v19 = 0;
  return v19 & 1;
}

uint64_t sub_10053466C(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(char *, uint64_t), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(char *, uint64_t, uint64_t), char a11, char a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,void (*a21)(char *, uint64_t, uint64_t))
{
  uint64_t v137 = a8;
  uint64_t v136 = a7;
  LODWORD(v135) = a6;
  uint64_t v118 = a5;
  uint64_t v126 = a4;
  uint64_t v125 = a3;
  uint64_t v124 = a2;
  LODWORD(v123) = a1;
  uint64_t v121 = (void (*)(char *, uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v120 = *((void *)v121 - 1);
  __chkstk_darwin(v121);
  uint64_t v119 = (void (*)(char *, char *, uint64_t))((char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v122 = type metadata accessor for DispatchTime();
  uint64_t v112 = *(void *)(v122 - 8);
  uint64_t v22 = __chkstk_darwin(v122);
  int v110 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v111 = (char *)&v108 - v24;
  uint64_t v128 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v133 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v127 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for DispatchQoS();
  uint64_t v132 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v130 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101638CF0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v117 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v116 = (char *)&v108 - v30;
  uint64_t v138 = type metadata accessor for UUID();
  uint64_t v139 = *(void *)(v138 - 8);
  uint64_t v31 = *(void *)(v139 + 64);
  uint64_t v32 = __chkstk_darwin(v138);
  uint64_t v129 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v115 = (char *)&v108 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v114 = (uint64_t)&v108 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v113 = (uint64_t)&v108 - v38;
  __chkstk_darwin(v37);
  uint64_t v134 = (char *)&v108 - v39;
  uint64_t v140 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v140);
  id v41 = (void ***)((char *)&v108 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v108 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v108 - v47;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = a18;
  LODWORD(v141) = a19;
  *(unsigned char *)(v49 + 24) = a19;
  uint64_t v142 = a20;
  *(void *)(v49 + 32) = a20;
  *(void *)(v49 + 40) = a21;
  uint64_t v144 = v49;
  swift_bridgeObjectRetain();
  uint64_t v143 = a21;
  swift_bridgeObjectRetain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v46, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v42);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v51 = *(void (**)(char *, uint64_t))(v43 + 8);
  v51(v46, v42);
  v51(v48, v42);
  if (v50)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t *v41 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100523AB8((uint64_t)v41, a18, v141, v142, (unint64_t)v143);
    sub_10001DAB4((uint64_t)v41, &qword_101642760);
    return swift_release();
  }
  char v52 = (char)v135;
  uint64_t v53 = v136;
  uint64_t v54 = v137;
  if ((sub_1004FE40C(v135, v136, v137) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_101342130;
    *(void *)(v60 + 56) = &type metadata for String;
    *(void *)(v60 + 64) = sub_10000B4CC();
    *(void *)(v60 + 32) = v53;
    *(void *)(v60 + 40) = v54;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v109 = a16;
  uint64_t v140 = a15;
  uint64_t v143 = a10;
  LODWORD(v141) = a11 & 1;
  uint64_t v108 = a17;
  uint64_t v142 = *(void *)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v52;
    *(void *)(inited + 40) = v53;
    *(void *)(inited + 48) = v54;
    uint64_t v57 = (void (*)(void, void))v116;
    uint64_t v58 = v138;
    (*v55)(v116, 1, 1, v138);
    swift_bridgeObjectRetain();
    *((void *)&v106 + 1) = v109;
    *(void *)&long long v106 = v140;
    uint64_t v59 = v113;
    sub_100500E44(v123, v124, (uint64_t)v125, (unint64_t)v126, v118, inited, v57, (unint64_t)v143, v113, v141, a12 & 1, a13, a14, v106);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 32);
    v143(v134, v59, v58);
  }
  else
  {
    uint64_t v61 = swift_initStackObject();
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    *(unsigned char *)(v61 + 32) = v52;
    *(void *)(v61 + 40) = v53;
    *(void *)(v61 + 48) = v54;
    uint64_t v62 = (uint64_t)v117;
    uint64_t v63 = v138;
    (*v55)(v117, 1, 1, v138);
    swift_bridgeObjectRetain();
    uint64_t v64 = v115;
    UUID.init()();
    *((void *)&v107 + 1) = v109;
    *(void *)&long long v107 = v140;
    uint64_t v65 = v114;
    sub_1004E7E1C(v123, (uint64_t)v124, v125, (void (*)(void, void))v126, v64, v61, v62, (unint64_t)v143, v114, v141, a12 & 1, a13, (uint64_t)a14, v107);
    swift_bridgeObjectRelease();
    uint64_t v66 = v139;
    (*(void (**)(char *, uint64_t))(v139 + 8))(v64, v63);
    sub_10001DAB4(v62, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
    v143(v134, v65, v63);
    uint64_t v58 = v63;
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v67 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_101342130;
  uint64_t v69 = v134;
  uint64_t v70 = UUID.uuidString.getter();
  uint64_t v72 = v71;
  *(void *)(v68 + 56) = &type metadata for String;
  *(void *)(v68 + 64) = sub_10000B4CC();
  *(void *)(v68 + 32) = v70;
  *(void *)(v68 + 40) = v72;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v73 = v108;
  uint64_t v120 = *(void *)(v108 + 176);
  uint64_t v74 = v139;
  uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  uint64_t v142 = v139 + 16;
  uint64_t v75 = v129;
  v119(v129, v69, v58);
  uint64_t v76 = *(unsigned __int8 *)(v74 + 80);
  uint64_t v77 = v74;
  uint64_t v136 = ((v76 + 24) & ~v76) + v31;
  uint64_t v78 = (v76 + 24) & ~v76;
  uint64_t v140 = v78;
  uint64_t v141 = v76 | 7;
  uint64_t v79 = v58;
  unint64_t v80 = (v136 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v73;
  uint64_t v137 = v77 + 32;
  v143((char *)(v81 + v78), (uint64_t)v75, v79);
  *(void *)(v81 + v80) = v67;
  uint64_t v149 = sub_10052EEE4;
  uint64_t v150 = v81;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v135 = &v147;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015C9FB0;
  uint64_t v82 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v83 = v130;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v125 = (void (*)(void, void, void))sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v124 = (NSURL *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v123 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  unint64_t v84 = v127;
  uint64_t v85 = v67;
  uint64_t v86 = v128;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  uint64_t v87 = *(void (**)(char *, uint64_t))(v133 + 8);
  v133 += 8;
  uint64_t v126 = v87;
  v87(v84, v86);
  uint64_t v88 = *(void (**)(char *, uint64_t))(v132 + 8);
  v132 += 8;
  uint64_t v121 = v88;
  v88(v83, v131);
  swift_release();
  uint64_t v89 = v129;
  uint64_t v90 = v138;
  uint64_t v91 = v119;
  v119(v129, v134, v138);
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v73;
  uint64_t v93 = v90;
  uint64_t v94 = (void (*)(uint64_t, char *, uint64_t))v143;
  v143((char *)(v92 + v140), (uint64_t)v89, v93);
  uint64_t v95 = (void (**)(uint64_t))(v92 + v80);
  uint64_t v96 = (void (*)(uint64_t))v144;
  *uint64_t v95 = sub_100550610;
  v95[1] = v96;
  swift_retain();
  swift_retain();
  uint64_t v118 = v85;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = sub_100550610;
  *(void *)(v97 + 24) = v96;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v98 = v110;
  static DispatchTime.now()();
  uint64_t v99 = v111;
  + infix(_:_:)();
  uint64_t v117 = *(char **)(v112 + 8);
  ((void (*)(char *, uint64_t))v117)(v98, v122);
  uint64_t v100 = v129;
  uint64_t v101 = v138;
  v91(v129, v134, v138);
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = v108;
  v94(v102 + v140, v100, v101);
  uint64_t v149 = sub_10052EF48;
  uint64_t v150 = v102;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015CA050;
  uint64_t v103 = _Block_copy(&aBlock);
  swift_retain();
  unint64_t v104 = v130;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v103);
  swift_release();
  v126(v84, v86);
  v121(v104, v131);
  ((void (*)(char *, uint64_t))v117)(v99, v122);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v134, v138);
  swift_release();
  return swift_release();
}

unint64_t sub_100535D24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v52 = a5;
  int v53 = a6;
  uint64_t v49 = a4;
  uint64_t v51 = a3;
  int v50 = a2;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  unint64_t v14 = sub_10092CEEC(inited);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  uint64_t v57 = &type metadata for Bool;
  LOBYTE(v56) = 1;
  sub_100173E4C(&v56, v55);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v54 = v14;
  sub_10016C700(v55, v15, v17, isUniquelyReferenced_nonNull_native);
  unint64_t v19 = v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = UUID.data.getter();
  uint64_t v57 = &type metadata for Data;
  *(void *)&long long v56 = v23;
  *((void *)&v56 + 1) = v24;
  sub_100173E4C(&v56, v55);
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v54 = v19;
  sub_10016C700(v55, v20, v22, v25);
  unint64_t v26 = v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
    uint64_t v57 = &type metadata for Bool;
    LOBYTE(v56) = 1;
    sub_100173E4C(&v56, v55);
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = v26;
    sub_10016C700(v55, v27, v29, v30);
    unint64_t v26 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10001D074(v51, (uint64_t)v8, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    uint64_t v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v48, v8, v9);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
    uint64_t v35 = UUID.uuidString.getter();
    uint64_t v57 = &type metadata for String;
    *(void *)&long long v56 = v35;
    *((void *)&v56 + 1) = v36;
    sub_100173E4C(&v56, v55);
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = v26;
    sub_10016C700(v55, v32, v34, v37);
    unint64_t v26 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v31, v9);
    if (v52) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
  if ((v52 & 1) == 0)
  {
LABEL_7:
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;
    uint64_t v57 = &type metadata for Double;
    *(void *)&long long v56 = v49;
    sub_100173E4C(&v56, v55);
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = v26;
    sub_10016C700(v55, v38, v40, v41);
    unint64_t v26 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  if (v53)
  {
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    uint64_t v57 = &type metadata for Bool;
    LOBYTE(v56) = 1;
    sub_100173E4C(&v56, v55);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = v26;
    sub_10016C700(v55, v42, v44, v45);
    unint64_t v26 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v26;
}

uint64_t sub_1005361E0(int a1, NSObject *a2, uint64_t a3, unint64_t a4, int a5, void (*a6)(char *, char *, uint64_t), uint64_t a7, int a8, uint64_t a9, uint64_t a10, char a11, char a12, void (*a13)(void, void), unint64_t a14)
{
  LODWORD(v99) = a8;
  uint64_t v102 = a6;
  uint64_t v103 = a7;
  LODWORD(v101) = a5;
  unint64_t v100 = a4;
  uint64_t v97 = a2;
  uint64_t v98 = a3;
  int v96 = a1;
  uint64_t v84 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = (void (*)(char *, uint64_t, uint64_t))sub_10000588C(&qword_101642760);
  __chkstk_darwin(v105);
  unint64_t v104 = (uint64_t *)((char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v90 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for DispatchQoS();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v89 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for DispatchTime();
  uint64_t v80 = *(void *)(v86 - 8);
  uint64_t v19 = __chkstk_darwin(v86);
  uint64_t v78 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v79 = (char *)&v77 - v21;
  uint64_t v81 = type metadata accessor for UUID();
  unint64_t v88 = *(void *)(v81 - 8);
  uint64_t v22 = *(void *)(v88 + 64);
  uint64_t v23 = __chkstk_darwin(v81);
  uint64_t v87 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v95 = (uint64_t)&v77 - v25;
  __chkstk_darwin(v24);
  long long v107 = (char *)&v77 - v26;
  uint64_t v27 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v77 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v77 - v32;
  uint64_t v34 = type metadata accessor for DispatchPredicate();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  char v37 = (uint64_t *)((char *)&v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v106 = v14;
  uint64_t v38 = *(void **)(v14 + 176);
  *char v37 = v38;
  (*(void (**)(void *, void, uint64_t))(v35 + 104))(v37, enum case for DispatchPredicate.notOnQueue(_:), v34);
  uint64_t v39 = v38;
  uint64_t v40 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v35 + 8))(v37, v34);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  dispatch_queue_t v85 = v39;
  uint64_t v40 = (uint64_t)a13;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v31, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v27);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v28 + 8);
  v42(v31, v27);
  v42(v33, v27);
  if (v41)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v108 = 5;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v43 = (uint64_t)v104;
      *unint64_t v104 = aBlock;
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t))v40)(v43);
      return sub_10001DAB4(v43, &qword_101642760);
    }
LABEL_8:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v45 = v106;
  uint64_t v46 = v95;
  sub_100504030(v96, v97, v98, v100, (uint64_t)v102, v103, v99 & 1, v95, a9, a10, a11 & 1, a12 & 1);
  unint64_t v47 = v88;
  uint64_t v48 = v88 + 32;
  uint64_t v105 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
  uint64_t v99 = a13;
  unint64_t v100 = a14;
  uint64_t v49 = v107;
  uint64_t v50 = v81;
  v105(v107, v46, v81);
  uint64_t v103 = v48;
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v104 = (void *)Future.init()();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v47 += 16;
  uint64_t v102 = v51;
  int v52 = v87;
  v51(v87, v49, v50);
  uint64_t v53 = *(unsigned __int8 *)(v47 + 64);
  uint64_t v54 = (v53 + 24) & ~v53;
  uint64_t v101 = v53 | 7;
  uint64_t v97 = (v54 + v22);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v45;
  uint64_t v98 = v54;
  v105((char *)(v55 + v54), (uint64_t)v52, v50);
  long long v56 = (void *)(v55 + ((v54 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v57 = v99;
  unint64_t v58 = v100;
  *long long v56 = v99;
  v56[1] = v58;
  swift_retain();
  swift_retain();
  uint64_t v59 = v104;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v57;
  *(void *)(v60 + 24) = v58;
  swift_retain();
  uint64_t v61 = v59;
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  unint64_t v100 = v47;
  v102(v52, v107, v50);
  uint64_t v62 = (v53 + 16) & ~v53;
  unint64_t v63 = (v22 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = swift_allocObject();
  v105((char *)(v64 + v62), (uint64_t)v52, v50);
  uint64_t v65 = v106;
  *(void *)(v64 + v63) = v106;
  *(void *)(v64 + ((v63 + 15) & 0xFFFFFFFFFFFFFFF8)) = v61;
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = sub_100550F38;
  *(void *)(v66 + 24) = v64;
  uint64_t v113 = sub_1003B7AE0;
  uint64_t v114 = v66;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  uint64_t v111 = sub_1000A70B0;
  uint64_t v112 = &unk_1015CA2A8;
  uint64_t v67 = _Block_copy(&aBlock);
  uint64_t v68 = v65;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v85, v67);
  _Block_release(v67);
  LOBYTE(v67) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v67)
  {
    __break(1u);
  }
  else
  {
    uint64_t v69 = v78;
    static DispatchTime.now()();
    uint64_t v70 = v79;
    + infix(_:_:)();
    uint64_t v99 = *(void (**)(void, void))(v80 + 8);
    v99(v69, v86);
    uint64_t v71 = v87;
    v102(v87, v107, v50);
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = v68;
    v105((char *)(v72 + v98), (uint64_t)v71, v50);
    uint64_t v113 = sub_100550F50;
    uint64_t v114 = v72;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v110 = 1107296256;
    uint64_t v111 = sub_1004B5480;
    uint64_t v112 = &unk_1015CA2F8;
    uint64_t v73 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v74 = v89;
    static DispatchQoS.unspecified.getter();
    uint64_t v108 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v75 = v90;
    uint64_t v76 = v94;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v73);
    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v74, v92);
    v99(v70, v86);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v107, v50);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100537234(int a1, NSObject *a2, uint64_t a3, unint64_t a4, int a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t), int a8, uint64_t a9, uint64_t a10, char a11, char a12, uint64_t a13)
{
  LODWORD(v95) = a8;
  uint64_t v98 = a6;
  uint64_t v99 = a7;
  LODWORD(v97) = a5;
  unint64_t v96 = a4;
  uint64_t v93 = a2;
  uint64_t v94 = a3;
  LODWORD(v92) = a1;
  uint64_t v79 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  dispatch_queue_t v85 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DispatchQoS();
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v84 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for DispatchTime();
  uint64_t v75 = *(void *)(v80 - 8);
  uint64_t v16 = __chkstk_darwin(v80);
  uint64_t v73 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v74 = (char *)&v73 - v18;
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v83 - 8);
  uint64_t v19 = *(void *)(v82 + 64);
  uint64_t v20 = __chkstk_darwin(v83);
  uint64_t v76 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v90 = (uint64_t)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v101 = (char *)&v73 - v23;
  uint64_t v91 = (void (*)(char *, uint64_t))sub_10000588C(&qword_101642760);
  __chkstk_darwin(v91);
  uint64_t v25 = (void ***)((char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v73 - v31;
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char **)((char *)&v73 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v100 = a13;
  char v37 = *(void **)(a13 + 176);
  *uint64_t v36 = v37;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v36, enum case for DispatchPredicate.notOnQueue(_:), v33);
  dispatch_queue_t v81 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v34 + 8))(v36, v33);
  if ((v37 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v30, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v26);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v27 + 8);
  v39(v30, v26);
  v39(v32, v26);
  if (v38)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v102 = 5;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      void *v25 = aBlock;
      swift_storeEnumTagMultiPayload();
      sub_101178578((uint64_t)v25);
      return sub_10001DAB4((uint64_t)v25, &qword_101642760);
    }
LABEL_8:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v41 = v100;
  uint64_t v42 = v90;
  sub_100504030(v92, v93, v94, v96, v98, (uint64_t)v99, v95 & 1, v90, a9, a10, a11 & 1, a12 & 1);
  uint64_t v43 = v82;
  uint64_t v44 = v82 + 32;
  uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
  uint64_t v45 = v101;
  uint64_t v46 = v83;
  v99(v101, v42, v83);
  uint64_t v95 = v44;
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v47 = Future.init()();
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v43 += 16;
  uint64_t v97 = v48;
  uint64_t v98 = v47;
  uint64_t v49 = v76;
  v48(v76, v45, v46);
  uint64_t v50 = *(unsigned __int8 *)(v43 + 64);
  uint64_t v51 = v41;
  int v52 = ((v50 + 24) & ~v50);
  unint64_t v96 = v50 | 7;
  uint64_t v92 = (char *)v52 + v19;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = v51;
  uint64_t v93 = v52;
  v99((char *)v52 + v53, (uint64_t)v49, v46);
  uint64_t v54 = (uint64_t (**)(uint64_t))(v53 + (((unint64_t)&v52->isa + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v54 = sub_101178578;
  v54[1] = 0;
  uint64_t v55 = v51;
  swift_retain();
  uint64_t v56 = v98;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_101178578;
  *(void *)(v57 + 24) = 0;
  uint64_t v58 = v56;
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v94 = v43;
  v97(v49, v101, v46);
  uint64_t v59 = (v50 + 16) & ~v50;
  unint64_t v60 = (v19 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = swift_allocObject();
  v99((char *)(v61 + v59), (uint64_t)v49, v46);
  *(void *)(v61 + v60) = v55;
  *(void *)(v61 + ((v60 + 15) & 0xFFFFFFFFFFFFFFF8)) = v58;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = sub_100550F38;
  *(void *)(v62 + 24) = v61;
  long long v107 = sub_1003B7AE0;
  uint64_t v108 = v62;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v104 = 1107296256;
  uint64_t v105 = sub_1000A70B0;
  uint64_t v106 = &unk_1015CA640;
  unint64_t v63 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v81, v63);
  _Block_release(v63);
  LOBYTE(v63) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v63)
  {
    __break(1u);
  }
  else
  {
    uint64_t v64 = v55;
    uint64_t v65 = v73;
    static DispatchTime.now()();
    uint64_t v66 = v74;
    + infix(_:_:)();
    uint64_t v91 = *(void (**)(char *, uint64_t))(v75 + 8);
    v91(v65, v80);
    uint64_t v67 = v83;
    v97(v49, v101, v83);
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v64;
    v99((char *)v93 + v68, (uint64_t)v49, v67);
    long long v107 = sub_100550F50;
    uint64_t v108 = v68;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v104 = 1107296256;
    uint64_t v105 = sub_1004B5480;
    uint64_t v106 = &unk_1015CA690;
    uint64_t v69 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v70 = v84;
    static DispatchQoS.unspecified.getter();
    uint64_t v102 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v71 = v85;
    uint64_t v72 = v89;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v69);
    swift_release();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v70, v87);
    v91(v66, v80);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v101, v67);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10053826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v128 = a2;
  uint64_t v118 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v118);
  uint64_t v121 = (uint64_t)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareInstruction();
  uint64_t v104 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v106 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = v10;
  __chkstk_darwin(v9);
  uint64_t v103 = (uint64_t)&v101 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v114 = *(void *)(v12 - 8);
  uint64_t v115 = v12;
  __chkstk_darwin(v12);
  uint64_t v113 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101660BF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for ShareRecord();
  *(void *)&long long v124 = *(void *)(v125 - 8);
  uint64_t v17 = __chkstk_darwin(v125);
  uint64_t v110 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v109 = (uint64_t)&v101 - v20;
  __chkstk_darwin(v19);
  uint64_t v116 = (char *)&v101 - v21;
  uint64_t v22 = swift_allocObject();
  uint64_t v119 = a3;
  uint64_t v120 = a4;
  *(void *)(v22 + 16) = a3;
  *(void *)(v22 + 24) = a4;
  uint64_t v122 = v22;
  swift_retain();
  int v123 = static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  uint64_t v126 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v23 = swift_allocObject();
  long long v107 = xmmword_101347BA0;
  *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
  uint64_t v24 = a1 + *(int *)(v8 + 24);
  uint64_t v25 = *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v26 = a1;
  uint64_t v108 = v24;
  uint64_t v27 = v24 + v25;
  uint64_t v28 = UUID.uuidString.getter();
  uint64_t v30 = v29;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v31 = sub_10000B4CC();
  *(void *)(v23 + 64) = v31;
  *(void *)(v23 + 32) = v28;
  *(void *)(v23 + 40) = v30;
  uint64_t v32 = *(int *)(v8 + 32);
  uint64_t v117 = v26;
  uint64_t v33 = v26 + v32;
  uint64_t v34 = UUID.uuidString.getter();
  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v31;
  unint64_t v127 = v31;
  *(void *)(v23 + 72) = v34;
  *(void *)(v23 + 80) = v35;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v36 = v128;
  sub_1004FEABC(v33, (uint64_t)v16);
  char v37 = (int *)v125;
  int v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v16, 1, v125);
  uint64_t v111 = v33;
  uint64_t v112 = v8;
  if (v38 != 1)
  {
    uint64_t v73 = (uint64_t)v116;
    sub_100551764((uint64_t)v16, (uint64_t)v116, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    static os_log_type_t.default.getter();
    uint64_t v74 = swift_allocObject();
    long long v124 = xmmword_101342130;
    *(_OWORD *)(v74 + 16) = xmmword_101342130;
    sub_100552A0C(v73, v109, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v75 = String.init<A>(describing:)();
    unint64_t v76 = v127;
    *(void *)(v74 + 56) = &type metadata for String;
    *(void *)(v74 + 64) = v76;
    *(void *)(v74 + 32) = v75;
    *(void *)(v74 + 40) = v77;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v78 = (uint64_t *)(v73 + v37[10]);
    uint64_t v80 = *v78;
    unint64_t v79 = v78[1];
    uint64_t v81 = HIBYTE(v79) & 0xF;
    if ((v79 & 0x2000000000000000) == 0) {
      uint64_t v81 = v80 & 0xFFFFFFFFFFFFLL;
    }
    if (v81)
    {
      static os_log_type_t.default.getter();
      uint64_t v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = v124;
      *(void *)(v82 + 56) = &type metadata for String;
      *(void *)(v82 + 64) = v76;
      *(void *)(v82 + 32) = v80;
      *(void *)(v82 + 40) = v79;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v83 = v121;
      sub_100552A0C(v73, v121, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      swift_storeEnumTagMultiPayload();
      sub_1004FE668(v83, v119, v120);
      sub_10001DAB4(v83, &qword_101648068);
      uint64_t v49 = (char *)v73;
      goto LABEL_18;
    }
    uint64_t v85 = *(void *)(v128 + 416);
    BOOL v86 = sub_1010E6390(v73 + v37[7], 0);
    uint64_t v87 = v117;
    uint64_t v88 = v103;
    uint64_t v89 = sub_100552A0C(v117, v103, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
    if (v86)
    {
      __chkstk_darwin(v89);
      *(&v101 - 4) = v85;
      *((unsigned char *)&v101 - 24) = 0;
      *(&v101 - 2) = v90;
      uint64_t v91 = (uint64_t)v113;
      uint64_t v92 = v115;
      OS_dispatch_queue.sync<A>(execute:)();
      BOOL v93 = sub_1010E6390(v91, 0);
      uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
      v94(v91, v92);
      sub_100552C2C(v88, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
      if (v93)
      {
        static Date.trustedNow.getter(v91);
        uint64_t v95 = v111;
        sub_1010E5A24(v111, v91, 0);
        v94(v91, v92);
        sub_1010E6004(v95, 1);
        sub_1004FEBCC(v87, v128);
        uint64_t v49 = v116;
LABEL_17:
        uint64_t v99 = v121;
        sub_100552A0C((uint64_t)v49, v121, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        swift_storeEnumTagMultiPayload();
        sub_1004FE668(v99, v119, v120);
        sub_10001DAB4(v99, &qword_101648068);
        goto LABEL_18;
      }
    }
    else
    {
      sub_100552C2C(v88, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
    }
    static os_log_type_t.default.getter();
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = v124;
    uint64_t v49 = v116;
LABEL_16:
    uint64_t v96 = UUID.uuidString.getter();
    unint64_t v97 = v127;
    *(void *)(v84 + 56) = &type metadata for String;
    *(void *)(v84 + 64) = v97;
    *(void *)(v84 + 32) = v96;
    *(void *)(v84 + 40) = v98;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  sub_10001DAB4((uint64_t)v16, &qword_101660BF0);
  static os_log_type_t.default.getter();
  uint64_t v39 = v33;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v107;
  uint64_t v102 = v27;
  uint64_t v41 = UUID.uuidString.getter();
  unint64_t v42 = v127;
  *(void *)(v40 + 56) = &type metadata for String;
  *(void *)(v40 + 64) = v42;
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = v43;
  uint64_t v44 = UUID.uuidString.getter();
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v42;
  *(void *)(v40 + 72) = v44;
  *(void *)(v40 + 80) = v45;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v46 = v36;
  uint64_t v47 = *(void *)(v36 + 152);
  type metadata accessor for BeaconKeyManager(0);
  *(void *)&long long v124 = v47;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v48 = sub_101311650(v108, v129);
  swift_release();
  uint64_t v49 = v110;
  uint64_t v50 = &v110[v37[5]];
  uint64_t v51 = type metadata accessor for UUID();
  int v52 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
  v52(v50, v39, v51);
  v52(&v49[v37[6]], v102, v51);
  static Date.trustedNow.getter((uint64_t)&v49[v37[7]]);
  uint64_t v53 = v112;
  uint64_t v54 = v117;
  sub_10001D074(v117 + *(int *)(v112 + 36), (uint64_t)&v49[v37[8]], (uint64_t *)&unk_10163AC90);
  uint64_t v55 = v54 + *(int *)(v53 + 28);
  char v56 = *(unsigned char *)v55;
  *(_OWORD *)uint64_t v49 = xmmword_101348180;
  uint64_t v57 = &v49[v37[9]];
  *uint64_t v57 = v56;
  uint64_t v58 = *(void *)(v55 + 16);
  *((void *)v57 + 1) = *(void *)(v55 + 8);
  *((void *)v57 + 2) = v58;
  uint64_t v59 = &v49[v37[10]];
  *(void *)uint64_t v59 = 0;
  *((void *)v59 + 1) = 0xE000000000000000;
  *(void *)&v49[v37[11]] = v48;
  v49[v37[12]] = 1;
  uint64_t v60 = *(void *)(v46 + 416);
  __chkstk_darwin(v58);
  *(&v101 - 4) = v60;
  *((unsigned char *)&v101 - 24) = 0;
  *(&v101 - 2) = v39;
  swift_bridgeObjectRetain();
  uint64_t v61 = (uint64_t)v113;
  uint64_t v62 = v115;
  OS_dispatch_queue.sync<A>(execute:)();
  LOBYTE(v53) = sub_1010E6390(v61, 0);
  unint64_t v63 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
  v63(v61, v62);
  if ((v53 & 1) == 0)
  {
    static os_log_type_t.default.getter();
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_101342130;
    goto LABEL_16;
  }
  uint64_t v64 = v54;
  static Date.trustedNow.getter(v61);
  uint64_t v65 = v111;
  sub_1010E5A24(v111, v61, 0);
  v63(v61, v62);
  sub_1010E6004(v65, 1);
  uint64_t v66 = v64;
  uint64_t v67 = v106;
  sub_100552A0C(v66, v106, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
  unint64_t v68 = (*(unsigned __int8 *)(v104 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
  unint64_t v69 = (v105 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v128;
  sub_100551764(v67, v70 + v68, (uint64_t (*)(void))type metadata accessor for ShareInstruction);
  uint64_t v71 = (uint64_t (**)(uint64_t))(v70 + v69);
  uint64_t v72 = (uint64_t (*)(uint64_t))v122;
  *uint64_t v71 = sub_10054D9A8;
  v71[1] = v72;
  swift_retain();
  swift_retain();
  sub_100ABD790((uint64_t)v49, 0, (uint64_t)sub_10054DE0C, v70);
  swift_release();
LABEL_18:
  sub_100552C2C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  return swift_release();
}

uint64_t sub_1005390C0(int a1, NSURL *a2, void (*a3)(void, void), uint64_t (**a4)(uint64_t a1), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(char *, uint64_t, uint64_t), char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), long long a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, void (*a20)(char *, uint64_t, uint64_t))
{
  uint64_t v136 = a8;
  uint64_t v135 = a7;
  LODWORD(v134) = a6;
  uint64_t v116 = a5;
  long long v124 = a4;
  int v123 = a3;
  uint64_t v122 = a2;
  LODWORD(v121) = a1;
  uint64_t v119 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v118 = *(void (**)(char *, uint64_t))(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (void (*)(char *, char *, uint64_t))((char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v120 = type metadata accessor for DispatchTime();
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v21 = __chkstk_darwin(v120);
  uint64_t v108 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v109 = (char *)&v106 - v23;
  uint64_t v126 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v132 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v125 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v131 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_101638CF0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v115 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v114 = (char *)&v106 - v29;
  uint64_t v130 = type metadata accessor for UUID();
  uint64_t v137 = *(void *)(v130 - 8);
  uint64_t v30 = *(void *)(v137 + 64);
  uint64_t v31 = __chkstk_darwin(v130);
  unint64_t v127 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v113 = (char *)&v106 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v112 = (uint64_t)&v106 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v111 = (uint64_t)&v106 - v37;
  __chkstk_darwin(v36);
  uint64_t v133 = (char *)&v106 - v38;
  uint64_t v138 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v106 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v106 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v106 - v46;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = a17;
  LODWORD(v139) = a18;
  *(unsigned char *)(v48 + 24) = a18;
  uint64_t v140 = a19;
  *(void *)(v48 + 32) = a19;
  *(void *)(v48 + 40) = a20;
  uint64_t v142 = v48;
  swift_retain();
  uint64_t v141 = a20;
  swift_bridgeObjectRetain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v42 + 8);
  v50(v45, v41);
  v50(v47, v41);
  if (v49)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v149 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_1005112D4((uint64_t)v40, a17, v139, v140, (uint64_t)v141);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v51 = v134;
  uint64_t v52 = v135;
  uint64_t v53 = v136;
  if ((sub_1004FE40C(v134, v135, v136) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_101342130;
    *(void *)(v60 + 56) = &type metadata for String;
    *(void *)(v60 + 64) = sub_10000B4CC();
    *(void *)(v60 + 32) = v52;
    *(void *)(v60 + 40) = v53;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v149 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  char v54 = v51;
  uint64_t v138 = a14;
  uint64_t v139 = a13;
  LODWORD(v140) = a12;
  uint64_t v141 = a10;
  uint64_t v107 = a16;
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v54;
    *(void *)(inited + 40) = v52;
    *(void *)(inited + 48) = v53;
    uint64_t v57 = (void (*)(void, void))v114;
    uint64_t v58 = v130;
    (*v55)(v114, 1, 1, v130);
    swift_bridgeObjectRetain();
    uint64_t v59 = v111;
    sub_100500E44(v121, v122, (uint64_t)v123, (unint64_t)v124, v116, inited, v57, (unint64_t)v141, v111, a11 & 1, v140 & 1, v139, v138, a15);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 32);
    v141(v133, v59, v58);
    uint64_t v67 = v58;
  }
  else
  {
    uint64_t v61 = swift_initStackObject();
    uint64_t v62 = v52;
    uint64_t v63 = v61;
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    *(unsigned char *)(v61 + 32) = v51;
    *(void *)(v61 + 40) = v62;
    *(void *)(v61 + 48) = v53;
    uint64_t v64 = (uint64_t)v115;
    uint64_t v67 = v130;
    (*v55)(v115, 1, 1, v130);
    swift_bridgeObjectRetain();
    uint64_t v65 = v113;
    UUID.init()();
    uint64_t v66 = v112;
    sub_1004E7E1C(v121, (uint64_t)v122, (void (*)(void, void, void))v123, (void (*)(void, void))v124, v65, v63, v64, (unint64_t)v141, v112, a11 & 1, v140 & 1, v139, (uint64_t)v138, a15);
    swift_bridgeObjectRelease();
    uint64_t v68 = v64;
    uint64_t v69 = v137;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v65, v67);
    sub_10001DAB4(v68, &qword_101638CF0);
    uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
    v141(v133, v66, v67);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v70 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_101342130;
  uint64_t v72 = v133;
  uint64_t v73 = UUID.uuidString.getter();
  uint64_t v75 = v74;
  *(void *)(v71 + 56) = &type metadata for String;
  *(void *)(v71 + 64) = sub_10000B4CC();
  *(void *)(v71 + 32) = v73;
  *(void *)(v71 + 40) = v75;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v76 = v107;
  uint64_t v135 = *(void *)(v107 + 176);
  uint64_t v77 = v137;
  uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  uint64_t v140 = v137 + 16;
  uint64_t v78 = v127;
  v117(v127, v72, v67);
  uint64_t v79 = *(unsigned __int8 *)(v77 + 80);
  uint64_t v80 = v77;
  uint64_t v134 = ((v79 + 24) & ~v79) + v30;
  uint64_t v81 = (v79 + 24) & ~v79;
  uint64_t v139 = v81;
  uint64_t v138 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v79 | 7);
  unint64_t v82 = (v134 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = v76;
  uint64_t v136 = v80 + 32;
  v141((char *)(v83 + v81), (uint64_t)v78, v67);
  uint64_t v84 = v70;
  *(void *)(v83 + v82) = v70;
  uint64_t v147 = sub_10052EEE4;
  uint64_t v148 = v83;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v144 = 1107296256;
  long long v124 = &v145;
  uint64_t v145 = sub_1004B5480;
  uint64_t v146 = &unk_1015CAF50;
  uint64_t v85 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  BOOL v86 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v149 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = (NSURL *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v121 = sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v119 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v87 = v125;
  uint64_t v88 = v126;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v85);
  uint64_t v89 = *(void (**)(void, void))(v132 + 8);
  v132 += 8;
  int v123 = v89;
  v89(v87, v88);
  uint64_t v90 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v118 = v90;
  v90(v86, v129);
  swift_release();
  uint64_t v91 = v127;
  uint64_t v92 = v117;
  v117(v127, v133, v67);
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v76;
  uint64_t v94 = (void (*)(uint64_t, char *, uint64_t))v141;
  v141((char *)(v93 + v139), (uint64_t)v91, v67);
  uint64_t v95 = (uint64_t (**)(uint64_t))(v93 + v82);
  uint64_t v96 = (uint64_t (*)(uint64_t))v142;
  *uint64_t v95 = sub_100552AE4;
  v95[1] = v96;
  swift_retain();
  swift_retain();
  uint64_t v116 = v84;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = sub_100552AE4;
  *(void *)(v97 + 24) = v96;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v98 = v108;
  static DispatchTime.now()();
  uint64_t v99 = v109;
  + infix(_:_:)();
  uint64_t v115 = *(char **)(v110 + 8);
  ((void (*)(char *, uint64_t))v115)(v98, v120);
  uint64_t v100 = v127;
  uint64_t v101 = v130;
  v92(v127, v133, v130);
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = v107;
  v94(v102 + v139, v100, v101);
  uint64_t v147 = sub_10052EF48;
  uint64_t v148 = v102;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v144 = 1107296256;
  uint64_t v145 = sub_1004B5480;
  uint64_t v146 = &unk_1015CAFF0;
  uint64_t v103 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v104 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v149 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v103);
  swift_release();
  v123(v87, v88);
  v118(v104, v129);
  ((void (*)(char *, uint64_t))v115)(v99, v120);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v133, v130);
  swift_release();
  return swift_release();
}

uint64_t sub_10053A780(int a1, NSURL *a2, void (*a3)(void, void), uint64_t (**a4)(uint64_t a1), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(char *, uint64_t, uint64_t), char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), long long a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, void (*a20)(char *, uint64_t, uint64_t))
{
  uint64_t v136 = a8;
  uint64_t v135 = a7;
  LODWORD(v134) = a6;
  uint64_t v116 = a5;
  long long v124 = a4;
  int v123 = a3;
  uint64_t v122 = a2;
  LODWORD(v121) = a1;
  uint64_t v119 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v118 = *(void (**)(char *, uint64_t))(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (void (*)(char *, char *, uint64_t))((char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v120 = type metadata accessor for DispatchTime();
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v21 = __chkstk_darwin(v120);
  uint64_t v108 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v109 = (char *)&v106 - v23;
  uint64_t v126 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v132 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v125 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v131 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_101638CF0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v115 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v114 = (char *)&v106 - v29;
  uint64_t v130 = type metadata accessor for UUID();
  uint64_t v137 = *(void *)(v130 - 8);
  uint64_t v30 = *(void *)(v137 + 64);
  uint64_t v31 = __chkstk_darwin(v130);
  unint64_t v127 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v113 = (char *)&v106 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v112 = (uint64_t)&v106 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v111 = (uint64_t)&v106 - v37;
  __chkstk_darwin(v36);
  uint64_t v133 = (char *)&v106 - v38;
  uint64_t v138 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v106 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v106 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v106 - v46;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = a17;
  LODWORD(v139) = a18;
  *(unsigned char *)(v48 + 24) = a18;
  uint64_t v140 = a19;
  *(void *)(v48 + 32) = a19;
  *(void *)(v48 + 40) = a20;
  uint64_t v142 = v48;
  swift_retain();
  uint64_t v141 = a20;
  swift_bridgeObjectRetain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v42 + 8);
  v50(v45, v41);
  v50(v47, v41);
  if (v49)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v149 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_1005112D4((uint64_t)v40, a17, v139, v140, (uint64_t)v141);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v51 = v134;
  uint64_t v52 = v135;
  uint64_t v53 = v136;
  if ((sub_1004FE40C(v134, v135, v136) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_101342130;
    *(void *)(v60 + 56) = &type metadata for String;
    *(void *)(v60 + 64) = sub_10000B4CC();
    *(void *)(v60 + 32) = v52;
    *(void *)(v60 + 40) = v53;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v149 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  char v54 = v51;
  uint64_t v138 = a14;
  uint64_t v139 = a13;
  LODWORD(v140) = a12;
  uint64_t v141 = a10;
  uint64_t v107 = a16;
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v54;
    *(void *)(inited + 40) = v52;
    *(void *)(inited + 48) = v53;
    uint64_t v57 = (void (*)(void, void))v114;
    uint64_t v58 = v130;
    (*v55)(v114, 1, 1, v130);
    swift_bridgeObjectRetain();
    uint64_t v59 = v111;
    sub_100500E44(v121, v122, (uint64_t)v123, (unint64_t)v124, v116, inited, v57, (unint64_t)v141, v111, a11 & 1, v140 & 1, v139, v138, a15);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 32);
    v141(v133, v59, v58);
    uint64_t v67 = v58;
  }
  else
  {
    uint64_t v61 = swift_initStackObject();
    uint64_t v62 = v52;
    uint64_t v63 = v61;
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    *(unsigned char *)(v61 + 32) = v51;
    *(void *)(v61 + 40) = v62;
    *(void *)(v61 + 48) = v53;
    uint64_t v64 = (uint64_t)v115;
    uint64_t v67 = v130;
    (*v55)(v115, 1, 1, v130);
    swift_bridgeObjectRetain();
    uint64_t v65 = v113;
    UUID.init()();
    uint64_t v66 = v112;
    sub_1004E7E1C(v121, (uint64_t)v122, (void (*)(void, void, void))v123, (void (*)(void, void))v124, v65, v63, v64, (unint64_t)v141, v112, a11 & 1, v140 & 1, v139, (uint64_t)v138, a15);
    swift_bridgeObjectRelease();
    uint64_t v68 = v64;
    uint64_t v69 = v137;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v65, v67);
    sub_10001DAB4(v68, &qword_101638CF0);
    uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
    v141(v133, v66, v67);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v70 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_101342130;
  uint64_t v72 = v133;
  uint64_t v73 = UUID.uuidString.getter();
  uint64_t v75 = v74;
  *(void *)(v71 + 56) = &type metadata for String;
  *(void *)(v71 + 64) = sub_10000B4CC();
  *(void *)(v71 + 32) = v73;
  *(void *)(v71 + 40) = v75;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v76 = v107;
  uint64_t v135 = *(void *)(v107 + 176);
  uint64_t v77 = v137;
  uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  uint64_t v140 = v137 + 16;
  uint64_t v78 = v127;
  v117(v127, v72, v67);
  uint64_t v79 = *(unsigned __int8 *)(v77 + 80);
  uint64_t v80 = v77;
  uint64_t v134 = ((v79 + 24) & ~v79) + v30;
  uint64_t v81 = (v79 + 24) & ~v79;
  uint64_t v139 = v81;
  uint64_t v138 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v79 | 7);
  unint64_t v82 = (v134 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = v76;
  uint64_t v136 = v80 + 32;
  v141((char *)(v83 + v81), (uint64_t)v78, v67);
  uint64_t v84 = v70;
  *(void *)(v83 + v82) = v70;
  uint64_t v147 = sub_10052EEE4;
  uint64_t v148 = v83;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v144 = 1107296256;
  long long v124 = &v145;
  uint64_t v145 = sub_1004B5480;
  uint64_t v146 = &unk_1015CB130;
  uint64_t v85 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  BOOL v86 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v149 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = (NSURL *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v121 = sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v119 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v87 = v125;
  uint64_t v88 = v126;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v85);
  uint64_t v89 = *(void (**)(void, void))(v132 + 8);
  v132 += 8;
  int v123 = v89;
  v89(v87, v88);
  uint64_t v90 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v118 = v90;
  v90(v86, v129);
  swift_release();
  uint64_t v91 = v127;
  uint64_t v92 = v117;
  v117(v127, v133, v67);
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v76;
  uint64_t v94 = (void (*)(uint64_t, char *, uint64_t))v141;
  v141((char *)(v93 + v139), (uint64_t)v91, v67);
  uint64_t v95 = (uint64_t (**)(uint64_t))(v93 + v82);
  uint64_t v96 = (uint64_t (*)(uint64_t))v142;
  *uint64_t v95 = sub_1005533F4;
  v95[1] = v96;
  swift_retain();
  swift_retain();
  uint64_t v116 = v84;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = sub_1005533F4;
  *(void *)(v97 + 24) = v96;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v98 = v108;
  static DispatchTime.now()();
  uint64_t v99 = v109;
  + infix(_:_:)();
  uint64_t v115 = *(char **)(v110 + 8);
  ((void (*)(char *, uint64_t))v115)(v98, v120);
  uint64_t v100 = v127;
  uint64_t v101 = v130;
  v92(v127, v133, v130);
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = v107;
  v94(v102 + v139, v100, v101);
  uint64_t v147 = sub_10052EF48;
  uint64_t v148 = v102;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v144 = 1107296256;
  uint64_t v145 = sub_1004B5480;
  uint64_t v146 = &unk_1015CB1D0;
  uint64_t v103 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v104 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v149 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v103);
  swift_release();
  v123(v87, v88);
  v118(v104, v129);
  ((void (*)(char *, uint64_t))v115)(v99, v120);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v133, v130);
  swift_release();
  return swift_release();
}

uint64_t sub_10053BE40(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t a1))
{
  uint64_t v135 = a8;
  uint64_t v134 = a7;
  LODWORD(v133) = a6;
  uint64_t v118 = a5;
  uint64_t v125 = a4;
  long long v124 = a3;
  int v123 = a2;
  LODWORD(v122) = a1;
  uint64_t v121 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v120 = *(uint64_t (***)(uint64_t))(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (void (*)(char *, uint64_t))((char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v19 = __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v112 = (char *)&v103 - v21;
  uint64_t v127 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v131 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v130 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v117 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v116 = (char *)&v103 - v27;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v28 = *(void *)(v136 + 64);
  uint64_t v29 = __chkstk_darwin(v137);
  uint64_t v110 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v103 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v115 = (uint64_t *)((char *)&v103 - v34);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v103 - v36;
  __chkstk_darwin(v35);
  uint64_t v132 = (char *)&v103 - v38;
  unint64_t v138 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v103 - v46;
  uint64_t v139 = a18;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v49 = *(void (**)(char *, uint64_t))(v42 + 8);
  v49(v45, v41);
  v49(v47, v41);
  if (v48)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100516088((uint64_t)v40);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v50 = v133;
  uint64_t v51 = v134;
  uint64_t v52 = v135;
  if ((sub_1004FE40C(v133, v134, (uint64_t)v135) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_101342130;
    *(void *)(v58 + 56) = &type metadata for String;
    *(void *)(v58 + 64) = sub_10000B4CC();
    *(void *)(v58 + 32) = v51;
    *(void *)(v58 + 40) = v52;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v53 = v52;
  uint64_t v104 = a15;
  uint64_t v106 = a14;
  uint64_t v107 = a13;
  int v108 = a12;
  unint64_t v138 = a10;
  int v105 = a11 & 1;
  uint64_t v103 = a17;
  uint64_t v109 = *(void *)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  char v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v50;
    *(void *)(inited + 40) = v51;
    *(void *)(inited + 48) = v53;
    char v56 = (void (*)(void, void))v116;
    uint64_t v57 = v137;
    (*v54)(v116, 1, 1, v137);
    swift_bridgeObjectRetain();
    *((void *)&v101 + 1) = a16;
    *(void *)&long long v101 = v104;
    sub_100500E44(v122, v123, (uint64_t)v124, (unint64_t)v125, v118, inited, v56, v138, (uint64_t)v37, v105, v108 & 1, v107, v106, v101);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v56, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    v63(v132, v37, v57);
  }
  else
  {
    uint64_t v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(unsigned char *)(v59 + 32) = v50;
    *(void *)(v59 + 40) = v51;
    *(void *)(v59 + 48) = v52;
    uint64_t v60 = (uint64_t)v117;
    uint64_t v61 = v137;
    (*v54)(v117, 1, 1, v137);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v102 + 1) = a16;
    *(void *)&long long v102 = v104;
    uint64_t v62 = (char *)v115;
    sub_1004E7E1C(v122, (uint64_t)v123, v124, v125, v32, v59, v60, v138, (uint64_t)v115, v105, v108 & 1, v107, (uint64_t)v106, v102);
    swift_bridgeObjectRelease();
    uint64_t v64 = v136;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v32, v61);
    sub_10001DAB4(v60, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v63(v132, v62, v61);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v138 = Future.init()();
  static os_log_type_t.default.getter();
  uint64_t v65 = v103;
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_101342130;
  uint64_t v67 = v132;
  uint64_t v68 = UUID.uuidString.getter();
  uint64_t v70 = v69;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = sub_10000B4CC();
  *(void *)(v66 + 32) = v68;
  *(void *)(v66 + 40) = v70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  int v123 = *(NSURL **)(v65 + 176);
  uint64_t v71 = v136;
  uint64_t v72 = *(void (**)(void, void, void))(v136 + 16);
  uint64_t v134 = v136 + 16;
  uint64_t v135 = v72;
  uint64_t v73 = v110;
  uint64_t v74 = v137;
  v72(v110, v67, v137);
  uint64_t v75 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v76 = v71;
  uint64_t v121 = ((v75 + 24) & ~v75) + v28;
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v133 = v77;
  uint64_t v125 = (void (*)(void, void))(v75 | 7);
  uint64_t v78 = v65;
  unint64_t v79 = (v121 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v65;
  long long v124 = (void (*)(void, void, void))(v76 + 32);
  v63((char *)(v80 + v77), v73, v74);
  *(void *)(v80 + v79) = v138;
  uint64_t v144 = sub_10052EEE4;
  uint64_t v145 = v80;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v120 = &v142;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9330;
  uint64_t v81 = _Block_copy(&aBlock);
  uint64_t v122 = (void (*)(uint64_t, char *, uint64_t))v63;
  unint64_t v82 = v81;
  swift_retain();
  swift_retain();
  uint64_t v83 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v117 = (char *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v116 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v118 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v84 = v126;
  uint64_t v85 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  BOOL v86 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v119 = v86;
  v86(v84, v85);
  uint64_t v87 = *(uint64_t **)(v130 + 8);
  v130 += 8;
  uint64_t v115 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v129);
  swift_release();
  uint64_t v88 = v137;
  v135(v73, v132, v137);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v78;
  v122(v89 + v133, v73, v88);
  uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v79);
  uint64_t v91 = v139;
  *uint64_t v90 = sub_10054E3C4;
  v90[1] = v91;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = sub_10054E3C4;
  *(void *)(v92 + 24) = v91;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = v111;
  static DispatchTime.now()();
  uint64_t v94 = v112;
  + infix(_:_:)();
  uint64_t v113 = *(void *)(v113 + 8);
  uint64_t v95 = v114;
  ((void (*)(char *, uint64_t))v113)(v93, v114);
  uint64_t v96 = v137;
  v135(v73, v132, v137);
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v103;
  v122(v97 + v133, v73, v96);
  uint64_t v144 = sub_10052EF48;
  uint64_t v145 = v97;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C93D0;
  uint64_t v98 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v99 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v98);
  swift_release();
  v119(v84, v85);
  ((void (*)(char *, uint64_t))v115)(v99, v129);
  ((void (*)(char *, uint64_t))v113)(v94, v95);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v132, v137);
  swift_release();
  return swift_release();
}

uint64_t sub_10053D4AC(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t a1))
{
  uint64_t v135 = a8;
  uint64_t v134 = a7;
  LODWORD(v133) = a6;
  uint64_t v118 = a5;
  uint64_t v125 = a4;
  long long v124 = a3;
  int v123 = a2;
  LODWORD(v122) = a1;
  uint64_t v121 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v120 = *(uint64_t (***)(uint64_t))(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (void (*)(char *, uint64_t))((char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v19 = __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v112 = (char *)&v103 - v21;
  uint64_t v127 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v131 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v130 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v117 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v116 = (char *)&v103 - v27;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v28 = *(void *)(v136 + 64);
  uint64_t v29 = __chkstk_darwin(v137);
  uint64_t v110 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v103 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v115 = (uint64_t *)((char *)&v103 - v34);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v103 - v36;
  __chkstk_darwin(v35);
  uint64_t v132 = (char *)&v103 - v38;
  unint64_t v138 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v103 - v46;
  uint64_t v139 = a18;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v49 = *(void (**)(char *, uint64_t))(v42 + 8);
  v49(v45, v41);
  v49(v47, v41);
  if (v48)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100516088((uint64_t)v40);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v50 = v133;
  uint64_t v51 = v134;
  uint64_t v52 = v135;
  if ((sub_1004FE40C(v133, v134, (uint64_t)v135) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_101342130;
    *(void *)(v58 + 56) = &type metadata for String;
    *(void *)(v58 + 64) = sub_10000B4CC();
    *(void *)(v58 + 32) = v51;
    *(void *)(v58 + 40) = v52;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v53 = v52;
  uint64_t v104 = a15;
  uint64_t v106 = a14;
  uint64_t v107 = a13;
  int v108 = a12;
  unint64_t v138 = a10;
  int v105 = a11 & 1;
  uint64_t v103 = a17;
  uint64_t v109 = *(void *)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  char v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v50;
    *(void *)(inited + 40) = v51;
    *(void *)(inited + 48) = v53;
    char v56 = (void (*)(void, void))v116;
    uint64_t v57 = v137;
    (*v54)(v116, 1, 1, v137);
    swift_bridgeObjectRetain();
    *((void *)&v101 + 1) = a16;
    *(void *)&long long v101 = v104;
    sub_100500E44(v122, v123, (uint64_t)v124, (unint64_t)v125, v118, inited, v56, v138, (uint64_t)v37, v105, v108 & 1, v107, v106, v101);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v56, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    v63(v132, v37, v57);
  }
  else
  {
    uint64_t v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(unsigned char *)(v59 + 32) = v50;
    *(void *)(v59 + 40) = v51;
    *(void *)(v59 + 48) = v52;
    uint64_t v60 = (uint64_t)v117;
    uint64_t v61 = v137;
    (*v54)(v117, 1, 1, v137);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v102 + 1) = a16;
    *(void *)&long long v102 = v104;
    uint64_t v62 = (char *)v115;
    sub_1004E7E1C(v122, (uint64_t)v123, v124, v125, v32, v59, v60, v138, (uint64_t)v115, v105, v108 & 1, v107, (uint64_t)v106, v102);
    swift_bridgeObjectRelease();
    uint64_t v64 = v136;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v32, v61);
    sub_10001DAB4(v60, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v63(v132, v62, v61);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v138 = Future.init()();
  static os_log_type_t.default.getter();
  uint64_t v65 = v103;
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_101342130;
  uint64_t v67 = v132;
  uint64_t v68 = UUID.uuidString.getter();
  uint64_t v70 = v69;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = sub_10000B4CC();
  *(void *)(v66 + 32) = v68;
  *(void *)(v66 + 40) = v70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  int v123 = *(NSURL **)(v65 + 176);
  uint64_t v71 = v136;
  uint64_t v72 = *(void (**)(void, void, void))(v136 + 16);
  uint64_t v134 = v136 + 16;
  uint64_t v135 = v72;
  uint64_t v73 = v110;
  uint64_t v74 = v137;
  v72(v110, v67, v137);
  uint64_t v75 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v76 = v71;
  uint64_t v121 = ((v75 + 24) & ~v75) + v28;
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v133 = v77;
  uint64_t v125 = (void (*)(void, void))(v75 | 7);
  uint64_t v78 = v65;
  unint64_t v79 = (v121 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v65;
  long long v124 = (void (*)(void, void, void))(v76 + 32);
  v63((char *)(v80 + v77), v73, v74);
  *(void *)(v80 + v79) = v138;
  uint64_t v144 = sub_10052EEE4;
  uint64_t v145 = v80;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v120 = &v142;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9178;
  uint64_t v81 = _Block_copy(&aBlock);
  uint64_t v122 = (void (*)(uint64_t, char *, uint64_t))v63;
  unint64_t v82 = v81;
  swift_retain();
  swift_retain();
  uint64_t v83 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v117 = (char *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v116 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v118 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v84 = v126;
  uint64_t v85 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  BOOL v86 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v119 = v86;
  v86(v84, v85);
  uint64_t v87 = *(uint64_t **)(v130 + 8);
  v130 += 8;
  uint64_t v115 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v129);
  swift_release();
  uint64_t v88 = v137;
  v135(v73, v132, v137);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v78;
  v122(v89 + v133, v73, v88);
  uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v79);
  uint64_t v91 = v139;
  *uint64_t v90 = sub_10054E18C;
  v90[1] = v91;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = sub_10054E18C;
  *(void *)(v92 + 24) = v91;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = v111;
  static DispatchTime.now()();
  uint64_t v94 = v112;
  + infix(_:_:)();
  uint64_t v113 = *(void *)(v113 + 8);
  uint64_t v95 = v114;
  ((void (*)(char *, uint64_t))v113)(v93, v114);
  uint64_t v96 = v137;
  v135(v73, v132, v137);
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v103;
  v122(v97 + v133, v73, v96);
  uint64_t v144 = sub_10052EF48;
  uint64_t v145 = v97;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9218;
  uint64_t v98 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v99 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v98);
  swift_release();
  v119(v84, v85);
  ((void (*)(char *, uint64_t))v115)(v99, v129);
  ((void (*)(char *, uint64_t))v113)(v94, v95);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v132, v137);
  swift_release();
  return swift_release();
}

uint64_t sub_10053EB18(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t a1))
{
  uint64_t v135 = a8;
  uint64_t v134 = a7;
  LODWORD(v133) = a6;
  uint64_t v118 = a5;
  uint64_t v125 = a4;
  long long v124 = a3;
  int v123 = a2;
  LODWORD(v122) = a1;
  uint64_t v121 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v120 = *(uint64_t (***)(uint64_t))(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (void (*)(char *, uint64_t))((char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v19 = __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v112 = (char *)&v103 - v21;
  uint64_t v127 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v131 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v130 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v117 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v116 = (char *)&v103 - v27;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v28 = *(void *)(v136 + 64);
  uint64_t v29 = __chkstk_darwin(v137);
  uint64_t v110 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v103 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v115 = (uint64_t *)((char *)&v103 - v34);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v103 - v36;
  __chkstk_darwin(v35);
  uint64_t v132 = (char *)&v103 - v38;
  unint64_t v138 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v103 - v46;
  uint64_t v139 = a18;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v49 = *(void (**)(char *, uint64_t))(v42 + 8);
  v49(v45, v41);
  v49(v47, v41);
  if (v48)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100516088((uint64_t)v40);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v50 = v133;
  uint64_t v51 = v134;
  uint64_t v52 = v135;
  if ((sub_1004FE40C(v133, v134, (uint64_t)v135) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_101342130;
    *(void *)(v58 + 56) = &type metadata for String;
    *(void *)(v58 + 64) = sub_10000B4CC();
    *(void *)(v58 + 32) = v51;
    *(void *)(v58 + 40) = v52;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v53 = v52;
  uint64_t v104 = a15;
  uint64_t v106 = a14;
  uint64_t v107 = a13;
  int v108 = a12;
  unint64_t v138 = a10;
  int v105 = a11 & 1;
  uint64_t v103 = a17;
  uint64_t v109 = *(void *)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  char v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v50;
    *(void *)(inited + 40) = v51;
    *(void *)(inited + 48) = v53;
    char v56 = (void (*)(void, void))v116;
    uint64_t v57 = v137;
    (*v54)(v116, 1, 1, v137);
    swift_bridgeObjectRetain();
    *((void *)&v101 + 1) = a16;
    *(void *)&long long v101 = v104;
    sub_100500E44(v122, v123, (uint64_t)v124, (unint64_t)v125, v118, inited, v56, v138, (uint64_t)v37, v105, v108 & 1, v107, v106, v101);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v56, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    v63(v132, v37, v57);
  }
  else
  {
    uint64_t v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(unsigned char *)(v59 + 32) = v50;
    *(void *)(v59 + 40) = v51;
    *(void *)(v59 + 48) = v52;
    uint64_t v60 = (uint64_t)v117;
    uint64_t v61 = v137;
    (*v54)(v117, 1, 1, v137);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v102 + 1) = a16;
    *(void *)&long long v102 = v104;
    uint64_t v62 = (char *)v115;
    sub_1004E7E1C(v122, (uint64_t)v123, v124, v125, v32, v59, v60, v138, (uint64_t)v115, v105, v108 & 1, v107, (uint64_t)v106, v102);
    swift_bridgeObjectRelease();
    uint64_t v64 = v136;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v32, v61);
    sub_10001DAB4(v60, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v63(v132, v62, v61);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v138 = Future.init()();
  static os_log_type_t.default.getter();
  uint64_t v65 = v103;
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_101342130;
  uint64_t v67 = v132;
  uint64_t v68 = UUID.uuidString.getter();
  uint64_t v70 = v69;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = sub_10000B4CC();
  *(void *)(v66 + 32) = v68;
  *(void *)(v66 + 40) = v70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  int v123 = *(NSURL **)(v65 + 176);
  uint64_t v71 = v136;
  uint64_t v72 = *(void (**)(void, void, void))(v136 + 16);
  uint64_t v134 = v136 + 16;
  uint64_t v135 = v72;
  uint64_t v73 = v110;
  uint64_t v74 = v137;
  v72(v110, v67, v137);
  uint64_t v75 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v76 = v71;
  uint64_t v121 = ((v75 + 24) & ~v75) + v28;
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v133 = v77;
  uint64_t v125 = (void (*)(void, void))(v75 | 7);
  uint64_t v78 = v65;
  unint64_t v79 = (v121 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v65;
  long long v124 = (void (*)(void, void, void))(v76 + 32);
  v63((char *)(v80 + v77), v73, v74);
  *(void *)(v80 + v79) = v138;
  uint64_t v144 = sub_10052EEE4;
  uint64_t v145 = v80;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v120 = &v142;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C95D8;
  uint64_t v81 = _Block_copy(&aBlock);
  uint64_t v122 = (void (*)(uint64_t, char *, uint64_t))v63;
  unint64_t v82 = v81;
  swift_retain();
  swift_retain();
  uint64_t v83 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v117 = (char *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v116 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v118 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v84 = v126;
  uint64_t v85 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  BOOL v86 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v119 = v86;
  v86(v84, v85);
  uint64_t v87 = *(uint64_t **)(v130 + 8);
  v130 += 8;
  uint64_t v115 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v129);
  swift_release();
  uint64_t v88 = v137;
  v135(v73, v132, v137);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v78;
  v122(v89 + v133, v73, v88);
  uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v79);
  uint64_t v91 = v139;
  *uint64_t v90 = sub_10054E8B4;
  v90[1] = v91;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = sub_10054E8B4;
  *(void *)(v92 + 24) = v91;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = v111;
  static DispatchTime.now()();
  uint64_t v94 = v112;
  + infix(_:_:)();
  uint64_t v113 = *(void *)(v113 + 8);
  uint64_t v95 = v114;
  ((void (*)(char *, uint64_t))v113)(v93, v114);
  uint64_t v96 = v137;
  v135(v73, v132, v137);
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v103;
  v122(v97 + v133, v73, v96);
  uint64_t v144 = sub_10052EF48;
  uint64_t v145 = v97;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9678;
  uint64_t v98 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v99 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v98);
  swift_release();
  v119(v84, v85);
  ((void (*)(char *, uint64_t))v115)(v99, v129);
  ((void (*)(char *, uint64_t))v113)(v94, v95);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v132, v137);
  swift_release();
  return swift_release();
}

uint64_t sub_100540184(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, void (*a8)(void, void, void), char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t a1))
{
  uint64_t v135 = a8;
  uint64_t v134 = a7;
  LODWORD(v133) = a6;
  uint64_t v118 = a5;
  uint64_t v125 = a4;
  long long v124 = a3;
  int v123 = a2;
  LODWORD(v122) = a1;
  uint64_t v121 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v120 = *(uint64_t (***)(uint64_t))(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (void (*)(char *, uint64_t))((char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v19 = __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v112 = (char *)&v103 - v21;
  uint64_t v127 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v131 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for DispatchQoS();
  uint64_t v130 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v117 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v116 = (char *)&v103 - v27;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v28 = *(void *)(v136 + 64);
  uint64_t v29 = __chkstk_darwin(v137);
  uint64_t v110 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v103 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v115 = (uint64_t *)((char *)&v103 - v34);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v103 - v36;
  __chkstk_darwin(v35);
  uint64_t v132 = (char *)&v103 - v38;
  unint64_t v138 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v138);
  uint64_t v40 = (void ***)((char *)&v103 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v103 - v46;
  uint64_t v139 = a18;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v49 = *(void (**)(char *, uint64_t))(v42 + 8);
  v49(v45, v41);
  v49(v47, v41);
  if (v48)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v40 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100516088((uint64_t)v40);
    sub_10001DAB4((uint64_t)v40, &qword_101642760);
    return swift_release();
  }
  char v50 = v133;
  uint64_t v51 = v134;
  uint64_t v52 = v135;
  if ((sub_1004FE40C(v133, v134, (uint64_t)v135) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_101342130;
    *(void *)(v58 + 56) = &type metadata for String;
    *(void *)(v58 + 64) = sub_10000B4CC();
    *(void *)(v58 + 32) = v51;
    *(void *)(v58 + 40) = v52;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v146 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    goto LABEL_11;
  }
  uint64_t v53 = v52;
  uint64_t v104 = a15;
  uint64_t v106 = a14;
  uint64_t v107 = a13;
  int v108 = a12;
  unint64_t v138 = a10;
  int v105 = a11 & 1;
  uint64_t v103 = a17;
  uint64_t v109 = *(void *)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  char v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v50;
    *(void *)(inited + 40) = v51;
    *(void *)(inited + 48) = v53;
    char v56 = (void (*)(void, void))v116;
    uint64_t v57 = v137;
    (*v54)(v116, 1, 1, v137);
    swift_bridgeObjectRetain();
    *((void *)&v101 + 1) = a16;
    *(void *)&long long v101 = v104;
    sub_100500E44(v122, v123, (uint64_t)v124, (unint64_t)v125, v118, inited, v56, v138, (uint64_t)v37, v105, v108 & 1, v107, v106, v101);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v56, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    v63(v132, v37, v57);
  }
  else
  {
    uint64_t v59 = swift_initStackObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(unsigned char *)(v59 + 32) = v50;
    *(void *)(v59 + 40) = v51;
    *(void *)(v59 + 48) = v52;
    uint64_t v60 = (uint64_t)v117;
    uint64_t v61 = v137;
    (*v54)(v117, 1, 1, v137);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v102 + 1) = a16;
    *(void *)&long long v102 = v104;
    uint64_t v62 = (char *)v115;
    sub_1004E7E1C(v122, (uint64_t)v123, v124, v125, v32, v59, v60, v138, (uint64_t)v115, v105, v108 & 1, v107, (uint64_t)v106, v102);
    swift_bridgeObjectRelease();
    uint64_t v64 = v136;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v32, v61);
    sub_10001DAB4(v60, &qword_101638CF0);
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v63(v132, v62, v61);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  unint64_t v138 = Future.init()();
  static os_log_type_t.default.getter();
  uint64_t v65 = v103;
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_101342130;
  uint64_t v67 = v132;
  uint64_t v68 = UUID.uuidString.getter();
  uint64_t v70 = v69;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = sub_10000B4CC();
  *(void *)(v66 + 32) = v68;
  *(void *)(v66 + 40) = v70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  int v123 = *(NSURL **)(v65 + 176);
  uint64_t v71 = v136;
  uint64_t v72 = *(void (**)(void, void, void))(v136 + 16);
  uint64_t v134 = v136 + 16;
  uint64_t v135 = v72;
  uint64_t v73 = v110;
  uint64_t v74 = v137;
  v72(v110, v67, v137);
  uint64_t v75 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v76 = v71;
  uint64_t v121 = ((v75 + 24) & ~v75) + v28;
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v133 = v77;
  uint64_t v125 = (void (*)(void, void))(v75 | 7);
  uint64_t v78 = v65;
  unint64_t v79 = (v121 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v65;
  long long v124 = (void (*)(void, void, void))(v76 + 32);
  v63((char *)(v80 + v77), v73, v74);
  *(void *)(v80 + v79) = v138;
  uint64_t v144 = sub_10052EEE4;
  uint64_t v145 = v80;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v120 = &v142;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9498;
  uint64_t v81 = _Block_copy(&aBlock);
  uint64_t v122 = (void (*)(uint64_t, char *, uint64_t))v63;
  unint64_t v82 = v81;
  swift_retain();
  swift_retain();
  uint64_t v83 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v117 = (char *)sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v116 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v118 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v84 = v126;
  uint64_t v85 = v127;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  BOOL v86 = *(void (**)(char *, uint64_t))(v131 + 8);
  v131 += 8;
  uint64_t v119 = v86;
  v86(v84, v85);
  uint64_t v87 = *(uint64_t **)(v130 + 8);
  v130 += 8;
  uint64_t v115 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v129);
  swift_release();
  uint64_t v88 = v137;
  v135(v73, v132, v137);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v78;
  v122(v89 + v133, v73, v88);
  uint64_t v90 = (uint64_t (**)(uint64_t))(v89 + v79);
  uint64_t v91 = v139;
  *uint64_t v90 = sub_10054E73C;
  v90[1] = v91;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = sub_10054E73C;
  *(void *)(v92 + 24) = v91;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = v111;
  static DispatchTime.now()();
  uint64_t v94 = v112;
  + infix(_:_:)();
  uint64_t v113 = *(void *)(v113 + 8);
  uint64_t v95 = v114;
  ((void (*)(char *, uint64_t))v113)(v93, v114);
  uint64_t v96 = v137;
  v135(v73, v132, v137);
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v103;
  v122(v97 + v133, v73, v96);
  uint64_t v144 = sub_10052EF48;
  uint64_t v145 = v97;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v141 = 1107296256;
  uint64_t v142 = sub_1004B5480;
  uint64_t v143 = &unk_1015C9538;
  uint64_t v98 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v99 = v128;
  static DispatchQoS.unspecified.getter();
  uint64_t v146 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v98);
  swift_release();
  v119(v84, v85);
  ((void (*)(char *, uint64_t))v115)(v99, v129);
  ((void (*)(char *, uint64_t))v113)(v94, v95);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v132, v137);
  swift_release();
  return swift_release();
}

uint64_t sub_1005417F0(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10, char a11, unsigned __int8 a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void (*a19)(char *, char *, uint64_t))
{
  uint64_t v139 = a8;
  uint64_t v138 = a7;
  LODWORD(v137) = a6;
  uint64_t v120 = a5;
  uint64_t v128 = a4;
  uint64_t v127 = a3;
  uint64_t v126 = a2;
  LODWORD(v125) = a1;
  int v123 = (void (*)(char *, uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v122 = *((void *)v123 - 1);
  __chkstk_darwin(v123);
  uint64_t v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DispatchTime();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v20 = __chkstk_darwin(v116);
  uint64_t v113 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v114 = (char *)&v108 - v22;
  uint64_t v130 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v135 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v129 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for DispatchQoS();
  uint64_t v134 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v131 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v119 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v118 = (char *)&v108 - v28;
  uint64_t v133 = type metadata accessor for UUID();
  uint64_t v140 = *(void *)(v133 - 8);
  uint64_t v29 = *(void *)(v140 + 64);
  uint64_t v30 = __chkstk_darwin(v133);
  long long v124 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v108 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v117 = (uint64_t)&v108 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v108 - v37;
  __chkstk_darwin(v36);
  uint64_t v136 = (char *)&v108 - v39;
  unint64_t v142 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v142);
  uint64_t v41 = (void ***)((char *)&v108 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v108 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  char v48 = (char *)&v108 - v47;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = a18;
  *(void *)(v49 + 24) = a19;
  uint64_t v144 = v49;
  uint64_t v141 = a18;
  uint64_t v143 = a19;
  swift_retain();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v46, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v42);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v43 + 8);
  v51(v46, v42);
  v51(v48, v42);
  if (v50)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 5;
LABEL_11:
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t *v41 = aBlock;
    swift_storeEnumTagMultiPayload();
    sub_100522ED0((uint64_t)v41, v141, (uint64_t)v143, (uint64_t)"Successfully sent updateSharedBeacon: %@", 40);
    sub_10001DAB4((uint64_t)v41, &qword_101642760);
    return swift_release();
  }
  char v52 = v137;
  uint64_t v53 = v138;
  uint64_t v54 = v139;
  if ((sub_1004FE40C(v137, v138, v139) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_101342130;
    *(void *)(v59 + 56) = &type metadata for String;
    *(void *)(v59 + 64) = sub_10000B4CC();
    *(void *)(v59 + 32) = v53;
    *(void *)(v59 + 40) = v54;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v151 = 12;
    goto LABEL_11;
  }
  uint64_t v109 = a15;
  uint64_t v111 = a14;
  uint64_t v112 = a13;
  LODWORD(v141) = a12;
  unint64_t v142 = a10;
  int v110 = a11 & 1;
  uint64_t v108 = a17;
  uint64_t v143 = *(void (**)(char *, char *, uint64_t))(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v52;
    *(void *)(inited + 40) = v53;
    *(void *)(inited + 48) = v54;
    uint64_t v57 = (void (*)(void, void))v118;
    uint64_t v58 = v133;
    (*v55)(v118, 1, 1, v133);
    swift_bridgeObjectRetain();
    *((void *)&v106 + 1) = a16;
    *(void *)&long long v106 = v109;
    sub_100500E44(v125, v126, (uint64_t)v127, (unint64_t)v128, v120, inited, v57, v142, (uint64_t)v38, v110, v141 & 1, v112, v111, v106);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v57, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
    v143(v136, v38, v58);
    uint64_t v64 = v58;
  }
  else
  {
    uint64_t v60 = v54;
    uint64_t v61 = swift_initStackObject();
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    *(unsigned char *)(v61 + 32) = v52;
    *(void *)(v61 + 40) = v53;
    *(void *)(v61 + 48) = v60;
    uint64_t v62 = (uint64_t)v119;
    uint64_t v64 = v133;
    (*v55)(v119, 1, 1, v133);
    swift_bridgeObjectRetain();
    UUID.init()();
    *((void *)&v107 + 1) = a16;
    *(void *)&long long v107 = v109;
    uint64_t v63 = v117;
    sub_1004E7E1C(v125, (uint64_t)v126, v127, v128, v33, v61, v62, v142, v117, v110, v141 & 1, v112, (uint64_t)v111, v107);
    swift_bridgeObjectRelease();
    uint64_t v65 = v140;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v33, v64);
    sub_10001DAB4(v62, &qword_101638CF0);
    uint64_t v143 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v143(v136, (char *)v63, v64);
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v66 = (void (*)(void, void, void))Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_101342130;
  uint64_t v68 = v136;
  uint64_t v69 = UUID.uuidString.getter();
  uint64_t v71 = v70;
  *(void *)(v67 + 56) = &type metadata for String;
  *(void *)(v67 + 64) = sub_10000B4CC();
  *(void *)(v67 + 32) = v69;
  *(void *)(v67 + 40) = v71;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v72 = v108;
  uint64_t v128 = *(void (**)(void, void))(v108 + 176);
  uint64_t v73 = v140;
  uint64_t v141 = *(NSObject **)(v140 + 16);
  unint64_t v142 = v140 + 16;
  uint64_t v74 = v124;
  ((void (*)(char *, char *, uint64_t))v141)(v124, v68, v64);
  uint64_t v75 = *(unsigned __int8 *)(v73 + 80);
  uint64_t v76 = v73;
  uint64_t v126 = (NSURL *)(((v75 + 24) & ~v75) + v29);
  uint64_t v77 = (v75 + 24) & ~v75;
  uint64_t v137 = v77;
  uint64_t v139 = v75 | 7;
  unint64_t v78 = ((unint64_t)&v126->super.isa + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v72;
  uint64_t v80 = v79 + v77;
  uint64_t v138 = v76 + 32;
  uint64_t v81 = (void (*)(uint64_t, char *, uint64_t))v143;
  v143((char *)v80, v74, v64);
  uint64_t v127 = v66;
  *(void *)(v79 + v78) = v66;
  uint64_t v149 = sub_10052EEE4;
  uint64_t v150 = v79;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v125 = &v147;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015C9B78;
  unint64_t v82 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v83 = v131;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v121 = (char *)sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v120 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v84 = v129;
  uint64_t v85 = v130;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);
  BOOL v86 = *(void (**)(char *, uint64_t))(v135 + 8);
  v135 += 8;
  int v123 = v86;
  v86(v84, v85);
  uint64_t v87 = *(char **)(v134 + 8);
  v134 += 8;
  uint64_t v119 = v87;
  ((void (*)(char *, uint64_t))v87)(v83, v132);
  swift_release();
  uint64_t v88 = v124;
  uint64_t v89 = v133;
  ((void (*)(char *, char *, uint64_t))v141)(v124, v136, v133);
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v72;
  v81(v90 + v137, v88, v89);
  uint64_t v91 = (void (**)(uint64_t))(v90 + v78);
  uint64_t v92 = (void (*)(uint64_t))v144;
  *uint64_t v91 = sub_10054FA10;
  v91[1] = v92;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = sub_10054FA10;
  *(void *)(v93 + 24) = v92;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v94 = v113;
  static DispatchTime.now()();
  uint64_t v95 = v114;
  + infix(_:_:)();
  uint64_t v118 = *(char **)(v115 + 8);
  uint64_t v96 = v116;
  ((void (*)(char *, uint64_t))v118)(v94, v116);
  uint64_t v97 = v88;
  uint64_t v98 = v88;
  uint64_t v99 = v133;
  ((void (*)(char *, char *, uint64_t))v141)(v98, v136, v133);
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 16) = v72;
  long long v101 = v97;
  uint64_t v102 = v99;
  v143((char *)(v100 + v137), v101, v99);
  uint64_t v149 = sub_10052EF48;
  uint64_t v150 = v100;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v146 = 1107296256;
  uint64_t v147 = sub_1004B5480;
  uint64_t v148 = &unk_1015C9C18;
  uint64_t v103 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v104 = v131;
  static DispatchQoS.unspecified.getter();
  uint64_t v151 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v103);
  swift_release();
  v123(v84, v85);
  ((void (*)(char *, uint64_t))v119)(v104, v132);
  ((void (*)(char *, uint64_t))v118)(v95, v96);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v136, v102);
  swift_release();
  return swift_release();
}

uint64_t sub_100542E54(int a1, NSURL *a2, void (*a3)(void, void, void), void (*a4)(void, void), uint64_t a5, int a6, void (*a7)(void, void), uint64_t a8, char a9, void (*a10)(void, void, void), char a11, char a12, uint64_t a13, unsigned int (*a14)(uint64_t, uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,void (*a21)(void, void, void),uint64_t a22,void *a23)
{
  uint64_t v147 = (uint64_t (**)(uint64_t))a8;
  uint64_t v146 = a7;
  LODWORD(v145) = a6;
  uint64_t v128 = a5;
  uint64_t v136 = a4;
  uint64_t v135 = a3;
  uint64_t v134 = a2;
  LODWORD(v133) = a1;
  char v156 = a21;
  BOOL v154 = a23;
  uint64_t v131 = (void (*)(char *, char *, uint64_t))type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v130 = *((void *)v131 - 1);
  __chkstk_darwin(v131);
  uint64_t v129 = (void (*)(char *, uint64_t))((char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v132 = type metadata accessor for DispatchTime();
  uint64_t v122 = *(void *)(v132 - 8);
  uint64_t v24 = __chkstk_darwin(v132);
  uint64_t v120 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v121 = (char *)&v118 - v26;
  uint64_t v138 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v143 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v137 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for DispatchQoS();
  uint64_t v142 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v140 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C(&qword_101638CF0);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v127 = (char *)&v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v126 = (char *)&v118 - v32;
  uint64_t v148 = type metadata accessor for UUID();
  uint64_t v149 = *(void *)(v148 - 8);
  uint64_t v33 = *(void *)(v149 + 64);
  uint64_t v34 = __chkstk_darwin(v148);
  uint64_t v139 = (char *)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v125 = (char *)&v118 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v124 = (uint64_t)&v118 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v123 = (uint64_t)&v118 - v40;
  __chkstk_darwin(v39);
  uint64_t v144 = (char *)&v118 - v41;
  uint64_t v150 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v150);
  uint64_t v43 = (void ***)((char *)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  char v48 = (char *)&v118 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  char v50 = (char *)&v118 - v49;
  uint64_t v51 = swift_allocObject();
  uint64_t v151 = a18;
  *(void *)(v51 + 16) = a18;
  *(void *)(v51 + 24) = a19;
  LODWORD(v152) = a20;
  *(unsigned char *)(v51 + 32) = a20;
  *(void *)(v51 + 40) = v156;
  *(void *)(v51 + 48) = a22;
  uint64_t v155 = v51;
  char v52 = v154;
  *(void *)(v51 + 56) = v154;
  swift_bridgeObjectRetain();
  uint64_t v153 = a22;
  swift_bridgeObjectRetain();
  uint64_t v53 = v52;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v48, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v44);
  sub_10052EE80((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v45 + 8);
  v54(v48, v44);
  v54(v50, v44);
  if (v52)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v163 = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v43 = aBlock;
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = (uint64_t)v43;
    uint64_t v56 = v151;
    uint64_t v57 = a19;
    uint64_t v58 = v152;
    uint64_t v59 = v156;
    uint64_t v60 = (void *)v153;
    uint64_t v61 = v53;
LABEL_11:
    sub_100523464(v55, v56, v57, v58, (uint64_t)v59, v60, v61);
    sub_10001DAB4((uint64_t)v43, &qword_101642760);
    return swift_release();
  }
  uint64_t v62 = v53;
  char v63 = v145;
  uint64_t v64 = v146;
  uint64_t v65 = (uint64_t)v147;
  if ((sub_1004FE40C(v145, (uint64_t)v146, (uint64_t)v147) & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_101342130;
    *(void *)(v71 + 56) = &type metadata for String;
    *(void *)(v71 + 64) = sub_10000B4CC();
    *(void *)(v71 + 32) = v64;
    *(void *)(v71 + 40) = v65;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v163 = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v43 = aBlock;
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = (uint64_t)v43;
    uint64_t v56 = v151;
    uint64_t v57 = a19;
    uint64_t v58 = v152;
    uint64_t v59 = v156;
    uint64_t v60 = (void *)v153;
    uint64_t v61 = v62;
    goto LABEL_11;
  }
  uint64_t v151 = a16;
  uint64_t v152 = a15;
  char v156 = a10;
  LODWORD(v153) = a11 & 1;
  uint64_t v119 = a17;
  BOOL v154 = *(void **)(a17 + 24);
  sub_10000588C(&qword_10163BAB0);
  uint64_t v66 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56);
  if (a9)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(unsigned char *)(inited + 32) = v63;
    *(void *)(inited + 40) = v64;
    *(void *)(inited + 48) = v65;
    uint64_t v68 = (void (*)(void, void))v126;
    uint64_t v69 = v148;
    (*v66)(v126, 1, 1, v148);
    swift_bridgeObjectRetain();
    *((void *)&v116 + 1) = v151;
    *(void *)&long long v116 = v152;
    uint64_t v70 = v123;
    sub_100500E44(v133, v134, (uint64_t)v135, (unint64_t)v136, v128, inited, v68, (unint64_t)v156, v123, v153, a12 & 1, a13, a14, v116);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v68, &qword_101638CF0);
    char v156 = *(void (**)(void, void, void))(v149 + 32);
    v156(v144, v70, v69);
  }
  else
  {
    uint64_t v72 = swift_initStackObject();
    *(_OWORD *)(v72 + 16) = xmmword_101342130;
    *(unsigned char *)(v72 + 32) = v63;
    *(void *)(v72 + 40) = v64;
    *(void *)(v72 + 48) = v65;
    uint64_t v73 = (uint64_t)v127;
    uint64_t v74 = v148;
    (*v66)(v127, 1, 1, v148);
    swift_bridgeObjectRetain();
    uint64_t v75 = v125;
    UUID.init()();
    *((void *)&v117 + 1) = v151;
    *(void *)&long long v117 = v152;
    uint64_t v76 = v124;
    sub_1004E7E1C(v133, (uint64_t)v134, v135, v136, v75, v72, v73, (unint64_t)v156, v124, v153, a12 & 1, a13, (uint64_t)a14, v117);
    swift_bridgeObjectRelease();
    uint64_t v77 = v149;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v75, v74);
    sub_10001DAB4(v73, &qword_101638CF0);
    char v156 = *(void (**)(void, void, void))(v77 + 32);
    v156(v144, v76, v74);
    uint64_t v69 = v74;
  }
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v78 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_101342130;
  uint64_t v80 = v144;
  uint64_t v81 = UUID.uuidString.getter();
  uint64_t v83 = v82;
  *(void *)(v79 + 56) = &type metadata for String;
  *(void *)(v79 + 64) = sub_10000B4CC();
  *(void *)(v79 + 32) = v81;
  *(void *)(v79 + 40) = v83;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v84 = v119;
  uint64_t v133 = *(void *)(v119 + 176);
  uint64_t v85 = v149;
  uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
  BOOL v154 = (void *)(v149 + 16);
  BOOL v86 = v139;
  v131(v139, v80, v69);
  uint64_t v87 = *(unsigned __int8 *)(v85 + 80);
  uint64_t v88 = v85;
  uint64_t v150 = ((v87 + 24) & ~v87) + v33;
  uint64_t v89 = (v87 + 24) & ~v87;
  uint64_t v152 = v89;
  uint64_t v153 = v87 | 7;
  unint64_t v90 = (v150 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = v84;
  uint64_t v151 = v88 + 32;
  v156(v91 + v89, v86, v69);
  *(void *)(v91 + v90) = v78;
  BOOL v161 = sub_10052EEE4;
  uint64_t v162 = v91;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v158 = 1107296256;
  uint64_t v147 = &v159;
  uint64_t v159 = sub_1004B5480;
  uint64_t v160 = &unk_1015C9E48;
  uint64_t v92 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v93 = v140;
  static DispatchQoS.unspecified.getter();
  uint64_t v163 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v145 = sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v136 = (void (*)(void, void))sub_10000588C((uint64_t *)&unk_10163F350);
  uint64_t v135 = (void (*)(void, void, void))sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v94 = v137;
  uint64_t v95 = v78;
  uint64_t v96 = v138;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v92);
  uint64_t v97 = *(void (**)(void, void))(v143 + 8);
  v143 += 8;
  uint64_t v146 = v97;
  v97(v94, v96);
  uint64_t v98 = *(NSURL **)(v142 + 8);
  v142 += 8;
  uint64_t v134 = v98;
  ((void (*)(char *, uint64_t))v98)(v93, v141);
  swift_release();
  uint64_t v99 = v139;
  uint64_t v100 = v148;
  long long v101 = v131;
  v131(v139, v144, v148);
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = v84;
  uint64_t v103 = v100;
  uint64_t v104 = (void (*)(uint64_t, char *, uint64_t))v156;
  v156(v102 + v152, v99, v103);
  int v105 = (void (**)(uint64_t))(v102 + v90);
  long long v106 = (void (*)(uint64_t))v155;
  *int v105 = sub_10055051C;
  v105[1] = v106;
  swift_retain();
  swift_retain();
  uint64_t v130 = v95;
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v107 = swift_allocObject();
  *(void *)(v107 + 16) = sub_10055051C;
  *(void *)(v107 + 24) = v106;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v108 = v120;
  static DispatchTime.now()();
  uint64_t v109 = v121;
  + infix(_:_:)();
  uint64_t v129 = *(void (**)(char *, uint64_t))(v122 + 8);
  v129(v108, v132);
  int v110 = v139;
  uint64_t v111 = v148;
  v101(v139, v144, v148);
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v119;
  v104(v112 + v152, v110, v111);
  BOOL v161 = sub_10052EF48;
  uint64_t v162 = v112;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v158 = 1107296256;
  uint64_t v159 = sub_1004B5480;
  uint64_t v160 = &unk_1015C9EE8;
  uint64_t v113 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v114 = v140;
  static DispatchQoS.unspecified.getter();
  uint64_t v163 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v113);
  swift_release();
  v146(v94, v96);
  ((void (*)(char *, uint64_t))v134)(v114, v141);
  v129(v109, v132);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v144, v148);
  swift_release();
  return swift_release();
}

uint64_t sub_100544594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 32));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if ((v7 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = type metadata accessor for MessagingMessageContext();
  if (v8)
  {
    uint64_t v10 = (void *)(a1 + *(int *)(v9 + 48));
    if (v6 != *v10 || v7 != v10[1])
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    return 1;
  }
  uint64_t v13 = a1 + *(int *)(v9 + 24);
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v14 = *(void *)(v13 + 16);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v16 _stripPotentialTokenURIWithToken:0];

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    uint64_t v21 = a2 + *(int *)(v4 + 28);
    if (*(void *)(v21 + 8) != v18 || *(void *)(v21 + 16) != v20)
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v23 & 1;
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  static os_log_type_t.error.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_101342130;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_10000B4CC();
  *(void *)(v24 + 32) = v15;
  *(void *)(v24 + 40) = v14;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1005447A0()
{
  if (qword_1016368B8 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101648040);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v1 = v0;
  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  if (v0)
  {
    uint64_t v2 = v0;
    if ((v16 & 1) == 0)
    {
      swift_errorRetain();
      static os_log_type_t.error.getter();
      if (qword_101637280 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_101342130;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v4 = String.init<A>(describing:)();
      uint64_t v6 = v5;
      *(void *)(v3 + 56) = &type metadata for String;
      *(void *)(v3 + 64) = sub_10000B4CC();
      *(void *)(v3 + 32) = v4;
      *(void *)(v3 + 40) = v6;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_willThrow();
      sub_10015B4A8(v0, 1);
      char v7 = 0;
LABEL_14:
      sub_10015B4A8(v15, v7);
      return v15;
    }
LABEL_11:
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10000B4CC();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    sub_10015B4A8(v2, v1 != 0);
    char v7 = 1;
    goto LABEL_14;
  }
  uint64_t v2 = v15;
  uint64_t v8 = qword_101636FC8;
  uint64_t v9 = swift_bridgeObjectRetain();
  if (v8 != -1) {
    uint64_t v9 = swift_once();
  }
  __chkstk_darwin(v9);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  sub_10015B4A8(v15, 0);
  if (v16) {
    goto LABEL_11;
  }
  return v15;
}

void sub_100544B78()
{
  uint64_t v1 = sub_1005447A0();
  if (v0) {
    return;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  id v5 = [self defaultStore];
  if (!v5) {
    goto LABEL_62;
  }
  uint64_t v6 = v5;
  id v7 = [v5 aa_primaryAppleAccount];

  if (!v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  id v8 = [v7 username];
  if (!v8) {
    goto LABEL_63;
  }
  uint64_t v9 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPOwnerSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    return;
  }
  char v13 = v10;
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  unint64_t v77 = v3;
  sub_1004E3560(v3);
  id v17 = (unint64_t *)sub_101158CCC(v16);
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_10163BAB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v13;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = v15;
  uint64_t v19 = sub_101158CCC(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (*(void *)(v19 + 16) <= v17[2] >> 3)
  {
    v78[0] = v17;
    sub_10089F49C(v19);
  }
  else
  {
    id v17 = sub_1008A3D94(v19, v17);
  }
  swift_bridgeObjectRelease();
  uint64_t v72 = v7;
  sub_1004E39B8(v4);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_101158CCC(v21);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_101637280 != -1) {
LABEL_59:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101342130;
  sub_10054D3D4();
  swift_bridgeObjectRetain();
  uint64_t v24 = Set.description.getter();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v27 = sub_10000B4CC();
  *(void *)(v23 + 64) = v27;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  swift_bridgeObjectRetain();
  uint64_t v29 = Set.description.getter();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = v27;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v79 = _swiftEmptyDictionarySingleton;
  uint64_t v76 = sub_10130FFD0(v22, (uint64_t)v17);
  swift_bridgeObjectRelease();
  unint64_t v32 = v77;
  if ((v77 & 0xC000000000000001) != 0)
  {
    uint64_t v22 = __CocoaSet.makeIterator()();
    id v17 = (unint64_t *)&qword_10166BF90;
    sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
    sub_10033149C(&qword_101648030, (unint64_t *)&qword_10166BF90);
    Set.Iterator.init(_cocoa:)();
    unint64_t v32 = v78[10];
    unint64_t v74 = v78[11];
    uint64_t v33 = v78[12];
    uint64_t v34 = v78[13];
    unint64_t v35 = v78[14];
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v36 = -1 << *(unsigned char *)(v77 + 32);
    unint64_t v74 = v77 + 56;
    uint64_t v33 = ~v36;
    uint64_t v37 = -v36;
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v35 = v38 & *(void *)(v77 + 56);
  }
  int64_t v73 = (unint64_t)(v33 + 64) >> 6;
  uint64_t v39 = &qword_10170E000;
  while (1)
  {
    while (1)
    {
      if ((v32 & 0x8000000000000000) != 0)
      {
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_57;
        }
        sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v46 = (id)v78[0];
        swift_unknownObjectRelease();
        uint64_t v45 = v34;
        uint64_t v43 = v35;
        if (!v46) {
          goto LABEL_57;
        }
      }
      else
      {
        if (v35)
        {
          uint64_t v43 = (v35 - 1) & v35;
          unint64_t v44 = __clz(__rbit64(v35)) | (v34 << 6);
          uint64_t v45 = v34;
        }
        else
        {
          int64_t v47 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            goto LABEL_59;
          }
          if (v47 >= v73) {
            goto LABEL_57;
          }
          unint64_t v48 = *(void *)(v74 + 8 * v47);
          uint64_t v45 = v34 + 1;
          if (!v48)
          {
            uint64_t v45 = v34 + 2;
            if (v34 + 2 >= v73) {
              goto LABEL_57;
            }
            unint64_t v48 = *(void *)(v74 + 8 * v45);
            if (!v48)
            {
              uint64_t v45 = v34 + 3;
              if (v34 + 3 >= v73) {
                goto LABEL_57;
              }
              unint64_t v48 = *(void *)(v74 + 8 * v45);
              if (!v48)
              {
                uint64_t v45 = v34 + 4;
                if (v34 + 4 >= v73) {
                  goto LABEL_57;
                }
                unint64_t v48 = *(void *)(v74 + 8 * v45);
                if (!v48)
                {
                  uint64_t v49 = v34 + 5;
                  while (v73 != v49)
                  {
                    unint64_t v48 = *(void *)(v74 + 8 * v49++);
                    if (v48)
                    {
                      uint64_t v45 = v49 - 1;
                      goto LABEL_43;
                    }
                  }
LABEL_57:
                  sub_100132C20();
                  int64_t v71 = sub_1004E4E24(v76, (uint64_t *)&v79);
                  swift_release();
                  sub_100A9C40C(v71);
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  return;
                }
              }
            }
          }
LABEL_43:
          uint64_t v43 = (v48 - 1) & v48;
          unint64_t v44 = __clz(__rbit64(v48)) + (v45 << 6);
        }
        id v46 = *(id *)(*(void *)(v32 + 48) + 8 * v44);
        if (!v46) {
          goto LABEL_57;
        }
      }
      unint64_t v77 = v43;
      id v50 = [v46 appleID];
      if (v50) {
        break;
      }
      uint64_t v22 = static os_log_type_t.error.getter();
      id v17 = (unint64_t *)v39[507];
      uint64_t v40 = v45;
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_101342130;
      *(void *)(v41 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
      *(void *)(v41 + 64) = sub_10033149C(&qword_101648038, (unint64_t *)&qword_10166BF90);
      *(void *)(v41 + 32) = v46;
      id v42 = v46;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      uint64_t v34 = v40;
      unint64_t v35 = v77;
    }
    uint64_t v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;

    v78[0] = v52;
    v78[1] = v54;
    sub_1000336D4();
    swift_bridgeObjectRetain();
    char v55 = StringProtocol.contains<A>(_:)();
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v55) {
      break;
    }
    id v17 = (unint64_t *)IDSCopyIDForPhoneNumber();

    if (!v17) {
      goto LABEL_61;
    }
    char v57 = 1;
LABEL_51:
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();

    if (sub_100DC7D04(v57, v22, v59, v76))
    {
      uint64_t v75 = v45;
      id v60 = [v46 altDSID];
      if (v60)
      {
        uint64_t v61 = v60;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = String.utf8Data.getter();
        unint64_t v63 = v32;
        uint64_t v65 = v64;
        swift_bridgeObjectRelease();
        uint64_t v66 = v79;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v78[0] = v66;
        uint64_t v79 = (void *)0x8000000000000000;
        id v17 = v78;
        uint64_t v68 = v65;
        unint64_t v32 = v63;
        uint64_t v39 = &qword_10170E000;
        sub_10016EE0C(v62, v68, v57, v22, v59, isUniquelyReferenced_nonNull_native);
        uint64_t v22 = (uint64_t)v79;
        uint64_t v79 = (void *)v78[0];

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = static os_log_type_t.error.getter();
        id v17 = (unint64_t *)v39[507];
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_101342130;
        *(void *)(v69 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
        *(void *)(v69 + 64) = sub_10033149C(&qword_101648038, (unint64_t *)&qword_10166BF90);
        *(void *)(v69 + 32) = v46;
        id v70 = v46;
        os_log(_:dso:log:_:_:)();
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v75;
      unint64_t v35 = v77;
    }
    else
    {
      swift_bridgeObjectRelease();

      uint64_t v34 = v45;
      unint64_t v35 = v77;
    }
  }
  id v17 = (unint64_t *)IDSCopyIDForEmailAddress();

  if (v17)
  {
    char v57 = 0;
    goto LABEL_51;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

unint64_t sub_100545724(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1A90, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void sub_100545770()
{
  sub_10051C484(*(void (**)())(v0 + 16));
}

unint64_t sub_100545790()
{
  unint64_t result = qword_101663710;
  if (!qword_101663710)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    sub_10052EE80(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101663710);
  }
  return result;
}

uint64_t sub_100545834()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100545850(uint64_t a1)
{
  return sub_1005521DC(a1, type metadata accessor for SharedBeaconRecord, sub_10051AA2C);
}

uint64_t sub_10054587C()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100545898(uint64_t a1)
{
  return sub_100545BF0(a1, sub_10051AFB0);
}

void sub_1005458B0()
{
  sub_10051C484(*(void (**)())(v0 + 16));
}

uint64_t sub_1005458D0()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1005458EC(uint64_t a1)
{
  return sub_1005521DC(a1, type metadata accessor for SharedBeaconRecord, sub_10051885C);
}

uint64_t sub_100545918()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100545934()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  char v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100545BD8(uint64_t a1)
{
  return sub_100545BF0(a1, sub_100518DE0);
}

uint64_t sub_100545BF0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v2 + v5;
  uint64_t v7 = (uint64_t *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return a2(a1, v6, v8, v9);
}

unint64_t sub_100545CA4()
{
  unint64_t result = qword_101647EF8;
  if (!qword_101647EF8)
  {
    sub_10000592C(&qword_101647EF0);
    sub_10052EE80(&qword_101647F00, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647EF8);
  }
  return result;
}

uint64_t sub_100545D48()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100545D90(uint64_t a1)
{
  sub_1005038D0(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t sub_100545DA0()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100545DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100506A40(*(void *)(v4 + 16), v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a1, a2, a3, a4);
}

uint64_t sub_100545E54(unint64_t *a1)
{
  return sub_100503ED0(a1, *(void *)(v1 + 16));
}

unint64_t sub_100545E70()
{
  unint64_t result = qword_101647F18;
  if (!qword_101647F18)
  {
    sub_10000592C(&qword_101657CE0);
    sub_10052EE80(&qword_101647F20, (void (*)(uint64_t))type metadata accessor for BeaconObservation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647F18);
  }
  return result;
}

uint64_t sub_100545F18()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100545F58()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101647F38 + dword_101647F38);
  return v4(v2, v0 + 24);
}

uint64_t sub_100546008(uint64_t a1)
{
  return sub_10052D920(a1, *(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100546028()
{
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1005545FC;
  uint64_t v4 = (uint64_t (*)(char *))((char *)&dword_101647F50 + dword_101647F50);
  return v4(v2);
}

unint64_t sub_1005460C8()
{
  unint64_t result = qword_101647F78;
  if (!qword_101647F78)
  {
    sub_10000592C(&qword_101647F70);
    sub_10052EE80(&qword_10163D790, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101647F78);
  }
  return result;
}

uint64_t sub_100546170()
{
  type metadata accessor for OwnedBeaconRecord();

  return sub_10050748C();
}

uint64_t sub_1005461D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100546284(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = swift_task_alloc();
  long long v9 = *(_OWORD *)(v1 + v6);
  *(void *)(v2 + 16) = v8;
  *(void *)uint64_t v8 = v2;
  *(void *)(v8 + 8) = sub_100033F68;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v7;
  return _swift_task_switch(sub_100507154, 0, 0);
}

uint64_t sub_1005463A4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10012E0C8;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100507420, 0, 0);
}

uint64_t sub_100546450(uint64_t a1)
{
  return sub_100507560(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10054646C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_1005467F8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100507900(v2, v3, v4);
}

uint64_t sub_100546860()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100546BE4()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_1005257F4(v3, v4);
}

uint64_t sub_100546CB8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100547048()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_100525A54(v4, v5);
}

void sub_100547144(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  uint64_t v157 = a3;
  uint64_t v178 = a2;
  uint64_t v145 = a1;
  uint64_t v164 = type metadata accessor for Date();
  uint64_t v176 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  *(void *)&long long v179 = (char *)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = (int *)type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v175);
  uint64_t v161 = (uint64_t)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v11 = __chkstk_darwin(v159);
  uint64_t v160 = (uint64_t)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v14 = (long long *)((char *)&v133 - v13);
  uint64_t v138 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v140 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for DispatchQoS();
  uint64_t v137 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v136 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v139 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ShareRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v166 = (uint64_t)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_allocObject();
  int v177 = a4;
  *(void *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = a5;
  uint64_t v23 = swift_allocObject();
  uint64_t v167 = (void (*)(char *, char *, uint64_t))v23;
  *(void *)(v23 + 16) = 0;
  uint64_t v135 = (uint64_t *)(v23 + 16);
  uint64_t v24 = self;
  swift_retain();
  id v25 = [v24 defaultStore];
  if (!v25)
  {
    swift_release();
    __break(1u);
LABEL_31:
    swift_release();
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v26 = v25;
  id v27 = [v25 aa_primaryAppleAccount];

  if (!v27)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v181 = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v77 = aBlock;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_101342130;
    uint64_t v181 = (uint64_t)v77;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v79 = String.init<A>(describing:)();
    uint64_t v81 = v80;
    *(void *)(v78 + 56) = &type metadata for String;
    *(void *)(v78 + 64) = sub_10000B4CC();
    *(void *)(v78 + 32) = v79;
    *(void *)(v78 + 40) = v81;
    os_log(_:dso:log:_:_:)();

    uint64_t v82 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v177)(v82);
    swift_release();
    swift_release();

    return;
  }
  uint64_t v133 = v15;
  uint64_t v134 = v22;
  id v141 = v27;
  id v28 = [v27 username];
  if (!v28) {
    goto LABEL_31;
  }
  uint64_t v29 = v28;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  uint64_t v156 = v30;
  uint64_t v155 = v31;
  uint64_t v165 = v32;
  if (!v32)
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v83 = swift_allocObject();
    long long v179 = xmmword_101342130;
    *(_OWORD *)(v83 + 16) = xmmword_101342130;
    id v84 = [v141 username];
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v88 = v87;

      *(void *)(v83 + 56) = &type metadata for String;
      unint64_t v89 = sub_10000B4CC();
      *(void *)(v83 + 64) = v89;
      *(void *)(v83 + 32) = v86;
      *(void *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v181 = 7;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10052EE80(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v90 = aBlock;
      swift_errorRetain();
      static os_log_type_t.error.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      uint64_t v91 = swift_allocObject();
      *(_OWORD *)(v91 + 16) = v179;
      uint64_t v181 = (uint64_t)v90;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v92 = String.init<A>(describing:)();
      *(void *)(v91 + 56) = &type metadata for String;
      *(void *)(v91 + 64) = v89;
      *(void *)(v91 + 32) = v92;
      *(void *)(v91 + 40) = v93;
      os_log(_:dso:log:_:_:)();

      uint64_t v94 = swift_bridgeObjectRelease();
      ((void (*)(uint64_t))v177)(v94);
      swift_release();
      swift_release();

      return;
    }
LABEL_32:
    swift_release();
    __break(1u);
    return;
  }
  uint64_t v158 = dispatch_group_create();
  uint64_t v33 = *(void *)(v145 + 16);
  if (v33)
  {
    BOOL v154 = (unsigned __int8 *)(v166 + *(int *)(v19 + 36));
    uint64_t v153 = v166 + *(int *)(v19 + 20);
    uint64_t v34 = v145 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v148 = *(void *)(v20 + 72);
    uint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v151 = (void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v150 = (void (**)(char *, char *, uint64_t))(v176 + 32);
    swift_bridgeObjectRetain();
    int v177 = 0;
    long long v149 = xmmword_101348180;
    long long v147 = xmmword_101347BA0;
    uint64_t v35 = v178;
    uint64_t v36 = v175;
    uint64_t v146 = v14;
    while (1)
    {
      uint64_t v171 = v33;
      uint64_t v170 = v34;
      uint64_t v37 = v166;
      sub_100552A0C(v34, v166, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      int v169 = *v154;
      uint64_t v38 = *((void *)v154 + 2);
      uint64_t v168 = *((void *)v154 + 1);
      uint64_t v39 = v161;
      sub_100552A0C(v35, v161, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v40 = *v152;
      uint64_t v41 = v162;
      ((void (*)(void, uint64_t))*v152)(v179, v153);
      uint64_t v176 = v38;
      swift_bridgeObjectRetain();
      uint64_t v42 = v165;
      swift_bridgeObjectRetain();
      sub_100552C2C(v37, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v43 = (int *)v159;
      *((unsigned char *)v14 + *(int *)(v159 + 56)) = 3;
      uint64_t v44 = (uint64_t)v14 + v43[20];
      uint64_t v172 = v43[15];
      uint64_t v173 = v44;
      uint64_t v174 = (NSURL *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      uint64_t v175 = (int *)*((void *)v174[-1]._reserved + 7);
      ((void (*)(uint64_t, uint64_t, uint64_t, NSURL *))v175)(v44, 1, 1, v174);
      *unint64_t v14 = v149;
      uint64_t v45 = v41;
      v40((char *)v14 + v43[5], v39 + v36[5], v41);
      uint64_t v46 = v179;
      v40((char *)v14 + v43[6], v179, v45);
      int64_t v47 = (char *)v14 + v43[7];
      char *v47 = v156;
      *((void *)v47 + 1) = v155;
      *((void *)v47 + 2) = v42;
      unint64_t v48 = (void *)((char *)v14 + v43[8]);
      *unint64_t v48 = 0;
      v48[1] = 0xE000000000000000;
      uint64_t v49 = (uint64_t *)(v39 + v36[14]);
      uint64_t v51 = *v49;
      uint64_t v50 = v49[1];
      uint64_t v52 = (void *)((char *)v14 + v43[9]);
      *uint64_t v52 = v51;
      v52[1] = v50;
      uint64_t v53 = (uint64_t *)(v39 + v36[15]);
      uint64_t v54 = *v53;
      uint64_t v55 = v53[1];
      NSString v56 = (void *)((char *)v14 + v43[10]);
      *NSString v56 = v54;
      v56[1] = v55;
      *(void *)((char *)v14 + v43[11]) = *(void *)(v39 + v36[16]);
      *(void *)((char *)v14 + v43[12]) = *(void *)(v39 + v36[17]);
      *(void *)((char *)v14 + v172) = -1;
      *((unsigned char *)v14 + v43[13]) = 0;
      *((unsigned char *)v14 + v43[16]) = 1;
      *(void *)((char *)v14 + v43[17]) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v57 = v163;
      static Date.distantPast.getter();
      (*v151)(v46, v45);
      (*v150)((char *)v14 + v43[18], v57, v164);
      sub_10001D074(v39 + v36[7], (uint64_t)v14 + v43[19], &qword_101638CF0);
      sub_100552C2C(v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v58 = v173;
      sub_10001DAB4(v173, (uint64_t *)&unk_101653D30);
      ((void (*)(uint64_t, uint64_t, uint64_t, NSURL *))v175)(v58, 1, 1, v174);
      uint64_t v59 = v160;
      sub_100552A0C((uint64_t)v14, v160, type metadata accessor for SharedBeaconRecord);
      id v60 = v177;
      sub_1004FAF2C(4, 1, v59, (uint64_t)&aBlock);
      if (v60) {
        break;
      }
      int v177 = 0;
      int v61 = aBlock;
      uint64_t v62 = (void (*)(void, void))v185;
      uint64_t v174 = (NSURL *)v183;
      uint64_t v175 = (int *)v184;
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = v147;
      uint64_t v64 = UUID.uuidString.getter();
      uint64_t v66 = v65;
      *(void *)(v63 + 56) = &type metadata for String;
      unint64_t v67 = sub_10000B4CC();
      *(void *)(v63 + 32) = v64;
      *(void *)(v63 + 40) = v66;
      *(void *)(v63 + 96) = &type metadata for String;
      *(void *)(v63 + 104) = v67;
      uint64_t v68 = v168;
      *(void *)(v63 + 64) = v67;
      *(void *)(v63 + 72) = v68;
      uint64_t v69 = v176;
      *(void *)(v63 + 80) = v176;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v70 = v158;
      dispatch_group_enter(v158);
      int64_t v71 = v70;
      uint64_t v72 = v167;
      swift_retain();
      unint64_t v73 = sub_10092E5D0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v74 = sub_101158790((uint64_t)&off_1015A1D90);
      uint64_t v132 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_101158790((uint64_t)_swiftEmptyArrayStorage);
      int v75 = v61;
      uint64_t v76 = v175;
      sub_1005417F0(v75, v174, (void (*)(void, void, void))v175, v62, v73, v169, v68, v69, 0, 0, 1, 0, v74, v132, 0, 0, v157, v71, v72);
      swift_release();

      uint64_t v35 = v178;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8((uint64_t)v76, (unint64_t)v62);
      swift_bridgeObjectRelease();
      unint64_t v14 = v146;
      sub_100552C2C((uint64_t)v146, type metadata accessor for SharedBeaconRecord);
      uint64_t v34 = v170 + v148;
      uint64_t v33 = v171 - 1;
      if (v171 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100552C2C((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    swift_release();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v95 = v134;
    uint64_t v96 = v137;
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_101342130;
    uint64_t aBlock = v60;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v98 = String.init<A>(describing:)();
    uint64_t v100 = v99;
    *(void *)(v97 + 56) = &type metadata for String;
    *(void *)(v97 + 64) = sub_10000B4CC();
    *(void *)(v97 + 32) = v98;
    *(void *)(v97 + 40) = v100;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v101 = v142;
    uint64_t v102 = v139;
    uint64_t v103 = v143;
    (*(void (**)(char *, void, uint64_t))(v142 + 104))(v139, enum case for DispatchQoS.QoSClass.default(_:), v143);
    uint64_t v104 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
    int v105 = (void *)swift_allocObject();
    _OWORD v105[2] = sub_10054F9D4;
    v105[3] = v95;
    v105[4] = v60;
    uint64_t v186 = sub_10052A878;
    uint64_t v187 = v105;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v183 = 1107296256;
    uint64_t v184 = sub_1004B5480;
    uint64_t v185 = &unk_1015C9A10;
    long long v106 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v107 = v136;
    static DispatchQoS.unspecified.getter();
    uint64_t v181 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v108 = v140;
    uint64_t v109 = v138;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v106);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v108, v109);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v107, v144);
  }
  else
  {
LABEL_25:
    swift_bridgeObjectRelease();
    OS_dispatch_group.wait()();
    int v110 = v135;
    swift_beginAccess();
    uint64_t v111 = *v110;
    uint64_t v112 = v134;
    uint64_t v113 = v140;
    uint64_t v114 = v143;
    uint64_t v115 = v142;
    long long v116 = v139;
    if (v111)
    {
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      long long v117 = *(void (**)(char *))(v115 + 104);
      LODWORD(v179) = enum case for DispatchQoS.QoSClass.default(_:);
      v117(v116);
      swift_errorRetain();
      uint64_t v118 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
      uint64_t v119 = (void *)swift_allocObject();
      v119[2] = sub_10054F9D4;
      v119[3] = v112;
      v119[4] = v111;
      uint64_t v186 = sub_10052A878;
      uint64_t v187 = v119;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v183 = 1107296256;
      uint64_t v184 = sub_1004B5480;
      uint64_t v185 = &unk_1015C9AB0;
      uint64_t v120 = _Block_copy(&aBlock);
      swift_errorRetain();
      swift_retain();
      uint64_t v121 = v136;
      static DispatchQoS.unspecified.getter();
      unint64_t v180 = _swiftEmptyArrayStorage;
      sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v122 = v138;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v123 = v120;
      uint64_t v114 = v143;
      _Block_release(v123);

      uint64_t v124 = v121;
      uint64_t v115 = v142;
      swift_errorRelease();
      uint64_t v125 = v112;
      uint64_t v126 = v133;
      (*(void (**)(char *, uint64_t))(v133 + 8))(v113, v122);
      uint64_t v127 = v113;
      uint64_t v128 = v137;
      (*(void (**)(char *, uint64_t))(v137 + 8))(v124, v144);
      swift_release();
    }
    else
    {
      LODWORD(v179) = enum case for DispatchQoS.QoSClass.default(_:);
      uint64_t v122 = v138;
      uint64_t v125 = v134;
      uint64_t v126 = v133;
      uint64_t v127 = v140;
      uint64_t v128 = v137;
      uint64_t v124 = v136;
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v115 + 104))(v116, v179, v114);
    *(void *)&long long v179 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
    uint64_t v129 = swift_allocObject();
    *(void *)(v129 + 16) = sub_10054F9D4;
    *(void *)(v129 + 24) = v125;
    uint64_t v186 = sub_1003C6214;
    uint64_t v187 = (void *)v129;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v183 = 1107296256;
    uint64_t v184 = sub_1004B5480;
    uint64_t v185 = &unk_1015C9A60;
    uint64_t v130 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v180 = _swiftEmptyArrayStorage;
    sub_10052EE80((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v131 = (void *)v179;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v130);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v122);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v124, v144);
    swift_release();
  }
  swift_release();
  swift_release();
}

unint64_t sub_1005489D4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1DE0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_100548A20(uint64_t a1, uint64_t a2)
{
  v2[37] = a1;
  v2[38] = a2;
  v2[39] = type metadata accessor for PeerCommunicationIdentifier();
  v2[40] = swift_task_alloc();
  v2[41] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v2[42] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  v2[43] = v3;
  v2[44] = *(void *)(v3 - 8);
  v2[45] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[46] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[47] = v5;
  v2[48] = *(void *)(v5 + 64);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v2[58] = v6;
  v2[59] = *(void *)(v6 - 8);
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  return _swift_task_switch(sub_100548CB8, 0, 0);
}

uint64_t sub_100548CB8()
{
  if (*(void *)(*(void *)(v0 + 304) + 16))
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      Swift::String v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v2;
      *Swift::String v2 = v0;
      v2[1] = sub_100548F3C;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10054D2A0();
    swift_allocError();
    *uint64_t v3 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  return result;
}

uint64_t sub_100548F3C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 520) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10054903C, 0, 0);
}

uint64_t sub_10054903C()
{
  uint64_t v1 = *(void *)(v0 + 520);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 520);
    return _swift_task_switch(sub_100549270, v2, 0);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000010;
    v3[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100549270()
{
  *(void *)(v0 + 528) = *(void *)(*(void *)(v0 + 520) + 128);
  return _swift_task_switch(sub_100549298, 0, 0);
}

uint64_t sub_100549298()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100549374;
  uint64_t v2 = *(void *)(v0 + 528);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100549374()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100549470, 0, 0);
}

uint64_t sub_100549470()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10054951C;
  return sub_100E59F38(v2, 0);
}

uint64_t sub_10054951C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 552) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10054961C, 0, 0);
}

uint64_t sub_10054961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(v3 + 552);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v55 = *(void *)(v4 + 16);
  if (v55)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 464);
    size_t v53 = *(void *)(v3 + 552);
    uint64_t v54 = *(void *)(v3 + 472);
    while (1)
    {
      if (v6 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v9 = *(void *)(v3 + 496);
      uint64_t v8 = *(void *)(v3 + 504);
      unint64_t v10 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v11 = *(void *)(v54 + 72);
      sub_100552A0C(*(void *)(v3 + 552) + v10 + v11 * v6, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      int v12 = *(unsigned __int8 *)(v8 + *(int *)(v7 + 28));
      sub_100552A0C(v8, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v13 = *(void *)(v3 + 496);
      if (!v12) {
        break;
      }
      int v14 = *(unsigned __int8 *)(v13 + *(int *)(v7 + 28));
      sub_100552C2C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v14 == 1) {
        goto LABEL_10;
      }
      sub_100552C2C(*(void *)(v3 + 504), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
LABEL_4:
      size_t v4 = v53;
      if (v55 == ++v6) {
        goto LABEL_15;
      }
    }
    sub_100552C2C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
LABEL_10:
    sub_100551764(*(void *)(v3 + 504), *(void *)(v3 + 488), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1)
    {
      sub_1000B721C(v15 > 1, v16 + 1, 1);
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    uint64_t v17 = *(void *)(v3 + 488);
    _swiftEmptyArrayStorage[2] = v16 + 1;
    sub_100551764(v17, (uint64_t)_swiftEmptyArrayStorage + v10 + v16 * v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    goto LABEL_4;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  *(void *)(v3 + 560) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 272) = _swiftEmptyDictionarySingleton;
  uint64_t v18 = _swiftEmptyArrayStorage[2];
  *(void *)(v3 + 568) = v18;
  if (v18)
  {
    *(_DWORD *)(v3 + 840) = *(_DWORD *)(*(void *)(v3 + 472) + 80);
    *(void *)(v3 + 576) = 0;
    if (_swiftEmptyArrayStorage[2])
    {
      unint64_t v19 = 0;
      while (1)
      {
        uint64_t v20 = *(void *)(v3 + 480);
        uint64_t v21 = *(void *)(v3 + 464);
        sub_100552A0C((uint64_t)v5+ ((*(unsigned __int8 *)(v3 + 840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 840))+ *(void *)(*(void *)(v3 + 472) + 72) * v19, v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v22 = *(void *)(v20 + *(int *)(v21 + 32));
        uint64_t v23 = *(void *)(v22 + 16);
        if (v23)
        {
          uint64_t v24 = *(void *)(v3 + 376);
          sub_10000588C(&qword_10163BC50);
          uint64_t v25 = *(void *)(v24 + 72);
          unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
          id v27 = (void *)swift_allocObject();
          size_t v4 = j__malloc_size(v27);
          if (!v25) {
            goto LABEL_50;
          }
          if (v4 - v26 == 0x8000000000000000 && v25 == -1) {
            goto LABEL_52;
          }
          void v27[2] = v23;
          void v27[3] = 2 * ((uint64_t)(v4 - v26) / v25);
          swift_bridgeObjectRetain_n();
          uint64_t v29 = sub_100711B04(v3 + 176, (char *)v27 + v26, v23, v22);
          size_t v4 = sub_100132C20();
          if (v29 != v23) {
            goto LABEL_51;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          id v27 = _swiftEmptyArrayStorage;
        }
        *(void *)(v3 + 584) = v27;
        uint64_t v30 = v27[2];
        *(void *)(v3 + 592) = v30;
        uint64_t v31 = *(void *)(v3 + 376);
        if (v30)
        {
          int v32 = *(_DWORD *)(v31 + 80);
          *(_DWORD *)(v3 + 844) = v32;
          *(void *)(v3 + 600) = *(void *)(v31 + 72);
          uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
          *(void *)(v3 + 608) = v33;
          *(void *)(v3 + 616) = 0;
          uint64_t v34 = *(void *)(v3 + 456);
          uint64_t v35 = *(void *)(v3 + 368);
          *(void *)(v3 + 624) = (v31 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v33(v34, (char *)v27 + ((v32 + 32) & ~(unint64_t)v32), v35);
          uint64_t v36 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56);
          *(void *)(v3 + 632) = v36;
          *(void *)(v3 + 640) = (v31 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          v36(v34, 0, 1, v35);
          uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
          *(void *)(v3 + 648) = v37;
          *(void *)(v3 + 656) = (v31 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
          if (v37(v34, 1, v35) != 1)
          {
            uint64_t v46 = *(void *)(v3 + 456);
            uint64_t v47 = *(void *)(v3 + 424);
            uint64_t v48 = *(void *)(v3 + 368);
            uint64_t v49 = *(void *)(v3 + 376);
            uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
            *(void *)(v3 + 664) = v50;
            *(void *)(v3 + 672) = (v49 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
            v50(v47, v46, v48);
            a2 = *(void *)(v3 + 520);
            size_t v4 = (size_t)sub_100549D88;
            a3 = 0;
            return _swift_task_switch(v4, a2, a3);
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(v31 + 56))(*(void *)(v3 + 456), 1, 1, *(void *)(v3 + 368));
        }
        uint64_t v38 = *(void *)(v3 + 576);
        uint64_t v39 = *(void *)(v3 + 568);
        uint64_t v40 = *(void *)(v3 + 480);
        swift_release();
        sub_100552C2C(v40, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (v38 + 1 == v39) {
          break;
        }
        unint64_t v19 = *(void *)(v3 + 576) + 1;
        *(void *)(v3 + 576) = v19;
        uint64_t v5 = *(void **)(v3 + 560);
        if (v19 >= v5[2]) {
          goto LABEL_33;
        }
      }
      swift_release();
      if (*(void *)(*(void *)(v3 + 272) + 16)) {
        goto LABEL_35;
      }
      goto LABEL_41;
    }
LABEL_33:
    __break(1u);
  }
  swift_release();
  if (!_swiftEmptyDictionarySingleton[2])
  {
LABEL_41:
    char v45 = 2;
LABEL_46:
    sub_10054D2A0();
    swift_allocError();
    *uint64_t v51 = v45;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = *(uint64_t (**)(void))(v3 + 8);
    return v52();
  }
LABEL_35:
  uint64_t v41 = sub_1004E44B8(*(void *)(v3 + 304), (uint64_t *)(v3 + 272));
  *(void *)(v3 + 752) = v41;
  uint64_t v42 = v41[2];
  *(void *)(v3 + 760) = v42;
  if (!v42)
  {
    swift_bridgeObjectRelease();
    char v45 = 1;
    goto LABEL_46;
  }
  size_t v4 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v3 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v3 + 80))
  {
    sub_10001CEB0((long long *)(v3 + 56), v3 + 136);
    sub_10001CD44((void *)(v3 + 136), *(void *)(v3 + 160));
    NSString v56 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v3 + 768) = v43;
    *uint64_t v43 = v3;
    v43[1] = sub_10054B550;
    return v56();
  }
  else
  {
LABEL_53:
    __break(1u);
    return _swift_task_switch(v4, a2, a3);
  }
}

uint64_t sub_100549D88()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 664);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v5 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v6 = *(void *)(v0 + 368);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 844) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 844);
  *(void *)(v0 + 680) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 688) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100549E80, 0, 0);
}

uint64_t sub_100549E80()
{
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[87] = v3;
  v3[2] = v2;
  v3[3] = sub_10054D2F8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[88] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100549F88;
  uint64_t v6 = v0[41];
  uint64_t v5 = v0[42];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v6);
}

uint64_t sub_100549F88()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10054A0BC, 0, 0);
}

uint64_t sub_10054A0BC()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 352) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v6 = *(void *)(v0 + 376);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    swift_release();
    sub_100552C2C(v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_release();
    sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 360);
    sub_100551764(v2, v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v10 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 848) = v10;
    uint64_t v11 = v9 + v10;
    uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    int v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 712) = v12;
    *int v12 = v0;
    v12[1] = sub_10054A354;
    return v13(v11);
  }
}

uint64_t sub_10054A354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[90] = a1;
  v5[91] = a2;
  v5[92] = a3;
  v5[93] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_release();
    swift_release();
    uint64_t v6 = sub_10054B3A8;
  }
  else
  {
    uint64_t v6 = sub_10054A488;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10054A488()
{
  uint64_t v1 = *(void *)(v0 + 736);
  if (v1)
  {
    unsigned __int8 v2 = *(unsigned char *)(v0 + 720);
    uint64_t v3 = *(void *)(v0 + 728);
  }
  else
  {
    sub_100552A0C(*(void *)(v0 + 360) + *(int *)(v0 + 848), *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v56 = *(void *)(v0 + 480);
        uint64_t v57 = *(void *)(v0 + 424);
        uint64_t v58 = *(void *)(v0 + 368);
        uint64_t v59 = *(void *)(v0 + 376);
        uint64_t v60 = *(void *)(v0 + 360);
        uint64_t v61 = *(void *)(v0 + 320);
        swift_release();
        sub_100552C2C(v60, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
        swift_release();
        sub_100552C2C(v56, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        swift_release();
        sub_100552C2C(v61, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
        goto LABEL_19;
      case 2u:
        uint64_t v62 = *(void *)(v0 + 480);
        uint64_t v63 = *(void *)(v0 + 424);
        uint64_t v64 = *(void *)(v0 + 368);
        uint64_t v65 = *(void *)(v0 + 376);
        uint64_t v66 = *(void *)(v0 + 360);
        swift_release();
        sub_100552C2C(v66, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
        swift_release();
        sub_100552C2C(v62, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      case 3u:
        uint64_t v67 = *(void *)(v0 + 320);
        unsigned __int8 v2 = *(unsigned char *)v67;
        uint64_t v3 = *(void *)(v67 + 8);
        uint64_t v1 = *(void *)(v67 + 16);
        break;
      case 4u:
        uint64_t v68 = *(void *)(v0 + 320);
        unsigned __int8 v2 = *(unsigned char *)v68;
        uint64_t v3 = *(void *)(v68 + 8);
        uint64_t v1 = *(void *)(v68 + 16);
        goto LABEL_40;
      case 5u:
        uint64_t v69 = *(void *)(v0 + 320);
        unsigned __int8 v2 = *(unsigned char *)(v69 + 16);
        uint64_t v3 = *(void *)(v69 + 24);
        uint64_t v1 = *(void *)(v69 + 32);
        swift_bridgeObjectRelease();
LABEL_40:
        swift_bridgeObjectRelease();
        break;
      case 6u:
      case 7u:
        goto LABEL_15;
      default:
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
        if (!v55)
        {
LABEL_15:
          uint64_t v13 = *(void *)(v0 + 480);
          uint64_t v14 = *(void *)(v0 + 424);
          uint64_t v15 = *(void *)(v0 + 368);
          uint64_t v16 = *(void *)(v0 + 376);
          uint64_t v17 = *(void *)(v0 + 360);
          swift_release();
          sub_100552C2C(v17, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
          goto LABEL_18;
        }
        uint64_t v3 = v54;
        uint64_t v1 = v55;
        unsigned __int8 v2 = v53;
        break;
    }
  }
  uint64_t v4 = *(void *)(v0 + 304);
  if (!*(void *)(v4 + 16))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v13 = *(void *)(v0 + 480);
    uint64_t v18 = *(void *)(v0 + 424);
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 376);
    sub_100552C2C(*(void *)(v0 + 360), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
LABEL_18:
    swift_release();
    sub_100552C2C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_release();
LABEL_19:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain_n();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v7) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v128 = (uint64_t *)(v0 + 272);
  uint64_t v127 = (long long *)(v0 + 56);
  uint64_t v8 = ~v6;
  uint64_t v9 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v9 + 48);
  while (1)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 + 24 * v7);
    if (*v11 == v2) {
      break;
    }
LABEL_6:
    unint64_t v7 = (v7 + 1) & v8;
    if (((*(void *)(v9 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v7) & 1) == 0) {
      goto LABEL_16;
    }
  }
  BOOL v12 = *((void *)v11 + 1) == v3 && *((void *)v11 + 2) == v1;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v9 = *(void *)(v0 + 304);
    goto LABEL_6;
  }
  uint64_t v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v125 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 632);
  uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v23 = *(void *)(v0 + 448);
  uint64_t v123 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 368);
  swift_bridgeObjectRelease();
  sub_10052EE80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(v0 + 240) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 248) = v25;
  v26._countAndFlagsBits = 124;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = String.utf8Data.getter();
  unint64_t v30 = v29;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 256) = v28;
  *(void *)(v0 + 264) = v30;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v28, v30);
  v124(v23, v123, v24);
  v125(v23, 0, 1, v24);
  if (v126(v23, 1, v24) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 448), &qword_101638CF0);
    uint64_t v31 = *(void *)(v0 + 272);
    swift_bridgeObjectRetain();
    unint64_t v32 = sub_100724500(v2, v3, v1);
    char v34 = v33;
    swift_bridgeObjectRelease();
    if (v34)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = (uint64_t *)(v0 + 280);
      *(void *)(v0 + 280) = v31;
      *uint64_t v128 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_26;
      }
      goto LABEL_55;
    }
    uint64_t v41 = 1;
LABEL_42:
    uint64_t v48 = (void *)(v0 + 136);
    uint64_t v70 = *(void *)(v0 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 632))(v70, v41, 1, *(void *)(v0 + 368));
    swift_bridgeObjectRelease();
    sub_10001DAB4(v70, &qword_101638CF0);
LABEL_51:
    uint64_t v81 = *(void *)(v0 + 592);
    uint64_t v82 = *(void *)(v0 + 424);
    uint64_t v83 = *(void *)(v0 + 368);
    uint64_t v84 = *(void *)(v0 + 360);
    uint64_t v85 = *(void *)(v0 + 616) + 1;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 376) + 8);
    v86(*(void *)(v0 + 408), v83);
    sub_100552C2C(v84, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    v86(v82, v83);
    if (v85 != v81)
    {
      uint64_t v88 = *(void *)(v0 + 616) + 1;
      unint64_t v89 = *(void (**)(uint64_t, char *, uint64_t))(v0 + 608);
      uint64_t v90 = *(void *)(v0 + 600);
      LOBYTE(v91) = *(unsigned char *)(v0 + 844);
      uint64_t v92 = *(void **)(v0 + 584);
      uint64_t v93 = *(void *)(v0 + 376);
      uint64_t v3 = v0 + 176;
      goto LABEL_68;
    }
    uint64_t v87 = (void (**)(void, uint64_t, uint64_t, void))(v0 + 632);
    uint64_t v3 = v0 + 176;
LABEL_73:
    (*v87)(*(void *)(v0 + 456), 1, 1, *(void *)(v0 + 368));
    while (1)
    {
      uint64_t v115 = *(void *)(v0 + 576);
      uint64_t v116 = *(void *)(v0 + 568);
      uint64_t v117 = *(void *)(v0 + 480);
      swift_release();
      sub_100552C2C(v117, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v115 + 1 == v116) {
        goto LABEL_77;
      }
      unint64_t v80 = *(void *)(v0 + 576) + 1;
      *(void *)(v0 + 576) = v80;
      uint64_t v77 = *(void *)(v0 + 560);
      if (v80 >= *(void *)(v77 + 16)) {
        break;
      }
LABEL_58:
      uint64_t v94 = *(void *)(v0 + 480);
      uint64_t v95 = *(void *)(v0 + 464);
      sub_100552A0C(v77+ ((*(unsigned __int8 *)(v0 + 840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 840))+ *(void *)(*(void *)(v0 + 472) + 72) * v80, v94, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v96 = *(void *)(v94 + *(int *)(v95 + 32));
      uint64_t v97 = *(void *)(v96 + 16);
      uint64_t v92 = _swiftEmptyArrayStorage;
      if (v97)
      {
        uint64_t v98 = *(void *)(v0 + 376);
        sub_10000588C(&qword_10163BC50);
        uint64_t v99 = *(void *)(v98 + 72);
        unint64_t v100 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        uint64_t v92 = (void *)swift_allocObject();
        size_t v101 = j__malloc_size(v92);
        if (!v99)
        {
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        if (v101 - v100 == 0x8000000000000000 && v99 == -1) {
          goto LABEL_88;
        }
        v92[2] = v97;
        v92[3] = 2 * ((uint64_t)(v101 - v100) / v99);
        swift_bridgeObjectRetain_n();
        uint64_t v103 = sub_100711B04(v3, (char *)v92 + v100, v97, v96);
        sub_100132C20();
        if (v103 != v97) {
          goto LABEL_87;
        }
        swift_bridgeObjectRelease();
      }
      *(void *)(v0 + 584) = v92;
      uint64_t v104 = v92[2];
      *(void *)(v0 + 592) = v104;
      uint64_t v93 = *(void *)(v0 + 376);
      if (!v104)
      {
        uint64_t v87 = (void (**)(void, uint64_t, uint64_t, void))(v93 + 56);
        goto LABEL_73;
      }
      uint64_t v88 = 0;
      int v91 = *(_DWORD *)(v93 + 80);
      *(_DWORD *)(v0 + 844) = v91;
      uint64_t v90 = *(void *)(v93 + 72);
      *(void *)(v0 + 600) = v90;
      unint64_t v89 = *(void (**)(uint64_t, char *, uint64_t))(v93 + 16);
      *(void *)(v0 + 608) = v89;
LABEL_68:
      *(void *)(v0 + 616) = v88;
      uint64_t v105 = *(void *)(v0 + 456);
      uint64_t v106 = *(void *)(v0 + 368);
      *(void *)(v0 + 624) = (v93 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v89(v105, (char *)v92 + ((v91 + 32) & ~(unint64_t)v91) + v90 * v88, v106);
      uint64_t v107 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56);
      *(void *)(v0 + 632) = v107;
      *(void *)(v0 + 640) = (v93 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v107(v105, 0, 1, v106);
      uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
      *(void *)(v0 + 648) = v108;
      *(void *)(v0 + 656) = (v93 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v108(v105, 1, v106) != 1)
      {
        uint64_t v109 = *(void *)(v0 + 456);
        uint64_t v110 = *(void *)(v0 + 424);
        uint64_t v111 = *(void *)(v0 + 368);
        uint64_t v112 = *(void *)(v0 + 376);
        uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32);
        *(void *)(v0 + 664) = v113;
        *(void *)(v0 + 672) = (v112 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v113(v110, v109, v111);
        uint64_t v114 = *(void *)(v0 + 520);
        return _swift_task_switch(sub_100549D88, v114, 0);
      }
    }
    __break(1u);
LABEL_77:
    swift_release();
    if (*(void *)(*(void *)(v0 + 272) + 16))
    {
      uint64_t v118 = sub_1004E44B8(*(void *)(v0 + 304), v128);
      *(void *)(v0 + 752) = v118;
      uint64_t v119 = v118[2];
      *(void *)(v0 + 760) = v119;
      if (v119)
      {
        sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v127, (uint64_t *)&unk_101638D30);
        if (*(void *)(v0 + 80))
        {
          sub_10001CEB0(v127, (uint64_t)v48);
          sub_10001CD44(v48, *(void *)(v0 + 160));
          uint64_t v129 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
          uint64_t v120 = (void *)swift_task_alloc();
          *(void *)(v0 + 768) = v120;
          *uint64_t v120 = v0;
          v120[1] = sub_10054B550;
          return v129();
        }
LABEL_89:
        __break(1u);
        JUMPOUT(0x10054B388);
      }
      swift_bridgeObjectRelease();
      char v121 = 1;
    }
    else
    {
      char v121 = 2;
    }
    sub_10054D2A0();
    swift_allocError();
    *uint64_t v122 = v121;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
    return v21();
  }
  (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 400), *(void *)(v0 + 448), *(void *)(v0 + 368));
  uint64_t v36 = *(uint64_t **)(v0 + 272);
  int v42 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 288) = v36;
  *(void *)(v0 + 272) = 0x8000000000000000;
  unint64_t v32 = sub_100724500(v2, v3, v1);
  uint64_t v44 = v36[2];
  BOOL v45 = (v43 & 1) == 0;
  uint64_t v46 = v44 + v45;
  if (__OFADD__(v44, v45))
  {
    __break(1u);
LABEL_55:
    sub_100E82FE8();
    uint64_t v31 = *v36;
LABEL_26:
    uint64_t v37 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 664);
    uint64_t v38 = *(void *)(v0 + 600);
    uint64_t v39 = *(void *)(v0 + 440);
    uint64_t v40 = *(void *)(v0 + 368);
    swift_bridgeObjectRelease();
    v37(v39, *(void *)(v31 + 56) + v38 * v32, v40);
    sub_100168FFC(v32, v31);
    *(void *)(v0 + 272) = v31;
    swift_bridgeObjectRelease();
    uint64_t v41 = 0;
    goto LABEL_42;
  }
  char v47 = v43;
  uint64_t v48 = (void *)(v0 + 136);
  if (v36[3] >= v46)
  {
    if (v42)
    {
      uint64_t v50 = (uint64_t *)(v0 + 288);
    }
    else
    {
      uint64_t v50 = (uint64_t *)(v0 + 288);
      sub_100E82FE8();
    }
    goto LABEL_46;
  }
  int v49 = v42;
  uint64_t v50 = (uint64_t *)(v0 + 288);
  sub_100E6FC18(v46, v49);
  unint64_t v51 = sub_100724500(v2, v3, v1);
  if ((v47 & 1) == (v52 & 1))
  {
    unint64_t v32 = v51;
LABEL_46:
    int64_t v71 = *(void **)(v0 + 288);
    uint64_t v72 = *(void *)(v0 + 368);
    if (v47)
    {
      (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v0 + 376) + 40))(v71[7] + *(void *)(v0 + 600) * v32, *(void *)(v0 + 400), v72);
    }
    else
    {
      unint64_t v73 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 664);
      uint64_t v74 = *(void *)(v0 + 600);
      uint64_t v75 = *(void *)(v0 + 400);
      v71[(v32 >> 6) + 8] |= 1 << v32;
      uint64_t v76 = v71[6] + 24 * v32;
      *(unsigned char *)uint64_t v76 = v2;
      *(void *)(v76 + 8) = v3;
      *(void *)(v76 + 16) = v1;
      v73(v71[7] + v74 * v32, v75, v72);
      uint64_t v78 = v71[2];
      BOOL v79 = __OFADD__(v78, 1);
      unint64_t v80 = v78 + 1;
      if (v79)
      {
        __break(1u);
        goto LABEL_58;
      }
      v71[2] = v80;
      swift_bridgeObjectRetain();
    }
    *uint64_t v128 = *v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10054B3A8()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[53];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[45];
  swift_release();
  sub_100552C2C(v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100552C2C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10054B550(uint64_t a1)
{
  *(void *)(*(void *)v1 + 776) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10054B650, 0, 0);
}

uint64_t sub_10054B650()
{
  if (!*(void *)(v0 + 776))
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CEC8();
    swift_allocError();
    strcpy(v9, "SharingService");
    v9[15] = -18;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v1 = *(void *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  int v2 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 852) = v2;
  *(void *)(v0 + 784) = *(void *)(v1 + 72);
  uint64_t v3 = *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16);
  *(void *)(v0 + 792) = v3;
  *(void *)(v0 + 800) = 0;
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 376);
  v3(v4, *(void *)(v0 + 752) + ((v2 + 32) & ~(unint64_t)v2), v5);
  unint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  *(void *)(v0 + 808) = v7;
  *(void *)(v0 + 816) = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v4, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
    return v8();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 392), *(void *)(v0 + 432), *(void *)(v0 + 368));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10054BAA4;
  uint64_t v12 = *(void *)(v0 + 392);
  return sub_1000FFEB8(v12);
}

uint64_t sub_10054BAA4()
{
  *(void *)(*(void *)v1 + 832) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    int v2 = sub_10054BEAC;
  }
  else
  {
    int v2 = sub_10054BBC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10054BBC0()
{
  uint64_t v1 = *(void *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 800) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 392), *(void *)(v0 + 368));
  if (v2 == v1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 808))(*(void *)(v0 + 432), 1, 1, *(void *)(v0 + 368));
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  uint64_t v3 = *(void *)(v0 + 800) + 1;
  *(void *)(v0 + 800) = v3;
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 792))(v4, *(void *)(v0 + 752)+ ((*(unsigned __int8 *)(v0 + 852) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 852))+ *(void *)(v0 + 784) * v3, v5);
  unint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  *(void *)(v0 + 808) = v7;
  *(void *)(v0 + 816) = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v4, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 392), *(void *)(v0 + 432), *(void *)(v0 + 368));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10054BAA4;
  uint64_t v11 = *(void *)(v0 + 392);
  return sub_1000FFEB8(v11);
}

uint64_t sub_10054BEAC()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[47];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10054C020(uint64_t a1, uint64_t a2)
{
  v2[17] = a1;
  v2[18] = a2;
  v2[19] = type metadata accessor for StableIdentifier();
  void v2[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  type metadata accessor for SharingRampState();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_10054C174, 0, 0);
}

uint64_t sub_10054C174()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = sub_1004E4944(v1);
    uint64_t v3 = sub_101158F8C((unint64_t)v2);
    *(void *)(v0 + 232) = v3;
    swift_bridgeObjectRelease();
    if ((v3 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
      {
LABEL_4:
        if (qword_1016375E8 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
        if (*(void *)(v0 + 80))
        {
          sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
          sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
          uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
          uint64_t v5 = (void *)swift_task_alloc();
          *(void *)(v0 + 240) = v5;
          *uint64_t v5 = v0;
          v5[1] = sub_10054C3D0;
          return v9();
        }
        else
        {
          __break(1u);
        }
        return result;
      }
    }
    else if (*(void *)(v3 + 16))
    {
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    char v6 = 3;
  }
  else
  {
    char v6 = 0;
  }
  sub_10054D2A0();
  swift_allocError();
  *unint64_t v7 = v6;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10054C3D0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10054C4D0, 0, 0);
}

uint64_t sub_10054C4D0()
{
  uint64_t v64 = v0;
  if (!v0[31])
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    static os_log_type_t.error.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CEC8();
    swift_allocError();
    strcpy(v10, "SharingService");
    v10[15] = -18;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    goto LABEL_27;
  }
  uint64_t v1 = v0[17];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = v1 + *(int *)(v2 + 24);
  if (sub_10111198C())
  {
    uint64_t v4 = v0[28];
    sub_1004EAE84(v4);
    uint64_t v5 = sub_10000588C(&qword_101647FE8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 2, v5))
    {
      uint64_t v6 = v0[17] + *(int *)(v2 + 20);
      unint64_t v7 = (void *)swift_task_alloc();
      v0[32] = v7;
      *unint64_t v7 = v0;
      v7[1] = sub_10054CE18;
      uint64_t v8 = v0[29];
      return sub_1000F7AA4(v6, v8);
    }
    uint64_t v14 = v0[28];
    uint64_t v15 = v0[26];
    uint64_t v17 = v0[21];
    uint64_t v16 = v0[22];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v14, v17);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v19 = v0[25];
    uint64_t v18 = v0[26];
    uint64_t v21 = v0[21];
    uint64_t v20 = v0[22];
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = v0[25];
    uint64_t v27 = v0[26];
    uint64_t v29 = v0[21];
    uint64_t v28 = v0[22];
    if (v25)
    {
      uint64_t v62 = v0[26];
      log = v23;
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v31, v32, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v33(v26, v29);
      _os_log_impl((void *)&_mh_execute_header, log, v24, "allowedToUseUTFSItemSharing == .notAllowed(retry: %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      v33(v62, v29);
    }
    else
    {
      swift_release();

      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v39(v26, v29);
      v39(v27, v29);
    }
    goto LABEL_26;
  }
  uint64_t v12 = v0[20];
  sub_100552A0C(v3, v12, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_100552C2C(v12, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
LABEL_27:
    return v11();
  }
  uint64_t v34 = v0[27];
  sub_1004EAE84(v34);
  uint64_t v35 = sub_10000588C(&qword_101647FE8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 2, v35))
  {
    uint64_t v40 = v0[27];
    uint64_t v41 = v0[24];
    uint64_t v42 = v0[21];
    uint64_t v43 = v0[22];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v41, v40, v42);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v45 = v0[23];
    uint64_t v44 = v0[24];
    uint64_t v46 = v0[21];
    uint64_t v47 = v0[22];
    uint64_t v48 = type metadata accessor for Logger();
    sub_100010324(v48, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v44, v46);
    int v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v52 = v0[23];
    uint64_t v53 = v0[24];
    uint64_t v54 = v0[21];
    uint64_t v55 = v0[22];
    if (v51)
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136446210;
      sub_10052EE80((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = sub_1008FA0F0(v57, v58, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v59(v52, v54);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "allowedToUseSelfBeaconingItemSharing == .notAllowed(retry: %{public}s", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      v59(v53, v54);
    }
    else
    {
      swift_release();

      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v60(v52, v54);
      v60(v53, v54);
    }
    goto LABEL_26;
  }
  uint64_t v36 = v0[17] + *(int *)(v2 + 20);
  uint64_t v37 = (void *)swift_task_alloc();
  v0[34] = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_10054CFEC;
  uint64_t v38 = v0[29];
  return sub_1000F8080(v36, v38);
}

uint64_t sub_10054CE18()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10054D108;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10054CF34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10054CF34()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054CFEC()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10054D1D4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100554A68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10054D108()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054D1D4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10054D2A0()
{
  unint64_t result = qword_101647FF0;
  if (!qword_101647FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647FF0);
  }
  return result;
}

uint64_t sub_10054D2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_10052922C(a1, a2, v2);
}

void sub_10054D3A8(void *a1@<X8>)
{
  sub_100544B78();
  if (!v1) {
    *a1 = v3;
  }
}

unint64_t sub_10054D3D4()
{
  unint64_t result = qword_101648020;
  if (!qword_101648020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648020);
  }
  return result;
}

uint64_t sub_10054D428@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B228(a1);
}

uint64_t sub_10054D440()
{
  return sub_100BC786C(*(void *)(v0 + 16));
}

uint64_t sub_10054D460(uint64_t a1)
{
  return sub_10050AD18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10054D488()
{
  return sub_1005533AC((void (*)(void))&_swift_release);
}

uint64_t sub_10054D4A0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_10050AC60(a1, v4, v7, v5, v6);
}

uint64_t sub_10054D564()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | 7);
}

uint64_t sub_10054D900(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (unsigned __int8 *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v9 = *((void *)v7 + 2);
  uint64_t v10 = *v7;

  return sub_10050B1F8(a1, v5, v6, v10, v8, v9);
}

uint64_t sub_10054D9A8(uint64_t a1)
{
  return sub_1004FE668(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10054D9B0()
{
  uint64_t v1 = (int *)type metadata accessor for ShareInstruction();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v25 = v0;
  uint64_t v23 = (v24 + 24) & ~v24;
  uint64_t v2 = v0 + v23;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v23 + v1[6];
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  unint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = v3 + v4[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v3 + v4[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v8(v9, v6);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v3 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v3 + v4[8];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v15(v14, v12);
  sub_10001CFB8(*(void *)(v3 + v4[9]), *(void *)(v3 + v4[9] + 8));
  unint64_t v16 = (uint64_t *)(v3 + v4[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v3 + v4[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  sub_10001CFB8(*(void *)(v3 + v4[12]), *(void *)(v3 + v4[12] + 8));
  sub_10001CFB8(*(void *)(v3 + v4[13]), *(void *)(v3 + v4[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v2 + v1[8], v6);
  uint64_t v20 = v2 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v20, 1, v12)) {
    v15(v20, v12);
  }
  swift_release();

  return _swift_deallocObject(v25, ((v22 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v24 | 7);
}

uint64_t sub_10054DE0C(uint64_t a1)
{
  return sub_1005521DC(a1, (uint64_t (*)(void))type metadata accessor for ShareInstruction, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1004FF164);
}

uint64_t sub_10054DE40()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10054DE50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004FBCD8(a1, a2);
}

uint64_t sub_10054DE58(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004FC534(a1, a2, a3);
}

uint64_t sub_10054DE60()
{
  return sub_1004FC6D0(v0);
}

uint64_t sub_10054DE68()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10054DE78()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v14 = *(void *)(*((void *)v1 - 1) + 64);
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  unint64_t v12 = (v14 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v12 + 8, v2 | 7);
}

void sub_10054E078(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(NSObject **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1004FCDD8(a1, v1 + v4, v5);
}

uint64_t sub_10054E114(uint64_t (*a1)(uint64_t a1))
{
  return sub_100515D6C(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(NSURL **)(v1 + 32), *(void (**)(void, void, void))(v1 + 40), *(void (**)(void, void))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10054E140()
{
  return sub_100551B78((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10054E158(uint64_t a1)
{
  sub_10050FE9C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_10054E164(uint64_t (*a1)(uint64_t a1))
{
  return sub_100515F78(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(NSURL **)(v1 + 32), *(void (**)(void, void, void))(v1 + 40), *(void (**)(void, void))(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10054E18C(uint64_t a1)
{
  return sub_100516088(a1);
}

uint64_t sub_10054E1B4()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10054E1D8()
{
  unint64_t result = qword_101648088;
  if (!qword_101648088)
  {
    sub_10000592C(&qword_101648080);
    sub_10052EE80(&qword_101648090, (void (*)(uint64_t))type metadata accessor for LegacyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648088);
  }
  return result;
}

uint64_t sub_10054E27C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10054E2B4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10054E2FC(uint64_t a1, char a2)
{
  return sub_10106507C(a1, a2 & 1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(char ***)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_10054E318()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return _swift_task_switch(sub_1005295CC, 0, 0);
}

uint64_t sub_10054E3C4(uint64_t a1)
{
  return sub_100516088(a1);
}

uint64_t sub_10054E3EC()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10054E410()
{
  unint64_t result = qword_1016480B8;
  if (!qword_1016480B8)
  {
    sub_10000592C(&qword_1016480B0);
    sub_10052EE80(&qword_1016480C0, (void (*)(uint64_t))type metadata accessor for FamilyShareEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016480B8);
  }
  return result;
}

uint64_t sub_10054E4B4()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 3;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10054E58C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + 24;
  uint64_t v8 = v1 + v5;
  uint64_t v9 = (unsigned __int8 *)(v1 + *(void *)(v4 + 64) + v5);
  uint64_t v10 = v9[1];
  uint64_t v11 = v9[2];
  uint64_t v12 = *v9;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_10001D2E4;
  return sub_100B03074(a1, v6, v7, v8, v12, v10, v11);
}

uint64_t sub_10054E6C8(uint64_t a1)
{
  return sub_10054E6FC(a1, (uint64_t)&off_1015A1C50, (void (*)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t))sub_100540184);
}

uint64_t sub_10054E6FC(uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t))
{
  return sub_100517228(a1, *(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), a2, a3);
}

uint64_t sub_10054E73C(uint64_t a1)
{
  return sub_100516088(a1);
}

uint64_t sub_10054E764()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10054E788()
{
  unint64_t result = qword_1016480E0;
  if (!qword_1016480E0)
  {
    sub_10000592C(&qword_1016480D8);
    sub_10052EE80(&qword_1016480E8, (void (*)(uint64_t))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016480E0);
  }
  return result;
}

unint64_t sub_10054E82C()
{
  unint64_t result = qword_1016480F0;
  if (!qword_1016480F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016480F0);
  }
  return result;
}

uint64_t sub_10054E880(uint64_t a1)
{
  return sub_10054E6FC(a1, (uint64_t)&off_1015A1C28, (void (*)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t))sub_10053EB18);
}

uint64_t sub_10054E8B4(uint64_t a1)
{
  return sub_100516088(a1);
}

uint64_t sub_10054E8DC()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10054E900()
{
  unint64_t result = qword_101648108;
  if (!qword_101648108)
  {
    sub_10000592C(&qword_101648100);
    sub_10052EE80(&qword_101648110, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648108);
  }
  return result;
}

uint64_t sub_10054E9A4()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10054E9F4()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101648068) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v16 = v4;
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v6 = (int *)type metadata accessor for ShareRecord();
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v5 + v6[6], v8);
    uint64_t v10 = v5 + v6[7];
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v10, v11);
    uint64_t v14 = v5 + v6[8];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11)) {
      v13(v14, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v16;
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10054EC10()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101648068) - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

BOOL sub_10054EC7C(uint64_t a1)
{
  return sub_1004FE270(a1, *(void *)(v1 + 16));
}

uint64_t sub_10054EC9C()
{
  uint64_t v1 = (int *)type metadata accessor for ShareInstruction();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);

  swift_release();
  uint64_t v25 = v0;
  uint64_t v23 = (v24 + 32) & ~v24;
  uint64_t v2 = v0 + v23;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v23 + v1[6];
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = v3 + v4[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v3 + v4[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v8(v9, v6);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v3 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v3 + v4[8];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v15(v14, v12);
  sub_10001CFB8(*(void *)(v3 + v4[9]), *(void *)(v3 + v4[9] + 8));
  uint64_t v16 = (uint64_t *)(v3 + v4[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v3 + v4[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  sub_10001CFB8(*(void *)(v3 + v4[12]), *(void *)(v3 + v4[12] + 8));
  sub_10001CFB8(*(void *)(v3 + v4[13]), *(void *)(v3 + v4[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v2 + v1[8], v6);
  uint64_t v20 = v2 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v20, 1, v12)) {
    v15(v20, v12);
  }

  return _swift_deallocObject(v25, v23 + v22, v24 | 7);
}

void sub_10054F0DC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for ShareInstruction() - 8);
  uint64_t v6 = *(NSObject **)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_1004FDBDC(a1, v4, v6, v7, v8);
}

uint64_t sub_10054F160()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10054F198(uint64_t a1, char a2)
{
  return sub_1010658A8(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_10054F1AC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10054F1FC(uint64_t a1)
{
  return sub_100509954(a1, *(void *)(v1 + 16));
}

uint64_t sub_10054F218(uint64_t a1)
{
  return sub_100509A48(a1);
}

uint64_t sub_10054F220()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10054F268(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100033F68;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100509134, 0, 0);
}

uint64_t sub_10054F32C()
{
  return sub_1005527FC((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10054F358(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10050947C(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

uint64_t sub_10054F360(uint64_t a1, uint64_t a2)
{
  return sub_100493AC8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10054F368()
{
  return sub_100551B78((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10054F380(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_10054F3A0()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10054F3D8()
{
  unint64_t result = qword_101648140;
  if (!qword_101648140)
  {
    sub_10000592C(&qword_101648138);
    sub_10052EE80(&qword_101648148, (void (*)(uint64_t))type metadata accessor for LegacySelfBeaconingKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648140);
  }
  return result;
}

void sub_10054F480(uint64_t a1)
{
  sub_100522ED0(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)"Successfully distributed keys: %@", 33);
}

uint64_t sub_10054F4A8()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10054F4CC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | 7);
}

uint64_t sub_10054F860(uint64_t a1)
{
  return sub_1005501D8(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, sub_100520510);
}

unint64_t sub_10054F88C()
{
  unint64_t result = qword_101648160;
  if (!qword_101648160)
  {
    sub_10000592C(&qword_101648158);
    sub_10052EE80(&qword_101648168, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648160);
  }
  return result;
}

unint64_t sub_10054F930()
{
  unint64_t result = qword_101648180;
  if (!qword_101648180)
  {
    sub_10000592C(&qword_101648178);
    sub_10052EE80(&qword_101648188, (void (*)(uint64_t))type metadata accessor for SelfBeaconingKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648180);
  }
  return result;
}

uint64_t sub_10054F9D4(uint64_t a1)
{
  return sub_100A51600(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10054F9DC()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10054F9F4()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

void sub_10054FA10(uint64_t a1)
{
  sub_100522ED0(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)"Successfully sent updateSharedBeacon: %@", 40);
}

uint64_t sub_10054FA38()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_10054FA5C()
{
  unint64_t result = qword_101648190;
  if (!qword_101648190)
  {
    sub_10000592C(&qword_10163A040);
    sub_10052EE80((unint64_t *)&unk_10166EAA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648190);
  }
  return result;
}

uint64_t sub_10054FB00()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10054FB48()
{
  sub_100520F40(*(void *)(v0 + 24), *(void (**)(void **))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10054FB74()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10054FB8C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10054FE40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5 + 8);
  uint64_t v7 = *(void *)(v1 + v5 + 16);
  uint64_t v8 = *(void *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *(unsigned __int8 *)(v1 + v5);

  return sub_10052280C(a1, v1 + v4, v9, v6, v7, v8);
}

uint64_t sub_10054FEF0()
{
  return sub_100551B78((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10054FF08()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | 7);
}

uint64_t sub_1005501AC(uint64_t a1)
{
  return sub_1005501D8(a1, type metadata accessor for SharedBeaconRecord, sub_100522B7C);
}

uint64_t sub_1005501D8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v3 + v6;
  uint64_t v8 = (unsigned __int8 *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *((void *)v8 + 1);
  uint64_t v10 = *((void *)v8 + 2);
  uint64_t v11 = *v8;

  return a3(a1, v7, v11, v9, v10);
}

unint64_t sub_100550294()
{
  unint64_t result = qword_1016481A8;
  if (!qword_1016481A8)
  {
    sub_10000592C(&qword_1016481A0);
    sub_10052EE80(&qword_1016481B0, (void (*)(uint64_t))type metadata accessor for KeyRequestEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016481A8);
  }
  return result;
}

unint64_t sub_100550338()
{
  unint64_t result = qword_1016481C8;
  if (!qword_1016481C8)
  {
    sub_10000592C(&qword_1016481C0);
    sub_10052EE80(&qword_1016481D0, (void (*)(uint64_t))type metadata accessor for CircleTrustAckEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016481C8);
  }
  return result;
}

unint64_t sub_1005503DC()
{
  unint64_t result = qword_1016481E8;
  if (!qword_1016481E8)
  {
    sub_10000592C(&qword_1016481E0);
    sub_10052EE80(&qword_1016481F0, (void (*)(uint64_t))type metadata accessor for PeerTrustAckEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016481E8);
  }
  return result;
}

unint64_t sub_100550480()
{
  unint64_t result = qword_101648210;
  if (!qword_101648210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648210);
  }
  return result;
}

uint64_t sub_1005504D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10055051C(uint64_t a1)
{
  sub_100523464(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(NSObject **)(v1 + 56));
}

uint64_t sub_100550530()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

unint64_t sub_100550554()
{
  unint64_t result = qword_101648228;
  if (!qword_101648228)
  {
    sub_10000592C(&qword_101648220);
    sub_10052EE80(&qword_101648230, (void (*)(uint64_t))type metadata accessor for SecureLocationsKeyUpdateEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648228);
  }
  return result;
}

uint64_t sub_1005505F8()
{
  return sub_1005533AC((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100550610(uint64_t a1)
{
  sub_100523AB8(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100550620()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100550644()
{
  return sub_1009D6F80(v0);
}

uint64_t sub_10055064C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10055065C()
{
  unint64_t result = qword_101648248;
  if (!qword_101648248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648248);
  }
  return result;
}

unint64_t sub_1005506B0()
{
  unint64_t result = qword_101648250;
  if (!qword_101648250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648250);
  }
  return result;
}

uint64_t sub_100550704()
{
  return sub_1004F3514();
}

uint64_t sub_100550748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1004F35B0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10055077C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t *a11)
{
  return sub_1004F105C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_1005507B0()
{
  return sub_1004F1104();
}

uint64_t sub_1005507B8()
{
  return sub_1004F1228();
}

uint64_t sub_1005507C8()
{
  return sub_1004F3514();
}

uint64_t sub_10055080C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1004F35B0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100550840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1004F371C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_100550870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))(v8 + 16))(a1, a2, a3, a4, a5, *(unsigned __int8 *)a6, a6[1], a6[2], a6[3], a7, a8);
}

uint64_t sub_1005508BC()
{
  return sub_1004F37B8();
}

unint64_t sub_1005508C4()
{
  unint64_t result = qword_101648298;
  if (!qword_101648298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648298);
  }
  return result;
}

void *sub_100550918(uint64_t a1)
{
  return sub_1004F3B2C(a1);
}

uint64_t sub_100550920(uint64_t a1)
{
  return sub_1004F3FF8(a1);
}

uint64_t sub_100550928(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100550984(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1005509E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005509F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100550AA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_1002F6A08(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100550AB8(uint64_t a1)
{
  return sub_100550D48(a1);
}

void *sub_100550AD0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_100550B3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100550BF0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 167) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_100550D30(uint64_t a1)
{
  return sub_100550D48(a1);
}

uint64_t sub_100550D48(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1004FB81C(a1, *(void *)(v1 + 16), v1 + v4, v1 + v5, *(uint64_t (**)(uint64_t))(v1 + ((v5 + 167) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100550DFC@<X0>(BOOL *a1@<X8>)
{
  return sub_1004FBA94(*(void **)(v1 + 24), *(long long **)(v1 + 32), a1);
}

unint64_t sub_100550E1C()
{
  unint64_t result = qword_1016482E8;
  if (!qword_1016482E8)
  {
    sub_10000592C(&qword_1016482E0);
    sub_10052EE80(&qword_1016482F0, (void (*)(uint64_t))type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016482E8);
  }
  return result;
}

uint64_t sub_100550EC0()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100550EDC(uint64_t a1)
{
  return sub_1005536C0(a1, sub_100505454);
}

uint64_t sub_100550EF4(uint64_t a1)
{
  return sub_100506394(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1015CA358, (uint64_t)sub_100554A0C, (uint64_t)&unk_1015CA370);
}

uint64_t sub_100550F3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100550F50()
{
  return sub_100545DC4((uint64_t)"*** timed out waiting for local IDS send ***", 44, (uint64_t)sub_10052F164, (uint64_t)&unk_1015CA320);
}

uint64_t sub_100550F7C()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100550F98()
{
  return sub_100550FB0(sub_1005056A0);
}

uint64_t sub_100550FB0(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + v3;
  unint64_t v6 = (uint64_t *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return a1(v4, v5, v7, v8);
}

uint64_t sub_100551058()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100551068()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551084()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

unint64_t sub_100551150()
{
  unint64_t result = qword_101648320;
  if (!qword_101648320)
  {
    sub_10000592C(&qword_101648318);
    sub_10052EE80(&qword_101648328, (void (*)(uint64_t))type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648320);
  }
  return result;
}

double sub_1005511F4(_OWORD *a1)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100551210()
{
  return sub_1004F6650(*(void *)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32));
}

void *sub_100551230()
{
  return sub_1004F42FC(0, 0);
}

uint64_t sub_10055123C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055124C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1005512A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1005512FC()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10055131C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1005513D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100506820(v0 + v2, v4, v5);
}

uint64_t sub_100551470()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100551484()
{
  unint64_t result = qword_101648348;
  if (!qword_101648348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648348);
  }
  return result;
}

uint64_t sub_1005514D8(uint64_t a1)
{
  return sub_10050C488(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), (uint64_t)&unk_1015CA6C8, (uint64_t)sub_100551524, (uint64_t)&unk_1015CA6E0);
}

uint64_t sub_100551524()
{
  return sub_100552728((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_10050C850);
}

void sub_10055153C()
{
}

uint64_t sub_100551558()
{
  return sub_1005527FC((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551584()
{
  return sub_1005527FC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1005515B0()
{
  return sub_10050F824(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1005515B8()
{
  sub_1004ED294(v0[2], v0[3], v0[4], v0[5], "%{public}s: Declining invitation with context: [%s]", (SEL *)&selRef_declineInvitationWithData_);
}

void sub_1005515EC()
{
  sub_1004ED294(v0[2], v0[3], v0[4], v0[5], "%{public}s: Accepting invitation with context: [%s]", (SEL *)&selRef_acceptInvitationWithData_);
}

uint64_t sub_10055161C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100551764(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005517CC()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3 + 8);
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *(unsigned __int8 *)(v0 + v3);

  return sub_10050F43C(v0 + v2, v9, v5, v6, v7, v8);
}

uint64_t sub_100551878()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1005518B8(uint64_t a1)
{
  sub_10050E9E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005518C4()
{
  return sub_100553794((void (*)(void))&_swift_release);
}

uint64_t sub_1005518DC()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100551910()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100551950(uint64_t a1)
{
  sub_1004EEB14(*(void *)a1, *(unsigned char *)(a1 + 8), *(dispatch_group_t *)(v1 + 16));
}

void *sub_100551968@<X0>(_OWORD *a1@<X8>)
{
  return sub_100D0CD60(v1, a1);
}

uint64_t sub_100551984(uint64_t a1)
{
  return a1;
}

uint64_t sub_1005519DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100551A14()
{
  return sub_100551B78((void (*)(void))&_swift_release);
}

void sub_100551A2C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10050D900(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(NSObject **)(v3 + 32));
}

uint64_t sub_100551A3C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100551A84(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(unsigned char *)(v1 + 48);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100033F68;
  return sub_10015CB80(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100551B60()
{
  return sub_100551B78((void (*)(void))&_swift_release);
}

uint64_t sub_100551B78(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_100551BD0(uint64_t a1, char a2)
{
  sub_10050D9D4(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_100551BE0@<X0>(void *a1@<X8>)
{
  return sub_10015B6FC(a1);
}

uint64_t sub_100551BF8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100551C40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10015B720(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_100551D08()
{
  unint64_t result = qword_101648390;
  if (!qword_101648390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648390);
  }
  return result;
}

uint64_t sub_100551D5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100551DB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100551E0C()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551E28(uint64_t a1)
{
  return sub_1005521DC(a1, type metadata accessor for SharedBeaconRecord, sub_100519C14);
}

uint64_t sub_100551E54()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551E6C(uint64_t a1)
{
  return sub_10051A10C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100551E74()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551E8C()
{
  return sub_100503810(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), &qword_10163FFA0);
}

uint64_t sub_100551EB8()
{
  return sub_100552564(type metadata accessor for SharedBeaconRecord, (uint64_t (*)(void, void, unint64_t))sub_10051A954);
}

uint64_t sub_100551EE4()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100551F00()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1005521B0(uint64_t a1)
{
  return sub_1005521DC(a1, type metadata accessor for SharedBeaconRecord, sub_100517B50);
}

uint64_t sub_1005521DC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = v3 + v6;
  uint64_t v9 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a3(a1, v7, v8, v10, v11);
}

uint64_t sub_100552298()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1005522B0(uint64_t a1)
{
  return sub_100518014(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005522B8()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1005522D4()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 32) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100552564(uint64_t (*a1)(void), uint64_t (*a2)(void, void, unint64_t))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  return a2(*(void *)(v2 + 16), *(void *)(v2 + 24), v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_1005525D4(uint64_t a1)
{
  return sub_10050C488(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), (uint64_t)&unk_1015CAD58, (uint64_t)sub_100552710, (uint64_t)&unk_1015CAD70);
}

uint64_t sub_100552620()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100552710()
{
  return sub_100552728((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_10050B4D4);
}

uint64_t sub_100552728(uint64_t (*a1)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(unsigned __int8 *)(v1 + v4);
  uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);

  return a1(v5, v6, v1 + v3, v7, v8);
}

uint64_t sub_1005527D0()
{
  return sub_1005527FC((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1005527FC(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, 32, 7);
}

uint64_t sub_100552854()
{
  return Future.finish(error:)();
}

uint64_t sub_10055287C()
{
  return Future.finish(result:)();
}

uint64_t sub_1005528A8()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1005528F8()
{
  return sub_10050DDC0(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_100552904(uint64_t a1)
{
  return a1;
}

uint64_t sub_100552954(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005529C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100552A0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100552A74(uint64_t a1)
{
  return sub_1005111B8(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), (uint64_t)&off_1015A1B38, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, void, __int16, Swift::Int, uint64_t, void, void, uint64_t, uint64_t, char, uint64_t, uint64_t))sub_1005390C0);
}

uint64_t sub_100552ACC()
{
  return sub_1005533AC((void (*)(void))&_swift_release);
}

uint64_t sub_100552AE4(uint64_t a1)
{
  return sub_1005112D4(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100552B2C()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100552B4C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100552B88()
{
  unint64_t result = qword_1016483B8;
  if (!qword_1016483B8)
  {
    sub_10000592C(&qword_1016483B0);
    sub_10052EE80(&qword_1016483C0, (void (*)(uint64_t))type metadata accessor for BeaconLocationUpdate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016483B8);
  }
  return result;
}

uint64_t sub_100552C2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100552C8C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v23 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v21 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v19 = *(void *)(v3 + 64);
  uint64_t v24 = v0;
  uint64_t v22 = (v23 + 16) & ~v23;
  uint64_t v4 = v0 + v22;
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = v0 + v22 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v18 = v8;
  v8(v4 + v1[6], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v4 + v1[18], v2);
  uint64_t v10 = v4 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6)) {
    v18(v10, v6);
  }
  uint64_t v12 = v4 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v6)) {
      v18(v14, v6);
    }
  }
  uint64_t v15 = (v22 + v21 + v20) & ~v20;
  unint64_t v16 = (v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9(v24 + v15, v2);
  swift_release();

  return _swift_deallocObject(v24, v16 + 8, v23 | v20 | 7);
}

uint64_t sub_100552FAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1005252E4(v0 + v2, v5);
}

uint64_t sub_1005530A4()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v17 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v18 = v0;
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v0 + v3 + v1[6], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v3 + v1[18];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + v3 + v1[19];
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v12(v4 + v1[19], 1, v6)) {
    v8(v11, v6);
  }
  uint64_t v13 = v4 + v1[20];
  uint64_t v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = v13 + *(int *)(v14 + 20);
    if (!v12(v15, 1, v6)) {
      v8(v15, v6);
    }
  }

  return _swift_deallocObject(v18, v3 + v17, v2 | 7);
}

uint64_t sub_100553324(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100525488(a1, v4);
}

uint64_t sub_100553394()
{
  return sub_1005533AC((void (*)(void))&_swift_release);
}

uint64_t sub_1005533AC(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_1005533F4(uint64_t a1)
{
  return sub_1005112D4(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10055343C()
{
  return sub_100553794((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100553458()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100553540()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1005028C0(v3, v0 + v2, v4);
}

uint64_t sub_1005535D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005536C0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + v5;
  uint64_t v8 = (uint64_t *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return a2(a1, v6, v7, v9, v10);
}

uint64_t sub_10055377C()
{
  return sub_100553794((void (*)(void))&_swift_release);
}

uint64_t sub_100553794(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1005537E4()
{
  return sub_10051DA14(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1005537F0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100553838(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1004F0840(a1, v4, v5, v7, v6);
}

uint64_t sub_1005538F8()
{
  return sub_1004F0FE4();
}

uint64_t sub_100553900(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_100553950(uint64_t a1)
{
  return sub_1004FD08C(a1);
}

uint64_t sub_10055395C(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100524434(a1, a2, v6, v7);
}

uint64_t sub_1005539E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100553AE8@<X0>(void *a1@<X8>)
{
  type metadata accessor for BeaconSharingSessionContext();

  return sub_100524AF0(a1);
}

uint64_t sub_100553B6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100553C80@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for BeaconSharingSessionContext();

  return sub_100524B78(a1, a2);
}

uint64_t sub_100553D04()
{
  return sub_100524C70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100553D20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004EC8E8(*(void *)(v1 + 16), *(void *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100553D50()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100553D88()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 16;
  sub_10001CFB8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));

  return _swift_deallocObject(v0, v8, v2 | 7);
}

void sub_100553EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  sub_1004ECEA8(a1, a2, v7, v8, v10, v11);
}

uint64_t sub_100553F70(uint64_t a1, char a2)
{
  (*(void (**)(uint64_t, void))(v2 + 16))(a1, a2 & 1);
  return 0;
}

uint64_t sub_100553FA0()
{
  return sub_1005249C8(v0[2], v0[3], v0[4]);
}

ValueMetadata *type metadata accessor for BeaconSharingManager.IntentsSupportedDeviceType()
{
  return &type metadata for BeaconSharingManager.IntentsSupportedDeviceType;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingManager.ItemConnectionSupportedDeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005540A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.ItemConnectionSupportedDeviceType()
{
  return &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingManager.BeaconSharingKeyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100554174);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.BeaconSharingKeyError()
{
  return &type metadata for BeaconSharingManager.BeaconSharingKeyError;
}

unsigned char *_s12searchpartyd20BeaconSharingManagerC26IntentsSupportedDeviceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100554278);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.KeyDropSharingError()
{
  return &type metadata for BeaconSharingManager.KeyDropSharingError;
}

unint64_t sub_1005542B4()
{
  unint64_t result = qword_101648458;
  if (!qword_101648458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648458);
  }
  return result;
}

unint64_t sub_10055430C()
{
  unint64_t result = qword_101648460;
  if (!qword_101648460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648460);
  }
  return result;
}

uint64_t sub_100554360()
{
  return sub_100062734(&qword_101648468, &qword_101648470);
}

unint64_t sub_1005543A0()
{
  unint64_t result = qword_101648478;
  if (!qword_101648478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648478);
  }
  return result;
}

uint64_t sub_1005543F4()
{
  return sub_100062734(&qword_101648480, &qword_101648488);
}

unint64_t sub_100554434()
{
  unint64_t result = qword_101648490;
  if (!qword_101648490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648490);
  }
  return result;
}

unint64_t sub_10055448C()
{
  unint64_t result = qword_101648498;
  if (!qword_101648498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648498);
  }
  return result;
}

unint64_t sub_1005544E4()
{
  unint64_t result = qword_1016484A0;
  if (!qword_1016484A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016484A0);
  }
  return result;
}

unint64_t sub_10055453C()
{
  unint64_t result = qword_1016484A8;
  if (!qword_1016484A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016484A8);
  }
  return result;
}

unint64_t sub_100554594()
{
  unint64_t result = qword_1016484B0;
  if (!qword_1016484B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016484B0);
  }
  return result;
}

void sub_10055482C()
{
}

void sub_100554844()
{
}

uint64_t sub_100554A18@<X0>(uint64_t a1@<X8>)
{
  return sub_10052EC24(a1);
}

uint64_t sub_100554A30@<X0>(BOOL *a1@<X8>)
{
  return sub_100550DFC(a1);
}

uint64_t sub_100554A6C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DFB8);
  sub_100010324(v0, (uint64_t)qword_10170DFB8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100554AE8()
{
  uint64_t result = static Duration.seconds(_:)();
  qword_10170DFD0 = result;
  *(void *)algn_10170DFD8 = v1;
  return result;
}

uint64_t sub_100554B10(char *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v4 + 112) = &off_1015A1EA0;
  *(void *)(v4 + 120) = &off_1015A1ED0;
  ContinuousClock.init()();
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer) = _swiftEmptyDictionarySingleton;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel) = 2;
  static ContinuousClock.Instant.now.getter();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v12(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon, (uint64_t)a1, v8);
  if (a3) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = a2;
  }
  uint64_t v27 = v13 - 4;
  if (__OFSUB__(v13, 4))
  {
    __break(1u);
  }
  else if (qword_101636B68 == -1)
  {
    goto LABEL_6;
  }
  swift_once();
LABEL_6:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170DFB8);
  v12((uint64_t)v11, (uint64_t)a1, v8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v28 = v13;
    uint64_t v29 = v25;
    *(_DWORD *)uint64_t v17 = 134218755;
    uint64_t v26 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    uint64_t v28 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1008FA0F0(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v11, v8);
    *(_WORD *)(v17 + 32) = 2048;
    uint64_t v21 = v27;
    uint64_t v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received TX Power: %ld for beacon %{private,mask.hash}s. Calibrated: %ld.", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v20(v26, v8);
  }
  else
  {

    uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v11, v8);
    v22(a1, v8);
    uint64_t v21 = v27;
  }
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower) = v21;
  return v4;
}

uint64_t sub_100554EEC(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ContinuousClock.Instant();
  v2[32] = v4;
  v2[33] = *(void *)(v4 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  return _swift_task_switch(sub_100555018, v1, 0);
}

uint64_t sub_100555018()
{
  uint64_t v85 = v0;
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = (id *)(v0 + 216);
  uint64_t v4 = (char *)[*(id *)(v0 + 216) rssi];
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower);
  unint64_t v6 = (unint64_t)&v4[-v5];
  if (__OFSUB__(v4, v5))
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v1 = (void *)(v0 + 152);
  uint64_t v81 = (unint64_t *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 224) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer;
  swift_beginAccess();
  p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
  if (!*(void *)(*(void *)v7 + 16))
  {
    uint64_t v77 = (char *)v6;
    uint64_t v9 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 224);
    ContinuousClock.now.getter();
    uint64_t v13 = v12 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
    swift_beginAccess();
    uint64_t v14 = v9;
    p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(v13, v14, v10);
    swift_endAccess();
    if (qword_101636B68 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170DFB8);
    swift_retain_n();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558275;
      *(void *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v1 = (void *)(v0 + 152);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 208) = sub_1008FA0F0(v19, v20, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "BTRSSIFilter is initialized for beacon: %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    unint64_t v6 = (unint64_t)v77;
  }
  uint64_t v21 = *((void *)p_ivar_base_size + 365);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v21 == -1)
    {
LABEL_11:
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DFB8);
      swift_retain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 134218499;
        *uint64_t v81 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2160;
        *uint64_t v1 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 22) = 2081;
        type metadata accessor for UUID();
        sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 136) = sub_1008FA0F0(v26, v27, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ignoring invalid RSSI value: %ld from beacon %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

LABEL_38:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
      return v74(0);
    }
LABEL_42:
    swift_once();
    goto LABEL_11;
  }
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v28 = *(void **)(v0 + 216);
  uint64_t v29 = type metadata accessor for Logger();
  sub_100010324(v29, (uint64_t)qword_10170DFB8);
  swift_retain_n();
  id v30 = v28;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void **)(v0 + 216);
  if (v33)
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v75 = (void *)swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 138413059;
    *(void *)(v0 + 160) = v34;
    os_log_type_t v76 = v32;
    id v36 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v75 = v34;

    *(_WORD *)(v35 + 12) = 2048;
    *(void *)(v0 + 168) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 22) = 2160;
    *(void *)(v0 + 176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 32) = 2081;
    type metadata accessor for UUID();
    sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v37, v38, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v76, "Adding measurement: %@. Adjusted RSSI: %ld. Beacon: %{private,mask.hash}s.", (uint8_t *)v35, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }

  id v39 = [*v3 channel];
  uint64_t v40 = *(void *)v7;
  if (*(void *)(*(void *)v7 + 16) && (uint64_t v41 = sub_1007248D8(v39), (v42 & 1) != 0))
  {
    uint64_t v43 = *(void **)(*(void *)(v40 + 56) + 8 * v41);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v43 = sub_100A70C24(0, v43[2] + 1, 1, v43);
    }
    unint64_t v45 = v43[2];
    unint64_t v44 = v43[3];
    if (v45 >= v44 >> 1) {
      uint64_t v43 = sub_100A70C24((void *)(v44 > 1), v45 + 1, 1, v43);
    }
    id v46 = *v3;
    v43[2] = v45 + 1;
    v43[v45 + 4] = v6;
    id v47 = [v46 channel];
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *(void *)v7;
    *(void *)uint64_t v7 = 0x8000000000000000;
    uint64_t v49 = (uint64_t)v43;
    uint64_t v50 = (uint64_t)v47;
  }
  else
  {
    id v51 = [*v3 channel];
    sub_10000588C((uint64_t *)&unk_101657C90);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_101342130;
    *(void *)(v52 + 32) = v6;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *(void *)v7;
    *(void *)uint64_t v7 = 0x8000000000000000;
    uint64_t v49 = v52;
    uint64_t v50 = (uint64_t)v51;
  }
  sub_10016F564(v49, v50, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v7 = v84;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v53 = *(void *)(v0 + 280);
  uint64_t v54 = *(void *)(v0 + 256);
  uint64_t v55 = *(void *)(v0 + 264);
  uint64_t v56 = *(void *)(v0 + 248);
  uint64_t v57 = *(void *)(v0 + 224);
  uint64_t v79 = *(void *)(v0 + 240);
  uint64_t v82 = *(void *)(v0 + 232);
  ContinuousClock.now.getter();
  uint64_t v58 = v57 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  swift_beginAccess();
  uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  v59(v53, v58, v54);
  ContinuousClock.Instant.duration(to:)();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  *(void *)(v0 + 288) = v60;
  *(void *)(v0 + 296) = (v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v60(v53, v54);
  v59(v53, v58, v54);
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  sub_100556E44(&qword_101653DE0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  uint64_t v61 = static Duration.description<A>(_:_:units:)();
  unint64_t v63 = v62;
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v56, v82);
  uint64_t v83 = v60;
  v60(v53, v54);
  if (qword_101636B70 != -1) {
    swift_once();
  }
  if (static Duration.< infix(_:_:)())
  {
    swift_bridgeObjectRetain();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    uint64_t v67 = *(void *)(v0 + 272);
    uint64_t v68 = *(void *)(v0 + 256);
    if (v66)
    {
      uint64_t v80 = *(void *)(v0 + 272);
      uint64_t v78 = *(void *)(v0 + 256);
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = sub_1008FA0F0(v61, v63, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Not returning result yet. Duration since last update: %s", v69, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v70 = v80;
      uint64_t v71 = v78;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v70 = v67;
      uint64_t v71 = v68;
    }
    v83(v70, v71);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v72;
  *uint64_t v72 = v0;
  v72[1] = sub_100555D68;
  return sub_1005567AC();
}

uint64_t sub_100555D68(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100555E80, v2, 0);
}

uint64_t sub_100555E80()
{
  uint64_t v1 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 288))(*(void *)(v0 + 272), *(void *)(v0 + 256));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100555F14()
{
  *(void *)(v1 + 48) = v0;
  return _swift_task_switch(sub_100555F34, v0, 0);
}

void sub_100555F34()
{
  uint64_t v42 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer;
  swift_beginAccess();
  if (*(void *)(*(void *)v2 + 16) && (sub_1007248D8(37), (v3 & 1) != 0))
  {
    sub_10000D64C();
    swift_bridgeObjectRetain();
    Array<A>.mean.getter();
    double v5 = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    double v5 = -128.0;
  }
  if (*(void *)(*(void *)v2 + 16) && (sub_1007248D8(38), (v6 & 1) != 0))
  {
    sub_10000D64C();
    swift_bridgeObjectRetain();
    Array<A>.mean.getter();
    double v8 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    double v8 = -128.0;
  }
  uint64_t v40 = (void *)v2;
  if (!*(void *)(*(void *)v2 + 16) || (sub_1007248D8(39), (v9 & 1) == 0))
  {
    double v11 = -128.0;
    if (v5 <= v8)
    {
      double v12 = v8;
      if (v8 > -128.0) {
        goto LABEL_21;
      }
    }
    else
    {
      double v12 = v5;
      if (v5 > -128.0) {
        goto LABEL_21;
      }
    }
LABEL_20:
    double v12 = v11;
    goto LABEL_21;
  }
  sub_10000D64C();
  swift_bridgeObjectRetain();
  Array<A>.mean.getter();
  double v11 = v10;
  swift_bridgeObjectRelease();
  if (v5 > v8) {
    double v12 = v5;
  }
  else {
    double v12 = v8;
  }
  if (v12 <= v11) {
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v13 = (double *)(v0 + 40);
  if (qword_101636B68 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170DFB8);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134219267;
    double *v13 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2048;
    double *v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2048;
    double *v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 32) = 2048;
    double *v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 42) = 2160;
    *(void *)uint64_t v13 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 52) = 2081;
    type metadata accessor for UUID();
    sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)uint64_t v13 = sub_1008FA0F0(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "channel37Average: %f. channel38Average: %f. channel39Average: %f. filteredRSSI: %f. Beacon %{private,mask.hash}s", (uint8_t *)v17, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v20 = *v1;
  uint64_t v21 = *(void *)(*v1 + 112);
  unint64_t v22 = *(void *)(v21 + 16);
  if (!v22)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (*(double *)(v21 + 32) >= v12)
  {
    if (v22 < 2)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (*(double *)(v21 + 40) < v12) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = 2;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel;
  unint64_t v25 = *(void *)(v20 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel);
  if (v25 == 2) {
    goto LABEL_45;
  }
  if (__OFSUB__(v23, v25))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v23 - v25 != 1) {
    goto LABEL_45;
  }
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v26 = *(void *)(v20 + 120);
  if (v25 >= *(void *)(v26 + 16))
  {
LABEL_60:
    __break(1u);
    return;
  }
  double v27 = *(double *)(v26 + 8 * v25 + 32);
  swift_retain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  if (v12 < v27)
  {
    if (v30)
    {
      log = v28;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 141558275;
      *(void *)uint64_t v13 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)uint64_t v13 = sub_1008FA0F0(v32, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, log, v29, "RSSI decrease is enough to switch to the lower level. Beacon: %{private,mask.hash}s.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
LABEL_45:
    *(void *)(v20 + v24) = v23;
    goto LABEL_46;
  }
  if (v30)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 141558275;
    *(void *)uint64_t v13 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100556E44((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)uint64_t v13 = sub_1008FA0F0(v35, v36, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "RSSI decrease is NOT small enough to switch to the lower level. Beacon: %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

LABEL_46:
  *uint64_t v40 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v37 = *(void *)(v20 + v24);
  unint64_t v38 = *(void (**)(uint64_t, void, uint64_t))(v0 + 8);
  v38(v37, 0, (uint64_t)v12);
}

uint64_t sub_1005567AC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  double v4 = (void *)swift_task_alloc();
  v1[9] = v4;
  *double v4 = v1;
  v4[1] = sub_100556910;
  v4[6] = v0;
  return _swift_task_switch(sub_100555F34, v0, 0);
}

uint64_t sub_100556910(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  *(unsigned char *)(v4 + 96) = a2;
  *(void *)(v4 + 80) = a1;
  *(void *)(v4 + 88) = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100556A2C, v5, 0);
}

uint64_t sub_100556A2C()
{
  char v1 = *(unsigned char *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v15 = *(void *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, *(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon);
  static Date.now.getter();
  if (v1) {
    uint64_t v3 = 3;
  }
  id v8 = objc_allocWithZone((Class)SPBTRSSIResult);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v10 = Date._bridgeToObjectiveC()().super.isa;
  id v11 = [v8 initWithBeaconIdentifier:isa timestamp:v10 bucket:v3 rssi:v2];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v15);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  double v12 = *(uint64_t (**)(id))(v0 + 8);
  return v12(v11);
}

uint64_t sub_100556B90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_clock;
  uint64_t v4 = type metadata accessor for ContinuousClock();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100556CB4()
{
  return type metadata accessor for BTRSSIFilter();
}

uint64_t type metadata accessor for BTRSSIFilter()
{
  uint64_t result = qword_101648508;
  if (!qword_101648508) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100556D08()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ContinuousClock();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ContinuousClock.Instant();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_100556E44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100556E8C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v92 = a2;
  int64_t v93 = a3;
  id v91 = a1;
  uint64_t v87 = a4;
  uint64_t v5 = sub_10000588C(&qword_10163EB38);
  __chkstk_darwin(v5 - 8);
  uint64_t v90 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  uint64_t v94 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  id v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163EA90);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v85 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v72 - v12;
  uint64_t v88 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v95 = (uint64_t *)((char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for BeaconPayloadv1();
  __chkstk_darwin(v15);
  uint64_t v96 = (uint64_t *)((char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v89 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v72 - v24;
  sub_100428440((uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    sub_100557830();
    swift_allocError();
    *uint64_t v26 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v83 = v13;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v28(v25, v19, v20);
    uint64_t v29 = Data.init(contentsOf:options:)();
    if (!v4)
    {
      uint64_t v80 = (int *)v15;
      uint64_t v81 = v21;
      uint64_t v82 = v25;
      uint64_t v78 = v28;
      uint64_t v79 = v21 + 32;
      uint64_t v77 = v8;
      uint64_t v31 = v30;
      uint64_t v32 = v29;
      id v33 = v91;
      sub_1000361E0(v32, (unint64_t)v31);
      uint64_t v34 = v92;
      unint64_t v35 = v93;
      sub_1000361E0(v92, v93);
      unint64_t v36 = v96;
      BeaconPayloadv1.init(using:data:advertisement:)(v33, v32, (unint64_t)v31, v34, v35, (uint64_t)v96);
      uint64_t v76 = v32;
      id v91 = v31;
      uint64_t v37 = *v36;
      unint64_t v38 = v36[1];
      uint64_t v92 = v38 >> 62;
      sub_1000361E0(v37, v38);
      uint64_t v39 = static MACAddress.length.getter();
      sub_100435A9C(v39, v37, v38, (uint64_t *)&v97);
      unint64_t v75 = v97;
      unint64_t v74 = v98;
      sub_1000361E0(v37, v38);
      sub_1000361E0(v37, v38);
      uint64_t v40 = static MACAddress.length.getter();
      int64_t v93 = v37;
      sub_100435A9C(v40, v37, v38, (uint64_t *)&v97);
      uint64_t v41 = v97;
      unint64_t v42 = v98;
      uint64_t v21 = v81;
      unint64_t v25 = v82;
      uint64_t v43 = v80;
      switch(v98 >> 62)
      {
        case 1uLL:
          unint64_t v73 = HIDWORD(v97);
          sub_10001CFB8(v97, v98);
          if (__OFSUB__(v73, v41)) {
            goto LABEL_26;
          }
          uint64_t v44 = (int)v73 - (int)v41;
          break;
        case 2uLL:
          unint64_t v73 = *(void *)(v97 + 24);
          uint64_t v72 = *(void *)(v97 + 16);
          sub_10001CFB8(v97, v98);
          uint64_t v44 = v73 - v72;
          if (!__OFSUB__(v73, v72)) {
            break;
          }
          __break(1u);
LABEL_12:
          sub_10001CFB8(v41, v42);
          uint64_t v44 = 0;
          break;
        case 3uLL:
          goto LABEL_12;
        default:
          sub_10001CFB8(v97, v98);
          uint64_t v44 = BYTE6(v42);
          break;
      }
      uint64_t v45 = (uint64_t)v96;
      uint64_t v46 = v93;
      uint64_t v47 = 0;
      switch((int)v92)
      {
        case 1:
          uint64_t v47 = v93 >> 32;
          break;
        case 2:
          uint64_t v47 = *(void *)(v93 + 24);
          break;
        case 3:
          break;
        default:
          uint64_t v47 = BYTE6(v38);
          break;
      }
      if (v47 < v44)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x100557810);
      }
      uint64_t v48 = Data._Representation.subscript.getter();
      uint64_t v92 = v49;
      int64_t v93 = v48;
      sub_10001CFB8(v46, v38);
      uint64_t v50 = v43[9];
      LODWORD(v73) = *(unsigned __int8 *)(v45 + v43[10]);
      uint64_t v51 = *(void *)(v45 + v43[7]);
      uint64_t v52 = *(void *)(v45 + v43[8]);
      uint64_t v53 = *(void *)(v45 + v50);
      uint64_t v54 = v95;
      uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
      v55((char *)v95 + *(int *)(v88 + 28), v45 + v43[5], v20);
      *uint64_t v54 = v51;
      v54[1] = v52;
      v54[2] = v53;
      v55(v89, (uint64_t)v25, v20);
      uint64_t v56 = (uint64_t)v83;
      sub_100427FE0((uint64_t)v83);
      uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
      uint64_t v58 = v86;
      v94 += 48;
      if (v57(v56, 1, v86))
      {
        sub_10001DAB4(v56, (uint64_t *)&unk_10163EA90);
        LODWORD(v83) = 0;
      }
      else
      {
        uint64_t v59 = (uint64_t)v77;
        sub_1005578EC(v56, (uint64_t)v77, type metadata accessor for BeaconPayloadFile.MetaData);
        sub_10001DAB4(v56, (uint64_t *)&unk_10163EA90);
        LODWORD(v83) = *(unsigned __int8 *)(v59 + *(int *)(v58 + 28));
        sub_100557954(v59, type metadata accessor for BeaconPayloadFile.MetaData);
      }
      uint64_t v60 = v58;
      uint64_t v61 = v90;
      sub_1005578EC((uint64_t)v95, v90, type metadata accessor for CachedHistoricalLocation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v61, 0, 1, v88);
      uint64_t v62 = v85;
      sub_100427FE0(v85);
      sub_10001CFB8(v76, (unint64_t)v91);
      if (v57(v62, 1, v60))
      {
        sub_10001DAB4(v62, (uint64_t *)&unk_10163EA90);
        char v63 = 0;
      }
      else
      {
        uint64_t v64 = (uint64_t)v77;
        sub_1005578EC(v62, (uint64_t)v77, type metadata accessor for BeaconPayloadFile.MetaData);
        sub_10001DAB4(v62, (uint64_t *)&unk_10163EA90);
        char v65 = *(unsigned char *)(v64 + *(int *)(v60 + 48));
        sub_100557954(v64, type metadata accessor for BeaconPayloadFile.MetaData);
        char v63 = v65 & 1;
      }
      BOOL v66 = v78;
      uint64_t v67 = (int *)type metadata accessor for BeaconPayload(0);
      uint64_t v68 = v87;
      v87[3] = (uint64_t)v67;
      v68[4] = (uint64_t)&off_1015F47E8;
      uint64_t v69 = sub_10001D958(v68);
      unint64_t v70 = v74;
      uint64_t *v69 = v75;
      v69[1] = v70;
      uint64_t v71 = v92;
      v69[2] = v93;
      v69[3] = v71;
      *((unsigned char *)v69 + 32) = v73;
      *(_OWORD *)(v69 + 5) = xmmword_101348180;
      v69[7] = 0;
      v66((char *)v69 + v67[9], v89, v20);
      *((unsigned char *)v69 + v67[10]) = (_BYTE)v83;
      sub_100557884(v90, (uint64_t)v69 + v67[11]);
      *((unsigned char *)v69 + v67[12]) = v63;
      sub_100557954((uint64_t)v95, type metadata accessor for CachedHistoricalLocation);
      sub_100557954((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  }
}

unint64_t sub_100557830()
{
  unint64_t result = qword_101648648;
  if (!qword_101648648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648648);
  }
  return result;
}

uint64_t sub_100557884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163EB38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005578EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100557954(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *AirPodsSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  static AirPodsSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSendPairingStatusCommandPayload.expectedLength.modify())()
{
  return j__swift_endAccess_0;
}

double AirPodsSendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100557D9C(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t AirPodsSendPairingStatusCommandPayload.encode(to:)(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_100557C24(void *a1)
{
  return AirPodsSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_100557C3C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x100557D6CLL);
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 60) {
        goto LABEL_26;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_22;
          }
          uint64_t v11 = (int)v11;
LABEL_12:
          if (v11 != 4) {
            goto LABEL_27;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v14) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_24;
              }
              uint64_t v14 = (int)v14;
LABEL_18:
              if (v14 != 100) {
                goto LABEL_28;
              }
              *a7 = result;
              a7[1] = a2;
              a7[2] = a3;
              a7[3] = a4;
              a7[4] = a5;
              a7[5] = a6;
              return result;
            case 2uLL:
              uint64_t v16 = *(void *)(a5 + 16);
              uint64_t v15 = *(void *)(a5 + 24);
              BOOL v10 = __OFSUB__(v15, v16);
              uint64_t v14 = v15 - v16;
              if (!v10) {
                goto LABEL_18;
              }
              goto LABEL_25;
            case 3uLL:
              goto LABEL_28;
            default:
              uint64_t v14 = BYTE6(a6);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v13 = *(void *)(a3 + 16);
          uint64_t v12 = *(void *)(a3 + 24);
          BOOL v10 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 3uLL:
          goto LABEL_27;
        default:
          uint64_t v11 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_26;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100557D9C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v15, v16);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v18 = v10;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_100557C3C(v7, v8, v9, v18, v11, v12, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v14 = v17[1];
    *a2 = v17[0];
    a2[1] = v14;
    a2[2] = v17[2];
  }
  return result;
}

unint64_t sub_100557F1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100557F4C();
  unint64_t result = sub_100557FA0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100557F4C()
{
  unint64_t result = qword_101648658;
  if (!qword_101648658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648658);
  }
  return result;
}

unint64_t sub_100557FA0()
{
  unint64_t result = qword_101648660;
  if (!qword_101648660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648660);
  }
  return result;
}

uint64_t destroy for RootKey(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for RootKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_1000361E0(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for RootKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v13 = a2[4];
  unint64_t v12 = a2[5];
  sub_1000361E0(v13, v12);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_10001CFB8(v14, v15);
  return a1;
}

uint64_t *assignWithTake for RootKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyGenerationBeaconInfo.Keys(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationBeaconInfo.Keys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSendPairingStatusCommandPayload;
}

ValueMetadata *type metadata accessor for AccessoryMultistatusResponsePayload()
{
  return &type metadata for AccessoryMultistatusResponsePayload;
}

uint64_t sub_100558258(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_10006145C();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100558330@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1005583FC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_10055835C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10055838C();
  unint64_t result = sub_1002A58BC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10055838C()
{
  unint64_t result = qword_101648668;
  if (!qword_101648668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648668);
  }
  return result;
}

uint64_t sub_1005583E0(void *a1)
{
  return sub_100558258(a1);
}

uint64_t sub_1005583FC(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_10006145C();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryDecodingError();
    sub_100499A70();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryDecodingError.decodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

uint64_t *sub_1005585CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    sub_1000361E0(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    unint64_t v8 = (int *)type metadata accessor for SharedBeaconRecord(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    unsigned __int8 v11 = (char *)a2 + v9;
    uint64_t v52 = type metadata accessor for UUID();
    uint64_t v54 = *(void *)(v52 - 8);
    char v12 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v12(v10, v11, v52);
    v12((char *)a1 + v8[6], (char *)a2 + v8[6], v52);
    uint64_t v13 = v8[7];
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    *uint64_t v14 = *v15;
    uint64_t v51 = *((void *)v15 + 2);
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((void *)v14 + 2) = v51;
    uint64_t v16 = v8[8];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = v8[9];
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = v8[10];
    unint64_t v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    *(uint64_t *)((char *)a1 + v8[11]) = *(uint64_t *)((char *)a2 + v8[11]);
    *(uint64_t *)((char *)a1 + v8[12]) = *(uint64_t *)((char *)a2 + v8[12]);
    *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
    *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    *(uint64_t *)((char *)a1 + v8[15]) = *(uint64_t *)((char *)a2 + v8[15]);
    *((unsigned char *)a1 + v8[16]) = *((unsigned char *)a2 + v8[16]);
    *(uint64_t *)((char *)a1 + v8[17]) = *(uint64_t *)((char *)a2 + v8[17]);
    uint64_t v28 = v8[18];
    uint64_t v49 = (char *)a2 + v28;
    uint64_t v50 = (char *)a1 + v28;
    uint64_t v29 = type metadata accessor for Date();
    BOOL v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(v50, v49, v29);
    uint64_t v31 = v8[19];
    uint64_t v32 = (char *)a1 + v31;
    id v33 = (char *)a2 + v31;
    uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    if (v34((char *)a2 + v31, 1, v52))
    {
      uint64_t v35 = sub_10000588C(&qword_101638CF0);
      memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v12(v32, v33, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v32, 0, 1, v52);
    }
    uint64_t v37 = v8[20];
    unint64_t v38 = (_DWORD *)((char *)a1 + v37);
    uint64_t v39 = (_DWORD *)((char *)a2 + v37);
    uint64_t v40 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = sub_10000588C((uint64_t *)&unk_101653D30);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      *unint64_t v38 = *v39;
      uint64_t v43 = *(int *)(v40 + 20);
      uint64_t v44 = (char *)v38 + v43;
      uint64_t v45 = (char *)v39 + v43;
      if (v34(v45, 1, v52))
      {
        uint64_t v46 = sub_10000588C(&qword_101638CF0);
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        v12(v44, v45, v52);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v44, 0, 1, v52);
      }
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v47 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v47) = *(uint64_t *)((char *)a2 + v47);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100558A70(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v2 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(a1 + v2[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + v2[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + v2[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = a1 + v2[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100558CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_1000361E0(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v11(v9, v10, v50);
  v11((char *)a1 + v7[6], (char *)a2 + v7[6], v50);
  uint64_t v12 = v7[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  char *v13 = *v14;
  uint64_t v49 = *((void *)v14 + 2);
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = v49;
  uint64_t v15 = v7[8];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v7[9];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = v7[10];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  unint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  *(uint64_t *)((char *)a1 + v7[11]) = *(uint64_t *)((char *)a2 + v7[11]);
  *(uint64_t *)((char *)a1 + v7[12]) = *(uint64_t *)((char *)a2 + v7[12]);
  *((unsigned char *)a1 + v7[13]) = *((unsigned char *)a2 + v7[13]);
  *((unsigned char *)a1 + v7[14]) = *((unsigned char *)a2 + v7[14]);
  *(uint64_t *)((char *)a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
  *((unsigned char *)a1 + v7[16]) = *((unsigned char *)a2 + v7[16]);
  *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
  uint64_t v27 = v7[18];
  uint64_t v47 = (char *)a2 + v27;
  uint64_t v48 = (char *)a1 + v27;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(v48, v47, v28);
  uint64_t v30 = v7[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  id v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v33((char *)a2 + v30, 1, v50))
  {
    uint64_t v34 = sub_10000588C(&qword_101638CF0);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v11(v31, v32, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v31, 0, 1, v50);
  }
  uint64_t v35 = v7[20];
  uint64_t v36 = (_DWORD *)((char *)a1 + v35);
  uint64_t v37 = (_DWORD *)((char *)a2 + v35);
  uint64_t v38 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    *uint64_t v36 = *v37;
    uint64_t v41 = *(int *)(v38 + 20);
    uint64_t v42 = (char *)v36 + v41;
    uint64_t v43 = (char *)v37 + v41;
    if (v33(v43, 1, v50))
    {
      uint64_t v44 = sub_10000588C(&qword_101638CF0);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      v11(v42, v43, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v42, 0, 1, v50);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v45 = *(int *)(a3 + 24);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  *(uint64_t *)((char *)a1 + v45) = *(uint64_t *)((char *)a2 + v45);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1005590F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_1000361E0(*a2, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  sub_10001CFB8(v7, v8);
  uint64_t v9 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v15((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
  uint64_t v16 = v9[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *uint64_t v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *((void *)v17 + 2) = *((void *)v18 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = v9[9];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v9[10];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v9[11]) = *(uint64_t *)((char *)a2 + v9[11]);
  *(uint64_t *)((char *)a1 + v9[12]) = *(uint64_t *)((char *)a2 + v9[12]);
  *((unsigned char *)a1 + v9[13]) = *((unsigned char *)a2 + v9[13]);
  *((unsigned char *)a1 + v9[14]) = *((unsigned char *)a2 + v9[14]);
  *(uint64_t *)((char *)a1 + v9[15]) = *(uint64_t *)((char *)a2 + v9[15]);
  *((unsigned char *)a1 + v9[16]) = *((unsigned char *)a2 + v9[16]);
  *(uint64_t *)((char *)a1 + v9[17]) = *(uint64_t *)((char *)a2 + v9[17]);
  uint64_t v28 = v9[18];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = v9[19];
  id v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  unsigned int v36 = v35((char *)a1 + v32, 1, v13);
  uint64_t v61 = v35;
  unsigned int v37 = v35(v34, 1, v13);
  uint64_t v59 = v14;
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v33, v34, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v33, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v13);
LABEL_6:
    uint64_t v38 = sub_10000588C(&qword_101638CF0);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v15(v33, v34, v13);
LABEL_7:
  uint64_t v39 = v9[20];
  uint64_t v40 = (_DWORD *)((char *)a1 + v39);
  uint64_t v41 = (_DWORD *)((char *)a2 + v39);
  uint64_t v42 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v60 = *(void *)(v42 - 8);
  uint64_t v43 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v60 + 48);
  int v44 = v43(v40, 1, v42);
  int v45 = v43(v41, 1, v42);
  if (!v44)
  {
    if (!v45)
    {
      *uint64_t v40 = *v41;
      uint64_t v52 = *(int *)(v42 + 20);
      uint64_t v53 = (char *)v40 + v52;
      uint64_t v54 = (char *)v41 + v52;
      unsigned int v55 = v35(v53, 1, v13);
      unsigned int v56 = v35(v54, 1, v13);
      if (v55)
      {
        uint64_t v49 = a3;
        if (!v56)
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v53, v54, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v53, 0, 1, v13);
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v49 = a3;
        if (!v56)
        {
          v15(v53, v54, v13);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v13);
      }
      uint64_t v57 = sub_10000588C(&qword_101638CF0);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
      goto LABEL_23;
    }
    sub_10055AD54((uint64_t)v40, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v45)
  {
LABEL_13:
    uint64_t v51 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v40, v41, *(void *)(*(void *)(v51 - 8) + 64));
    uint64_t v49 = a3;
    goto LABEL_23;
  }
  *uint64_t v40 = *v41;
  uint64_t v46 = *(int *)(v42 + 20);
  uint64_t v47 = (char *)v40 + v46;
  uint64_t v48 = (char *)v41 + v46;
  uint64_t v49 = a3;
  if (v61(v48, 1, v13))
  {
    uint64_t v50 = sub_10000588C(&qword_101638CF0);
    memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v47, 0, 1, v13);
  }
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v60 + 56))(v40, 0, 1, v42);
LABEL_23:
  *(uint64_t *)((char *)a1 + *(int *)(v49 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v49 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + *(int *)(v49 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v49 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100559764(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11(&a1[v5[6]], &a2[v5[6]], v9);
  uint64_t v12 = v5[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_OWORD *)&a1[v5[8]] = *(_OWORD *)&a2[v5[8]];
  *(_OWORD *)&a1[v5[9]] = *(_OWORD *)&a2[v5[9]];
  *(_OWORD *)&a1[v5[10]] = *(_OWORD *)&a2[v5[10]];
  *(void *)&a1[v5[11]] = *(void *)&a2[v5[11]];
  *(void *)&a1[v5[12]] = *(void *)&a2[v5[12]];
  a1[v5[13]] = a2[v5[13]];
  a1[v5[14]] = a2[v5[14]];
  *(void *)&a1[v5[15]] = *(void *)&a2[v5[15]];
  a1[v5[16]] = a2[v5[16]];
  *(void *)&a1[v5[17]] = *(void *)&a2[v5[17]];
  uint64_t v15 = v5[18];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = v5[19];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  unsigned int v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  if (v37(&a2[v19], 1, v9))
  {
    uint64_t v22 = sub_10000588C(&qword_101638CF0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  uint64_t v23 = v5[20];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v30 = &v24[v29];
    uint64_t v31 = &v25[v29];
    if (v37(v31, 1, v9))
    {
      uint64_t v32 = sub_10000588C(&qword_101638CF0);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v35(v30, v31, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v9);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v33 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v33] = *(void *)&a2[v33];
  return a1;
}

uint64_t *sub_100559B54(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v5, v6);
  uint64_t v7 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v13((char *)a1 + v7[6], &a2[v7[6]], v11);
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  char *v15 = *v16;
  uint64_t v18 = *((void *)v16 + 1);
  uint64_t v17 = *((void *)v16 + 2);
  *((void *)v15 + 1) = v18;
  *((void *)v15 + 2) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = v7[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = v7[9];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)&a2[v24];
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v7[10];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  void *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v7[11]) = *(void *)&a2[v7[11]];
  *(uint64_t *)((char *)a1 + v7[12]) = *(void *)&a2[v7[12]];
  *((unsigned char *)a1 + v7[13]) = a2[v7[13]];
  *((unsigned char *)a1 + v7[14]) = a2[v7[14]];
  *(uint64_t *)((char *)a1 + v7[15]) = *(void *)&a2[v7[15]];
  *((unsigned char *)a1 + v7[16]) = a2[v7[16]];
  *(uint64_t *)((char *)a1 + v7[17]) = *(void *)&a2[v7[17]];
  uint64_t v34 = v7[18];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  uint64_t v38 = v7[19];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  unsigned int v42 = v41((char *)a1 + v38, 1, v11);
  uint64_t v67 = v41;
  unsigned int v43 = v41(v40, 1, v11);
  uint64_t v65 = v12;
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v39, v40, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v39, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v39, v11);
LABEL_6:
    uint64_t v44 = sub_10000588C(&qword_101638CF0);
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  v13(v39, v40, v11);
LABEL_7:
  uint64_t v45 = v7[20];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = &a2[v45];
  uint64_t v48 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v66 = *(void *)(v48 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  int v50 = v49(v46, 1, v48);
  int v51 = v49(v47, 1, v48);
  if (!v50)
  {
    if (!v51)
    {
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v58 = *(int *)(v48 + 20);
      uint64_t v59 = &v46[v58];
      uint64_t v60 = &v47[v58];
      unsigned int v61 = v41(v59, 1, v11);
      unsigned int v62 = v41(v60, 1, v11);
      if (v61)
      {
        uint64_t v55 = a3;
        if (!v62)
        {
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v59, v60, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v59, 0, 1, v11);
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v55 = a3;
        if (!v62)
        {
          v13(v59, v60, v11);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v65 + 8))(v59, v11);
      }
      uint64_t v63 = sub_10000588C(&qword_101638CF0);
      memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      goto LABEL_23;
    }
    sub_10055AD54((uint64_t)v46, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v51)
  {
LABEL_13:
    uint64_t v57 = sub_10000588C((uint64_t *)&unk_101653D30);
    memcpy(v46, v47, *(void *)(*(void *)(v57 - 8) + 64));
    uint64_t v55 = a3;
    goto LABEL_23;
  }
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  uint64_t v52 = *(int *)(v48 + 20);
  uint64_t v53 = &v46[v52];
  uint64_t v54 = &v47[v52];
  uint64_t v55 = a3;
  if (v67(v54, 1, v11))
  {
    uint64_t v56 = sub_10000588C(&qword_101638CF0);
    memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v53, v54, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v11);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v46, 0, 1, v48);
LABEL_23:
  *(uint64_t *)((char *)a1 + *(int *)(v55 + 20)) = *(void *)&a2[*(int *)(v55 + 20)];
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + *(int *)(v55 + 24)) = *(void *)&a2[*(int *)(v55 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10055A168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10055A17C);
}

uint64_t sub_10055A17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10055A23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10055A250);
}

uint64_t sub_10055A250(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FindMyAirPodsFamilyShareEnvelope()
{
  uint64_t result = qword_1016486C8;
  if (!qword_1016486C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10055A358()
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10055A3F4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101648708);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10055AB5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for SharedBeaconRecord(0);
  sub_10055ACA8((unint64_t *)&unk_10166EAA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAirPodsFamilyShareEnvelope + 20));
    char v12 = 1;
    sub_10000588C(&qword_10163F188);
    sub_10055AC14(&qword_10163F190, &qword_10163F198);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAirPodsFamilyShareEnvelope + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10055A650@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101648718);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
  __chkstk_darwin(MyAirPodsFamilyShareEnvelope);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v22 = a1;
  sub_10001CD44(a1, v13);
  sub_10055AB5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  }
  uint64_t v14 = v20;
  uint64_t v15 = (uint64_t)v12;
  LOBYTE(v24) = 0;
  sub_10055ACA8(&qword_101660D70, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v16 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10055ABB0((uint64_t)v6, v15);
  sub_10000588C(&qword_10163F188);
  char v23 = 1;
  uint64_t v18 = sub_10055AC14(&qword_10163F1C0, &qword_10163F1C8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v15 + *(int *)(MyAirPodsFamilyShareEnvelope + 20)) = v24;
  char v23 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v16);
  *(void *)(v15 + *(int *)(MyAirPodsFamilyShareEnvelope + 24)) = v24;
  sub_10055ACF0(v15, v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  return sub_10055AD54(v15, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
}

uint64_t sub_10055AA24()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6542646572616873;
  }
}

uint64_t sub_10055AA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10055AFC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10055AAB4(uint64_t a1)
{
  unint64_t v2 = sub_10055AB5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10055AAF0(uint64_t a1)
{
  unint64_t v2 = sub_10055AB5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10055AB2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10055A650(a1, a2);
}

uint64_t sub_10055AB44(void *a1)
{
  return sub_10055A3F4(a1);
}

unint64_t sub_10055AB5C()
{
  unint64_t result = qword_101648710;
  if (!qword_101648710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648710);
  }
  return result;
}

uint64_t sub_10055ABB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10055AC14(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163F188);
    sub_10055ACA8(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV1);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10055ACA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10055ACF0(uint64_t a1, uint64_t a2)
{
  uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(MyAirPodsFamilyShareEnvelope - 8) + 16))(a2, a1, MyAirPodsFamilyShareEnvelope);
  return a2;
}

uint64_t sub_10055AD54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for FindMyAirPodsFamilyShareEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10055AE80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAirPodsFamilyShareEnvelope.CodingKeys()
{
  return &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys;
}

unint64_t sub_10055AEBC()
{
  unint64_t result = qword_101648720;
  if (!qword_101648720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648720);
  }
  return result;
}

unint64_t sub_10055AF14()
{
  unint64_t result = qword_101648728;
  if (!qword_101648728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648728);
  }
  return result;
}

unint64_t sub_10055AF6C()
{
  unint64_t result = qword_101648730;
  if (!qword_101648730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648730);
  }
  return result;
}

uint64_t sub_10055AFC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6542646572616873 && a2 == 0xEC0000006E6F6361;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000101401B00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000101401B20)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t *AirPodsSWSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  static AirPodsSWSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSWSendPairingStatusCommandPayload.expectedLength.modify())()
{
  return j__swift_endAccess_0;
}

double AirPodsSWSendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10055B4E0(a1, v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t AirPodsSWSendPairingStatusCommandPayload.encode(to:)(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_10055B3D4(void *a1)
{
  return AirPodsSWSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_10055B3EC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x10055B4C0);
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 != 85) {
        goto LABEL_18;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v13 = (int)v13;
LABEL_12:
          if (v13 != 4) {
            goto LABEL_19;
          }
          *a9 = result;
          a9[1] = a2;
          a9[2] = a3;
          a9[3] = a4;
          a9[4] = a5;
          a9[5] = a6;
          a9[6] = a7;
          a9[7] = a8;
          return result;
        case 2uLL:
          uint64_t v15 = *(void *)(a3 + 16);
          uint64_t v14 = *(void *)(a3 + 24);
          BOOL v12 = __OFSUB__(v14, v15);
          uint64_t v13 = v14 - v15;
          if (!v12) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v13 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v10 = *(void *)(result + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10055B4E0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v23, v24);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v26 = v10;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v19 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v20 = v11;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v21 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v22 = v12;
    uint64_t v17 = v12;
    uint64_t v18 = v21;
    sub_1000361E0(v19, v20);
    sub_1000362FC();
    uint64_t v13 = DataProtocol.intValue.getter();
    sub_100435A9C(v13, v19, v20, &v21);
    sub_10001CFB8(v19, v20);
    sub_10055B3EC(v7, v8, v9, v26, v21, v22, v18, v17, v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v15 = v25[1];
    *a2 = v25[0];
    a2[1] = v15;
    long long v16 = v25[3];
    a2[2] = v25[2];
    a2[3] = v16;
  }
  return result;
}

unint64_t sub_10055B6E8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10055B718();
  unint64_t result = sub_10033BF1C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10055B718()
{
  unint64_t result = qword_101648740;
  if (!qword_101648740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648740);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSWSendPairingStatusCommandPayload;
}

void sub_10055B77C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = dispatch_group_create();
  if (qword_101637448 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F250);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Initial launch processing...", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = v1 + 16;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v27 = v4;
    uint64_t v13 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10001D010(v13, (uint64_t)v31);
      sub_10001D010((uint64_t)v31, (uint64_t)v30);
      sub_10000588C(&qword_1016390A0);
      sub_10000588C(&qword_101648A30);
      if (swift_dynamicCast())
      {
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v14 = v32;
        uint64_t v15 = v33;
        sub_10001CD44(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      v13 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(*(void *)v10 + 16);
    if (v16)
    {
      uint64_t v17 = *(void *)v10 + 32;
      swift_bridgeObjectRetain();
      uint64_t v18 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001D010(v17, (uint64_t)v31);
        sub_10001D010((uint64_t)v31, (uint64_t)v30);
        sub_10000588C(&qword_1016390A0);
        sub_10000588C(&qword_101648A30);
        if ((swift_dynamicCast() & 1) == 0) {
          long long v29 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
        if ((void)v29)
        {
          long long v28 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = sub_100A70BC8(0, v18[2] + 1, 1, v18);
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          long long v21 = v28;
          if (v20 >= v19 >> 1)
          {
            uint64_t v22 = sub_100A70BC8((void *)(v19 > 1), v20 + 1, 1, v18);
            long long v21 = v28;
            uint64_t v18 = v22;
          }
          void v18[2] = v20 + 1;
          *(_OWORD *)&v18[2 * v20 + 4] = v21;
        }
        v17 += 40;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    uint64_t v4 = v27;
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  dispatch_group_enter(v5);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 1, 1, v23);
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = 0;
  v24[3] = 0;
  void v24[4] = v18;
  v24[5] = v5;
  uint64_t v25 = v5;
  sub_1008F5E44((uint64_t)v4, (uint64_t)&unk_101648A78, (uint64_t)v24);
  swift_release();
  OS_dispatch_group.wait()();
}

void sub_10055BB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v85 = &v77[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v86 = type metadata accessor for SystemVersionNumber();
  uint64_t v8 = *(void *)(v86 - 8);
  uint64_t v9 = __chkstk_darwin(v86);
  uint64_t v83 = &v77[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = &v77[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = &v77[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v77[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  long long v21 = &v77[-v20];
  uint64_t v82 = v22;
  __chkstk_darwin(v19);
  uint64_t v24 = &v77[-v23];
  dispatch_group_t v79 = dispatch_group_create();
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  char v25 = static SystemVersionNumber.< infix(_:_:)();
  uint64_t v84 = v8;
  if (v25)
  {
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170F250);
    uint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v28 = v86;
    v27(v24, v87, v86);
    uint64_t v80 = v27;
    v27(v21, v88, v28);
    long long v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      *(void *)&long long v89 = swift_slowAlloc();
      v92[0] = v89;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v33 = SystemVersionNumber.rawValue.getter();
      v91[0] = sub_1008FA0F0(v33, v34, v92);
      int v78 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v35(v24, v28);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v36 = SystemVersionNumber.rawValue.getter();
      v91[0] = sub_1008FA0F0(v36, v37, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v21, v28);
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v78, "Migrating from %s to %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v49(v24, v28);
      v49(v21, v28);
    }
  }
  else
  {
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170F250);
    uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v28 = v86;
    v39(v18, v87, v86);
    uint64_t v80 = v39;
    v39(v15, v88, v28);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    int v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v43 = swift_slowAlloc();
      *(void *)&long long v89 = swift_slowAlloc();
      v92[0] = v89;
      *(_DWORD *)uint64_t v43 = 136315394;
      int v78 = v42;
      uint64_t v44 = SystemVersionNumber.rawValue.getter();
      v91[0] = sub_1008FA0F0(v44, v45, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v46(v18, v86);
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v47 = SystemVersionNumber.rawValue.getter();
      v91[0] = sub_1008FA0F0(v47, v48, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v46(v15, v86);
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v78, "Back-migration from %s to %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v28 = v86;
      swift_slowDealloc();
    }
    else
    {
      int v50 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v50(v18, v28);
      v50(v15, v28);
    }
  }
  uint64_t v51 = v3 + 16;
  swift_beginAccess();
  uint64_t v52 = *(void *)(v3 + 16);
  uint64_t v53 = *(void *)(v52 + 16);
  if (v53)
  {
    uint64_t v54 = v52 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10001D010(v54, (uint64_t)v92);
      sub_10001D010((uint64_t)v92, (uint64_t)v91);
      sub_10000588C(&qword_1016390A0);
      sub_10000588C(&qword_101648A30);
      if (swift_dynamicCast())
      {
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v55 = v93;
        uint64_t v56 = v94;
        sub_10001CD44(v92, v93);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 40))(v87, v88, v55, v56);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
      v54 += 40;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(*(void *)v51 + 16);
    if (v57)
    {
      uint64_t v58 = *(void *)v51 + 32;
      swift_bridgeObjectRetain();
      uint64_t v59 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001D010(v58, (uint64_t)v92);
        sub_10001D010((uint64_t)v92, (uint64_t)v91);
        sub_10000588C(&qword_1016390A0);
        sub_10000588C(&qword_101648A30);
        if ((swift_dynamicCast() & 1) == 0) {
          long long v90 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
        if ((void)v90)
        {
          long long v89 = v90;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v59 = sub_100A70BC8(0, v59[2] + 1, 1, v59);
          }
          unint64_t v61 = v59[2];
          unint64_t v60 = v59[3];
          long long v62 = v89;
          if (v61 >= v60 >> 1)
          {
            uint64_t v63 = sub_100A70BC8((void *)(v60 > 1), v61 + 1, 1, v59);
            long long v62 = v89;
            uint64_t v59 = v63;
          }
          v59[2] = v61 + 1;
          *(_OWORD *)&v59[2 * v61 + 4] = v62;
        }
        v58 += 40;
        --v57;
      }
      while (v57);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v59 = _swiftEmptyArrayStorage;
    }
    uint64_t v28 = v86;
  }
  else
  {
    uint64_t v59 = _swiftEmptyArrayStorage;
  }
  dispatch_group_t v64 = v79;
  dispatch_group_enter(v79);
  uint64_t v65 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v85, 1, 1, v65);
  uint64_t v66 = v84;
  uint64_t v67 = v81;
  uint64_t v68 = v80;
  v80(v81, v87, v28);
  uint64_t v69 = v83;
  v68(v83, v88, v28);
  uint64_t v70 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v71 = (v70 + 40) & ~v70;
  uint64_t v72 = (v82 + v70 + v71) & ~v70;
  unint64_t v73 = (v82 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v74 = (char *)swift_allocObject();
  *((void *)v74 + 2) = 0;
  *((void *)v74 + 3) = 0;
  *((void *)v74 + 4) = v59;
  unint64_t v75 = *(void (**)(char *, unsigned char *, uint64_t))(v66 + 32);
  v75(&v74[v71], v67, v28);
  v75(&v74[v72], v69, v28);
  *(void *)&v74[v73] = v64;
  uint64_t v76 = v64;
  sub_1008F5E44((uint64_t)v85, (uint64_t)&unk_101648A68, (uint64_t)v74);
  swift_release();
  OS_dispatch_group.wait()();
}

void sub_10055C554()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = dispatch_group_create();
  if (qword_101637448 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F250);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "First launch since reboot...", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = v1 + 16;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v27 = v4;
    uint64_t v13 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10001D010(v13, (uint64_t)v31);
      sub_10001D010((uint64_t)v31, (uint64_t)v30);
      sub_10000588C(&qword_1016390A0);
      sub_10000588C(&qword_101648A30);
      if (swift_dynamicCast())
      {
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v14 = v32;
        uint64_t v15 = v33;
        sub_10001CD44(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      v13 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(*(void *)v10 + 16);
    if (v16)
    {
      uint64_t v17 = *(void *)v10 + 32;
      swift_bridgeObjectRetain();
      uint64_t v18 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001D010(v17, (uint64_t)v31);
        sub_10001D010((uint64_t)v31, (uint64_t)v30);
        sub_10000588C(&qword_1016390A0);
        sub_10000588C(&qword_101648A30);
        if ((swift_dynamicCast() & 1) == 0) {
          long long v29 = 0uLL;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
        if ((void)v29)
        {
          long long v28 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = sub_100A70BC8(0, v18[2] + 1, 1, v18);
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          long long v21 = v28;
          if (v20 >= v19 >> 1)
          {
            uint64_t v22 = sub_100A70BC8((void *)(v19 > 1), v20 + 1, 1, v18);
            long long v21 = v28;
            uint64_t v18 = v22;
          }
          void v18[2] = v20 + 1;
          *(_OWORD *)&v18[2 * v20 + 4] = v21;
        }
        v17 += 40;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    uint64_t v4 = v27;
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  dispatch_group_enter(v5);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 1, 1, v23);
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = 0;
  v24[3] = 0;
  void v24[4] = v18;
  v24[5] = v5;
  char v25 = v5;
  sub_1008F5E44((uint64_t)v4, (uint64_t)&unk_101648A70, (uint64_t)v24);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_10055C95C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DFE8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170DFE8);
  if (qword_101637448 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F250);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10055CA24()
{
  uint64_t result = sub_10055CA48();
  qword_10170E000 = result;
  qword_10170E008 = v1;
  return result;
}

uint64_t sub_10055CA48()
{
  id v0 = [self processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16) && (uint64_t v3 = sub_100723FF4(0xD000000000000010, 0x80000001014021B0), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10055CB28()
{
  v8[0] = *(void *)v0;
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 32) = 0;
  type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber();
  swift_allocObject();
  *(void *)(v0 + 40) = sub_100884B10();
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  sub_1010E3430();
  return v0;
}

uint64_t sub_10055CE04()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_10055CEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 24);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a1;
  v13[4] = a3;
  void aBlock[4] = sub_100567B70;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CBA00;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[7] = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

uint64_t sub_10055D184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101648A20);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v55 - v13;
  sub_100560360();
  Transaction.capture()();
  if (qword_101636B80 != -1) {
    swift_once();
  }
  unint64_t v15 = qword_10170E008;
  if (qword_10170E008)
  {
    uint64_t v16 = qword_10170E000;
    uint64_t v17 = qword_101636B78;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v58 = a3;
    uint64_t v59 = a2;
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170DFE8);
    swift_bridgeObjectRetain();
    *(void *)&long long v64 = v19;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v60 = a1;
    uint64_t v57 = v8;
    if (v22)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446210;
      swift_bridgeObjectRetain();
      v66[0] = sub_1008FA0F0(v16, v15, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Launching searchpartyd (%{public}s)", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v60;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v24 = type metadata accessor for SystemVersionNumber();
    char v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    v25(v14, 1, 1, v24);
    v25(v12, 1, 1, v24);
    sub_10055D988((uint64_t)v14, (uint64_t)v12);
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_101648A20);
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101648A20);
    swift_beginAccess();
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v56 = a1 + 16;
      uint64_t v28 = v26 + 32;
      v55[1] = v26;
      swift_bridgeObjectRetain();
      long long v29 = &qword_1016390A0;
      *(void *)&long long v30 = 136446210;
      long long v62 = v30;
      unint64_t v61 = (char *)&type metadata for Any + 8;
      do
      {
        sub_10001D010(v28, (uint64_t)v69);
        sub_10001D010((uint64_t)v69, (uint64_t)v66);
        sub_10000588C(v29);
        sub_10000588C(&qword_101648A30);
        if (swift_dynamicCast())
        {
          swift_unknownObjectRelease();
        }
        else
        {
          sub_10001D010((uint64_t)v69, (uint64_t)v66);
          int v31 = Logger.logObject.getter();
          os_log_type_t v32 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = swift_slowAlloc();
            uint64_t v63 = swift_slowAlloc();
            *(void *)&long long v65 = v63;
            *(_DWORD *)uint64_t v33 = v62;
            unint64_t v34 = v29;
            uint64_t v35 = v67;
            uint64_t v36 = v68;
            sub_10001CD44(v66, v67);
            uint64_t v37 = v35;
            long long v29 = v34;
            uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v37, v36);
            *(void *)(v33 + 4) = sub_1008FA0F0(v38, v39, (uint64_t *)&v65);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Starting legacy service: %{public}s", (uint8_t *)v33, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
          }

          uint64_t v40 = v70;
          uint64_t v41 = v71;
          sub_10001CD44(v69, v70);
          (*(void (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
        v28 += 40;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void *)(*(void *)v56 + 16);
      uint64_t v43 = v59;
      uint64_t v44 = v58;
      if (v42)
      {
        uint64_t v45 = *(void *)v56 + 32;
        swift_bridgeObjectRetain();
        uint64_t v46 = _swiftEmptyArrayStorage;
        do
        {
          sub_10001D010(v45, (uint64_t)v69);
          sub_10001D010((uint64_t)v69, (uint64_t)v66);
          sub_10000588C(&qword_1016390A0);
          sub_10000588C(&qword_101648A30);
          if ((swift_dynamicCast() & 1) == 0) {
            long long v65 = 0uLL;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
          if ((void)v65)
          {
            long long v64 = v65;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v46 = sub_100A70BC8(0, v46[2] + 1, 1, v46);
            }
            unint64_t v48 = v46[2];
            unint64_t v47 = v46[3];
            long long v49 = v64;
            if (v48 >= v47 >> 1)
            {
              int v50 = sub_100A70BC8((void *)(v47 > 1), v48 + 1, 1, v46);
              long long v49 = v64;
              uint64_t v46 = v50;
            }
            v46[2] = v48 + 1;
            *(_OWORD *)&v46[2 * v48 + 4] = v49;
          }
          v45 += 40;
          --v42;
        }
        while (v42);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v46 = _swiftEmptyArrayStorage;
      }
      a1 = v60;
    }
    else
    {
      uint64_t v46 = _swiftEmptyArrayStorage;
      uint64_t v43 = v59;
      uint64_t v44 = v58;
    }
    uint64_t v51 = type metadata accessor for TaskPriority();
    uint64_t v52 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v57, 1, 1, v51);
    uint64_t v53 = (void *)swift_allocObject();
    v53[2] = 0;
    v53[3] = 0;
    v53[4] = v43;
    v53[5] = v46;
    v53[6] = a1;
    v53[7] = v44;
    swift_retain();
    swift_retain();
    sub_1008F5E44(v52, (uint64_t)&unk_101648A40, (uint64_t)v53);
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10055D988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  long long v89 = (char *)&v79 - v8;
  __chkstk_darwin(v7);
  uint64_t v84 = (uint64_t)&v79 - v9;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v83 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v88 = (uint64_t)&v79 - v13;
  uint64_t v14 = type metadata accessor for SystemVersionNumber();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v81 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v93 = (uint64_t)&v79 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101648A20);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  dispatch_group_t v79 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v79 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v92 = (char *)&v79 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  long long v29 = (char *)&v79 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  os_log_type_t v32 = (char *)&v79 - v31;
  __chkstk_darwin(v30);
  unint64_t v34 = (char *)&v79 - v33;
  id v82 = self;
  id v90 = [v82 standardUserDefaults];
  uint64_t v91 = v15;
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  uint64_t v80 = a1;
  LODWORD(a1) = v35(a1, 1, v14);
  sub_10001D074(a2, (uint64_t)v34, (uint64_t *)&unk_101648A20);
  if (a1 != 1)
  {
    sub_10001DAB4((uint64_t)v34, (uint64_t *)&unk_101648A20);
LABEL_7:
    sub_10001D074(a2, (uint64_t)v32, (uint64_t *)&unk_101648A20);
    if (v35((uint64_t)v32, 1, v14) != 1)
    {
      uint64_t v40 = v91;
      uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
      v41(v93, v32, v14);
      int v42 = 1;
      goto LABEL_9;
    }
LABEL_42:
    sub_10001DAB4((uint64_t)v32, (uint64_t *)&unk_101648A20);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  int v36 = v35((uint64_t)v34, 1, v14);
  sub_10001DAB4((uint64_t)v34, (uint64_t *)&unk_101648A20);
  if (v36 != 1) {
    goto LABEL_7;
  }
  id v37 = (id)MobileGestalt_get_current_device();
  if (!v37)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v38 = v37;
  id v39 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v39)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  SystemVersionNumber.init(string:)();
  if (v35((uint64_t)v29, 1, v14) == 1)
  {

    return sub_10001DAB4((uint64_t)v29, (uint64_t *)&unk_101648A20);
  }
  uint64_t v40 = v91;
  uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
  v41(v93, v29, v14);
  int v42 = 0;
LABEL_9:
  uint64_t v43 = (uint64_t)v92;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v92, 1, 1, v14);
  if (v42)
  {
    sub_10001DAB4(v43, (uint64_t *)&unk_101648A20);
    sub_10001D074(v80, v43, (uint64_t *)&unk_101648A20);
  }
  else
  {
    NSString v44 = String._bridgeToObjectiveC()();
    id v45 = [v90 stringForKey:v44];

    if (v45)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = (uint64_t)v79;
      uint64_t v43 = (uint64_t)v92;
      SystemVersionNumber.init(string:)();
      sub_10001DAB4(v43, (uint64_t *)&unk_101648A20);
      sub_100567E88(v46, v43);
    }
  }
  sub_10001D074(v43, (uint64_t)v24, (uint64_t *)&unk_101648A20);
  if (v35((uint64_t)v24, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101648A20);
    sub_10055B77C();
    uint64_t v47 = v86;
    uint64_t v48 = v91;
    uint64_t v49 = v88;
    if (v42) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v48 = v91;
    uint64_t v50 = (uint64_t)v81;
    v41((uint64_t)v81, v24, v14);
    sub_100567E40(&qword_101648A60, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v49 = v88;
    if ((v51 & 1) == 0) {
      sub_10055BB84(v50, v93);
    }
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v14);
    uint64_t v47 = v86;
    if (v42) {
      goto LABEL_20;
    }
  }
  SystemVersionNumber.description.getter();
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v53 = String._bridgeToObjectiveC()();
  [v90 setValue:v52 forKey:v53];

LABEL_20:
  uint64_t v54 = v84;
  sub_100F2BEB0(v84);
  id v55 = [v82 standardUserDefaults];
  NSString v56 = String._bridgeToObjectiveC()();
  id v57 = [v55 stringForKey:v56];

  if (v57)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v58 = v85;
  }
  else
  {
    uint64_t v58 = v85;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v49, 1, 1, v47);
  }
  uint64_t v59 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v89, v54, v47);
  uint64_t v60 = v83;
  sub_10001D074(v49, v83, &qword_101638CF0);
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v60, 1, v47);
  long long v62 = v92;
  if (v61 == 1)
  {
    swift_retain();
    sub_10001DAB4(v60, &qword_101638CF0);
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100010324(v63, (uint64_t)qword_10170F250);
    long long v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No lastLaunchBootSessionUUID on record", v66, 2u);
      swift_slowDealloc();
    }

    uint64_t v67 = v89;
    sub_1005657C4();
    swift_release();

    uint64_t v68 = *(void (**)(char *, uint64_t))(v58 + 8);
    v68(v67, v47);
    v68((char *)v54, v47);
    sub_10001DAB4(v49, &qword_101638CF0);
    uint64_t v69 = (uint64_t)v92;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v59, v60, v47);
    sub_100567E40((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    uint64_t v70 = v59;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      swift_release();
      uint64_t v71 = *(void (**)(char *, uint64_t))(v58 + 8);
      v71(v89, v47);
      if (qword_101637448 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_100010324(v72, (uint64_t)qword_10170F250);
      unint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.default.getter();
      BOOL v75 = os_log_type_enabled(v73, v74);
      uint64_t v48 = v91;
      if (v75)
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "This is *NOT* the first run since reboot", v76, 2u);
        swift_slowDealloc();
      }

      v71(v87, v47);
      long long v62 = v92;
    }
    else
    {
      uint64_t v77 = v89;
      sub_1005657C4();

      uint64_t v71 = *(void (**)(char *, uint64_t))(v58 + 8);
      v71(v70, v47);
      swift_release();
      v71(v77, v47);
      uint64_t v48 = v91;
    }
    v71((char *)v54, v47);
    sub_10001DAB4(v88, &qword_101638CF0);
    uint64_t v69 = (uint64_t)v62;
  }
  sub_10001DAB4(v69, (uint64_t *)&unk_101648A20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v93, v14);
}

uint64_t sub_10055E5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  sub_10000588C(&qword_10164DBB0);
  v7[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  v7[19] = v8;
  v7[20] = *(void *)(v8 - 8);
  v7[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  v7[22] = v9;
  v7[23] = *(void *)(v9 - 8);
  v7[24] = swift_task_alloc();
  return _swift_task_switch(sub_10055E710, 0, 0);
}

uint64_t sub_10055E710()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[15];
  Transaction.capture()();
  uint64_t v2 = *(void *)(v1 + 16);
  v0[25] = v2;
  if (v2)
  {
    uint64_t v3 = v0[15];
    v0[27] = 0;
    uint64_t v4 = *(void *)(v3 + 32);
    v0[28] = v4;
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = qword_101636B78;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DFE8);
    swift_unknownObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t ObjectType = swift_getObjectType();
      v0[13] = v4;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 8))(ObjectType);
      *(void *)(v10 + 4) = sub_1008FA0F0(v12, v13, &v29);
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting service: %{public}s", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t v16 = v0[17];
    uint64_t v15 = v0[18];
    uint64_t v17 = type metadata accessor for TaskPriority();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v15, 1, 1, v17);
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = 0;
    v19[3] = 0;
    void v19[4] = v4;
    v19[5] = v5;
    v19[6] = v16;
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17);
    swift_unknownObjectRetain();
    uint64_t v20 = v0[18];
    if (v16 == 1)
    {
      sub_10001DAB4(v0[18], &qword_10164DBB0);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
      if (v19[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v22 = v23;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = &unk_101648A50;
    *(void *)(v24 + 24) = v19;
    if (v22 | v21)
    {
      v0[8] = 0;
      v0[9] = 0;
      v0[10] = v21;
      v0[11] = v22;
    }
    v0[29] = swift_task_create();
    uint64_t v25 = swift_getObjectType();
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 24) + **(int **)(v5 + 24));
    uint64_t v26 = (void *)swift_task_alloc();
    v0[30] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_10055EF90;
    return v28(v25, v5);
  }
  else
  {
    type metadata accessor for DarwinNotificationManager();
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[26] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10055EC58;
    return unsafeBlocking<A>(_:)(v14, sub_10055F9E0, 0, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10055EC58()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10055ED54, 0, 0);
}

uint64_t sub_10055ED54()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *((_OWORD *)v0 + 8);
  v0[6] = sub_100567E38;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015CBAC8;
  uint64_t v6 = _Block_copy(v0 + 2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[12] = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10055EF90()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10055F08C, 0, 0);
}

uint64_t sub_10055F08C()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[27] + 1;
  Task.cancel()();
  swift_unknownObjectRelease();
  swift_release();
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DarwinNotificationManager();
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[26] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10055EC58;
    return unsafeBlocking<A>(_:)(v3, sub_10055F9E0, 0, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v4 = v0[27] + 1;
    v0[27] = v4;
    uint64_t v5 = v0[15] + 16 * v4;
    uint64_t v6 = *(void *)(v5 + 32);
    v0[28] = v6;
    uint64_t v7 = *(void *)(v5 + 40);
    uint64_t v8 = qword_101636B78;
    swift_unknownObjectRetain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DFE8);
    swift_unknownObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t ObjectType = swift_getObjectType();
      v0[13] = v6;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 8))(ObjectType);
      *(void *)(v12 + 4) = sub_1008FA0F0(v14, v15, &v30);
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting service: %{public}s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    uint64_t v17 = v0[17];
    uint64_t v16 = v0[18];
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = 0;
    v20[3] = 0;
    v20[4] = v6;
    v20[5] = v7;
    v20[6] = v17;
    LODWORD(v17) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_unknownObjectRetain();
    uint64_t v21 = v0[18];
    if (v17 == 1)
    {
      sub_10001DAB4(v0[18], &qword_10164DBB0);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
      if (v20[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v23 = v24;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = &unk_101648A50;
    *(void *)(v25 + 24) = v20;
    if (v23 | v22)
    {
      v0[8] = 0;
      v0[9] = 0;
      v0[10] = v22;
      v0[11] = v23;
    }
    v0[29] = swift_task_create();
    uint64_t v26 = swift_getObjectType();
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
    uint64_t v27 = (void *)swift_task_alloc();
    v0[30] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10055EF90;
    return v29(v26, v7);
  }
}

uint64_t sub_10055F60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[6] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10055F6AC;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_10055F6AC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100568318;
  }
  else
  {
    uint64_t v1 = sub_10055F7C4;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10055F7C4()
{
  unint64_t v13 = v0;
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    if (qword_101636B78 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170DFE8);
    swift_unknownObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v5 = v0[4];
      uint64_t v4 = v0[5];
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t ObjectType = swift_getObjectType();
      v0[2] = v5;
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 8))(ObjectType);
      v0[3] = sub_1008FA0F0(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Slow service startup: %{public}s!", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10055F9E0()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  return sub_10131B248();
}

void sub_10055FA38(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016575E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(a1 + 56) = 1;
  if (qword_101636B78 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = sub_100010324(v6, (uint64_t)qword_10170DFE8);
  swift_retain();
  v22[1] = v7;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    swift_beginAccess();
    uint64_t v22[5] = *(void *)(*(void *)(a1 + 48) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "All services started; notifying %ld continuations.", v10, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  os_log_type_t v11 = (void *)(a1 + 48);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    v22[0] = v11;
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v15 = v3 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = v12 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v18 = *(void *)(v15 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v14(v5, v17, v2);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v5, v2);
      v17 += v18;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    os_log_type_t v11 = (void *)v22[0];
  }
  *os_log_type_t v11 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "All services started; all continuations removed after notify.",
      v21,
      2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10055FD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016575E0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  v18[1] = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  *(void *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18[0];
  void aBlock[4] = sub_100565718;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CB8E8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v20);
  return swift_release();
}

uint64_t sub_1005600F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016575E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 56)) {
    return CheckedContinuation.resume(returning:)();
  }
  if (qword_101636B78 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170DFE8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Startup in progress; appending continuation.", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v13 = (unint64_t *)(a1 + 48);
  swift_beginAccess();
  unint64_t v14 = *(void *)(a1 + 48);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 48) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v14 = sub_100A70C44(0, *(void *)(v14 + 16) + 1, 1, v14);
    unint64_t *v13 = v14;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    unint64_t v14 = sub_100A70C44(v16 > 1, v17 + 1, 1, v14);
    unint64_t *v13 = v14;
  }
  *(void *)(v14 + 16) = v17 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v17, v7, v4);
  return swift_endAccess();
}

uint64_t sub_100560360()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v403 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v403 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v403 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v429 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v432 = (char *)&v403 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (unint64_t *)((char *)&v403 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = *(void **)(v1 + 24);
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    uint64_t v428 = (uint64_t)v7;
    v405 = v4;
    type metadata accessor for FMIPStateManager();
    swift_allocObject();
    uint64_t v13 = (uint64_t)sub_10049682C();
    if (qword_101636CD8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_1000A645C(v13, 0, 0);
  type metadata accessor for FinderStateManager(0);
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = sub_1002776CC(v19);
  type metadata accessor for Cryptor();
  swift_allocObject();
  v417 = sub_1010E9EA8(0x74536E6F63616542, 0xEE0079654B65726FLL, 0x74536E6F63616542, 0xEB0000000065726FLL);
  uint64_t v21 = type metadata accessor for FinderStateObserver();
  swift_allocObject();
  uint64_t v22 = swift_retain();
  uint64_t v424 = v20;
  uint64_t v23 = sub_100866C78(v22);
  swift_beginAccess();
  uint64_t v24 = *(void **)(v1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 16) = v24;
  uint64_t v425 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = sub_100A70C30(0, v24[2] + 1, 1, v24);
    *(void *)(v1 + 16) = v24;
  }
  v431 = (void *)(v1 + 16);
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v423 = v1;
  v426 = v10;
  v427 = (void (*)(void))v5;
  uint64_t v422 = v11;
  if (v27 >= v26 >> 1)
  {
    uint64_t v24 = sub_100A70C30((void *)(v26 > 1), v27 + 1, 1, v24);
    void *v431 = v24;
  }
  *((void *)&v437 + 1) = v21;
  v438 = (char **)&off_1015D8650;
  *(void *)&long long v436 = v23;
  void v24[2] = v27 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v24[5 * v27 + 4]);
  swift_endAccess();
  *((void *)&v437 + 1) = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v438 = (char **)&off_1015AFCD0;
  uint64_t MyNetworkPublisherService = type metadata accessor for FindMyNetworkPublisherService();
  uint64_t v29 = (void *)swift_allocObject();
  uint64_t v30 = sub_1000BD078((uint64_t)&v436, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v30);
  _s15KnownRecordTypeOwCP();
  uint64_t v31 = sub_100566C9C(v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  uint64_t v32 = (void **)v431;
  swift_beginAccess();
  uint64_t v33 = *v32;
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  char *v32 = v33;
  if ((v34 & 1) == 0)
  {
    uint64_t v33 = sub_100A70C30(0, v33[2] + 1, 1, v33);
    void *v431 = v33;
  }
  unint64_t v36 = v33[2];
  unint64_t v35 = v33[3];
  if (v36 >= v35 >> 1)
  {
    uint64_t v33 = sub_100A70C30((void *)(v35 > 1), v36 + 1, 1, v33);
    void *v431 = v33;
  }
  *((void *)&v437 + 1) = MyNetworkPublisherService;
  v438 = (char **)&off_1015DC798;
  *(void *)&long long v436 = v31;
  void v33[2] = v36 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v33[5 * v36 + 4]);
  swift_endAccess();
  uint64_t v37 = type metadata accessor for ObservationPruneSchedulerService();
  uint64_t v38 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v38[14] = 0xD000000000000020;
  v38[15] = 0x8000000101401C10;
  v38[16] = 0;
  id v39 = (void **)v431;
  swift_beginAccess();
  uint64_t v40 = *v39;
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  *id v39 = v40;
  if ((v41 & 1) == 0)
  {
    uint64_t v40 = sub_100A70C30(0, v40[2] + 1, 1, v40);
    void *v431 = v40;
  }
  unint64_t v43 = v40[2];
  unint64_t v42 = v40[3];
  if (v43 >= v42 >> 1)
  {
    uint64_t v40 = sub_100A70C30((void *)(v42 > 1), v43 + 1, 1, v40);
    void *v431 = v40;
  }
  *((void *)&v437 + 1) = v37;
  v438 = (char **)&off_1015D15A8;
  *(void *)&long long v436 = v38;
  _OWORD v40[2] = v43 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v40[5 * v43 + 4]);
  swift_endAccess();
  *((void *)&v437 + 1) = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v438 = (char **)&off_1015AFCD0;
  uint64_t MyNetworkPublishActivityService = type metadata accessor for FindMyNetworkPublishActivityService();
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = sub_1000BD078((uint64_t)&v436, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v46);
  _s15KnownRecordTypeOwCP();
  v434 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v435 = &off_1015AFCD0;
  swift_defaultActor_initialize();
  *(void *)(v45 + 112) = 0xD000000000000023;
  *(void *)(v45 + 120) = 0x8000000101401C40;
  *(void *)(v45 + 168) = _swiftEmptyDictionarySingleton;
  *(unsigned char *)(v45 + 176) = 1;
  sub_10001CEB0(&v433, v45 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  uint64_t v47 = (void **)v431;
  swift_beginAccess();
  uint64_t v48 = *v47;
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  char *v47 = v48;
  if ((v49 & 1) == 0)
  {
    uint64_t v48 = sub_100A70C30(0, v48[2] + 1, 1, v48);
    void *v431 = v48;
  }
  unint64_t v51 = v48[2];
  unint64_t v50 = v48[3];
  if (v51 >= v50 >> 1)
  {
    uint64_t v48 = sub_100A70C30((void *)(v50 > 1), v51 + 1, 1, v48);
    void *v431 = v48;
  }
  *((void *)&v437 + 1) = MyNetworkPublishActivityService;
  v438 = (char **)&off_1015A7260;
  *(void *)&long long v436 = v45;
  void v48[2] = v51 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v48[5 * v51 + 4]);
  swift_endAccess();
  uint64_t v52 = type metadata accessor for AdvertisementCacheService();
  swift_allocObject();
  NSString v53 = sub_1001DBC08();
  uint64_t v54 = (void **)v431;
  swift_beginAccess();
  id v55 = *v54;
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v54 = v55;
  if ((v56 & 1) == 0)
  {
    id v55 = sub_100A70C30(0, v55[2] + 1, 1, v55);
    void *v431 = v55;
  }
  uint64_t v57 = v423;
  uint64_t v58 = v422;
  unint64_t v60 = v55[2];
  unint64_t v59 = v55[3];
  if (v60 >= v59 >> 1)
  {
    id v55 = sub_100A70C30((void *)(v59 > 1), v60 + 1, 1, v55);
    void *v431 = v55;
  }
  *((void *)&v437 + 1) = v52;
  v438 = (char **)&off_1015B3788;
  *(void *)&long long v436 = v53;
  void v55[2] = v60 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v55[5 * v60 + 4]);
  swift_endAccess();
  uint64_t v61 = type metadata accessor for SchedulerService();
  swift_allocObject();
  long long v62 = sub_10086FFB8();
  uint64_t v63 = (void **)v431;
  swift_beginAccess();
  long long v64 = *v63;
  char v65 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v63 = v64;
  if ((v65 & 1) == 0)
  {
    long long v64 = sub_100A70C30(0, v64[2] + 1, 1, v64);
    void *v431 = v64;
  }
  unint64_t v67 = v64[2];
  unint64_t v66 = v64[3];
  if (v67 >= v66 >> 1)
  {
    long long v64 = sub_100A70C30((void *)(v66 > 1), v67 + 1, 1, v64);
    void *v431 = v64;
  }
  *((void *)&v437 + 1) = v61;
  v438 = (char **)&off_1015D8948;
  *(void *)&long long v436 = v62;
  v64[2] = v67 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v64[5 * v67 + 4]);
  swift_endAccess();
  uint64_t v68 = type metadata accessor for FileAttributionService();
  uint64_t v69 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v69 + 112) = 0xD000000000000016;
  *(void *)(v69 + 120) = 0x8000000101401C70;
  uint64_t v70 = (void **)v431;
  swift_beginAccess();
  uint64_t v71 = *v70;
  char v72 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v70 = v71;
  if ((v72 & 1) == 0)
  {
    uint64_t v71 = sub_100A70C30(0, v71[2] + 1, 1, v71);
    void *v431 = v71;
  }
  unint64_t v74 = v71[2];
  unint64_t v73 = v71[3];
  if (v74 >= v73 >> 1)
  {
    uint64_t v71 = sub_100A70C30((void *)(v73 > 1), v74 + 1, 1, v71);
    void *v431 = v71;
  }
  *((void *)&v437 + 1) = v68;
  v438 = (char **)&off_1015FC530;
  *(void *)&long long v436 = v69;
  v71[2] = v74 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v71[5 * v74 + 4]);
  swift_endAccess();
  type metadata accessor for AppActivity();
  swift_allocObject();
  uint64_t v75 = sub_100A6AF98();
  type metadata accessor for LocalPairingMonitor();
  uint64_t v76 = swift_allocObject();
  sub_10000588C(&qword_1016488B8);
  swift_allocObject();
  uint64_t v77 = PassthroughSubject.init()();
  *(void *)(v76 + 16) = v77;
  *(void *)&long long v436 = v77;
  sub_100062734(&qword_1016488C0, &qword_1016488B8);
  *(void *)(v76 + 24) = Publisher.eraseToAnyPublisher()();
  type metadata accessor for CloudKitIDSUpdateManager();
  swift_allocObject();
  uint64_t v78 = swift_retain();
  uint64_t v430 = v76;
  dispatch_group_t v79 = sub_1003D6A8C(v78);
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v425;
  *(void *)(v80 + 24) = v57;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  type metadata accessor for CloudStorageService();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v418 = 0;
  uint64_t v81 = v436;
  unint64_t v421 = sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v429 + 104))(v432, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v58);
  swift_retain();
  uint64_t v82 = (uint64_t)v417;
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v436 = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v83 = (uint64_t)v79;
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v84 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v85 = type metadata accessor for BeaconStore(0);
  swift_allocObject();
  uint64_t v416 = v75;
  uint64_t v86 = v83;
  uint64_t v87 = (char *)sub_100AB2C98(v82, v75, v83, v84);
  uint64_t v413 = v81;
  *((void *)v87 + 10) = v81;
  swift_release();
  uint64_t v88 = (void **)v431;
  swift_beginAccess();
  long long v89 = *v88;
  v432 = v87;
  swift_retain();
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v89;
  if ((v90 & 1) == 0)
  {
    long long v89 = sub_100A70C30(0, v89[2] + 1, 1, v89);
    *uint64_t v88 = v89;
  }
  unint64_t v92 = v89[2];
  unint64_t v91 = v89[3];
  if (v92 >= v91 >> 1)
  {
    long long v89 = sub_100A70C30((void *)(v91 > 1), v92 + 1, 1, v89);
    *uint64_t v88 = v89;
  }
  *((void *)&v437 + 1) = v85;
  v438 = (char **)&off_1015E7330;
  *(void *)&long long v436 = v432;
  v89[2] = v92 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v89[5 * v92 + 4]);
  swift_endAccess();
  uint64_t v93 = type metadata accessor for BeaconStoreActor();
  swift_allocObject();
  uint64_t v94 = swift_retain();
  uint64_t v95 = sub_100E579B8(v94);
  swift_beginAccess();
  uint64_t v96 = *v88;
  swift_retain();
  char v97 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v96;
  if ((v97 & 1) == 0)
  {
    uint64_t v96 = sub_100A70C30(0, v96[2] + 1, 1, v96);
    *uint64_t v88 = v96;
  }
  unint64_t v99 = v96[2];
  unint64_t v98 = v96[3];
  if (v99 >= v98 >> 1)
  {
    uint64_t v96 = sub_100A70C30((void *)(v98 > 1), v99 + 1, 1, v96);
    *uint64_t v88 = v96;
  }
  *((void *)&v437 + 1) = v93;
  v438 = (char **)&off_1015F8E18;
  *(void *)&long long v436 = v95;
  v96[2] = v99 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v96[5 * v99 + 4]);
  swift_endAccess();
  uint64_t v100 = swift_retain();
  sub_100277170(v100);
  uint64_t v101 = type metadata accessor for OwnDevicePublishActivityService();
  uint64_t v102 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v102 + 112) = 0xD00000000000001FLL;
  *(void *)(v102 + 120) = 0x8000000101401D30;
  uint64_t v103 = v102 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription;
  uint64_t v104 = sub_10000588C((uint64_t *)&unk_1016488F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 1, 1, v104);
  *(void *)(v102 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity) = 0;
  swift_beginAccess();
  uint64_t v105 = *v88;
  char v106 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v105;
  if ((v106 & 1) == 0)
  {
    uint64_t v105 = sub_100A70C30(0, v105[2] + 1, 1, v105);
    *uint64_t v88 = v105;
  }
  unint64_t v108 = v105[2];
  unint64_t v107 = v105[3];
  if (v108 >= v107 >> 1)
  {
    uint64_t v105 = sub_100A70C30((void *)(v107 > 1), v108 + 1, 1, v105);
    *uint64_t v88 = v105;
  }
  *((void *)&v437 + 1) = v101;
  v438 = (char **)&off_1015FC420;
  *(void *)&long long v436 = v102;
  _OWORD v105[2] = v108 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v105[5 * v108 + 4]);
  swift_endAccess();
  uint64_t v109 = type metadata accessor for CompanionPublishActivity();
  uint64_t v110 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v110 + 112) = 0xD000000000000018;
  *(void *)(v110 + 120) = 0x8000000101401D50;
  swift_beginAccess();
  uint64_t v111 = *v88;
  char v112 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v111;
  if ((v112 & 1) == 0)
  {
    uint64_t v111 = sub_100A70C30(0, v111[2] + 1, 1, v111);
    *uint64_t v88 = v111;
  }
  unint64_t v114 = v111[2];
  unint64_t v113 = v111[3];
  if (v114 >= v113 >> 1)
  {
    uint64_t v111 = sub_100A70C30((void *)(v113 > 1), v114 + 1, 1, v111);
    *uint64_t v88 = v111;
  }
  *((void *)&v437 + 1) = v109;
  v438 = (char **)&off_1015BEFD0;
  *(void *)&long long v436 = v110;
  v111[2] = v114 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v111[5 * v114 + 4]);
  swift_endAccess();
  type metadata accessor for ObservationDatabase();
  swift_allocObject();
  uint64_t v115 = sub_1011F8458(0);
  uint64_t v116 = type metadata accessor for BeaconKeyService();
  long long v436 = 0u;
  long long v437 = 0u;
  v438 = 0;
  swift_allocObject();
  swift_retain_n();
  uint64_t v117 = sub_1009D00D0((uint64_t)&v436, v115);
  uint64_t v419 = v115;
  swift_release();
  swift_beginAccess();
  uint64_t v118 = *v88;
  char v119 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v118;
  if ((v119 & 1) == 0)
  {
    uint64_t v118 = sub_100A70C30(0, v118[2] + 1, 1, v118);
    *uint64_t v88 = v118;
  }
  unint64_t v121 = v118[2];
  unint64_t v120 = v118[3];
  if (v121 >= v120 >> 1)
  {
    uint64_t v118 = sub_100A70C30((void *)(v120 > 1), v121 + 1, 1, v118);
    *uint64_t v88 = v118;
  }
  *((void *)&v437 + 1) = v116;
  v438 = (char **)&off_1015E1810;
  *(void *)&long long v436 = v117;
  v118[2] = v121 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v118[5 * v121 + 4]);
  swift_endAccess();
  uint64_t v122 = type metadata accessor for DistributedNotificationService();
  swift_allocObject();
  uint64_t v123 = sub_100D0EBD0();
  swift_beginAccess();
  uint64_t v124 = *v88;
  char v125 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v124;
  uint64_t v404 = v116;
  if ((v125 & 1) == 0)
  {
    uint64_t v124 = sub_100A70C30(0, v124[2] + 1, 1, v124);
    *uint64_t v88 = v124;
  }
  unint64_t v127 = v124[2];
  unint64_t v126 = v124[3];
  if (v127 >= v126 >> 1)
  {
    uint64_t v124 = sub_100A70C30((void *)(v126 > 1), v127 + 1, 1, v124);
    *uint64_t v88 = v124;
  }
  *((void *)&v437 + 1) = v122;
  v438 = (char **)&off_1015F1CD8;
  *(void *)&long long v436 = v123;
  v124[2] = v127 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v124[5 * v127 + 4]);
  uint64_t found = type metadata accessor for NotifyWhenFoundManager();
  swift_allocObject();
  uint64_t v129 = sub_1002F5550();
  uint64_t v130 = *v88;
  char v131 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v130;
  if ((v131 & 1) == 0)
  {
    uint64_t v130 = sub_100A70C30(0, v130[2] + 1, 1, v130);
    *uint64_t v88 = v130;
  }
  unint64_t v133 = v130[2];
  unint64_t v132 = v130[3];
  uint64_t v422 = v86;
  if (v133 >= v132 >> 1)
  {
    uint64_t v130 = sub_100A70C30((void *)(v132 > 1), v133 + 1, 1, v130);
    *uint64_t v88 = v130;
  }
  *((void *)&v437 + 1) = found;
  v438 = &off_1015B8488;
  *(void *)&long long v436 = v129;
  v130[2] = v133 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v130[5 * v133 + 4]);
  swift_endAccess();
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v437 + 1) = My;
  uint64_t v428 = sub_100567E40((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  v438 = (char **)v428;
  uint64_t v135 = sub_10001D958((uint64_t *)&v436);
  uint64_t v136 = *(void *)(My - 8);
  uint64_t v137 = *(void (**)(void))(v136 + 104);
  LODWORD(v414) = enum case for Feature.FindMy.networkScalingImprovements(_:);
  uint64_t v429 = My;
  v426 = (char *)(v136 + 104);
  v427 = v137;
  v137(v135);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  v420 = v95;
  if (My)
  {
    uint64_t v138 = type metadata accessor for DeviceBeaconPayloadPublisher();
    swift_allocObject();
    uint64_t v139 = swift_retain();
    uint64_t v140 = sub_100871818(v139);
    swift_beginAccess();
    id v141 = *v88;
    swift_retain();
    char v142 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v141;
    if ((v142 & 1) == 0)
    {
      id v141 = sub_100A70C30(0, v141[2] + 1, 1, v141);
      *uint64_t v88 = v141;
    }
    unint64_t v144 = v141[2];
    unint64_t v143 = v141[3];
    if (v144 >= v143 >> 1)
    {
      id v141 = sub_100A70C30((void *)(v143 > 1), v144 + 1, 1, v141);
      *uint64_t v88 = v141;
    }
    *((void *)&v437 + 1) = v138;
    v438 = (char **)&off_1015D8B68;
    *(void *)&long long v436 = v140;
    v141[2] = v144 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v141[5 * v144 + 4]);
    swift_endAccess();
    swift_release();
  }
  uint64_t v145 = type metadata accessor for DelegatedBeaconPayloadPublisher();
  swift_allocObject();
  uint64_t v146 = swift_retain();
  long long v147 = sub_1000120C4(v146);
  swift_beginAccess();
  uint64_t v148 = *v88;
  swift_retain();
  char v149 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v148;
  if ((v149 & 1) == 0)
  {
    uint64_t v148 = sub_100A70C30(0, v148[2] + 1, 1, v148);
    *uint64_t v88 = v148;
  }
  unint64_t v151 = v148[2];
  unint64_t v150 = v148[3];
  if (v151 >= v150 >> 1)
  {
    uint64_t v148 = sub_100A70C30((void *)(v150 > 1), v151 + 1, 1, v148);
    *uint64_t v88 = v148;
  }
  *((void *)&v437 + 1) = v145;
  v438 = (char **)&off_1015A6F80;
  *(void *)&long long v436 = v147;
  void v148[2] = v151 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v148[5 * v151 + 4]);
  swift_endAccess();
  uint64_t v152 = type metadata accessor for APSNotificationService();
  swift_allocObject();
  uint64_t v153 = sub_100E96394(0, 0);
  swift_beginAccess();
  BOOL v154 = *v88;
  char v155 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v154;
  if ((v155 & 1) == 0)
  {
    BOOL v154 = sub_100A70C30(0, v154[2] + 1, 1, v154);
    *uint64_t v88 = v154;
  }
  unint64_t v157 = v154[2];
  unint64_t v156 = v154[3];
  if (v157 >= v156 >> 1)
  {
    BOOL v154 = sub_100A70C30((void *)(v156 > 1), v157 + 1, 1, v154);
    *uint64_t v88 = v154;
  }
  *((void *)&v437 + 1) = v152;
  v438 = (char **)&off_1015F9E28;
  *(void *)&long long v436 = v153;
  v154[2] = v157 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v154[5 * v157 + 4]);
  swift_endAccess();
  uint64_t v158 = type metadata accessor for WildModeAssociationRecordsPublisher();
  swift_allocObject();
  uint64_t v159 = sub_100C0CF4C();
  swift_beginAccess();
  uint64_t v160 = *v88;
  swift_retain();
  char v161 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v160;
  if ((v161 & 1) == 0)
  {
    uint64_t v160 = sub_100A70C30(0, v160[2] + 1, 1, v160);
    *uint64_t v88 = v160;
  }
  unint64_t v163 = v160[2];
  unint64_t v162 = v160[3];
  if (v163 >= v162 >> 1)
  {
    uint64_t v160 = sub_100A70C30((void *)(v162 > 1), v163 + 1, 1, v160);
    *uint64_t v88 = v160;
  }
  *((void *)&v437 + 1) = v158;
  v438 = (char **)&off_1015EDA88;
  *(void *)&long long v436 = v159;
  v160[2] = v163 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v160[5 * v163 + 4]);
  swift_endAccess();
  uint64_t v164 = type metadata accessor for BatteryLevelService();
  uint64_t v165 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  unint64_t v403 = 0xD000000000000013;
  v165[14] = 0xD000000000000013;
  v165[15] = 0x8000000101401D70;
  v165[16] = _swiftEmptyDictionarySingleton;
  swift_beginAccess();
  uint64_t v166 = *v88;
  char v167 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v166;
  v411 = v159;
  if ((v167 & 1) == 0)
  {
    uint64_t v166 = sub_100A70C30(0, v166[2] + 1, 1, v166);
    *uint64_t v88 = v166;
  }
  unint64_t v169 = v166[2];
  unint64_t v168 = v166[3];
  v412 = v147;
  if (v169 >= v168 >> 1)
  {
    uint64_t v166 = sub_100A70C30((void *)(v168 > 1), v169 + 1, 1, v166);
    *uint64_t v88 = v166;
  }
  *((void *)&v437 + 1) = v164;
  v438 = (char **)&off_101603CF8;
  *(void *)&long long v436 = v165;
  v166[2] = v169 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v166[5 * v169 + 4]);
  swift_endAccess();
  id v170 = objc_allocWithZone((Class)type metadata accessor for TagCommandManager());
  uint64_t v171 = (uint64_t)v432;
  uint64_t v172 = swift_retain();
  id v173 = sub_1008D4D8C(v172, (uint64_t)sub_100564F60, 0);
  swift_release();
  type metadata accessor for BluetoothCommunicationCoordinator();
  swift_allocObject();
  uint64_t v174 = sub_1011CED9C();
  type metadata accessor for AccessoryMetadataManager();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v175 = sub_1002F81B4(v171, (uint64_t)v174);
  uint64_t v176 = type metadata accessor for BeaconManagerService();
  swift_allocObject();
  uint64_t v177 = v425;
  swift_retain();
  uint64_t v178 = v430;
  swift_retain();
  uint64_t v179 = v416;
  swift_retain();
  swift_retain();
  swift_retain();
  id v406 = v173;
  swift_retain();
  unint64_t v421 = (unint64_t)v174;
  v415 = v175;
  uint64_t v180 = sub_100A4745C(v171, v177, v179, v178, v174, v173, v175);
  *((void *)&v437 + 1) = v176;
  v438 = (char **)&off_1015E5250;
  *(void *)&long long v436 = v180;
  type metadata accessor for BeaconSharingManager();
  uint64_t v181 = swift_allocObject();
  uint64_t v182 = sub_1000BD078((uint64_t)&v436, v176);
  __chkstk_darwin(v182);
  uint64_t v184 = (uint64_t *)((char *)&v403 - ((v183 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v186 = *(void (**)(uint64_t *))(v185 + 16);
  uint64_t v408 = v176;
  v186(v184);
  uint64_t v187 = *v184;
  swift_retain_n();
  swift_retain();
  uint64_t v188 = v422;
  swift_retain();
  swift_retain();
  uint64_t v189 = sub_100565B54(v187, v171, v177, v188, v181);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  swift_release();
  uint64_t v190 = v429;
  *((void *)&v437 + 1) = v429;
  v438 = (char **)v428;
  Swift::Int v191 = sub_10001D958((uint64_t *)&v436);
  ((void (*)(uint64_t *, void, uint64_t))v427)(v191, v414, v190);
  LOBYTE(v181) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  uint64_t v192 = v418;
  if (v181)
  {
    uint64_t v193 = *(void *)(v189 + 24);
    uint64_t v194 = qword_101636C08;
    swift_retain();
    if (v194 != -1) {
      swift_once();
    }
    *(void *)(qword_10170E150 + 16) = v193;
    swift_release();
  }
  if (*(void *)(v180 + 40))
  {
    sub_1003A4778();
    uint64_t v400 = swift_allocError();
    unsigned char *v401 = 8;
    swift_willThrow();
LABEL_209:
    *(void *)&long long v436 = 0;
    *((void *)&v436 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v402._countAndFlagsBits = 0xD000000000000027;
    v402._object = (void *)0x8000000101401D90;
    String.append(_:)(v402);
    *(void *)&long long v433 = v400;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(v180 + 40) = v189;
  uint64_t v195 = *(void *)(v189 + 328);
  swift_retain();
  *(void *)&long long v436 = v195;
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_101648908);
  sub_100062734(&qword_101648910, &qword_101648908);
  uint64_t v196 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v180 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_triggerFamilyUpdateSubscription) = v196;
  swift_release();
  sub_1003D6D80(v189);
  if (v192)
  {
    uint64_t v400 = v192;
    goto LABEL_209;
  }
  uint64_t v197 = type metadata accessor for OwnerCommandManager();
  swift_allocObject();
  uint64_t v198 = (uint64_t)v432;
  swift_retain();
  uint64_t v199 = v421;
  swift_retain();
  uint64_t v200 = sub_10063D534(v198, v199, 0);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v201 = *v88;
  swift_retain();
  char v202 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v201;
  if ((v202 & 1) == 0)
  {
    uint64_t v201 = sub_100A70C30(0, v201[2] + 1, 1, v201);
    *uint64_t v88 = v201;
  }
  unint64_t v204 = v201[2];
  unint64_t v203 = v201[3];
  if (v204 >= v203 >> 1)
  {
    uint64_t v201 = sub_100A70C30((void *)(v203 > 1), v204 + 1, 1, v201);
    *uint64_t v88 = v201;
  }
  *((void *)&v437 + 1) = v197;
  v438 = (char **)&off_1015CE120;
  v410 = v200;
  *(void *)&long long v436 = v200;
  v201[2] = v204 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v201[5 * v204 + 4]);
  swift_endAccess();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  long long v205 = (objc_class *)type metadata accessor for CentralManager();
  id v206 = objc_allocWithZone(v205);
  uint64_t v207 = (void *)sub_101321E18(1, 0, 15.0);
  if (qword_101637688 != -1) {
    swift_once();
  }
  uint64_t v208 = type metadata accessor for Logger();
  sub_100010324(v208, (uint64_t)qword_10170F8A8);
  uint64_t v209 = v207;
  uint64_t v210 = Logger.logObject.getter();
  os_log_type_t v211 = static os_log_type_t.default.getter();
  BOOL v212 = os_log_type_enabled(v210, v211);
  uint64_t v414 = v180;
  uint64_t v418 = v189;
  if (v212)
  {
    uint64_t v213 = (uint8_t *)swift_slowAlloc();
    uint64_t v214 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v213 = 138412290;
    *(void *)&long long v436 = v209;
    uint64_t v215 = v205;
    uint64_t v216 = v209;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v214 = v209;

    long long v205 = v215;
    uint64_t v88 = (void **)v431;
    _os_log_impl((void *)&_mh_execute_header, v210, v211, "Shared CentralManager: %@", v213, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v180 = v414;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v210 = v209;
  }

  swift_beginAccess();
  long long v217 = *v88;
  uint64_t v218 = v209;
  char v219 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v217;
  if ((v219 & 1) == 0)
  {
    long long v217 = sub_100A70C30(0, v217[2] + 1, 1, v217);
    *uint64_t v88 = v217;
  }
  unint64_t v221 = v217[2];
  unint64_t v220 = v217[3];
  if (v221 >= v220 >> 1)
  {
    long long v217 = sub_100A70C30((void *)(v220 > 1), v221 + 1, 1, v217);
    *uint64_t v88 = v217;
  }
  *((void *)&v437 + 1) = v205;
  v438 = (char **)&off_101611598;
  *(void *)&long long v436 = v218;
  v217[2] = v221 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v217[5 * v221 + 4]);
  swift_endAccess();
  uint64_t UnlockService = type metadata accessor for FirstUnlockService();
  uint64_t v223 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v223 + 112) = 0xD000000000000012;
  *(void *)(v223 + 120) = 0x8000000101401DC0;
  *(void *)(v223 + 128) = _swiftEmptyArrayStorage;
  *(_DWORD *)(v223 + 136) = 0;
  swift_beginAccess();
  uint64_t v224 = *v88;
  char v225 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v224;
  v409 = v218;
  if ((v225 & 1) == 0)
  {
    uint64_t v224 = sub_100A70C30(0, v224[2] + 1, 1, v224);
    *uint64_t v88 = v224;
  }
  unint64_t v227 = v224[2];
  unint64_t v226 = v224[3];
  if (v227 >= v226 >> 1)
  {
    uint64_t v224 = sub_100A70C30((void *)(v226 > 1), v227 + 1, 1, v224);
    *uint64_t v88 = v224;
  }
  *((void *)&v437 + 1) = UnlockService;
  v438 = &off_1015CDCC0;
  *(void *)&long long v436 = v223;
  v224[2] = v227 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v224[5 * v227 + 4]);
  swift_endAccess();
  *((void *)&v437 + 1) = v429;
  v438 = (char **)v428;
  uint64_t v228 = sub_10001D958((uint64_t *)&v436);
  unsigned int v407 = enum case for Feature.FindMy.itemSharing(_:);
  v427(v228);
  char v229 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  if (v229)
  {
    uint64_t v230 = type metadata accessor for FamilyCircleService();
    unint64_t v231 = (void *)swift_allocObject();
    swift_defaultActor_initialize();
    v231[14] = v403;
    v231[15] = 0x80000001013F6A00;
    v231[16] = 0;
    v231[17] = _swiftEmptyArrayStorage;
    v231[18] = 0;
    v231[19] = 0;
    swift_beginAccess();
    uint64_t v232 = *v88;
    char v233 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v232;
    if ((v233 & 1) == 0)
    {
      uint64_t v232 = sub_100A70C30(0, v232[2] + 1, 1, v232);
      *uint64_t v88 = v232;
    }
    unint64_t v235 = v232[2];
    unint64_t v234 = v232[3];
    if (v235 >= v234 >> 1)
    {
      uint64_t v232 = sub_100A70C30((void *)(v234 > 1), v235 + 1, 1, v232);
      *uint64_t v88 = v232;
    }
    *((void *)&v437 + 1) = v230;
    v438 = (char **)&off_1015F1390;
    *(void *)&long long v436 = v231;
    v232[2] = v235 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v232[5 * v235 + 4]);
    swift_endAccess();
    uint64_t v236 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
    swift_allocObject();
    unint64_t v237 = sub_100CCE2AC();
    swift_beginAccess();
    uint64_t v238 = *v88;
    char v239 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v238;
    if ((v239 & 1) == 0)
    {
      uint64_t v238 = sub_100A70C30(0, v238[2] + 1, 1, v238);
      *uint64_t v88 = v238;
    }
    unint64_t v241 = v238[2];
    unint64_t v240 = v238[3];
    if (v241 >= v240 >> 1)
    {
      uint64_t v238 = sub_100A70C30((void *)(v240 > 1), v241 + 1, 1, v238);
      *uint64_t v88 = v238;
    }
    *((void *)&v437 + 1) = v236;
    v438 = (char **)&off_1015F0BF8;
    *(void *)&long long v436 = v237;
    v238[2] = v241 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v238[5 * v241 + 4]);
    swift_endAccess();
    uint64_t v242 = type metadata accessor for PeerTrustService();
    unint64_t v243 = (void *)swift_allocObject();
    swift_defaultActor_initialize();
    v243[14] = 0xD000000000000010;
    v243[15] = 0x80000001013F89D0;
    v243[16] = 0;
    uint64_t v244 = sub_100567E40(&qword_101648958, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
    type metadata accessor for PeerTrustMessageRouter();
    uint64_t v245 = swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    *(void *)(v245 + 112) = v243;
    *(void *)(v245 + 120) = v244;
    v243[16] = v245;
    swift_release();
    swift_beginAccess();
    v246 = *v88;
    char v247 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v246;
    if ((v247 & 1) == 0)
    {
      v246 = sub_100A70C30(0, v246[2] + 1, 1, v246);
      *uint64_t v88 = v246;
    }
    unint64_t v249 = v246[2];
    unint64_t v248 = v246[3];
    if (v249 >= v248 >> 1)
    {
      v246 = sub_100A70C30((void *)(v248 > 1), v249 + 1, 1, v246);
      *uint64_t v88 = v246;
    }
    *((void *)&v437 + 1) = v242;
    v438 = (char **)&off_1015FA080;
    *(void *)&long long v436 = v243;
    v246[2] = v249 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v246[5 * v249 + 4]);
    swift_endAccess();
    uint64_t v250 = type metadata accessor for CircleTrustService();
    unint64_t v251 = (void *)swift_allocObject();
    swift_defaultActor_initialize();
    v251[14] = 0xD000000000000012;
    v251[15] = 0x80000001013F3C60;
    v251[16] = 0;
    type metadata accessor for WorkItemQueue();
    UUID.init()();
    v251[17] = WorkItemQueue.__allocating_init(name:identifier:)();
    v251[18] = 0;
    swift_beginAccess();
    long long v252 = *v88;
    char v253 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v252;
    if ((v253 & 1) == 0)
    {
      long long v252 = sub_100A70C30(0, v252[2] + 1, 1, v252);
      *uint64_t v88 = v252;
    }
    unint64_t v255 = v252[2];
    unint64_t v254 = v252[3];
    if (v255 >= v254 >> 1)
    {
      long long v252 = sub_100A70C30((void *)(v254 > 1), v255 + 1, 1, v252);
      *uint64_t v88 = v252;
    }
    *((void *)&v437 + 1) = v250;
    v438 = (char **)&off_1015F0FE8;
    *(void *)&long long v436 = v251;
    v252[2] = v255 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v252[5 * v255 + 4]);
    swift_endAccess();
  }
  uint64_t v256 = v429;
  *((void *)&v437 + 1) = v429;
  v438 = (char **)v428;
  v257 = sub_10001D958((uint64_t *)&v436);
  uint64_t v258 = enum case for Feature.FindMy.managedCBPeripheral(_:);
  ((void (*)(uint64_t *, void, uint64_t))v427)(v257, enum case for Feature.FindMy.managedCBPeripheral(_:), v256);
  LOBYTE(v256) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  if (v256)
  {
    uint64_t v259 = type metadata accessor for StandaloneBeaconService();
    unint64_t v260 = (void *)swift_allocObject();
    swift_defaultActor_initialize();
    v260[14] = 0xD000000000000017;
    v260[15] = 0x8000000101401E40;
    v260[17] = 0;
    v260[18] = 0;
    v260[19] = _swiftEmptyArrayStorage;
    type metadata accessor for StandaloneBeaconDatabase();
    swift_allocObject();
    v260[16] = sub_10086C700(0);
    swift_beginAccess();
    uint64_t v261 = *v88;
    char v262 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v261;
    if ((v262 & 1) == 0)
    {
      uint64_t v261 = sub_100A70C30(0, v261[2] + 1, 1, v261);
      *uint64_t v88 = v261;
    }
    uint64_t v263 = v404;
    unint64_t v265 = v261[2];
    unint64_t v264 = v261[3];
    if (v265 >= v264 >> 1)
    {
      uint64_t v261 = sub_100A70C30((void *)(v264 > 1), v265 + 1, 1, v261);
      *uint64_t v88 = v261;
    }
    *((void *)&v437 + 1) = v259;
    v438 = (char **)&off_1015EDE68;
    *(void *)&long long v436 = v260;
    v261[2] = v265 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v261[5 * v265 + 4]);
    swift_endAccess();
    v438 = 0;
    long long v436 = 0u;
    long long v437 = 0u;
    swift_allocObject();
    uint64_t v266 = v419;
    swift_retain_n();
    uint64_t v267 = sub_1009D00D0((uint64_t)&v436, v266);
    swift_release();
    swift_beginAccess();
    v268 = *v88;
    char v269 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v268;
    if ((v269 & 1) == 0)
    {
      v268 = sub_100A70C30(0, v268[2] + 1, 1, v268);
      *uint64_t v88 = v268;
    }
    unint64_t v271 = v268[2];
    unint64_t v270 = v268[3];
    if (v271 >= v270 >> 1)
    {
      v268 = sub_100A70C30((void *)(v270 > 1), v271 + 1, 1, v268);
      *uint64_t v88 = v268;
    }
    *((void *)&v437 + 1) = v263;
    v438 = (char **)&off_1015E1810;
    *(void *)&long long v436 = v267;
    v268[2] = v271 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v268[5 * v271 + 4]);
    swift_endAccess();
    uint64_t v272 = type metadata accessor for ObservationStoreService();
    uint64_t v273 = swift_allocObject();
    uint64_t v274 = v419;
    swift_retain();
    swift_defaultActor_initialize();
    *(void *)(v273 + 112) = 0xD000000000000017;
    *(void *)(v273 + 120) = 0x80000001013FB7A0;
    *(void *)(v273 + 136) = _swiftEmptyArrayStorage;
    *(void *)(v273 + 144) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v273 + 152) = xmmword_101354080;
    *(void *)(v273 + 128) = v274;
    swift_beginAccess();
    uint64_t v275 = *v88;
    char v276 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v275;
    if ((v276 & 1) == 0)
    {
      uint64_t v275 = sub_100A70C30(0, v275[2] + 1, 1, v275);
      *uint64_t v88 = v275;
    }
    unint64_t v278 = v275[2];
    unint64_t v277 = v275[3];
    if (v278 >= v277 >> 1)
    {
      uint64_t v275 = sub_100A70C30((void *)(v277 > 1), v278 + 1, 1, v275);
      *uint64_t v88 = v275;
    }
    *((void *)&v437 + 1) = v272;
    v438 = (char **)&off_101609300;
    *(void *)&long long v436 = v273;
    v275[2] = v278 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v275[5 * v278 + 4]);
    swift_endAccess();
    swift_release_n();
  }
  uint64_t v279 = v429;
  *((void *)&v437 + 1) = v429;
  v438 = (char **)v428;
  uint64_t v280 = sub_10001D958((uint64_t *)&v436);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v427)(v280, v258, v279);
  LOBYTE(v279) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  if (v279)
  {
    uint64_t v281 = type metadata accessor for Feature.Bluetooth();
    *((void *)&v437 + 1) = v281;
    v438 = (char **)sub_100567E40(&qword_101648950, (void (*)(uint64_t))&type metadata accessor for Feature.Bluetooth);
    uint64_t v282 = sub_10001D958((uint64_t *)&v436);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v281 - 8) + 104))(v282, enum case for Feature.Bluetooth.sentinel(_:), v281);
    LOBYTE(v281) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
    if (v281)
    {
      uint64_t v283 = type metadata accessor for LeechScanningService();
      uint64_t v284 = (void *)swift_allocObject();
      swift_defaultActor_initialize();
      v284[14] = 0xD000000000000014;
      v284[15] = 0x8000000101401E20;
      v284[16] = _swiftEmptyArrayStorage;
      swift_beginAccess();
      v285 = *v88;
      char v286 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v88 = v285;
      if ((v286 & 1) == 0)
      {
        v285 = sub_100A70C30(0, v285[2] + 1, 1, v285);
        *uint64_t v88 = v285;
      }
      unint64_t v288 = v285[2];
      unint64_t v287 = v285[3];
      if (v288 >= v287 >> 1)
      {
        v285 = sub_100A70C30((void *)(v287 > 1), v288 + 1, 1, v285);
        *uint64_t v88 = v285;
      }
      *((void *)&v437 + 1) = v283;
      v438 = (char **)&off_1015B26F8;
      *(void *)&long long v436 = v284;
      v285[2] = v288 + 1;
      sub_10001CEB0(&v436, (uint64_t)&v285[5 * v288 + 4]);
      swift_endAccess();
    }
  }
  uint64_t v289 = type metadata accessor for UnknownDiscoveryService();
  swift_allocObject();
  uint64_t v290 = (uint64_t)v432;
  swift_retain();
  uint64_t v291 = v421;
  swift_retain();
  id v292 = v406;
  uint64_t v293 = (uint64_t)v415;
  swift_retain();
  uint64_t v294 = sub_10041BBBC(v290, v291, (uint64_t)v292, v293);
  swift_beginAccess();
  uint64_t v295 = *v88;
  char v296 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v295;
  if ((v296 & 1) == 0)
  {
    uint64_t v295 = sub_100A70C30(0, v295[2] + 1, 1, v295);
    *uint64_t v88 = v295;
  }
  uint64_t v297 = v408;
  unint64_t v299 = v295[2];
  unint64_t v298 = v295[3];
  if (v299 >= v298 >> 1)
  {
    uint64_t v295 = sub_100A70C30((void *)(v298 > 1), v299 + 1, 1, v295);
    *uint64_t v88 = v295;
  }
  *((void *)&v437 + 1) = v289;
  v438 = (char **)&off_1015BFDF0;
  *(void *)&long long v436 = v294;
  v295[2] = v299 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v295[5 * v299 + 4]);
  swift_endAccess();
  uint64_t updated = type metadata accessor for SimpleBeaconUpdateService();
  swift_allocObject();
  uint64_t v301 = sub_10099FDC8();
  swift_beginAccess();
  Swift::String v302 = *v88;
  char v303 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v302;
  if ((v303 & 1) == 0)
  {
    Swift::String v302 = sub_100A70C30(0, v302[2] + 1, 1, v302);
    *uint64_t v88 = v302;
  }
  unint64_t v305 = v302[2];
  unint64_t v304 = v302[3];
  if (v305 >= v304 >> 1)
  {
    Swift::String v302 = sub_100A70C30((void *)(v304 > 1), v305 + 1, 1, v302);
    *uint64_t v88 = v302;
  }
  *((void *)&v437 + 1) = updated;
  v438 = (char **)&off_1015E05A8;
  *(void *)&long long v436 = v301;
  v302[2] = v305 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v302[5 * v305 + 4]);
  swift_endAccess();
  sub_10000588C((uint64_t *)&unk_101657C80);
  uint64_t v306 = swift_allocObject();
  *(_OWORD *)(v306 + 16) = xmmword_101347BA0;
  *(void *)(v306 + 56) = v297;
  *(void *)(v306 + 64) = &off_1015E5278;
  *(void *)(v306 + 32) = v180;
  uint64_t v307 = type metadata accessor for FinderStateManagerService();
  swift_allocObject();
  uint64_t v308 = v424;
  swift_retain();
  swift_retain();
  v309 = sub_101061C34(v308);
  *(void *)(v306 + 96) = v307;
  *(void *)(v306 + 104) = &off_1016041D0;
  *(void *)(v306 + 72) = v309;
  swift_beginAccess();
  sub_100444F2C(v306);
  swift_endAccess();
  uint64_t v310 = type metadata accessor for AccessoryDiscoveryService();
  swift_allocObject();
  uint64_t v311 = v430;
  swift_retain();
  uint64_t v312 = swift_retain();
  uint64_t v313 = sub_100DFACB4(v312, v311);
  swift_beginAccess();
  long long v314 = *v88;
  char v315 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v314;
  if ((v315 & 1) == 0)
  {
    long long v314 = sub_100A70C30(0, v314[2] + 1, 1, v314);
    *uint64_t v88 = v314;
  }
  uint64_t v316 = v423;
  unint64_t v318 = v314[2];
  unint64_t v317 = v314[3];
  if (v318 >= v317 >> 1)
  {
    long long v314 = sub_100A70C30((void *)(v317 > 1), v318 + 1, 1, v314);
    *uint64_t v88 = v314;
  }
  *((void *)&v437 + 1) = v310;
  v438 = (char **)&off_1015F3FB8;
  *(void *)&long long v436 = v313;
  v314[2] = v318 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v314[5 * v318 + 4]);
  swift_endAccess();
  uint64_t v319 = type metadata accessor for SecureLocationsService();
  swift_allocObject();
  uint64_t v320 = (uint64_t)v432;
  swift_retain();
  uint64_t v321 = v418;
  swift_retain();
  v322 = sub_1009F4254(v320, v321);
  swift_beginAccess();
  v323 = *v88;
  char v324 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v323;
  if ((v324 & 1) == 0)
  {
    v323 = sub_100A70C30(0, v323[2] + 1, 1, v323);
    *uint64_t v88 = v323;
  }
  unint64_t v326 = v323[2];
  unint64_t v325 = v323[3];
  if (v326 >= v325 >> 1)
  {
    v323 = sub_100A70C30((void *)(v325 > 1), v326 + 1, 1, v323);
    *uint64_t v88 = v323;
  }
  *((void *)&v437 + 1) = v319;
  v438 = (char **)&off_1015E29A8;
  *(void *)&long long v436 = v322;
  v323[2] = v326 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v323[5 * v326 + 4]);
  swift_endAccess();
  uint64_t v327 = type metadata accessor for SeparationMonitoringEnrollmentService();
  swift_allocObject();
  uint64_t v328 = v430;
  swift_retain();
  uint64_t v329 = swift_retain();
  v330 = sub_100D2351C(v329, v328);
  swift_beginAccess();
  v331 = *v88;
  char v332 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v331;
  if ((v332 & 1) == 0)
  {
    v331 = sub_100A70C30(0, v331[2] + 1, 1, v331);
    *uint64_t v88 = v331;
  }
  unint64_t v334 = v331[2];
  unint64_t v333 = v331[3];
  if (v334 >= v333 >> 1)
  {
    v331 = sub_100A70C30((void *)(v333 > 1), v334 + 1, 1, v331);
    *uint64_t v88 = v331;
  }
  *((void *)&v437 + 1) = v327;
  v438 = (char **)&off_1015F2608;
  *(void *)&long long v436 = v330;
  v331[2] = v334 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v331[5 * v334 + 4]);
  swift_endAccess();
  v335 = (objc_class *)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  id v336 = [objc_allocWithZone(v335) init];
  swift_beginAccess();
  v337 = *v88;
  char v338 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v337;
  if ((v338 & 1) == 0)
  {
    v337 = sub_100A70C30(0, v337[2] + 1, 1, v337);
    *uint64_t v88 = v337;
  }
  unint64_t v340 = v337[2];
  unint64_t v339 = v337[3];
  if (v340 >= v339 >> 1)
  {
    v337 = sub_100A70C30((void *)(v339 > 1), v340 + 1, 1, v337);
    *uint64_t v88 = v337;
  }
  *((void *)&v437 + 1) = v335;
  v438 = &off_1015A71B0;
  *(void *)&long long v436 = v336;
  v337[2] = v340 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v337[5 * v340 + 4]);
  swift_endAccess();
  uint64_t v341 = type metadata accessor for AccountService();
  uint64_t v342 = swift_allocObject();
  swift_defaultActor_initialize();
  strcpy((char *)(v342 + 112), "AccountService");
  *(unsigned char *)(v342 + 127) = -18;
  swift_beginAccess();
  v343 = *v88;
  char v344 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v343;
  if ((v344 & 1) == 0)
  {
    v343 = sub_100A70C30(0, v343[2] + 1, 1, v343);
    *uint64_t v88 = v343;
  }
  unint64_t v346 = v343[2];
  unint64_t v345 = v343[3];
  if (v346 >= v345 >> 1)
  {
    v343 = sub_100A70C30((void *)(v345 > 1), v346 + 1, 1, v343);
    *uint64_t v88 = v343;
  }
  *((void *)&v437 + 1) = v341;
  v438 = (char **)&off_1015B7428;
  *(void *)&long long v436 = v342;
  v343[2] = v346 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v343[5 * v346 + 4]);
  swift_endAccess();
  uint64_t v347 = type metadata accessor for FMIPService();
  uint64_t v348 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v348 + 112) = 0x7672655350494D46;
  *(void *)(v348 + 120) = 0xEB00000000656369;
  swift_beginAccess();
  v349 = *v88;
  char v350 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v349;
  if ((v350 & 1) == 0)
  {
    v349 = sub_100A70C30(0, v349[2] + 1, 1, v349);
    *uint64_t v88 = v349;
  }
  uint64_t v351 = v407;
  unint64_t v353 = v349[2];
  unint64_t v352 = v349[3];
  if (v353 >= v352 >> 1)
  {
    v349 = sub_100A70C30((void *)(v352 > 1), v353 + 1, 1, v349);
    *uint64_t v88 = v349;
  }
  *((void *)&v437 + 1) = v347;
  v438 = (char **)&off_1015AAB18;
  *(void *)&long long v436 = v348;
  v349[2] = v353 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v349[5 * v353 + 4]);
  swift_endAccess();
  uint64_t v354 = v429;
  *((void *)&v437 + 1) = v429;
  v438 = (char **)v428;
  v355 = sub_10001D958((uint64_t *)&v436);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v427)(v355, v351, v354);
  LOBYTE(v354) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v436);
  if (v354)
  {
    uint64_t v356 = *(void *)(v418 + 40);
    uint64_t v357 = type metadata accessor for BeaconSharingService(0);
    swift_allocObject();
    uint64_t v358 = (uint64_t)v420;
    swift_retain();
    swift_retain();
    v359 = sub_10012D86C(v358, v356);
    swift_release();
    swift_release();
    swift_beginAccess();
    v360 = *v88;
    swift_retain();
    char v361 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v360;
    if ((v361 & 1) == 0)
    {
      v360 = sub_100A70C30(0, v360[2] + 1, 1, v360);
      *uint64_t v88 = v360;
    }
    unint64_t v363 = v360[2];
    unint64_t v362 = v360[3];
    if (v363 >= v362 >> 1)
    {
      v360 = sub_100A70C30((void *)(v362 > 1), v363 + 1, 1, v360);
      *uint64_t v88 = v360;
    }
    *((void *)&v437 + 1) = v357;
    v438 = (char **)&off_1015AC478;
    *(void *)&long long v436 = v359;
    v360[2] = v363 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v360[5 * v363 + 4]);
    swift_endAccess();
    v438 = 0;
    long long v436 = 0u;
    long long v437 = 0u;
    uint64_t v364 = qword_101637118;
    swift_retain();
    if (v364 != -1) {
      swift_once();
    }
    uint64_t v365 = type metadata accessor for ItemSharingNotificationsService();
    swift_allocObject();
    uint64_t v366 = swift_retain();
    v367 = sub_100B95C3C(v366, v358, (uint64_t)&v436, 0, 0);
    swift_release();
    swift_beginAccess();
    v368 = *v88;
    swift_retain();
    char v369 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v368;
    if ((v369 & 1) == 0)
    {
      v368 = sub_100A70C30(0, v368[2] + 1, 1, v368);
      *uint64_t v88 = v368;
    }
    unint64_t v371 = v368[2];
    unint64_t v370 = v368[3];
    if (v371 >= v370 >> 1)
    {
      v368 = sub_100A70C30((void *)(v370 > 1), v371 + 1, 1, v368);
      *uint64_t v88 = v368;
    }
    *((void *)&v437 + 1) = v365;
    v438 = &off_1015EA8F8;
    *(void *)&long long v436 = v367;
    v368[2] = v371 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v368[5 * v371 + 4]);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  uint64_t v372 = type metadata accessor for LeaderCheckService();
  uint64_t v373 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v373 + 112) = 0xD000000000000015;
  *(void *)(v373 + 120) = 0x8000000101401DE0;
  swift_beginAccess();
  v374 = *v88;
  char v375 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v374;
  if ((v375 & 1) == 0)
  {
    v374 = sub_100A70C30(0, v374[2] + 1, 1, v374);
    *uint64_t v88 = v374;
  }
  unint64_t v377 = v374[2];
  unint64_t v376 = v374[3];
  if (v377 >= v376 >> 1)
  {
    v374 = sub_100A70C30((void *)(v376 > 1), v377 + 1, 1, v374);
    *uint64_t v88 = v374;
  }
  *((void *)&v437 + 1) = v372;
  v438 = (char **)&off_1015BE4E0;
  *(void *)&long long v436 = v373;
  v374[2] = v377 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v374[5 * v377 + 4]);
  swift_endAccess();
  uint64_t v378 = type metadata accessor for DelegatedShareMetadataService();
  v379 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v379[14] = 0xD00000000000001DLL;
  v379[15] = 0x8000000101401E00;
  type metadata accessor for KeyDropInterface();
  uint64_t v380 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v380 + 112) = 0;
  *(void *)(v380 + 120) = 0;
  v379[16] = v380;
  swift_beginAccess();
  v381 = *v88;
  char v382 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v88 = v381;
  if ((v382 & 1) == 0)
  {
    v381 = sub_100A70C30(0, v381[2] + 1, 1, v381);
    *uint64_t v88 = v381;
  }
  unint64_t v384 = v381[2];
  unint64_t v383 = v381[3];
  if (v384 >= v383 >> 1)
  {
    v381 = sub_100A70C30((void *)(v383 > 1), v384 + 1, 1, v381);
    *uint64_t v88 = v381;
  }
  *((void *)&v437 + 1) = v378;
  v438 = (char **)&off_1015D5230;
  *(void *)&long long v436 = v379;
  v381[2] = v384 + 1;
  sub_10001CEB0(&v436, (uint64_t)&v381[5 * v384 + 4]);
  swift_endAccess();
  uint64_t v385 = swift_allocObject();
  v386 = v420;
  *(void *)(v385 + 16) = v316;
  *(void *)(v385 + 24) = v386;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v387 = type metadata accessor for AirPodsLEPairingService();
  swift_allocObject();
  uint64_t v388 = swift_retain();
  uint64_t v389 = sub_10003A718(v388);
  if (v389)
  {
    uint64_t v390 = v389;
    swift_beginAccess();
    v391 = *v88;
    swift_retain();
    char v392 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v88 = v391;
    if ((v392 & 1) == 0)
    {
      v391 = sub_100A70C30(0, v391[2] + 1, 1, v391);
      *uint64_t v88 = v391;
    }
    unint64_t v394 = v391[2];
    unint64_t v393 = v391[3];
    if (v394 >= v393 >> 1)
    {
      v391 = sub_100A70C30((void *)(v393 > 1), v394 + 1, 1, v391);
      *uint64_t v88 = v391;
    }
    *((void *)&v437 + 1) = v387;
    v438 = &off_1015A8260;
    *(void *)&long long v436 = v390;
    v391[2] = v394 + 1;
    sub_10001CEB0(&v436, (uint64_t)&v391[5 * v394 + 4]);
    swift_endAccess();
    swift_release();
  }
  v395 = *(void **)(v414 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
  type metadata accessor for SPObserverAnalytics();
  swift_allocObject();
  uint64_t v396 = (uint64_t)v432;
  swift_retain();
  *(void *)(v316 + 64) = sub_100709DA4(v396, v395);
  swift_release();
  uint64_t v397 = *(void *)(v316 + 64);
  if (v397)
  {
    swift_retain();
    *(void *)&long long v436 = AnyCurrentValuePublisher.publisher.getter();
    swift_allocObject();
    swift_weakInit();
    sub_10000588C((uint64_t *)&unk_101648940);
    sub_100062734((unint64_t *)&unk_101656770, (uint64_t *)&unk_101648940);
    uint64_t v398 = Publisher<>.sink(receiveValue:)();
    swift_release();
    *(void *)(v397 + 56) = v398;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100564328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[36] = a3;
  v3[37] = type metadata accessor for PencilPairingService(0);
  swift_allocObject();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[38] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1005643F4;
  return sub_100D4A2CC(a2);
}

uint64_t sub_1005643F4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005644F4, 0, 0);
}

uint64_t sub_1005644F4()
{
  uint64_t v1 = *(void *)(v0 + 312);
  if (v1)
  {
    uint64_t v2 = (void **)(*(void *)(v0 + 288) + 16);
    swift_beginAccess();
    uint64_t v3 = *v2;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v3 = sub_100A70C30(0, v3[2] + 1, 1, v3);
      *uint64_t v2 = v3;
    }
    unint64_t v6 = v3[2];
    unint64_t v5 = v3[3];
    if (v6 >= v5 >> 1)
    {
      uint64_t v3 = sub_100A70C30((void *)(v5 > 1), v6 + 1, 1, v3);
      *uint64_t v2 = v3;
    }
    *(void *)(v0 + 120) = *(void *)(v0 + 296);
    *(void *)(v0 + 128) = &off_1015F2950;
    *(void *)(v0 + 96) = v1;
    v3[2] = v6 + 1;
    sub_10001CEB0((long long *)(v0 + 96), (uint64_t)&v3[5 * v6 + 4]);
    swift_endAccess();
    uint64_t v7 = type metadata accessor for LocalFindableLostModeDetectionService();
    swift_allocObject();
    uint64_t v8 = sub_101037F4C();
    swift_beginAccess();
    uint64_t v9 = *v2;
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v9;
    if ((v10 & 1) == 0)
    {
      uint64_t v9 = sub_100A70C30(0, v9[2] + 1, 1, v9);
      *uint64_t v2 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = sub_100A70C30((void *)(v11 > 1), v12 + 1, 1, v9);
      *uint64_t v2 = v9;
    }
    *(void *)(v0 + 40) = v7;
    *(void *)(v0 + 48) = &off_101602E40;
    *(void *)(v0 + 16) = v8;
    v9[2] = v12 + 1;
    sub_10001CEB0((long long *)(v0 + 16), (uint64_t)&v9[5 * v12 + 4]);
    swift_endAccess();
    swift_release();
  }
  *(void *)(v0 + 320) = type metadata accessor for AccessoryConnectionService();
  swift_allocObject();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v13;
  void *v13 = v0;
  v13[1] = sub_100564774;
  return sub_1008FB2A0();
}

uint64_t sub_100564774(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100564874, 0, 0);
}

uint64_t sub_100564874()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if (v1)
  {
    uint64_t v2 = (void **)(*(void *)(v0 + 288) + 16);
    swift_beginAccess();
    uint64_t v3 = *v2;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v3 = sub_100A70C30(0, v3[2] + 1, 1, v3);
      *uint64_t v2 = v3;
    }
    unint64_t v6 = v3[2];
    unint64_t v5 = v3[3];
    if (v6 >= v5 >> 1)
    {
      uint64_t v3 = sub_100A70C30((void *)(v5 > 1), v6 + 1, 1, v3);
      *uint64_t v2 = v3;
    }
    *(void *)(v0 + 160) = *(void *)(v0 + 320);
    *(void *)(v0 + 168) = &off_1015DBFA8;
    *(void *)(v0 + 136) = v1;
    v3[2] = v6 + 1;
    sub_10001CEB0((long long *)(v0 + 136), (uint64_t)&v3[5 * v6 + 4]);
    swift_endAccess();
    swift_release();
  }
  *(void *)(v0 + 344) = type metadata accessor for LocalFindableConnectionMaterialService();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100564A10;
  return sub_100F3743C();
}

uint64_t sub_100564A10(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 272) = v1;
  *(void *)(v2 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100564B10, 0, 0);
}

uint64_t sub_100564B10()
{
  uint64_t v1 = (void **)(*(void *)(v0 + 288) + 16);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100A70C30(0, v2[2] + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  unint64_t v5 = v2[2];
  unint64_t v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    uint64_t v2 = sub_100A70C30((void *)(v4 > 1), v5 + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  uint64_t v6 = *(void *)(v0 + 280);
  *(void *)(v0 + 80) = *(void *)(v0 + 344);
  *(void *)(v0 + 88) = &off_1015FDE78;
  *(void *)(v0 + 56) = v6;
  v2[2] = v5 + 1;
  sub_10001CEB0((long long *)(v0 + 56), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100564C3C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  v2[12] = type metadata accessor for CloudStorageService();
  swift_allocObject();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[13] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100564CE8;
  return sub_100869430();
}

uint64_t sub_100564CE8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100564E1C, 0, 0);
  }
}

uint64_t sub_100564E1C()
{
  uint64_t v1 = (void **)(*(void *)(v0 + 88) + 16);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100A70C30(0, v2[2] + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  unint64_t v5 = v2[2];
  unint64_t v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    uint64_t v2 = sub_100A70C30((void *)(v4 > 1), v5 + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void **)(v0 + 80);
  *(void *)(v0 + 40) = *(void *)(v0 + 96);
  *(void *)(v0 + 48) = &off_1015D8800;
  *(void *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10001CEB0((long long *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess();
  *uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

id sub_100564F60()
{
  uint64_t v0 = swift_dynamicCastObjCProtocolConditional();
  if (v0) {
    swift_unknownObjectRetain();
  }
  id v1 = [objc_allocWithZone((Class)CLFindMyAccessoryManager) initWithDelegate:v0 delegateQueue:0];
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100564FE8(uint64_t a1, uint64_t a2)
{
  v2[12] = a2;
  v2[13] = type metadata accessor for OwnerCommandService(0);
  swift_allocObject();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[14] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100565094;
  return sub_10122BBA0();
}

uint64_t sub_100565094(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v1;
  *(void *)(v2 + 88) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100565194, 0, 0);
}

uint64_t sub_100565194()
{
  id v1 = (void **)(*(void *)(v0 + 96) + 16);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100A70C30(0, v2[2] + 1, 1, v2);
    *id v1 = v2;
  }
  unint64_t v5 = v2[2];
  unint64_t v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    uint64_t v2 = sub_100A70C30((void *)(v4 > 1), v5 + 1, 1, v2);
    *id v1 = v2;
  }
  uint64_t v6 = *(void *)(v0 + 88);
  *(void *)(v0 + 40) = *(void *)(v0 + 104);
  *(void *)(v0 + 48) = &off_10160E0B0;
  *(void *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10001CEB0((long long *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1005652C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = type metadata accessor for BTFindingService();
  swift_allocObject();
  swift_retain();
  unint64_t v5 = (void *)swift_task_alloc();
  v3[14] = v5;
  *unint64_t v5 = v3;
  v5[1] = sub_10056538C;
  return sub_100FD2B38(a3);
}

uint64_t sub_10056538C(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v1;
  *(void *)(v2 + 88) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10056548C, 0, 0);
}

uint64_t sub_10056548C()
{
  id v1 = (void **)(*(void *)(v0 + 96) + 16);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100A70C30(0, v2[2] + 1, 1, v2);
    *id v1 = v2;
  }
  unint64_t v5 = v2[2];
  unint64_t v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    uint64_t v2 = sub_100A70C30((void *)(v4 > 1), v5 + 1, 1, v2);
    *id v1 = v2;
  }
  uint64_t v6 = *(void *)(v0 + 88);
  *(void *)(v0 + 40) = *(void *)(v0 + 104);
  *(void *)(v0 + 48) = &off_101600508;
  *(void *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10001CEB0((long long *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1005655B8()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SearchPartyDaemon()
{
  return self;
}

uint64_t sub_10056563C()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100565718()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1005600F4(v2, v3);
}

uint64_t sub_1005657AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005657BC()
{
  return swift_release();
}

void sub_1005657C4()
{
  if (qword_101637448 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F250);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "This is the first run since reboot", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self standardUserDefaults];
  UUID.uuidString.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setObject:v5 forKey:v6];

  sub_10055C554();
}

uint64_t sub_100565938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1016373F0 != -1) {
    swift_once();
  }
  NSString v6 = *(void **)(a1 + 56);
  swift_beginAccess();
  id v7 = v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = qword_10170F1A0;
  qword_10170F1A0 = 0x8000000000000000;
  sub_10016EB10(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  qword_10170F1A0 = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_100565A30()
{
  sub_10000588C(&qword_101648998);
  sub_100062734((unint64_t *)&unk_101648A10, &qword_101648998);
  v1._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v6 = *(void *)(v0 + 16);
  NSString v5 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 60;
}

uint64_t sub_100565B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v81 = a4;
  uint64_t v80 = a3;
  uint64_t v79 = a2;
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  v68[0] = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000588C(&qword_101648960);
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  unint64_t v74 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000588C((uint64_t *)&unk_101648968);
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  unint64_t v73 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8);
  uint64_t v71 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for URL();
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v84 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for BeaconManagerService();
  uint64_t v95 = &off_1015E5250;
  uint64_t v72 = v94;
  uint64_t v93 = a1;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  *(void *)(a5 + 16) = v20;
  *(void *)(a5 + 48) = 0;
  uint64_t v87 = (void *)sub_10000584C();
  uint64_t v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  uint64_t v90 = v17 + 104;
  v86(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v16);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  uint64_t v88 = sub_100567E40((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v89 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v85 = v14;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 56) = v23;
  *(unsigned char *)(a5 + 80) = 1;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  *(void *)(a5 + 88) = 0;
  unsigned int v83 = v21;
  uint64_t v24 = v84;
  uint64_t v25 = v86;
  v86(v19, v21, v84);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(a5 + 176) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v82 = v19;
  uint64_t v26 = v24;
  v25(v19, v21, v24);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  v68[1] = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(a5 + 184) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v27 = v19;
  uint64_t v28 = v83;
  uint64_t v29 = v86;
  v86(v27, v83, v26);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v30 = v82;
  *(void *)(a5 + 192) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a5 + 200) = sub_10092EC10((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = v28;
  uint64_t v32 = v84;
  v29(v30, v31, v84);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = v82;
  *(void *)(a5 + 208) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0;
  *(void *)(a5 + 232) = 0x4076800000000000;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(void *)(a5 + 272) = _swiftEmptyDictionarySingleton;
  v86(v33, v83, v32);
  static DispatchQoS.unspecified.getter();
  v92[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a5 + 288) = 0;
  *(void *)(a5 + 296) = 0;
  *(void *)(a5 + 280) = v34;
  uint64_t v90 = sub_10000588C(&qword_101648978);
  swift_allocObject();
  *(void *)(a5 + 304) = PassthroughSubject.init()();
  uint64_t v89 = sub_10000588C(&qword_101648980);
  swift_allocObject();
  *(void *)(a5 + 320) = PassthroughSubject.init()();
  *(void *)(a5 + 344) = 0;
  *(void *)(a5 + 352) = 0;
  *(void *)(a5 + 336) = 0;
  *(unsigned char *)(a5 + 376) = sub_1004EFD84() & 1;
  *(void *)(a5 + 384) = 0;
  if (qword_101637450 != -1) {
    swift_once();
  }
  sub_100010324(v69, (uint64_t)qword_10166ADC0);
  uint64_t v35 = (uint64_t)v70;
  URL.appendingPathComponent(_:)();
  type metadata accessor for ShareAttemptTracker(0);
  swift_allocObject();
  *(void *)(a5 + 416) = sub_1010E4DD4(v35);
  uint64_t v88 = sub_10000588C(&qword_101648988);
  swift_allocObject();
  *(void *)(a5 + 424) = PassthroughSubject.init()();
  *(void *)(a5 + 440) = 0;
  *(void *)(a5 + 448) = _swiftEmptyDictionarySingleton;
  *(void *)(a5 + 456) = 0x404E000000000000;
  *(void *)(a5 + 464) = 0x403E000000000000;
  *(void *)(a5 + 472) = 6;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(a5 + 480) = WorkItemQueue.__allocating_init(name:identifier:)();
  sub_10001D010((uint64_t)&v93, a5 + 112);
  uint64_t v36 = v79;
  uint64_t v37 = v80;
  *(void *)(a5 + 152) = v79;
  *(void *)(a5 + 160) = v37;
  *(void *)(a5 + 168) = v81;
  type metadata accessor for SharingScheduler();
  uint64_t v38 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v38 + 112) = _swiftEmptyArrayStorage;
  *(void *)(v38 + 120) = 0;
  *(_WORD *)(v38 + 128) = 0;
  UUID.init()();
  *(void *)(v38 + 136) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(void *)(a5 + 40) = v38;
  sub_10000588C(&qword_101648990);
  swift_allocObject();
  swift_retain();
  sub_100CD6BDC(0xD00000000000001BLL, (void *)0x80000001013F3BA0, 6, 60.0, 30.0);
  *(void *)(a5 + 24) = v39;
  sub_10000588C(&qword_101648998);
  swift_allocObject();
  sub_1005670B0(0xD000000000000021, (void *)0x8000000101402010);
  *(void *)(a5 + 32) = v40;
  v92[0] = sub_1004EFFB4();
  sub_10000588C(&qword_1016489A0);
  swift_allocObject();
  uint64_t v41 = CurrentValueSubject.init(_:)();
  *(void *)(a5 + 392) = v41;
  swift_retain();
  *(void *)(a5 + 400) = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  type metadata accessor for BeaconNearOwnerService();
  swift_allocObject();
  uint64_t v42 = swift_retain();
  *(void *)(a5 + 368) = sub_100369D88(v42);
  swift_retain();
  sub_10036AFE0((uint64_t)sub_1004EFFCC, 0);
  swift_release();
  sub_10001D010((uint64_t)&v93, (uint64_t)v92);
  uint64_t v43 = *(void *)(a5 + 368);
  uint64_t v44 = sub_1000BD078((uint64_t)v92, v92[3]);
  uint64_t v87 = v68;
  __chkstk_darwin(v44);
  uint64_t v46 = (void *)((char *)v68 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v47 + 16))(v46);
  uint64_t v48 = *v46;
  uint64_t v49 = v72;
  v91[3] = v72;
  v91[4] = &off_1015E5250;
  v91[0] = v48;
  type metadata accessor for IntentHandler();
  unint64_t v50 = (void *)swift_allocObject();
  uint64_t v51 = sub_1000BD078((uint64_t)v91, v49);
  __chkstk_darwin(v51);
  NSString v53 = (void *)((char *)v68 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v54 + 16))(v53);
  uint64_t v55 = *v53;
  swift_retain();
  swift_retain();
  char v56 = sub_100567600(v55, v36, v43, v50);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
  *(void *)(a5 + 360) = v56;
  v92[0] = v41;
  sub_100062734(&qword_1016489A8, &qword_1016489A0);
  uint64_t v57 = v74;
  Publisher.dropFirst(_:)();
  sub_100062734(&qword_1016489B0, &qword_101648960);
  sub_100567900();
  uint64_t v58 = v73;
  uint64_t v59 = v78;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v59);
  sub_100062734((unint64_t *)&unk_1016489D0, (uint64_t *)&unk_101648968);
  uint64_t v60 = v77;
  uint64_t v61 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v58, v60);
  *(void *)(a5 + 408) = v61;
  v92[0] = *(void *)(a5 + 320);
  sub_100062734(&qword_10163C7C0, &qword_101648980);
  *(void *)(a5 + 328) = Publisher.eraseToAnyPublisher()();
  v92[0] = *(void *)(a5 + 304);
  sub_100062734(&qword_1016489E0, &qword_101648978);
  *(void *)(a5 + 312) = Publisher.eraseToAnyPublisher()();
  v92[0] = *(void *)(a5 + 424);
  sub_100062734(&qword_1016489E8, &qword_101648988);
  uint64_t result = Publisher.eraseToAnyPublisher()();
  *(void *)(a5 + 432) = result;
  uint64_t v63 = *(void *)(v36 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer);
  if (v63)
  {
    v92[0] = *(void *)(v63 + 64);
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_10000588C(&qword_1016489F0);
    sub_100062734(&qword_1016489F8, &qword_1016489F0);
    uint64_t v64 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)(a5 + 384) = v64;
    swift_release();
    v92[0] = 2;
    sub_10000588C(&qword_101648A00);
    swift_allocObject();
    swift_retain();
    *(void *)(a5 + 440) = AsynchronousCache.init(timeout:timeoutError:fetchBlock:)();
    swift_release();
    uint64_t v65 = type metadata accessor for TaskPriority();
    uint64_t v66 = v68[0];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v68[0], 1, 1, v65);
    unint64_t v67 = (void *)swift_allocObject();
    v67[2] = 0;
    v67[3] = 0;
    v67[4] = v38;
    v67[5] = a5;
    swift_retain();
    swift_retain();
    sub_1008F5E44(v66, (uint64_t)&unk_101648A08, (uint64_t)v67);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v93);
    return a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_100566C9C(void *a1)
{
  uint64_t v7 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  uint64_t v8 = &off_1015AFCD0;
  swift_defaultActor_initialize();
  a1[14] = 0xD00000000000001DLL;
  a1[15] = 0x80000001013F1E50;
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v3 = v2 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 4;
  a1[16] = v2;
  sub_10000588C(&qword_101654000);
  a1[17] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  sub_10001CEB0(&v6, (uint64_t)(a1 + 18));
  return a1;
}

uint64_t sub_100566DC8()
{
  return sub_100567B24(32);
}

uint64_t sub_100566DD0(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *long long v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100564328(a1, v5, v4);
}

uint64_t sub_100566E7C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001D2E4;
  return sub_100564C3C(a1, v1);
}

uint64_t sub_100566F18(uint64_t a1)
{
  return sub_100A48B64(a1, v1);
}

uint64_t sub_100566F20(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100564FE8(a1, v1);
}

uint64_t sub_100566FBC()
{
  return sub_100567B24(32);
}

uint64_t sub_100566FC4(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_1005652C0(a1, v5, v4);
}

uint64_t sub_100567070()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005670A8()
{
  return sub_10070B808();
}

void sub_1005670B0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v29 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(void *)(v2 + 32) = v13;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 64) = sub_10092EE04((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + 72) = sub_10092E738((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  uint64_t v27 = a1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  unint64_t v28 = sub_10000584C();
  uint64_t v33 = 0;
  unint64_t v34 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)0xD000000000000030;
  unint64_t v34 = 0x8000000101402090;
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v15 = v27;
  *(void *)(v2 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v16 = objc_allocWithZone((Class)IDSService);
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithService:v17];

  if (v18)
  {
    *(void *)(v3 + 56) = v18;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170F168);
    swift_retain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      uint64_t v23 = sub_100565A30();
      uint64_t v32 = sub_1008FA0F0(v23, v24, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Created %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v25 = swift_release();
    }
    if (qword_1016373E8 != -1) {
      uint64_t v25 = swift_once();
    }
    __chkstk_darwin(v25);
    *(&v26 - 4) = v3;
    *(&v26 - 3) = v15;
    *(&v26 - 2) = (uint64_t)a2;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  }
  else
  {
    __break(1u);
  }
}

void *sub_100567600(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = a3;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = type metadata accessor for BeaconManagerService();
  v20[4] = &off_1015E5250;
  v20[0] = a1;
  a4[3] = 0;
  swift_unknownObjectWeakInit();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_100567E40((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  a4[9] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10001D010((uint64_t)v20, (uint64_t)(a4 + 4));
  uint64_t v13 = v18;
  a4[10] = a2;
  a4[11] = v13;
  swift_retain();
  swift_retain();
  a4[12] = sub_10092EAD4((uint64_t)_swiftEmptyArrayStorage);
  id v14 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v15 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyNearestTenMeters, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  a4[13] = v15;
  return a4;
}

unint64_t sub_100567900()
{
  unint64_t result = qword_1016489B8;
  if (!qword_1016489B8)
  {
    sub_10000592C(&qword_1016489C0);
    sub_100567974();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016489B8);
  }
  return result;
}

unint64_t sub_100567974()
{
  unint64_t result = qword_1016489C8;
  if (!qword_1016489C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016489C8);
  }
  return result;
}

uint64_t sub_1005679C8(uint64_t a1)
{
  return sub_1004F005C(a1);
}

uint64_t sub_1005679D0(uint64_t a1)
{
  return sub_1004F00BC(a1);
}

uint64_t sub_1005679D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100567A20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1004F05DC(a1, v4, v5, v7, v6);
}

uint64_t sub_100567AE0()
{
  return sub_100565938(v0[2], v0[3], v0[4]);
}

uint64_t sub_100567B00(uint64_t a1)
{
  return sub_10055CEA8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100567B1C()
{
  return sub_100567B24(40);
}

uint64_t sub_100567B24(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100567B70()
{
  return sub_10055D184(v0[2], v0[3], v0[4]);
}

uint64_t sub_100567B7C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100567BCC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100033F68;
  return sub_10055E5C0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100567CA0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100567CE0()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 32) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10055F6AC;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_100567DC8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100567E00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100567E38()
{
  sub_10055FA38(*(void *)(v0 + 16));
}

uint64_t sub_100567E40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100567E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101648A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100567EF0()
{
  uint64_t v1 = type metadata accessor for SystemVersionNumber();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_100568000(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SystemVersionNumber() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = (v7 + v5 + v6) & ~v5;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = *(void *)((char *)v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  id v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  void *v15 = v2;
  v15[1] = sub_100033F68;
  return sub_100498EE4(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10056814C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001D2E4;
  return sub_100499310(a1, v4, v5, v7, v6);
}

uint64_t sub_100568210()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100568258(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_100498B1C(a1, v4, v5, v7, v6);
}

uint64_t sub_100568330()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E010);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E010);
  if (qword_101636AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DE20);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005683F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648CC8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648220);
  sub_100571584();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  uint64_t v14 = *(void *)(updated - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(updated - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(updated - 8) + 80)), (uint64_t)v4, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, updated);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, updated) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648CC8);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_10056876C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648CF8);
  sub_100571678();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0);
  uint64_t v14 = *(void *)(updated - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(updated - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(updated - 8) + 80)), (uint64_t)v4, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, updated);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, updated) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648CF0);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
}

uint64_t sub_100568AE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C((uint64_t *)&unk_1016636E0);
  sub_10057171C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v4, v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), v13);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(v20, v4, v13);
}

uint64_t sub_100568E54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648D10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648080);
  sub_1005717C0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for LegacyShareEnvelope(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for LegacyShareEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648D10);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for LegacyShareEnvelope);
}

uint64_t sub_1005691C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648D28);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016480B0);
  sub_100571864();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for FamilyShareEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for FamilyShareEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648D28);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for FamilyShareEnvelopeV1);
}

uint64_t sub_10056953C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648D40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648100);
  sub_100571908();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  uint64_t v14 = *(void *)(MyAccessoryFamilyShareEnvelope - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyShareEnvelope - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyShareEnvelope - 8) + 80)), (uint64_t)v4, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, MyAccessoryFamilyShareEnvelope);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, MyAccessoryFamilyShareEnvelope) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648D40);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
}

uint64_t sub_1005698B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648D58);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016480D8);
  sub_1005719AC();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
  uint64_t v14 = *(void *)(MyAirPodsFamilyShareEnvelope - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(MyAirPodsFamilyShareEnvelope - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(MyAirPodsFamilyShareEnvelope - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, MyAirPodsFamilyShareEnvelope);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, MyAirPodsFamilyShareEnvelope) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648D58);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
}

uint64_t sub_100569C24()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100010324(v1, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  v10[3] = &type metadata for Bool;
  LOBYTE(v10[0]) = 1;
  uint64_t v6 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v10, (uint64_t)v4);
  v6(v9, 0);
  sub_10000588C(&qword_101648D70);
  sub_1005711C4(&qword_101648D78, &qword_101648D70, (void (*)(void))sub_100571A50);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0) {
    return swift_release();
  }
  if (!*(void *)(v10[0] + 16))
  {
    swift_bridgeObjectRelease();
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100569E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648D88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101647EF0);
  sub_100571AA4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  uint64_t v14 = *(void *)(MyAccessoryFamilyShareResponseEnvelope - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyShareResponseEnvelope - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyShareResponseEnvelope - 8) + 80)), (uint64_t)v4, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, MyAccessoryFamilyShareResponseEnvelope);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, MyAccessoryFamilyShareResponseEnvelope) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648D88);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_10056A204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_10163A040);
  sub_100571B48();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for SharedBeaconRecord);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_101653D50);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_10056A578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648DA8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648138);
  sub_100571BEC();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648DA8);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t sub_10056A8EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648DC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648178);
  sub_100571C90();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for SelfBeaconingKeyEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648DC0);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for SelfBeaconingKeyEnvelope);
}

uint64_t sub_10056AC60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648DD8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648158);
  sub_100571D34();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  uint64_t v14 = *(void *)(MyAccessoryFamilyKeyEnvelope - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(MyAccessoryFamilyKeyEnvelope - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, MyAccessoryFamilyKeyEnvelope);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, MyAccessoryFamilyKeyEnvelope) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648DD8);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
}

uint64_t sub_10056AFD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648DF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016481A0);
  sub_100571DD8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for KeyRequestEnvelope();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648DF0);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
}

double sub_10056B348()
{
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100010324(v2, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = &type metadata for Bool;
  LOBYTE(v11[0]) = 1;
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v11, (uint64_t)v5);
  v7(v10, 0);
  sub_10000588C(&qword_101648E08);
  sub_1005711C4(&qword_101648E10, &qword_101648E08, (void (*)(void))sub_100571E7C);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    if (*(void *)(v11[0] + 16))
    {
      double v1 = *(double *)(v11[0] + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10056B5C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101646EB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016483B0);
  sub_100571ED0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for BeaconLocationUpdate();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101646EB8);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
}

uint64_t sub_10056B938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101657CE0);
  sub_100571F74();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for BeaconObservation();
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_101655530);
    sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_10056BCAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100010324(v2, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = &type metadata for Bool;
  LOBYTE(v11[0]) = 1;
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v11, (uint64_t)v5);
  v7(v10, 0);
  sub_10000588C(&qword_10163FFB0);
  sub_1005711C4(&qword_101648E40, &qword_10163FFB0, (void (*)(void))sub_100571F74);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    if (*(void *)(v11[0] + 16))
    {
      uint64_t v1 = *(void *)(v11[0] + 32);
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_10000588C(&qword_101648CE0);
    sub_100571628(&qword_101648CE8, &qword_101648CE0);
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10056BF28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100010324(v2, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = &type metadata for Bool;
  LOBYTE(v11[0]) = 1;
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v11, (uint64_t)v5);
  v7(v10, 0);
  sub_10000588C(&qword_101648338);
  sub_1005711C4(&qword_101648CA8, &qword_101648338, (void (*)(void))sub_100571530);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    if (*(void *)(v11[0] + 16))
    {
      uint64_t v1 = *(void *)(v11[0] + 32);
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_10000588C(&qword_101648CB8);
    sub_100571628(&qword_101648CC0, &qword_101648CB8);
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10056C1A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648BB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648BC0);
  sub_100570F34();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for CircleTrustEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for CircleTrustEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648BB8);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for CircleTrustEnvelopeV1);
}

uint64_t sub_10056C518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648BE8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016481C0);
  sub_100570FD8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for CircleTrustAckEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for CircleTrustAckEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648BE8);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for CircleTrustAckEnvelopeV1);
}

uint64_t sub_10056C88C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648C00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648C08);
  sub_10057107C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for CircleTrustAcceptEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648C00);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for CircleTrustAcceptEnvelopeV1);
}

uint64_t sub_10056CC00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648C18);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101647F70);
  sub_100571120();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for CircleTrustDeclineEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648C18);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for CircleTrustDeclineEnvelopeV1);
}

uint64_t sub_10056CF74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100010324(v2, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = &type metadata for Bool;
  LOBYTE(v11[0]) = 1;
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v11, (uint64_t)v5);
  v7(v10, 0);
  sub_10000588C(&qword_101648200);
  sub_1005711C4(&qword_101648C28, &qword_101648200, (void (*)(void))sub_10057123C);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    if (*(void *)(v11[0] + 16))
    {
      uint64_t v1 = *(void *)(v11[0] + 32);
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10056D1F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100010324(v2, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v11[3] = &type metadata for Bool;
  LOBYTE(v11[0]) = 1;
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v11, (uint64_t)v5);
  v7(v10, 0);
  sub_10000588C(&qword_101648C38);
  sub_1005711C4(&qword_101648C40, &qword_101648C38, (void (*)(void))sub_100571290);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    if (*(void *)(v11[0] + 16))
    {
      uint64_t v1 = *(void *)(v11[0] + 32);
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10056D46C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648C50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648C58);
  sub_1005712E4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for CircleTrustRequestEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for CircleTrustRequestEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648C50);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for CircleTrustRequestEnvelopeV1);
}

uint64_t sub_10056D7E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648C70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_101648C78);
  sub_1005713E8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for DelegatedCircleTrustStopEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648C70);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
}

uint64_t sub_10056DB54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_10000588C(&qword_101648C90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v19[3] = &type metadata for Bool;
  LOBYTE(v19[0]) = 1;
  uint64_t v10 = (void (*)(unsigned char *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v19, (uint64_t)v8);
  v10(v18, 0);
  sub_10000588C(&qword_1016481E0);
  sub_10057148C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v11 = v19[0];
  uint64_t v12 = *(void *)(v19[0] + 16);
  uint64_t v13 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (v12)
  {
    sub_100572060(v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), (uint64_t)v4, type metadata accessor for PeerTrustAckEnvelopeV1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101648C90);
    sub_10000588C(&qword_101648BD8);
    sub_100571628(&qword_101648BE0, &qword_101648BD8);
    swift_allocError();
    unsigned char *v16 = 0;
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return sub_1005720C8((uint64_t)v4, v20, type metadata accessor for PeerTrustAckEnvelopeV1);
}

uint64_t sub_10056DEC8()
{
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CircleTrustMessageRouter()
{
  return self;
}

unint64_t sub_10056DF28()
{
  unint64_t result = qword_101648B70;
  if (!qword_101648B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648B70);
  }
  return result;
}

uint64_t sub_10056DF7C(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v25 = a1;
  uint64_t v11 = *v6;
  uint64_t v26 = a2;
  uint64_t v27 = v11;
  uint64_t v12 = type metadata accessor for MessagingMessageContext();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  sub_100572060(a6, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v21 = (v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(unsigned char *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v26;
  *(void *)(v22 + 48) = a3;
  *(void *)(v22 + 56) = a4;
  *(void *)(v22 + 64) = v6;
  *(void *)(v22 + 72) = a5;
  sub_1005720C8((uint64_t)v15, v22 + v20, (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
  *(void *)(v22 + v21) = v27;
  sub_1000361E0(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100885EBC((uint64_t)v18, (uint64_t)&unk_101648BA0, v22);
  return swift_release();
}

uint64_t sub_10056E1BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v12;
  *(void *)(v8 + 24) = a6;
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 16) = a5;
  *(unsigned char *)(v8 + 276) = a4;
  type metadata accessor for CircleTrustRequestEnvelopeV1(0);
  *(void *)(v8 + 56) = swift_task_alloc();
  type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  *(void *)(v8 + 64) = swift_task_alloc();
  type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  *(void *)(v8 + 72) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = *(void *)(v9 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  type metadata accessor for CircleTrustAckEnvelopeV1(0);
  *(void *)(v8 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_10056E340, 0, 0);
}

uint64_t sub_10056E340()
{
  switch(*(unsigned char *)(v0 + 276))
  {
    case 1:
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_10056E6EC;
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v12 = *(void *)(v0 + 24);
      uint64_t v13 = *(void *)(v0 + 32);
      uint64_t v14 = *(void *)(v0 + 16);
      return sub_10057027C(1, v14, v12, v13, v11);
    case 2:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056E87C;
      goto LABEL_15;
    case 3:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056EBB8;
      goto LABEL_15;
    case 4:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056EEF4;
      goto LABEL_15;
    case 5:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056F234;
      goto LABEL_15;
    case 6:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056F588;
      goto LABEL_15;
    case 7:
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = sub_10056F7D4;
LABEL_15:
      uint64_t result = _swift_task_switch(v17, v16, 0);
      break;
    case 8:
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10056FB14;
      uint64_t v19 = *(void *)(v0 + 48);
      uint64_t v20 = *(void *)(v0 + 24);
      uint64_t v21 = *(void *)(v0 + 32);
      uint64_t v22 = *(void *)(v0 + 16);
      uint64_t result = sub_100570940(8, v22, v20, v21, v19);
      break;
    default:
      if (qword_101636B88 != -1) {
        swift_once();
      }
      uint64_t v2 = *(void *)(v0 + 24);
      unint64_t v1 = *(void *)(v0 + 32);
      uint64_t v3 = type metadata accessor for Logger();
      sub_100010324(v3, (uint64_t)qword_10170E010);
      sub_1000361E0(v2, v1);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      BOOL v6 = os_log_type_enabled(v4, v5);
      uint64_t v8 = *(void *)(v0 + 24);
      unint64_t v7 = *(void *)(v0 + 32);
      if (v6)
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 67109120;
        *(_DWORD *)(v0 + 272) = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10001CFB8(v8, v7);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring non circleTrust Message: %d", v9, 8u);
        swift_slowDealloc();
      }
      else
      {
        sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
      }

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v23();
      break;
  }
  return result;
}

uint64_t sub_10056E6EC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10056E87C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    sub_10056C518(*(void *)(v0 + 104));
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 48);
    *(void *)(v0 + 120) = *(void *)(*(void *)(v0 + 40) + 112);
    swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, v2, v6);
    uint64_t v9 = v8 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    *(unsigned char *)(v0 + 277) = *(unsigned char *)v9;
    *(void *)(v0 + 128) = *(void *)(v9 + 8);
    *(void *)(v0 + 136) = *(void *)(v9 + 16);
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10056EA60, v11, v10);
  }
  else
  {
    sub_10056FFFC(2, v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_10056EA60()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  sub_100CE0D04(v1, *(unsigned char *)(v0 + 277), *(void *)(v0 + 128), *(void *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10056EB08, v4, 0);
}

uint64_t sub_10056EB08()
{
  sub_100571388(*(void *)(v0 + 104), type metadata accessor for CircleTrustAckEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10056EBB8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    sub_10056C88C(*(void *)(v0 + 72));
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 48);
    *(void *)(v0 + 144) = *(void *)(*(void *)(v0 + 40) + 112);
    swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v9 = v8 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    *(unsigned char *)(v0 + 278) = *(unsigned char *)v9;
    *(void *)(v0 + 152) = *(void *)(v9 + 8);
    *(void *)(v0 + 160) = *(void *)(v9 + 16);
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10056ED9C, v11, v10);
  }
  else
  {
    sub_10056FFFC(3, v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_10056ED9C()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  sub_100CE44A4(v1, *(unsigned __int8 *)(v0 + 278), *(void *)(v0 + 152), *(void *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10056EE44, v4, 0);
}

uint64_t sub_10056EE44()
{
  sub_100571388(*(void *)(v0 + 72), type metadata accessor for CircleTrustAcceptEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10056EEF4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    sub_10056CC00(*(void *)(v0 + 64));
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 48);
    *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 40) + 112);
    swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v2, v7);
    uint64_t v9 = v8 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    *(unsigned char *)(v0 + 279) = *(unsigned char *)v9;
    *(void *)(v0 + 176) = *(void *)(v9 + 8);
    *(void *)(v0 + 184) = *(void *)(v9 + 16);
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10056F0DC, v11, v10);
  }
  else
  {
    sub_10056FFFC(4, v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_10056F0DC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  sub_100CE8340(v1, *(unsigned __int8 *)(v0 + 279), *(void *)(v0 + 176), *(void *)(v0 + 184));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10056F184, v4, 0);
}

uint64_t sub_10056F184()
{
  sub_100571388(*(void *)(v0 + 64), type metadata accessor for CircleTrustDeclineEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10056F234()
{
  uint64_t v1 = v0[2];
  if (v1 == 1)
  {
    uint64_t v2 = sub_10056CF74();
    v0[24] = v2;
    uint64_t v5 = v2;
    uint64_t v6 = v0[6];
    uint64_t v7 = v6 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 16);
    char v10 = *(unsigned char *)v7;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[25] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10056F3D8;
    return sub_100CE9774(v5, v10, v8, v9);
  }
  else
  {
    sub_10056FFFC(5, v1, v0[3], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10056F3D8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10056F588()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    *(void *)(v0 + 208) = sub_10056D1F0();
    uint64_t v4 = *(void *)(v0 + 48);
    *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 40) + 112);
    swift_getObjectType();
    uint64_t v5 = v4 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    *(unsigned char *)(v0 + 280) = *(unsigned char *)v5;
    *(void *)(v0 + 224) = *(void *)(v5 + 8);
    *(void *)(v0 + 232) = *(void *)(v5 + 16);
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10056F724, v7, v6);
  }
  else
  {
    sub_10056FFFC(6, v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_10056F724()
{
  sub_100CEC7E8(*(void *)(v0 + 208));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10056F7D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    sub_10056D46C(*(void *)(v0 + 56));
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 56);
    *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 40) + 112);
    swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v9 = v8 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    *(unsigned char *)(v0 + 281) = *(unsigned char *)v9;
    *(void *)(v0 + 248) = *(void *)(v9 + 8);
    *(void *)(v0 + 256) = *(void *)(v9 + 16);
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10056F9BC, v11, v10);
  }
  else
  {
    sub_10056FFFC(7, v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_10056F9BC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  sub_100CED680(v1, *(unsigned __int8 *)(v0 + 281), *(void *)(v0 + 248), *(void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10056FA64, v4, 0);
}

uint64_t sub_10056FA64()
{
  sub_100571388(*(void *)(v0 + 56), type metadata accessor for CircleTrustRequestEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10056FB14()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10056FCA4()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10056FE9C(uint64_t a1)
{
  type metadata accessor for MessagingMessageContext();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v11 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  char v8 = *(unsigned char *)(v1 + 32);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001D2E4;
  return sub_10056E1BC(a1, v3, v4, v8, v11, v5, v6, v7);
}

void sub_10056FFFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_101636B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E010);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v9 = String.init<A>(describing:)();
    sub_1008FA0F0(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    *(_WORD *)(v8 + 12) = 2048;
    sub_10001CFB8(a3, a4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001CFB8(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Unsupported version of %{public}s: %ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
  }
}

uint64_t sub_10057027C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 264) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v6 + 56) = swift_task_alloc();
  *(void *)(v6 + 64) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 72) = v7;
  *(void *)(v6 + 80) = *(void *)(v7 - 8);
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 96) = swift_task_alloc();
  *(void *)(v6 + 104) = type metadata accessor for CircleTrustEnvelopeV1(0);
  *(void *)(v6 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1005703C8, v5, 0);
}

uint64_t sub_1005703C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    sub_10056C1A4(*(void *)(v0 + 112));
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(int **)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v25 = *(void *)(v0 + 40);
    *(void *)(v0 + 120) = *(void *)(*(void *)(v0 + 48) + 112);
    swift_getObjectType();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v12(v5, v2, v9);
    v12(v8, v2 + v6[6], v9);
    sub_1003C5E38(v2 + v6[7], v10);
    sub_1003C5E38(v2 + v6[5], v11);
    uint64_t v13 = (void *)(v2 + v6[8]);
    *(void *)(v0 + 128) = *v13;
    *(void *)(v0 + 136) = v13[1];
    uint64_t v14 = (void *)(v2 + v6[9]);
    *(void *)(v0 + 144) = *v14;
    *(void *)(v0 + 152) = v14[1];
    *(_DWORD *)(v0 + 256) = *(_DWORD *)(v2 + v6[10]);
    *(_DWORD *)(v0 + 260) = *(_DWORD *)(v2 + v6[11]);
    uint64_t v15 = (void *)(v2 + v6[12]);
    *(void *)(v0 + 160) = *v15;
    *(void *)(v0 + 168) = v15[1];
    *(void *)(v0 + 176) = *(void *)(v2 + v6[13]);
    uint64_t v16 = (void *)(v2 + v6[14]);
    *(void *)(v0 + 184) = *v16;
    *(void *)(v0 + 192) = v16[1];
    uint64_t v17 = type metadata accessor for MessagingMessageContext();
    uint64_t v18 = (void *)(v25 + *(int *)(v17 + 48));
    *(void *)(v0 + 200) = *v18;
    *(void *)(v0 + 208) = v18[1];
    uint64_t v19 = v25 + *(int *)(v17 + 24);
    *(unsigned char *)(v0 + 265) = *(unsigned char *)v19;
    *(void *)(v0 + 216) = *(void *)(v19 + 8);
    *(void *)(v0 + 224) = *(void *)(v19 + 16);
    *(void *)(v0 + 232) = *(void *)(v2 + v6[16]);
    *(unsigned char *)(v0 + 266) = *(unsigned char *)(v2 + v6[17]);
    uint64_t v20 = (uint64_t *)(v2 + v6[15]);
    uint64_t v21 = *v20;
    *(void *)(v0 + 240) = *v20;
    unint64_t v22 = v20[1];
    *(void *)(v0 + 248) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v21, v22);
    uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1005706FC, v24, v23);
  }
  else
  {
    sub_10056FFFC(*(unsigned __int8 *)(v0 + 264), v1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_1005706FC()
{
  uint64_t v1 = *(void *)(v0 + 240);
  unint64_t v2 = *(void *)(v0 + 248);
  unint64_t v8 = *(void *)(v0 + 88);
  unint64_t v9 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 72);
  unint64_t v7 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 48);
  sub_100CDD1E0(v9, v8, v7, v6, *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(_DWORD *)(v0 + 256), *(_DWORD *)(v0 + 260), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 200), *(void *)(v0 + 208), *(unsigned char *)(v0 + 265), *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    *(unsigned char *)(v0 + 266),
    v1,
    v2);
  sub_10001CFB8(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v6, &qword_101638CF0);
  sub_10001DAB4(v7, &qword_101638CF0);
  uint64_t v4 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  v4(v8, v10);
  v4(v9, v10);
  return _swift_task_switch(sub_100570890, v11, 0);
}

uint64_t sub_100570890()
{
  sub_100571388(*(void *)(v0 + 112), type metadata accessor for CircleTrustEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100570940(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 32) = a2;
  *(unsigned char *)(v6 + 129) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 72) = v7;
  *(void *)(v6 + 80) = *(void *)(v7 - 8);
  *(void *)(v6 + 88) = swift_task_alloc();
  type metadata accessor for DelegatedCircleTrustStopEnvelopeV1(0);
  *(void *)(v6 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100570A38, v5, 0);
}

uint64_t sub_100570A38()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 1)
  {
    if (*(unsigned char *)(v0 + 129) == 8)
    {
      sub_10056D7E0(*(void *)(v0 + 96));
      uint64_t v3 = *(void *)(v0 + 88);
      uint64_t v2 = *(void *)(v0 + 96);
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 56);
      *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 64) + 112);
      swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v3, v2, v18);
      uint64_t v21 = v20 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
      *(unsigned char *)(v0 + 130) = *(unsigned char *)v21;
      *(void *)(v0 + 112) = *(void *)(v21 + 8);
      *(void *)(v0 + 120) = *(void *)(v21 + 16);
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      return _swift_task_switch(sub_100570E08, v22, v23);
    }
    if (qword_101636B88 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 40);
    unint64_t v4 = *(void *)(v0 + 48);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E010);
    sub_1000361E0(v5, v4);
    sub_1000361E0(v5, v4);
    sub_1000361E0(v5, v4);
    sub_1000361E0(v5, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = *(void *)(v0 + 40);
    unint64_t v10 = *(void *)(v0 + 48);
    if (v9)
    {
      char v12 = *(unsigned char *)(v0 + 129);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      *(unsigned char *)(v0 + 128) = v12;
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v0 + 16) = sub_1008FA0F0(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v11, v10);
      sub_10001CFB8(v11, v10);
      *(_WORD *)(v13 + 12) = 2048;
      sub_10001CFB8(v11, v10);
      *(void *)(v0 + 24) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001CFB8(v11, v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unhandled message type of %{public}s: %ld", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(*(void *)(v0 + 40), *(void *)(v0 + 48));
      sub_10001CFB8(v11, v10);
      sub_10001CFB8(v11, v10);
      sub_10001CFB8(v11, v10);
    }
  }
  else
  {
    sub_10056FFFC(*(unsigned __int8 *)(v0 + 129), v1, *(void *)(v0 + 40), *(void *)(v0 + 48));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100570E08()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  sub_100CF2DEC(v1, *(unsigned __int8 *)(v0 + 130), *(void *)(v0 + 112), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100570EAC, v4, 0);
}

uint64_t sub_100570EAC()
{
  sub_100571388(*(void *)(v0 + 96), type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100570F34()
{
  unint64_t result = qword_101648BC8;
  if (!qword_101648BC8)
  {
    sub_10000592C(&qword_101648BC0);
    sub_100572018(&qword_101648BD0, (void (*)(uint64_t))type metadata accessor for CircleTrustEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648BC8);
  }
  return result;
}

unint64_t sub_100570FD8()
{
  unint64_t result = qword_101648BF0;
  if (!qword_101648BF0)
  {
    sub_10000592C(&qword_1016481C0);
    sub_100572018(&qword_101648BF8, (void (*)(uint64_t))type metadata accessor for CircleTrustAckEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648BF0);
  }
  return result;
}

unint64_t sub_10057107C()
{
  unint64_t result = qword_101648C10;
  if (!qword_101648C10)
  {
    sub_10000592C(&qword_101648C08);
    sub_100572018(&qword_101639EA8, (void (*)(uint64_t))type metadata accessor for CircleTrustAcceptEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C10);
  }
  return result;
}

unint64_t sub_100571120()
{
  unint64_t result = qword_101648C20;
  if (!qword_101648C20)
  {
    sub_10000592C(&qword_101647F70);
    sub_100572018(&qword_10163D788, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C20);
  }
  return result;
}

uint64_t sub_1005711C4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10057123C()
{
  unint64_t result = qword_101648C30;
  if (!qword_101648C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C30);
  }
  return result;
}

unint64_t sub_100571290()
{
  unint64_t result = qword_101648C48;
  if (!qword_101648C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C48);
  }
  return result;
}

unint64_t sub_1005712E4()
{
  unint64_t result = qword_101648C60;
  if (!qword_101648C60)
  {
    sub_10000592C(&qword_101648C58);
    sub_100572018(&qword_101648C68, (void (*)(uint64_t))type metadata accessor for CircleTrustRequestEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C60);
  }
  return result;
}

uint64_t sub_100571388(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1005713E8()
{
  unint64_t result = qword_101648C80;
  if (!qword_101648C80)
  {
    sub_10000592C(&qword_101648C78);
    sub_100572018(&qword_101648C88, (void (*)(uint64_t))type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C80);
  }
  return result;
}

unint64_t sub_10057148C()
{
  unint64_t result = qword_101648C98;
  if (!qword_101648C98)
  {
    sub_10000592C(&qword_1016481E0);
    sub_100572018(&qword_101648CA0, (void (*)(uint64_t))type metadata accessor for PeerTrustAckEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648C98);
  }
  return result;
}

unint64_t sub_100571530()
{
  unint64_t result = qword_101648CB0;
  if (!qword_101648CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648CB0);
  }
  return result;
}

unint64_t sub_100571584()
{
  unint64_t result = qword_101648CD0;
  if (!qword_101648CD0)
  {
    sub_10000592C(&qword_101648220);
    sub_100572018(&qword_101648CD8, (void (*)(uint64_t))type metadata accessor for SecureLocationsKeyUpdateEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648CD0);
  }
  return result;
}

uint64_t sub_100571628(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100571678()
{
  unint64_t result = qword_101648D00;
  if (!qword_101648D00)
  {
    sub_10000592C(&qword_101648CF8);
    sub_100572018(&qword_101648D08, (void (*)(uint64_t))type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D00);
  }
  return result;
}

unint64_t sub_10057171C()
{
  unint64_t result = qword_10166F9B0;
  if (!qword_10166F9B0)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    sub_100572018((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166F9B0);
  }
  return result;
}

unint64_t sub_1005717C0()
{
  unint64_t result = qword_101648D18;
  if (!qword_101648D18)
  {
    sub_10000592C(&qword_101648080);
    sub_100572018(&qword_101648D20, (void (*)(uint64_t))type metadata accessor for LegacyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D18);
  }
  return result;
}

unint64_t sub_100571864()
{
  unint64_t result = qword_101648D30;
  if (!qword_101648D30)
  {
    sub_10000592C(&qword_1016480B0);
    sub_100572018(&qword_101648D38, (void (*)(uint64_t))type metadata accessor for FamilyShareEnvelopeV1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D30);
  }
  return result;
}

unint64_t sub_100571908()
{
  unint64_t result = qword_101648D48;
  if (!qword_101648D48)
  {
    sub_10000592C(&qword_101648100);
    sub_100572018(&qword_101648D50, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D48);
  }
  return result;
}

unint64_t sub_1005719AC()
{
  unint64_t result = qword_101648D60;
  if (!qword_101648D60)
  {
    sub_10000592C(&qword_1016480D8);
    sub_100572018(&qword_101648D68, (void (*)(uint64_t))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D60);
  }
  return result;
}

unint64_t sub_100571A50()
{
  unint64_t result = qword_101648D80;
  if (!qword_101648D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D80);
  }
  return result;
}

unint64_t sub_100571AA4()
{
  unint64_t result = qword_101648D90;
  if (!qword_101648D90)
  {
    sub_10000592C(&qword_101647EF0);
    sub_100572018(&qword_101648D98, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648D90);
  }
  return result;
}

unint64_t sub_100571B48()
{
  unint64_t result = qword_101648DA0;
  if (!qword_101648DA0)
  {
    sub_10000592C(&qword_10163A040);
    sub_100572018(&qword_101660D70, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648DA0);
  }
  return result;
}

unint64_t sub_100571BEC()
{
  unint64_t result = qword_101648DB0;
  if (!qword_101648DB0)
  {
    sub_10000592C(&qword_101648138);
    sub_100572018(&qword_101648DB8, (void (*)(uint64_t))type metadata accessor for LegacySelfBeaconingKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648DB0);
  }
  return result;
}

unint64_t sub_100571C90()
{
  unint64_t result = qword_101648DC8;
  if (!qword_101648DC8)
  {
    sub_10000592C(&qword_101648178);
    sub_100572018(&qword_101648DD0, (void (*)(uint64_t))type metadata accessor for SelfBeaconingKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648DC8);
  }
  return result;
}

unint64_t sub_100571D34()
{
  unint64_t result = qword_101648DE0;
  if (!qword_101648DE0)
  {
    sub_10000592C(&qword_101648158);
    sub_100572018(&qword_101648DE8, (void (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648DE0);
  }
  return result;
}

unint64_t sub_100571DD8()
{
  unint64_t result = qword_101648DF8;
  if (!qword_101648DF8)
  {
    sub_10000592C(&qword_1016481A0);
    sub_100572018(&qword_101648E00, (void (*)(uint64_t))type metadata accessor for KeyRequestEnvelope);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648DF8);
  }
  return result;
}

unint64_t sub_100571E7C()
{
  unint64_t result = qword_101648E18;
  if (!qword_101648E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E18);
  }
  return result;
}

unint64_t sub_100571ED0()
{
  unint64_t result = qword_101648E20;
  if (!qword_101648E20)
  {
    sub_10000592C(&qword_1016483B0);
    sub_100572018(&qword_101648E28, (void (*)(uint64_t))type metadata accessor for BeaconLocationUpdate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E20);
  }
  return result;
}

unint64_t sub_100571F74()
{
  unint64_t result = qword_101648E30;
  if (!qword_101648E30)
  {
    sub_10000592C(&qword_101657CE0);
    sub_100572018(&qword_101648E38, (void (*)(uint64_t))type metadata accessor for BeaconObservation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E30);
  }
  return result;
}

uint64_t sub_100572018(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100572060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005720C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for PoshAccessoryNonOwnerCommand(uint64_t a1)
{
  return sub_100330E40(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s12searchpartyd28PoshAccessoryNonOwnerCommandOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100330EB4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PoshAccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100330EB4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100330E40(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PoshAccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100330E40(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoshAccessoryNonOwnerCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PoshAccessoryNonOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 246;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1005722BC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 9u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_1005722D4(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(void *)uint64_t result = a2 - 10;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 10;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PoshAccessoryNonOwnerCommand()
{
  return &type metadata for PoshAccessoryNonOwnerCommand;
}

ValueMetadata *sub_1005722FC(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for AccessoryProductDataResponsePayload;
      sub_100573D2C();
      break;
    case 3:
      uint64_t v1 = &type metadata for AccessoryManufacturerNameResponsePayload;
      sub_100573CD8();
      break;
    case 5:
      uint64_t v1 = &type metadata for AccessoryModelNameResponsePayload;
      sub_100573C84();
      break;
    case 7:
      uint64_t v1 = &type metadata for AccessoryCategoryResponsePayload;
      sub_100573C30();
      break;
    case 9:
      uint64_t v1 = &type metadata for AccessoryProtocolVersionResponsePayload;
      sub_100573BDC();
      break;
    case 11:
      uint64_t v1 = &type metadata for AccessoryCapabilityResponsePayload;
      sub_100573B88();
      break;
    case 13:
      uint64_t v1 = &type metadata for AccessoryNetworkIDResponsePayload;
      sub_100573B34();
      break;
    case 15:
      uint64_t v1 = &type metadata for AccessoryFirmwareVersionResponsePayload;
      sub_100573AE0();
      break;
    case 17:
      uint64_t v1 = &type metadata for AccessoryBatteryTypeResponsePayload;
      sub_100573A8C();
      break;
    case 19:
      uint64_t v1 = &type metadata for AccessoryBatteryLevelResponsePayload;
      sub_100573A38();
      break;
    default:
      uint64_t v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
  }
  return v1;
}

uint64_t sub_100572448(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = 1;
  switch(a3)
  {
    case 1:
      uint64_t result = 3;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = 9;
      break;
    case 5:
      uint64_t result = 13;
      break;
    case 6:
      uint64_t result = 17;
      break;
    case 7:
      uint64_t result = 19;
      break;
    case 8:
      uint64_t result = 11;
      break;
    case 9:
      uint64_t result = 15;
      break;
    case 10:
      uint64_t result = byte_101362532[a1];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005724F8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  switch(a3)
  {
    case 1:
      *(void *)(a4 + 24) = &type metadata for AccessoryManufacturerNameResponsePayload;
      unint64_t v8 = sub_100573CD8();
      goto LABEL_7;
    case 2:
      *(void *)(a4 + 24) = &type metadata for AccessoryModelNameResponsePayload;
      unint64_t v8 = sub_100573C84();
LABEL_7:
      *(void *)(a4 + 32) = v8;
      *(void *)a4 = a1;
      *(void *)(a4 + 8) = a2;
      return swift_bridgeObjectRetain();
    case 3:
      *(void *)(a4 + 24) = &type metadata for AccessoryCategoryResponsePayload;
      uint64_t result = sub_100573C30();
      *(void *)(a4 + 32) = result;
      *(void *)a4 = a1;
      return result;
    case 4:
      unint64_t v9 = a1 >> 16;
      unint64_t v10 = a1 >> 24;
      *(void *)(a4 + 24) = &type metadata for AccessoryProtocolVersionResponsePayload;
      uint64_t result = sub_100573BDC();
      goto LABEL_17;
    case 5:
      *(void *)(a4 + 24) = &type metadata for AccessoryNetworkIDResponsePayload;
      uint64_t result = sub_100573B34();
      goto LABEL_15;
    case 6:
      *(void *)(a4 + 24) = &type metadata for AccessoryBatteryTypeResponsePayload;
      uint64_t result = sub_100573A8C();
      goto LABEL_15;
    case 7:
      *(void *)(a4 + 24) = &type metadata for AccessoryBatteryLevelResponsePayload;
      uint64_t result = sub_100573A38();
LABEL_15:
      *(void *)(a4 + 32) = result;
      *(unsigned char *)a4 = a1;
      break;
    case 8:
      *(void *)(a4 + 24) = &type metadata for AccessoryCapabilityResponsePayload;
      uint64_t result = sub_100573B88();
      *(void *)(a4 + 32) = result;
      *(_DWORD *)a4 = a1;
      break;
    case 9:
      unint64_t v9 = a1 >> 16;
      unint64_t v10 = a1 >> 24;
      *(void *)(a4 + 24) = &type metadata for AccessoryFirmwareVersionResponsePayload;
      uint64_t result = sub_100573AE0();
LABEL_17:
      *(void *)(a4 + 32) = result;
      *(_WORD *)a4 = a1;
      *(unsigned char *)(a4 + 2) = v9;
      *(unsigned char *)(a4 + 3) = v10;
      break;
    case 10:
      *(void *)(a4 + 24) = &type metadata for AccessoryGenericPayload;
      uint64_t result = sub_10006258C();
      *(void *)(a4 + 32) = result;
      break;
    default:
      *(void *)(a4 + 24) = &type metadata for AccessoryProductDataResponsePayload;
      *(void *)(a4 + 32) = sub_100573D2C();
      *(void *)a4 = a1;
      *(void *)(a4 + 8) = a2;
      uint64_t result = sub_1000361E0(a1, a2);
      break;
  }
  return result;
}

uint64_t sub_10057272C(void *a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = type metadata accessor for Endianness();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  int v19 = a4;
  unsigned __int8 v12 = sub_100572448(a2, a3, a4);
  LOWORD(v20) = word_10136253C[v12];
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LOWORD(v20) = v22;
  sub_1000BD078((uint64_t)v24, v25);
  uint64_t v13 = v26;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v13)
  {
    switch(v12)
    {
      case 1u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v14 = v20;
        unint64_t v15 = v21;
        uint64_t v22 = v20;
        unint64_t v23 = v21;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100574020();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v14, v15);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
      case 3u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v22 = v20;
        unint64_t v23 = v21;
        sub_1000BD078((uint64_t)v24, v25);
        sub_1003BF030();
        goto LABEL_11;
      case 5u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v22 = v20;
        unint64_t v23 = v21;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573FCC();
LABEL_11:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        swift_bridgeObjectRelease();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
      case 7u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v22 = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573ED0();
        goto LABEL_26;
      case 9u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LODWORD(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573E7C();
        goto LABEL_26;
      case 0xBu:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LODWORD(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573F78();
        goto LABEL_26;
      case 0xDu:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LOBYTE(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573E28();
        goto LABEL_26;
      case 0xFu:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LODWORD(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573F24();
        goto LABEL_26;
      case 0x11u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LOBYTE(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573DD4();
        goto LABEL_26;
      case 0x13u:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LOBYTE(v22) = v20;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573D80();
        goto LABEL_26;
      default:
        sub_1005724F8(a2, a3, v19, (uint64_t)&v22);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          sub_1000BD078((uint64_t)v24, v25);
          sub_1002A576C();
LABEL_26:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        }
        else
        {
LABEL_27:
          sub_1005739E4();
          swift_allocError();
          unsigned char *v16 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
}

__int16 *sub_100572E78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100573764(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100572EA8(void *a1)
{
  return sub_10057272C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100572EC8(unsigned __int16 a1)
{
  int v3 = a1;
  if (!v2 & v1)
  {
    uint64_t result = 1;
    switch(v3)
    {
      case 2051:
        return result;
      case 2052:
        uint64_t result = 3;
        break;
      case 2053:
        uint64_t result = 5;
        break;
      case 2054:
        uint64_t result = 7;
        break;
      case 2055:
        uint64_t result = 9;
        break;
      case 2056:
        uint64_t result = 11;
        break;
      case 2057:
        uint64_t result = 13;
        break;
      case 2058:
        uint64_t result = 15;
        break;
      case 2059:
        uint64_t result = 17;
        break;
      case 2060:
        uint64_t result = 19;
        break;
      default:
        uint64_t result = 20;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 3u:
        uint64_t result = 0;
        break;
      case 4u:
        uint64_t result = 2;
        break;
      case 5u:
        uint64_t result = 4;
        break;
      case 6u:
        uint64_t result = 6;
        break;
      case 7u:
        uint64_t result = 8;
        break;
      case 8u:
        uint64_t result = 10;
        break;
      case 9u:
        uint64_t result = 12;
        break;
      case 0xAu:
        uint64_t result = 14;
        break;
      case 0xBu:
        uint64_t result = 16;
        break;
      case 0xCu:
        uint64_t result = 18;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t sub_100573018(uint64_t a1, uint64_t a2)
{
  sub_10001D010(a2, (uint64_t)v10);
  int v4 = sub_1005722FC(a1);
  sub_10001CD44(v10, v10[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
  if (v4 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100573714);
  }
  switch((char)a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_18;
    case 2:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 1;
    case 3:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 4:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 2;
    case 5:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 6:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 3;
    case 7:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
LABEL_18:
      a1 = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return a1;
    case 8:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 4;
    case 9:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_34;
      }
      goto LABEL_43;
    case 10:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 6;
    case 11:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_34;
      }
      goto LABEL_43;
    case 12:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 5;
    case 13:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_42;
      }
      goto LABEL_43;
    case 14:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 9;
    case 15:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
LABEL_34:
      a1 = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return a1;
    case 16:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 7;
    case 17:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_42;
      }
      goto LABEL_43;
    case 18:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 8;
    case 19:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
LABEL_42:
      a1 = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    default:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        a1 = 0;
      }
      else
      {
LABEL_43:
        sub_1005739E4();
        swift_allocError();
        *char v6 = 0;
        swift_willThrow();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      break;
  }
  return a1;
}

__int16 *sub_100573764(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v16[-4] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  unint64_t v7 = (__int16 *)sub_1000BD078((uint64_t)v18, v19);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v1) {
    goto LABEL_5;
  }
  __int16 v20 = v16[0];
  static Endianness.current.getter();
  unint64_t v7 = &v20;
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v8 = sub_100572EC8(v17[0]);
  if (v8 == 20)
  {
    sub_1005739E4();
    swift_allocError();
    *uint64_t v9 = 1;
    swift_willThrow();
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v7;
  }
  uint64_t v10 = v8;
  uint64_t v11 = sub_1005722FC(v8);
  uint64_t v13 = v12;
  sub_10001D010((uint64_t)a1, (uint64_t)v16);
  _OWORD v17[3] = (uint64_t)v11;
  v17[4] = v13;
  sub_10001D958(v17);
  dispatch thunk of BinaryDecodable.init(from:)();
  sub_10001D010((uint64_t)v17, (uint64_t)v16);
  unint64_t v7 = (__int16 *)sub_100573018(v10, (uint64_t)v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_1005739E4()
{
  unint64_t result = qword_101648E48;
  if (!qword_101648E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E48);
  }
  return result;
}

unint64_t sub_100573A38()
{
  unint64_t result = qword_101648E50;
  if (!qword_101648E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E50);
  }
  return result;
}

unint64_t sub_100573A8C()
{
  unint64_t result = qword_101648E58;
  if (!qword_101648E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E58);
  }
  return result;
}

unint64_t sub_100573AE0()
{
  unint64_t result = qword_101648E60;
  if (!qword_101648E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E60);
  }
  return result;
}

unint64_t sub_100573B34()
{
  unint64_t result = qword_101648E68;
  if (!qword_101648E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E68);
  }
  return result;
}

unint64_t sub_100573B88()
{
  unint64_t result = qword_101648E70;
  if (!qword_101648E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E70);
  }
  return result;
}

unint64_t sub_100573BDC()
{
  unint64_t result = qword_101648E78;
  if (!qword_101648E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E78);
  }
  return result;
}

unint64_t sub_100573C30()
{
  unint64_t result = qword_101648E80;
  if (!qword_101648E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E80);
  }
  return result;
}

unint64_t sub_100573C84()
{
  unint64_t result = qword_101648E88;
  if (!qword_101648E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E88);
  }
  return result;
}

unint64_t sub_100573CD8()
{
  unint64_t result = qword_101648E90;
  if (!qword_101648E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E90);
  }
  return result;
}

unint64_t sub_100573D2C()
{
  unint64_t result = qword_101648E98;
  if (!qword_101648E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648E98);
  }
  return result;
}

unint64_t sub_100573D80()
{
  unint64_t result = qword_101648EA0;
  if (!qword_101648EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EA0);
  }
  return result;
}

unint64_t sub_100573DD4()
{
  unint64_t result = qword_101648EA8;
  if (!qword_101648EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EA8);
  }
  return result;
}

unint64_t sub_100573E28()
{
  unint64_t result = qword_101648EB0;
  if (!qword_101648EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EB0);
  }
  return result;
}

unint64_t sub_100573E7C()
{
  unint64_t result = qword_101648EB8;
  if (!qword_101648EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EB8);
  }
  return result;
}

unint64_t sub_100573ED0()
{
  unint64_t result = qword_101648EC0;
  if (!qword_101648EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EC0);
  }
  return result;
}

unint64_t sub_100573F24()
{
  unint64_t result = qword_101648EC8;
  if (!qword_101648EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EC8);
  }
  return result;
}

unint64_t sub_100573F78()
{
  unint64_t result = qword_101648ED0;
  if (!qword_101648ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648ED0);
  }
  return result;
}

unint64_t sub_100573FCC()
{
  unint64_t result = qword_101648ED8;
  if (!qword_101648ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648ED8);
  }
  return result;
}

unint64_t sub_100574020()
{
  unint64_t result = qword_101648EE0;
  if (!qword_101648EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PoshAccessoryNonOwnerCommand.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100574140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PoshAccessoryNonOwnerCommand.Error()
{
  return &type metadata for PoshAccessoryNonOwnerCommand.Error;
}

unint64_t sub_10057417C()
{
  unint64_t result = qword_101648EE8;
  if (!qword_101648EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648EE8);
  }
  return result;
}

uint64_t sub_1005741D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a4;
  sub_10000588C(&qword_101648FB8);
  v4[23] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_101648FC0);
  v4[24] = v5;
  v4[25] = *(void *)(v5 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101648FC8);
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = sub_10000588C(&qword_101648FD0);
  v4[31] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101648FD8);
  v4[32] = v7;
  v4[33] = *(void *)(v7 - 8);
  v4[34] = swift_task_alloc();
  return _swift_task_switch(sub_1005743B8, 0, 0);
}

uint64_t sub_1005743B8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    int v3 = (uint64_t (__cdecl *)())((char *)&dword_1016392A0 + dword_1016392A0);
    char v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v2;
    *char v2 = v0;
    v2[1] = sub_1005744EC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005744EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005745EC, 0, 0);
}

uint64_t sub_1005745EC()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[36])
  {
    uint64_t v2 = v0[29];
    uint64_t v3 = v0[27];
    uint64_t v4 = v0[28];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Swift::Int v5 = sub_100DF126C((uint64_t)&off_1015A1F58);
    swift_arrayDestroy();
    sub_10000588C(&qword_101648FE0);
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
    AsyncStream.init(_:bufferingPolicy:_:)();
    *(void *)(swift_allocObject() + 16) = v5;
    sub_1005752A8();
    AsyncFilterSequence.init(_:isIncluded:)();
    AsyncFilterSequence.base.getter();
    dispatch thunk of AsyncSequence.makeAsyncIterator()();
    AsyncFilterSequence.isIncluded.getter();
    AsyncFilterSequence.Iterator.init(_:isIncluded:)();
    uint64_t v13 = (char *)&dword_101667798 + dword_101667798;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[37] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100574950;
    return ((uint64_t (*)(void, void, void *))v13)(0, 0, v0 + 20);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170D788);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing DistributedNotificationService!", v11, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100574950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5 = (void *)*v4;
  v5[12] = v4;
  v5[13] = a1;
  v5[14] = a2;
  v5[15] = a3;
  v5[16] = v3;
  v5[38] = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100574A5C, 0, 0);
}

uint64_t sub_100574A5C()
{
  uint64_t v1 = v0[38];
  if (v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    v0[39] = static Transaction.$current.getter();
    v0[21] = v1;
    uint64_t v2 = swift_allocObject();
    v0[40] = v2;
    swift_weakInit();
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[41] = v3;
    sub_10000588C((uint64_t *)&unk_101638DC0);
    *uint64_t v3 = v0;
    v3[1] = sub_100574C7C;
    return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v0 + 42, v0 + 21, &unk_101649000, v2, 0, 0, 0xD000000000000026, 0x80000001014022A0);
  }
  else
  {
    uint64_t v5 = v0[33];
    uint64_t v4 = v0[34];
    uint64_t v6 = v0[32];
    uint64_t v8 = v0[25];
    uint64_t v7 = v0[26];
    uint64_t v9 = v0[24];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100574C7C()
{
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100574DD8, 0, 0);
}

uint64_t sub_100574DD8()
{
  swift_release();
  uint64_t v3 = (char *)&dword_101667798 + dword_101667798;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100574950;
  return ((uint64_t (*)(void, void, uint64_t))v3)(0, 0, v0 + 160);
}

uint64_t sub_100574E98(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return _swift_task_switch(sub_100574EB8, 0, 0);
}

uint64_t sub_100574EB8()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong
    && (uint64_t v2 = *(int **)(Strong + 16),
        *(void *)(v0 + 56) = v2,
        *(void *)(v0 + 64) = *(void *)(Strong + 24),
        sub_1000BD0E8((uint64_t)v2),
        swift_release(),
        v2))
  {
    uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100575020;
    return v6();
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_100575020()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  sub_1000A1534(v1);
  return _swift_task_switch(sub_100575150, 0, 0);
}

uint64_t sub_100575150()
{
  **(unsigned char **)(v0 + 40) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100575170()
{
  sub_1000A1534(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppDeletionObserver()
{
  return self;
}

uint64_t sub_1005751CC(uint64_t a1)
{
  return sub_100D0EEC0(a1, v1);
}

uint64_t sub_1005751D4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057520C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10013067C;
  return sub_100D0F118(a1, v4);
}

unint64_t sub_1005752A8()
{
  unint64_t result = qword_101648FF0;
  if (!qword_101648FF0)
  {
    sub_10000592C(&qword_101648FD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101648FF0);
  }
  return result;
}

uint64_t sub_100575304()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057533C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001D2E4;
  v4[5] = a1;
  v4[6] = v1;
  return _swift_task_switch(sub_100574EB8, 0, 0);
}

uint64_t sub_1005753E8(uint64_t *a1)
{
  uint64_t v44 = type metadata accessor for OwnerSharingCircle();
  uint64_t v2 = __chkstk_darwin(v44);
  uint64_t v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v42 = (uint64_t)v39 - v6;
  __chkstk_darwin(v5);
  uint64_t v43 = (uint8_t *)v39 - v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v39 - v17;
  __chkstk_darwin(v16);
  __int16 v20 = (char *)v39 - v19;
  sub_100B23648(a1, (uint64_t)v20);
  sub_100575B34();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DED0);
    sub_10059B52C((uint64_t)a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v43 = v25 + 4;
      type metadata accessor for UUID();
      uint64_t v41 = v20;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_1008FA0F0(v26, v27, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error getting expiration date for the delegated share for beacon %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v41, v11);
    }
    else
    {

      sub_10059B66C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    }
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
  static Date.trustedNow.getter((uint64_t)v15);
  sub_10059C124((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v15, v11);
  if (v28)
  {
    v29(v18, v11);
    v29(v20, v11);
    return 0;
  }
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170DED0);
  uint64_t v33 = (uint64_t)v43;
  sub_10059B52C((uint64_t)a1, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v41 = v20;
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    v46[0] = v40;
    *(_DWORD *)uint64_t v36 = 136315138;
    v39[1] = v36 + 4;
    sub_10059B52C(v33, v42, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v37 = String.init<A>(describing:)();
    uint64_t v45 = sub_1008FA0F0(v37, v38, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v33, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Expired delegated share: %s", v36, 0xCu);
    uint64_t v30 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v18, v11);
    v29(v41, v11);
  }
  else
  {

    sub_10059B66C(v33, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v29(v18, v11);
    v29(v20, v11);
    return 1;
  }
  return v30;
}

uint64_t sub_100575B34()
{
  uint64_t v0 = type metadata accessor for Calendar.Component();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC2F4(v11[1]);
  double v9 = v8;
  swift_bridgeObjectRelease();
  static Calendar.current.getter();
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Calendar.Component.second(_:), v0);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < 9.22337204e18)
  {
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100575DB0(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[39] = v4;
  v2[40] = *(void *)(v4 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  type metadata accessor for DelegatedShareUseCase.ShareCreationData(0);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[46] = v5;
  v2[47] = *(void *)(v5 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[53] = swift_task_alloc();
  return _swift_task_switch(sub_1005760A4, v1, 0);
}

uint64_t sub_1005760A4()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[54] = v5;
  v0[55] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[56] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10057619C;
  uint64_t v7 = v0[53];
  return sub_100E5C1B8(v7, 1);
}

uint64_t sub_10057619C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 424);
  uint64_t v3 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_1005762D8, v3, 0);
}

uint64_t sub_1005762D8()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 464) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 392);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 664) = v4;
    uint64_t v5 = *(void *)(v3 + 72);
    *(void *)(v0 + 480) = 0;
    *(void *)(v0 + 488) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 472) = v5;
    uint64_t v6 = *(void *)(v0 + 416);
    uint64_t v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    sub_10059B52C(v7, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    double v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v8;
    *double v8 = v0;
    v8[1] = sub_1005767B8;
    uint64_t v9 = *(void *)(v0 + 416);
    uint64_t v10 = *(void *)(v0 + 384);
    return sub_10058AD98(v10, v9);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage[2];
    swift_bridgeObjectRelease();
    if (v12)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
      uint64_t v14 = *(void *)(v0 + 280);
      uint64_t v15 = *(void *)(v0 + 232);
      uint64_t v16 = *(void *)(v0 + 216);
      uint64_t v17 = type metadata accessor for Logger();
      sub_100010324(v17, (uint64_t)qword_10170DED0);
      v13(v14, v16, v15);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = *(void *)(v0 + 280);
      uint64_t v22 = *(void *)(v0 + 232);
      uint64_t v23 = *(void *)(v0 + 240);
      if (v20)
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 141558275;
        *(void *)(v0 + 136) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v24 + 12) = 2081;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_1008FA0F0(v25, v26, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Existing circle found on delegated share create, use that for %{private,mask.hash}s.", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v23 + 8))(*(void *)(v0 + 280), *(void *)(v0 + 232));
      }

      uint64_t v31 = *(void *)(v0 + 456);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v30(v31);
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v27 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v27;
      *unint64_t v27 = v0;
      v27[1] = sub_100576E90;
      uint64_t v28 = *(void *)(v0 + 352);
      uint64_t v29 = *(void *)(v0 + 216);
      return sub_10057AAE8(v28, v29);
    }
  }
}

uint64_t sub_1005767B8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[28];
    int v4 = sub_10057822C;
  }
  else
  {
    uint64_t v5 = v2[28];
    (*(void (**)(void, void))(v2[47] + 8))(v2[48], v2[46]);
    int v4 = sub_1005768F0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005768F0()
{
  uint64_t v35 = v0;
  sub_10059B52C(*(void *)(v0 + 416), *(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 488);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A6F2F4(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 488));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A6F2F4(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 664);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v8 = *(void *)(v0 + 416);
  *(void *)(v2 + 16) = v4 + 1;
  sub_10059B5E8(v7, v2 + ((v6 + 32) & ~v6) + v5 * v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v9 = *(void *)(v0 + 480) + 1;
  if (v9 == *(void *)(v0 + 464))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    if (v10)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
      uint64_t v12 = *(void *)(v0 + 280);
      uint64_t v13 = *(void *)(v0 + 232);
      uint64_t v14 = *(void *)(v0 + 216);
      uint64_t v15 = type metadata accessor for Logger();
      sub_100010324(v15, (uint64_t)qword_10170DED0);
      v11(v12, v14, v13);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 280);
      uint64_t v20 = *(void *)(v0 + 232);
      uint64_t v21 = *(void *)(v0 + 240);
      if (v18)
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 141558275;
        *(void *)(v0 + 136) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 2081;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_1008FA0F0(v23, v24, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Existing circle found on delegated share create, use that for %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v21 + 8))(*(void *)(v0 + 280), *(void *)(v0 + 232));
      }

      uint64_t v33 = *(void *)(v0 + 456);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v32(v33);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v29;
      void *v29 = v0;
      v29[1] = sub_100576E90;
      uint64_t v30 = *(void *)(v0 + 352);
      uint64_t v31 = *(void *)(v0 + 216);
      return sub_10057AAE8(v30, v31);
    }
  }
  else
  {
    *(void *)(v0 + 480) = v9;
    *(void *)(v0 + 488) = v2;
    sub_10059B52C(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))+ *(void *)(v0 + 472) * v9, *(void *)(v0 + 416), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v25;
    void *v25 = v0;
    v25[1] = sub_1005767B8;
    uint64_t v26 = *(void *)(v0 + 416);
    uint64_t v27 = *(void *)(v0 + 384);
    return sub_10058AD98(v27, v26);
  }
}

uint64_t sub_100576E90()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    unint64_t v4 = sub_1005793C0;
  }
  else {
    unint64_t v4 = sub_100576FBC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100576FBC()
{
  uint64_t v1 = v0[45];
  sub_10059B5E8(v0[44], v1, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(unsigned __int8 *)(v0[49] + 80);
    sub_10059B52C(v2 + ((v4 + 32) & ~v4), v0[50], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v3 == 1)
    {
      uint64_t v5 = (void *)swift_task_alloc();
      v0[66] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100577388;
      uint64_t v6 = v0[45];
      return sub_10057BF00(v6);
    }
    sub_10059B66C(v0[50], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[45];
  uint64_t v9 = v0[43];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170DED0);
  sub_10059B52C(v8, v9, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[43];
  if (v13)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    uint64_t v16 = *(void *)(*(void *)(v14 + 8) + 16);
    sub_10059B66C(v14, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
    v0[11] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "incorrect number of delegation circles are being created: %ld", v15, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    sub_10059B66C(v0[43], type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  }
  uint64_t v17 = v0[45];

  sub_10059B66C(v17, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v18 = (uint64_t (*)(void *))v0[1];
  return v18(_swiftEmptyArrayStorage);
}

uint64_t sub_100577388()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    return _swift_task_switch(sub_1005797E4, v3, 0);
  }
  else
  {
    uint64_t v4 = **(void **)(v2 + 360);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v2 + 544) = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_10057750C;
    return sub_100588D50(v4);
  }
}

uint64_t sub_10057750C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_100579B28;
  }
  else {
    uint64_t v4 = sub_100577638;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_100577638()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(uint64_t **)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 328);
  sub_100B23648(v2, v3);
  if (v1)
  {
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 312);
    type metadata accessor for DelegatedShareUseCase();
    sub_100575B34();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    *(void *)(v0 + 560) = v9;
    *(void *)(v0 + 568) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 304), (uint64_t *)&unk_10163AC90);
      p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
      uint64_t v12 = *(void *)(v0 + 288);
      uint64_t v13 = *(void *)(v0 + 232);
      uint64_t v14 = *(void *)(v0 + 216);
      uint64_t v43 = type metadata accessor for Logger();
      sub_100010324(v43, (uint64_t)qword_10170DED0);
      v11(v12, v14, v13);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = *(void *)(v0 + 288);
      uint64_t v19 = *(void *)(v0 + 232);
      uint64_t v20 = *(void *)(v0 + 240);
      if (v17)
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 141558275;
        *(void *)(v0 + 120) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v21 + 12) = 2081;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 128) = sub_1008FA0F0(v22, v23, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid expiration date while creating delegated share for beacon %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v20 + 8))(*(void *)(v0 + 288), *(void *)(v0 + 232));
      }

      sub_10059B594();
      uint64_t v34 = swift_allocError();
      *uint64_t v35 = 9;
      swift_willThrow();
      *(void *)(v0 + 624) = v34;
      if (*((void *)p_ivar_base_size + 355) != -1) {
        swift_once();
      }
      *(void *)(v0 + 632) = sub_100010324(v43, (uint64_t)qword_10170DED0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v38 = 138543362;
        swift_errorRetain();
        uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 112) = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v39 = v40;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failure on delegate share create, server share creation: %{public}@", v38, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 640) = v41;
      void *v41 = v0;
      v41[1] = sub_10057A4A4;
      uint64_t v42 = *(void *)(v0 + 360);
      sub_10057DA64(v42);
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 336);
      uint64_t v25 = *(void *)(v0 + 312);
      uint64_t v26 = *(void *)(v0 + 320);
      uint64_t v27 = *(void *)(v0 + 296);
      uint64_t v28 = *(void *)(v0 + 224);
      (*(void (**)(uint64_t, void, uint64_t))(v26 + 32))(v24, *(void *)(v0 + 304), v25);
      long long v44 = *(_OWORD *)(v28 + 136);
      uint64_t v29 = sub_10001CD44((void *)(v28 + 112), v44);
      *(_OWORD *)(v0 + 40) = v44;
      uint64_t v30 = sub_10001D958((uint64_t *)(v0 + 16));
      (*(void (**)(uint64_t *, void *, void))(*(void *)(v44 - 8) + 16))(v30, v29, v44);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v27, v24, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
      uint64_t v45 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670A98 + dword_101670A98);
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v31;
      *uint64_t v31 = v0;
      v31[1] = sub_100577CD8;
      uint64_t v32 = *(void *)(v0 + 400);
      uint64_t v33 = *(void *)(v0 + 296);
      v45(v32, v28 + 176, v0 + 16, v33);
    }
  }
}

uint64_t sub_100577CD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    sub_10001DAB4(*(void *)(v2 + 296), (uint64_t *)&unk_10163AC90);
    uint64_t v4 = sub_100577FDC;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = v2 + 16;
    uint64_t v7 = *(void *)(v2 + 296);
    uint64_t v8 = *(void *)(v2 + 224);
    sub_10001DAB4(v7, (uint64_t *)&unk_10163AC90);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    uint64_t v4 = sub_100577E28;
    uint64_t v5 = v8;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100577E28()
{
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 360);
  (*(void (**)(void, void))(v0 + 560))(*(void *)(v0 + 336), *(void *)(v0 + 312));
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v5 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain();
  sub_10059B66C(v2, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v5);
}

uint64_t sub_100577FDC()
{
  (*(void (**)(void, void))(v0 + 560))(*(void *)(v0 + 336), *(void *)(v0 + 312));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *(void *)(v0 + 624) = *(void *)(v0 + 584);
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 632) = sub_100010324(v1, (uint64_t)qword_10170DED0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 112) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on delegate share create, server share creation: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10057A4A4;
  uint64_t v8 = *(void *)(v0 + 360);
  return sub_10057DA64(v8);
}

uint64_t sub_10057822C()
{
  uint64_t v24 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[27];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[54];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[29];
  uint64_t v5 = type metadata accessor for Logger();
  v0[74] = sub_100010324(v5, (uint64_t)qword_10170DED0);
  v2(v3, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[34];
  uint64_t v10 = v0[29];
  uint64_t v11 = v0[30];
  if (v8)
  {
    log = v6;
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[24] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = sub_1008FA0F0(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v9, v10);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "\"Deleting share for beacon %{private,mask.hash}s with integrity error %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v0[34], v0[29]);
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[75] = v15;
  BOOL v17 = (void *)swift_task_alloc();
  v0[76] = v17;
  *BOOL v17 = v0;
  v17[1] = sub_1005785C8;
  uint64_t v18 = v0[52];
  return sub_10058DC0C(v18, 0, 0, 3);
}

uint64_t sub_1005785C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_100578BEC;
  }
  else {
    uint64_t v4 = sub_1005786F4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005786F4()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 416);
  swift_errorRelease();
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v2 = *(void *)(v0 + 480) + 1;
  if (v2 == *(void *)(v0 + 464))
  {
    uint64_t v3 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    if (v4)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
      uint64_t v6 = *(void *)(v0 + 280);
      uint64_t v7 = *(void *)(v0 + 232);
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170DED0);
      v5(v6, v8, v7);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = *(void *)(v0 + 280);
      uint64_t v14 = *(void *)(v0 + 232);
      uint64_t v15 = *(void *)(v0 + 240);
      if (v12)
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 141558275;
        *(void *)(v0 + 136) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 12) = 2081;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_1008FA0F0(v17, v18, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Existing circle found on delegated share create, use that for %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 280), *(void *)(v0 + 232));
      }

      uint64_t v27 = *(void *)(v0 + 456);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v26(v27);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_100576E90;
      uint64_t v24 = *(void *)(v0 + 352);
      uint64_t v25 = *(void *)(v0 + 216);
      return sub_10057AAE8(v24, v25);
    }
  }
  else
  {
    *(void *)(v0 + 480) = v2;
    sub_10059B52C(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))+ *(void *)(v0 + 472) * v2, *(void *)(v0 + 416), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1005767B8;
    uint64_t v20 = *(void *)(v0 + 416);
    uint64_t v21 = *(void *)(v0 + 384);
    return sub_10058AD98(v21, v20);
  }
}

uint64_t sub_100578BEC()
{
  uint64_t v45 = v0;
  (*(void (**)(void, void, void))(v0 + 432))(*(void *)(v0 + 264), *(void *)(v0 + 216), *(void *)(v0 + 232));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    uint64_t v42 = *(void *)(v0 + 416);
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v40 = (void *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(void *)(v0 + 168) = 1752392040;
    uint64_t v44 = v41;
    *(_DWORD *)uint64_t v5 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 176) = sub_1008FA0F0(v6, v7, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v39(v3, v4);
    *(_WORD *)(v5 + 22) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 184) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v40 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "\"Failed to delete share for beacon %{private,mask.hash}s with integrity error %{public}@.", (uint8_t *)v5, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v9 = v42;
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    uint64_t v11 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v13 = *(void *)(v0 + 232);

    swift_errorRelease();
    swift_errorRelease();
    v10(v12, v13);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v9 = v11;
  }
  sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(void *)(v0 + 480) + 1;
  if (v14 == *(void *)(v0 + 464))
  {
    uint64_t v15 = *(void *)(v0 + 488);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
      uint64_t v18 = *(void *)(v0 + 280);
      uint64_t v19 = *(void *)(v0 + 232);
      uint64_t v20 = *(void *)(v0 + 216);
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170DED0);
      v17(v18, v20, v19);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      uint64_t v25 = *(void *)(v0 + 280);
      uint64_t v26 = *(void *)(v0 + 232);
      uint64_t v27 = *(void *)(v0 + 240);
      if (v24)
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 141558275;
        *(void *)(v0 + 136) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2081;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_1008FA0F0(v29, v30, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Existing circle found on delegated share create, use that for %{private,mask.hash}s.", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v27 + 8))(*(void *)(v0 + 280), *(void *)(v0 + 232));
      }

      uint64_t v43 = *(void *)(v0 + 456);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v38 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v38(v43);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v35;
      *uint64_t v35 = v0;
      v35[1] = sub_100576E90;
      uint64_t v36 = *(void *)(v0 + 352);
      uint64_t v37 = *(void *)(v0 + 216);
      return sub_10057AAE8(v36, v37);
    }
  }
  else
  {
    *(void *)(v0 + 480) = v14;
    sub_10059B52C(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 664) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))+ *(void *)(v0 + 472) * v14, *(void *)(v0 + 416), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_1005767B8;
    uint64_t v32 = *(void *)(v0 + 416);
    uint64_t v33 = *(void *)(v0 + 384);
    return sub_10058AD98(v33, v32);
  }
}

uint64_t sub_1005793C0()
{
  uint64_t v21 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[54];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[27];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[32];
  uint64_t v11 = v0[29];
  uint64_t v10 = v0[30];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failure on delegated share create for %{private,mask.hash}s, data preparing: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[32], v0[29]);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1005797E4()
{
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DED0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share create, iCloud data update: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[50];
  uint64_t v8 = v0[45];

  sub_10059B594();
  swift_allocError();
  *uint64_t v9 = 1;
  swift_willThrow();
  swift_errorRelease();
  sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10059B66C(v8, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100579B28()
{
  uint64_t v62 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v57 = type metadata accessor for Logger();
  sub_100010324(v57, (uint64_t)qword_10170DED0);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  log = v5;
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 232);
  if (v7)
  {
    uint64_t v11 = swift_slowAlloc();
    char v56 = (void *)swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    *(void *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v12, v13, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v56 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v6, "Failed to backup secrets to disk for beacon %{private,mask.hash}s, %{public}@.", (uint8_t *)v11, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v15 = *(uint64_t **)(v0 + 400);
  uint64_t v16 = *(void *)(v0 + 328);
  sub_100B23648(v15, v16);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 312);
  type metadata accessor for DelegatedShareUseCase();
  sub_100575B34();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(void *)(v0 + 560) = v22;
  *(void *)(v0 + 568) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v22(v18, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 304), (uint64_t *)&unk_10163AC90);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    os_log_type_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
    uint64_t v24 = *(void *)(v0 + 288);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 216);
    sub_100010324(v57, (uint64_t)qword_10170DED0);
    v23(v24, v26, v25);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 288);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 240);
    if (v29)
    {
      uint64_t v33 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 141558275;
      *(void *)(v0 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 128) = sub_1008FA0F0(v34, v35, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid expiration date while creating delegated share for beacon %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v32 + 8))(*(void *)(v0 + 288), *(void *)(v0 + 232));
    }

    sub_10059B594();
    uint64_t v47 = swift_allocError();
    *uint64_t v48 = 9;
    swift_willThrow();
    *(void *)(v0 + 624) = v47;
    if (qword_101636B18 != -1) {
      swift_once();
    }
    *(void *)(v0 + 632) = sub_100010324(v57, (uint64_t)qword_10170DED0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138543362;
      swift_errorRetain();
      uint64_t v53 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 112) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v53;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failure on delegate share create, server share creation: %{public}@", v51, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v54;
    *uint64_t v54 = v0;
    v54[1] = sub_10057A4A4;
    uint64_t v55 = *(void *)(v0 + 360);
    return sub_10057DA64(v55);
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 336);
    uint64_t v37 = *(void *)(v0 + 312);
    uint64_t v38 = *(void *)(v0 + 320);
    uint64_t v39 = *(void *)(v0 + 296);
    uint64_t v40 = *(void *)(v0 + 224);
    (*(void (**)(uint64_t, void, uint64_t))(v38 + 32))(v36, *(void *)(v0 + 304), v37);
    *(_OWORD *)logb = *(_OWORD *)(v40 + 136);
    uint64_t v41 = sub_10001CD44((void *)(v40 + 112), (uint64_t)logb[0]);
    *(_OWORD *)(v0 + 40) = *(_OWORD *)logb;
    uint64_t v42 = sub_10001D958((uint64_t *)(v0 + 16));
    (*((void (**)(uint64_t *, void *, os_log_t))logb[0][-1].isa + 2))(v42, v41, logb[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v36, v37);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
    loga = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670A98 + dword_101670A98);
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_100577CD8;
    uint64_t v44 = *(void *)(v0 + 400);
    uint64_t v45 = *(void *)(v0 + 296);
    return loga(v44, v40 + 176, v0 + 16, v45);
  }
}

uint64_t sub_10057A4A4()
{
  uint64_t v2 = (void *)*v1;
  v2[81] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[28];
    return _swift_task_switch(sub_10057A8F4, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[82] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_10057A618;
    uint64_t v5 = v2[45];
    return sub_10057F764(v5);
  }
}

uint64_t sub_10057A618()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  return _swift_task_switch(sub_10057A728, v1, 0);
}

uint64_t sub_10057A728()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[45];
  sub_10059B594();
  swift_allocError();
  *uint64_t v3 = 2;
  swift_willThrow();
  swift_errorRelease();
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10059B66C(v2, type metadata accessor for DelegatedShareUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10057A8F4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[13] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on delegate share create,\niCloud data rollback on share creation failure: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (void *)swift_task_alloc();
  v0[82] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10057A618;
  uint64_t v7 = v0[45];
  return sub_10057F764(v7);
}

uint64_t sub_10057AAE8(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerPeerTrust();
  _OWORD v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = sub_10000588C(&qword_10163B9E0);
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BeaconNamingRecord();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[20] = v8;
  v3[21] = *(void *)(v8 + 64);
  v3[22] = swift_task_alloc();
  v3[23] = sub_10000588C(&qword_10163B9F0);
  unsigned char v3[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  v3[25] = v9;
  v3[26] = *(void *)(v9 - 8);
  v3[27] = swift_task_alloc();
  return _swift_task_switch(sub_10057AD9C, v2, 0);
}

uint64_t sub_10057AD9C()
{
  uint64_t v1 = *(void *)(v0[6] + 168);
  v0[28] = v1;
  uint64_t v4 = (uint64_t (*)(char, uint64_t))((char *)&dword_101670AA0 + dword_101670AA0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10057AE50;
  return v4(3, v1);
}

uint64_t sub_10057AE50(__int16 a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(_WORD *)(*(void *)v1 + 340) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10057AF68, v2, 0);
}

uint64_t sub_10057AF68()
{
  if ((*(_WORD *)(v0 + 340) & 0x101) != 0)
  {
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 24) = 18;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10059C124((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 224);
    return _swift_task_switch(sub_10057B114, v3, 0);
  }
}

uint64_t sub_10057B114()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 40);
  *(void *)(v0 + 240) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 336) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 264) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 272) = v10;
  *(void *)(v0 + 280) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_10057B228, 0, 0);
}

uint64_t sub_10057B228()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v2;
  v3[3] = sub_10059C068;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10057B330;
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_10057B330()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10057B480, v1, 0);
}

uint64_t sub_10057B480()
{
  uint64_t v1 = v0[24];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[26] + 48))(v1, 1, v0[25]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    sub_10059B594();
    swift_allocError();
    *uint64_t v2 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[28];
    sub_10059B5E8(v1, v0[27], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return _swift_task_switch(sub_10057B61C, v5, 0);
  }
}

uint64_t sub_10057B61C()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 272);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 40);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 336) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 336);
  *(void *)(v0 + 304) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 312) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_10057B70C, 0, 0);
}

uint64_t sub_10057B70C()
{
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v2;
  v3[3] = sub_10059C084;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10057B810;
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_10057B810()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10057B960, v1, 0);
}

uint64_t sub_10057B960()
{
  uint64_t v37 = v0;
  uint64_t v1 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[17] + 48))(v1, 1, v0[16]) == 1)
  {
    sub_10059B66C(v0[27], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v1, &qword_10163B9E0);
    sub_10059B594();
    swift_allocError();
    *uint64_t v2 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v4 = v0[12];
    uint64_t v3 = (_OWORD *)v0[13];
    uint64_t v5 = (int *)v0[10];
    sub_10059B5E8(v1, v0[18], (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v34 = (char *)v3 + v5[5];
    UUID.init()();
    type metadata accessor for PeerCommunicationIdentifier();
    swift_storeEnumTagMultiPayload();
    sub_100D272C4((uint64_t *)&v36);
    *uint64_t v3 = xmmword_101348180;
    *((unsigned char *)v3 + v5[6]) = 1;
    uint64_t v6 = (void *)((char *)v3 + v5[8]);
    *uint64_t v6 = 6448503;
    v6[1] = 0xE300000000000000;
    *(_OWORD *)((char *)v3 + v5[9]) = v36;
    *((unsigned char *)v3 + v5[10]) = 1;
    sub_10059B52C((uint64_t)v3, v4, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    unint64_t v7 = sub_100A6F84C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v9 = *(void *)(v7 + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v9 >= v8 >> 1) {
      unint64_t v7 = sub_100A6F84C(v8 > 1, v9 + 1, 1, v7);
    }
    uint64_t v33 = (void (*)(char *, uint64_t, uint64_t))v0[34];
    uint64_t v10 = (void (*)(uint64_t, char *, uint64_t))v0[31];
    uint64_t v11 = v0[22];
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v15 = v0[11];
    uint64_t v14 = v0[12];
    uint64_t v17 = (int *)v0[7];
    uint64_t v16 = v0[8];
    unint64_t v31 = v7;
    uint64_t v32 = v0[5];
    *(void *)(v7 + 16) = v9 + 1;
    sub_10059B5E8(v14, v7+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    v10(v11, v34, v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v36 = _swiftEmptyDictionarySingleton;
    sub_10016CA2C(1u, v11, isUniquelyReferenced_nonNull_native);
    uint64_t v35 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_10000588C(&qword_101657700);
    unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101342130;
    uint64_t v21 = (char *)(v20 + v19);
    UUID.init()();
    *(_OWORD *)uint64_t v21 = xmmword_101348180;
    v33(&v21[v17[5]], v11, v13);
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v10)(&v21[v17[6]], v32, v13);
    v21[v17[7]] = 3;
    *(void *)&v21[v17[8]] = v35;
    v21[v17[9]] = 1;
    if (!*(void *)(v20 + 16))
    {
      __break(1u);
      return result;
    }
    sub_10059B52C((uint64_t)v21, v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v23 = sub_100614F70();
    uint64_t v24 = v0[27];
    uint64_t v26 = v23;
    uint64_t v27 = v0[18];
    uint64_t v28 = v0[13];
    BOOL v29 = (uint64_t *)v0[4];
    sub_10059B66C(v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059B66C(v28, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v30 = type metadata accessor for DelegatedShareUseCase.ShareCreationData(0);
    sub_10059B5E8(v24, (uint64_t)v29 + *(int *)(v30 + 28), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10059B5E8(v27, (uint64_t)v29 + *(int *)(v30 + 32), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t *v29 = v26;
    v29[1] = v20;
    v29[2] = v31;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
  }
  return v25();
}

uint64_t sub_10057BF00(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  void v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_10057C0F0, v1, 0);
}

uint64_t sub_10057C0F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 168);
  *(void *)(v0 + 168) = v1;
  return _swift_task_switch(sub_10057C114, v1, 0);
}

uint64_t sub_10057C114()
{
  *(void *)(v0 + 176) = *(void *)(*(void *)(v0 + 168) + 128);
  return _swift_task_switch(sub_10057C13C, 0, 0);
}

uint64_t sub_10057C13C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10057C218;
  uint64_t v2 = *(void *)(v0 + 176);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10057C218()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10057C314, 0, 0);
}

uint64_t sub_10057C314()
{
  return _swift_task_switch(sub_10057C330, *(void *)(v0 + 168), 0);
}

uint64_t sub_10057C330()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_10057C3A4, 0, 0);
}

uint64_t sub_10057C3A4()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[25] = v3;
  v3[2] = v1;
  v3[3] = sub_100075624;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F10);
  *uint64_t v4 = v0;
  v4[1] = sub_10057C4C0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007562C, v3, v5);
}

uint64_t sub_10057C4C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 216) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10057C61C, v2, 0);
}

uint64_t sub_10057C61C()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_10057C690, 0, 0);
}

uint64_t sub_10057C690()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = sub_100075638;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_10057C7AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059EE64, v3, v5);
}

uint64_t sub_10057C7AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 248) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_10057C91C, v2, 0);
}

uint64_t sub_10057C91C()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v1;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_10059C044, v3);
  uint64_t v6 = v0[21];
  swift_task_dealloc();
  return _swift_task_switch(sub_10057CAAC, v6, 0);
}

uint64_t sub_10057CAAC()
{
  *(void *)(v0 + 256) = *(void *)(*(void *)(v0 + 168) + 128);
  return _swift_task_switch(sub_10057CAD4, 0, 0);
}

uint64_t sub_10057CAD4()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[20];
  uint64_t v3 = swift_task_alloc();
  v0[33] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10057CBCC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10057CBCC()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10057D89C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10057CCE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10057CCE8()
{
  return _swift_task_switch(sub_10057CD04, *(void *)(v0 + 40), 0);
}

uint64_t sub_10057CD04()
{
  uint64_t v70 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v68[17];
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_10059B52C(v5, v68[19], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v7 = v68[18];
      uint64_t v8 = v68[19];
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170DED0);
      sub_10059B52C(v8, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = v68[18];
      if (v12)
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 141558275;
        *(void *)(v14 + 4) = 1752392040;
        *(_WORD *)(v14 + 12) = 2081;
        type metadata accessor for UUID();
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v14 + 14) = sub_1008FA0F0(v15, v16, &v69);
        swift_bridgeObjectRelease();
        sub_10059B66C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Data update on share creation. Create %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10059B66C(v68[18], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_10059B66C(v68[19], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v68[4];
  }
  uint64_t v17 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v68[11];
    uint64_t v20 = v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v21 = *(void *)(v19 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_10059B52C(v20, v68[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v22 = v68[14];
      uint64_t v23 = v68[15];
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170DED0);
      sub_10059B52C(v23, v22, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      uint64_t v28 = v68[14];
      if (v27)
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 141558275;
        *(void *)(v29 + 4) = 1752392040;
        *(_WORD *)(v29 + 12) = 2081;
        type metadata accessor for UUID();
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v29 + 14) = sub_1008FA0F0(v30, v31, &v69);
        swift_bridgeObjectRelease();
        sub_10059B66C(v28, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Data update on peer trust creation. Create %{private,mask.hash}s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10059B66C(v28, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      sub_10059B66C(v68[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v20 += v21;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v32 = v68[27];
  uint64_t v33 = *(void *)(v32 + 16);
  if (v33)
  {
    uint64_t v34 = v68[7];
    uint64_t v35 = v32 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    uint64_t v36 = *(void *)(v34 + 72);
    swift_bridgeObjectRetain();
    uint64_t v37 = "Code";
    uint64_t v66 = v36;
    do
    {
      sub_10059B52C(v35, v68[9], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v39 = v68[8];
      uint64_t v38 = v68[9];
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170DED0);
      sub_10059B52C(v38, v39, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = v68[8];
      if (v43)
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 141558275;
        *(void *)(v45 + 4) = 1752392040;
        *(_WORD *)(v45 + 12) = 2081;
        type metadata accessor for UUID();
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v45 + 14) = sub_1008FA0F0(v46, v47, &v69);
        swift_bridgeObjectRelease();
        sub_10059B66C(v44, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Orphaned Member Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v36 = v66;
        uint64_t v37 = "Code";
        swift_slowDealloc();
      }
      else
      {
        sub_10059B66C(v68[8], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }

      sub_10059B66C(v68[9], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v35 += v36;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = "Code";
  }
  uint64_t v48 = v68[31];
  uint64_t v49 = *(void *)(v48 + 16);
  if (v49)
  {
    uint64_t v50 = v68[11];
    uint64_t v51 = v48 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    uint64_t v52 = *(void *)(v50 + 72);
    swift_bridgeObjectRetain();
    int v65 = *((void *)v37 + 77);
    uint64_t v67 = v52;
    do
    {
      sub_10059B52C(v51, v68[13], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v54 = v68[12];
      uint64_t v53 = v68[13];
      uint64_t v55 = type metadata accessor for Logger();
      sub_100010324(v55, (uint64_t)qword_10170DED0);
      sub_10059B52C(v53, v54, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      char v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = v68[12];
      if (v58)
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = v65;
        *(void *)(v60 + 4) = 1752392040;
        *(_WORD *)(v60 + 12) = 2081;
        type metadata accessor for UUID();
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v60 + 14) = sub_1008FA0F0(v61, v62, &v69);
        swift_bridgeObjectRelease();
        sub_10059B66C(v59, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Orphaned Owner Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v52 = v67;
        swift_slowDealloc();
      }
      else
      {
        sub_10059B66C(v68[12], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      sub_10059B66C(v68[13], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v51 += v52;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
  }
  sub_10001DAB4(v68[20], &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = (uint64_t (*)(void))v68[1];
  return v63();
}

uint64_t sub_10057D89C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_task_dealloc();
  return _swift_task_switch(sub_10057D908, v1, 0);
}

uint64_t sub_10057D908()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10057D980, v1, 0);
}

uint64_t sub_10057D980()
{
  sub_10001DAB4(*(void *)(v0 + 160), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10057DA64(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000588C(&qword_101639E88);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[19] = v6;
  void v2[20] = *(void *)(v6 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_10057DC4C, v1, 0);
}

uint64_t sub_10057DC4C()
{
  uint64_t v1 = *(void *)(v0[7] + 16);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[16];
    uint64_t v18 = v0[15];
    uint64_t v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[23];
      uint64_t v9 = v0[17];
      uint64_t v8 = v0[18];
      sub_10059B52C(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(int *)(v18 + 20), v8);
      sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        uint64_t v3 = v19;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v19;
      }
      uint64_t v12 = v0[23];
      uint64_t v13 = v0[18];
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      uint64_t v19 = v3;
      v6 += v17;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v0[8];
  v0[24] = sub_101158244((uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 168);
  v0[25] = v15;
  return _swift_task_switch(sub_10057DE64, v15, 0);
}

uint64_t sub_10057DE64()
{
  *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 200) + 136);
  swift_retain();
  return _swift_task_switch(sub_10057DED8, 0, 0);
}

uint64_t sub_10057DED8()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[27] = v3;
  v3[2] = v1;
  v3[3] = sub_10008DDF8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_10057DFF0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075640, v3, v5);
}

uint64_t sub_10057DFF0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 232) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10057E160, v2, 0);
}

uint64_t sub_10057E160()
{
  uint64_t v1 = v0[7];
  v0[30] = sub_10059B7C0(v0[29], v0[24]);
  v0[31] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 8);
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[11];
    uint64_t v18 = v0[10];
    uint64_t v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7034(0, v3, 0);
    uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = v0[22];
      uint64_t v9 = v0[18];
      uint64_t v10 = v0[14];
      sub_10059B52C(v6, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v18 + 20), v9);
      sub_10059B66C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        uint64_t v7 = v19;
      }
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v19;
      }
      uint64_t v13 = v0[22];
      uint64_t v14 = v0[18];
      _OWORD v7[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v13, v14);
      uint64_t v19 = v7;
      v6 += v17;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v0[25];
  v0[32] = sub_101158244((uint64_t)v7);
  swift_bridgeObjectRelease();
  v0[3] = _swiftEmptyArrayStorage;
  v0[4] = _swiftEmptyArrayStorage;
  return _swift_task_switch(sub_10057E3B4, v15, 0);
}

uint64_t sub_10057E3B4()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 200) + 136);
  swift_retain();
  return _swift_task_switch(sub_10057E428, 0, 0);
}

uint64_t sub_10057E428()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[25];
  int64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10057E544;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_10057E544()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 288) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_10057E6B4, v2, 0);
}

uint64_t sub_10057E6B4()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 296) = v2;
  if (v2)
  {
    *(_DWORD *)(v0 + 400) = *(_DWORD *)(*(void *)(v0 + 88) + 80);
    *(void *)(v0 + 304) = 0;
    if (*(void *)(v1 + 16))
    {
      unint64_t v3 = 0;
      while (1)
      {
        uint64_t v4 = *(void *)(v0 + 256);
        uint64_t v32 = *(void *)(*(void *)(v0 + 88) + 72);
        sub_10059B52C(v1 + ((*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400)) + v32 * v3, *(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (*(void *)(v4 + 16))
        {
          uint64_t v5 = *(void *)(v0 + 256);
          *(_DWORD *)(v0 + 404) = *(_DWORD *)(*(void *)(v0 + 80) + 20);
          sub_10059C124(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
          unint64_t v8 = v6 & ~v7;
          if ((*(void *)(v5 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v8)) {
            break;
          }
        }
LABEL_9:
        uint64_t v19 = *(void *)(v0 + 296);
        uint64_t v20 = *(void *)(v0 + 304) + 1;
        sub_10059B66C(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (v20 == v19) {
          goto LABEL_17;
        }
        unint64_t v3 = *(void *)(v0 + 304) + 1;
        *(void *)(v0 + 304) = v3;
        uint64_t v1 = *(void *)(v0 + 288);
        if (v3 >= *(void *)(v1 + 16)) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = ~v7;
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v11 = *(void *)(v10 + 72);
      unint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
      *(void *)(v0 + 312) = v12;
      uint64_t v13 = *(void *)(v0 + 256);
      while (1)
      {
        uint64_t v14 = *(void *)(v0 + 168);
        uint64_t v15 = *(void *)(v0 + 144);
        uint64_t v16 = *(void *)(v0 + 152);
        unint64_t v17 = *(void *)(v13 + 48) + v8 * v11;
        *(void *)(v0 + 320) = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v12(v14, v17, v15);
        sub_10059C124((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        if (v18) {
          break;
        }
        uint64_t v13 = *(void *)(v0 + 256);
        unint64_t v8 = (v8 + 1) & v9;
        if (((*(void *)(v13 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v8) & 1) == 0) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_11:
      __break(1u);
    }
    sub_10059B52C(*(void *)(v0 + 104), *(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v21 = *(void *)(v0 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v21 = sub_100A6F2F4(0, *(void *)(v21 + 16) + 1, 1, v21);
    }
    unint64_t v23 = *(void *)(v21 + 16);
    unint64_t v22 = *(void *)(v21 + 24);
    if (v23 >= v22 >> 1) {
      unint64_t v21 = sub_100A6F2F4(v22 > 1, v23 + 1, 1, v21);
    }
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 96);
    unint64_t v26 = (*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400);
    *(void *)(v21 + 16) = v23 + 1;
    sub_10059B5E8(v25, v21 + v26 + v23 * v32, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v0 + 24) = v21;
    BOOL v27 = sub_10057EB08;
    uint64_t v28 = v24;
    goto LABEL_22;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v0 + 248);
  sub_100EDF858(*(void *)(v0 + 240), (uint64_t *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 72));
  if (!v29)
  {
    uint64_t v28 = *(void *)(v0 + 200);
    BOOL v27 = sub_10057F2C0;
LABEL_22:
    return _swift_task_switch(v27, v28, 0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10057EB08()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 104) + *(int *)(v0 + 404);
  *(void *)(v0 + 328) = *(void *)(v2 + 136);
  v1(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 336) = v8;
  *(void *)(v8 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_10057EBF8, 0, 0);
}

uint64_t sub_10057EBF8()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[43] = v3;
  v3[2] = v2;
  v3[3] = sub_10059BFD0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[44] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AD0);
  *uint64_t v4 = v0;
  v4[1] = sub_10057ED10;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008F914, v3, v5);
}

uint64_t sub_10057ED10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 360) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10057EE80, v2, 0);
}

uint64_t sub_10057EE80()
{
  sub_100442CF4(*(void *)(v0 + 360));
LABEL_2:
  while (1)
  {
    unint64_t v1 = *(void *)(v0 + 296);
    uint64_t v2 = *(void *)(v0 + 304) + 1;
    sub_10059B66C(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v2 == v1) {
      break;
    }
    unint64_t v3 = *(void *)(v0 + 304) + 1;
    *(void *)(v0 + 304) = v3;
    uint64_t v4 = *(void *)(v0 + 288);
    if (v3 >= *(void *)(v4 + 16))
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v30 = *(void *)(*(void *)(v0 + 88) + 72);
    sub_10059B52C(v4 + ((*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400)) + v30 * v3, *(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = *(void *)(v0 + 256);
      *(_DWORD *)(v0 + 404) = *(_DWORD *)(*(void *)(v0 + 80) + 20);
      sub_10059C124(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v9 = v7 & ~v8;
      if ((*(void *)(v6 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v9))
      {
        uint64_t v10 = ~v8;
        uint64_t v11 = *(void *)(v0 + 152);
        uint64_t v12 = *(void *)(v11 + 72);
        uint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
        *(void *)(v0 + 312) = v13;
        uint64_t v14 = *(void *)(v0 + 256);
        while (1)
        {
          uint64_t v15 = *(void *)(v0 + 168);
          uint64_t v16 = *(void *)(v0 + 144);
          uint64_t v17 = *(void *)(v0 + 152);
          unint64_t v18 = *(void *)(v14 + 48) + v9 * v12;
          *(void *)(v0 + 320) = (v17 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v13(v15, v18, v16);
          sub_10059C124((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
          if (v19) {
            break;
          }
          uint64_t v14 = *(void *)(v0 + 256);
          unint64_t v9 = (v9 + 1) & v10;
          if (((*(void *)(v14 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v9) & 1) == 0) {
            goto LABEL_2;
          }
        }
        sub_10059B52C(*(void *)(v0 + 104), *(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v1 = *(void *)(v0 + 24);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_15:
          unint64_t v24 = *(void *)(v1 + 16);
          unint64_t v23 = *(void *)(v1 + 24);
          if (v24 >= v23 >> 1) {
            unint64_t v1 = sub_100A6F2F4(v23 > 1, v24 + 1, 1, v1);
          }
          uint64_t v25 = *(void *)(v0 + 200);
          uint64_t v26 = *(void *)(v0 + 96);
          unint64_t v27 = (*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400);
          *(void *)(v1 + 16) = v24 + 1;
          sub_10059B5E8(v26, v1 + v27 + v24 * v30, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          *(void *)(v0 + 24) = v1;
          uint64_t v28 = sub_10057EB08;
          uint64_t v29 = v25;
          goto LABEL_19;
        }
LABEL_23:
        unint64_t v1 = sub_100A6F2F4(0, *(void *)(v1 + 16) + 1, 1, v1);
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v0 + 248);
  sub_100EDF858(*(void *)(v0 + 240), (uint64_t *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 72));
  if (!v20)
  {
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v28 = sub_10057F2C0;
LABEL_19:
    return _swift_task_switch(v28, v29, 0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_10057F2C0()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 200) + 128);
  return _swift_task_switch(sub_10057F2E8, 0, 0);
}

uint64_t sub_10057F2E8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[9];
  uint64_t v3 = swift_task_alloc();
  v0[47] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[48] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10057F3E0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10057F3E0()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10057F604;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10057F4FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10057F4FC()
{
  return _swift_task_switch(sub_10057F518, *(void *)(v0 + 64), 0);
}

uint64_t sub_10057F518()
{
  sub_10001DAB4(*(void *)(v0 + 72), &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10057F604()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10057F670, v1, 0);
}

uint64_t sub_10057F670()
{
  sub_10001DAB4(*(void *)(v0 + 72), &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10057F764(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10057F890, v1, 0);
}

uint64_t sub_10057F890()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 8);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 112) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(*(void *)(v0 + 40) + 168);
    *(void *)(v0 + 120) = v5;
    unint64_t v6 = (*(_DWORD *)(v3 + 80) + 32) & ~(unint64_t)*(_DWORD *)(v3 + 80);
    int v7 = enum case for Connection.TransactionMode.deferred(_:);
    *(_DWORD *)(v0 + 208) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 212) = v7;
    uint64_t v8 = *(void *)(v3 + 72);
    *(void *)(v0 + 136) = 0;
    *(void *)(v0 + 144) = 0;
    *(void *)(v0 + 128) = v8;
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = v1 + v6;
    swift_bridgeObjectRetain();
    sub_10059B52C(v10, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 216) = *(_DWORD *)(v4 + 20);
    return _swift_task_switch(sub_10057F9D0, v5, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_10057F9D0()
{
  *(void *)(v0 + 152) = *(void *)(*(void *)(v0 + 120) + 136);
  swift_retain();
  return _swift_task_switch(sub_10057FA44, 0, 0);
}

uint64_t sub_10057FA44()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[20] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[21] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10057FB5C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10057FB5C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 176) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10057FCCC, v2, 0);
}

uint64_t sub_10057FCCC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 176) + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  *(void *)(v0 + 184) = v1;
  swift_retain();
  swift_release();
  return _swift_task_switch(sub_10057FD54, v1, 0);
}

void sub_10057FD54()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 184) + 112);
  if (!v1)
  {
    sub_1001A149C();
    uint64_t v6 = swift_allocError();
    *(_DWORD *)uint64_t v7 = 2;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
LABEL_9:
    *(void *)(v0 + 200) = v6;
    uint64_t v20 = *(void *)(v0 + 40);
    char v19 = sub_10058016C;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = (unsigned char *)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 20);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_1002B3D78(v4, (unsigned char *)(v0 + 220));
  os_unfair_lock_unlock(v5);
  if (v2) {
    return;
  }
  if ((*(unsigned char *)(v0 + 220) & 1) == 0
    || (sub_10000588C(&qword_10163CEF8), OSAllocatedUnfairLock.callAsFunction<A>(_:)(), (uint64_t v8 = *(void *)(v0 + 24)) == 0))
  {
    sub_1001A149C();
    uint64_t v6 = swift_allocError();
    *(_DWORD *)uint64_t v17 = 2;
    *(unsigned char *)(v17 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_9;
  }
  uint64_t v9 = *(unsigned int *)(v0 + 212);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 96) + *(int *)(v0 + 216);
  uint64_t v14 = *(void *)(v8 + 24);
  swift_retain();
  swift_release();
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret;
  uint64_t v16 = (void *)swift_task_alloc();
  void v16[2] = v15;
  v16[3] = v13;
  v16[4] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104))(v10, v9, v12);
  Connection.transaction(_:block:)();
  *(void *)(v0 + 192) = 0;
  uint64_t v18 = *(void *)(v0 + 40);
  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  char v19 = sub_100580040;
  uint64_t v20 = v18;
LABEL_10:
  _swift_task_switch(v19, v20, 0);
}

uint64_t sub_100580040()
{
  sub_10059B66C(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v1 = *(void *)(v0 + 144) + 1;
  if (v1 == *(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 136) = *(void *)(v0 + 192);
    *(void *)(v0 + 144) = v1;
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 72);
    sub_10059B52C(*(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208))+ *(void *)(v0 + 128) * v1, *(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 216) = *(_DWORD *)(v5 + 20);
    return _swift_task_switch(sub_10057F9D0, v4, 0);
  }
}

uint64_t sub_10058016C()
{
  uint64_t v20 = v0;
  swift_release();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v9 + 4) = 1752392040;
    *(_WORD *)(v9 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v9 + 14) = sub_1008FA0F0(v11, v12, &v19);
    swift_bridgeObjectRelease();
    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v9 + 24) = v13;
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to rollback secrets for share %{private,mask.hash}s, %{public}@.", (uint8_t *)v9, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(void *)(v0 + 144) + 1;
  if (v14 == *(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    *(void *)(v0 + 136) = 0;
    *(void *)(v0 + 144) = v14;
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 72);
    sub_10059B52C(*(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208))+ *(void *)(v0 + 128) * v14, *(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 216) = *(_DWORD *)(v18 + 20);
    return _swift_task_switch(sub_10057F9D0, v17, 0);
  }
}

uint64_t sub_100580558(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v3[36] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[37] = v6;
  v3[38] = *(void *)(v6 + 64);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[43] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[44] = v8;
  v3[45] = *(void *)(v8 + 64);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  return _swift_task_switch(sub_100580780, v2, 0);
}

uint64_t sub_100580780()
{
  uint64_t v21 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[29];
  uint64_t v5 = type metadata accessor for Logger();
  v0[51] = v5;
  v0[52] = sub_100010324(v5, (uint64_t)qword_10170DED0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[53] = v6;
  v0[54] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[50];
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[44];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Start delegated sharing of %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[50], v0[43]);
  }

  v0[55] = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  v0[56] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100580A50;
  uint64_t v18 = v0[29];
  return sub_100575DB0(v18);
}

uint64_t sub_100580A50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[57] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[30];
    return _swift_task_switch(sub_100580C34, v6, 0);
  }
}

uint64_t sub_100580C34()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[35];
  if (*(void *)(v1 + 16))
  {
    sub_10059B52C(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v0[35], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v5(v4, 0, 1, v2);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v5(v0[35], 1, 1, v2);
  }
  v0[58] = v5;
  uint64_t v6 = v0[36];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[35];
  swift_bridgeObjectRelease();
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v0[59] = v9;
  v0[60] = (v7 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v10 = v9(v8, 1, v6);
  uint64_t v11 = v0[35];
  if (v10 == 1)
  {
    sub_10001DAB4(v11, (uint64_t *)&unk_101638D10);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing delegated sharing circle.", v14, 2u);
      swift_slowDealloc();
    }

    sub_10059B594();
    swift_allocError();
    unsigned char *v15 = 5;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    sub_10059B5E8(v11, v0[42], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    Swift::Int v18 = sub_100DF2D10((uint64_t)&off_1015A1140);
    v0[61] = v18;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[62] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100580F4C;
    uint64_t v20 = v0[29];
    return sub_100E59F38(v20, v18);
  }
}

uint64_t sub_100580F4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 504) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100581080, v2, 0);
}

uint64_t sub_100581080()
{
  uint64_t v1 = *(void *)(v0 + 504);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 296) + 80);
    sub_10059B52C(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 272), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 464))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if (v4(v6, 1, v5) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 272), (uint64_t *)&unk_101638D10);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 240);
    type metadata accessor for Transaction();
    v7(v8, v14, v10);
    sub_10059B52C(v11, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v16 = (v25 + *(unsigned __int8 *)(v13 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v26;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v17 + v15, v8, v10);
    sub_10059B5E8(v12, v17 + v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    Swift::Int v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v18;
    *Swift::Int v18 = v0;
    v18[1] = sub_10058210C;
    uint64_t v19 = *(void *)(v0 + 336);
    uint64_t v20 = *(void *)(v0 + 224);
    return sub_10058356C(v20, v19);
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 240);
    sub_10059B5E8(*(void *)(v0 + 272), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001CD44((void *)(v22 + 272), *(void *)(v22 + 296));
    unint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v23;
    *unint64_t v23 = v0;
    v23[1] = sub_1005813BC;
    uint64_t v24 = *(void *)(v0 + 328);
    return sub_1006D102C(v24, 0);
  }
}

uint64_t sub_1005813BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v4 = sub_100581624;
  }
  else {
    uint64_t v4 = sub_1005814E8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005814E8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 40))
  {
    sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016392D0 + dword_1016392D0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100581958;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100581624()
{
  uint64_t v13 = v0;
  uint64_t v1 = (long long *)(v0 + 2);
  sub_10059B52C(v0[41], v0[40], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[40];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v0[24] = 1752392040;
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = sub_1008FA0F0(v7, v8, &v12);
    uint64_t v1 = (long long *)(v0 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to update delegation start in keydrop for shareId: %{private,mask.hash}s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10059B66C(v0[40], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  swift_errorRelease();

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[5])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 7));
    sub_10001CD44(v0 + 7, v0[10]);
    uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016392D0 + dword_1016392D0);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[66] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100581958;
    return v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100581958(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100581A70, v2, 0);
}

uint64_t sub_100581A70()
{
  uint64_t v1 = *(void *)(v0 + 328);
  if (*(void *)(v0 + 536))
  {
    uint64_t v2 = *(void *)(v0 + 296);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    sub_10000588C(&qword_101657700);
    int v3 = *(_DWORD *)(v2 + 80);
    *(_DWORD *)(v0 + 584) = v3;
    unint64_t v4 = (v3 + 32) & ~(unint64_t)v3;
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 544) = v5;
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    sub_10059B52C(v1, v5 + v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100581D6C;
    return sub_100CD8354(v5);
  }
  else
  {
    sub_10059B66C(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 392);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v23 = *(void *)(v0 + 240);
    type metadata accessor for Transaction();
    v8(v9, v15, v11);
    sub_10059B52C(v12, v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    unint64_t v17 = (v22 + *(unsigned __int8 *)(v14 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v23;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v18 + v16, v9, v11);
    sub_10059B5E8(v13, v18 + v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10058210C;
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v21 = *(void *)(v0 + 224);
    return sub_10058356C(v21, v20);
  }
}

uint64_t sub_100581D6C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 560) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v0) {
    unint64_t v4 = sub_1005826A8;
  }
  else {
    unint64_t v4 = sub_100581F04;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100581F04()
{
  uint64_t v1 = v0[41];
  swift_release();
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[44];
  uint64_t v6 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v7 = v0[39];
  uint64_t v17 = v0[45];
  uint64_t v8 = v0[37];
  uint64_t v9 = v0[29];
  uint64_t v18 = v0[30];
  type metadata accessor for Transaction();
  v2(v3, v9, v5);
  sub_10059B52C(v6, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v17 + *(unsigned __int8 *)(v8 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v18;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v3, v5);
  sub_10059B5E8(v7, v12 + v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[71] = v13;
  void *v13 = v0;
  v13[1] = sub_10058210C;
  uint64_t v14 = v0[42];
  uint64_t v15 = v0[28];
  return sub_10058356C(v15, v14);
}

uint64_t sub_10058210C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v4 = sub_100582AC0;
  }
  else {
    uint64_t v4 = sub_100582238;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100582238()
{
  uint64_t v30 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[43];
  uint64_t v5 = v0[32];
  uint64_t v4 = v0[33];
  uint64_t v6 = v0[31];
  uint64_t v8 = v0[28];
  uint64_t v7 = v0[29];
  sub_100010324(v0[51], (uint64_t)qword_10170D788);
  v1(v2, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v12 = v0[48];
  uint64_t v13 = v0[43];
  uint64_t v14 = v0[42];
  uint64_t v15 = v0[32];
  uint64_t v16 = v0[33];
  uint64_t v17 = v0[31];
  if (v11)
  {
    uint64_t v27 = v0[42];
    os_log_type_t type = v10;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558787;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v28(v12, v13);
    *(_WORD *)(v18 + 22) = 2160;
    v0[17] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 32) = 2085;
    sub_10059C124((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[18] = sub_1008FA0F0(v21, v22, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "URL created for beacon %{private,mask.hash}s : %{sensitive,mask.hash}s.", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v23 = v27;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    v28(v12, v13);
    uint64_t v23 = v14;
  }
  sub_10059B66C(v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_1005826A8()
{
  uint64_t v34 = v0;
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 376), *(void *)(v0 + 232), *(void *)(v0 + 344));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v32 = *(void *)(v0 + 328);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)(v0 + 176) = 1752392040;
    uint64_t v33 = v6;
    *(_DWORD *)uint64_t v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v7, v8, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to send delegation start update to sharees for the beacon: %{private,mask.hash}s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_errorRelease();

    uint64_t v9 = v32;
  }
  else
  {
    os_log_type_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 328);
    swift_release();
    swift_errorRelease();

    v10(v11, v12);
    uint64_t v9 = v13;
  }
  sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 312);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v21 = *(void *)(v0 + 232);
  uint64_t v31 = *(void *)(v0 + 240);
  type metadata accessor for Transaction();
  v14(v15, v21, v17);
  sub_10059B52C(v18, v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  unint64_t v22 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v23 = (v30 + *(unsigned __int8 *)(v20 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v31;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v24 + v22, v15, v17);
  sub_10059B5E8(v19, v24 + v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v25;
  void *v25 = v0;
  v25[1] = sub_10058210C;
  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 224);
  return sub_10058356C(v27, v26);
}

uint64_t sub_100582AC0()
{
  uint64_t v15 = v0;
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 368), *(void *)(v0 + 232), *(void *)(v0 + 344));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 368);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 141558531;
    *(void *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_1008FA0F0(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v12(v3, v4);
    *(_WORD *)(v5 + 22) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 152) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure in URL creation for beacon %{private,mask.hash}s %{public}@.", (uint8_t *)v5, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 368), *(void *)(v0 + 344));
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = *(void *)(v0 + 336);
  swift_willThrow();
  sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100582E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, char))((char *)&dword_101665AC0 + dword_101665AC0);
  uint64_t v6 = (void *)swift_task_alloc();
  _OWORD v3[10] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100582F70;
  return v8(a2, 3);
}

uint64_t sub_100582F70()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_101641FB8 + dword_101641FB8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1005830C8;
  uint64_t v4 = *(void *)(v1 + 48);
  return v6(v4);
}

uint64_t sub_1005830C8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100583204, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100583204()
{
  unint64_t v22 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  if (v8)
  {
    log = v6;
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Error while registering APNS token with FindMy service for beacon %{private,mask.hash}s: error: %{public}@", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10058356C(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = type metadata accessor for OwnerSharingCircle();
  _OWORD v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v3[12] = swift_task_alloc();
  type metadata accessor for DelegatedShareUseCase.DelegationURL(0);
  v3[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLComponents();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_1005836DC, v2, 0);
}

uint64_t sub_1005836DC()
{
  sub_10001CD44((void *)(v0[8] + 176), *(void *)(v0[8] + 200));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100583788;
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[7];
  return sub_100C2FC9C(v2, v3);
}

uint64_t sub_100583788()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_100583DC0;
  }
  else {
    uint64_t v4 = sub_1005838B4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005838B4()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v4 = URLComponents.fragment.getter();
  uint64_t v6 = v5;
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[20] = v7;
  v0[21] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v2);
  if (v6)
  {
    uint64_t v8 = UUID.uuidString.getter();
    uint64_t v10 = v9;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[22] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100583C94;
    uint64_t v12 = v0[13];
    return sub_10059A6C0(v12, v4, v6, v8, v10);
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v14 = v0[10];
    uint64_t v15 = v0[7];
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170DED0);
    sub_10059B52C(v15, v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[10];
    if (v19)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error creating URL fragments for delegated sharing for beacon %{private,mask.hash}s).", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10059B66C(v0[10], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    sub_10059B594();
    swift_allocError();
    unsigned char *v24 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_100583C94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_100584294;
  }
  else {
    uint64_t v4 = sub_100583E64;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100583DC0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100583E64()
{
  uint64_t v22 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 16))(v2, v4, v3);
  sub_10059B66C(v4, type metadata accessor for DelegatedShareUseCase.DelegationURL);
  URLComponents.url.getter();
  v1(v2, v3);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10001DAB4(v0[12], &qword_101649E40);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[11];
    uint64_t v9 = v0[7];
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DED0);
    sub_10059B52C(v9, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v0[11];
    if (v13)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_1008FA0F0(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error creating URL components for delegated sharing for beacon %{private,mask.hash}s).", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10059B66C(v0[11], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    sub_10059B594();
    swift_allocError();
    *BOOL v19 = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v18 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v7 + 32))(v0[6], v0[12], v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v18 = (uint64_t (*)(void))v0[1];
  }
  return v18();
}

uint64_t sub_100584294()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100584338(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  v2[28] = type metadata accessor for OwnerSharingCircle();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_100584400, v1, 0);
}

uint64_t sub_100584400()
{
  uint64_t v28 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 264);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315651;
    uint64_t v27 = v25;
    *(void *)(v0 + 184) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101402380, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2160;
    *(void *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 200) = sub_1008FA0F0(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s %{private,mask.hash}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10059B66C(*(void *)(v0 + 264), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v11 = *(void *)(v0 + 208);
  int v12 = *(unsigned __int8 *)(v11 + *(int *)(*(void *)(v0 + 224) + 28));
  sub_10059B52C(v11, *(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v13 = *(void *)(v0 + 256);
  if (v12 == 3)
  {
    int v14 = *(unsigned __int8 *)(v13 + *(int *)(*(void *)(v0 + 224) + 36));
    sub_10059B66C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v14 == 1)
    {
      if (qword_1016375E8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 40))
      {
        sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
        sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
        uint64_t v26 = (uint64_t (__cdecl *)())((char *)&dword_1016393C0 + dword_1016393C0);
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v16;
        void *v16 = v0;
        v16[1] = sub_100584A8C;
        return v26();
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  else
  {
    sub_10059B66C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  sub_10059B52C(*(void *)(v0 + 208), *(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 240);
  if (v19)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 141558275;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 120) = sub_1008FA0F0(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Share %{private,mask.hash}s is not eligible for APS registration.", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10059B66C(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100584A8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100584BA4, v2, 0);
}

uint64_t sub_100584BA4()
{
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[36])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[37] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100584D5C;
    return sub_100E95BA4();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      BOOL v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing apsNotificationService", v6, 2u);
      swift_slowDealloc();
    }

    sub_10059B594();
    swift_allocError();
    *uint64_t v7 = 7;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100584D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 216);
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100584E74, v4, 0);
}

uint64_t sub_100584E74()
{
  if (v0[39] >> 60 == 15)
  {
    sub_10059B594();
    swift_allocError();
    *uint64_t v1 = 8;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(v0[27] + 168);
    v0[40] = v4;
    return _swift_task_switch(sub_100584FA4, v4, 0);
  }
}

uint64_t sub_100584FA4()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 320) + 136);
  swift_retain();
  return _swift_task_switch(sub_100585018, 0, 0);
}

uint64_t sub_100585018()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10058512C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 17, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10058512C()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 224);
  uint64_t v3 = *(void *)(*v0 + 208);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[44] = v1[17];
  uint64_t v5 = v3 + *(int *)(v2 + 20);
  uint64_t v6 = (void *)swift_task_alloc();
  v1[45] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1005852EC;
  return sub_1012E298C(v5);
}

uint64_t sub_1005852EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 216);
  *(void *)(v3 + 368) = a1;
  *(void *)(v3 + 376) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100585420, v4, 0);
}

uint64_t sub_100585420()
{
  BOOL v19 = v0;
  unint64_t v1 = v0[47];
  if (v1 >> 60 == 15) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v0[46];
  }
  if (v1 >> 60 == 15) {
    unint64_t v3 = 0xC000000000000000;
  }
  else {
    unint64_t v3 = v0[47];
  }
  if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3, v0[38], v0[39]))
  {
    sub_10059B52C(v0[26], v0[31], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = v0[38];
    unint64_t v7 = v0[39];
    uint64_t v9 = v0[31];
    if (v6)
    {
      unint64_t v17 = v0[39];
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      v0[21] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[22] = sub_1008FA0F0(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Already registered APS for %{private,mask.hash}s.", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8(v2, v3);
      sub_100037A24(v8, v17);

      swift_release();
    }
    else
    {
      sub_10001CFB8(v2, v3);
      sub_100037A24(v8, v7);
      swift_release();
      sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v0[48] = v13;
    void *v13 = v0;
    v13[1] = sub_1005857A0;
    uint64_t v14 = v0[26];
    return sub_100585D7C(v14);
  }
}

uint64_t sub_1005857A0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v4 = sub_100585998;
  }
  else {
    uint64_t v4 = sub_1005858CC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005858CC()
{
  unint64_t v1 = v0[47];
  uint64_t v2 = v0[38];
  unint64_t v3 = v0[39];
  if (v1 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v0[46];
  }
  if (v1 >> 60 == 15) {
    unint64_t v5 = 0xC000000000000000;
  }
  else {
    unint64_t v5 = v0[47];
  }
  sub_10001CFB8(v4, v5);
  sub_100037A24(v2, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100585998()
{
  uint64_t v27 = v0;
  sub_10059B52C(v0[26], v0[29], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[46];
    unint64_t v4 = v0[47];
    uint64_t v24 = v0[38];
    unint64_t v25 = v0[39];
    uint64_t v5 = v0[29];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v0[18] = 1752392040;
    if (v4 >> 60 == 15) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v3;
    }
    uint64_t v23 = v8;
    unint64_t v9 = 0xC000000000000000;
    if (v4 >> 60 != 15) {
      unint64_t v9 = v4;
    }
    unint64_t v22 = v9;
    uint64_t v26 = v7;
    *(_DWORD *)uint64_t v6 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1008FA0F0(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v6 + 22) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[20] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error while registering APNS token with FindMy service for beacon %{private,mask.hash}s: error: %{public}@", (uint8_t *)v6, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10001CFB8(v23, v22);
    sub_100037A24(v24, v25);
    swift_release();

    swift_errorRelease();
  }
  else
  {
    unint64_t v13 = v0[47];
    uint64_t v15 = v0[38];
    unint64_t v14 = v0[39];
    uint64_t v16 = v0[29];
    if (v13 >> 60 == 15) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v0[46];
    }
    if (v13 >> 60 == 15) {
      unint64_t v18 = 0xC000000000000000;
    }
    else {
      unint64_t v18 = v0[47];
    }
    sub_10001CFB8(v17, v18);
    sub_100037A24(v15, v14);
    swift_release();
    swift_errorRelease();
    sub_10059B66C(v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100585D7C(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  v2[30] = type metadata accessor for OwnerSharingCircle();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[34] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[35] = v3;
  v2[36] = *(void *)(v3 - 8);
  v2[37] = swift_task_alloc();
  type metadata accessor for KeyDropJoinToken(0);
  v2[38] = swift_task_alloc();
  return _swift_task_switch(sub_100585EE4, v1, 0);
}

uint64_t sub_100585EE4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016393C0 + dword_1016393C0);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_100586020;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100586020(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100586138, v2, 0);
}

uint64_t sub_100586138()
{
  uint64_t v1 = v0 + 64;
  if (*(void *)(v0 + 320))
  {
    uint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v4 = *(void *)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CD44((void *)(v2 + 176), *(void *)(v2 + 200));
    uint64_t v5 = *(int *)(v3 + 20);
    *(_DWORD *)(v0 + 448) = v5;
    uint64_t v6 = v4 + v5;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100586378;
    uint64_t v8 = *(void *)(v0 + 304);
    return sub_100CA861C(v8, v6);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DED0);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing apsNotificationService", v13, 2u);
      swift_slowDealloc();
    }

    sub_10059B594();
    swift_allocError();
    *unint64_t v14 = 7;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100586378()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  if (v0) {
    uint64_t v4 = sub_100586610;
  }
  else {
    uint64_t v4 = sub_1005864A4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005864A4()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[38];
  type metadata accessor for SharingCircleKeyManager();
  sub_100C276D0(v2);
  if (v1)
  {
    sub_10059B66C(v0[38], type metadata accessor for KeyDropJoinToken);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[43] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1005866BC;
    return sub_100E95BA4();
  }
}

uint64_t sub_100586610()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005866BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 232);
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005867D4, v4, 0);
}

uint64_t sub_1005867D4()
{
  uint64_t v26 = v0;
  unint64_t v1 = *(void *)(v0 + 360);
  if (v1 >> 60 == 15)
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    sub_10059B52C(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 248);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558275;
      *(void *)(v0 + 176) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 168) = sub_1008FA0F0(v9, v10, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No token to complete APS registration for %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10059B66C(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    uint64_t v20 = *(void *)(v0 + 296);
    uint64_t v19 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 288);
    sub_10059B594();
    swift_allocError();
    *uint64_t v23 = 8;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    sub_10059B66C(v19, type metadata accessor for KeyDropJoinToken);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 352);
    uint64_t v12 = *(int *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 224);
    sub_10001CD44((void *)(*(void *)(v0 + 232) + 112), *(void *)(*(void *)(v0 + 232) + 136));
    sub_10000588C(&qword_101657710);
    uint64_t inited = swift_initStackObject();
    *(void *)(v0 + 368) = inited;
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v1;
    sub_1000361E0(v11, v1);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v15;
    void *v15 = v0;
    v15[1] = sub_100586C0C;
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 304);
    return sub_100174C54(v13 + v12, 4, v16, inited, (uint64_t)_swiftEmptyArrayStorage, v17);
  }
}

uint64_t sub_100586C0C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 384) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 232);
  if (v1)
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    os_log_type_t v6 = sub_100587154;
  }
  else
  {
    *(unsigned char *)(v4 + 452) = a1 & 1;
    swift_setDeallocating();
    swift_arrayDestroy();
    os_log_type_t v6 = sub_100586DA8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100586DA8()
{
  uint64_t v21 = v0;
  if (*(unsigned char *)(v0 + 452) == 1)
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 232) + 168);
    *(void *)(v0 + 392) = v1;
    return _swift_task_switch(sub_10058724C, v1, 0);
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 256);
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    sub_10059B52C(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 256);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558275;
      *(void *)(v0 + 184) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_1008FA0F0(v9, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Server returned error while registering apns token for share %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10059B66C(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    uint64_t v12 = *(void *)(v0 + 352);
    unint64_t v11 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v15 = *(void *)(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 288);
    sub_10059B594();
    swift_allocError();
    *uint64_t v17 = 10;
    swift_willThrow();
    swift_release();
    sub_100037A24(v12, v11);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    sub_10059B66C(v13, type metadata accessor for KeyDropJoinToken);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_100587154()
{
  uint64_t v1 = v0[44];
  unint64_t v2 = v0[45];
  uint64_t v4 = v0[37];
  uint64_t v3 = v0[38];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[36];
  swift_release();
  sub_100037A24(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_10059B66C(v3, type metadata accessor for KeyDropJoinToken);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10058724C()
{
  *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 392) + 136);
  swift_retain();
  return _swift_task_switch(sub_1005872C0, 0, 0);
}

uint64_t sub_1005872C0()
{
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[51] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[52] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1005873D4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 25, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_1005873D4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 424) = *(void *)(v1 + 200);
  return _swift_task_switch(sub_100587530, 0, 0);
}

uint64_t sub_100587530()
{
  uint64_t v1 = *(int *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100587640;
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 272);
  return sub_10065013C(v3 + v1, 0, 1, v8, v6, v7, 2);
}

uint64_t sub_100587640()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10001DAB4(*(void *)(v2 + 272), (uint64_t *)&unk_10163AC90);
    uint64_t v3 = sub_10058778C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 272);
    uint64_t v6 = *(void *)(v2 + 232);
    sub_10001DAB4(v5, (uint64_t *)&unk_10163AC90);
    swift_release();
    uint64_t v3 = sub_1005878F0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10058778C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  return _swift_task_switch(sub_1005877F8, v1, 0);
}

uint64_t sub_1005877F8()
{
  uint64_t v1 = v0[44];
  unint64_t v2 = v0[45];
  uint64_t v4 = v0[37];
  uint64_t v3 = v0[38];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[36];
  swift_release();
  sub_100037A24(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_10059B66C(v3, type metadata accessor for KeyDropJoinToken);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1005878F0()
{
  uint64_t v23 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[33];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[45];
  uint64_t v21 = v0[44];
  uint64_t v9 = v0[37];
  uint64_t v8 = v0[38];
  uint64_t v10 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[33];
  if (v6)
  {
    uint64_t v20 = v0[38];
    uint64_t v19 = v0[37];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Saved APS registration for %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    sub_100037A24(v21, v7);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v19, v10);
    uint64_t v16 = v20;
  }
  else
  {

    swift_release();
    sub_10059B66C(v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100037A24(v21, v7);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v16 = v8;
  }
  sub_10059B66C(v16, type metadata accessor for KeyDropJoinToken);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100587C78(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  _OWORD v3[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[14] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_100587E08, v2, 0);
}

uint64_t sub_100587E08()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[17] = v5;
  v0[18] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  BOOL v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  *BOOL v6 = v0;
  v6[1] = sub_100587F00;
  uint64_t v7 = v0[14];
  return sub_100E5C1B8(v7, 1);
}

uint64_t sub_100587F00(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_10058803C, v3, 0);
}

uint64_t sub_10058803C()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[20];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[12] + 80);
    sub_10059B52C(v1 + ((v2 + 32) & ~v2), v0[16], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v4, v3, 1, v6);
  swift_bridgeObjectRelease();
  sub_10001D074(v4, v5, (uint64_t *)&unk_101638D10);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  uint64_t v9 = v0[15];
  if (v8 == 1)
  {
    sub_10001DAB4(v9, (uint64_t *)&unk_101638D10);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[17];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[8];
    uint64_t v13 = v0[6];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DED0);
    v10(v11, v13, v12);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v19 = v0[9];
    uint64_t v18 = v0[10];
    uint64_t v20 = v0[8];
    if (v17)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v22, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Delegation doesnt exist for beacon %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v19 + 8))(v0[10], v0[8]);
    }

    uint64_t v28 = v0[16];
    sub_10059B594();
    swift_allocError();
    unsigned char *v29 = 5;
    swift_willThrow();
    sub_10001DAB4(v28, (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
  else
  {
    sub_10059B5E8(v9, v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v24 = (void *)swift_task_alloc();
    v0[21] = v24;
    void *v24 = v0;
    v24[1] = sub_100588490;
    uint64_t v25 = v0[13];
    uint64_t v26 = v0[5];
    return sub_10058AD98(v26, v25);
  }
}

uint64_t sub_100588490()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100588680;
  }
  else {
    uint64_t v4 = sub_1005885BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005885BC()
{
  uint64_t v1 = v0[16];
  sub_10059B66C(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100588680()
{
  *(void *)(v0 + 32) = *(void *)(v0 + 176);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 216) == 21)
  {
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v2 = *(void *)(v0 + 88);
    swift_errorRelease();
    uint64_t v3 = v1 + *(int *)(v2 + 20);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100588838;
    return sub_100589CDC(v3);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 104);
    swift_errorRelease();
    swift_willThrow();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v6, (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100588838()
{
  uint64_t v2 = (void *)*v1;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[7];
    return _swift_task_switch(sub_100588BA8, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[25] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1005889B0;
    uint64_t v5 = v2[13];
    uint64_t v6 = v2[5];
    return sub_10058AD98(v6, v5);
  }
}

uint64_t sub_1005889B0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100588C7C;
  }
  else {
    uint64_t v4 = sub_100588ADC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100588ADC()
{
  uint64_t v1 = v0[16];
  sub_10059B66C(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100588BA8()
{
  uint64_t v1 = v0[16];
  sub_10059B66C(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100588C7C()
{
  uint64_t v1 = v0[16];
  sub_10059B66C(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100588D50(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[12] = v5;
  v2[13] = *(void *)(v5 + 64);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100588EE8, v1, 0);
}

uint64_t sub_100588EE8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[10];
  if (*(void *)(v1 + 16))
  {
    uint64_t v5 = type metadata accessor for SharingCircleSecret();
    unint64_t v6 = v1
       + *(int *)(v5 + 24)
       + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
    uint64_t v7 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    v0[16] = v7;
    v0[17] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v6, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
    {
      uint64_t v8 = v0[15];
      uint64_t v9 = v0[11];
      uint64_t v10 = v0[12];
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[4];
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      v0[18] = v13;
      v0[19] = (v10 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v13(v8, v11, v9);
      uint64_t v14 = *(void *)(v12 + 168);
      v0[20] = v14;
      return _swift_task_switch(sub_100589118, v14, 0);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v3 + 56))(v0[10], 1, 1, v0[11]);
  }
  sub_10001DAB4(v0[10], &qword_101638CF0);
  sub_10059B594();
  swift_allocError();
  unsigned char *v15 = 5;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100589118()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (void (*)(unint64_t, uint64_t, uint64_t))v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[16];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  v0[21] = *(void *)(v1 + 136);
  v4(v5, v3, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  v0[22] = v9;
  *(void *)(v9 + 16) = v1;
  v2(v9 + v8, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_1005891FC, 0, 0);
}

uint64_t sub_1005891FC()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  v3[2] = v2;
  v3[3] = sub_10059B514;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100589300;
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059EE48, v3, v6);
}

uint64_t sub_100589300()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100589450, v1, 0);
}

uint64_t sub_100589450()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[8] + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[15], v0[11]);
    sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
LABEL_8:
    sub_10059B594();
    swift_allocError();
    *uint64_t v8 = 5;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  uint64_t v3 = v0[9];
  sub_10059B5E8(v2, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (*(unsigned char *)(v3 + *(int *)(v1 + 36)) != 1)
  {
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[12];
    sub_10059B66C(v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    goto LABEL_8;
  }
  uint64_t v4 = v0[20];
  return _swift_task_switch(sub_100589620, v4, 0);
}

uint64_t sub_100589620()
{
  *(void *)(v0 + 200) = *(void *)(*(void *)(v0 + 160) + 136);
  swift_retain();
  return _swift_task_switch(sub_100589694, 0, 0);
}

uint64_t sub_100589694()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[20];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1005897AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_1005897AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 224) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10058991C, v2, 0);
}

uint64_t sub_10058991C()
{
  v0[29] = *(void *)(v0[28] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[30] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005899DC;
  uint64_t v2 = v0[3];
  return sub_1006519C8(v2);
}

uint64_t sub_1005899DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100589C04;
  }
  else {
    uint64_t v4 = sub_100589B24;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100589B24()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  sub_10059B66C(v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100589C04()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  sub_10059B66C(v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100589CDC(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100589DDC, v1, 0);
}

uint64_t sub_100589DDC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 168);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_100589E00, v1, 0);
}

uint64_t sub_100589E00()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 136);
  swift_retain();
  return _swift_task_switch(sub_100589E74, 0, 0);
}

uint64_t sub_100589E74()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100589F88;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100589F88()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 152) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10058A0F8, v2, 0);
}

uint64_t sub_10058A0F8()
{
  v0[20] = *(void *)(v0[19] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[21] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10058A1B8;
  uint64_t v2 = v0[8];
  return sub_1006510C8(v2);
}

uint64_t sub_10058A1B8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[9];
    uint64_t v5 = sub_10058AD10;
  }
  else
  {
    uint64_t v6 = v3[9];
    swift_release();
    uint64_t v5 = sub_10058A2E0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10058A2E0()
{
  uint64_t v22 = v0;
  if (!*(void *)(v0[22] + 16))
  {
    swift_bridgeObjectRelease();
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[8];
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v8 = v0[10];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DED0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[11];
    uint64_t v13 = v0[12];
    uint64_t v15 = v0[10];
    if (v12)
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No secrets available to restore for %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(v0[12], v0[10]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    goto LABEL_13;
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[14];
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100EDF1C4(v3, v2);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v4();
  }
  uint64_t v19 = v0[15];
  return _swift_task_switch(sub_10058A624, v19, 0);
}

uint64_t sub_10058A624()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 120) + 128);
  return _swift_task_switch(sub_10058A64C, 0, 0);
}

uint64_t sub_10058A64C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[14];
  uint64_t v3 = swift_task_alloc();
  v0[25] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10058A744;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10058A744()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10058A860;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10058A9C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10058A860()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc();
  return _swift_task_switch(sub_10058A8CC, v1, 0);
}

uint64_t sub_10058A8CC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10058A938, v1, 0);
}

uint64_t sub_10058A938()
{
  sub_10001DAB4(*(void *)(v0 + 112), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10058A9C8()
{
  return _swift_task_switch(sub_10058A9E4, *(void *)(v0 + 72), 0);
}

uint64_t sub_10058A9E4()
{
  uint64_t v25 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[22];
  uint64_t v11 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  if (v8)
  {
    uint64_t v21 = v0[13];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218499;
    uint64_t v23 = v10;
    uint64_t v24 = v22;
    uint64_t v15 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    v0[3] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Restored %ld secrets for %{private,mask.hash}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v18 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_bridgeObjectRelease();
    uint64_t v18 = v10;
  }
  sub_10001DAB4(v18, &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10058AD10()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10058AD98(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v3;
  v5[10] = a2;
  v5[11] = v2;
  v5[9] = a1;
  v5[12] = type metadata accessor for OwnerSharingCircle();
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[15] = v7;
  v5[16] = *(void *)(v7 - 8);
  v5[17] = swift_task_alloc();
  BOOL v8 = (void *)swift_task_alloc();
  v5[18] = v8;
  *BOOL v8 = v5;
  v8[1] = sub_10058AEE8;
  return sub_10058356C(a1, a2);
}

uint64_t sub_10058AEE8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_10058B3F0;
  }
  else {
    uint64_t v4 = sub_10058B014;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10058B014()
{
  uint64_t v24 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[10];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  sub_10059B52C(v6, v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v12 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[15];
  if (v10)
  {
    uint64_t v22 = v0[14];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 141558787;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2085;
    sub_10059C124((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    *(_WORD *)(v15 + 22) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 32) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "URL fetched: %{sensitive,mask.hash}s for beacon %{private,mask.hash}s.", (uint8_t *)v15, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[17], v0[15]);
    sub_10059B66C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10058B3F0()
{
  uint64_t v16 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[13];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "\"Failure in fetching URL for beacon %{private,mask.hash}s %{public}@.", (uint8_t *)v8, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10059B66C(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10058B770()
{
  v1[2] = v0;
  v1[3] = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  v1[4] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_10058B85C, v0, 0);
}

uint64_t sub_10058B85C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10058B940;
  uint64_t v4 = *(void *)(v0 + 40);
  return sub_100E5C1B8(v4, 1);
}

uint64_t sub_10058B940(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_10058BA7C, v3, 0);
}

uint64_t sub_10058BA7C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 64) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    *(void *)(v0 + 72) = type metadata accessor for DelegatedShareUseCase();
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 112) = v4;
    *(void *)(v0 + 80) = *(void *)(v3 + 72);
    *(void *)(v0 + 88) = 0;
    uint64_t v5 = *(uint64_t **)(v0 + 32);
    sub_10059B52C(v1 + ((v4 + 32) & ~(unint64_t)v4), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (sub_1005753E8(v5))
    {
LABEL_5:
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v13;
      void *v13 = v0;
      v13[1] = sub_10058BC74;
      uint64_t v14 = *(void *)(v0 + 32);
      return sub_10058DC0C(v14, 0, 0, 2);
    }
    while (1)
    {
      uint64_t v6 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(v0 + 88) + 1;
      sub_10059B66C(*(void *)(v0 + 32), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v7 == v6) {
        break;
      }
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v9 = *(void *)(v0 + 88) + 1;
      uint64_t v10 = *(unsigned __int8 *)(v0 + 112);
      uint64_t v11 = *(void *)(v0 + 56);
      *(void *)(v0 + 88) = v9;
      uint64_t v12 = *(uint64_t **)(v0 + 32);
      sub_10059B52C(v11 + ((v10 + 32) & ~v10) + v9 * v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (sub_1005753E8(v12)) {
        goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10058BC74()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    int v4 = sub_10058BF10;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    int v4 = sub_10058BD9C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10058BD9C()
{
  while (1)
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 88) + 1;
    sub_10059B66C(*(void *)(v0 + 32), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v2 == v1) {
      break;
    }
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88) + 1;
    *(void *)(v0 + 88) = v4;
    uint64_t v5 = *(uint64_t **)(v0 + 32);
    sub_10059B52C(*(void *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 112) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 112))+ v3 * v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (sub_1005753E8(v5))
    {
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_10058BC74;
      uint64_t v7 = *(void *)(v0 + 32);
      return sub_10058DC0C(v7, 0, 0, 2);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10058BF10()
{
  sub_10059B66C(*(void *)(v0 + 32), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10058BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  unsigned char v5[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  v5[25] = v7;
  v5[26] = *(void *)(v7 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v5[31] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  return _swift_task_switch(sub_10058C180, v4, 0);
}

uint64_t sub_10058C180()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[15];
  v0[35] = *(void *)(v0[19] + 168);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[36] = v5;
  v0[37] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[38] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10058C280;
  uint64_t v7 = v0[31];
  return sub_100E5C1B8(v7, 1);
}

uint64_t sub_10058C280(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_10058C3BC, v3, 0);
}

uint64_t sub_10058C3BC()
{
  uint64_t v87 = v0;
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  if (*(void *)(v1 + 16))
  {
    sub_10059B52C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v0[34], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v0[34], 1, 1, v3);
  }
  v0[40] = v5;
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[25];
  uint64_t v9 = v0[26];
  swift_bridgeObjectRelease();
  sub_10001D074(v7, v6, (uint64_t *)&unk_101638D10);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v0[41] = v10;
  v0[42] = (v9 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v11 = v10(v6, 1, v8);
  uint64_t v12 = v0[33];
  if (v11 == 1)
  {
    sub_10001DAB4(v12, (uint64_t *)&unk_101638D10);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
    uint64_t v14 = v0[23];
    uint64_t v15 = v0[20];
    uint64_t v17 = v0[17];
    unint64_t v16 = v0[18];
    uint64_t v19 = v0[15];
    uint64_t v18 = v0[16];
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170D788);
    v13(v14, v19, v15);
    sub_100366EC8(v18, v17, v16);
    sub_100366EC8(v18, v17, v16);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = v0[23];
    uint64_t v26 = v0[20];
    uint64_t v25 = v0[21];
    unint64_t v27 = v0[18];
    if (v23)
    {
      log = v21;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558531;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v29, v30, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      *(_WORD *)(v28 + 22) = 2082;
      switch(v27)
      {
        case 0uLL:
          uint64_t v31 = 0x73206C61756E616DLL;
          unint64_t v32 = 0xEB00000000706F74;
          break;
        case 1uLL:
          unint64_t v32 = 0x8000000101402360;
          uint64_t v31 = 0xD000000000000018;
          break;
        case 2uLL:
          uint64_t v31 = 0x7865206572616873;
          unint64_t v32 = 0xED00006465726970;
          break;
        case 3uLL:
          uint64_t v31 = 0x746E692061746164;
          unint64_t v32 = 0xEE00797469726765;
          break;
        default:
          uint64_t v31 = 0xD000000000000019;
          unint64_t v32 = 0x8000000101402340;
          break;
      }
      uint64_t v63 = v0[17];
      unint64_t v62 = v0[18];
      uint64_t v64 = v0[16];
      v0[4] = sub_1008FA0F0(v31, v32, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059BBF0(v64, v63, v62);
      sub_10059BBF0(v64, v63, v62);
      _os_log_impl((void *)&_mh_execute_header, log, v22, "Beacon %{private,mask.hash}s is not delegated. Didnt stop the share, reason %{public}s.", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v55 = v0[16];
      uint64_t v54 = v0[17];
      (*(void (**)(void, void))(v25 + 8))(v0[23], v0[20]);
      sub_10059BBF0(v55, v54, v27);
      sub_10059BBF0(v55, v54, v27);
    }
    if (v0[18] > 3uLL)
    {
      uint64_t v67 = sub_101158C68((uint64_t)&off_1015A1168);
      v0[47] = v67;
      uint64_t v68 = (void *)swift_task_alloc();
      v0[48] = v68;
      void *v68 = v0;
      v68[1] = sub_10058D194;
      uint64_t v69 = v0[15];
      return sub_100E59F38(v69, v67);
    }
    else
    {
      sub_10001DAB4(v0[34], (uint64_t *)&unk_101638D10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v65 = (uint64_t (*)(void))v0[1];
      return v65();
    }
  }
  else
  {
    sub_10059B5E8(v12, v0[30], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v83 = v0[15];
    uint64_t v82 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
    uint64_t v34 = v0[29];
    uint64_t v33 = v0[30];
    uint64_t v35 = v0[24];
    uint64_t v36 = v0[20];
    uint64_t v38 = v0[17];
    unint64_t v37 = v0[18];
    uint64_t v39 = v0[16];
    uint64_t v40 = type metadata accessor for Logger();
    v0[43] = sub_100010324(v40, (uint64_t)qword_10170D788);
    sub_10059B52C(v33, v34, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v82(v35, v83, v36);
    sub_100366EC8(v39, v38, v37);
    sub_100366EC8(v39, v38, v37);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = v0[29];
    if (v43)
    {
      os_log_type_t v84 = v42;
      uint64_t v79 = v0[24];
      uint64_t v45 = v0[20];
      uint64_t v80 = v0[21];
      uint64_t v81 = v0[18];
      uint64_t v46 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 141559043;
      v0[10] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[11] = sub_1008FA0F0(v47, v48, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v44, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v46 + 22) = 2160;
      v0[12] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v46 + 32) = 2081;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = sub_1008FA0F0(v49, v50, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v51(v79, v45);
      *(_WORD *)(v46 + 42) = 2082;
      switch(v81)
      {
        case 0:
          uint64_t v52 = 0x73206C61756E616DLL;
          unint64_t v53 = 0xEB00000000706F74;
          goto LABEL_33;
        case 1:
          unint64_t v53 = 0x8000000101402360;
          uint64_t v70 = v41;
          uint64_t v52 = 0xD000000000000018;
          goto LABEL_34;
        case 2:
          uint64_t v52 = 0x7865206572616873;
          unint64_t v53 = 0xED00006465726970;
          goto LABEL_33;
        case 3:
          uint64_t v52 = 0x746E692061746164;
          unint64_t v53 = 0xEE00797469726765;
          goto LABEL_33;
        default:
          uint64_t v52 = 0xD000000000000019;
          unint64_t v53 = 0x8000000101402340;
LABEL_33:
          uint64_t v70 = v41;
LABEL_34:
          uint64_t v72 = v0[17];
          unint64_t v71 = v0[18];
          uint64_t v73 = v0[16];
          v0[14] = sub_1008FA0F0(v52, v53, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10059BBF0(v73, v72, v71);
          sub_10059BBF0(v73, v72, v71);
          _os_log_impl((void *)&_mh_execute_header, v70, v84, "Stop delegated sharing of share id %{private,mask.hash}s, beacon id %{private,mask.hash}s due to %{public}s.", (uint8_t *)v46, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          break;
      }
    }
    else
    {
      uint64_t v56 = v0[24];
      uint64_t v57 = v0[20];
      uint64_t v58 = v0[21];
      uint64_t v60 = v0[17];
      unint64_t v59 = v0[18];
      uint64_t v61 = v0[16];
      sub_10059B66C(v44, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v51(v56, v57);
      sub_10059BBF0(v61, v60, v59);
      sub_10059BBF0(v61, v60, v59);
    }
    v0[44] = v51;
    unint64_t v74 = (void *)swift_task_alloc();
    v0[45] = v74;
    *unint64_t v74 = v0;
    v74[1] = sub_10058CF4C;
    uint64_t v75 = v0[30];
    uint64_t v76 = v0[18];
    uint64_t v77 = v0[16];
    uint64_t v78 = v0[17];
    return sub_10058DC0C(v75, v77, v78, v76);
  }
}

uint64_t sub_10058CF4C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v4 = sub_10058D744;
  }
  else {
    uint64_t v4 = sub_10058D078;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10058D078()
{
  sub_10059B66C(v0[30], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v0[34], (uint64_t *)&unk_101638D10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10058D194(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 392) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10058D2C8, v2, 0);
}

uint64_t sub_10058D2C8()
{
  uint64_t v1 = *(void *)(v0 + 392);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 208) + 80);
    sub_10059B52C(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 320))(v5, v3, 1, v6);
  swift_bridgeObjectRelease();
  if (v4(v5, 1, v6) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 272), (uint64_t *)&unk_101638D10);
    sub_10001DAB4(*(void *)(v0 + 256), (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    sub_10059B5E8(*(void *)(v0 + 256), *(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10058D518;
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 144);
    return sub_1005992C0(v12, v10, v11, v13);
  }
}

uint64_t sub_10058D518()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  return _swift_task_switch(sub_10058D628, v1, 0);
}

uint64_t sub_10058D628()
{
  sub_10059B66C(v0[28], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v0[34], (uint64_t *)&unk_101638D10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10058D744()
{
  unint64_t v27 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[15];
  sub_10059B52C(v0[30], v0[27], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[27];
    uint64_t v22 = v0[22];
    uint64_t v8 = v0[20];
    BOOL v23 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v0[5] = 1752392040;
    v26[0] = v25;
    *(_DWORD *)uint64_t v9 = 141559043;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v10, v11, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v9 + 22) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2081;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v12, v13, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23(v22, v8);
    *(_WORD *)(v9 + 42) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v24 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error stopping delegated sharing of share id %{private,mask.hash}s, beacon id %{private,mask.hash}s due to %{public}@.", (uint8_t *)v9, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v16 = v0[22];
    uint64_t v17 = v0[20];
    sub_10059B66C(v0[27], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v15(v16, v17);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[34];
  uint64_t v19 = v0[30];
  swift_willThrow();
  sub_10059B66C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v18, (uint64_t *)&unk_101638D10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10058DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[41] = a4;
  v5[42] = v4;
  v5[39] = a2;
  v5[40] = a3;
  v5[38] = a1;
  sub_10000588C((uint64_t *)&unk_101638D10);
  v5[43] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  v5[44] = v8;
  v5[45] = *(void *)(v8 - 8);
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[52] = v9;
  v5[53] = *(void *)(v9 - 8);
  v5[54] = swift_task_alloc();
  v5[55] = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_10163BA10);
  v5[56] = v10;
  v5[57] = *(void *)(v10 - 8);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  unint64_t v11 = (void *)swift_task_alloc();
  v5[64] = v11;
  *unint64_t v11 = v5;
  v11[1] = sub_10058DE94;
  return sub_1005992C0(a1, v12, v13, a4);
}

uint64_t sub_10058DE94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return _swift_task_switch(sub_10058DFA4, v1, 0);
}

uint64_t sub_10058DFA4()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(*(void *)(v0 + 336) + 168);
  *(void *)(v0 + 520) = v3;
  *(void *)(v0 + 528) = sub_10000588C(&qword_101657700);
  *(void *)(v0 + 536) = *(void *)(v1 + 72);
  int v4 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 752) = v4;
  unint64_t v5 = (v4 + 32) & ~(unint64_t)v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 544) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  sub_10059B52C(v2, v6 + v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return _swift_task_switch(sub_10058E088, v3, 0);
}

uint64_t sub_10058E088()
{
  uint64_t v1 = v0[68];
  uint64_t v2 = v0[65];
  v0[69] = *(void *)(v2 + 136);
  uint64_t v3 = swift_allocObject();
  v0[70] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10058E130, 0, 0);
}

uint64_t sub_10058E130()
{
  uint64_t v1 = v0[70];
  uint64_t v2 = v0[69];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[71] = v3;
  v3[2] = v2;
  v3[3] = sub_10059EE6C;
  v3[4] = v1;
  int v4 = (void *)swift_task_alloc();
  v0[72] = v4;
  uint64_t v5 = sub_10000588C(&qword_101649210);
  *int v4 = v0;
  v4[1] = sub_10058E24C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 32, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059EE44, v3, v5);
}

uint64_t sub_10058E24C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 520);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 584) = *(void *)(v1 + 256);
  return _swift_task_switch(sub_10058E3BC, v2, 0);
}

uint64_t sub_10058E3BC()
{
  uint64_t v1 = *(void *)(v0 + 336);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10058E428, v1, 0);
}

uint64_t sub_10058E428()
{
  uint64_t v72 = v0;
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 592) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 496);
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v6 = *(void *)(v0 + 448);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v7 = *(void *)(v0 + 352);
    uint64_t v8 = *(int *)(v6 + 48);
    *(_DWORD *)(v0 + 756) = v8;
    uint64_t v9 = *(int *)(v6 + 64);
    *(_DWORD *)(v0 + 760) = v9;
    int v10 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 764) = v10;
    *(void *)(v0 + 600) = *(void *)(v5 + 72);
    *(void *)(v0 + 608) = 0;
    uint64_t v11 = *(void *)(v0 + 488);
    uint64_t v12 = v1 + ((v10 + 32) & ~(unint64_t)v10);
    swift_bridgeObjectRetain();
    sub_10001D074(v12, v3, &qword_10163BA10);
    uint64_t v13 = *(void *)(v3 + v8);
    uint64_t v14 = *(void *)(v3 + v9);
    uint64_t v15 = *(int *)(v6 + 48);
    uint64_t v16 = *(int *)(v6 + 64);
    sub_10059B5E8(v3, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v4 + v15) = v13;
    *(void *)(v4 + v16) = v14;
    uint64_t v17 = *(int *)(v6 + 48);
    uint64_t v18 = *(int *)(v6 + 64);
    sub_10059B52C(v4, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v11 + v17) = v13;
    *(void *)(v11 + v18) = v14;
    LODWORD(v17) = *(unsigned __int8 *)(v11 + *(int *)(v7 + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10059B66C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v17 == 3)
    {
      unint64_t v19 = *(void *)(v0 + 328);
      uint64_t v20 = *(void **)(v0 + 336);
      if (v19 >= 4) {
        char v21 = 2;
      }
      else {
        char v21 = 0x30100u >> (8 * v19);
      }
      *(unsigned char *)(v0 + 768) = v21;
      uint64_t v22 = *(void *)(v0 + 480);
      uint64_t v24 = *(void *)(v0 + 440);
      uint64_t v23 = *(void *)(v0 + 448);
      uint64_t v25 = *(void *)(v0 + 424);
      uint64_t v66 = *(void *)(v0 + 416);
      uint64_t v26 = *(void *)(v0 + 352);
      uint64_t v27 = *(int *)(v23 + 48);
      uint64_t v28 = *(int *)(v23 + 64);
      sub_10059B52C(*(void *)(v0 + 496), v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v22 + v27) = v13;
      *(void *)(v22 + v28) = v14;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v22 + *(int *)(v26 + 20), v66);
      sub_10059B66C(v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v29 = v20[17];
      uint64_t v30 = v20[19];
      uint64_t v31 = sub_10001CD44(v20 + 14, v29);
      *(void *)(v0 + 120) = v29;
      *(void *)(v0 + 128) = v30;
      unint64_t v32 = sub_10001D958((uint64_t *)(v0 + 96));
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v32, v31, v29);
      return _swift_task_switch(sub_10058EBF0, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v35 = *(void *)(v0 + 496);
      uint64_t v37 = *(void *)(v0 + 464);
      uint64_t v36 = *(void *)(v0 + 472);
      uint64_t v38 = *(void *)(v0 + 448);
      uint64_t type = *(void *)(v0 + 304);
      uint64_t v69 = *(void *)(v0 + 408);
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170DED0);
      uint64_t v40 = *(int *)(v38 + 48);
      uint64_t v41 = *(int *)(v38 + 64);
      sub_10059B52C(v35, v36, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(void *)(v36 + v40) = v13;
      *(void *)(v36 + v41) = v14;
      sub_10059B758(v36, v37);
      sub_10059B52C(type, v69, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = *(void *)(v0 + 496);
      if (v44)
      {
        uint64_t v70 = *(void *)(v0 + 496);
        uint64_t v46 = *(void *)(v0 + 488);
        uint64_t v47 = *(void *)(v0 + 464);
        uint64_t v48 = *(void *)(v0 + 448);
        os_log_type_t typea = v43;
        uint64_t v50 = *(void *)(v0 + 424);
        uint64_t v49 = *(void *)(v0 + 432);
        uint64_t v51 = *(void *)(v0 + 416);
        uint64_t v65 = *(void *)(v0 + 408);
        log = v42;
        uint64_t v52 = *(void *)(v0 + 352);
        uint64_t v53 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 141558787;
        *(void *)(v0 + 248) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 12) = 2081;
        uint64_t v54 = *(int *)(v48 + 48);
        uint64_t v55 = *(int *)(v48 + 64);
        sub_10059B52C(v47, v46, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(void *)(v46 + v54) = *(void *)(v47 + v54);
        *(void *)(v46 + v55) = *(void *)(v47 + v55);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v46 + *(int *)(v52 + 24), v51);
        sub_10059B66C(v46, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v58 = v57;
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
        *(void *)(v0 + 240) = sub_1008FA0F0(v56, v58, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v47, &qword_10163BA10);
        *(_WORD *)(v53 + 22) = 2160;
        *(void *)(v0 + 168) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 32) = 2049;
        uint64_t v59 = *(unsigned __int8 *)(v65 + *(int *)(v52 + 28));
        sub_10059B66C(v65, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(void *)(v0 + 160) = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, log, typea, "ERROR - stop delegated share of beacon %{private,mask.hash}s\nhas circle of wrong sharing type: %{private,mask.hash}ld", (uint8_t *)v53, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v60 = v70;
      }
      else
      {
        uint64_t v61 = *(void *)(v0 + 464);
        sub_10059B66C(*(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);

        sub_10001DAB4(v61, &qword_10163BA10);
        uint64_t v60 = v45;
      }
      sub_10001DAB4(v60, &qword_10163BA10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
      return v62();
    }
  }
  else
  {
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v33;
    void *v33 = v0;
    v33[1] = sub_10058FEA8;
    uint64_t v34 = *(void *)(v0 + 304);
    return sub_100592848(v34);
  }
}

uint64_t sub_10058EBF0()
{
  sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10058EC9C;
  uint64_t v2 = *(void *)(v0 + 440);
  char v3 = *(unsigned char *)(v0 + 768);
  return sub_1005F63F8(v2, 4, v3);
}

uint64_t sub_10058EC9C(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v4 + 624) = v1;
    uint64_t v5 = *(void *)(v4 + 440);
    uint64_t v6 = *(void *)(v4 + 416);
    uint64_t v7 = *(void *)(v4 + 424);
    uint64_t v8 = *(void *)(v4 + 336);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_10058F6D0;
    uint64_t v10 = v8;
  }
  else
  {
    *(unsigned char *)(v4 + 769) = a1 & 1;
    uint64_t v9 = sub_10058EDF4;
    uint64_t v10 = 0;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_10058EDF4()
{
  if (*(unsigned char *)(v0 + 769) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 336);
    (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
    uint64_t v2 = sub_10058EEF8;
  }
  else
  {
    sub_100075398();
    uint64_t v3 = swift_allocError();
    *uint64_t v4 = 0;
    swift_willThrow();
    *(void *)(v0 + 624) = v3;
    uint64_t v1 = *(void *)(v0 + 336);
    (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10058F6D0;
  }
  return _swift_task_switch(v2, v1, 0);
}

uint64_t sub_10058EEF8()
{
  uint64_t v70 = v0;
  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 608) + 1;
  sub_10001DAB4(*(void *)(v0 + 496), &qword_10163BA10);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10058FEA8;
    uint64_t v4 = *(void *)(v0 + 304);
    return sub_100592848(v4);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 608) + 1;
    *(void *)(v0 + 608) = v6;
    uint64_t v7 = *(int *)(v0 + 760);
    uint64_t v8 = *(int *)(v0 + 756);
    uint64_t v10 = *(void *)(v0 + 496);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v11 = *(void *)(v0 + 488);
    uint64_t v12 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 352);
    sub_10001D074(*(void *)(v0 + 584)+ ((*(unsigned __int8 *)(v0 + 764) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 764))+ *(void *)(v0 + 600) * v6, v9, &qword_10163BA10);
    uint64_t v14 = *(void *)(v9 + v8);
    uint64_t v15 = *(void *)(v9 + v7);
    uint64_t v16 = *(int *)(v12 + 48);
    uint64_t v17 = *(int *)(v12 + 64);
    sub_10059B5E8(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v10 + v16) = v14;
    *(void *)(v10 + v17) = v15;
    uint64_t v18 = *(int *)(v12 + 48);
    uint64_t v19 = *(int *)(v12 + 64);
    sub_10059B52C(v10, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v11 + v18) = v14;
    *(void *)(v11 + v19) = v15;
    LODWORD(v18) = *(unsigned __int8 *)(v11 + *(int *)(v13 + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10059B66C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v18 == 3)
    {
      unint64_t v20 = *(void *)(v0 + 328);
      char v21 = *(void **)(v0 + 336);
      if (v20 >= 4) {
        char v22 = 2;
      }
      else {
        char v22 = 0x30100u >> (8 * v20);
      }
      *(unsigned char *)(v0 + 768) = v22;
      uint64_t v23 = *(void *)(v0 + 480);
      uint64_t v25 = *(void *)(v0 + 440);
      uint64_t v24 = *(void *)(v0 + 448);
      uint64_t v26 = *(void *)(v0 + 424);
      uint64_t v64 = *(void *)(v0 + 416);
      uint64_t v27 = *(void *)(v0 + 352);
      uint64_t v28 = *(int *)(v24 + 48);
      uint64_t v29 = *(int *)(v24 + 64);
      sub_10059B52C(*(void *)(v0 + 496), v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v23 + v28) = v14;
      *(void *)(v23 + v29) = v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v23 + *(int *)(v27 + 20), v64);
      sub_10059B66C(v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v30 = v21[17];
      uint64_t v31 = v21[19];
      unint64_t v32 = sub_10001CD44(v21 + 14, v30);
      *(void *)(v0 + 120) = v30;
      *(void *)(v0 + 128) = v31;
      uint64_t v33 = sub_10001D958((uint64_t *)(v0 + 96));
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v33, v32, v30);
      return _swift_task_switch(sub_10058EBF0, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v34 = *(void *)(v0 + 496);
      uint64_t v36 = *(void *)(v0 + 464);
      uint64_t v35 = *(void *)(v0 + 472);
      uint64_t v37 = *(void *)(v0 + 448);
      uint64_t type = *(void *)(v0 + 304);
      uint64_t v67 = *(void *)(v0 + 408);
      uint64_t v38 = type metadata accessor for Logger();
      sub_100010324(v38, (uint64_t)qword_10170DED0);
      uint64_t v39 = *(int *)(v37 + 48);
      uint64_t v40 = *(int *)(v37 + 64);
      sub_10059B52C(v34, v35, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(void *)(v35 + v39) = v14;
      *(void *)(v35 + v40) = v15;
      sub_10059B758(v35, v36);
      sub_10059B52C(type, v67, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void *)(v0 + 496);
      if (v43)
      {
        uint64_t v68 = *(void *)(v0 + 496);
        uint64_t v45 = *(void *)(v0 + 488);
        uint64_t v46 = *(void *)(v0 + 464);
        uint64_t v47 = *(void *)(v0 + 448);
        os_log_type_t typea = v42;
        uint64_t v49 = *(void *)(v0 + 424);
        uint64_t v48 = *(void *)(v0 + 432);
        uint64_t v50 = *(void *)(v0 + 416);
        uint64_t v63 = *(void *)(v0 + 408);
        log = v41;
        uint64_t v51 = *(void *)(v0 + 352);
        uint64_t v52 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 141558787;
        *(void *)(v0 + 248) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v52 + 12) = 2081;
        uint64_t v53 = *(int *)(v47 + 48);
        uint64_t v54 = *(int *)(v47 + 64);
        sub_10059B52C(v46, v45, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(void *)(v45 + v53) = *(void *)(v46 + v53);
        *(void *)(v45 + v54) = *(void *)(v46 + v54);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v45 + *(int *)(v51 + 24), v50);
        sub_10059B66C(v45, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v57 = v56;
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
        *(void *)(v0 + 240) = sub_1008FA0F0(v55, v57, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v46, &qword_10163BA10);
        *(_WORD *)(v52 + 22) = 2160;
        *(void *)(v0 + 168) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v52 + 32) = 2049;
        uint64_t v58 = *(unsigned __int8 *)(v63 + *(int *)(v51 + 28));
        sub_10059B66C(v63, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(void *)(v0 + 160) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, log, typea, "ERROR - stop delegated share of beacon %{private,mask.hash}s\nhas circle of wrong sharing type: %{private,mask.hash}ld", (uint8_t *)v52, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v59 = v68;
      }
      else
      {
        uint64_t v60 = *(void *)(v0 + 464);
        sub_10059B66C(*(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);

        sub_10001DAB4(v60, &qword_10163BA10);
        uint64_t v59 = v44;
      }
      sub_10001DAB4(v59, &qword_10163BA10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
      return v61();
    }
  }
}

uint64_t sub_10058F6D0()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[78];
  sub_10001DAB4(v0[62], &qword_10163BA10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  v0[22] = v1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[47];
    uint64_t v3 = v0[38];
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    sub_10059B52C(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[47];
      uint64_t v8 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558531;
      v0[35] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[36] = sub_1008FA0F0(v9, v10, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v8 + 22) = 2114;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      v0[37] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Server share %{private,mask.hash}s is already revoked: %{public}@", (uint8_t *)v8, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      uint64_t v22 = v0[47];
      swift_errorRelease();
      sub_10059B66C(v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v23 = (void *)swift_task_alloc();
    v0[79] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10058FEA8;
    uint64_t v24 = v0[38];
    return sub_100592848(v24);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[48];
    uint64_t v13 = v0[38];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DED0);
    sub_10059B52C(v13, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = v0[48];
      uint64_t v18 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558531;
      v0[23] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[24] = sub_1008FA0F0(v19, v20, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v18 + 22) = 2114;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v0[25] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failure on delegate share stop %{private,mask.hash}s, server share deletion: %{public}@.", (uint8_t *)v18, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10059B66C(v0[48], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_10058FEA8()
{
  uint64_t v2 = (void *)*v1;
  v2[80] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[42];
    return _swift_task_switch(sub_100591F34, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[81] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_10059001C;
    uint64_t v5 = v2[73];
    return sub_100593020(v5);
  }
}

uint64_t sub_10059001C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 352);
  uint64_t v3 = *(void *)(*v0 + 304);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = v3 + *(int *)(v2 + 20);
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 656) = v6;
  *os_log_type_t v6 = v4;
  v6[1] = sub_1005901C8;
  uint64_t v7 = *(void *)(v1 + 336);
  v6[3] = v5;
  v6[4] = v7;
  return _swift_task_switch(sub_100598858, v7, 0);
}

uint64_t sub_1005901C8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    os_log_type_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 664) = v6;
    *os_log_type_t v6 = v3;
    v6[1] = sub_100590420;
    uint64_t v7 = *(void *)(v2 + 336);
    v6[15] = v7;
    return _swift_task_switch(sub_1005940F4, v7, 0);
  }
}

uint64_t sub_100590420()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return _swift_task_switch(sub_100590530, v1, 0);
}

uint64_t sub_100590530()
{
  uint64_t v1 = v0[38] + *(int *)(v0[44] + 24);
  Swift::Int v2 = sub_100DF2D10((uint64_t)&off_1015A1118);
  v0[84] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[85] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005905F4;
  return sub_100E59F38(v1, v2);
}

uint64_t sub_1005905F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 688) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100590728, v2, 0);
}

uint64_t sub_100590728()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void *)(v0 + 688);
  if (*(void *)(v1 + 16))
  {
    sub_10059B52C(v1 + ((*(unsigned __int8 *)(v0 + 752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 752)), *(void *)(v0 + 344), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 344);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 344), (uint64_t *)&unk_101638D10);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 392);
    uint64_t v8 = *(void *)(v0 + 320);
    unint64_t v7 = *(void *)(v0 + 328);
    uint64_t v10 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170DED0);
    sub_10059B52C(v10, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100366EC8(v9, v8, v7);
    sub_100366EC8(v9, v8, v7);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v32 = v13;
      uint64_t v14 = *(void *)(v0 + 392);
      uint64_t v33 = *(void *)(v0 + 328);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558787;
      *(void *)(v0 + 208) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = sub_1008FA0F0(v16, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v15 + 22) = 2160;
      *(void *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 32) = 2081;
      switch(v33)
      {
        case 0:
          unint64_t v18 = 0xEB00000000706F74;
          uint64_t v19 = 0x73206C61756E616DLL;
          goto LABEL_18;
        case 1:
          unint64_t v18 = 0x8000000101402360;
          os_log_type_t v27 = v32;
          uint64_t v19 = 0xD000000000000018;
          goto LABEL_19;
        case 2:
          unint64_t v18 = 0xED00006465726970;
          uint64_t v19 = 0x7865206572616873;
          goto LABEL_18;
        case 3:
          unint64_t v18 = 0xEE00797469726765;
          uint64_t v19 = 0x746E692061746164;
          goto LABEL_18;
        default:
          uint64_t v19 = 0xD000000000000019;
          unint64_t v18 = 0x8000000101402340;
LABEL_18:
          os_log_type_t v27 = v32;
LABEL_19:
          uint64_t v29 = *(void *)(v0 + 320);
          unint64_t v28 = *(void *)(v0 + 328);
          uint64_t v30 = *(void *)(v0 + 312);
          *(void *)(v0 + 232) = sub_1008FA0F0(v19, v18, &v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10059BBF0(v30, v29, v28);
          sub_10059BBF0(v30, v29, v28);
          _os_log_impl((void *)&_mh_execute_header, v12, v27, "Successfully marked delegated sharing of %{private,mask.hash}s as tentative\ndue to reason %{private,mask.hash}s.", (uint8_t *)v15, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          break;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(v0 + 320);
      unint64_t v24 = *(void *)(v0 + 328);
      uint64_t v26 = *(void *)(v0 + 312);
      sub_10059B66C(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10059BBF0(v26, v25, v24);
      sub_10059BBF0(v26, v25, v24);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 336);
    sub_10059B5E8(*(void *)(v0 + 344), *(void *)(v0 + 400), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001CD44((void *)(v20 + 272), *(void *)(v20 + 296));
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 696) = v21;
    void *v21 = v0;
    v21[1] = sub_100590D98;
    uint64_t v22 = *(void *)(v0 + 400);
    return sub_1006D102C(v22, 0);
  }
}

uint64_t sub_100590D98()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 336);
  if (v0) {
    uint64_t v4 = sub_100591000;
  }
  else {
    uint64_t v4 = sub_100590EC4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100590EC4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 40))
  {
    sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016392D0 + dword_1016392D0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 712) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100591144;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100591000()
{
  sub_10059B66C(*(void *)(v0 + 400), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100591144(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 720) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10059125C, v2, 0);
}

uint64_t sub_10059125C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 720);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 400);
    unint64_t v3 = (*(unsigned __int8 *)(v0 + 752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 752);
    uint64_t v4 = swift_allocObject();
    *(void *)(v0 + 728) = v4;
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    sub_10059B52C(v2, v4 + v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10059187C;
    return sub_100CD8354(v4);
  }
  else
  {
    sub_10059B66C(*(void *)(v0 + 400), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 320);
    unint64_t v8 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170DED0);
    sub_10059B52C(v11, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100366EC8(v10, v9, v8);
    sub_100366EC8(v10, v9, v8);
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v29 = v14;
      uint64_t v15 = *(void *)(v0 + 392);
      uint64_t v30 = *(void *)(v0 + 328);
      uint64_t v16 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558787;
      *(void *)(v0 + 208) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = sub_1008FA0F0(v17, v18, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10059B66C(v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v16 + 22) = 2160;
      *(void *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 32) = 2081;
      switch(v30)
      {
        case 0:
          unint64_t v19 = 0xEB00000000706F74;
          uint64_t v20 = 0x73206C61756E616DLL;
          goto LABEL_15;
        case 1:
          unint64_t v19 = 0x8000000101402360;
          os_log_type_t v24 = v29;
          uint64_t v20 = 0xD000000000000018;
          goto LABEL_16;
        case 2:
          unint64_t v19 = 0xED00006465726970;
          uint64_t v20 = 0x7865206572616873;
          goto LABEL_15;
        case 3:
          unint64_t v19 = 0xEE00797469726765;
          uint64_t v20 = 0x746E692061746164;
          goto LABEL_15;
        default:
          uint64_t v20 = 0xD000000000000019;
          unint64_t v19 = 0x8000000101402340;
LABEL_15:
          os_log_type_t v24 = v29;
LABEL_16:
          uint64_t v26 = *(void *)(v0 + 320);
          unint64_t v25 = *(void *)(v0 + 328);
          uint64_t v27 = *(void *)(v0 + 312);
          *(void *)(v0 + 232) = sub_1008FA0F0(v20, v19, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10059BBF0(v27, v26, v25);
          sub_10059BBF0(v27, v26, v25);
          _os_log_impl((void *)&_mh_execute_header, v13, v24, "Successfully marked delegated sharing of %{private,mask.hash}s as tentative\ndue to reason %{private,mask.hash}s.", (uint8_t *)v16, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          break;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 320);
      unint64_t v21 = *(void *)(v0 + 328);
      uint64_t v23 = *(void *)(v0 + 312);
      sub_10059B66C(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10059BBF0(v23, v22, v21);
      sub_10059BBF0(v23, v22, v21);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
}

uint64_t sub_10059187C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 336);
    uint64_t v4 = sub_100592064;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 336);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_release();
    uint64_t v4 = sub_1005919F8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005919F8()
{
  unint64_t v28 = v0;
  uint64_t v1 = v0[50];
  swift_release();
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[49];
  uint64_t v4 = v0[40];
  unint64_t v3 = v0[41];
  uint64_t v6 = v0[38];
  uint64_t v5 = v0[39];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170DED0);
  sub_10059B52C(v6, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100366EC8(v5, v4, v3);
  sub_100366EC8(v5, v4, v3);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v25 = v9;
    uint64_t v10 = v0[49];
    uint64_t v26 = v0[41];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558787;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_1008FA0F0(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[28] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    switch(v26)
    {
      case 0:
        unint64_t v14 = 0xEB00000000706F74;
        uint64_t v15 = 0x73206C61756E616DLL;
        goto LABEL_11;
      case 1:
        unint64_t v14 = 0x8000000101402360;
        os_log_type_t v19 = v25;
        uint64_t v15 = 0xD000000000000018;
        goto LABEL_12;
      case 2:
        unint64_t v14 = 0xED00006465726970;
        uint64_t v15 = 0x7865206572616873;
        goto LABEL_11;
      case 3:
        unint64_t v14 = 0xEE00797469726765;
        uint64_t v15 = 0x746E692061746164;
        goto LABEL_11;
      default:
        uint64_t v15 = 0xD000000000000019;
        unint64_t v14 = 0x8000000101402340;
LABEL_11:
        os_log_type_t v19 = v25;
LABEL_12:
        uint64_t v21 = v0[40];
        unint64_t v20 = v0[41];
        uint64_t v22 = v0[39];
        v0[29] = sub_1008FA0F0(v15, v14, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10059BBF0(v22, v21, v20);
        sub_10059BBF0(v22, v21, v20);
        _os_log_impl((void *)&_mh_execute_header, v8, v19, "Successfully marked delegated sharing of %{private,mask.hash}s as tentative\ndue to reason %{private,mask.hash}s.", (uint8_t *)v11, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
    }
  }
  else
  {
    uint64_t v17 = v0[40];
    unint64_t v16 = v0[41];
    uint64_t v18 = v0[39];
    sub_10059B66C(v0[49], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059BBF0(v18, v17, v16);
    sub_10059BBF0(v18, v17, v16);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100591F34()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100592064()
{
  os_log_type_t v42 = v0;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[38];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170DED0);
  sub_10059B52C(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v38 = v0[50];
    uint64_t v7 = v0[46];
    uint64_t v40 = v4;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[33] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[34] = sub_1008FA0F0(v9, v10, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = v7;
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    sub_10059B66C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to send delegation stop update to sharees for the beacon: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v40;
    swift_slowDealloc();
    swift_errorRelease();

    swift_release();
    uint64_t v12 = v38;
  }
  else
  {
    uint64_t v13 = v0[50];
    uint64_t v14 = v0[46];
    swift_errorRelease();

    sub_10059B66C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_release();
    uint64_t v12 = v13;
  }
  sub_10059B66C(v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (*((void *)p_ivar_base_size + 355) != -1) {
    swift_once();
  }
  uint64_t v15 = v0[49];
  uint64_t v17 = v0[40];
  unint64_t v16 = v0[41];
  uint64_t v19 = v0[38];
  uint64_t v18 = v0[39];
  sub_100010324(v4, (uint64_t)qword_10170DED0);
  sub_10059B52C(v19, v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100366EC8(v18, v17, v16);
  sub_100366EC8(v18, v17, v16);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v37 = v21;
    uint64_t v22 = v0[49];
    uint64_t v39 = v0[41];
    uint64_t v23 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558787;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_1008FA0F0(v24, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v23 + 22) = 2160;
    v0[28] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 32) = 2081;
    switch(v39)
    {
      case 0:
        unint64_t v26 = 0xEB00000000706F74;
        uint64_t v27 = 0x73206C61756E616DLL;
        goto LABEL_16;
      case 1:
        unint64_t v26 = 0x8000000101402360;
        os_log_type_t v31 = v37;
        uint64_t v27 = 0xD000000000000018;
        goto LABEL_17;
      case 2:
        unint64_t v26 = 0xED00006465726970;
        uint64_t v27 = 0x7865206572616873;
        goto LABEL_16;
      case 3:
        unint64_t v26 = 0xEE00797469726765;
        uint64_t v27 = 0x746E692061746164;
        goto LABEL_16;
      default:
        uint64_t v27 = 0xD000000000000019;
        unint64_t v26 = 0x8000000101402340;
LABEL_16:
        os_log_type_t v31 = v37;
LABEL_17:
        uint64_t v33 = v0[40];
        unint64_t v32 = v0[41];
        uint64_t v34 = v0[39];
        v0[29] = sub_1008FA0F0(v27, v26, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10059BBF0(v34, v33, v32);
        sub_10059BBF0(v34, v33, v32);
        _os_log_impl((void *)&_mh_execute_header, v20, v31, "Successfully marked delegated sharing of %{private,mask.hash}s as tentative\ndue to reason %{private,mask.hash}s.", (uint8_t *)v23, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
    }
  }
  else
  {
    uint64_t v29 = v0[40];
    unint64_t v28 = v0[41];
    uint64_t v30 = v0[39];
    sub_10059B66C(v0[49], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059BBF0(v30, v29, v28);
    sub_10059BBF0(v30, v29, v28);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_100592848(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = type metadata accessor for OwnerSharingCircle();
  v2[7] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10059290C, v1, 0);
}

uint64_t sub_10059290C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[4];
  *(void *)(swift_task_alloc() + 16) = v2;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_10059BC5C, v1);
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v0[5] + 168);
  v0[9] = v3;
  return _swift_task_switch(sub_100592A0C, v3, 0);
}

uint64_t sub_100592A0C()
{
  *(void *)(v0 + 80) = *(void *)(*(void *)(v0 + 72) + 128);
  return _swift_task_switch(sub_100592A34, 0, 0);
}

uint64_t sub_100592A34()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = swift_task_alloc();
  v0[11] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100592B2C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100592B2C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100592C48;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100592D30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100592C48()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100592CB4, v1, 0);
}

uint64_t sub_100592CB4()
{
  sub_10001DAB4(*(void *)(v0 + 64), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100592D30()
{
  return _swift_task_switch(sub_100592D4C, *(void *)(v0 + 40), 0);
}

uint64_t sub_100592D4C()
{
  uint64_t v17 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[7];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[7];
  uint64_t v7 = v0[8];
  if (v6)
  {
    uint64_t v15 = v0[8];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Acceptance state changed to .tentativelyRevoked\nfor delegated circle: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = v15;
  }
  else
  {

    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v12 = v7;
  }
  sub_10001DAB4(v12, &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100593020(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for OwnerSharingCircle();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163BA10);
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_10059319C, v1, 0);
}

uint64_t sub_10059319C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 136) = v2;
  uint64_t v3 = *(void *)(v0 + 128);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v6 = *(int *)(v5 + 48);
    *(_DWORD *)(v0 + 232) = v6;
    uint64_t v7 = *(int *)(v5 + 64);
    *(_DWORD *)(v0 + 236) = v7;
    uint64_t v8 = *(void *)(v4 + 168);
    *(void *)(v0 + 144) = v8;
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 112);
    int v11 = *(_DWORD *)(v9 + 80);
    *(_DWORD *)(v0 + 240) = v11;
    uint64_t v12 = *(void *)(v9 + 72);
    *(_DWORD *)(v0 + 244) = enum case for Connection.TransactionMode.deferred(_:);
    uint64_t v21 = *(void *)(v0 + 72);
    *(void *)(v0 + 152) = v12;
    *(void *)(v0 + 160) = 0;
    *(void *)(v0 + 168) = 0;
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = v1 + ((v11 + 32) & ~(unint64_t)v11);
    swift_bridgeObjectRetain();
    sub_10001D074(v14, v3, &qword_10163BA10);
    uint64_t v15 = *(void *)(v3 + v6);
    uint64_t v16 = *(void *)(v3 + v7);
    uint64_t v17 = *(int *)(v5 + 48);
    uint64_t v18 = *(int *)(v5 + 64);
    sub_10059B5E8(v3, v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v13 + v17) = v15;
    *(void *)(v13 + v18) = v16;
    sub_10059B52C(v13, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059B5E8(v10, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 248) = *(_DWORD *)(v21 + 20);
    return _swift_task_switch(sub_1005933A4, v8, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_1005933A4()
{
  *(void *)(v0 + 176) = *(void *)(*(void *)(v0 + 144) + 136);
  swift_retain();
  return _swift_task_switch(sub_100593418, 0, 0);
}

uint64_t sub_100593418()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100593530;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100593530()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 200) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_1005936A0, v2, 0);
}

uint64_t sub_1005936A0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 200) + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  *(void *)(v0 + 208) = v1;
  swift_retain();
  swift_release();
  return _swift_task_switch(sub_100593728, v1, 0);
}

void sub_100593728()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 208) + 112);
  if (!v1)
  {
    sub_1001A149C();
    uint64_t v6 = swift_allocError();
    *(_DWORD *)uint64_t v7 = 2;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
LABEL_9:
    *(void *)(v0 + 224) = v6;
    uint64_t v20 = *(void *)(v0 + 40);
    uint64_t v19 = sub_100593C20;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = (unsigned char *)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 20);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_1002B3D78(v4, (unsigned char *)(v0 + 252));
  os_unfair_lock_unlock(v5);
  if (v2) {
    return;
  }
  if ((*(unsigned char *)(v0 + 252) & 1) == 0
    || (sub_10000588C(&qword_10163CEF8), OSAllocatedUnfairLock.callAsFunction<A>(_:)(), (uint64_t v8 = *(void *)(v0 + 24)) == 0))
  {
    sub_1001A149C();
    uint64_t v6 = swift_allocError();
    *(_DWORD *)uint64_t v17 = 2;
    *(unsigned char *)(v17 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_9;
  }
  uint64_t v9 = *(unsigned int *)(v0 + 244);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 88) + *(int *)(v0 + 248);
  uint64_t v14 = *(void *)(v8 + 24);
  swift_retain();
  swift_release();
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret;
  uint64_t v16 = (void *)swift_task_alloc();
  void v16[2] = v15;
  v16[3] = v13;
  v16[4] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104))(v10, v9, v12);
  Connection.transaction(_:block:)();
  *(void *)(v0 + 216) = 0;
  uint64_t v18 = *(void *)(v0 + 40);
  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v19 = sub_100593A14;
  uint64_t v20 = v18;
LABEL_10:
  _swift_task_switch(v19, v20, 0);
}

uint64_t sub_100593A14()
{
  uint64_t v1 = *(void *)(v0 + 120);
  sub_10059B66C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10001DAB4(v1, &qword_10163BA10);
  uint64_t v2 = *(void *)(v0 + 168) + 1;
  if (v2 == *(void *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    *(void *)(v0 + 160) = *(void *)(v0 + 216);
    *(void *)(v0 + 168) = v2;
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v6 = *(int *)(v0 + 232);
    uint64_t v5 = *(int *)(v0 + 236);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 72);
    sub_10001D074(*(void *)(v0 + 32)+ ((*(unsigned __int8 *)(v0 + 240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 240))+ *(void *)(v0 + 152) * v2, v7, &qword_10163BA10);
    uint64_t v12 = *(void *)(v7 + v6);
    uint64_t v13 = *(void *)(v7 + v5);
    uint64_t v14 = *(int *)(v11 + 48);
    uint64_t v15 = *(int *)(v11 + 64);
    sub_10059B5E8(v7, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v8 + v14) = v12;
    *(void *)(v8 + v15) = v13;
    sub_10059B52C(v8, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059B5E8(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 248) = *(_DWORD *)(v16 + 20);
    return _swift_task_switch(sub_1005933A4, v17, 0);
  }
}

uint64_t sub_100593C20()
{
  uint64_t v33 = v0;
  swift_release();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  if (v6)
  {
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v10 + 4) = 1752392040;
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v10 + 14) = sub_1008FA0F0(v12, v13, &v32);
    swift_bridgeObjectRelease();
    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v10 + 24) = v14;
    *uint64_t v11 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to delete secrets for share %{private,mask.hash}s, %{public}@.", (uint8_t *)v10, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_10059B66C(v30, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10059B66C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    sub_10059B66C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  sub_10001DAB4(v7, &qword_10163BA10);
  uint64_t v15 = *(void *)(v0 + 168) + 1;
  if (v15 == *(void *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    *(void *)(v0 + 160) = 0;
    *(void *)(v0 + 168) = v15;
    uint64_t v31 = *(void *)(v0 + 144);
    uint64_t v19 = *(int *)(v0 + 232);
    uint64_t v18 = *(int *)(v0 + 236);
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v22 = *(void *)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 88);
    uint64_t v24 = *(void *)(v0 + 96);
    uint64_t v29 = *(void *)(v0 + 72);
    sub_10001D074(*(void *)(v0 + 32)+ ((*(unsigned __int8 *)(v0 + 240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 240))+ *(void *)(v0 + 152) * v15, v20, &qword_10163BA10);
    uint64_t v25 = *(void *)(v20 + v19);
    uint64_t v26 = *(void *)(v20 + v18);
    uint64_t v27 = *(int *)(v24 + 48);
    uint64_t v28 = *(int *)(v24 + 64);
    sub_10059B5E8(v20, v21, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(void *)(v21 + v27) = v25;
    *(void *)(v21 + v28) = v26;
    sub_10059B52C(v21, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10059B5E8(v22, v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 248) = *(_DWORD *)(v29 + 20);
    return _swift_task_switch(sub_1005933A4, v31, 0);
  }
}

uint64_t sub_1005940D4()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(sub_1005940F4, v0, 0);
}

uint64_t sub_1005940F4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100594230;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100594230(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100594348, v2, 0);
}

uint64_t sub_100594348()
{
  uint64_t v1 = *(void *)(v0 + 136);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 136);
    return _swift_task_switch(sub_1005943E8, v2, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_1005943E8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  return _swift_task_switch(sub_100474748, v1, 0);
}

uint64_t sub_1005944CC()
{
  v1[20] = v0;
  sub_10000588C(&qword_10164DBB0);
  v1[21] = swift_task_alloc();
  v1[22] = sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[23] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Date();
  v1[24] = v2;
  v1[25] = *(void *)(v2 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v1[28] = v3;
  v1[29] = *(void *)(v3 - 8);
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[35] = swift_task_alloc();
  return _swift_task_switch(sub_1005946C0, v0, 0);
}

uint64_t sub_1005946C0()
{
  uint64_t v1 = v0[35];
  v0[36] = *(void *)(v0[20] + 168);
  uint64_t v2 = type metadata accessor for UUID();
  v0[37] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[38] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005947AC;
  uint64_t v4 = v0[35];
  return sub_100E5C1B8(v4, 0);
}

uint64_t sub_1005947AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 280);
  uint64_t v3 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_1005948E8, v3, 0);
}

uint64_t sub_1005948E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = v3;
  uint64_t v4 = *(void *)(v3 + 312);
  v72[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v69 = *(void *)(v4 + 16);
  if (v69)
  {
    unint64_t v5 = 0;
    uint64_t v63 = (uint64_t *)(v3 + 16);
    uint64_t v67 = *(void *)(v3 + 224);
    uint64_t v68 = *(void *)(v3 + 232);
    uint64_t v6 = *(void *)(v3 + 200);
    uint64_t v61 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v60 = (void (**)(void, void, void))(v6 + 32);
    uint64_t v65 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v66 = _swiftEmptyArrayStorage;
    unsigned int v62 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
    uint64_t v64 = v4;
    while (1)
    {
      if (v5 >= *(void *)(v4 + 16))
      {
        __break(1u);
        return _swift_task_switch(a1, a2, a3);
      }
      uint64_t v8 = *(void *)(v3 + 264);
      uint64_t v7 = *(void *)(v3 + 272);
      unint64_t v9 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      uint64_t v71 = *(void *)(v68 + 72);
      sub_10059B52C(*(void *)(v3 + 312) + v9 + v71 * v5, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      int v10 = *(unsigned __int8 *)(v7 + *(int *)(v67 + 36));
      sub_10059B52C(v7, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v10 != 4)
      {
        sub_10059B66C(*(void *)(v3 + 264), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        goto LABEL_4;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      *(void *)(v3 + 112) = 0x7365547265646E75;
      *(void *)(v3 + 120) = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v3 + 384) == 1)
      {
        id v11 = [self sharedInstance];
        unsigned int v12 = [v11 isInternalBuild];

        if (v12)
        {
          if (qword_101636818 != -1) {
            swift_once();
          }
          uint64_t v14 = *(void *)(v3 + 184);
          uint64_t v13 = *(void *)(v3 + 192);
          uint64_t v15 = sub_100010324(*(void *)(v3 + 176), (uint64_t)qword_101638DF0);
          swift_beginAccess();
          sub_10001D074(v15, v14, (uint64_t *)&unk_10163AC90);
          if ((*v61)(v14, 1, v13) != 1)
          {
            (*v60)(*(void *)(v3 + 216), *(void *)(v3 + 184), *(void *)(v3 + 192));
            goto LABEL_31;
          }
          sub_10001DAB4(*(void *)(v3 + 184), (uint64_t *)&unk_10163AC90);
        }
      }
      uint64_t My = type metadata accessor for Feature.FindMy();
      *(void *)(v3 + 40) = My;
      *(void *)(v3 + 48) = sub_10059C124((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v17 = sub_10001D958(v63);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v17, v62, My);
      LOBYTE(My) = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
      if (My)
      {
        sub_100F46C4C();
        double Current = CFAbsoluteTimeGetCurrent();
        if (qword_101637200 != -1) {
          swift_once();
        }
        sub_10000588C(&qword_101639450);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        if (Current - *(double *)(v3 + 128) - *(double *)(v3 + 136) > 86400.0)
        {
          uint64_t v19 = *(void *)(v3 + 168);
          OSAllocatedUnfairLock.callAsFunction<A>(_:)();
          uint64_t v20 = type metadata accessor for TaskPriority();
          uint64_t v21 = *(void *)(v20 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
          uint64_t v22 = swift_allocObject();
          *(void *)(v22 + 16) = 0;
          uint64_t v23 = (void *)(v22 + 16);
          *(void *)(v22 + 24) = 0;
          int v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
          uint64_t v25 = *(void *)(v3 + 168);
          if (v24 == 1)
          {
            sub_10001DAB4(*(void *)(v3 + 168), &qword_10164DBB0);
            if (*v23) {
              goto LABEL_22;
            }
LABEL_26:
            uint64_t v26 = 0;
            uint64_t v28 = 0;
          }
          else
          {
            TaskPriority.rawValue.getter();
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
            if (!*v23) {
              goto LABEL_26;
            }
LABEL_22:
            swift_getObjectType();
            swift_unknownObjectRetain();
            uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter();
            uint64_t v28 = v27;
            swift_unknownObjectRelease();
          }
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = &unk_101639458;
          *(void *)(v29 + 24) = v22;
          if (v28 | v26)
          {
            *(void *)(v3 + 56) = 0;
            *(void *)(v3 + 64) = 0;
            *(void *)(v3 + 72) = v26;
            *(void *)(v3 + 80) = v28;
          }
          swift_task_create();
          swift_release();
        }
        Date.init(timeIntervalSinceReferenceDate:)();
        goto LABEL_31;
      }
      Date.init()();
LABEL_31:
      uint64_t v30 = *(uint64_t **)(v3 + 264);
      uint64_t v31 = *(void *)(v3 + 208);
      sub_100CB3358(v30, v31);
      uint64_t v33 = *(void *)(v3 + 264);
      uint64_t v35 = *(void *)(v3 + 208);
      uint64_t v34 = *(void *)(v3 + 216);
      uint64_t v36 = *(void *)(v3 + 192);
      Date.timeIntervalSince(_:)();
      double v38 = v37;
      uint64_t v39 = *v65;
      (*v65)(v35, v36);
      v39(v34, v36);
      sub_10059B66C(v33, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v38 >= 86400.0)
      {
        sub_10059B5E8(*(void *)(v3 + 272), *(void *)(v3 + 256), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v40 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, v66[2] + 1, 1);
          uint64_t v40 = (void *)v72[0];
        }
        uint64_t v4 = v64;
        unint64_t v42 = v40[2];
        unint64_t v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_1000B721C(v41 > 1, v42 + 1, 1);
          uint64_t v40 = (void *)v72[0];
        }
        uint64_t v43 = *(void *)(v3 + 256);
        _OWORD v40[2] = v42 + 1;
        uint64_t v66 = v40;
        a1 = sub_10059B5E8(v43, (uint64_t)v40 + v9 + v42 * v71, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        goto LABEL_5;
      }
      uint64_t v4 = v64;
LABEL_4:
      a1 = sub_10059B66C(*(void *)(v3 + 272), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
LABEL_5:
      if (v69 == ++v5) {
        goto LABEL_40;
      }
    }
  }
  uint64_t v66 = _swiftEmptyArrayStorage;
LABEL_40:
  swift_bridgeObjectRelease();
  *(void *)(v3 + 320) = v66;
  uint64_t v44 = v66[2];
  if (v44)
  {
    uint64_t v45 = *(void *)(v3 + 232);
    uint64_t v46 = (uint64_t)v66 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    uint64_t v47 = *(void *)(v45 + 72);
    swift_retain();
    p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
    uint64_t v70 = v47;
    do
    {
      sub_10059B52C(v46, *(void *)(v3 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*((void *)p_ivar_base_size + 273) != -1) {
        swift_once();
      }
      uint64_t v50 = *(void *)(v3 + 240);
      uint64_t v49 = *(void *)(v3 + 248);
      uint64_t v51 = type metadata accessor for Logger();
      sub_100010324(v51, (uint64_t)qword_10170D788);
      sub_10059B52C(v49, v50, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = *(void *)(v3 + 240);
        uint64_t v55 = swift_slowAlloc();
        v72[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136315138;
        sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v47 = v70;
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v55 + 4) = sub_1008FA0F0(v56, v57, v72);
        swift_bridgeObjectRelease();
        uint64_t v58 = v54;
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        sub_10059B66C(v58, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Removing tentatively revoked delegated shares from cloud for beacon %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10059B66C(*(void *)(v3 + 240), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_10059B66C(*(void *)(v3 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v46 += v47;
      --v44;
    }
    while (v44);
    swift_release();
  }
  a2 = *(void *)(v3 + 288);
  a1 = (uint64_t)sub_1005953E4;
  a3 = 0;
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_1005953E4()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[36];
  v0[41] = *(void *)(v2 + 136);
  uint64_t v3 = swift_allocObject();
  v0[42] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  swift_retain();
  return _swift_task_switch(sub_10059548C, 0, 0);
}

uint64_t sub_10059548C()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[43] = v3;
  v3[2] = v2;
  v3[3] = sub_10059B740;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[44] = v4;
  uint64_t v5 = sub_10000588C(&qword_101649210);
  *uint64_t v4 = v0;
  v4[1] = sub_1005955A4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 19, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059B748, v3, v5);
}

uint64_t sub_1005955A4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 288);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 360) = *(void *)(v1 + 152);
  return _swift_task_switch(sub_100595714, v2, 0);
}

uint64_t sub_100595714()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005957B4;
  uint64_t v2 = *(void *)(v0 + 360);
  return sub_100595C30(v2);
}

uint64_t sub_1005957B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1005959C4;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 160);
    uint64_t v4 = sub_1005958DC;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1005958DC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005959C4()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on removal of tentatively revoked delegated share from cloud: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100595C30(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10000588C(&qword_101639E88);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_100595CC4, v1, 0);
}

uint64_t sub_100595CC4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_100EDFA78(v2, v1);
  uint64_t v3 = *(void *)(v0[3] + 168);
  v0[5] = v3;
  return _swift_task_switch(sub_100595D90, v3, 0);
}

uint64_t sub_100595D90()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 128);
  return _swift_task_switch(sub_100595DB8, 0, 0);
}

uint64_t sub_100595DB8()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[7] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100595EB0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100595EB0()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100596060;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100595FCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100595FCC()
{
  return _swift_task_switch(sub_100595FE8, *(void *)(v0 + 24), 0);
}

uint64_t sub_100595FE8()
{
  sub_10001DAB4(*(void *)(v0 + 32), &qword_101639E88);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100596060()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005960CC, v1, 0);
}

uint64_t sub_1005960CC()
{
  sub_10001DAB4(*(void *)(v0 + 32), &qword_101639E88);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100596140(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  v2[16] = sub_10000588C((uint64_t *)&unk_10163B890);
  v2[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  void v2[20] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[25] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[26] = v6;
  v2[27] = *(void *)(v6 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return _swift_task_switch(sub_10059634C, v1, 0);
}

uint64_t sub_10059634C()
{
  uint64_t v22 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = type metadata accessor for Logger();
  v0[32] = sub_100010324(v5, (uint64_t)qword_10170DED0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[33] = v6;
  v0[34] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[31];
  uint64_t v12 = v0[25];
  uint64_t v11 = v0[26];
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Notify owner to stop delegated share of %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
  }

  v0[35] = v16;
  v0[36] = *(void *)(v0[15] + 168);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[37] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100596628;
  uint64_t v18 = v0[14];
  return sub_100E5B3AC(v18);
}

uint64_t sub_100596628(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100596740, v2, 0);
}

uint64_t sub_100596740()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 184) + 80);
    sub_10059B52C(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 168), (uint64_t *)&unk_10163B7C0);
    (*(void (**)(void, void, void))(v0 + 264))(*(void *)(v0 + 224), *(void *)(v0 + 112), *(void *)(v0 + 200));
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 224);
    uint64_t v11 = *(void *)(v0 + 200);
    if (v9)
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      *(void *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No peerTrustIdentifier for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 280))(*(void *)(v0 + 224), *(void *)(v0 + 200));
    }

    sub_10059B594();
    swift_allocError();
    *uint64_t v17 = 6;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 176);
    sub_10059B5E8(*(void *)(v0 + 168), *(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 360) = *(_DWORD *)(v16 + 32);
    return _swift_task_switch(sub_100596B0C, v15, 0);
  }
}

uint64_t sub_100596B0C()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 192) + *(int *)(v0 + 360);
  *(void *)(v0 + 312) = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 320) = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100596BFC, 0, 0);
}

uint64_t sub_100596BFC()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[41] = v3;
  v3[2] = v2;
  v3[3] = sub_10059B654;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[42] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100596D00;
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_100596D00()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100596E50, v1, 0);
}

uint64_t sub_100596E50()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 48))(v1, 1, *(void *)(v0 + 144)) == 1)
  {
    sub_10059B66C(*(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
    (*(void (**)(void, void, void))(v0 + 264))(*(void *)(v0 + 224), *(void *)(v0 + 112), *(void *)(v0 + 200));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 200);
    if (v4)
    {
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      uint64_t v7 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 141558275;
      *(void *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = sub_1008FA0F0(v8, v9, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34(v5, v6);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "No peerTrustIdentifier for %{private,mask.hash}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 280))(*(void *)(v0 + 224), *(void *)(v0 + 200));
    }

    sub_10059B594();
    swift_allocError();
    unsigned char *v22 = 6;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 112);
    sub_10059B5E8(v1, *(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    v10(v11, v13, v12);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v18 = *(void *)(v0 + 200);
    if (v16)
    {
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      uint64_t v19 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558275;
      *(void *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 88) = sub_1008FA0F0(v20, v21, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Will send ids message to owner to stop delegated share of %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 280))(*(void *)(v0 + 232), *(void *)(v0 + 200));
    }

    uint64_t v25 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 200);
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v28 = *(void *)(v0 + 144);
    uint64_t v29 = *(void *)(v0 + 120) + 232;
    uint64_t v30 = *(void *)(v0 + 192) + *(int *)(*(void *)(v0 + 176) + 28);
    *(void *)(v0 + 40) = type metadata accessor for DelegatedCircleTrustStopEnvelopeV1(0);
    *(void *)(v0 + 48) = sub_10059C124(&qword_101648C88, (void (*)(uint64_t))type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
    *(void *)(v0 + 56) = sub_10059C124(&qword_101649208, (void (*)(uint64_t))type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
    uint64_t v31 = sub_10001D958((uint64_t *)(v0 + 16));
    v25(v31, v30, v26);
    uint64_t v32 = v27 + *(int *)(v28 + 28);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670A90 + dword_101670A90);
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v33;
    void *v33 = v0;
    v33[1] = sub_10059747C;
    return v36(v29, v0 + 16, 8, v32);
  }
}

uint64_t sub_10059747C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    BOOL v4 = sub_1005976A4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    BOOL v4 = sub_1005975A4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005975A4()
{
  uint64_t v1 = v0[24];
  sub_10059B66C(v0[20], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1005976A4()
{
  uint64_t v1 = v0[24];
  sub_10059B66C(v0[20], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10059B66C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1005977B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = v4;
  *(unsigned char *)(v5 + 208) = a2;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a3;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 72) = *(void *)(v7 + 64);
  *(void *)(v5 + 80) = swift_task_alloc();
  *(void *)(v5 + 88) = swift_task_alloc();
  *(void *)(v5 + 96) = sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v5 + 104) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 112) = v8;
  *(void *)(v5 + 120) = *(void *)(v8 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_100597920, v4, 0);
}

uint64_t sub_100597920()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 168);
  *(void *)(v0 + 136) = v1;
  return _swift_task_switch(sub_100597944, v1, 0);
}

uint64_t sub_100597944()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[3];
  v0[18] = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[19] = v6;
  v0[20] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[21] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100597A48, 0, 0);
}

uint64_t sub_100597A48()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  v3[2] = v2;
  v3[3] = sub_10059B514;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100597B50;
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_100597B50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100597CA0, v1, 0);
}

uint64_t sub_100597CA0()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 120) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DED0);
    v4(v5, v3, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v13 = *(void *)(v0 + 64);
    if (v10)
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)unint64_t v14 = 136315138;
      sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = sub_1008FA0F0(v15, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "handleDelegatedCircleTrustStop - owner sharing circle not found with shareIdentifier %s. Cannot stop the share.", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 56));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v19 = *(unsigned __int8 *)(v0 + 208);
    sub_10059B5E8(v2, v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v20 = v17 + *(int *)(v1 + 24);
    unint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v21;
    void *v21 = v0;
    v21[1] = sub_10059801C;
    uint64_t v22 = *(void *)(v0 + 32);
    return sub_10058BF9C(v20, v19, v22, v18);
  }
}

uint64_t sub_10059801C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1005981F0;
  }
  else {
    uint64_t v4 = sub_100598148;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100598148()
{
  sub_10059B66C(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005981F0()
{
  sub_10059B66C(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10059829C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1005982BC, v1, 0);
}

uint64_t sub_1005982BC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 168);
  *(void *)(v0 + 40) = v1;
  return _swift_task_switch(sub_1005982E0, v1, 0);
}

uint64_t sub_1005982E0()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 136);
  swift_retain();
  return _swift_task_switch(sub_100598354, 0, 0);
}

uint64_t sub_100598354()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100598468;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100598468()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 72) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_1005985D8, v2, 0);
}

uint64_t sub_1005985D8()
{
  v0[10] = *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100598698;
  uint64_t v2 = v0[3];
  return sub_100652360(v2);
}

uint64_t sub_100598698()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_1005987D4, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1005987D4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100598838(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100598858, v1, 0);
}

uint64_t sub_100598858()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 168);
  *(void *)(v0 + 40) = v1;
  return _swift_task_switch(sub_10059887C, v1, 0);
}

uint64_t sub_10059887C()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 136);
  swift_retain();
  return _swift_task_switch(sub_1005988F0, 0, 0);
}

uint64_t sub_1005988F0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100598A04;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100598A04()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 72) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100598B60, 0, 0);
}

uint64_t sub_100598B60()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100598C08;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_100650E30(v2);
}

uint64_t sub_100598C08()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_100598D44, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100598D44()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100598DA8(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return _swift_task_switch(sub_100598DC8, v1, 0);
}

uint64_t sub_100598DC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 168);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_100598DEC, v1, 0);
}

uint64_t sub_100598DEC()
{
  *(void *)(v0 + 72) = *(void *)(*(void *)(v0 + 64) + 136);
  swift_retain();
  return _swift_task_switch(sub_100598E60, 0, 0);
}

uint64_t sub_100598E60()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100598F74;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100598F74()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[12] = v1[5];
  uint64_t v3 = (void *)swift_task_alloc();
  v1[13] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100599110;
  uint64_t v4 = v1[6];
  return sub_1012E298C(v4);
}

uint64_t sub_100599110(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[2] = v2;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = v3[7];
  v4[14] = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100599248, v5, 0);
}

uint64_t sub_100599248()
{
  unint64_t v1 = v0[14];
  unint64_t v2 = v1 >> 60;
  if (v1 >> 60 != 15) {
    sub_100037A24(v0[3], v1);
  }
  uint64_t v3 = (uint64_t (*)(BOOL))v0[1];
  return v3(v2 < 0xF);
}

uint64_t sub_1005992C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[18] = a1;
  v5[21] = type metadata accessor for OwnerSharingCircle();
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_100599358, v4, 0);
}

uint64_t sub_100599358()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_100599494;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100599494(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005995AC, v2, 0);
}

uint64_t sub_1005995AC()
{
  uint64_t v1 = v0[19];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  switch(v1)
  {
    case 0:
    case 3:
      swift_release();
      goto LABEL_3;
    case 1:
      if (!v0[24]) {
        goto LABEL_3;
      }
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[25] = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1005997DC;
      uint64_t v7 = v0[18];
      uint64_t result = sub_100B91950(v7);
      break;
    case 2:
      if (!v0[24]) {
        goto LABEL_3;
      }
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[29] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_100599A94;
      uint64_t v9 = v0[18];
      uint64_t result = sub_100B908E8(v9);
      break;
    default:
      if (v0[24])
      {
        swift_retain();
        uint64_t v4 = (void *)swift_task_alloc();
        v0[27] = v4;
        *uint64_t v4 = v0;
        v4[1] = sub_10059996C;
        uint64_t v5 = v0[18];
        uint64_t result = sub_100B929B8(v5);
      }
      else
      {
LABEL_3:
        swift_task_dealloc();
        uint64_t v2 = (uint64_t (*)(void))v0[1];
        uint64_t result = v2();
      }
      break;
  }
  return result;
}

uint64_t sub_1005997DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_100599BBC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 160);
    swift_release();
    uint64_t v4 = sub_100599904;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100599904()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10059996C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_100599F3C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 160);
    swift_release();
    uint64_t v4 = sub_10059EE68;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100599A94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_10059A2BC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 160);
    swift_release();
    uint64_t v4 = sub_10059EE68;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100599BBC()
{
  unint64_t v16 = v0;
  swift_release_n();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[22];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to post notification for %{private,mask.hash}s: %{public}@.", (uint8_t *)v8, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100599F3C()
{
  unint64_t v16 = v0;
  swift_release_n();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[22];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to post notification for %{private,mask.hash}s: %{public}@.", (uint8_t *)v8, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10059A2BC()
{
  unint64_t v16 = v0;
  swift_release_n();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_10059B52C(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[22];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10059C124((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to post notification for %{private,mask.hash}s: %{public}@.", (uint8_t *)v8, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10059B66C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10059A63C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 272);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DelegatedShareUseCase()
{
  return self;
}

uint64_t sub_10059A6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  sub_10000588C(&qword_101641B60);
  v5[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLComponents();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v5[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_10059A844, 0, 0);
}

uint64_t sub_10059A844()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DelegatedShareUseCase.DelegationURL(0) + 20));
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[12];
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v6 = sub_1010AC300(v0[2]);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *uint64_t v2 = v6;
  v2[1] = v8;
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    uint64_t v9 = v0[12];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = &qword_101649E40;
LABEL_7:
    sub_10001DAB4(v9, v10);
    sub_10059BC9C();
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  uint64_t v11 = v0[9];
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[8];
  (*(void (**)(void, void, void))(v0[14] + 32))(v0[15], v0[12], v0[13]);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  uint64_t v16 = v0[14];
  uint64_t v15 = v0[15];
  if (v14 == 1)
  {
    uint64_t v9 = v0[8];
    (*(void (**)(void, void))(v16 + 8))(v0[15], v0[13]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = &qword_101641B60;
    goto LABEL_7;
  }
  uint64_t v18 = v0[11];
  uint64_t v20 = v0[9];
  uint64_t v19 = v0[10];
  uint64_t v23 = v0[13];
  uint64_t v21 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v18, v0[8], v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v21, v18, v20);
  sub_10000588C((uint64_t *)&unk_101657840);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLComponents.queryItems.setter();
  URLComponents.fragment.setter();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v17();
}

void sub_10059AC3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
    uint64_t v13 = (uint64_t *)(v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE22E0(v13);
      if (v5) {
        goto LABEL_23;
      }
      uint64_t v13 = (uint64_t *)((char *)v13 + v14);
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v15 = a3[1];
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v18 = (uint64_t *)(v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
    uint64_t v19 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1FB0(v18);
      if (v5) {
        goto LABEL_23;
      }
      uint64_t v18 = (uint64_t *)((char *)v18 + v19);
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v20 = *a3;
  uint64_t v21 = *(void *)(*a3 + 16);
  if (v21)
  {
    uint64_t v22 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v23 = (uint64_t *)(v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
    uint64_t v24 = *(void *)(v22 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1F84(v23);
      if (v5) {
        break;
      }
      uint64_t v23 = (uint64_t *)((char *)v23 + v24);
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_16:
  uint64_t v25 = *(void *)(a4 + 16);
  if (!v25)
  {
LABEL_21:
    uint64_t v29 = *(void *)(a5 + 16);
    if (!v29) {
      return;
    }
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
  uint64_t v27 = (uint64_t *)(a4 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)));
  uint64_t v28 = *(void *)(v26 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100EE5448(v27);
    if (v5) {
      break;
    }
    uint64_t v27 = (uint64_t *)((char *)v27 + v28);
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v6 = 0;
  uint64_t v29 = *(void *)(a5 + 16);
  if (v29)
  {
LABEL_26:
    uint64_t v30 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
    uint64_t v31 = (uint64_t *)(a5 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)));
    uint64_t v32 = *(void *)(v30 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5068(v31);
      if (v6) {
        break;
      }
      uint64_t v31 = (uint64_t *)((char *)v31 + v32);
      if (!--v29) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

void sub_10059AFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8)
  {
    uint64_t v10 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
    uint64_t v11 = (uint64_t *)(a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5068(v11);
      if (v5) {
        break;
      }
      uint64_t v11 = (uint64_t *)((char *)v11 + v12);
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v13 = *a4;
    uint64_t v14 = *(void *)(*a4 + 16);
    if (v14)
    {
      uint64_t v15 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
      uint64_t v16 = (uint64_t *)(v13
                      + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)));
      uint64_t v17 = *(void *)(v15 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100EE5C08(v16);
        if (v5) {
          break;
        }
        uint64_t v16 = (uint64_t *)((char *)v16 + v17);
        if (!--v14)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v18 = *a5;
      uint64_t v19 = *(void *)(*a5 + 16);
      if (!v19) {
        return;
      }
      uint64_t v20 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
      uint64_t v21 = (uint64_t *)(v18
                      + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)));
      uint64_t v22 = *(void *)(v20 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100EE5828(v21);
        if (v5) {
          break;
        }
        uint64_t v21 = (uint64_t *)((char *)v21 + v22);
        --v19;
      }
      while (v19);
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_10059B1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = *(void *)(a3 + 16);
  if (v29)
  {
    uint64_t v6 = sub_10000588C(&qword_10163BA10);
    uint64_t v7 = a3
       + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
    uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 72);
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v26 = v8;
    uint64_t v27 = v7;
    uint64_t v28 = v6;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v7 + v8 * v9);
      sub_100EE5C08(v10);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v11 = *(uint64_t *)((char *)v10 + *(int *)(v6 + 48));
      unint64_t v12 = *(void *)(v11 + 16);
      if (v12 < 0xA)
      {
        if (v12)
        {
          uint64_t v17 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
          uint64_t v18 = (uint64_t *)(v11
                          + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
          uint64_t v19 = *(void *)(v17 + 72);
          swift_bridgeObjectRetain();
          do
          {
            sub_100EE5828(v18);
            uint64_t v18 = (uint64_t *)((char *)v18 + v19);
            --v12;
          }
          while (v12);
          goto LABEL_15;
        }
      }
      else
      {
        if (qword_101636888 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_100010324(v13, (uint64_t)qword_10170D788);
        swift_bridgeObjectRetain();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v14, v15))
        {

LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 134218240;
        *(void *)(v16 + 4) = 9;
        *(_WORD *)(v16 + 12) = 2048;
        *(void *)(v16 + 14) = v12;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "More than %ld shared secrets - leaving them orphaned for later cleanup. Count: %ld.", (uint8_t *)v16, 0x16u);
        swift_slowDealloc();
      }
LABEL_16:
      uint64_t v6 = v28;
      uint64_t v20 = *(uint64_t *)((char *)v10 + *(int *)(v28 + 64));
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        uint64_t v22 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
        uint64_t v23 = (uint64_t *)(v20
                        + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
        uint64_t v24 = *(void *)(v22 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_100EE5068(v23);
          uint64_t v23 = (uint64_t *)((char *)v23 + v24);
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
      }
      ++v9;
      uint64_t v8 = v26;
      uint64_t v7 = v27;
      if (v9 == v29) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_10059B514()
{
  return sub_10059C09C((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_10059B52C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10059B594()
{
  unint64_t result = qword_101649200;
  if (!qword_101649200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649200);
  }
  return result;
}

uint64_t sub_10059B5E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10059B654()
{
  return sub_10059C09C((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t sub_10059B66C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10059B6CC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10059B704()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10059B740@<X0>(void *a1@<X8>)
{
  return sub_100E5E2A8(*(void *)(v1 + 24), a1);
}

uint64_t sub_10059B748(uint64_t a1)
{
  return sub_10012A37C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10059B758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163BA10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10059B7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnerPeerTrust();
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)v28 - v12;
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    v28[1] = v2;
    uint64_t v29 = (v15 + 32) & ~v15;
    uint64_t v33 = a1 + v29;
    uint64_t v35 = *(void *)(v11 + 72);
    uint64_t v38 = v6 + 16;
    uint64_t v39 = a2 + 56;
    uint64_t v30 = v6;
    uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    uint64_t v40 = a2;
    do
    {
      uint64_t v36 = v14;
      sub_10059B52C(v33 + v35 * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (*(void *)(v17 + 16)
        && (sub_10059C124(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v40,
            uint64_t v19 = -1 << *(unsigned char *)(v40 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = ~v19;
        uint64_t v22 = *(void *)(v30 + 72);
        uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v23(v8, *(void *)(v17 + 48) + v22 * v20, v5);
          sub_10059C124((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v21;
          uint64_t v17 = v40;
          if (((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_10059B5E8(v37, v31, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B747C(0, v25[2] + 1, 1);
          uint64_t v25 = v41;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B747C(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v41;
        }
        v25[2] = v27 + 1;
        sub_10059B5E8(v31, (uint64_t)v25 + v29 + v27 * v35, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v17 = v40;
      }
      else
      {
LABEL_3:
        sub_10059B66C(v37, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      uint64_t v14 = v36 + 1;
    }
    while (v36 + 1 != v34);
    return v41;
  }
  return result;
}

uint64_t sub_10059BBF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10059BC04()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10059BC3C()
{
  return sub_1006525F8(v0[2], v0[3], v0[4]);
}

void sub_10059BC5C(uint64_t a1)
{
  sub_100EE370C(*(uint64_t **)(v1 + 16), a1);
}

uint64_t type metadata accessor for DelegatedShareUseCase.DelegationURL(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101649378);
}

unint64_t sub_10059BC9C()
{
  unint64_t result = qword_101649248;
  if (!qword_101649248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101649248);
  }
  return result;
}

uint64_t sub_10059BCF4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_release();
  uint64_t v11 = v0 + v4;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  uint64_t v13 = v0 + v8;
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  v12(v13 + v6[7], v1);
  v12(v13 + v6[8], v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_10059BE70()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnerSharingCircle() - 8) + 80);
  unint64_t v6 = v3 + v4 + v5;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + (v6 & ~v5);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_100582E64(v7, v8, v9);
}

uint64_t type metadata accessor for DelegatedShareUseCase.ShareCreationData(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016492D8);
}

uint64_t sub_10059BFD0@<X0>(size_t *a1@<X8>)
{
  type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v1 + 16);

  return sub_100E5CDE4(v3, a1);
}

void sub_10059C044(uint64_t a1, uint64_t a2)
{
  sub_10059AC3C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10059C068()
{
  return sub_10059C09C((uint64_t (*)(uint64_t, uint64_t))sub_100E5F1B0);
}

uint64_t sub_10059C084()
{
  return sub_10059C09C(sub_100E5F4E8);
}

uint64_t sub_10059C09C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10059C124(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10059C16C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7);
    unint64_t v11 = *(uint64_t *)((char *)a2 + v7 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v10, v11);
    *uint64_t v8 = v10;
    v8[1] = v11;
    uint64_t v12 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v13 = v12[5];
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v117(v14, v15, v16);
    uint64_t v18 = v12[6];
    uint64_t v19 = (char *)v8 + v18;
    unint64_t v20 = &v9[v18];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = *((void *)v20 + 1);
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = v23;
        uint64_t v24 = *((void *)v20 + 3);
        *((void *)v19 + 2) = *((void *)v20 + 2);
        *((void *)v19 + 3) = v24;
        uint64_t v21 = v16;
        uint64_t v25 = *((void *)v20 + 5);
        *((void *)v19 + 4) = *((void *)v20 + 4);
        *((void *)v19 + 5) = v25;
        goto LABEL_8;
      case 2u:
        v117(v19, v20, v16);
        unint64_t v26 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v27 = v26[12];
        uint64_t v28 = &v19[v27];
        uint64_t v29 = &v20[v27];
        uint64_t v31 = *(void *)v29;
        uint64_t v30 = *((void *)v29 + 1);
        *(void *)uint64_t v28 = v31;
        *((void *)v28 + 1) = v30;
        uint64_t v32 = v26[16];
        uint64_t v33 = &v19[v32];
        uint64_t v34 = &v20[v32];
        uint64_t v114 = *((void *)v34 + 1);
        *(void *)uint64_t v33 = *(void *)v34;
        *((void *)v33 + 1) = v114;
        uint64_t v35 = v26[20];
        uint64_t v36 = &v19[v35];
        uint64_t v37 = &v20[v35];
        uint64_t v38 = *((void *)v37 + 1);
        *(void *)uint64_t v36 = *(void *)v37;
        *((void *)v36 + 1) = v38;
        *(_WORD *)&v19[v26[24]] = *(_WORD *)&v20[v26[24]];
        uint64_t v39 = v26[28];
        uint64_t v40 = &v19[v39];
        unint64_t v41 = &v20[v39];
        uint64_t v21 = v16;
        uint64_t v42 = *((void *)v41 + 1);
        *(void *)uint64_t v40 = *(void *)v41;
        *((void *)v40 + 1) = v42;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v117(v19, v20, v16);
        uint64_t v43 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v44 = v43[12];
        uint64_t v45 = &v19[v44];
        uint64_t v46 = &v20[v44];
        uint64_t v48 = *(void *)v46;
        uint64_t v47 = *((void *)v46 + 1);
        *(void *)uint64_t v45 = v48;
        *((void *)v45 + 1) = v47;
        uint64_t v49 = v43[16];
        uint64_t v50 = &v19[v49];
        uint64_t v51 = &v20[v49];
        uint64_t v52 = *((void *)v51 + 1);
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = v52;
        uint64_t v53 = v43[20];
        uint64_t v54 = &v19[v53];
        uint64_t v55 = &v20[v53];
        uint64_t v21 = v16;
        uint64_t v56 = *((void *)v55 + 1);
        *(void *)uint64_t v54 = *(void *)v55;
        *((void *)v54 + 1) = v56;
        v19[v43[24]] = v20[v43[24]];
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v21 = v16;
        uint64_t v22 = *((void *)v20 + 1);
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = v22;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v57 = v12[7];
    uint64_t v58 = (char *)v8 + v57;
    uint64_t v59 = &v9[v57];
    uint64_t v60 = v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(&v9[v57], 1, v21))
    {
      uint64_t v61 = sub_10000588C(&qword_101638CF0);
      memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      v117(v58, v59, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v58, 0, 1, v21);
    }
    uint64_t v62 = v12[8];
    uint64_t v63 = (char *)v8 + v62;
    uint64_t v64 = &v9[v62];
    uint64_t v65 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
    uint64_t v66 = v12[9];
    uint64_t v67 = (uint64_t *)((char *)v8 + v66);
    uint64_t v68 = (uint64_t *)&v9[v66];
    uint64_t v69 = *v68;
    unint64_t v70 = v68[1];
    sub_1000361E0(*v68, v70);
    *uint64_t v67 = v69;
    v67[1] = v70;
    uint64_t v71 = v12[10];
    uint64_t v72 = (char *)v8 + v71;
    uint64_t v73 = &v9[v71];
    unint64_t v74 = *((void *)v73 + 1);
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    }
    else
    {
      uint64_t v75 = *(void *)v73;
      sub_1000361E0(*(void *)v73, *((void *)v73 + 1));
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1) = v74;
    }
    uint64_t v76 = v12[11];
    uint64_t v77 = (char *)v8 + v76;
    uint64_t v78 = &v9[v76];
    unint64_t v79 = *((void *)v78 + 1);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    }
    else
    {
      uint64_t v80 = *(void *)v78;
      sub_1000361E0(*(void *)v78, *((void *)v78 + 1));
      *(void *)uint64_t v77 = v80;
      *((void *)v77 + 1) = v79;
    }
    uint64_t v81 = v12[12];
    uint64_t v82 = (uint64_t *)((char *)v8 + v81);
    uint64_t v83 = (uint64_t *)&v9[v81];
    uint64_t v84 = *v83;
    unint64_t v85 = v83[1];
    sub_1000361E0(*v83, v85);
    *uint64_t v82 = v84;
    v82[1] = v85;
    uint64_t v86 = v12[13];
    uint64_t v87 = (uint64_t *)((char *)v8 + v86);
    uint64_t v88 = (uint64_t *)&v9[v86];
    uint64_t v89 = *v88;
    unint64_t v90 = v88[1];
    sub_1000361E0(*v88, v90);
    *uint64_t v87 = v89;
    v87[1] = v90;
    uint64_t v91 = v12[14];
    unint64_t v92 = (uint64_t *)((char *)v8 + v91);
    uint64_t v93 = &v9[v91];
    uint64_t v94 = *((void *)v93 + 1);
    *unint64_t v92 = *(void *)v93;
    v92[1] = v94;
    uint64_t v95 = v12[15];
    uint64_t v96 = (uint64_t *)((char *)v8 + v95);
    char v97 = &v9[v95];
    uint64_t v98 = *((void *)v97 + 1);
    void *v96 = *(void *)v97;
    v96[1] = v98;
    *(uint64_t *)((char *)v8 + v12[16]) = *(void *)&v9[v12[16]];
    *(uint64_t *)((char *)v8 + v12[17]) = *(void *)&v9[v12[17]];
    *((unsigned char *)v8 + v12[18]) = v9[v12[18]];
    *((unsigned char *)v8 + v12[19]) = v9[v12[19]];
    *((unsigned char *)v8 + v12[20]) = v9[v12[20]];
    uint64_t v99 = *(int *)(a3 + 32);
    uint64_t v100 = (uint64_t *)((char *)a1 + v99);
    uint64_t v101 = (char *)a2 + v99;
    uint64_t v102 = *(uint64_t *)((char *)a2 + v99);
    unint64_t v103 = *(uint64_t *)((char *)a2 + v99 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v102, v103);
    uint64_t *v100 = v102;
    v100[1] = v103;
    uint64_t v104 = (int *)type metadata accessor for BeaconNamingRecord();
    v117((char *)v100 + v104[5], &v101[v104[5]], v60);
    v117((char *)v100 + v104[6], &v101[v104[6]], v60);
    *(uint64_t *)((char *)v100 + v104[7]) = *(void *)&v101[v104[7]];
    uint64_t v105 = v104[8];
    char v106 = (uint64_t *)((char *)v100 + v105);
    unint64_t v107 = &v101[v105];
    uint64_t v108 = *((void *)v107 + 1);
    *char v106 = *(void *)v107;
    v106[1] = v108;
    uint64_t v109 = v104[9];
    uint64_t v110 = (uint64_t *)((char *)v100 + v109);
    uint64_t v111 = &v101[v109];
    uint64_t v112 = *((void *)v111 + 1);
    *uint64_t v110 = *(void *)v111;
    v110[1] = v112;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10059C770(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v4 + v5[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  uint64_t v14 = (uint64_t *)(v4 + v5[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v4 + v5[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + *(int *)(a2 + 32);
  sub_10001CFB8(*(void *)v18, *(void *)(v18 + 8));
  uint64_t v19 = type metadata accessor for BeaconNamingRecord();
  v9(v18 + *(int *)(v19 + 20), v7);
  v9(v18 + *(int *)(v19 + 24), v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10059CAF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(void *)((char *)a2 + v4);
  unint64_t v8 = *(void *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v7, v8);
  *uint64_t v5 = v7;
  v5[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = v9[5];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v15(v11, v12, v13);
  uint64_t v16 = v9[6];
  unint64_t v17 = (char *)v5 + v16;
  uint64_t v18 = &v6[v16];
  type metadata accessor for StableIdentifier();
  uint64_t v115 = v15;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = *((void *)v18 + 1);
      *(void *)unint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v21;
      uint64_t v22 = *((void *)v18 + 3);
      *((void *)v17 + 2) = *((void *)v18 + 2);
      *((void *)v17 + 3) = v22;
      uint64_t v19 = v13;
      uint64_t v23 = *((void *)v18 + 5);
      *((void *)v17 + 4) = *((void *)v18 + 4);
      *((void *)v17 + 5) = v23;
      goto LABEL_6;
    case 2u:
      v15(v17, v18, v13);
      uint64_t v24 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v25 = v24[12];
      unint64_t v26 = &v17[v25];
      uint64_t v27 = &v18[v25];
      uint64_t v29 = *(void *)v27;
      uint64_t v28 = *((void *)v27 + 1);
      *(void *)unint64_t v26 = v29;
      *((void *)v26 + 1) = v28;
      uint64_t v30 = v24[16];
      uint64_t v31 = &v17[v30];
      uint64_t v32 = &v18[v30];
      uint64_t v111 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v111;
      uint64_t v33 = v24[20];
      uint64_t v34 = &v17[v33];
      uint64_t v35 = &v18[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      *(_WORD *)&v17[v24[24]] = *(_WORD *)&v18[v24[24]];
      uint64_t v37 = v24[28];
      uint64_t v38 = &v17[v37];
      uint64_t v39 = &v18[v37];
      uint64_t v19 = v13;
      uint64_t v40 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v40;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      v15(v17, v18, v13);
      unint64_t v41 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v42 = v41[12];
      uint64_t v43 = &v17[v42];
      uint64_t v44 = &v18[v42];
      uint64_t v46 = *(void *)v44;
      uint64_t v45 = *((void *)v44 + 1);
      *(void *)uint64_t v43 = v46;
      *((void *)v43 + 1) = v45;
      uint64_t v47 = v41[16];
      uint64_t v48 = &v17[v47];
      uint64_t v49 = &v18[v47];
      uint64_t v50 = *((void *)v49 + 1);
      *(void *)uint64_t v48 = *(void *)v49;
      *((void *)v48 + 1) = v50;
      uint64_t v51 = v41[20];
      uint64_t v52 = &v17[v51];
      uint64_t v53 = &v18[v51];
      uint64_t v19 = v13;
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      v17[v41[24]] = v18[v41[24]];
LABEL_6:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v19 = v13;
      uint64_t v20 = *((void *)v18 + 1);
      *(void *)unint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v20;
      break;
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v55 = v9[7];
  uint64_t v56 = (char *)v5 + v55;
  uint64_t v57 = &v6[v55];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&v6[v55], 1, v19))
  {
    uint64_t v58 = sub_10000588C(&qword_101638CF0);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    v115(v56, v57, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v56, 0, 1, v19);
  }
  uint64_t v59 = v9[8];
  uint64_t v60 = (char *)v5 + v59;
  uint64_t v61 = &v6[v59];
  uint64_t v62 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
  uint64_t v63 = v9[9];
  uint64_t v64 = (uint64_t *)((char *)v5 + v63);
  uint64_t v65 = (uint64_t *)&v6[v63];
  uint64_t v66 = *v65;
  unint64_t v67 = v65[1];
  sub_1000361E0(*v65, v67);
  uint64_t *v64 = v66;
  v64[1] = v67;
  uint64_t v68 = v9[10];
  uint64_t v69 = (char *)v5 + v68;
  unint64_t v70 = &v6[v68];
  unint64_t v71 = *((void *)v70 + 1);
  if (v71 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
  }
  else
  {
    uint64_t v72 = *(void *)v70;
    sub_1000361E0(*(void *)v70, *((void *)v70 + 1));
    *(void *)uint64_t v69 = v72;
    *((void *)v69 + 1) = v71;
  }
  uint64_t v73 = v9[11];
  unint64_t v74 = (char *)v5 + v73;
  uint64_t v75 = &v6[v73];
  unint64_t v76 = *((void *)v75 + 1);
  if (v76 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
  }
  else
  {
    uint64_t v77 = *(void *)v75;
    sub_1000361E0(*(void *)v75, *((void *)v75 + 1));
    *(void *)unint64_t v74 = v77;
    *((void *)v74 + 1) = v76;
  }
  uint64_t v78 = v9[12];
  unint64_t v79 = (uint64_t *)((char *)v5 + v78);
  uint64_t v80 = (uint64_t *)&v6[v78];
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  sub_1000361E0(*v80, v82);
  *unint64_t v79 = v81;
  v79[1] = v82;
  uint64_t v83 = v9[13];
  uint64_t v84 = (uint64_t *)((char *)v5 + v83);
  unint64_t v85 = (uint64_t *)&v6[v83];
  uint64_t v86 = *v85;
  unint64_t v87 = v85[1];
  sub_1000361E0(*v85, v87);
  *uint64_t v84 = v86;
  v84[1] = v87;
  uint64_t v88 = v9[14];
  uint64_t v89 = (uint64_t *)((char *)v5 + v88);
  unint64_t v90 = &v6[v88];
  uint64_t v91 = *((void *)v90 + 1);
  *uint64_t v89 = *(void *)v90;
  v89[1] = v91;
  uint64_t v92 = v9[15];
  uint64_t v93 = (uint64_t *)((char *)v5 + v92);
  uint64_t v94 = &v6[v92];
  uint64_t v95 = *((void *)v94 + 1);
  void *v93 = *(void *)v94;
  v93[1] = v95;
  *(uint64_t *)((char *)v5 + v9[16]) = *(void *)&v6[v9[16]];
  *(uint64_t *)((char *)v5 + v9[17]) = *(void *)&v6[v9[17]];
  *((unsigned char *)v5 + v9[18]) = v6[v9[18]];
  *((unsigned char *)v5 + v9[19]) = v6[v9[19]];
  *((unsigned char *)v5 + v9[20]) = v6[v9[20]];
  uint64_t v96 = *(int *)(a3 + 32);
  char v97 = (void *)((char *)a1 + v96);
  uint64_t v98 = (char *)a2 + v96;
  uint64_t v99 = *(void *)((char *)a2 + v96);
  unint64_t v100 = *(void *)((char *)a2 + v96 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v99, v100);
  *char v97 = v99;
  v97[1] = v100;
  uint64_t v101 = (int *)type metadata accessor for BeaconNamingRecord();
  v115((char *)v97 + v101[5], &v98[v101[5]], v19);
  v115((char *)v97 + v101[6], &v98[v101[6]], v19);
  *(uint64_t *)((char *)v97 + v101[7]) = *(void *)&v98[v101[7]];
  uint64_t v102 = v101[8];
  unint64_t v103 = (uint64_t *)((char *)v97 + v102);
  uint64_t v104 = &v98[v102];
  uint64_t v105 = *((void *)v104 + 1);
  *unint64_t v103 = *(void *)v104;
  v103[1] = v105;
  uint64_t v106 = v101[9];
  unint64_t v107 = (uint64_t *)((char *)v97 + v106);
  uint64_t v108 = &v98[v106];
  uint64_t v109 = *((void *)v108 + 1);
  *unint64_t v107 = *(void *)v108;
  v107[1] = v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10059D0A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = a3;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)((char *)a1 + v6);
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6);
  unint64_t v10 = *(void *)((char *)a2 + v6 + 8);
  sub_1000361E0(v9, v10);
  uint64_t v11 = *v7;
  unint64_t v12 = v7[1];
  *uint64_t v7 = v9;
  v7[1] = v10;
  sub_10001CFB8(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v14 = v13[5];
  unint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = &v8[v14];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v118 = v17;
  uint64_t v115 = *(void (**)(char *, char *))(v18 + 24);
  v115(v15, v16);
  uint64_t v117 = a2;
  if (a1 != a2)
  {
    uint64_t v19 = v13[6];
    uint64_t v20 = (uint64_t *)((char *)v7 + v19);
    uint64_t v21 = &v8[v19];
    sub_10059B66C((uint64_t)v7 + v19, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v20 = *(void *)v21;
        v20[1] = *((void *)v21 + 1);
        void v20[2] = *((void *)v21 + 2);
        v20[3] = *((void *)v21 + 3);
        v20[4] = *((void *)v21 + 4);
        void v20[5] = *((void *)v21 + 5);
        goto LABEL_7;
      case 2u:
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v20, v21, v118);
        uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v23 = v22[12];
        uint64_t v24 = (void *)((char *)v20 + v23);
        uint64_t v25 = &v21[v23];
        void *v24 = *(void *)v25;
        v24[1] = *((void *)v25 + 1);
        uint64_t v26 = v22[16];
        uint64_t v27 = (void *)((char *)v20 + v26);
        uint64_t v28 = &v21[v26];
        *uint64_t v27 = *(void *)v28;
        v27[1] = *((void *)v28 + 1);
        uint64_t v29 = v22[20];
        uint64_t v30 = (void *)((char *)v20 + v29);
        uint64_t v31 = &v21[v29];
        void *v30 = *(void *)v31;
        v30[1] = *((void *)v31 + 1);
        *(_WORD *)((char *)v20 + v22[24]) = *(_WORD *)&v21[v22[24]];
        uint64_t v32 = v22[28];
        uint64_t v33 = (void *)((char *)v20 + v32);
        uint64_t v34 = &v21[v32];
        void *v33 = *(void *)v34;
        v33[1] = *((void *)v34 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v20, v21, v118);
        uint64_t v35 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v36 = v35[12];
        uint64_t v37 = (void *)((char *)v20 + v36);
        uint64_t v38 = &v21[v36];
        *uint64_t v37 = *(void *)v38;
        v37[1] = *((void *)v38 + 1);
        uint64_t v39 = v35[16];
        uint64_t v40 = (void *)((char *)v20 + v39);
        unint64_t v41 = &v21[v39];
        *uint64_t v40 = *(void *)v41;
        v40[1] = *((void *)v41 + 1);
        uint64_t v42 = v35[20];
        uint64_t v43 = (void *)((char *)v20 + v42);
        uint64_t v44 = &v21[v42];
        *uint64_t v43 = *(void *)v44;
        v43[1] = *((void *)v44 + 1);
        *((unsigned char *)v20 + v35[24]) = v21[v35[24]];
LABEL_7:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *uint64_t v20 = *(void *)v21;
        v20[1] = *((void *)v21 + 1);
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = v13[7];
  uint64_t v46 = (char *)v7 + v45;
  uint64_t v47 = &v8[v45];
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v49 = v48((char *)v7 + v45, 1, v118);
  int v50 = v48(v47, 1, v118);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v118);
LABEL_15:
      uint64_t v52 = (void (*)(char *, char *, uint64_t))v115;
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v51 = sub_10000588C(&qword_101638CF0);
    memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_15;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v46, v118);
    goto LABEL_14;
  }
  uint64_t v52 = (void (*)(char *, char *, uint64_t))v115;
  ((void (*)(char *, char *, uint64_t))v115)(v46, v47, v118);
LABEL_16:
  uint64_t v53 = v13[8];
  uint64_t v54 = (char *)v7 + v53;
  uint64_t v55 = &v8[v53];
  uint64_t v56 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 24))(v54, v55, v56);
  uint64_t v57 = v13[9];
  uint64_t v58 = (uint64_t *)((char *)v7 + v57);
  uint64_t v59 = (uint64_t *)&v8[v57];
  uint64_t v60 = *v59;
  unint64_t v61 = v59[1];
  sub_1000361E0(*v59, v61);
  uint64_t v62 = *v58;
  unint64_t v63 = v58[1];
  *uint64_t v58 = v60;
  v58[1] = v61;
  sub_10001CFB8(v62, v63);
  uint64_t v64 = v13[10];
  uint64_t v65 = (uint64_t *)((char *)v7 + v64);
  uint64_t v66 = (uint64_t *)&v8[v64];
  unint64_t v67 = *(void *)&v8[v64 + 8];
  if (*(unint64_t *)((char *)v7 + v64 + 8) >> 60 == 15)
  {
    if (v67 >> 60 != 15)
    {
      uint64_t v68 = *v66;
      sub_1000361E0(v68, v67);
      *uint64_t v65 = v68;
      v65[1] = v67;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (v67 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)v65);
LABEL_21:
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    goto LABEL_23;
  }
  uint64_t v69 = *v66;
  sub_1000361E0(v69, v67);
  uint64_t v70 = *v65;
  unint64_t v71 = v65[1];
  *uint64_t v65 = v69;
  v65[1] = v67;
  sub_10001CFB8(v70, v71);
LABEL_23:
  uint64_t v72 = v13[11];
  uint64_t v73 = (uint64_t *)((char *)v7 + v72);
  unint64_t v74 = (uint64_t *)&v8[v72];
  unint64_t v75 = *(void *)&v8[v72 + 8];
  if (*(unint64_t *)((char *)v7 + v72 + 8) >> 60 != 15)
  {
    if (v75 >> 60 != 15)
    {
      uint64_t v77 = *v74;
      sub_1000361E0(v77, v75);
      uint64_t v78 = *v73;
      unint64_t v79 = v73[1];
      *uint64_t v73 = v77;
      v73[1] = v75;
      sub_10001CFB8(v78, v79);
      goto LABEL_30;
    }
    sub_1002C0990((uint64_t)v73);
    goto LABEL_28;
  }
  if (v75 >> 60 == 15)
  {
LABEL_28:
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    goto LABEL_30;
  }
  uint64_t v76 = *v74;
  sub_1000361E0(v76, v75);
  *uint64_t v73 = v76;
  v73[1] = v75;
LABEL_30:
  uint64_t v80 = v13[12];
  uint64_t v81 = (uint64_t *)((char *)v7 + v80);
  unint64_t v82 = (uint64_t *)&v8[v80];
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_1000361E0(*v82, v84);
  uint64_t v85 = *v81;
  unint64_t v86 = v81[1];
  *uint64_t v81 = v83;
  v81[1] = v84;
  sub_10001CFB8(v85, v86);
  uint64_t v87 = v13[13];
  uint64_t v88 = (uint64_t *)((char *)v7 + v87);
  uint64_t v89 = (uint64_t *)&v8[v87];
  uint64_t v90 = *v89;
  unint64_t v91 = v89[1];
  sub_1000361E0(*v89, v91);
  uint64_t v92 = *v88;
  unint64_t v93 = v88[1];
  *uint64_t v88 = v90;
  v88[1] = v91;
  sub_10001CFB8(v92, v93);
  uint64_t v94 = v13[14];
  uint64_t v95 = (uint64_t *)((char *)v7 + v94);
  uint64_t v96 = &v8[v94];
  *uint64_t v95 = *(void *)v96;
  v95[1] = *((void *)v96 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v13[15];
  uint64_t v98 = (uint64_t *)((char *)v7 + v97);
  uint64_t v99 = &v8[v97];
  *uint64_t v98 = *(void *)v99;
  v98[1] = *((void *)v99 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v7 + v13[16]) = *(void *)&v8[v13[16]];
  *(uint64_t *)((char *)v7 + v13[17]) = *(void *)&v8[v13[17]];
  *((unsigned char *)v7 + v13[18]) = v8[v13[18]];
  *((unsigned char *)v7 + v13[19]) = v8[v13[19]];
  *((unsigned char *)v7 + v13[20]) = v8[v13[20]];
  uint64_t v100 = *(int *)(v116 + 32);
  uint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = (char *)v117 + v100;
  uint64_t v103 = *(void *)((char *)v117 + v100);
  unint64_t v104 = *(void *)((char *)v117 + v100 + 8);
  sub_1000361E0(v103, v104);
  uint64_t v105 = *v101;
  unint64_t v106 = v101[1];
  *uint64_t v101 = v103;
  v101[1] = v104;
  sub_10001CFB8(v105, v106);
  unint64_t v107 = (int *)type metadata accessor for BeaconNamingRecord();
  v52((char *)v101 + v107[5], &v102[v107[5]], v118);
  v52((char *)v101 + v107[6], &v102[v107[6]], v118);
  *(uint64_t *)((char *)v101 + v107[7]) = *(void *)&v102[v107[7]];
  uint64_t v108 = v107[8];
  uint64_t v109 = (uint64_t *)((char *)v101 + v108);
  uint64_t v110 = &v102[v108];
  *uint64_t v109 = *(void *)v110;
  v109[1] = *((void *)v110 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v111 = v107[9];
  uint64_t v112 = (uint64_t *)((char *)v101 + v111);
  unint64_t v113 = &v102[v111];
  void *v112 = *(void *)v113;
  v112[1] = *((void *)v113 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10059D858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = v7[5];
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v36(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = (unsigned char *)(v5 + v13);
  unint64_t v15 = (unsigned char *)(v6 + v13);
  uint64_t v16 = type metadata accessor for StableIdentifier();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v36((uint64_t)v14, (uint64_t)v15, v11);
    uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    *(_OWORD *)&v14[v19[12]] = *(_OWORD *)&v15[v19[12]];
    *(_OWORD *)&v14[v19[16]] = *(_OWORD *)&v15[v19[16]];
    *(_OWORD *)&v14[v19[20]] = *(_OWORD *)&v15[v19[20]];
    v14[v19[24]] = v15[v19[24]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v36((uint64_t)v14, (uint64_t)v15, v11);
    uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
    *(_OWORD *)&v14[v18[12]] = *(_OWORD *)&v15[v18[12]];
    *(_OWORD *)&v14[v18[16]] = *(_OWORD *)&v15[v18[16]];
    *(_OWORD *)&v14[v18[20]] = *(_OWORD *)&v15[v18[20]];
    *(_WORD *)&v14[v18[24]] = *(_WORD *)&v15[v18[24]];
    *(_OWORD *)&v14[v18[28]] = *(_OWORD *)&v15[v18[28]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(v5 + v20);
  uint64_t v22 = (const void *)(v6 + v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v6 + v20, 1, v11))
  {
    uint64_t v23 = sub_10000588C(&qword_101638CF0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = v36;
  }
  else
  {
    uint64_t v24 = v36;
    v36((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  uint64_t v25 = v7[8];
  uint64_t v26 = v5 + v25;
  uint64_t v27 = v6 + v25;
  uint64_t v28 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  *(_OWORD *)(v5 + v7[10]) = *(_OWORD *)(v6 + v7[10]);
  *(_OWORD *)(v5 + v7[11]) = *(_OWORD *)(v6 + v7[11]);
  *(_OWORD *)(v5 + v7[12]) = *(_OWORD *)(v6 + v7[12]);
  *(_OWORD *)(v5 + v7[13]) = *(_OWORD *)(v6 + v7[13]);
  *(_OWORD *)(v5 + v7[14]) = *(_OWORD *)(v6 + v7[14]);
  *(_OWORD *)(v5 + v7[15]) = *(_OWORD *)(v6 + v7[15]);
  *(void *)(v5 + v7[16]) = *(void *)(v6 + v7[16]);
  *(void *)(v5 + v7[17]) = *(void *)(v6 + v7[17]);
  *(unsigned char *)(v5 + v7[18]) = *(unsigned char *)(v6 + v7[18]);
  *(unsigned char *)(v5 + v7[19]) = *(unsigned char *)(v6 + v7[19]);
  *(unsigned char *)(v5 + v7[20]) = *(unsigned char *)(v6 + v7[20]);
  uint64_t v29 = *(int *)(a3 + 32);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for BeaconNamingRecord();
  v24(v30 + v32[5], v31 + v32[5], v11);
  v24(v30 + v32[6], v31 + v32[6], v11);
  *(void *)(v30 + v32[7]) = *(void *)(v31 + v32[7]);
  *(_OWORD *)(v30 + v32[8]) = *(_OWORD *)(v31 + v32[8]);
  *(_OWORD *)(v30 + v32[9]) = *(_OWORD *)(v31 + v32[9]);
  return a1;
}

void *sub_10059DC70(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v85 = a3;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a1 + v6);
  unint64_t v10 = *(void *)((char *)a1 + v6 + 8);
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v87(v13, v14, v15);
  unint64_t v86 = a2;
  if (a1 != a2)
  {
    uint64_t v17 = v11[6];
    uint64_t v18 = &v7[v17];
    uint64_t v19 = &v8[v17];
    sub_10059B66C((uint64_t)&v7[v17], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v20 = type metadata accessor for StableIdentifier();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v19, v15);
      uint64_t v23 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v18[v23[12]] = *(_OWORD *)&v19[v23[12]];
      *(_OWORD *)&v18[v23[16]] = *(_OWORD *)&v19[v23[16]];
      *(_OWORD *)&v18[v23[20]] = *(_OWORD *)&v19[v23[20]];
      v18[v23[24]] = v19[v23[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v19, v15);
      uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&v18[v22[12]] = *(_OWORD *)&v19[v22[12]];
      *(_OWORD *)&v18[v22[16]] = *(_OWORD *)&v19[v22[16]];
      *(_OWORD *)&v18[v22[20]] = *(_OWORD *)&v19[v22[20]];
      *(_WORD *)&v18[v22[24]] = *(_WORD *)&v19[v22[24]];
      *(_OWORD *)&v18[v22[28]] = *(_OWORD *)&v19[v22[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  uint64_t v24 = v11[7];
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v28 = v27(&v7[v24], 1, v15);
  int v29 = v27(v26, 1, v15);
  if (v28)
  {
    if (v29)
    {
      uint64_t v30 = sub_10000588C(&qword_101638CF0);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      uint64_t v31 = v15;
    }
    else
    {
      uint64_t v31 = v15;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
  }
  else
  {
    uint64_t v31 = v15;
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
      uint64_t v32 = sub_10000588C(&qword_101638CF0);
      memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v87(v25, v26, v15);
    }
  }
  uint64_t v33 = v11[8];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = &v8[v33];
  uint64_t v36 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
  uint64_t v37 = v11[9];
  uint64_t v38 = *(void *)&v7[v37];
  unint64_t v39 = *(void *)&v7[v37 + 8];
  *(_OWORD *)&v7[v37] = *(_OWORD *)&v8[v37];
  sub_10001CFB8(v38, v39);
  uint64_t v40 = v11[10];
  uint64_t v41 = (uint64_t)&v7[v40];
  uint64_t v42 = &v8[v40];
  unint64_t v43 = *(void *)&v7[v40 + 8];
  if (v43 >> 60 == 15) {
    goto LABEL_17;
  }
  unint64_t v44 = *((void *)v42 + 1);
  if (v44 >> 60 == 15)
  {
    sub_1002C0990(v41);
LABEL_17:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    goto LABEL_19;
  }
  uint64_t v45 = *(void *)v41;
  *(void *)uint64_t v41 = *(void *)v42;
  *(void *)(v41 + 8) = v44;
  sub_10001CFB8(v45, v43);
LABEL_19:
  uint64_t v46 = v11[11];
  uint64_t v47 = (uint64_t *)&v7[v46];
  uint64_t v48 = (uint64_t *)&v8[v46];
  unint64_t v49 = *(void *)&v7[v46 + 8];
  if (v49 >> 60 != 15)
  {
    unint64_t v50 = v48[1];
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v47;
      uint64_t *v47 = *v48;
      v47[1] = v50;
      sub_10001CFB8(v51, v49);
      goto LABEL_24;
    }
    sub_1002C0990((uint64_t)v47);
  }
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
LABEL_24:
  uint64_t v52 = v11[12];
  uint64_t v53 = *(void *)&v7[v52];
  unint64_t v54 = *(void *)&v7[v52 + 8];
  *(_OWORD *)&v7[v52] = *(_OWORD *)&v8[v52];
  sub_10001CFB8(v53, v54);
  uint64_t v55 = v11[13];
  uint64_t v56 = *(void *)&v7[v55];
  unint64_t v57 = *(void *)&v7[v55 + 8];
  *(_OWORD *)&v7[v55] = *(_OWORD *)&v8[v55];
  sub_10001CFB8(v56, v57);
  uint64_t v58 = v11[14];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = v11[15];
  uint64_t v64 = &v7[v63];
  uint64_t v65 = &v8[v63];
  uint64_t v67 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = v67;
  *((void *)v64 + 1) = v66;
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[16]] = *(void *)&v8[v11[16]];
  *(void *)&v7[v11[17]] = *(void *)&v8[v11[17]];
  v7[v11[18]] = v8[v11[18]];
  v7[v11[19]] = v8[v11[19]];
  v7[v11[20]] = v8[v11[20]];
  uint64_t v68 = *(int *)(v85 + 32);
  uint64_t v69 = (char *)a1 + v68;
  uint64_t v70 = (char *)v86 + v68;
  uint64_t v71 = *(void *)((char *)a1 + v68);
  unint64_t v72 = *(void *)((char *)a1 + v68 + 8);
  *(_OWORD *)((char *)a1 + v68) = *(_OWORD *)((char *)v86 + v68);
  sub_10001CFB8(v71, v72);
  uint64_t v73 = (int *)type metadata accessor for BeaconNamingRecord();
  v87(&v69[v73[5]], &v70[v73[5]], v31);
  v87(&v69[v73[6]], &v70[v73[6]], v31);
  *(void *)&v69[v73[7]] = *(void *)&v70[v73[7]];
  uint64_t v74 = v73[8];
  unint64_t v75 = &v69[v74];
  uint64_t v76 = &v70[v74];
  uint64_t v78 = *(void *)v76;
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)unint64_t v75 = v78;
  *((void *)v75 + 1) = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = v73[9];
  uint64_t v80 = &v69[v79];
  uint64_t v81 = &v70[v79];
  uint64_t v83 = *(void *)v81;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)uint64_t v80 = v83;
  *((void *)v80 + 1) = v82;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10059E2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059E2B8);
}

uint64_t sub_10059E2B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BeaconNamingRecord();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10059E3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059E3F8);
}

void *sub_10059E3F8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BeaconNamingRecord();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10059E524()
{
  uint64_t result = type metadata accessor for OwnedBeaconRecord();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BeaconNamingRecord();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DelegatedShareUseCase.DelegationURL.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10059E69CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegatedShareUseCase.DelegationURL.Error()
{
  return &type metadata for DelegatedShareUseCase.DelegationURL.Error;
}

uint64_t *sub_10059E6D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URLComponents();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10059E7AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10059E824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10059E8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}