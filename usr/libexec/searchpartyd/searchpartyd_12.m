uint64_t sub_100877498()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 304) = v3;
  *v3 = v2;
  v3[1] = sub_1008775F0;
  v4 = *(void *)(v1 + 264);
  return sub_100016D8C(v4);
}

uint64_t sub_1008775F0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 192);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_100877744;
  }
  else
  {
    v4 = sub_10088493C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100877744()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1008777C0()
{
  v22 = v0;
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[23];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[26];
  uint64_t v9 = v0[27];
  uint64_t v11 = v0[25];
  if (v8)
  {
    log = v6;
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    v18 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Error publishing initial delegated location for beacon %{private,mask.hash}s: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100877B48()
{
  v22 = v0;
  swift_bridgeObjectRelease();
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[23];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[26];
  uint64_t v9 = v0[27];
  uint64_t v11 = v0[25];
  if (v8)
  {
    log = v6;
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    v18 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Error publishing initial delegated location for beacon %{private,mask.hash}s: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100877ED8()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  v1[25] = v3;
  v1[26] = *(void *)(v3 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = type metadata accessor for StableIdentifier();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  v1[36] = v4;
  v1[37] = *(void *)(v4 - 8);
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  return _swift_task_switch(sub_100878110, v0, 0);
}

uint64_t sub_100878110()
{
  uint64_t v1 = v0[20];
  v0[14] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 128);
  v0[40] = v2;
  return _swift_task_switch(sub_100878140, v2, 0);
}

uint64_t sub_100878140()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 320) + 136);
  swift_retain();
  return _swift_task_switch(sub_1008781B4, 0, 0);
}

uint64_t sub_1008781B4()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_1008782CC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 13, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_1008782CC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 352) = *(void *)(v1 + 104);
  return _swift_task_switch(sub_10087843C, v2, 0);
}

uint64_t sub_10087843C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[44];
  uint64_t v28 = *(void *)(v4 + 16);
  if (v28)
  {
    unint64_t v5 = 0;
    uint64_t v26 = v3[36];
    uint64_t v27 = v3[37];
    v24 = (void (**)(uint64_t, uint64_t))(v3[22] + 8);
    uint64_t v25 = v3[44];
    while (1)
    {
      if (v5 >= *(void *)(v4 + 16))
      {
        __break(1u);
        return _swift_task_switch(a1, a2, a3);
      }
      uint64_t v8 = v3[39];
      uint64_t v10 = v3[34];
      uint64_t v9 = v3[35];
      unint64_t v11 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v12 = *(void *)(v27 + 72);
      sub_1008841E0(v3[44] + v11 + v12 * v5, v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = v8 + *(int *)(v26 + 24);
      sub_1008841E0(v13, v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100884248(v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_1008841E0(v13, v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v15 = v3[34];
      if (EnumCaseMultiPayload == 1) {
        goto LABEL_12;
      }
      sub_1008841E0(v3[34], v3[33], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v16 = swift_getEnumCaseMultiPayload();
      if (v16 == 2) {
        break;
      }
      if (v16 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_11:
        uint64_t v17 = v3[33];
        uint64_t v15 = v3[34];
        uint64_t v18 = v3[21];
        swift_bridgeObjectRelease();
        (*v24)(v17, v18);
LABEL_12:
        uint64_t v4 = v25;
        sub_100884248(v15, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_1008833E0(v3[39], v3[38], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          sub_1000B74D8(v19 > 1, v20 + 1, 1);
        }
        uint64_t v21 = v3[38];
        _swiftEmptyArrayStorage[2] = v20 + 1;
        a1 = sub_1008833E0(v21, (uint64_t)_swiftEmptyArrayStorage + v11 + v20 * v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      uint64_t v6 = v3[39];
      uint64_t v7 = v3[34];
      sub_100884248(v3[33], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100884248(v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      a1 = sub_100884248(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = v25;
LABEL_4:
      if (v28 == ++v5) {
        goto LABEL_17;
      }
    }
    sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v22 = v3[40];
  swift_bridgeObjectRelease();
  v3[45] = sub_100A9A618((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  a1 = (uint64_t)sub_1008787F0;
  a2 = v22;
  a3 = 0;
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_1008787F0()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 320) + 136);
  swift_retain();
  return _swift_task_switch(sub_100878864, 0, 0);
}

uint64_t sub_100878864()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[40];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[47] = v3;
  v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[48] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_100878980;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091080, v3, v5);
}

uint64_t sub_100878980()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 392) = *(void *)(v1 + 96);
  return _swift_task_switch(sub_100878AF0, v2, 0);
}

uint64_t sub_100878AF0()
{
  uint64_t v2 = v1[49];
  uint64_t v37 = *(void *)(v2 + 16);
  if (v37)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v1[25];
    uint64_t v36 = v1[26];
    v35 = _swiftEmptyArrayStorage;
    uint64_t v38 = v4;
    while (1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v7 = v1[30];
      uint64_t v6 = v1[31];
      unint64_t v8 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      uint64_t v0 = *(void *)(v36 + 72);
      sub_1008841E0(v1[49] + v8 + v0 * v3, v6, type metadata accessor for SharedBeaconRecord);
      int v9 = *(unsigned __int8 *)(v6 + *(int *)(v4 + 64));
      sub_1008841E0(v6, v7, type metadata accessor for SharedBeaconRecord);
      uint64_t v10 = v1[30];
      uint64_t v11 = v1[31];
      uint64_t v12 = v1[29];
      if (v9 == 1) {
        break;
      }
      int v13 = *(unsigned __int8 *)(v10 + *(int *)(v4 + 64));
      sub_100884248(v10, type metadata accessor for SharedBeaconRecord);
      sub_1008841E0(v11, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 == 4) {
        goto LABEL_4;
      }
      uint64_t v14 = v1[29];
      uint64_t v15 = *(void *)(v14 + *(int *)(v38 + 44));
      sub_1008841E0(v14, v1[28], type metadata accessor for SharedBeaconRecord);
      uint64_t v16 = v1[28];
      uint64_t v5 = v1[29];
      if (v15 == -1)
      {
        sub_100884248(v16, type metadata accessor for SharedBeaconRecord);
        uint64_t v4 = v38;
        goto LABEL_5;
      }
      uint64_t v17 = *(void *)(v16 + *(int *)(v38 + 48));
      sub_100884248(v16, type metadata accessor for SharedBeaconRecord);
      sub_100884248(v5, type metadata accessor for SharedBeaconRecord);
      BOOL v18 = v17 == -1;
      uint64_t v4 = v38;
      if (!v18)
      {
        sub_1008833E0(v1[31], v1[27], type metadata accessor for SharedBeaconRecord);
        unint64_t v19 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7404(0, v35[2] + 1, 1);
          unint64_t v19 = _swiftEmptyArrayStorage;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_1000B7404(v20 > 1, v21 + 1, 1);
          unint64_t v19 = _swiftEmptyArrayStorage;
        }
        uint64_t v22 = v1[27];
        v19[2] = v21 + 1;
        v35 = v19;
        sub_1008833E0(v22, (uint64_t)v19 + v8 + v21 * v0, type metadata accessor for SharedBeaconRecord);
        uint64_t v4 = v38;
        goto LABEL_7;
      }
LABEL_6:
      sub_100884248(v1[31], type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v37 == ++v3) {
        goto LABEL_21;
      }
    }
    sub_100884248(v10, type metadata accessor for SharedBeaconRecord);
    sub_1008841E0(v11, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    uint64_t v5 = v1[29];
    uint64_t v4 = v38;
LABEL_5:
    sub_100884248(v5, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }
  v35 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v0 = (uint64_t)sub_100A9A81C((uint64_t)v35);
  swift_release();
  if (qword_101637660 != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for Logger();
  v1[50] = sub_100010324(v23, (uint64_t)qword_10170F838);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = v1[45];
  if (v26)
  {
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 134218240;
    v1[18] = *(void *)(v27 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2048;
    v1[19] = *(void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Finding unpublished payloads for %ld owned beacons and %ld shared beacons.", (uint8_t *)v28, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v40 = v1[45];
  sub_100442D7C(v0);
  v1[51] = v40;
  uint64_t v29 = *(void *)(v40 + 16);
  v1[52] = v29;
  if (v29)
  {
    v1[53] = 0;
    uint64_t v30 = v1[24];
    sub_10001D010(v40 + 32, (uint64_t)(v1 + 7));
    sub_100870FF8(v30);
    v31 = (void *)swift_task_alloc();
    v1[54] = v31;
    void *v31 = v1;
    v31[1] = sub_100879118;
    uint64_t v32 = v1[24];
    return sub_100879944((uint64_t)(v1 + 7), v32);
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = sub_100A9CCCC(v1[14]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v34 = (uint64_t (*)(void *))v1[1];
    return v34(v39);
  }
}

uint64_t sub_100879118(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[55] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[24];
  uint64_t v6 = v4[20];
  if (v1)
  {
    sub_10001DAB4(v5, (uint64_t *)&unk_10163AC90);
    uint64_t v7 = sub_10087947C;
  }
  else
  {
    v4[56] = a1;
    sub_10001DAB4(v5, (uint64_t *)&unk_10163AC90);
    uint64_t v7 = sub_100879284;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100879284()
{
  sub_100445BC0(v0[56]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  uint64_t v1 = v0[53] + 1;
  if (v1 == v0[52])
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100A9CCCC(v0[14]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void *))v0[1];
    return v2(v7);
  }
  else
  {
    v0[53] = v1;
    uint64_t v4 = v0[24];
    sub_10001D010(v0[51] + 40 * v1 + 32, (uint64_t)(v0 + 7));
    sub_100870FF8(v4);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[54] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100879118;
    uint64_t v6 = v0[24];
    return sub_100879944((uint64_t)(v0 + 7), v6);
  }
}

uint64_t sub_10087947C()
{
  BOOL v26 = v0;
  uint64_t v1 = (uint64_t)(v0 + 7);
  sub_10001D010((uint64_t)(v0 + 7), (uint64_t)(v0 + 2));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[23];
    uint64_t v6 = v0[21];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v0[15] = 1752392040;
    log = v2;
    uint64_t v25 = v23;
    *(_DWORD *)uint64_t v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    os_log_type_t type = v3;
    uint64_t v9 = v0[5];
    uint64_t v8 = v0[6];
    sub_10001CD44(v0 + 2, v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v9);
    sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v0[16] = sub_1008FA0F0(v10, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = (uint64_t)(v0 + 7);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Error gathering owned device payloads for %{private,mask.hash}s: %{public}@.", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  }
  swift_errorRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v14 = v0[53] + 1;
  if (v14 == v0[52])
  {
    swift_bridgeObjectRelease();
    v24 = sub_100A9CCCC(v0[14]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void *))v0[1];
    return v15(v24);
  }
  else
  {
    v0[53] = v14;
    uint64_t v17 = v0[24];
    sub_10001D010(v0[51] + 40 * v14 + 32, v1);
    sub_100870FF8(v17);
    BOOL v18 = (void *)swift_task_alloc();
    v0[54] = v18;
    void *v18 = v0;
    v18[1] = sub_100879118;
    uint64_t v19 = v0[24];
    return sub_100879944(v1, v19);
  }
}

uint64_t sub_100879944(uint64_t a1, uint64_t a2)
{
  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  v3[48] = type metadata accessor for OwnedBeaconRecord();
  v3[49] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D50);
  v3[50] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation();
  v3[51] = v4;
  v3[52] = *(void *)(v4 - 8);
  v3[53] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[54] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[55] = v6;
  v3[56] = *(void *)(v6 + 64);
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  return _swift_task_switch(sub_100879AF4, v2, 0);
}

uint64_t sub_100879AF4()
{
  uint64_t v1 = (void *)v0[45];
  v0[39] = _swiftEmptyArrayStorage;
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 8) + 8) + 32))(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[61] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100879BF8;
  uint64_t v5 = v0[60];
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[47];
  v4[4] = v0[46];
  v4[5] = v7;
  v4[2] = v6;
  v4[3] = v5;
  return _swift_task_switch(sub_10087F548, v7, 0);
}

uint64_t sub_100879BF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return _swift_task_switch(sub_100879D08, v1, 0);
}

uint64_t sub_100879D08()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 48))(v1, 1, *(void *)(v0 + 408)) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D50);
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 480);
    uint64_t v3 = *(void *)(v0 + 464);
    uint64_t v4 = *(void *)(v0 + 432);
    uint64_t v5 = *(void *)(v0 + 440);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F838);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 464);
    uint64_t v11 = *(void *)(v0 + 432);
    uint64_t v12 = *(void *)(v0 + 440);
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v0 + 304) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 344) = sub_1008FA0F0(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No new location available for publish for : %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(*(void *)(v0 + 464), *(void *)(v0 + 432));
    }

    v16(*(void *)(v0 + 480), *(void *)(v0 + 432));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void *))(v0 + 8);
    return v20(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 360);
    sub_1008833E0(v1, *(void *)(v0 + 424), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_10001D010(v17, v0 + 152);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    int v18 = swift_dynamicCast();
    *(unsigned char *)(v0 + 624) = v18;
    if (v18) {
      sub_100884248(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    uint64_t v19 = *(void *)(*(void *)(v0 + 376) + 128);
    *(void *)(v0 + 496) = v19;
    return _swift_task_switch(sub_10087A108, v19, 0);
  }
}

uint64_t sub_10087A108()
{
  *(void *)(v0 + 504) = *(void *)(*(void *)(v0 + 496) + 136);
  swift_retain();
  return _swift_task_switch(sub_10087A17C, 0, 0);
}

uint64_t sub_10087A17C()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[64] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[65] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10087A290;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 40, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10087A290()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 376);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 528) = *(void *)(v1 + 320);
  return _swift_task_switch(sub_10087A400, v2, 0);
}

uint64_t sub_10087A400()
{
  uint64_t v1 = *(void *)(v0 + 528);
  char v2 = *(unsigned char *)(v0 + 624);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v6 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v7 = *(void *)(v0 + 432);
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 536) = v8;
  *(void *)(v0 + 544) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v4, v3, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v9 + v5;
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 552) = v11;
  *(void *)(v11 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v9, v4, v7);
  *(unsigned char *)(v11 + v10) = v2;
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_101657790);
  *uint64_t v12 = v0;
  v12[1] = sub_10087A580;
  return unsafeBlocking<A>(_:)(v0 + 232, sub_100882B10, v11, v13);
}

uint64_t sub_10087A580()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 376);
    uint64_t v4 = sub_10087B698;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 376);
    swift_release();
    uint64_t v4 = sub_10087A6A8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10087A6A8()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 232);
  unint64_t v2 = *(void *)(v0 + 240);
  sub_10001CFB8(*(void *)(v0 + 248), *(void *)(v0 + 256));
  sub_1000361E0(v3, v2);
  uint64_t v4 = sub_100A94760(v3, v2);
  if (v1)
  {
    sub_10001CFB8(v3, v2);
    _StringGuts.grow(_:)(35);
    *(void *)(v0 + 288) = 0;
    *(void *)(v0 + 296) = 0xE000000000000000;
    v8._object = (void *)0x80000001013F3B70;
    v8._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v8);
    *(void *)(v0 + 352) = v1;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_10001CFB8(v3, v2);
    sub_100434E0C(v6, v7, &v29);
    uint64_t v10 = (uint64_t *)(v0 + 72);
    uint64_t v11 = v29;
    unint64_t v12 = v30;
    sub_100882BD8(*(void *)(v0 + 480), *(void *)(v0 + 424), v29, v30, (void *)(v0 + 16));
    sub_10001CFB8(v11, v12);
    uint64_t v13 = *(void **)(v0 + 312);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_100A717E8(0, v13[2] + 1, 1, v13);
    }
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1) {
      uint64_t v13 = sub_100A717E8((void *)(v14 > 1), v15 + 1, 1, v13);
    }
    v13[2] = v15 + 1;
    uint64_t v16 = &v13[7 * v15];
    long long v17 = *(_OWORD *)(v0 + 16);
    long long v18 = *(_OWORD *)(v0 + 32);
    long long v19 = *(_OWORD *)(v0 + 48);
    v16[10] = *(void *)(v0 + 64);
    *((_OWORD *)v16 + 3) = v18;
    *((_OWORD *)v16 + 4) = v19;
    *((_OWORD *)v16 + 2) = v17;
    sub_10001CFB8(v3, v2);
    *(void *)(v0 + 312) = v13;
    uint64_t My = type metadata accessor for Feature.FindMy();
    *(void *)(v0 + 96) = My;
    *(void *)(v0 + 104) = sub_100883398((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    unint64_t v21 = sub_10001D958(v10);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v21, enum case for Feature.FindMy.itemSharing(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
    if (My)
    {
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v22;
      void *v22 = v0;
      v22[1] = sub_10087ACF8;
      return sub_100871180();
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 480);
      uint64_t v24 = *(void *)(v0 + 432);
      uint64_t v25 = *(void *)(v0 + 440);
      uint64_t v26 = *(void *)(v0 + 424);
      swift_release();
      sub_100884248(v26, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
      uint64_t v27 = *(void *)(v0 + 312);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v28(v27);
    }
  }
}

uint64_t sub_10087ACF8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(unsigned char *)(*(void *)v1 + 625) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087AE10, v2, 0);
}

uint64_t sub_10087AE10()
{
  if (*(unsigned char *)(v0 + 625) == 1)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 192, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 216))
    {
      sub_10001CEB0((long long *)(v0 + 192), v0 + 112);
      sub_10001CD44((void *)(v0 + 112), *(void *)(v0 + 136));
      unint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10087B03C;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v4 = *(void *)(v0 + 432);
    uint64_t v5 = *(void *)(v0 + 440);
    uint64_t v6 = *(void *)(v0 + 424);
    swift_release();
    sub_100884248(v6, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v7 = *(void *)(v0 + 312);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v8(v7);
  }
  return result;
}

uint64_t sub_10087B03C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 592) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087B154, v2, 0);
}

uint64_t sub_10087B154()
{
  if (v0[74])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 14));
    uint64_t v1 = (void *)swift_task_alloc();
    v0[75] = v1;
    void *v1 = v0;
    v1[1] = sub_10087B2F0;
    uint64_t v2 = v0[60];
    return sub_1000FD568(v2);
  }
  else
  {
    uint64_t v4 = v0[60];
    uint64_t v5 = v0[54];
    uint64_t v6 = v0[55];
    uint64_t v7 = v0[53];
    swift_release();
    sub_100884248(v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 14));
    uint64_t v8 = v0[39];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
}

uint64_t sub_10087B2F0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[76] = a1;
  v3[77] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[47];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10087BAEC;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[47];
    uint64_t v5 = sub_10087B41C;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10087B41C()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[76];
  uint64_t v3 = v0[60];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[47];
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v3;
  v6[4] = v4;
  uint64_t v7 = sub_100F49628((void (*)(long long *__return_ptr, uint64_t))sub_100882BB8, (uint64_t)v6, v2);
  uint64_t v8 = v0[60];
  uint64_t v9 = v0[55];
  uint64_t v16 = v0[54];
  uint64_t v10 = v0[53];
  if (v1)
  {
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    sub_100884248(v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v13 = (uint64_t)v7;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    sub_100445BC0(v13);
    swift_release();
    swift_release();
    sub_100884248(v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v16);
    uint64_t v14 = v0[39];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
    return v15(v14);
  }
}

uint64_t sub_10087B698()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0 + 9;
  swift_release();
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[67];
  uint64_t v3 = v0[60];
  uint64_t v4 = v0[57];
  uint64_t v5 = v0[54];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F838);
  v2(v4, v3, v5);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[57];
  uint64_t v11 = v0[54];
  uint64_t v12 = v0[55];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[41] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[42] = sub_1008FA0F0(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "No owned device key for shared item: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 9;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[57], v0[54]);
  }
  swift_errorRelease();

  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[12] = My;
  v0[13] = sub_100883398((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v17 = sub_10001D958(v1);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v17, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (My)
  {
    long long v18 = (void *)swift_task_alloc();
    v0[72] = v18;
    void *v18 = v0;
    v18[1] = sub_10087ACF8;
    return sub_100871180();
  }
  else
  {
    uint64_t v20 = v0[60];
    uint64_t v21 = v0[54];
    uint64_t v22 = v0[55];
    uint64_t v23 = v0[53];
    swift_release();
    sub_100884248(v23, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    uint64_t v24 = v0[39];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
    return v25(v24);
  }
}

uint64_t sub_10087BAEC()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[53];
  swift_release();
  swift_release();
  sub_100884248(v4, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10087BBF8(uint64_t a1)
{
  v2[48] = a1;
  v2[49] = v1;
  v2[50] = *(void *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v2[51] = swift_task_alloc();
  v2[52] = sub_10000588C(&qword_10163BBA0);
  v2[53] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for BeaconStatus(0);
  v2[54] = v3;
  v2[55] = *(void *)(v3 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163EB40);
  v2[58] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[59] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[60] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[61] = v5;
  v2[62] = *(void *)(v5 + 64);
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D50);
  v2[67] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BeaconEstimatedLocation();
  v2[68] = v6;
  v2[69] = *(void *)(v6 - 8);
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  v2[72] = v7;
  v2[73] = *(void *)(v7 - 8);
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  return _swift_task_switch(sub_10087BF6C, v1, 0);
}

uint64_t sub_10087BF6C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10087C0A8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10087C0A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 392);
  *(void *)(*(void *)v1 + 640) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087C1C0, v2, 0);
}

uint64_t sub_10087C1C0()
{
  uint64_t v1 = (uint64_t)(v0 + 8);
  if (v0[80])
  {
    uint64_t v2 = v0[49];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[45] = _swiftEmptyArrayStorage;
    uint64_t v3 = *(void *)(v2 + 128);
    v0[81] = v3;
    return _swift_task_switch(sub_10087C3E0, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v4 = 0xD000000000000014;
    v4[1] = 0x80000001013F1890;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10087C3E0()
{
  *(void *)(v0 + 656) = *(void *)(*(void *)(v0 + 648) + 136);
  swift_retain();
  return _swift_task_switch(sub_10087C454, 0, 0);
}

uint64_t sub_10087C454()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[83] = v3;
  v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[84] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_10087C570;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 42, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008FD4C, v3, v5);
}

uint64_t sub_10087C570()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 392);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 680) = *(void *)(v1 + 336);
  return _swift_task_switch(sub_10087C6E0, v2, 0);
}

uint64_t sub_10087C6E0()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v46 = *(void *)(v1 + 16);
  if (v46)
  {
    unint64_t v2 = 0;
    uint64_t v45 = *(void *)(v0 + 584);
    uint64_t v3 = *(int **)(v0 + 576);
    v44 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v2 >= *(void *)(v1 + 16))
      {
        __break(1u);
LABEL_33:
        swift_once();
LABEL_26:
        uint64_t v34 = type metadata accessor for Logger();
        sub_100010324(v34, (uint64_t)qword_10170F838);
        uint64_t v35 = *(void *)(v0 + 360);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        BOOL v38 = os_log_type_enabled(v36, v37);
        uint64_t v39 = *(void *)(v0 + 688);
        if (v38)
        {
          uint64_t v40 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 134218240;
          uint64_t v41 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 312) = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2048;
          uint64_t v42 = *(void *)(v35 + 16);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 320) = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v40, 0x16u);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        swift_release();
        swift_beginAccess();
        uint64_t v47 = *(void *)(v0 + 360);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v43 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v43(v47);
      }
      uint64_t v5 = *(void *)(v0 + 624);
      uint64_t v6 = *(void *)(v0 + 616);
      unint64_t v7 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v8 = *(void *)(v45 + 72);
      sub_1008841E0(*(void *)(v0 + 680) + v7 + v8 * v2, v5, type metadata accessor for SharedBeaconRecord);
      int v9 = *(unsigned __int8 *)(v5 + v3[16]);
      sub_1008841E0(v5, v6, type metadata accessor for SharedBeaconRecord);
      uint64_t v10 = *(void *)(v0 + 624);
      uint64_t v11 = *(void *)(v0 + 616);
      uint64_t v12 = *(void *)(v0 + 608);
      if (v9 == 1) {
        break;
      }
      int v13 = *(unsigned __int8 *)(v11 + v3[16]);
      sub_100884248(v11, type metadata accessor for SharedBeaconRecord);
      sub_1008841E0(v10, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 == 4) {
        goto LABEL_4;
      }
      uint64_t v14 = *(void *)(v0 + 608);
      uint64_t v15 = *(void *)(v14 + v3[11]);
      sub_1008841E0(v14, *(void *)(v0 + 600), type metadata accessor for SharedBeaconRecord);
      uint64_t v4 = *(void *)(v0 + 608);
      uint64_t v16 = *(void *)(v0 + 600);
      if (v15 == -1)
      {
        sub_100884248(v16, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }
      uint64_t v17 = *(void *)(v16 + v3[12]);
      sub_100884248(v16, type metadata accessor for SharedBeaconRecord);
      sub_100884248(v4, type metadata accessor for SharedBeaconRecord);
      if (v17 != -1)
      {
        sub_1008833E0(*(void *)(v0 + 624), *(void *)(v0 + 592), type metadata accessor for SharedBeaconRecord);
        long long v18 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7404(0, v44[2] + 1, 1);
          long long v18 = _swiftEmptyArrayStorage;
        }
        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000B7404(v19 > 1, v20 + 1, 1);
          long long v18 = _swiftEmptyArrayStorage;
        }
        uint64_t v21 = *(void *)(v0 + 592);
        v18[2] = v20 + 1;
        v44 = v18;
        sub_1008833E0(v21, (uint64_t)v18 + v7 + v20 * v8, type metadata accessor for SharedBeaconRecord);
        goto LABEL_7;
      }
LABEL_6:
      sub_100884248(*(void *)(v0 + 624), type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v46 == ++v2) {
        goto LABEL_21;
      }
    }
    sub_100884248(v11, type metadata accessor for SharedBeaconRecord);
    sub_1008841E0(v10, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 608);
LABEL_5:
    sub_100884248(v4, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }
  v44 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_100A9A81C((uint64_t)v44);
  *(void *)(v0 + 688) = v22;
  swift_release();
  uint64_t v23 = v22[2];
  *(void *)(v0 + 696) = v23;
  if (!v23)
  {
    if (qword_101637660 != -1) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  *(_OWORD *)(v0 + 704) = 0u;
  uint64_t v24 = *(void *)(v0 + 472);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 688) + 32;
  swift_bridgeObjectRetain();
  sub_10001D010(v26, v0 + 224);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v28 = *(void *)(v0 + 256);
  sub_10001CD44((void *)(v0 + 224), v27);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8) + 32))(v27);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v24, v25, v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v31;
  void *v31 = v0;
  v31[1] = sub_10087CE50;
  uint64_t v32 = *(void *)(v0 + 528);
  return sub_100E62DA0(v32);
}

uint64_t sub_10087CE50(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 392);
  *(void *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087CF68, v2, 0);
}

uint64_t sub_10087CF68()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[88];
  uint64_t v3 = v0[69];
  uint64_t v35 = v0[68];
  uint64_t v4 = v0[67];
  uint64_t v5 = v0[66];
  uint64_t v7 = v0[60];
  uint64_t v6 = v0[61];
  uint64_t v8 = v0[59];
  int v9 = (void *)swift_task_alloc();
  v9[2] = &off_1015A2AE0;
  v9[3] = v8;
  uint64_t v10 = sub_1000A48D4((uint64_t (*)(char *))sub_10088299C, v9, v1);
  swift_task_dealloc();
  sub_100E4CD4C(v10, v4);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v8, (uint64_t *)&unk_10163AC90);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[92] = v11;
  v0[93] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v5, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v35) == 1)
  {
    sub_10001DAB4(v0[67], (uint64_t *)&unk_101638D50);
    uint64_t v12 = v0[87];
    uint64_t v13 = v0[89] + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    if (v13 == v12)
    {
      swift_bridgeObjectRelease();
      if (qword_101637660 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F838);
      uint64_t v15 = v0[45];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = v0[86];
      if (v18)
      {
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 134218240;
        uint64_t v21 = *(void *)(v19 + 16);
        swift_bridgeObjectRelease();
        v0[39] = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2048;
        uint64_t v22 = *(void *)(v15 + 16);
        swift_bridgeObjectRelease();
        v0[40] = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v20, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      swift_release();
      swift_beginAccess();
      uint64_t v36 = v0[45];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v33 = (uint64_t (*)(uint64_t))v0[1];
      return v33(v36);
    }
    else
    {
      uint64_t v24 = v0[89] + 1;
      v0[89] = v24;
      v0[88] = v2;
      uint64_t v25 = v0[59];
      uint64_t v26 = v0[48];
      sub_10001D010(v0[86] + 40 * v24 + 32, (uint64_t)(v0 + 28));
      uint64_t v27 = v0[31];
      uint64_t v28 = v0[32];
      sub_10001CD44(v0 + 28, v27);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8) + 32))(v27);
      uint64_t v29 = type metadata accessor for Date();
      uint64_t v30 = *(void *)(v29 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v25, v26, v29);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v25, 0, 1, v29);
      uint64_t v31 = (void *)swift_task_alloc();
      v0[90] = v31;
      void *v31 = v0;
      v31[1] = sub_10087CE50;
      uint64_t v32 = v0[66];
      return sub_100E62DA0(v32);
    }
  }
  else
  {
    uint64_t v23 = v0[81];
    sub_1008833E0(v0[67], v0[71], (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    return _swift_task_switch(sub_10087D558, v23, 0);
  }
}

uint64_t sub_10087D558()
{
  *(void *)(v0 + 752) = *(void *)(*(void *)(v0 + 648) + 136);
  swift_retain();
  return _swift_task_switch(sub_10087D5CC, 0, 0);
}

uint64_t sub_10087D5CC()
{
  uint64_t v1 = v0[94];
  uint64_t v2 = v0[81];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[95] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[96] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10087D6E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 41, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_10087D6E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 392);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 776) = *(void *)(v1 + 328);
  return _swift_task_switch(sub_10087D854, v2, 0);
}

uint64_t sub_10087D854()
{
  v0[98] = *(void *)(v0[97] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  sub_10001CD44(v0 + 28, v1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v1);
  uid_t v3 = getuid();
  sub_100DC5FC0(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[99] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10087D97C;
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[64];
  return sub_100649D1C(v6, v5, 1);
}

uint64_t sub_10087D97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[100] = v2;
  swift_task_dealloc();
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v4[92];
  uint64_t v6 = v4[65];
  uint64_t v7 = v4[64];
  uint64_t v8 = v4[60];
  uint64_t v9 = v4[49];
  swift_release();
  if (v2)
  {
    swift_errorRelease();
    v5(v7, v8);
    v5(v6, v8);
    uint64_t v10 = sub_10087F438;
  }
  else
  {
    v4[101] = a2;
    v4[102] = a1;
    v5(v7, v8);
    v5(v6, v8);
    uint64_t v10 = sub_10087DB8C;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_10087DB8C()
{
  uint64_t v1 = v0 + 28;
  unint64_t v2 = v0[101];
  if (v2 >> 60 == 15)
  {
    v0[103] = v0[100];
    uint64_t v3 = v0[31];
    uint64_t v4 = v0[32];
    sub_10001CD44(v1, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[104] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10087DD18;
    uint64_t v6 = v0[66];
    uint64_t v7 = v0[58];
    return sub_100CA6DC8(v7, v6);
  }
  else
  {
    uint64_t v9 = v0[102];
    uint64_t v10 = v0[100];
    v0[107] = v2;
    v0[106] = v9;
    v0[105] = v10;
    uint64_t v11 = v0[81];
    uint64_t v12 = v0[31];
    uint64_t v13 = v0[32];
    sub_10001CD44(v1, v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8) + 32))(v12);
    return _swift_task_switch(sub_10087E778, v11, 0);
  }
}

uint64_t sub_10087DD18()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 736);
  uint64_t v2 = *(void *)(*(void *)v0 + 528);
  uint64_t v3 = *(void *)(*(void *)v0 + 480);
  uint64_t v4 = *(void *)(*(void *)v0 + 392);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_10087DE94, v4, 0);
}

uint64_t sub_10087DE94()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = type metadata accessor for TimeBasedKey();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163EB40);
    uint64_t v3 = &qword_101637000;
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F838);
    sub_10001D010(v0 + 224, v0 + 184);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v49 = *(void (**)(uint64_t, uint64_t))(v0 + 736);
      uint64_t v50 = *(void *)(v0 + 568);
      uint64_t v7 = *(void *)(v0 + 528);
      uint64_t v8 = *(void *)(v0 + 480);
      uint64_t v51 = v4;
      uint64_t v9 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v11 = *(void *)(v0 + 208);
      uint64_t v10 = *(void *)(v0 + 216);
      sub_10001CD44((void *)(v0 + 184), v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
      sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v14 = v13;
      v49(v7, v8);
      *(void *)(v0 + 352) = sub_1008FA0F0(v12, v14, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v3 = &qword_101637000;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No secondary advertisement found for %{private,mask.hash}s to publish anonymously.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v51;
      swift_slowDealloc();

      uint64_t v15 = v50;
    }
    else
    {
      uint64_t v26 = *(void *)(v0 + 568);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
      uint64_t v15 = v26;
    }
    sub_100884248(v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v27 = *(void *)(v0 + 824);
    uint64_t v28 = *(void *)(v0 + 696);
    uint64_t v29 = *(void *)(v0 + 712) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 224);
    if (v29 == v28)
    {
      swift_bridgeObjectRelease();
      if (v3[204] != -1) {
        swift_once();
      }
      sub_100010324(v4, (uint64_t)qword_10170F838);
      uint64_t v30 = *(void *)(v0 + 360);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v34 = *(void *)(v0 + 688);
      if (v33)
      {
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 134218240;
        uint64_t v36 = *(void *)(v34 + 16);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2048;
        uint64_t v37 = *(void *)(v30 + 16);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 320) = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v35, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      swift_release();
      swift_beginAccess();
      uint64_t v52 = *(void *)(v0 + 360);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v47(v52);
    }
    else
    {
      uint64_t v38 = *(void *)(v0 + 712) + 1;
      *(void *)(v0 + 712) = v38;
      *(void *)(v0 + 704) = v27;
      uint64_t v39 = *(void *)(v0 + 472);
      uint64_t v40 = *(void *)(v0 + 384);
      sub_10001D010(*(void *)(v0 + 688) + 40 * v38 + 32, v0 + 224);
      uint64_t v41 = *(void *)(v0 + 248);
      uint64_t v42 = *(void *)(v0 + 256);
      sub_10001CD44((void *)(v0 + 224), v41);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v42 + 8) + 8) + 32))(v41);
      uint64_t v43 = type metadata accessor for Date();
      uint64_t v44 = *(void *)(v43 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v39, v40, v43);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v43);
      uint64_t v45 = (void *)swift_task_alloc();
      *(void *)(v0 + 720) = v45;
      *uint64_t v45 = v0;
      v45[1] = sub_10087CE50;
      uint64_t v46 = *(void *)(v0 + 528);
      return sub_100E62DA0(v46);
    }
  }
  else
  {
    uint64_t v16 = (long long *)(v1 + *(int *)(v2 + 24));
    long long v17 = *v16;
    long long v18 = v16[2];
    *(_OWORD *)(v0 + 32) = v16[1];
    *(_OWORD *)(v0 + 48) = v18;
    *(_OWORD *)(v0 + 16) = v17;
    sub_1006CA500((void *)(v0 + 16), (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    sub_100884248(v1, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v19 = sub_100A8C640();
    uint64_t v21 = v20;
    sub_1006CA500((void *)(v0 + 16), (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
    uint64_t v22 = *(void *)(v0 + 824);
    *(void *)(v0 + 856) = v21;
    *(void *)(v0 + 848) = v19;
    *(void *)(v0 + 840) = v22;
    uint64_t v23 = *(void *)(v0 + 648);
    uint64_t v24 = *(void *)(v0 + 248);
    uint64_t v25 = *(void *)(v0 + 256);
    sub_10001CD44((void *)(v0 + 224), v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
    return _swift_task_switch(sub_10087E778, v23, 0);
  }
}

uint64_t sub_10087E778()
{
  uint64_t v1 = v0[81];
  uint64_t v2 = v0[66];
  uint64_t v3 = v0[63];
  uint64_t v4 = v0[60];
  uint64_t v5 = v0[61];
  v0[108] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  v0[109] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + v6, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_10087E86C, 0, 0);
}

uint64_t sub_10087E86C()
{
  uint64_t v1 = v0[109];
  uint64_t v2 = v0[108];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[110] = v3;
  v3[2] = v2;
  v3[3] = sub_1008829C0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[111] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10087E974;
  uint64_t v6 = v0[52];
  uint64_t v5 = v0[53];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100882A34, v3, v6);
}

uint64_t sub_10087E974()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 736);
  uint64_t v2 = *(void *)(*(void *)v0 + 528);
  uint64_t v3 = *(void *)(*(void *)v0 + 480);
  uint64_t v4 = *(void *)(*(void *)v0 + 392);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_10087EB30, v4, 0);
}

uint64_t sub_10087EB30()
{
  v63 = v0;
  uint64_t v1 = v0[53];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[55] + 48))(v1, 1, v0[54]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163BBA0);
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170F838);
    sub_10001D010((uint64_t)(v0 + 28), (uint64_t)(v0 + 18));
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    unint64_t v6 = v0[107];
    uint64_t v7 = v0[106];
    if (v5)
    {
      v57 = (void (*)(uint64_t, uint64_t))v0[92];
      uint64_t v59 = v0[106];
      uint64_t v60 = v0[71];
      uint64_t v8 = v0[66];
      uint64_t v56 = v0[60];
      uint64_t v9 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      v0[46] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      unint64_t v58 = v6;
      uint64_t v11 = v0[21];
      uint64_t v10 = v0[22];
      sub_10001CD44(v0 + 18, v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
      sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v14 = v13;
      v57(v8, v56);
      v0[47] = sub_1008FA0F0(v12, v14, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 18));
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No current advertisement status found for %{private,mask.hash}s to publish anonymously.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v59, v58);
      uint64_t v15 = v60;
    }
    else
    {
      uint64_t v32 = v0[71];

      sub_10001CFB8(v7, v6);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 18));
      uint64_t v15 = v32;
    }
  }
  else
  {
    unint64_t v16 = v0[107];
    uint64_t v17 = v0[106];
    uint64_t v18 = v0[71];
    uint64_t v19 = v0[70];
    uint64_t v21 = v0[56];
    uint64_t v20 = v0[57];
    uint64_t v22 = v0[51];
    sub_1008833E0(v1, v20, type metadata accessor for BeaconStatus);
    sub_1008841E0(v20, v21, type metadata accessor for BeaconStatus);
    sub_1008841E0(v18, v19, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_1000361E0(v17, v16);
    sub_10087F7CC(v17, v16, v21, v19, v22);
    unint64_t v23 = v0[45];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v23 = sub_100A6FC28(0, *(void *)(v23 + 16) + 1, 1, v23);
    }
    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    if (v25 >= v24 >> 1) {
      unint64_t v23 = sub_100A6FC28(v24 > 1, v25 + 1, 1, v23);
    }
    unint64_t v26 = v0[107];
    uint64_t v27 = v0[106];
    uint64_t v28 = v0[71];
    uint64_t v29 = v0[57];
    uint64_t v31 = v0[50];
    uint64_t v30 = v0[51];
    *(void *)(v23 + 16) = v25 + 1;
    sub_1008833E0(v30, v23+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v25, type metadata accessor for ObservedAdvertisement);
    sub_10001CFB8(v27, v26);
    v0[45] = v23;
    sub_100884248(v29, type metadata accessor for BeaconStatus);
    uint64_t v15 = v28;
  }
  sub_100884248(v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v33 = v0[105];
  uint64_t v34 = v0[87];
  uint64_t v35 = v0[89] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
  if (v35 == v34)
  {
    swift_bridgeObjectRelease();
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170F838);
    uint64_t v37 = v0[45];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = v0[86];
    if (v40)
    {
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 134218240;
      uint64_t v43 = *(void *)(v41 + 16);
      swift_bridgeObjectRelease();
      v0[39] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2048;
      uint64_t v44 = *(void *)(v37 + 16);
      swift_bridgeObjectRelease();
      v0[40] = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v42, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    swift_release();
    swift_beginAccess();
    uint64_t v61 = v0[45];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v55 = (uint64_t (*)(uint64_t))v0[1];
    return v55(v61);
  }
  else
  {
    uint64_t v45 = v0[89] + 1;
    v0[89] = v45;
    v0[88] = v33;
    uint64_t v46 = v0[59];
    uint64_t v47 = v0[48];
    sub_10001D010(v0[86] + 40 * v45 + 32, (uint64_t)(v0 + 28));
    uint64_t v48 = v0[31];
    uint64_t v49 = v0[32];
    sub_10001CD44(v0 + 28, v48);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v49 + 8) + 8) + 32))(v48);
    uint64_t v50 = type metadata accessor for Date();
    uint64_t v51 = *(void *)(v50 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v46, v47, v50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v46, 0, 1, v50);
    uint64_t v52 = (void *)swift_task_alloc();
    v0[90] = v52;
    *uint64_t v52 = v0;
    v52[1] = sub_10087CE50;
    uint64_t v53 = v0[66];
    return sub_100E62DA0(v53);
  }
}

uint64_t sub_10087F438()
{
  v0[103] = 0;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  sub_10001CD44(v0 + 28, v1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[104] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10087DD18;
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[58];
  return sub_100CA6DC8(v5, v4);
}

uint64_t sub_10087F524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10087F548, v3, 0);
}

uint64_t sub_10087F548()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = sub_10087F5E4;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_100E62DA0(v2);
}

uint64_t sub_10087F5E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087F6FC, v2, 0);
}

uint64_t sub_10087F6FC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = &off_1015A2AB8;
  v4[3] = v2;
  uint64_t v5 = sub_1000A48D4((uint64_t (*)(char *))sub_100884920, v4, v1);
  swift_task_dealloc();
  sub_100E4CD4C(v5, v3);
  swift_bridgeObjectRelease();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10087F7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v8 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = (int *)type metadata accessor for BeaconEstimatedLocation();
  __chkstk_darwin(v11);
  unint64_t v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v39 = &v37[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  uint64_t v42 = &v37[-v21];
  int v38 = *(unsigned __int8 *)(a3 + *(int *)(type metadata accessor for BeaconStatus(0) + 20));
  sub_100884248(a3, type metadata accessor for BeaconStatus);
  sub_10001D074(a4 + v11[12], (uint64_t)v16, (uint64_t *)&unk_10163AC90);
  sub_1008841E0(a4, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    uint64_t v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16);
    v22(v42, &v13[v11[10]], v17);
    sub_100884248((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_10001DAB4((uint64_t)v16, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    sub_100884248((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v42, v16, v17);
    uint64_t v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16);
  }
  uint64_t v23 = *(void *)(a4 + v11[7]);
  uint64_t v24 = *(void *)(a4 + v11[8]);
  char v25 = v38 & 0xF0;
  uint64_t v26 = *(void *)(a4 + v11[9]);
  uint64_t v27 = a4 + v11[10];
  uint64_t v28 = v39;
  v22(v39, (unsigned char *)v27, v17);
  sub_100884248(a4, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  *(void *)uint64_t v10 = v23;
  *((void *)v10 + 1) = v24;
  *((void *)v10 + 2) = v26;
  uint64_t v29 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v30 = *(void (**)(char *, unsigned char *, uint64_t))(v18 + 32);
  v30(&v10[*(int *)(v29 + 28)], v28, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v10, 0, 1, v29);
  uint64_t v31 = (int *)type metadata accessor for ObservedAdvertisement(0);
  uint64_t v32 = a5 + v31[13];
  uint64_t v33 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  *(void *)a5 = 0;
  *(_WORD *)(a5 + 8) = 1;
  uint64_t v35 = v41;
  uint64_t v34 = v42;
  *(void *)(a5 + 16) = v40;
  *(void *)(a5 + 24) = v35;
  *(unsigned char *)(a5 + 32) = v25;
  *(_WORD *)(a5 + 33) = 0;
  *(unsigned char *)(a5 + 35) = 1;
  *(_DWORD *)(a5 + 36) = -1;
  v30((char *)(a5 + v31[11]), v34, v17);
  *(unsigned char *)(a5 + v31[14]) = 0;
  return sub_10001D608((uint64_t)v10, a5 + v31[12], &qword_10163CF50);
}

uint64_t sub_10087FC50()
{
  *(void *)(v1 + 208) = v0;
  type metadata accessor for LocationFetcher();
  *(void *)(v1 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_10087FCE0, v0, 0);
}

uint64_t sub_10087FCE0()
{
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F838);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching own device locations from disk before publishing own devices.", v4, 2u);
    swift_slowDealloc();
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v6;
    *unint64_t v6 = v0;
    v6[1] = sub_10087FED8;
    return v7();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10087FED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10087FFF0, v2, 0);
}

uint64_t sub_10087FFF0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      unint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_1016391B0 + dword_1016391B0);
      os_log_type_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v3;
      *os_log_type_t v3 = v0;
      v3[1] = sub_100880178;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v4 = 0xD000000000000010;
    v4[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  return result;
}

uint64_t sub_100880178(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100880290, v2, 0);
}

uint64_t sub_100880290()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[31];
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
    v10[3] = &type metadata for DiskFetchPolicy;
    v10[4] = sub_1008826EC();
    uint64_t v2 = qword_101636CB8;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    os_log_type_t v3 = (char *)v0[27];
    uint64_t v4 = qword_10170E330;
    swift_retain();
    unint64_t v5 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
    sub_1005A2BA4(v1, v10, v4, v5, v3);
    uint64_t v6 = v0[29];
    return _swift_task_switch(sub_100880428, v6, 0);
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000010;
    v7[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100880428()
{
  *(void *)(v0 + 256) = *(void *)(*(void *)(v0 + 232) + 136);
  swift_retain();
  return _swift_task_switch(sub_10088049C, 0, 0);
}

uint64_t sub_10088049C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[29];
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  v3[2] = v1;
  v3[3] = sub_1001D4090;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DD0);
  *uint64_t v4 = v0;
  v4[1] = sub_1008805B8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 25, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001D4098, v3, v5);
}

uint64_t sub_1008805B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 208);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 280) = *(void *)(v1 + 200);
  return _swift_task_switch(sub_100880728, v2, 0);
}

uint64_t sub_100880728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[35];
  uint64_t v4 = v2[26];
  uint64_t v5 = v2[27];
  uint64_t v6 = sub_100883398(&qword_10164FF00, a2, (void (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher);
  uint64_t v7 = swift_task_alloc();
  v2[36] = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v3;
  uint64_t v8 = (void *)swift_task_alloc();
  v2[37] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100880860;
  return withCheckedContinuation<A>(isolation:function:_:)(v8, v4, v6, 0xD000000000000018, 0x80000001014093D0, sub_100882740, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100880860()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1008809B0, v1, 0);
}

uint64_t sub_1008809B0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_release();
  swift_release();
  sub_100884248(v1, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100880A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v5 = type metadata accessor for LocationFetcher();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = sub_10000588C(&qword_1016575E0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  type metadata accessor for Transaction();
  sub_1008841E0(v17, (uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = sub_1008827DC;
  v14[3] = v12;
  v14[4] = a3;
  sub_1008833E0((uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100880CBC()
{
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F838);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done fetching own device locations from disk before publishing own devices.", v3, 2u);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_1016575E0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100880DB0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100880E08()
{
  sub_100880DB0();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher()
{
  return self;
}

uint64_t sub_100880E58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10001C878;
  return sub_100877ED8();
}

uint64_t sub_100880EE8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v3 + 24) = swift_task_alloc();
  uint64_t v4 = *v2;
  return _swift_task_switch(sub_100880F7C, v4, 0);
}

uint64_t sub_100880F7C()
{
  uint64_t v1 = v0[3];
  sub_10001D074(v0[2], v1, (uint64_t *)&unk_10163AC90);
  sub_10088255C(v1);
  swift_task_dealloc();
  os_log_type_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100880FFC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100883398(&qword_10164FF00, a2, (void (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher);
  *(void *)(a1 + 8) = result;
  return result;
}

double sub_100881054@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = (void (*)(char *, char *, uint64_t))a1[1];
  uint64_t v11 = sub_10000588C(&qword_10163BBC0);
  sub_100883448(a2, a3, v9, v10, (uint64_t)a1 + *(int *)(v11 + 48), *((unsigned __int8 *)a1 + *(int *)(v11 + 64)), (uint64_t *)&v16);
  if (!v4)
  {
    uint64_t v13 = v17;
    uint64_t v14 = v20;
    uint64_t v15 = v19;
    *(_OWORD *)a4 = v16;
    *(void *)(a4 + 16) = v13;
    double result = *(double *)&v18;
    *(_OWORD *)(a4 + 24) = v18;
    *(void *)(a4 + 40) = v15;
    *(void *)(a4 + 48) = v14;
  }
  return result;
}

uint64_t sub_100881108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unsigned __int8 v17 = (char *)&v32 - v16;
  uint64_t result = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19) {
    goto LABEL_12;
  }
  uint64_t v20 = result;
  int v21 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (*(unsigned __int8 *)(a2 + 32) == v21) {
    goto LABEL_5;
  }
  if (v19 == 1) {
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)(a2 + 33) == v21)
  {
LABEL_5:
    uint64_t v32 = a1;
    sub_10001D074(v33, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
    uint64_t v22 = v12;
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v23(v10, 1, v11) == 1)
    {
      uint64_t v24 = (uint64_t)v10;
    }
    else
    {
      uint64_t v33 = v22;
      char v25 = v10;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v26(v17, v25, v11);
      sub_10001D074(v32 + *(int *)(v20 + 48), (uint64_t)v8, (uint64_t *)&unk_10163AC90);
      if (v23(v8, 1, v11) != 1)
      {
        v26(v15, v8, v11);
        sub_100883398((unint64_t *)&qword_1016605E0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
        uint64_t v28 = *(void (**)(char *, uint64_t))(v33 + 8);
        v28(v15, v11);
        v28(v17, v11);
        return v27 & 1;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v11);
      uint64_t v24 = (uint64_t)v8;
    }
    sub_10001DAB4(v24, (uint64_t *)&unk_10163AC90);
    char v27 = 1;
    return v27 & 1;
  }
  if (v19 == 2)
  {
LABEL_12:
    char v27 = 0;
    return v27 & 1;
  }
  uint64_t v29 = v12;
  for (uint64_t i = 34; ; ++i)
  {
    uint64_t v31 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    uint64_t v12 = v29;
    if (*(unsigned __int8 *)(a2 + i) == v21) {
      goto LABEL_5;
    }
    char v27 = 0;
    if (v31 == v19) {
      return v27 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10088146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[9] = *(void *)(type metadata accessor for MemberSharingCircle() - 8);
  v5[10] = swift_task_alloc();
  sub_10000588C(&qword_10164FF80);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[13] = v8;
  v5[14] = *(void *)(v8 + 64);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  return _swift_task_switch(sub_1008815D0, a5, 0);
}

uint64_t sub_1008815D0()
{
  uint64_t v1 = *(void *)(v0[7] + 16);
  v0[17] = v1;
  if (!v1)
  {
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  while (1)
  {
    v0[18] = v2;
    uint64_t v3 = *(void *)(v0[7] + 8 * v2 + 32);
    v0[19] = v3;
    v0[4] = v3;
    swift_errorRetain();
    swift_errorRetain();
    v0[20] = sub_10000588C(&qword_101638D40);
    uint64_t v4 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError();
    char v5 = swift_dynamicCast();
    uint64_t v6 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v7 = v0[11];
    if (v5) {
      break;
    }
    v6(v0[11], 1, 1, v4);
    swift_errorRelease();
    sub_10001DAB4(v7, &qword_10164FF80);
LABEL_4:
    uint64_t v2 = v0[18] + 1;
    if (v2 == v0[17])
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  v6(v0[11], 0, 1, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v8 = v0[11];
    swift_errorRelease();
    sub_100884248(v8, (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    goto LABEL_4;
  }
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[11];
  uint64_t v15 = v0[8];
  v0[21] = *(void *)(v14 + *(int *)(sub_10000588C(&qword_10164FF88) + 48));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v0[22] = v16;
  v0[23] = (v13 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v16(v11, v14, v12);
  swift_errorRetain();
  uint64_t v17 = *(void *)(v15 + 128);
  v0[24] = v17;
  return _swift_task_switch(sub_100881858, v17, 0);
}

uint64_t sub_100881858()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void (*)(unint64_t, uint64_t, uint64_t))v0[22];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[12];
  v0[25] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[26] = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100881948, 0, 0);
}

uint64_t sub_100881948()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[27] = v3;
  v3[2] = v2;
  v3[3] = sub_10088416C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100881A60;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100881A60()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 232) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_100881BD0, v2, 0);
}

uint64_t sub_100881BD0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 240) = v2;
  if (!v2)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 104);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v13 = *(void *)(v0 + 144) + 1;
    if (v13 == *(void *)(v0 + 136))
    {
LABEL_9:
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
      return v14();
    }
    while (1)
    {
      *(void *)(v0 + 144) = v13;
      uint64_t v16 = *(void *)(*(void *)(v0 + 56) + 8 * v13 + 32);
      *(void *)(v0 + 152) = v16;
      *(void *)(v0 + 32) = v16;
      swift_errorRetain();
      swift_errorRetain();
      *(void *)(v0 + 160) = sub_10000588C(&qword_101638D40);
      uint64_t v17 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError();
      int v18 = swift_dynamicCast();
      uint64_t v19 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
      uint64_t v20 = *(void *)(v0 + 88);
      if (v18)
      {
        v19(*(void *)(v0 + 88), 0, 1, v17);
        if (!swift_getEnumCaseMultiPayload())
        {
          uint64_t v24 = *(void *)(v0 + 128);
          uint64_t v25 = *(void *)(v0 + 96);
          uint64_t v26 = *(void *)(v0 + 104);
          uint64_t v27 = *(void *)(v0 + 88);
          uint64_t v28 = *(void *)(v0 + 64);
          *(void *)(v0 + 168) = *(void *)(v27 + *(int *)(sub_10000588C(&qword_10164FF88) + 48));
          uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
          *(void *)(v0 + 176) = v29;
          *(void *)(v0 + 184) = (v26 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v29(v24, v27, v25);
          swift_errorRetain();
          uint64_t v30 = *(void *)(v28 + 128);
          *(void *)(v0 + 192) = v30;
          return _swift_task_switch(sub_100881858, v30, 0);
        }
        uint64_t v21 = *(void *)(v0 + 88);
        swift_errorRelease();
        sub_100884248(v21, (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
      }
      else
      {
        v19(*(void *)(v0 + 88), 1, 1, v17);
        swift_errorRelease();
        sub_10001DAB4(v20, &qword_10164FF80);
      }
      uint64_t v13 = *(void *)(v0 + 144) + 1;
      if (v13 == *(void *)(v0 + 136)) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 72);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 28) = v5;
  uint64_t v6 = *(void *)(v4 + 72);
  *(void *)(v0 + 248) = v6;
  while (1)
  {
    *(void *)(v0 + 256) = v3;
    uint64_t v7 = *(void *)(v0 + 168);
    sub_1008841E0(v1 + ((v5 + 32) & ~(unint64_t)v5) + v3 * v6, *(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 48) = v7;
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (*(unsigned char *)(v0 + 24) == 1 && *(void *)(v0 + 16) > 5uLL) {
        break;
      }
    }
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 256) + 1;
    sub_100884248(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v9 == v8) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 256) + 1;
    LOBYTE(v5) = *(unsigned char *)(v0 + 28);
    uint64_t v1 = *(void *)(v0 + 232);
  }
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v22;
  void *v22 = v0;
  v22[1] = sub_10088200C;
  uint64_t v23 = *(void *)(v0 + 80);
  return sub_1010BCDFC(v23);
}

uint64_t sub_10088200C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10088211C, v1, 0);
}

uint64_t sub_10088211C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 256) + 1;
  sub_100884248(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v6 = *(void *)(v0 + 144) + 1;
    if (v6 == *(void *)(v0 + 136))
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
    while (1)
    {
      *(void *)(v0 + 144) = v6;
      uint64_t v16 = *(void *)(*(void *)(v0 + 56) + 8 * v6 + 32);
      *(void *)(v0 + 152) = v16;
      *(void *)(v0 + 32) = v16;
      swift_errorRetain();
      swift_errorRetain();
      *(void *)(v0 + 160) = sub_10000588C(&qword_101638D40);
      uint64_t v17 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError();
      int v18 = swift_dynamicCast();
      uint64_t v19 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
      uint64_t v20 = *(void *)(v0 + 88);
      if (v18)
      {
        v19(*(void *)(v0 + 88), 0, 1, v17);
        if (!swift_getEnumCaseMultiPayload())
        {
          uint64_t v22 = *(void *)(v0 + 128);
          uint64_t v23 = *(void *)(v0 + 96);
          uint64_t v24 = *(void *)(v0 + 104);
          uint64_t v25 = *(void *)(v0 + 88);
          uint64_t v26 = *(void *)(v0 + 64);
          *(void *)(v0 + 168) = *(void *)(v25 + *(int *)(sub_10000588C(&qword_10164FF88) + 48));
          uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
          *(void *)(v0 + 176) = v27;
          *(void *)(v0 + 184) = (v24 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v27(v22, v25, v23);
          swift_errorRetain();
          uint64_t v28 = *(void *)(v26 + 128);
          *(void *)(v0 + 192) = v28;
          return _swift_task_switch(sub_100881858, v28, 0);
        }
        uint64_t v21 = *(void *)(v0 + 88);
        swift_errorRelease();
        sub_100884248(v21, (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
      }
      else
      {
        v19(*(void *)(v0 + 88), 1, 1, v17);
        swift_errorRelease();
        sub_10001DAB4(v20, &qword_10164FF80);
      }
      uint64_t v6 = *(void *)(v0 + 144) + 1;
      if (v6 == *(void *)(v0 + 136)) {
        goto LABEL_3;
      }
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 256) + 1;
    *(void *)(v0 + 256) = v12;
    uint64_t v13 = *(void *)(v0 + 168);
    sub_1008841E0(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v11 * v12, *(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 48) = v13;
    swift_errorRetain();
    if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 24) == 1 && *(void *)(v0 + 16) > 5uLL) {
      break;
    }
    uint64_t v9 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 256) + 1;
    sub_100884248(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v10 == v9) {
      goto LABEL_2;
    }
  }
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10088200C;
  uint64_t v15 = *(void *)(v0 + 80);
  return sub_1010BCDFC(v15);
}

uint64_t sub_10088255C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_10001D074(a1, (uint64_t)v4, (uint64_t *)&unk_10163AC90);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
}

unint64_t sub_1008826EC()
{
  unint64_t result = qword_10164FF10;
  if (!qword_10164FF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164FF10);
  }
  return result;
}

uint64_t sub_100882740(uint64_t a1)
{
  return sub_100880A48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100882748()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008827DC()
{
  sub_10000588C(&qword_1016575E0);

  return sub_100880CBC();
}

uint64_t sub_100882850()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10088299C(uint64_t a1)
{
  return sub_100881108(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1008829C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E5F538(v4, a1);
}

uint64_t sub_100882A34(uint64_t a1)
{
  return sub_10012A43C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100882A40()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100882B10(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_1012E7018(v1 + v5, *(unsigned __int8 *)(v1 + v5 + *(void *)(v4 + 64)));
  if (!v2)
  {
    *a1 = v6;
    a1[1] = v7;
    a1[2] = v8;
    a1[3] = v9;
  }
}

double sub_100882BB8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100881054(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100882BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v76 = a4;
  uint64_t v69 = a1;
  v71 = a5;
  uint64_t v70 = type metadata accessor for UUID();
  uint64_t v67 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for OwnSubmitLocationInfo();
  uint64_t v66 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v9 - 8);
  v75 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  v72 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v59 - v15;
  uint64_t v17 = type metadata accessor for BeaconPayloadv1();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (uint64_t *)((char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = (int *)type metadata accessor for BeaconEstimatedLocation();
  double v21 = *(double *)(a2 + v20[9]);
  int v22 = sub_1002A08EC(v21);
  uint64_t v23 = a2 + v20[10];
  uint64_t v73 = v12;
  uint64_t v74 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v24(v16, v23, v11);
  double v25 = *(double *)(a2 + v20[7]);
  double v26 = *(double *)(a2 + v20[8]);
  uint64_t v27 = a3;
  uint64_t v28 = a3;
  unint64_t v29 = v76;
  sub_1000361E0(v28, v76);
  uint64_t v30 = v77;
  uint64_t result = sub_100A426EC(v27, v29, (uint64_t)v16, v22, 0, v19, v25, v26, v21);
  if (!v30)
  {
    v77 = (void (*)(void, void, void))v24;
    uint64_t v33 = v74;
    uint64_t v32 = (uint64_t)v75;
    uint64_t v34 = v72;
    uint64_t v35 = v73;
    uint64_t v36 = BeaconPayloadv1.encode()();
    uint64_t v60 = v37;
    unint64_t v61 = v38;
    uint64_t v62 = v19;
    uint64_t v63 = v36;
    unint64_t v76 = v39;
    sub_10001D074(a2 + v20[12], v32, (uint64_t *)&unk_10163AC90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v32, 1, v33) == 1)
    {
      sub_10001DAB4(v32, (uint64_t *)&unk_10163AC90);
      if (qword_101637660 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170F838);
      uint64_t v41 = v67;
      uint64_t v42 = v68;
      uint64_t v43 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v69, v70);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        v77 = (void (*)(void, void, void))v47;
        *(_DWORD *)uint64_t v46 = 141558275;
        uint64_t v78 = 1752392040;
        uint64_t v79 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v46 + 12) = 2081;
        sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v78 = sub_1008FA0F0(v48, v49, &v79);
        uint64_t v50 = (uint64_t)v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v51 = v50;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "location does not contain a scanDate %{private,mask.hash}s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);

        uint64_t v51 = (uint64_t)v62;
      }
      type metadata accessor for DeviceBeaconPayloadPublisher.PublishError();
      sub_100883398(&qword_10164FF28, 255, (void (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_10001CFB8(v63, v76);
      sub_10001CFB8(v60, v61);
      return sub_100884248(v51, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    }
    else
    {
      uint64_t v52 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v34, v32, v33);
      uint64_t v53 = v65;
      v77(&v65[*(int *)(v64 + 20)], v34, v33);
      unint64_t v54 = v61;
      *uint64_t v53 = v60;
      v53[1] = v54;
      sub_10000588C(&qword_10163AA98);
      unint64_t v55 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_101342130;
      sub_1008833E0((uint64_t)v53, v56 + v55, (uint64_t (*)(void))type metadata accessor for OwnSubmitLocationInfo);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v52, v33);
      uint64_t result = sub_100884248((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
      v57 = v71;
      unint64_t v58 = v76;
      void *v71 = v63;
      v57[1] = v58;
      *((unsigned char *)v57 + 16) = 1;
      v57[3] = 0;
      v57[4] = 0;
      *((_WORD *)v57 + 20) = 5;
      v57[6] = v56;
    }
  }
  return result;
}

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher.PublishError()
{
  uint64_t result = qword_101650000;
  if (!qword_101650000) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100883398(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008833E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100883448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  v84 = a4;
  int v78 = a6;
  uint64_t v74 = a5;
  uint64_t v76 = a1;
  v77 = a7;
  uint64_t v80 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v79 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for OwnSubmitLocationInfo();
  uint64_t v73 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  v72 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v11 - 8);
  v82 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v70 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = type metadata accessor for BeaconPayloadv1();
  __chkstk_darwin(v19 - 8);
  double v21 = (uint64_t *)((char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v22 = (int *)type metadata accessor for BeaconEstimatedLocation();
  double v23 = *(double *)(a2 + v22[9]);
  int v24 = sub_1002A08EC(v23);
  uint64_t v25 = a2 + v22[10];
  uint64_t v81 = v14;
  double v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v83 = v13;
  v26(v18, v25, v13);
  double v27 = *(double *)(a2 + v22[7]);
  double v28 = *(double *)(a2 + v22[8]);
  uint64_t v29 = a3;
  uint64_t v30 = a3;
  unint64_t v31 = (unint64_t)v84;
  sub_1000361E0(v30, (unint64_t)v84);
  uint64_t v32 = v85;
  uint64_t result = sub_100A426EC(v29, v31, (uint64_t)v18, v24, 0, v21, v27, v28, v23);
  if (!v32)
  {
    v84 = (void (*)(char *, char *, uint64_t))v26;
    uint64_t v35 = v81;
    uint64_t v34 = (uint64_t)v82;
    uint64_t v36 = v83;
    uint64_t v37 = BeaconPayloadv1.encode()();
    uint64_t v85 = v38;
    unint64_t v67 = v39;
    uint64_t v66 = v21;
    unint64_t v68 = v40;
    uint64_t v69 = v37;
    sub_10001D074(a2 + v22[12], v34, (uint64_t *)&unk_10163AC90);
    uint64_t v41 = v35;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v36) == 1)
    {
      sub_10001DAB4(v34, (uint64_t *)&unk_10163AC90);
      if (qword_101637660 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F838);
      uint64_t v43 = v75;
      uint64_t v44 = v79;
      uint64_t v45 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v79, v76, v80);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 141558275;
        uint64_t v86 = 1752392040;
        uint64_t v87 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v48 + 12) = 2081;
        v84 = (void (*)(char *, char *, uint64_t))(v48 + 14);
        sub_100883398((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v86 = sub_1008FA0F0(v50, v51, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "location does not contain a scanDate %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
      }

      type metadata accessor for DeviceBeaconPayloadPublisher.PublishError();
      sub_100883398(&qword_10164FF28, 255, (void (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_10001CFB8(v69, v67);
      sub_10001CFB8(v85, v68);
      return sub_100884248((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    }
    else
    {
      uint64_t v52 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v70, v34, v36);
      uint64_t v53 = v72;
      v84(&v72[*(int *)(v71 + 20)], v52, v36);
      uint64_t v54 = v85;
      *uint64_t v53 = v85;
      uint64_t v55 = v54;
      unint64_t v56 = v68;
      v53[1] = v68;
      sub_1000361E0(v55, v56);
      uint64_t v57 = v69;
      unint64_t v58 = v67;
      sub_1000361E0(v69, v67);
      v84 = (void (*)(char *, char *, uint64_t))UUID.uuidString.getter();
      v82 = v59;
      sub_10000588C(&qword_10163AA98);
      uint64_t v60 = v41;
      unint64_t v61 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_101342130;
      sub_1008833E0((uint64_t)v53, v62 + v61, (uint64_t (*)(void))type metadata accessor for OwnSubmitLocationInfo);
      sub_10001CFB8(v57, v58);
      sub_10001CFB8(v85, v56);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v83);
      uint64_t result = sub_100884248((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
      uint64_t v63 = v77;
      uint64_t *v77 = v57;
      v63[1] = v58;
      *((unsigned char *)v63 + 16) = 2;
      uint64_t v64 = v82;
      v63[3] = (uint64_t)v84;
      v63[4] = (uint64_t)v64;
      *((unsigned char *)v63 + 40) = v78;
      *((unsigned char *)v63 + 41) = 1;
      v63[6] = v62;
    }
  }
  return result;
}

unint64_t sub_100883C2C()
{
  unint64_t result = qword_10164FF38;
  if (!qword_10164FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164FF38);
  }
  return result;
}

uint64_t sub_100883C80()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100883D54()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_100874D1C(v3, v4, v5);
}

uint64_t sub_100883E38()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100883E70(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10164FF50 + dword_10164FF50);
  return v6(a1, v4);
}

uint64_t sub_100883F28()
{
  return sub_100884040((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100883F54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1008764D4(a1, v4, v5, v7, v6);
}

uint64_t sub_100884014()
{
  return sub_100884040((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100884040(void (*a1)(void), void (*a2)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v2 + 32));
  a2(*(void *)(v2 + 40));

  return _swift_deallocObject(v2, 48, 7);
}

uint64_t sub_1008840A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_10088146C(a1, v4, v5, v7, v6);
}

void sub_10088416C(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_100E5B67C(v4, v5, a1);
}

uint64_t sub_1008841E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100884248(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1008842A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(sub_10000588C(&qword_10164FF88) + 48);
      uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
      swift_errorRetain();
      *(uint64_t *)((char *)a1 + v9) = v10;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1008843E8(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    sub_10000588C(&qword_10164FF88);
    return swift_errorRelease();
  }
  return result;
}

void *sub_1008844A0(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_10000588C(&qword_10164FF88) + 48);
    uint64_t v9 = *(void *)((char *)a2 + v8);
    swift_errorRetain();
    *(void *)((char *)a1 + v8) = v9;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10088459C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100884248((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_10000588C(&qword_10164FF88) + 48);
      uint64_t v9 = *(void *)((char *)a2 + v8);
      swift_errorRetain();
      *(void *)((char *)a1 + v8) = v9;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *sub_1008846BC(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = sub_10000588C(&qword_10164FF88);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_100884788(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100884248((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_10000588C(&qword_10164FF88);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100884878()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100884920(uint64_t a1)
{
  return sub_10088299C(a1) & 1;
}

uint64_t sub_100884940()
{
  swift_unknownObjectRelease();
  sub_1000A1534(*(void *)(v0 + 32));
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_lastPublishedDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100884A08()
{
  return type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber();
}

uint64_t type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber()
{
  uint64_t result = qword_101650070;
  if (!qword_101650070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100884A5C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100884B10()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  static Date.distantPast.getter();
  uint64_t v7 = OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_serialQueue;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  sub_1001AFFC4();
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + v7) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t sub_100884D38(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164C960);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  uint64_t v8 = sub_10000588C(&qword_101650708);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000588C(&qword_10164C968);
  uint64_t v11 = __chkstk_darwin(v43);
  uint64_t v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v39 - v14);
  *(void *)&long long v46 = a1;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101650710);
  sub_10000588C(&qword_101650718);
  if (swift_dynamicCast())
  {
    sub_10001CEB0(v47, (uint64_t)v49);
    sub_10001CD44(v49, v49[3]);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v47[0] = v46;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
    return *(void *)&v47[0];
  }
  uint64_t v39 = 0;
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_10001DAB4((uint64_t)v47, &qword_101650720);
  uint64_t v42 = (char *)&v39;
  v47[0] = xmmword_101348180;
  uint64_t v16 = *(int *)(v8 + 48);
  *uint64_t v13 = a1;
  v13[1] = 0;
  uint64_t v17 = (char *)v13 + *(int *)(v43 + 44);
  uint64_t v18 = a1;
  uint64_t v19 = type metadata accessor for Data.Iterator();
  uint64_t v40 = *(void *)(v19 - 8);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  uint64_t v45 = v40 + 56;
  v44(v17, 1, 1, v19);
  sub_10001D608((uint64_t)v13, (uint64_t)v10, &qword_10164C968);
  *(void *)&v10[v16] = 0;
  uint64_t v41 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = *(void *)&v10[*(int *)(v8 + 48)];
  sub_10001D608((uint64_t)v10, (uint64_t)v15, &qword_10164C968);
  uint64_t v21 = *((void *)&v47[0] + 1) >> 62;
  switch(*((void *)&v47[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v22) = DWORD1(v47[0]) - LODWORD(v47[0]);
      if (__OFSUB__(DWORD1(v47[0]), v47[0])) {
        goto LABEL_39;
      }
      uint64_t v22 = (int)v22;
LABEL_8:
      if (v20 != v22)
      {
        if (v21)
        {
          if (v21 == 1)
          {
            if (*(uint64_t *)&v47[0] >> 32 < v20) {
              goto LABEL_37;
            }
          }
          else if (*(void *)(*(void *)&v47[0] + 24) < v20)
          {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v26 = BYTE14(v47[0]);
LABEL_32:
          if (v26 < v20)
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
          }
        }
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10001DAB4((uint64_t)v15, &qword_10164C968);
        goto LABEL_34;
      }
LABEL_15:
      uint64_t v27 = 0;
      uint64_t v28 = (uint64_t)v15 + *(int *)(v43 + 44);
      memset(v49, 0, 15);
      uint64_t v29 = (uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
      uint64_t v42 = (char *)&v46 + 14;
LABEL_16:
      uint64_t v43 = v27;
      while (1)
      {
        sub_10001D074(v28, (uint64_t)v7, &qword_10164C960);
        uint64_t v30 = *v29;
        unsigned int v31 = (*v29)(v7, 1, v19);
        sub_10001DAB4((uint64_t)v7, &qword_10164C960);
        if (v31 != 1)
        {
          if (v30((char *)v28, 1, v19) == 1) {
            goto LABEL_42;
          }
          sub_1008AAC94(&qword_10163FF00, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
          dispatch thunk of IteratorProtocol.next()();
          if (BYTE1(v46) != 1)
          {
            int v37 = v43;
            *((unsigned char *)v49 + v43) = v46;
            uint64_t v27 = (v37 + 1);
            if ((v27 >> 8)) {
              goto LABEL_41;
            }
            BYTE6(v49[1]) = v37 + 1;
            if ((v37 + 1) == 14)
            {
              *(void *)&long long v46 = v49[0];
              DWORD2(v46) = v49[1];
              WORD6(v46) = WORD2(v49[1]);
              Data._Representation.append(contentsOf:)();
              uint64_t v27 = 0;
              BYTE6(v49[1]) = 0;
            }
            goto LABEL_16;
          }
        }
        unint64_t v32 = v15[1];
        unint64_t v33 = *(void *)(*v15 + 16);
        if (v32 == v33) {
          break;
        }
        if (v32 >= v33) {
          goto LABEL_38;
        }
        uint64_t v34 = *v15 + 16 * v32;
        uint64_t v35 = *(void *)(v34 + 32);
        unint64_t v36 = *(void *)(v34 + 40);
        v15[1] = v32 + 1;
        switch(v36 >> 62)
        {
          case 1uLL:
          case 2uLL:
            sub_1000361E0(v35, v36);
            sub_1000361E0(v35, v36);
            sub_1000361E0(v35, v36);
            break;
          default:
            break;
        }
        Data.Iterator.init(_:at:)();
        sub_10001CFB8(v35, v36);
        sub_10001CFB8(v35, v36);
        v44(v5, 0, 1, v19);
        sub_100062604((uint64_t)v5, v28, &qword_10164C960);
      }
      if ((_BYTE)v43)
      {
        *(void *)&long long v46 = v49[0];
        DWORD2(v46) = v49[1];
        WORD6(v46) = WORD2(v49[1]);
        Data._Representation.append(contentsOf:)();
      }
      sub_10001DAB4((uint64_t)v15, &qword_10164C968);
LABEL_34:
      swift_bridgeObjectRelease();
      return *(void *)&v47[0];
    case 2:
      uint64_t v24 = *(void *)(*(void *)&v47[0] + 16);
      uint64_t v23 = *(void *)(*(void *)&v47[0] + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_8;
      }
      goto LABEL_40;
    case 3:
      if (!v20) {
        goto LABEL_15;
      }
      uint64_t v26 = 0;
      goto LABEL_32;
    default:
      uint64_t v22 = BYTE14(v47[0]);
      goto LABEL_8;
  }
}

uint64_t sub_10088540C(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_10001CD44(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1000361E0(a1, a2);
      sub_1000361E0(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_10089C5FC(v8, v13, &v27);
      sub_10001CFB8(v5, v6);
LABEL_27:
      sub_10001CFB8(a1, a2);
      uint64_t v24 = v27;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1000361E0(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_10089C5FC(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1000361E0(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1000361E0(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_10089C5FC(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_1008856C0(uint64_t a1, uint64_t a2)
{
  v7[3] = &type metadata for UnsafeMutableRawBufferPointer;
  v7[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v2 = sub_10001CD44(v7, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (unsigned char *)v2[1];
    uint64_t v5 = (uint64_t)&v4[-v3];
    if (v4 == (unsigned char *)v3)
    {
      uint64_t v3 = 0;
    }
    else if (v5 <= 14)
    {
      uint64_t v3 = sub_1008AA688((unsigned char *)*v2, v4);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(bytes:length:)();
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v3 = swift_allocObject();
        *(void *)(v3 + 16) = 0;
        *(void *)(v3 + 24) = v5;
      }
      else
      {
        uint64_t v3 = v5 << 32;
      }
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v7);
  return v3;
}

uint64_t sub_1008857C4(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_10001CD44(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1008AA688(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1008AA74C((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1008AA7C8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
  return v6;
}

uint64_t sub_100885880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v15 - v8;
  unint64_t v10 = *v1;
  if (*(void *)(*v1 + 16))
  {
    uint64_t v16 = v7;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100BBD3A8(v10);
      unint64_t v10 = result;
    }
    uint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      sub_1008AB368(v10+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * (v12 - 1), (uint64_t)v6, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      *(void *)(v10 + 16) = v13;
      unint64_t *v1 = v10;
      sub_1008AB368((uint64_t)v6, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      sub_1008AB368((uint64_t)v9, a1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v3);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    return v14(a1, 1, 1, v3);
  }
  return result;
}

uint64_t sub_100885A64(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  return _swift_task_switch(sub_100885B00, v4, v6);
}

uint64_t sub_100885B00()
{
  long long v24 = 0u;
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v17 = 0;
    uint64_t v9 = 0;
    unint64_t v8 = 0xF000000000000000;
    long long v16 = 0uLL;
    long long v15 = 0uLL;
  }
  else
  {
    uint64_t v22 = v0 + 2;
    uint64_t v1 = (uint64_t *)v0[9];
    uint64_t v2 = *v1;
    unint64_t v3 = v1[1];
    uint64_t v4 = v1[2];
    unint64_t v5 = v1[3];
    uint64_t v20 = v0;
    uint64_t v7 = v1[4];
    unint64_t v6 = v1[5];
    unint64_t v8 = v1[8];
    uint64_t v19 = v1[6];
    uint64_t v9 = v1[7];
    sub_1000361E0(v9, v8);
    sub_1000361E0(v9, v8);
    sub_100037A38(v2, v3);
    sub_1000361E0(v4, v5);
    uint64_t v21 = v7;
    uint64_t v10 = v7;
    unint64_t v11 = v6;
    sub_1000361E0(v10, v6);
    sub_1000361E0(v9, v8);
    sub_100037A38(v2, v3);
    sub_1000361E0(v4, v5);
    sub_100A8E7CC(v2, v3, v4, v5, v9, v8, 1, v1 + 6, v22, v1 + 7);
    uint64_t v0 = v20;
    long long v23 = v20[2];
    long long v24 = v20[1];
    long long v18 = v20[3];
    sub_10001CFB8(v9, v8);
    sub_10001CFB8(v4, v5);
    sub_100037A24(v2, v3);
    sub_100037A24(v2, v3);
    sub_10001CFB8(v4, v5);
    sub_10001CFB8(v21, v11);
    sub_10001CFB8(v9, v8);
    long long v15 = v18;
    long long v16 = v23;
    uint64_t v17 = v19;
  }
  uint64_t v12 = v0[8];
  *(void *)uint64_t v12 = v17;
  *(void *)(v12 + 8) = v9;
  *(void *)(v12 + 16) = v8;
  *(_OWORD *)(v12 + 24) = v24;
  *(_OWORD *)(v12 + 40) = v16;
  *(_OWORD *)(v12 + 56) = v15;
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

id sub_100885E68(uint64_t a1)
{
  return sub_10089A3A8(a1, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
}

uint64_t sub_100885EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100885ED8(a1, a2, a3);
}

uint64_t sub_100885ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100885ED8(a1, a2, a3);
}

uint64_t sub_100885ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10001DAB4(a1, &qword_10164DBB0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10088605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10001DAB4(a1, &qword_10164DBB0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10000588C(&qword_101650758);
  return swift_task_create();
}

uint64_t sub_1008861E4(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_100886210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1008AA59C(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_1008AA520(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x100886384);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_10001CFB8(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

Swift::Int sub_1008863B4(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)sub_100B737DC(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_10089C708(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_10088645C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B737F0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10089D218(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1008864C8(uint64_t a1)
{
  return sub_10088FC48(a1, qword_101650178);
}

uint64_t sub_1008864D4()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v19 = 0x7365547265646E75;
  unint64_t v20 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v21 == 1)
  {
    uint64_t v8 = NSTemporaryDirectory();
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    uint64_t v19 = v9;
    unint64_t v20 = v11;
    v12._countAndFlagsBits = 0x2F7370614D79654BLL;
    v12._object = (void *)0xE800000000000000;
    String.append(_:)(v12);
    UUID.init()();
    uint64_t v13 = UUID.uuidString.getter();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BeaconStore(0);
    sub_100A9DB34((uint64_t)v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_10088678C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = 0x7972616D697250;
  *(void *)(v2 + 120) = 0xE700000000000000;
  *(void *)(v2 + 128) = 0x7261646E6F636553;
  *(void *)(v2 + 136) = 0xE900000000000079;
  *(void *)(v2 + 152) = _swiftEmptyDictionarySingleton;
  *(void *)(v2 + 160) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)(v2 + 176) = 0u;
  uint64_t v6 = v2 + 176;
  *(void *)(v2 + 168) = 4000;
  *(_OWORD *)(v2 + 192) = 0u;
  *(void *)(v2 + 208) = 0;
  sub_1008864D4();
  *(void *)(v2 + 144) = a1;
  uint64_t v7 = qword_1016371D8;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)&v10[0] = 0x7365547265646E75;
  *((void *)&v10[0] + 1) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_release();
  swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    swift_beginAccess();
    sub_100062604(a2, v6, &qword_101650750);
  }
  else
  {
    sub_10001DAB4(a2, &qword_101650750);
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    swift_beginAccess();
    sub_100062604((uint64_t)v10, v6, &qword_101650750);
  }
  swift_endAccess();
  return v3;
}

uint64_t sub_100886968()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_100886988, v0, 0);
}

uint64_t sub_100886988()
{
  uint64_t v1 = *(void *)(v0 + 128) + 176;
  swift_beginAccess();
  sub_10001D074(v1, v0 + 56, &qword_101650750);
  if (*(void *)(v0 + 80))
  {
    uint64_t v2 = *(void *)(v0 + 128);
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 48);
    sub_10001CD44((void *)(v0 + 16), v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory, v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  }
  else
  {
    sub_10001DAB4(v0 + 56, &qword_101650750);
  }
  sub_1008876D8();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100886C5C;
  return sub_100886D50();
}

uint64_t sub_100886C5C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100886D50()
{
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  type metadata accessor for BeaconIdentifier();
  v1[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for KeyGenerationBeaconInfo();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_100886E98, v0, 0);
}

uint64_t sub_100886E98()
{
  uint64_t v2 = (void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = (void *)(v0 + 72);
  uint64_t v4 = sub_1009FDE84(*(void *)(v1 + 144));
  uint64_t v51 = *(void *)(v4 + 16);
  if (!v51)
  {
    swift_bridgeObjectRelease();
LABEL_48:
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100010324(v41, (uint64_t)qword_101650178);
    swift_retain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *v2;
    if (v44)
    {
      long long v46 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v46 = 134217984;
      swift_beginAccess();
      *uint64_t v3 = *(void *)(*(void *)(v45 + 160) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "opened all keymaps, keymaps.count = %ld", v46, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    goto LABEL_53;
  }
  uint64_t v48 = v3;
  unint64_t v12 = 0;
  uint64_t v53 = v58[15];
  uint64_t v54 = v58[16];
  uint64_t v56 = v58[12];
  uint64_t v57 = v58[11];
  uint64_t v13 = (void *)(v58[10] + 160);
  unint64_t v52 = v4 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
  uint64_t v49 = v4;
  uint64_t v50 = v2;
  while (1)
  {
    if (v12 >= *(void *)(v4 + 16))
    {
LABEL_60:
      __break(1u);
      swift_once();
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_101650178);
      swift_errorRetain();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = v2 - 2;
        char v9 = (uint8_t *)swift_slowAlloc();
        unint64_t v10 = (void *)swift_slowAlloc();
        *(_DWORD *)char v9 = 138412290;
        uint64_t v11 = _convertErrorToNSError(_:)();
        *uint64_t v8 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v10 = v11;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error in openAllKeyMaps(): %@", v9, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }
LABEL_53:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v47 = (uint64_t (*)(void))v58[1];
      return v47();
    }
    uint64_t v15 = v58[17];
    uint64_t v16 = v58[14];
    sub_10089C594(v52 + *(void *)(v54 + 72) * v12, v15, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    sub_10089C594(v15, v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v17 = v15 + *(int *)(v53 + 24);
    BOOL v18 = *(void *)(v17 + 8) >> 60 != 15 && *(void *)(v17 + 40) >> 60 != 15;
    if (sub_100896670(v58[14], 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    if (v18 && sub_100896670(v58[14], 1))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    unint64_t v55 = v12;
    sub_1008AA93C(v58[14], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
      uint64_t v19 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19) {
        break;
      }
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
LABEL_6:
    unint64_t v12 = v55 + 1;
    uint64_t v14 = v58[17];
    swift_bridgeObjectRelease();
    sub_1008AA93C(v14, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    uint64_t v2 = v50;
    uint64_t v4 = v49;
    if (v55 + 1 == v51)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v48;
      goto LABEL_48;
    }
  }
  uint64_t v2 = 0;
  while (1)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
    {
      uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      long long v23 = (char *)v2 + 1;
      if (__OFADD__(v2, 1)) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v22 = _swiftEmptyArrayStorage[(void)v2 + 4];
      swift_retain();
      long long v23 = (char *)v2 + 1;
      if (__OFADD__(v2, 1))
      {
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
    }
    uint64_t v24 = v58[13];
    sub_10089C594(v58[17], v24, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    *(unsigned char *)(v24 + *(int *)(v57 + 20)) = *(unsigned char *)(v22 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence);
    swift_beginAccess();
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = (void *)*v13;
    uint64_t v59 = (void *)*v13;
    *uint64_t v13 = 0x8000000000000000;
    unint64_t v28 = sub_100724B78(v24);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      goto LABEL_58;
    }
    char v32 = v27;
    if (v26[3] < v31) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v27) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_100E837D4();
      uint64_t v26 = v59;
      if (v32)
      {
LABEL_23:
        uint64_t v20 = v26[7];
        swift_release();
        *(void *)(v20 + 8 * v28) = v22;
        goto LABEL_24;
      }
    }
LABEL_37:
    uint64_t v36 = v58[13];
    v26[(v28 >> 6) + 8] |= 1 << v28;
    sub_10089C594(v36, v26[6] + *(void *)(v56 + 72) * v28, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(void *)(v26[7] + 8 * v28) = v22;
    uint64_t v37 = v26[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_59;
    }
    v26[2] = v39;
LABEL_24:
    uint64_t v21 = v58[13];
    *uint64_t v13 = v26;
    swift_bridgeObjectRelease();
    sub_1008AA93C(v21, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    swift_endAccess();
    swift_release();
    uint64_t v2 = (void *)((char *)v2 + 1);
    if (v23 == (char *)v19) {
      goto LABEL_6;
    }
  }
  uint64_t v33 = v58[13];
  sub_100E708EC(v31, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v59;
  unint64_t v34 = sub_100724B78(v33);
  if ((v32 & 1) == (v35 & 1))
  {
    unint64_t v28 = v34;
    if (v32) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

void sub_1008876D8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  os_log_type_t v7 = (char *)&v46 - v6;
  uint64_t v8 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v8 - 8);
  uint64_t v57 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for DirectorySequence();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v61 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  sub_10001D4B0(0, (unint64_t *)&qword_101642980);
  uint64_t v12 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
  swift_beginAccess();
  uint64_t v46 = v0 + 176;
  sub_10001D074(v0 + 176, (uint64_t)&v62, &qword_101650750);
  if (v63)
  {
    sub_10001CEB0(&v62, (uint64_t)v64);
    uint64_t v13 = v5;
    uint64_t v14 = v65;
    uint64_t v15 = v66;
    sub_10001CD44(v64, v65);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8);
    uint64_t v17 = v15;
    uint64_t v5 = v13;
    v16(v12, v14, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
  }
  else
  {
    sub_10001DAB4((uint64_t)&v62, &qword_101650750);
  }
  uint64_t v47 = v12;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();
  BOOL v18 = v57;
  DirectorySequence.next()();
  uint64_t v19 = v2;
  uint64_t v20 = v18;
  uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v60 = v19 + 48;
  if (v59(v18, 1, v1) != 1)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v24 = v19 + 32;
    unint64_t v58 = v25;
    uint64_t v26 = (void (**)(char *, uint64_t))(v24 - 24);
    unint64_t v55 = (void (**)(char *, char *, uint64_t))(v24 - 16);
    *(void *)&long long v21 = 136315138;
    long long v52 = v21;
    uint64_t v51 = (char *)&type metadata for Any + 8;
    uint64_t v56 = (void (**)(char *, uint64_t))(v24 - 24);
    id v54 = v11;
    uint64_t v53 = v24;
    v25(v7, v20, v1);
    while (1)
    {
      URL.lastPathComponent.getter();
      v29._countAndFlagsBits = 46;
      v29._object = (void *)0xE100000000000000;
      Swift::Bool v30 = String.hasPrefix(_:)(v29);
      swift_bridgeObjectRelease();
      if (v30)
      {
        if (qword_101636DA8 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_100010324(v31, (uint64_t)qword_101650178);
        (*v55)(v5, v7, v1);
        char v32 = Logger.logObject.getter();
        uint64_t v33 = v5;
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          v64[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = v52;
          sub_1008AAC94((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v35 + 4) = sub_1008FA0F0(v36, v37, (uint64_t *)v64);
          swift_bridgeObjectRelease();
          unint64_t v28 = *v26;
          v28(v33, v1);
          _os_log_impl((void *)&_mh_execute_header, v32, v34, "cleanup removing %s", (uint8_t *)v35, 0xCu);
          swift_arrayDestroy();
          id v11 = v54;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          unint64_t v28 = *v26;
          v28(v33, v1);
        }

        uint64_t v5 = v33;
        URL._bridgeToObjectiveC()(v38);
        uint64_t v40 = v39;
        v64[0] = 0;
        unsigned __int8 v41 = [v11 removeItemAtURL:v39 error:v64];

        id v42 = v64[0];
        uint64_t v20 = v57;
        if ((v41 & 1) == 0)
        {
          uint64_t v45 = v42;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          v28(v7, v1);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v61, v50);
          return;
        }
        char v27 = v56;
      }
      else
      {
        char v27 = v26;
        unint64_t v28 = *v26;
      }
      v28(v7, v1);
      DirectorySequence.next()();
      uint64_t v26 = v27;
      if (v59(v20, 1, v1) == 1) {
        break;
      }
      v58(v7, v20, v1);
    }
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v61, v50);
  uint64_t v22 = v47;
  uint64_t v23 = v48;
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)();
  if (v23)
  {
  }
  else
  {
    sub_10001D074(v46, (uint64_t)&v62, &qword_101650750);
    if (v63)
    {
      sub_10001CEB0(&v62, (uint64_t)v64);
      uint64_t v43 = v65;
      uint64_t v44 = v66;
      sub_10001CD44(v64, v65);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v22, v43, v44);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
    }
    else
    {

      sub_10001DAB4((uint64_t)&v62, &qword_101650750);
    }
  }
}

uint64_t sub_100887E48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DAB4(v0 + 176, &qword_101650750);
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100887EFC()
{
  return type metadata accessor for BeaconKeyServiceBuilder(0);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_1016501D8);
}

uint64_t sub_100887F24()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100888000()
{
  v1[4] = v0;
  v1[5] = *v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[11] = v4;
  v1[12] = *(void *)(v4 + 64);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  sub_10000588C(&qword_101650550);
  v1[15] = swift_task_alloc();
  v1[16] = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  v1[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconIdentifier();
  v1[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[19] = v6;
  v1[20] = *(void *)(v6 + 64);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_100888294, 0, 0);
}

uint64_t sub_100888294()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 192) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1008883A0;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_1008883A0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1008884B8, 0, 0);
}

uint64_t sub_1008884B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = sub_1010ABE78(v1);
  if ((v2 & 0x8000000000000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  *(void *)(v0 + 208) = 96 * v2;
  if (!is_mul_ok(v2, 0x60uLL))
  {
    __break(1u);
    goto LABEL_55;
  }
  unint64_t v2 = sub_1010ABE8C(v1);
  if ((v2 & 0x8000000000000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  *(void *)(v0 + 216) = 96 * v2;
  if (!is_mul_ok(v2, 0x60uLL))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v2 = sub_1010ABEC8(v1);
  if ((v2 & 0x8000000000000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  *(void *)(v0 + 224) = 96 * v2;
  if (!is_mul_ok(v2, 0x60uLL))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  unint64_t v3 = sub_1010ABEA0(v1);
  unint64_t v2 = swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  *(void *)(v0 + 232) = 96 * v3;
  if (!is_mul_ok(v3, 0x60uLL)) {
    goto LABEL_57;
  }
  *(void *)(v0 + 240) = mach_continuous_time();
  *(void *)(v0 + 248) = sub_100889A7C();
  uint64_t v4 = sub_1009FD8F0(*(void *)(*(void *)(v0 + 32) + 144));
  *(void *)(v0 + 256) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10115209C(v6);
  int64_t v8 = *(void *)(v5 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 128);
    sub_1000B78F4(0, v8, 0);
    uint64_t v11 = v5 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    do
    {
      uint64_t v13 = *(void *)(v0 + 184);
      uint64_t v14 = *(void *)(v0 + 136);
      sub_10089C594(v11, v14, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      sub_10089C594(v14, v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_1008AA93C(v14, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B78F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        sub_1000B78F4(v15 > 1, v16 + 1, 1);
      }
      uint64_t v17 = *(void *)(v0 + 184);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      sub_1008AB368(v17, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  uint64_t v18 = sub_101159CAC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (*(void *)(v18 + 16) <= *(void *)(v7 + 16) >> 3)
  {
    sub_10089F968(v18);
    unint64_t v2 = swift_bridgeObjectRelease();
    uint64_t v19 = (unsigned char *)v7;
  }
  else
  {
    uint64_t v19 = sub_1008A4E40(v18, v7);
    unint64_t v2 = swift_bridgeObjectRelease();
  }
  int64_t v20 = 0;
  *(void *)(v0 + 264) = v19;
  char v21 = v19[32];
  *(unsigned char *)(v0 + 336) = v21;
  uint64_t v22 = 1 << v21;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & *((void *)v19 + 7);
  while (1)
  {
    if (v24)
    {
      unint64_t v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v27 = v26 | (v20 << 6);
      uint64_t v28 = *(void *)(v0 + 264);
      goto LABEL_41;
    }
    int64_t v29 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_58;
    }
    int64_t v30 = (unint64_t)((1 << *(unsigned char *)(v0 + 336)) + 63) >> 6;
    uint64_t v28 = *(void *)(v0 + 264);
    if (v29 >= v30)
    {
LABEL_49:
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56))(*(void *)(v0 + 120), 1, 1, *(void *)(v0 + 144));
LABEL_50:
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void *)(v0 + 256);
      long long v70 = *(_OWORD *)(v0 + 224);
      uint64_t v58 = *(void *)(v0 + 208);
      uint64_t v57 = *(void *)(v0 + 216);
      uint64_t v60 = *(void *)(v0 + 32);
      uint64_t v59 = *(void *)(v0 + 40);
      uint64_t v61 = swift_task_alloc();
      *(void *)(v0 + 312) = v61;
      *(void *)(v61 + 16) = v56;
      *(void *)(v61 + 24) = v60;
      *(void *)(v61 + 32) = v58;
      *(void *)(v61 + 40) = v57;
      *(_OWORD *)(v61 + 48) = v70;
      *(void *)(v61 + 64) = v59;
      unint64_t v2 = swift_task_alloc();
      *(void *)(v0 + 320) = v2;
      *(void *)unint64_t v2 = v0;
      *(void *)(v2 + 8) = sub_1008895C8;
      return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
    }
    uint64_t v31 = v28 + 56;
    unint64_t v32 = *(void *)(v28 + 56 + 8 * v29);
    ++v20;
    if (!v32)
    {
      int64_t v20 = v29 + 1;
      if (v29 + 1 >= v30) {
        goto LABEL_49;
      }
      unint64_t v32 = *(void *)(v31 + 8 * v20);
      if (!v32)
      {
        int64_t v20 = v29 + 2;
        if (v29 + 2 >= v30) {
          goto LABEL_49;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v20);
        if (!v32) {
          break;
        }
      }
    }
LABEL_40:
    unint64_t v24 = (v32 - 1) & v32;
    unint64_t v27 = __clz(__rbit64(v32)) + (v20 << 6);
LABEL_41:
    *(void *)(v0 + 272) = v20;
    *(void *)(v0 + 280) = v24;
    uint64_t v34 = *(void *)(v0 + 144);
    uint64_t v35 = *(void *)(v0 + 152);
    uint64_t v36 = *(void *)(v0 + 120);
    sub_10089C594(*(void *)(v28 + 48) + *(void *)(v35 + 72) * v27, v36, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34) == 1) {
      goto LABEL_50;
    }
    uint64_t v37 = *(void *)(v0 + 248);
    sub_1008AB368(*(void *)(v0 + 120), *(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (*(void *)(v37 + 16) && (unint64_t v38 = sub_1007245E4(*(void *)(v0 + 176)), (v39 & 1) != 0))
    {
      uint64_t v40 = *(void *)(v0 + 80);
      uint64_t v41 = *(void *)(v0 + 88);
      uint64_t v42 = *(void *)(v0 + 72);
      uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16);
      v43(v42, *(void *)(*(void *)(v0 + 248) + 56) + *(void *)(v41 + 72) * v38, v40);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v40) != 1)
      {
        uint64_t v45 = *(void *)(v0 + 168);
        uint64_t v44 = *(void *)(v0 + 176);
        uint64_t v65 = v45;
        uint64_t v66 = *(void *)(v0 + 160);
        uint64_t v47 = *(void *)(v0 + 104);
        unint64_t v46 = *(void *)(v0 + 112);
        uint64_t v48 = *(void *)(v0 + 88);
        uint64_t v63 = *(void *)(v0 + 96);
        uint64_t v64 = *(void *)(v0 + 152);
        uint64_t v49 = *(void *)(v0 + 80);
        uint64_t v67 = *(void *)(v0 + 40);
        uint64_t v68 = *(void *)(v0 + 64);
        uint64_t v69 = *(void *)(v0 + 32);
        uint64_t v50 = *(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 32);
        v50(v46, *(void *)(v0 + 72), v49);
        v43(v47, v46, v49);
        sub_10089C594(v44, v45, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        unint64_t v51 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
        unint64_t v52 = (v63 + *(unsigned __int8 *)(v64 + 80) + v51) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
        uint64_t v53 = swift_allocObject();
        *(void *)(v0 + 288) = v53;
        v50(v53 + v51, v47, v49);
        sub_1008AB368(v65, v53 + v52, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        *(void *)(v53 + ((v66 + v52 + 7) & 0xFFFFFFFFFFFFFFF8)) = v67;
        UUID.init()();
        id v54 = (void *)swift_task_alloc();
        *(void *)(v0 + 296) = v54;
        v54[2] = v68;
        v54[3] = &unk_101650578;
        v54[4] = v53;
        v54[5] = v69;
        v54[6] = v44;
        unint64_t v55 = (void *)swift_task_alloc();
        *(void *)(v0 + 304) = v55;
        *unint64_t v55 = v0;
        v55[1] = sub_100888E70;
        return withCheckedContinuation<A>(isolation:function:_:)(v55, 0, 0, 0xD000000000000027, 0x80000001014096D0, sub_1008AAC90, v54, (char *)&type metadata for () + 8);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 72), 1, 1, *(void *)(v0 + 80));
    }
    uint64_t v25 = *(void *)(v0 + 72);
    sub_1008AA93C(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    unint64_t v2 = sub_10001DAB4(v25, &qword_101649E40);
  }
  int64_t v33 = v29 + 3;
  if (v33 >= v30) {
    goto LABEL_49;
  }
  unint64_t v32 = *(void *)(v31 + 8 * v33);
  if (v32)
  {
    int64_t v20 = v33;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v20 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v20 >= v30) {
      goto LABEL_49;
    }
    unint64_t v32 = *(void *)(v31 + 8 * v20);
    ++v33;
    if (v32) {
      goto LABEL_40;
    }
  }
LABEL_59:
  __break(1u);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_100888E70()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100888F88, 0, 0);
}

uint64_t sub_100888F88()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  int64_t v8 = (void *)sub_1008AA93C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  int64_t v9 = *(void *)(v0 + 272);
  unint64_t v10 = *(void *)(v0 + 280);
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      uint64_t v14 = *(void *)(v0 + 264);
      goto LABEL_20;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return withTaskGroup<A, B>(of:returning:isolation:body:)(v8);
    }
    int64_t v16 = (unint64_t)((1 << *(unsigned char *)(v0 + 336)) + 63) >> 6;
    uint64_t v14 = *(void *)(v0 + 264);
    if (v15 >= v16) {
      goto LABEL_28;
    }
    uint64_t v17 = v14 + 56;
    unint64_t v18 = *(void *)(v14 + 56 + 8 * v15);
    ++v9;
    if (v18) {
      goto LABEL_19;
    }
    int64_t v9 = v15 + 1;
    if (v15 + 1 >= v16) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v17 + 8 * v9);
    if (v18) {
      goto LABEL_19;
    }
    int64_t v9 = v15 + 2;
    if (v15 + 2 >= v16) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v17 + 8 * v9);
    if (v18) {
      goto LABEL_19;
    }
    int64_t v19 = v15 + 3;
    if (v19 >= v16)
    {
LABEL_28:
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56))(*(void *)(v0 + 120), 1, 1, *(void *)(v0 + 144));
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void *)(v0 + 256);
      long long v55 = *(_OWORD *)(v0 + 224);
      uint64_t v44 = *(void *)(v0 + 208);
      uint64_t v43 = *(void *)(v0 + 216);
      uint64_t v46 = *(void *)(v0 + 32);
      uint64_t v45 = *(void *)(v0 + 40);
      uint64_t v47 = swift_task_alloc();
      *(void *)(v0 + 312) = v47;
      *(void *)(v47 + 16) = v42;
      *(void *)(v47 + 24) = v46;
      *(void *)(v47 + 32) = v44;
      *(void *)(v47 + 40) = v43;
      *(_OWORD *)(v47 + 48) = v55;
      *(void *)(v47 + 64) = v45;
      int64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v8;
      *int64_t v8 = v0;
      v8[1] = sub_1008895C8;
      return withTaskGroup<A, B>(of:returning:isolation:body:)(v8);
    }
    unint64_t v18 = *(void *)(v17 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v9 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_33;
        }
        if (v9 >= v16) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v17 + 8 * v9);
        ++v19;
        if (v18) {
          goto LABEL_19;
        }
      }
    }
    int64_t v9 = v19;
LABEL_19:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_20:
    *(void *)(v0 + 272) = v9;
    *(void *)(v0 + 280) = v10;
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 120);
    sub_10089C594(*(void *)(v14 + 48) + *(void *)(v21 + 72) * v13, v22, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1) {
      goto LABEL_29;
    }
    uint64_t v23 = *(void *)(v0 + 248);
    sub_1008AB368(*(void *)(v0 + 120), *(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (!*(void *)(v23 + 16) || (unint64_t v24 = sub_1007245E4(*(void *)(v0 + 176)), (v25 & 1) == 0))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 72), 1, 1, *(void *)(v0 + 80));
      goto LABEL_3;
    }
    uint64_t v26 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 72);
    int64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16);
    v29(v28, *(void *)(*(void *)(v0 + 248) + 56) + *(void *)(v27 + 72) * v24, v26);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) != 1) {
      break;
    }
LABEL_3:
    uint64_t v11 = *(void *)(v0 + 72);
    sub_1008AA93C(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    int64_t v8 = (void *)sub_10001DAB4(v11, &qword_101649E40);
  }
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v51 = v31;
  uint64_t v52 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 104);
  unint64_t v32 = *(void *)(v0 + 112);
  uint64_t v34 = *(void *)(v0 + 88);
  uint64_t v49 = *(void *)(v0 + 96);
  uint64_t v50 = *(void *)(v0 + 152);
  uint64_t v35 = *(void *)(v0 + 80);
  uint64_t v57 = *(void *)(v0 + 64);
  uint64_t v53 = *(void *)(v0 + 40);
  uint64_t v54 = *(void *)(v0 + 32);
  uint64_t v36 = *(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32);
  v36(v32, *(void *)(v0 + 72), v35);
  v29(v33, v32, v35);
  sub_10089C594(v30, v31, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  unint64_t v37 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v38 = (v49 + *(unsigned __int8 *)(v50 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v0 + 288) = v39;
  v36(v39 + v37, v33, v35);
  sub_1008AB368(v51, v39 + v38, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  *(void *)(v39 + ((v52 + v38 + 7) & 0xFFFFFFFFFFFFFFF8)) = v53;
  UUID.init()();
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v40;
  v40[2] = v57;
  v40[3] = &unk_101650578;
  v40[4] = v39;
  v40[5] = v54;
  v40[6] = v30;
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_100888E70;
  return withCheckedContinuation<A>(isolation:function:_:)(v41, 0, 0, 0xD000000000000027, 0x80000001014096D0, sub_1008AAC90, v40, (char *)&type metadata for () + 8);
}

uint64_t sub_1008895C8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1008896FC, 0, 0);
}

uint64_t sub_1008896FC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v1;
  void *v1 = v0;
  v1[1] = sub_10088978C;
  return sub_100886D50();
}

uint64_t sub_10088978C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100889888, 0, 0);
}

uint64_t sub_100889888()
{
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = mach_continuous_time();
  BOOL v4 = v3 >= v2;
  Swift::UInt64 v5 = v3 - v2;
  if (v4)
  {
    Swift::UInt64 v0 = convertToNanoseconds(_:)(v5);
    if (qword_101636DA8 == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_101650178);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    double v9 = (double)v0 / 1000000.0;
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 134217984;
    *(double *)(v1 + 24) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "validateKeys duration: %f ms", v10, 0xCu);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v1 + 8);
  return v11();
}

uint64_t sub_100889A7C()
{
  uint64_t v0 = type metadata accessor for BeaconIdentifier();
  uint64_t v106 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  Swift::UInt64 v5 = (char *)&v97 - v4;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  v120 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v123 = (char *)&v97 - v9;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v128 = *(void *)(v137 - 8);
  uint64_t v10 = __chkstk_darwin(v137);
  v112 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v113 = (char *)&v97 - v12;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v124 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v119 = (char *)&v97 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v110 = (char *)&v97 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v134 = (char *)&v97 - v22;
  __chkstk_darwin(v21);
  v117 = (char *)&v97 - v23;
  uint64_t v24 = sub_10000588C(&qword_101649E40);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  v107 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  v111 = (char *)&v97 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v125 = (char *)&v97 - v30;
  __chkstk_darwin(v29);
  unint64_t v32 = (char *)&v97 - v31;
  uint64_t v115 = type metadata accessor for DirectorySequence();
  uint64_t v33 = *(void *)(v115 - 8);
  uint64_t v34 = __chkstk_darwin(v115);
  v121 = (char *)&v97 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  unint64_t v37 = (char *)&v97 - v36;
  id v116 = [self defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)();
  v127 = v37;
  DirectorySequence.next()();
  unint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v126 = v32;
  v135 = v38;
  uint64_t v136 = v14 + 48;
  if (v38(v32, 1, v13) != 1)
  {
    v103 = v5;
    v105 = v3;
    uint64_t v101 = v0;
    uint64_t v98 = v14;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v41 = v14 + 32;
    v131 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
    v132 = v42;
    v129 = (void (**)(char *, char *, uint64_t))(v41 - 16);
    v130 = (void (**)(char *, uint64_t))(v41 - 24);
    v109 = (void (**)(char *, uint64_t, uint64_t))(v128 + 32);
    v100 = (void (**)(char *, char *, uint64_t))(v128 + 16);
    v102 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 24);
    uint64_t v133 = v41;
    uint64_t v97 = v41 + 8;
    v108 = (void (**)(char *, uint64_t))(v128 + 8);
    v104 = (void (**)(char *, uint64_t))(v33 + 8);
    v114 = _swiftEmptyDictionarySingleton;
    *(void *)&long long v39 = 136315138;
    long long v122 = v39;
    v118 = (char *)&type metadata for Any + 8;
    uint64_t v43 = (uint64_t)v123;
    uint64_t v44 = v117;
    uint64_t v45 = v125;
    uint64_t v128 = v33;
    v42(v117, v126, v13);
    while (1)
    {
      URL.lastPathComponent.getter();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = *v131;
      if ((*v131)(v43, 1, v137) != 1) {
        break;
      }
      sub_10001DAB4(v43, &qword_101638CF0);
      if (qword_101636DA8 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_100010324(v50, (uint64_t)qword_101650178);
      uint64_t v51 = v124;
      (*v129)(v124, v44, v13);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        v138 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = v122;
        sub_1008AAC94((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v54 + 4) = sub_1008FA0F0(v55, v56, (uint64_t *)&v138);
        swift_bridgeObjectRelease();
        uint64_t v46 = *v130;
        (*v130)(v51, v13);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Skipping unexpected folder: %s", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy();
        uint64_t v45 = v125;
        swift_slowDealloc();
        uint64_t v43 = (uint64_t)v123;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v46 = *v130;
        (*v130)(v51, v13);
      }
      v46(v44, v13);
      uint64_t v47 = v126;
      DirectorySequence.next()();
      int v48 = v135(v47, 1, v13);
      uint64_t v33 = v128;
      if (v48 == 1) {
        goto LABEL_3;
      }
LABEL_7:
      v132(v44, v47, v13);
    }
    v99 = *v109;
    v99(v113, v43, v137);
    NSFileManager.flatSequence(at:includingPropertiesForKeys:)();
    while (1)
    {
      DirectorySequence.next()();
      if (v135(v45, 1, v13) == 1)
      {
LABEL_43:
        (*v104)(v121, v115);
        (*v108)(v113, v137);
        (*v130)(v44, v13);
        uint64_t v47 = v126;
        DirectorySequence.next()();
        if (v135(v47, 1, v13) != 1) {
          goto LABEL_7;
        }
        goto LABEL_3;
      }
      while (1)
      {
        v132(v134, v45, v13);
        URL.lastPathComponent.getter();
        uint64_t v59 = (uint64_t)v120;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if (v49(v59, 1, v137) != 1) {
          break;
        }
        sub_10001DAB4(v59, &qword_101638CF0);
        if (qword_101636DA8 != -1) {
          swift_once();
        }
        uint64_t v60 = type metadata accessor for Logger();
        sub_100010324(v60, (uint64_t)qword_101650178);
        uint64_t v61 = v119;
        (*v129)(v119, v134, v13);
        long long v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = swift_slowAlloc();
          v138 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = v122;
          sub_1008AAC94((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v64 + 4) = sub_1008FA0F0(v65, v66, (uint64_t *)&v138);
          swift_bridgeObjectRelease();
          uint64_t v67 = *v130;
          (*v130)(v61, v13);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Skipping unexpected folder: %s", (uint8_t *)v64, 0xCu);
          swift_arrayDestroy();
          uint64_t v68 = v134;
          uint64_t v44 = v117;
          swift_slowDealloc();
          uint64_t v43 = (uint64_t)v123;
          swift_slowDealloc();

          v67(v68, v13);
        }
        else
        {

          uint64_t v57 = *v130;
          (*v130)(v61, v13);
          v57(v134, v13);
        }
        uint64_t v45 = v125;
        DirectorySequence.next()();
        int v58 = v135(v45, 1, v13);
        uint64_t v33 = v128;
        if (v58 == 1) {
          goto LABEL_43;
        }
      }
      uint64_t v69 = v112;
      uint64_t v70 = v137;
      v99(v112, v59, v137);
      uint64_t v71 = *v100;
      uint64_t v72 = (uint64_t)v103;
      (*v100)(v103, v113, v70);
      v71((char *)(v72 + *(int *)(v101 + 20)), v69, v70);
      uint64_t v73 = (uint64_t)v105;
      sub_10089C594(v72, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v74 = (uint64_t)v111;
      (*v129)(v111, v134, v13);
      uint64_t v75 = *v102;
      (*v102)(v74, 0, 1, v13);
      if (v135((char *)v74, 1, v13) != 1) {
        break;
      }
      sub_10001DAB4(v74, &qword_101649E40);
      uint64_t v76 = (uint64_t)v114;
      swift_bridgeObjectRetain();
      unint64_t v77 = sub_1007245E4(v73);
      char v79 = v78;
      swift_bridgeObjectRelease();
      if (v79)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v138 = (void *)v76;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100E85454();
          uint64_t v76 = (uint64_t)v138;
        }
        sub_1008AA93C(*(void *)(v76 + 48) + *(void *)(v106 + 72) * v77, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        uint64_t v81 = (uint64_t)v107;
        v132(v107, (char *)(*(void *)(v76 + 56) + *(void *)(v98 + 72) * v77), v13);
        v114 = (void *)v76;
        sub_10016995C(v77, v76);
        swift_bridgeObjectRelease();
        uint64_t v82 = 0;
      }
      else
      {
        uint64_t v82 = 1;
        uint64_t v81 = (uint64_t)v107;
      }
      v75(v81, v82, 1, v13);
      sub_1008AA93C((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_10001DAB4(v81, &qword_101649E40);
      uint64_t v43 = (uint64_t)v123;
      uint64_t v45 = v125;
LABEL_42:
      sub_1008AA93C((uint64_t)v103, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      (*v108)(v112, v137);
      (*v130)(v134, v13);
    }
    v132(v110, (char *)v74, v13);
    uint64_t v83 = (uint64_t)v114;
    int v84 = swift_isUniquelyReferenced_nonNull_native();
    v138 = (void *)v83;
    unint64_t v86 = sub_1007245E4(v73);
    uint64_t v87 = *(void *)(v83 + 16);
    BOOL v88 = (v85 & 1) == 0;
    uint64_t v89 = v87 + v88;
    if (__OFADD__(v87, v88))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v90 = v85;
    if (*(void *)(v83 + 24) < v89)
    {
      sub_100E73F94(v89, v84);
      unint64_t v91 = sub_1007245E4((uint64_t)v105);
      if ((v90 & 1) != (v92 & 1)) {
        goto LABEL_47;
      }
      unint64_t v86 = v91;
      v93 = v138;
      if ((v90 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_37:
      (*(void (**)(unint64_t, char *, uint64_t))(v98 + 40))(v93[7] + *(void *)(v98 + 72) * v86, v110, v13);
LABEL_41:
      uint64_t v43 = (uint64_t)v123;
      uint64_t v45 = v125;
      v114 = v138;
      swift_bridgeObjectRelease();
      sub_1008AA93C((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      goto LABEL_42;
    }
    if (v84)
    {
      v93 = v138;
      if (v85) {
        goto LABEL_37;
      }
    }
    else
    {
      sub_100E85454();
      v93 = v138;
      if (v90) {
        goto LABEL_37;
      }
    }
LABEL_39:
    v93[(v86 >> 6) + 8] |= 1 << v86;
    sub_10089C594((uint64_t)v105, v93[6] + *(void *)(v106 + 72) * v86, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v132((char *)(v93[7] + *(void *)(v98 + 72) * v86), v110, v13);
    uint64_t v94 = v93[2];
    BOOL v95 = __OFADD__(v94, 1);
    uint64_t v96 = v94 + 1;
    if (v95) {
      goto LABEL_46;
    }
    v93[2] = v96;
    goto LABEL_41;
  }
  v114 = _swiftEmptyDictionarySingleton;
LABEL_3:
  (*(void (**)(char *, uint64_t))(v33 + 8))(v127, v115);

  return (uint64_t)v114;
}

uint64_t sub_10088AB9C(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = type metadata accessor for BeaconIdentifier();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_10088AC9C, 0, 0);
}

uint64_t sub_10088AC9C()
{
  uint64_t v33 = v0;
  id v1 = [self defaultManager];
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  if (v3)
  {
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v10 = v0[8];
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_101650178);
    sub_10089C594(v9, v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_10089C594(v9, v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = v0[14];
    uint64_t v15 = v0[15];
    if (v14)
    {
      uint64_t v30 = v0[12];
      uint64_t v31 = v0[11];
      uint64_t v29 = v0[10];
      uint64_t v17 = swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141559043;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v18, v19, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008AA93C(v15, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v17 + 22) = 2160;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 32) = 2081;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_1008FA0F0(v20, v21, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008AA93C(v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v17 + 42) = 2080;
      sub_1008AAC94((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v22, v23, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v29);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Purging KeyMaps for %{private,mask.hash}s/%{private,mask.hash}s: %s", (uint8_t *)v17, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v25 = v0[11];
      uint64_t v24 = v0[12];
      uint64_t v26 = v0[10];
      sub_1008AA93C(v0[15], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_1008AA93C(v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    sub_10001D4B0(0, (unint64_t *)&qword_101642980);
    static NSFileManager.removeDirectory(url:)();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_10088B2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a8;
  v8[16] = v12;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  v8[9] = a2;
  v8[10] = a3;
  uint64_t v9 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  v8[17] = v9;
  v8[18] = *(void *)(v9 + 64);
  v8[19] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  return _swift_task_switch(sub_10088B3F8, 0, 0);
}

uint64_t sub_10088B3F8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + ((v4 + 32) & ~v4);
    uint64_t v33 = (v4 + 40) & ~v4;
    uint64_t v34 = *(void *)(v3 + 72);
    unint64_t v32 = (*(void *)(v0 + 144) + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v6 = type metadata accessor for TaskPriority();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v26 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v36 = v2;
      uint64_t v9 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 168);
      uint64_t v11 = *(void *)(v0 + 152);
      uint64_t v38 = *(void *)(v0 + 120);
      uint64_t v39 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 104);
      uint64_t v37 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 88);
      uint64_t v14 = *(void *)(v0 + 96);
      v28(v10, 1, 1, v6);
      uint64_t v35 = v5;
      sub_10089C594(v5, v11, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = 0;
      uint64_t v16 = v15 + 2;
      v15[3] = 0;
      v15[4] = v13;
      sub_1008AB368(v11, (uint64_t)v15 + v33, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      *(void *)((char *)v15 + v32) = v14;
      *(void *)((char *)v15 + v31) = v12;
      *(void *)((char *)v15 + v30) = v37;
      *(void *)((char *)v15 + v29) = v38;
      *(void *)((char *)v15 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8)) = v39;
      sub_10001D074(v10, v9, &qword_10164DBB0);
      LODWORD(v9) = (*v27)(v9, 1, v6);
      swift_retain();
      uint64_t v17 = *(void *)(v0 + 160);
      if (v9 == 1)
      {
        sub_10001DAB4(*(void *)(v0 + 160), &qword_10164DBB0);
        if (!*v16) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v26)(v17, v6);
        if (!*v16)
        {
LABEL_8:
          uint64_t v18 = 0;
          uint64_t v20 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v20 = v19;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v21 = **(void **)(v0 + 72);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = &unk_1016505D8;
      *(void *)(v22 + 24) = v15;
      uint64_t v23 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v23 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v18;
        *(void *)(v0 + 40) = v20;
      }
      uint64_t v8 = *(void *)(v0 + 168);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v23;
      *(void *)(v0 + 64) = v21;
      swift_task_create();
      swift_release();
      sub_10001DAB4(v8, &qword_10164DBB0);
      uint64_t v5 = v35 + v34;
      uint64_t v2 = v36 - 1;
      if (v36 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10088B7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v13;
  v8[8] = v14;
  void v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[9] = v9;
  v8[10] = *(void *)(v9 - 8);
  v8[11] = swift_task_alloc();
  uint64_t v10 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  v8[12] = v10;
  v8[13] = *(void *)(v10 + 64);
  v8[14] = swift_task_alloc();
  type metadata accessor for BeaconIdentifier();
  v8[15] = swift_task_alloc();
  return _swift_task_switch(sub_10088B938, 0, 0);
}

uint64_t sub_10088B938()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v20 = v0[11];
  uint64_t v21 = v0[15];
  uint64_t v18 = v0[7];
  uint64_t v19 = v0[8];
  uint64_t v16 = v0[5];
  uint64_t v17 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v15 = v0[4];
  uint64_t v5 = v0[2];
  sub_10089C594(v4, v21, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_10089C594(v4, v1, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v7 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  v0[16] = v11;
  *(void *)(v11 + 16) = v5;
  sub_1008AB368(v1, v11 + v6, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  *(void *)(v11 + v7) = v15;
  *(void *)(v11 + v8) = v16;
  *(void *)(v11 + v9) = v17;
  *(void *)(v11 + v10) = v18;
  *(void *)(v11 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_retain();
  UUID.init()();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[17] = v12;
  v12[2] = v20;
  v12[3] = &unk_1016505E8;
  v12[4] = v11;
  v12[5] = v5;
  v12[6] = v21;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[18] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10088BB80;
  return withCheckedContinuation<A>(isolation:function:_:)(v13, 0, 0, 0xD000000000000027, 0x80000001014096D0, sub_1008AAC90, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_10088BB80()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10088BC98, 0, 0);
}

uint64_t sub_10088BC98()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1008AA93C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10088BD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  uint64_t v8 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  v6[12] = v8;
  v6[13] = *(void *)(v8 + 64);
  v6[14] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v6[15] = swift_task_alloc();
  unint64_t v9 = (void *)swift_task_alloc();
  v6[16] = v9;
  *unint64_t v9 = v6;
  v9[1] = sub_10088BE94;
  return sub_10088CB84(a2);
}

uint64_t sub_10088BE94()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10088C998;
  }
  else {
    uint64_t v2 = sub_10088BFA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10088BFA8()
{
  if (v0[9]) {
    BOOL v1 = v0[8] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10088C058;
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    sub_1008AFBD0(v4, 1, v3);
  }
}

uint64_t sub_10088C058(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 25) = a1;
  *(void *)(v3 + 152) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10088C7AC;
  }
  else {
    uint64_t v4 = sub_10088C170;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10088C170()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  static TaskPriority.background.getter();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v1, 0, 1, v9);
  sub_10089C594(v8, v2, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v7;
  sub_1008AB368(v2, (uint64_t)v12 + v10, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  *(void *)((char *)v12 + v11) = v6;
  *(void *)((char *)v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_retain();
  uint64_t v13 = sub_100885ED8(v1, (uint64_t)&unk_101650608, (uint64_t)v12);
  v0[20] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[21] = v14;
  uint64_t v15 = sub_10000588C(&qword_101638D40);
  v0[22] = v15;
  *uint64_t v14 = v0;
  v14[1] = sub_10088C370;
  return Task.result.getter(v0 + 2, v13, &type metadata for Bool, v15, &protocol self-conformance witness table for Error);
}

uint64_t sub_10088C370()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10088C488, 0, 0);
}

uint64_t sub_10088C488()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    *(void *)(v0 + 40) = v1;
    swift_willThrowTypedImpl();
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_101650178);
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      uint64_t v7 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 32) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error during perform: %@", v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      goto LABEL_12;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_101650178);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v9))
    {
      int v10 = *(unsigned __int8 *)(v0 + 25);
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109376;
      *(_DWORD *)(v0 + 28) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 1024;
      *(_DWORD *)(v0 + 184) = v1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v9, "lowPriorityModified: %{BOOL}d highPriorityModified: %{BOOL}d", (uint8_t *)v11, 0xEu);
      swift_slowDealloc();
    }
  }

LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10088C7AC()
{
  if (qword_101636DA8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101650178);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during perform: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10088C998()
{
  if (qword_101636DA8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101650178);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during perform: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10088CB84(uint64_t a1)
{
  void v2[6] = a1;
  v2[7] = v1;
  v2[8] = type metadata accessor for KeyGenerationBeaconInfo();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10088CCEC, 0, 0);
}

uint64_t sub_10088CCEC()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconIdentifier();
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  os_log_type_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[19] = v4;
  v0[20] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v3);
  URL.appendingPathComponent(_:)();
  if (qword_101636DA8 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v7 = v0[6];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_101650178);
  sub_10089C594(v7, v5, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  sub_10089C594(v7, v6, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v0[9];
  uint64_t v12 = v0[10];
  if (v11)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558787;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1008AA93C(v12, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    *(_WORD *)(v14 + 22) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 32) = 2081;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1008AA93C(v13, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Verify file integrity for %{private,mask.hash}s/%{private,mask.hash}s", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1008AA93C(v0[10], (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    sub_1008AA93C(v13, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  }
  v0[21] = sub_10001D4B0(0, (unint64_t *)&qword_101642980);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[22] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10088D180;
  uint64_t v20 = v0[16];
  return sub_1008AC63C(v20);
}

uint64_t sub_10088D180()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10088D504;
  }
  else {
    uint64_t v2 = sub_10088D294;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10088D294()
{
  uint64_t v1 = v0[6] + *(int *)(v0[8] + 24);
  if (*(void *)(v1 + 8) >> 60 == 15 || *(void *)(v1 + 40) >> 60 == 15)
  {
    uint64_t v2 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:)();
    uint64_t v2 = 0;
  }
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  sub_10001D074(v5, v6, &qword_101649E40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[19];
    uint64_t v8 = v0[18];
    uint64_t v9 = v0[16];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[11];
    sub_10001DAB4(v0[12], &qword_101649E40);
    v7(v9, v10);
    v7(v8, v10);
    sub_10001DAB4(v11, &qword_101649E40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[14] + 32))(v0[15], v0[11], v0[13]);
    static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[24] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10088D5FC;
    uint64_t v15 = v0[15];
    return sub_1008AC63C(v15);
  }
}

uint64_t sub_10088D504()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[13];
  v1(v0[16], v3);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10088D5FC()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10088D810;
  }
  else {
    uint64_t v2 = sub_10088D710;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10088D710()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  v1(v0[15], v4);
  sub_10001DAB4(v5, &qword_101649E40);
  v1(v3, v4);
  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10088D810()
{
  uint64_t v1 = *(void *)(v0 + 96);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  sub_10001DAB4(v1, &qword_101649E40);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 104);
  v2(*(void *)(v0 + 128), v4);
  v2(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10088D928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10088D950, 0, 0);
}

void sub_10088D950()
{
  if (v0[6]) {
    BOOL v1 = v0[5] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10088DA00;
    uint64_t v4 = v0[4];
    uint64_t v3 = v0[5];
    sub_1008AFBD0(v4, 1, v3);
  }
}

uint64_t sub_10088DA00(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 64) = a1 & 1;
    return _swift_task_switch(sub_10088DB50, 0, 0);
  }
}

uint64_t sub_10088DB50()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10088DB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  sub_10000588C(&qword_10164DBB0);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  sub_10000588C(&qword_1016506C0);
  v5[23] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_101657910);
  v5[24] = v8;
  v5[25] = *(void *)(v8 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_1016506C8);
  v5[30] = v9;
  v5[31] = *(void *)(v9 - 8);
  v5[32] = swift_task_alloc();
  return _swift_task_switch(sub_10088DDA8, a3, 0);
}

uint64_t sub_10088DDA8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v35 = v2 + 64;
  int64_t v34 = *(void *)(v2 + 16);
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v2 + 64);
  int64_t v36 = (unint64_t)(63 - v4) >> 6;
  uint64_t v37 = v2;
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v39 = (v5 - 1) & v5;
      int64_t v38 = v9;
      unint64_t v11 = __clz(__rbit64(v5)) | (v9 << 6);
      goto LABEL_23;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return _swift_task_switch(v6, v7, v8);
    }
    if (v12 >= v36) {
      goto LABEL_31;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    int64_t v14 = v9 + 1;
    if (!v13)
    {
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v36) {
        goto LABEL_31;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v9 + 3;
        if (v9 + 3 >= v36) {
          goto LABEL_31;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 4;
          if (v9 + 4 >= v36) {
            goto LABEL_31;
          }
          unint64_t v13 = *(void *)(v35 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v39 = (v13 - 1) & v13;
    int64_t v38 = v14;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v20 = *(void *)(*(void *)(v37 + 56) + 8 * v11);
    uint64_t v21 = type metadata accessor for TaskPriority();
    uint64_t v22 = *(void *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v19;
    v23[5] = v18;
    v23[6] = v20;
    sub_10001D074(v16, v17, &qword_10164DBB0);
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v17, 1, v21);
    swift_retain_n();
    sub_1001A1790(v19, v18);
    uint64_t v24 = *(void *)(v0 + 136);
    if (v16 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 136), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    }
    int64_t v9 = v38;
    if (v23[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v25 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v27 = v26;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v27 = 0;
    }
    uint64_t v28 = **(void **)(v0 + 104);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = &unk_1016506D8;
    *(void *)(v29 + 24) = v23;
    uint64_t v30 = v27 | v25;
    if (v27 | v25)
    {
      uint64_t v30 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v25;
      *(void *)(v0 + 40) = v27;
    }
    uint64_t v10 = *(void *)(v0 + 144);
    *(void *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = v30;
    *(void *)(v0 + 88) = v28;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v6 = sub_10001DAB4(v10, &qword_10164DBB0);
    unint64_t v5 = v39;
  }
  uint64_t v15 = v9 + 5;
  if (v9 + 5 < v36)
  {
    unint64_t v13 = *(void *)(v35 + 8 * v15);
    if (!v13)
    {
      while (1)
      {
        int64_t v14 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_35;
        }
        if (v14 >= v36) {
          goto LABEL_31;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v14);
        ++v15;
        if (v13) {
          goto LABEL_22;
        }
      }
    }
    int64_t v14 = v9 + 5;
    goto LABEL_22;
  }
LABEL_31:
  unint64_t v31 = *(void **)(v0 + 104);
  swift_release();
  *(void *)(v0 + 264) = sub_100A71A8C(0, v34, 0, (unint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 272) = *v31;
  uint64_t v32 = swift_bridgeObjectRetain();
  *(void *)(v0 + 280) = sub_100A9CE38(v32);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)sub_10088E228;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10088E228()
{
  TaskGroup.makeAsyncIterator()();
  v0[36] = v0[35];
  uint64_t v1 = sub_100062734(&qword_1016506F0, &qword_1016506C8);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[37] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10088E310;
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[23];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v3, v1);
}

uint64_t sub_10088E310()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[31];
    uint64_t v3 = v2[32];
    uint64_t v5 = v2[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = (uint64_t (*)())SharingCircleWildAdvertisementKey.init(key:);
  }
  else
  {
    uint64_t v6 = sub_10088E450;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10088E450()
{
  uint64_t v1 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[25] + 48))(v1, 1, v0[24]) == 1)
  {
    uint64_t v2 = v0[14];
    (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
    sub_10001DAB4(v1, &qword_1016506C0);
    return _swift_task_switch(sub_10088E698, v2, 0);
  }
  else
  {
    uint64_t v4 = v0[28];
    uint64_t v3 = v0[29];
    sub_10001D608(v1, v3, &qword_101657910);
    sub_10001D074(v3, v4, &qword_101657910);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v6 = v0[36];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v6 = sub_100A71AC0(0, *(void *)(v6 + 16) + 1, 1, v0[36]);
    }
    unint64_t v8 = *(void *)(v6 + 16);
    unint64_t v7 = *(void *)(v6 + 24);
    if (v8 >= v7 >> 1) {
      unint64_t v6 = sub_100A71AC0(v7 > 1, v8 + 1, 1, v6);
    }
    uint64_t v9 = v0[28];
    uint64_t v10 = v0[29];
    uint64_t v11 = v0[25];
    *(void *)(v6 + 16) = v8 + 1;
    sub_10001D608(v9, v6+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v8, &qword_101657910);
    sub_10001DAB4(v10, &qword_101657910);
    v0[36] = v6;
    uint64_t v12 = sub_100062734(&qword_1016506F0, &qword_1016506C8);
    unint64_t v13 = (void *)swift_task_alloc();
    v0[37] = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_10088E310;
    uint64_t v14 = v0[30];
    uint64_t v15 = v0[23];
    return dispatch thunk of AsyncIteratorProtocol.next()(v15, v14, v12);
  }
}

uint64_t sub_10088E698()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    uint64_t v19 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    unint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(void *)(v0 + 208);
      uint64_t v7 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 152);
      sub_10001D074(v4, v7, &qword_101657910);
      sub_10001D608(v7, v8, &qword_101657910);
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v8, 1, v9);
      uint64_t v11 = *(void *)(v0 + 208);
      if (v10 == 1)
      {
        sub_10001DAB4(v11, &qword_101657910);
      }
      else
      {
        uint64_t v13 = *(void *)(v0 + 168);
        uint64_t v12 = *(void *)(v0 + 176);
        sub_1008AB368(v11, v12, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_1008AB368(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v6 = (void *)sub_100A71A8C(0, v6[2] + 1, 1, (unint64_t)v6);
        }
        unint64_t v15 = v6[2];
        unint64_t v14 = v6[3];
        if (v15 >= v14 >> 1) {
          unint64_t v6 = (void *)sub_100A71A8C(v14 > 1, v15 + 1, 1, (unint64_t)v6);
        }
        uint64_t v16 = *(void *)(v0 + 168);
        void v6[2] = v15 + 1;
        sub_1008AB368(v16, (uint64_t)v6+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v15, type metadata accessor for BeaconKeyManager.IndexInformation);
      }
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  **(void **)(v0 + 96) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10088E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[24] = a5;
  v6[25] = a6;
  v6[22] = a1;
  v6[23] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[26] = v7;
  v6[27] = *(void *)(v7 - 8);
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  return _swift_task_switch(sub_10088EA2C, 0, 0);
}

uint64_t sub_10088EA2C()
{
  unint64_t v1 = *(void *)(v0 + 192);
  if ((v1 & 0x2000000000000000) != 0)
  {
    unint64_t v6 = (long long *)(v0 + 56);
    uint64_t v5 = (long long *)(v0 + 96);
    *(_DWORD *)(v0 + 240) = 0;
    switch(v1 >> 62)
    {
      case 1uLL:
        uint64_t v16 = *(void *)(v0 + 184);
        if (v16 >> 32 < (int)v16) {
          __break(1u);
        }
        sub_1001A1790(*(void *)(v0 + 184), v1);
        swift_retain();
        sub_1001A1790(v16, v1);
        char v17 = sub_1011DA31C((int)v16, v16 >> 32);
        goto LABEL_16;
      case 2uLL:
        uint64_t v18 = *(void *)(v0 + 184);
        uint64_t v19 = *(void *)(v18 + 16);
        uint64_t v20 = *(void *)(v18 + 24);
        sub_1001A1790(v18, v1);
        swift_retain();
        sub_1001A1790(v18, v1);
        swift_retain();
        swift_retain();
        char v17 = sub_1011DA31C(v19, v20);
        swift_release();
        swift_release();
LABEL_16:
        sub_1001A1AD8(*(void *)(v0 + 184), *(void *)(v0 + 192));
        swift_release();
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_13;
      case 3uLL:
        uint64_t v21 = *(void *)(v0 + 184);
        *(void *)(v0 + 244) = 0;
        *(void *)(v0 + 250) = 0;
        swift_retain_n();
        char v15 = sp_key_index_map_contains_key_prefix();
        sub_1001A1AD8(v21, v1);
        goto LABEL_12;
      default:
        uint64_t v14 = *(void *)(v0 + 184);
        *(void *)(v0 + 258) = v14;
        *(_WORD *)(v0 + 266) = v1;
        *(unsigned char *)(v0 + 268) = BYTE2(v1);
        *(unsigned char *)(v0 + 269) = BYTE3(v1);
        *(unsigned char *)(v0 + 270) = BYTE4(v1);
        *(unsigned char *)(v0 + 271) = BYTE5(v1);
        swift_retain_n();
        char v15 = sp_key_index_map_contains_key_prefix();
        sub_1001A1AD8(v14, v1);
LABEL_12:
        swift_release_n();
        if ((v15 & 1) == 0) {
          goto LABEL_17;
        }
LABEL_13:
        uint64_t v23 = *(void *)(v0 + 216);
        uint64_t v22 = *(void *)(v0 + 224);
        uint64_t v25 = *(void *)(v0 + 200);
        uint64_t v24 = *(void *)(v0 + 208);
        uint64_t v26 = *(unsigned int *)(v0 + 240);
        uint64_t v27 = OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier;
        uint64_t v28 = type metadata accessor for BeaconIdentifier();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25 + *(int *)(v28 + 20) + v27, v24);
        if (*(unsigned char *)(v25 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence))
        {
          if (*(unsigned char *)(v25 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) == 1)
          {
            *(void *)(v0 + 120) = &type metadata for SecondaryIndex;
            unint64_t v29 = sub_1001A15EC();
          }
          else
          {
            *(void *)(v0 + 120) = &type metadata for SecureLocationsIndex;
            unint64_t v29 = sub_1001A1598();
          }
        }
        else
        {
          *(void *)(v0 + 120) = &type metadata for PrimaryIndex;
          unint64_t v29 = sub_1001A1640();
        }
        *(void *)(v0 + 128) = v29;
        *(void *)(v0 + 96) = v26;
        uint64_t v34 = *(void *)(v0 + 224);
        break;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 184);
    sub_1000361E0(v2, *(void *)(v0 + 192));
    unint64_t v3 = sub_1011D9EB8(v2, v1);
    if ((v3 & 0x100000000) != 0)
    {
LABEL_17:
      uint64_t v30 = *(void *)(v0 + 184);
      uint64_t v31 = *(void *)(v0 + 192);
      uint64_t v32 = *(void *)(v0 + 176);
      uint64_t v33 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
      sub_1001A1AD8(v30, v31);
      goto LABEL_25;
    }
    unsigned int v4 = v3;
    uint64_t v5 = (long long *)(v0 + 16);
    unint64_t v6 = (long long *)(v0 + 136);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier;
    uint64_t v12 = type metadata accessor for BeaconIdentifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10 + *(int *)(v12 + 20) + v11, v8);
    if (*(unsigned char *)(v10 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence))
    {
      if (*(unsigned char *)(v10 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) == 1)
      {
        *(void *)(v0 + 40) = &type metadata for SecondaryIndex;
        unint64_t v13 = sub_1001A15EC();
      }
      else
      {
        *(void *)(v0 + 40) = &type metadata for SecureLocationsIndex;
        unint64_t v13 = sub_1001A1598();
      }
    }
    else
    {
      *(void *)(v0 + 40) = &type metadata for PrimaryIndex;
      unint64_t v13 = sub_1001A1640();
    }
    *(void *)(v0 + 48) = v13;
    *(void *)(v0 + 16) = v4;
    uint64_t v34 = *(void *)(v0 + 232);
  }
  uint64_t v35 = *(void *)(v0 + 208);
  uint64_t v36 = *(void *)(v0 + 216);
  uint64_t v38 = *(void *)(v0 + 184);
  uint64_t v37 = *(void *)(v0 + 192);
  uint64_t v39 = *(void *)(v0 + 176);
  sub_10001CEB0(v5, (uint64_t)v6);
  sub_1001A1AD8(v38, v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v39, v34, v35);
  uint64_t v40 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10001CEB0(v6, v39 + *(int *)(v40 + 20));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
LABEL_25:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_10088EFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a6;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v38 = a3;
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v37 = *(void *)(v35 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v8;
  uint64_t v9 = sub_10000588C(&qword_1016575E0);
  uint64_t v29 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v30 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  char v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v18;
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v33, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v9);
  sub_10089C594(v36, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v21 = (v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (*(unsigned __int8 *)(v10 + 80) + v21 + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (*(unsigned __int8 *)(v35 + 80) + v23 + 8) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25 + v20, v15, v12);
  uint64_t v26 = (void *)(v25 + v21);
  uint64_t v27 = v39;
  *uint64_t v26 = v38;
  v26[1] = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v25 + v22, v30, v29);
  *(void *)(v25 + v23) = v40;
  sub_1008AB368((uint64_t)v31, v25 + v24, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v32, (uint64_t)&unk_101650588, v25);
  return swift_release();
}

uint64_t sub_10088F3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v14;
  v8[4] = a6;
  void v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = sub_10000588C(&qword_1016575E0);
  v8[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[9] = v10;
  v8[10] = *(void *)(v10 + 64);
  v8[11] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[12] = v11;
  v8[13] = *(void *)(v11 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  return _swift_task_switch(sub_10088F528, 0, 0);
}

uint64_t sub_10088F528()
{
  uint64_t v1 = v0[16];
  uint64_t v20 = v0[15];
  uint64_t v21 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[5];
  uint64_t v19 = v0[4];
  uint64_t v17 = v0[14];
  uint64_t v18 = v0[3];
  (*(void (**)(void))(v2 + 16))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v9 + v8, v4, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v17, v3);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v18;
  *(void *)(v10 + 24) = v19;
  uint64_t v11 = (void *)(v1 + *(int *)(v20 + 20));
  *uint64_t v11 = &unk_1016505A8;
  v11[1] = v10;
  uint64_t v12 = (void *)(v1 + *(int *)(v20 + 24));
  *uint64_t v12 = &unk_101650598;
  v12[1] = v9;
  sub_1008AB368(v1, v21, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[18] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10088F71C;
  uint64_t v14 = v0[17];
  uint64_t v15 = v0[7];
  return sub_10088F950(v15, v14);
}

uint64_t sub_10088F71C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10088F818, 0, 0);
}

uint64_t sub_10088F818()
{
  sub_1008AA93C(*(void *)(v0 + 136), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10088F8C0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10088F8E0, 0, 0);
}

uint64_t sub_10088F8E0()
{
  sub_10000588C(&qword_1016575E0);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10088F950(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for BeaconIdentifier();
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  return _swift_task_switch(sub_10088F9F4, v2, 0);
}

uint64_t sub_10088F9F4()
{
  uint64_t v1 = v0[4];
  sub_10089C594(v0[2], v0[6], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (v3 && (unint64_t v4 = sub_1007245E4(v0[6]), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    uint64_t v7 = v0[5];
    sub_10089C594(v0[2], v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0);
    uint64_t v6 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v6
              + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue) = _swiftEmptyArrayStorage;
    sub_1008AB368(v7, v6+ OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_identifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }
  v0[7] = v6;
  uint64_t v8 = v0[6];
  swift_bridgeObjectRelease();
  sub_1008AA93C(v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  return _swift_task_switch(sub_10088FB5C, v6, 0);
}

uint64_t sub_10088FB5C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10088FD0C(*(void *)(v0 + 24));
  return _swift_task_switch(sub_10088FBC8, v1, 0);
}

uint64_t sub_10088FBC8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10088FC3C(uint64_t a1)
{
  return sub_10088FC48(a1, qword_101650190);
}

uint64_t sub_10088FC48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001E384(v3, a2);
  uint64_t v4 = sub_100010324(v3, (uint64_t)a2);
  if (qword_101636DB8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100010324(v3, (uint64_t)qword_10170E570);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v6(v4, v5, v3);
}

uint64_t sub_10088FD0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000588C(&qword_101650730);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v2
      + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  swift_beginAccess();
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  swift_beginAccess();
  sub_10089C594(a1, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  sub_100A25B80(0, 0, (uint64_t)v9);
  uint64_t result = swift_endAccess();
  if (!v11)
  {
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
    uint64_t v14 = sub_1008AAC94(&qword_101650740, (void (*)(uint64_t))type metadata accessor for BeaconKeyServiceBuilder.QueueWorker);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v2;
    v15[3] = v14;
    v15[4] = v2;
    swift_retain_n();
    sub_100885ED8((uint64_t)v6, (uint64_t)&unk_101650748, (uint64_t)v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_10088FF28()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_10088FFB8();
}

uint64_t sub_10088FFB8()
{
  v1[9] = v0;
  sub_10000588C(&qword_101650728);
  v1[10] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1008900A8, v0, 0);
}

uint64_t sub_1008900A8()
{
  unint64_t v24 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  v0[14] = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  uint64_t v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (v5)
  {
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[11];
    sub_10089C594(v4+ ((*(unsigned __int8 *)(v0[12] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[12] + 80))+ *(void *)(v0[12] + 72) * (v5 - 1), v6, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    uint64_t v8 = (int **)(v6 + *(int *)(v7 + 20));
    uint64_t v9 = *v8;
    v0[15] = v8[1];
    uint64_t v20 = (uint64_t (*)(void))((char *)v9 + *v9);
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[16] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10089049C;
    return v20();
  }
  else
  {
    if (qword_101636DB0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_101650190);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      type metadata accessor for UUID();
      sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v23 = v16;
      v17._countAndFlagsBits = 47;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      type metadata accessor for BeaconIdentifier();
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v0[8] = sub_1008FA0F0(v22, v23, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "process queue for %s -- no more WorkItems", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_10089049C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_release();
    uint64_t v4 = sub_100890AF4;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    uint64_t v4 = sub_1008905C4;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1008905C4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  swift_release();
  swift_beginAccess();
  sub_100885880(v2);
  sub_10001DAB4(v2, &qword_101650728);
  swift_endAccess();
  uint64_t v4 = (int **)(v1 + *(int *)(v3 + 24));
  uint64_t v5 = *v4;
  v0[18] = v4[1];
  uint64_t v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100890708;
  return v8();
}

uint64_t sub_100890708()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100890834, v1, 0);
}

uint64_t sub_100890834()
{
  if (*(void *)(*(void *)(v0[9] + v0[14]) + 16))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[20] = v1;
    void *v1 = v0;
    v1[1] = sub_10089093C;
    return sub_10088FFB8();
  }
  else
  {
    sub_1008AA93C(v0[13], type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10089093C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v4 = sub_100890B8C;
  }
  else {
    uint64_t v4 = sub_100890A68;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100890A68()
{
  sub_1008AA93C(*(void *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100890AF4()
{
  sub_1008AA93C(*(void *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100890B8C()
{
  sub_1008AA93C(*(void *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100890C24()
{
  sub_1008AA93C(v0+ OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_identifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100890C88()
{
  return type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101650348);
}

uint64_t sub_100890CB0()
{
  uint64_t result = type metadata accessor for BeaconIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100890D58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    os_log_type_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100890E44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();

  return swift_release();
}

uint64_t sub_100890ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100890F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100891024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1008910A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_100891148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10089115C);
}

uint64_t sub_10089115C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10089121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100891230);
}

uint64_t sub_100891230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.WorkItem(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101650470);
}

uint64_t sub_10089130C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1008913A8(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = type metadata accessor for BeaconIdentifier();
    v8((void *)((char *)a1 + *(int *)(v9 + 20)), (void *)((char *)a2 + *(int *)(v9 + 20)), v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1008914A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v5)((void *)(v2 - 8), a1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for BeaconIdentifier() + 20);

  return v5(v3, v2);
}

uint64_t sub_100891540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1008915EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100891698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100891744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1008917F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100891804);
}

uint64_t sub_100891804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1008918C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008918D4);
}

uint64_t sub_1008918D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BeaconIdentifier();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileKey(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101650508);
}

uint64_t sub_1008919B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008B2598(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for BeaconIdentifier);
}

uint64_t sub_1008919D0(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100030F18;
  return v4();
}

uint64_t sub_100891A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_100891B6C;
  return sub_100891CBC(a3, a4, 0, a5, a6, 1);
}

uint64_t sub_100891B6C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 32) = a1 & 1;
    return _swift_task_switch(sub_1003480C4, 0, 0);
  }
}

uint64_t sub_100891CBC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 496) = a6;
  *(void *)(v7 + 504) = v6;
  *(void *)(v7 + 480) = a4;
  *(void *)(v7 + 488) = a5;
  *(unsigned char *)(v7 + 988) = a3;
  *(void *)(v7 + 464) = a1;
  *(void *)(v7 + 472) = a2;
  uint64_t v8 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0);
  *(void *)(v7 + 512) = v8;
  *(void *)(v7 + 520) = *(void *)(v8 - 8);
  *(void *)(v7 + 528) = swift_task_alloc();
  *(void *)(v7 + 536) = type metadata accessor for KeyGenerationBeaconInfo();
  *(void *)(v7 + 544) = swift_task_alloc();
  sub_10000588C(&qword_101650630);
  *(void *)(v7 + 552) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DirectorySequence();
  *(void *)(v7 + 560) = v9;
  *(void *)(v7 + 568) = *(void *)(v9 - 8);
  *(void *)(v7 + 576) = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  *(void *)(v7 + 584) = swift_task_alloc();
  *(void *)(v7 + 592) = swift_task_alloc();
  *(void *)(v7 + 600) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v7 + 608) = v10;
  *(void *)(v7 + 616) = *(void *)(v10 - 8);
  *(void *)(v7 + 624) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v7 + 632) = v11;
  *(void *)(v7 + 640) = *(void *)(v11 - 8);
  *(void *)(v7 + 648) = swift_task_alloc();
  *(void *)(v7 + 656) = swift_task_alloc();
  *(void *)(v7 + 664) = swift_task_alloc();
  return _swift_task_switch(sub_100891F64, 0, 0);
}

uint64_t sub_100891F64()
{
  uint64_t v132 = v0;
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 472) + *(int *)(*(void *)(v0 + 536) + 24));
  uint64_t v2 = *v1;
  *(void *)(v0 + 672) = *v1;
  unint64_t v3 = v1[1];
  *(void *)(v0 + 680) = v3;
  uint64_t v4 = v1[2];
  *(void *)(v0 + 688) = v4;
  unint64_t v5 = v1[3];
  *(void *)(v0 + 696) = v5;
  uint64_t v6 = v1[4];
  *(void *)(v0 + 704) = v6;
  unint64_t v7 = v1[5];
  *(void *)(v0 + 712) = v7;
  if (v3 >> 60 != 15)
  {
    uint64_t v9 = *(void *)(v0 + 624);
    uint64_t v10 = *(void *)(v0 + 616);
    uint64_t v128 = v0;
    uint64_t v120 = *(void *)(v0 + 608);
    uint64_t v121 = *(void *)(v0 + 600);
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t v12 = *(void *)(v0 + 568);
    uint64_t v127 = *(void *)(v0 + 560);
    uint64_t v13 = v2;
    id v14 = objc_allocWithZone((Class)NSProcessInfo);
    uint64_t v15 = v4;
    id v16 = v14;
    uint64_t v117 = v13;
    unint64_t v118 = v3;
    unint64_t v17 = v3;
    uint64_t v18 = v15;
    sub_1000361E0(v13, v17);
    sub_1000361E0(v18, v5);
    sub_100037A38(v6, v7);
    id v19 = [v16 init];
    unint64_t v125 = v5;
    unsigned int v20 = [v19 processIdentifier];

    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    uint64_t v130 = 46;
    unint64_t v131 = 0xE100000000000000;
    UUID.init()();
    unint64_t v124 = v7;
    uint64_t v119 = v6;
    uint64_t v21 = UUID.uuidString.getter();
    unint64_t v23 = v22;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    unint64_t v24 = v10 + 8;
    uint64_t v0 = v128;
    v25(v9, v120);
    v26._countAndFlagsBits = v21;
    v26._object = v23;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x8000000101409720;
    v27._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v27);
    *(_DWORD *)(v128 + 984) = v20;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    id v29 = [self defaultManager];
    NSFileManager.flatSequence(at:includingPropertiesForKeys:)();
    DirectorySequence.next()();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v127);
    uint64_t v30 = sub_1008AE3F4(v121);
    uint64_t v122 = v18;
    uint64_t v36 = *(void *)(v128 + 640);
    uint64_t v37 = *(void *)(v128 + 632);
    uint64_t v38 = *(void *)(v128 + 600);
    uint64_t v39 = *(void *)(v128 + 592);
    if (v32) {
      unint64_t v40 = 0;
    }
    else {
      unint64_t v40 = v31;
    }
    if (v32) {
      unint64_t v41 = 0;
    }
    else {
      unint64_t v41 = v30;
    }
    *(_OWORD *)(v128 + 304) = *(_OWORD *)(v128 + 480);
    sub_10001D074(v38, v39, &qword_101649E40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v39, 1, v37) == 1)
    {
      sub_10001DAB4(*(void *)(v128 + 592), &qword_101649E40);
      uint64_t v42 = 1;
    }
    else
    {
      uint64_t v43 = *(void *)(v128 + 656);
      uint64_t v44 = *(void *)(v128 + 632);
      uint64_t v45 = *(void *)(v128 + 552);
      unint64_t v24 = *(void *)(v128 + 512);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v128 + 640) + 32);
      v46(v43, *(void *)(v128 + 592), v44);
      v46(v45, v43, v44);
      uint64_t v0 = v128;
      uint64_t v42 = 0;
      uint64_t v47 = (unint64_t *)(v45 + *(int *)(v24 + 20));
      *uint64_t v47 = v41;
      v47[1] = v40;
    }
    unint64_t v48 = v125;
    unint64_t v50 = *(void *)(v0 + 480);
    unint64_t v49 = *(void *)(v0 + 488);
    int v51 = *(unsigned __int8 *)(v0 + 988);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 520) + 56))(*(void *)(v0 + 552), v42, 1, *(void *)(v0 + 512));
    unint64_t v52 = sub_1008AE5F8(v41, v40, v50, v49);
    unint64_t v55 = v52;
    unint64_t v56 = v53;
    if (v51)
    {
      if (v51 != 1)
      {
        uint64_t v62 = *(void *)(v0 + 664);
        uint64_t v63 = *(void *)(v0 + 640);
        uint64_t v64 = *(void *)(v0 + 632);
        uint64_t v65 = *(void *)(v0 + 600);
        uint64_t v66 = *(void *)(v0 + 552);
        sub_1008B1138();
        swift_allocError();
        *uint64_t v67 = 0;
        swift_willThrow();
        sub_1008B10AC(v117, v118, v122, v125, v119, v124);
        sub_10001DAB4(v66, &qword_101650630);
        sub_10001DAB4(v65, &qword_101649E40);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
        goto LABEL_4;
      }
      unint64_t v57 = v124;
      if (v124 >> 60 == 15)
      {
        __break(1u);
        return _swift_task_switch(v52, v53, v54);
      }
      unint64_t v59 = *(void *)(v0 + 480);
      unint64_t v58 = *(void *)(v0 + 488);
      sub_100037A38(v119, v124);
      *(void *)(v0 + 304) = sub_1008AE810(v59, v58, v55, v56);
      *(void *)(v0 + 312) = v60;
      unint64_t v50 = v119;
      unint64_t v48 = v124;
      goto LABEL_33;
    }
    uint64_t v61 = v53 - v52;
    if (v53 >= v52)
    {
      unint64_t v57 = v124;
      if ((uint64_t)(v53 - v52) >= 0)
      {
LABEL_26:
        uint64_t v68 = v61 + 1;
        if (__OFADD__(v61, 1)) {
          goto LABEL_51;
        }
        unint64_t v24 = v53;
        unint64_t v50 = v122;
        sub_1000361E0(v122, v125);
        if (v68 < 1345)
        {
LABEL_33:
          *(void *)(v0 + 728) = v48;
          *(void *)(v0 + 720) = v50;
          swift_beginAccess();
          uint64_t v80 = sub_1008AECFC(v41, v40, *(void *)(v0 + 304), *(void *)(v0 + 312));
          *(void *)(v0 + 736) = v80;
          uint64_t v81 = v80[2];
          *(void *)(v0 + 744) = v81;
          if (!v81)
          {
            swift_bridgeObjectRelease();
            if (qword_101636DA8 == -1)
            {
LABEL_37:
              uint64_t v92 = type metadata accessor for Logger();
              sub_100010324(v92, (uint64_t)qword_101650178);
              v93 = Logger.logObject.getter();
              os_log_type_t v94 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v93, v94))
              {
                BOOL v95 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)BOOL v95 = 0;
                _os_log_impl((void *)&_mh_execute_header, v93, v94, "No work to be done", v95, 2u);
                swift_slowDealloc();

                sub_1008B10AC(v117, v118, v122, v125, v119, v57);
                sub_10001CFB8(v50, v48);
              }
              else
              {
                sub_10001CFB8(v50, v48);

                sub_1008B10AC(v117, v118, v122, v125, v119, v57);
              }
              uint64_t v99 = *(void *)(v0 + 664);
              uint64_t v100 = *(void *)(v0 + 640);
              uint64_t v101 = *(void *)(v0 + 632);
              uint64_t v102 = *(void *)(v0 + 600);
              sub_10001DAB4(*(void *)(v0 + 552), &qword_101650630);
              sub_10001DAB4(v102, &qword_101649E40);
              (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              uint64_t v33 = *(uint64_t (**)(BOOL))(v0 + 8);
              BOOL v34 = *(void *)(v0 + 744) != 0;
              goto LABEL_5;
            }
LABEL_52:
            swift_once();
            goto LABEL_37;
          }
          uint64_t v82 = *(void *)(v0 + 640);
          *(void *)(v0 + 752) = 0;
          if (v80[2])
          {
            uint64_t v83 = *(void *)(v0 + 664);
            int v84 = *(unint64_t **)(v0 + 648);
            uint64_t v85 = *(void *)(v0 + 632);
            uint64_t v86 = *(void *)(v0 + 600);
            uint64_t v87 = *(void *)(v0 + 584);
            uint64_t v88 = *(void *)(v0 + 496);
            unint64_t v90 = v80[4];
            unint64_t v89 = v80[5];
            unint64_t v91 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v82 + 16);
            *(void *)(v0 + 760) = v91;
            *(void *)(v0 + 768) = (v82 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
            v91(v84, v83, v85);
            sub_10001D074(v86, v87, &qword_101649E40);
            *(void *)(v0 + 776) = sub_1008963BC(v84, v90, v89, v87, v88, &qword_1016505B8, &qword_1016505C0, &qword_101650648, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1008982AC);
            if (v90 < 2)
            {
              unint64_t v103 = 0;
              uint64_t v104 = 0;
              uint64_t v105 = 0;
              unint64_t v106 = 0xF000000000000000;
            }
            else
            {
              uint64_t v96 = sub_100A03614(*(void *)(v128 + 472), v90, *(void *)(*(void *)(v128 + 504) + 144));
              unint64_t v103 = v96;
              uint64_t v104 = v97;
              unint64_t v106 = v98;
              if (v98 >> 60 == 15) {
                uint64_t v105 = 0;
              }
              else {
                uint64_t v105 = v96;
              }
            }
            *(void *)(v128 + 808) = v105;
            *(void *)(v128 + 800) = v106;
            *(void *)(v128 + 792) = v104;
            *(void *)(v128 + 784) = v103;
            unint64_t v107 = *(void *)(v128 + 728);
            uint64_t v108 = *(void *)(v128 + 720);
            unint64_t v109 = *(void *)(v128 + 680);
            uint64_t v110 = *(void *)(v128 + 672);
            sub_1000361E0(v110, v109);
            uint64_t v126 = PrivateKey.publicKey.getter(v110, v109);
            unint64_t v123 = v111;
            sub_1000361E0(v108, v107);
            sub_1003DCE94(v103, v104, v106);
            sub_1009DC0D4(v110, v109, v126, v123, v108, v107, v103, v104, (uint64_t *)(v128 + 16), v106, v90);
            *(void *)(v128 + 816) = 0;
            long long v112 = *(_OWORD *)(v128 + 16);
            *(_OWORD *)(v128 + 104) = *(_OWORD *)(v128 + 32);
            long long v113 = *(_OWORD *)(v128 + 64);
            *(_OWORD *)(v128 + 120) = *(_OWORD *)(v128 + 48);
            *(_OWORD *)(v128 + 136) = v113;
            *(void *)(v128 + 152) = *(void *)(v128 + 80);
            *(_OWORD *)(v128 + 88) = v112;
            sub_1003DCE94(v103, v104, v106);
            sub_1003DD0D0((void *)(v128 + 16), (void (*)(void, void))sub_100037A38, (void (*)(uint64_t, uint64_t))sub_1000361E0);
            unint64_t v52 = (unint64_t)sub_100893118;
            unint64_t v53 = 0;
            uint64_t v54 = 0;
            return _swift_task_switch(v52, v53, v54);
          }
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (qword_101636DA8 == -1)
        {
LABEL_29:
          uint64_t v69 = *(void *)(v0 + 544);
          uint64_t v70 = *(void *)(v0 + 472);
          uint64_t v71 = type metadata accessor for Logger();
          sub_100010324(v71, (uint64_t)qword_101650178);
          sub_10089C594(v70, v69, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v114 = *(void *)(v128 + 544);
            uint64_t v116 = *(void *)(v128 + 488);
            uint64_t v115 = *(void *)(v128 + 480);
            uint64_t v74 = swift_slowAlloc();
            uint64_t v129 = swift_slowAlloc();
            *(_DWORD *)uint64_t v74 = 136447235;
            *(void *)(v128 + 384) = v55;
            *(void *)(v128 + 392) = v24;
            *(void *)(v128 + 368) = 0;
            *(void *)(v128 + 376) = 0xE000000000000000;
            uint64_t v0 = v128;
            _print_unlocked<A, B>(_:_:)();
            v75._countAndFlagsBits = 3026478;
            v75._object = (void *)0xE300000000000000;
            String.append(_:)(v75);
            _print_unlocked<A, B>(_:_:)();
            *(void *)(v128 + 408) = sub_1008FA0F0(*(void *)(v128 + 368), *(void *)(v128 + 376), &v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v74 + 12) = 2160;
            *(void *)(v128 + 416) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v74 + 22) = 2081;
            sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v130 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v131 = v76;
            v77._countAndFlagsBits = 47;
            v77._object = (void *)0xE100000000000000;
            String.append(_:)(v77);
            type metadata accessor for BeaconIdentifier();
            unint64_t v57 = v124;
            v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v78);
            swift_bridgeObjectRelease();
            *(void *)(v128 + 424) = sub_1008FA0F0(v130, v131, &v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1008AA93C(v114, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
            *(_WORD *)(v74 + 32) = 2082;
            *(void *)(v128 + 432) = v115;
            *(void *)(v128 + 440) = v116;
            *(void *)(v128 + 320) = 0;
            *(void *)(v128 + 328) = 0xE000000000000000;
            _print_unlocked<A, B>(_:_:)();
            v79._countAndFlagsBits = 3026478;
            v79._object = (void *)0xE300000000000000;
            String.append(_:)(v79);
            _print_unlocked<A, B>(_:_:)();
            *(void *)(v128 + 456) = sub_1008FA0F0(*(void *)(v128 + 320), *(void *)(v128 + 328), &v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v74 + 42) = 2082;
            *(void *)(v128 + 448) = sub_1008FA0F0(0x7972616D6972702ELL, 0xE800000000000000, &v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "Large hole %{public}s would be created for %{private,mask.hash}s: %{public}s - %{public}s", (uint8_t *)v74, 0x34u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_1008AA93C(*(void *)(v0 + 544), (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
          }

          unint64_t v40 = 0;
          unint64_t v41 = 0;
          unint64_t v50 = v122;
          unint64_t v48 = v125;
          goto LABEL_33;
        }
LABEL_55:
        swift_once();
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v57 = v124;
      if ((uint64_t)(v52 - v53) >= 0)
      {
        uint64_t v61 = v53 - v52;
        goto LABEL_26;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  sub_1008B0CAC();
  swift_allocError();
  *uint64_t v8 = 1;
  swift_willThrow();
LABEL_4:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v34 = 0;
LABEL_5:
  return v33(v34);
}

uint64_t sub_100893118()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = *(void *)(v0 + 816);
    uint64_t v2 = *(void *)(v0 + 808);
    *(void *)(v0 + 920) = *(void *)(v0 + 800);
    *(_OWORD *)(v0 + 904) = *(_OWORD *)(v0 + 784);
    *(void *)(v0 + 896) = v2;
    *(void *)(v0 + 888) = v1;
    unint64_t v3 = sub_100893498;
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 816);
    uint64_t v5 = *(void *)(v0 + 808);
    *(void *)(v0 + 848) = *(void *)(v0 + 800);
    *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 784);
    *(void *)(v0 + 824) = v5;
    uint64_t v6 = *(void *)(v0 + 88);
    unint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    unint64_t v11 = *(void *)(v0 + 128);
    *(void *)(v0 + 856) = *(void *)(v0 + 136);
    *(void *)(v0 + 864) = v4;
    unint64_t v12 = *(void *)(v0 + 152);
    *(void *)(v0 + 872) = v12;
    sub_1000361E0(v4, v12);
    sub_1000361E0(v4, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_1000361E0(v10, v11);
    sub_1000361E0(v4, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_100A8E7CC(v6, v7, v8, v9, v4, v12, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(void *)(v0 + 880) = v17;
    if (v17)
    {
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v10, v11);
      sub_10001CFB8(v4, v12);
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      uint64_t v14 = _convertErrorToNSError(_:)();
      *(void *)(v13 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
      *(void *)(v13 + 64) = sub_10033149C((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
      *(void *)(v13 + 32) = v14;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      unint64_t v3 = sub_100895220;
    }
    else
    {
      long long v15 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 944) = v15;
      *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 248);
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v10, v11);
      sub_10001CFB8(v4, v12);
      unint64_t v3 = sub_100894220;
    }
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100893498()
{
  uint64_t v1 = v0 + 88;
  unint64_t v93 = *(void *)(v0 + 920);
  uint64_t v95 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 912);
  unint64_t v92 = *(void *)(v0 + 904);
  unint64_t v89 = *(void *)(v0 + 896);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  unint64_t v8 = *(void *)(v0 + 152);
  sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v9, v8);
  uint64_t v10 = (uint64_t (*)())sub_10089900C(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, id))sub_10089A500);
  uint64_t v91 = v2;
  if (!v3)
  {
    uint64_t v21 = *(void *)(v0 + 776);
    uint64_t v22 = *(unsigned int *)(v21 + qword_101650B90);
    uint64_t v23 = *(unsigned int *)(v21 + qword_101650B98);
    if (v23 < v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 552);
      uint64_t v25 = *(void *)(v0 + 528);
      uint64_t v26 = *(void *)(v0 + 512);
      (*(void (**)(uint64_t, void, void))(v0 + 760))(v25, *(void *)(v0 + 664), *(void *)(v0 + 632));
      Swift::String v27 = (void *)(v25 + *(int *)(v26 + 20));
      *Swift::String v27 = v22;
      v27[1] = v23;
      uint64_t v10 = (uint64_t (*)())sub_1008AF268(v24, v25);
      uint64_t v88 = (uint64_t *)v0;
      if (v93 >> 60 == 15)
      {
        unint64_t v31 = (void *)v0;
        sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
        sub_1003DD0D0((void *)v95, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        goto LABEL_15;
      }
      unint64_t v31 = (void *)v0;
      if (v92 >= v89)
      {
        if (v92 - v89 < 0xFA1)
        {
          sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
        }
        else
        {
          uint64_t v32 = *(void *)(v0 + 472);
          uint64_t v33 = *(void *)(*(void *)(v0 + 504) + 144);
          char v34 = *(unsigned char *)(v0 + 988);
          sub_10000588C(&qword_10163A7A8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_101342130;
          *(void *)(inited + 32) = v92;
          *(void *)(inited + 40) = v91;
          *(void *)(inited + 48) = v93;
          sub_1000361E0(v91, v93);
          sub_1000361E0(v91, v93);
          sub_1009FD71C(v32, v34, inited, v33);
          sub_1008AA93C(v88[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
          sub_1003DCEB0(v92, v91, v93);
          swift_setDeallocating();
          swift_arrayDestroy();
        }
        sub_1003DD0D0((void *)v95, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        sub_1003DCEB0(v92, v91, v93);
LABEL_15:
        unint64_t v36 = v31[100];
        uint64_t v37 = v31[99];
        uint64_t v38 = v31[98];
        uint64_t v39 = v31[94];
        uint64_t v40 = v31[93];
        swift_release();
        uint64_t v10 = (uint64_t (*)())sub_1003DCEB0(v38, v37, v36);
        if (v39 + 1 == v40)
        {
          unint64_t v41 = v31[91];
          uint64_t v42 = v31[90];
          unint64_t v43 = v31[89];
          uint64_t v44 = v31[88];
          unint64_t v45 = v31[87];
          uint64_t v46 = v31[86];
          uint64_t v47 = v31;
          unint64_t v48 = v31[85];
          uint64_t v49 = v47[84];
          sub_10001CFB8(v42, v41);
          sub_1008B10AC(v49, v48, v46, v45, v44, v43);
          swift_bridgeObjectRelease();
          uint64_t v50 = v47[83];
          uint64_t v51 = v47[80];
          uint64_t v52 = v47[79];
          uint64_t v53 = v47[75];
          sub_10001DAB4(v47[69], &qword_101650630);
          sub_10001DAB4(v53, &qword_101649E40);
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          Swift::String v28 = (uint64_t (*)(BOOL))v47[1];
          BOOL v29 = v47[93] != 0;
          goto LABEL_5;
        }
        unint64_t v54 = v31[94] + 1;
        v31[94] = v54;
        uint64_t v55 = v31[92];
        if (v54 < *(void *)(v55 + 16))
        {
          uint64_t v56 = v31[83];
          unint64_t v57 = (unint64_t *)v31[81];
          uint64_t v58 = v31[80];
          uint64_t v59 = v31[79];
          uint64_t v60 = v31[75];
          uint64_t v61 = v31[73];
          uint64_t v62 = v31[62];
          uint64_t v63 = v55 + 16 * v54;
          unint64_t v65 = *(void *)(v63 + 32);
          unint64_t v64 = *(void *)(v63 + 40);
          uint64_t v66 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v58 + 16);
          v31[95] = v66;
          v31[96] = (v58 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v66(v57, v56, v59);
          sub_10001D074(v60, v61, &qword_101649E40);
          v31[97] = sub_1008963BC(v57, v65, v64, v61, v62, &qword_1016505B8, &qword_1016505C0, &qword_101650648, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1008982AC);
          if (v65 < 2)
          {
            unint64_t v70 = 0;
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            unint64_t v73 = 0xF000000000000000;
          }
          else
          {
            uint64_t v67 = sub_100A03614(v88[59], v65, *(void *)(v88[63] + 144));
            unint64_t v70 = v67;
            uint64_t v71 = v68;
            unint64_t v73 = v69;
            if (v69 >> 60 == 15) {
              uint64_t v72 = 0;
            }
            else {
              uint64_t v72 = v67;
            }
          }
          v88[101] = v72;
          v88[100] = v73;
          v88[99] = v71;
          v88[98] = v70;
          unint64_t v74 = v88[91];
          uint64_t v75 = v88[90];
          unint64_t v76 = v88[85];
          uint64_t v77 = v88[84];
          sub_1000361E0(v77, v76);
          uint64_t v96 = PrivateKey.publicKey.getter(v77, v76);
          unint64_t v94 = v78;
          sub_1000361E0(v75, v74);
          sub_1003DCE94(v70, v71, v73);
          sub_1009DC0D4(v77, v76, v96, v94, v75, v74, v70, v71, (uint64_t *)v95, v73, v65);
          v88[102] = 0;
          long long v79 = *(_OWORD *)(v95 + 48);
          *(_OWORD *)(v1 + 32) = *(_OWORD *)(v95 + 32);
          *(_OWORD *)(v1 + 48) = v79;
          *(void *)(v1 + 64) = *(void *)(v95 + 64);
          long long v80 = *(_OWORD *)(v95 + 16);
          *(_OWORD *)uint64_t v1 = *(_OWORD *)v95;
          *(_OWORD *)(v1 + 16) = v80;
          sub_1003DCE94(v70, v71, v73);
          sub_1003DD0D0((void *)v95, (void (*)(void, void))sub_100037A38, (void (*)(uint64_t, uint64_t))sub_1000361E0);
          uint64_t v10 = sub_100893118;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          return _swift_task_switch(v10, v11, v12);
        }
LABEL_29:
        __break(1u);
        return _swift_task_switch(v10, v11, v12);
      }
    }
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v87 = *(void *)(v0 + 792);
  unint64_t v90 = *(void *)(v0 + 800);
  uint64_t v13 = *(void *)(v0 + 720);
  unint64_t v14 = *(void *)(v0 + 712);
  uint64_t v15 = *(void *)(v0 + 704);
  unint64_t v16 = *(void *)(v0 + 696);
  uint64_t v17 = *(void *)(v0 + 688);
  unint64_t v18 = *(void *)(v0 + 680);
  uint64_t v19 = *(void *)(v0 + 672);
  uint64_t v85 = *(void *)(v0 + 664);
  uint64_t v86 = *(void *)(v0 + 784);
  uint64_t v20 = *(void *)(v0 + 640);
  uint64_t v84 = *(void *)(v0 + 632);
  uint64_t v83 = *(void *)(v0 + 600);
  unint64_t v81 = *(void *)(v0 + 728);
  uint64_t v82 = *(void *)(v0 + 552);
  sub_1003DD0D0((void *)v95, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  swift_release();
  sub_1008B10AC(v19, v18, v17, v16, v15, v14);
  sub_10001CFB8(v13, v81);
  sub_1003DCEB0(v92, v91, v93);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v82, &qword_101650630);
  sub_10001DAB4(v83, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v85, v84);
  sub_1003DCEB0(v86, v87, v90);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v28 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v29 = 0;
LABEL_5:
  return v28(v29);
}

void sub_100894220()
{
  if (*(void *)(v0 + 856) <= *(void *)(v0 + 488))
  {
    uint64_t v25 = *(void *)(v0 + 880);
    unint64_t v26 = *(void *)(v0 + 872);
    uint64_t v27 = *(void *)(v0 + 864);
    sub_1003DCEB0(*(void *)(v0 + 832), *(void *)(v0 + 840), *(void *)(v0 + 848));
    *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 288);
    unint64_t v29 = *(void *)(v0 + 296);
    sub_1000361E0(v27, v26);
    sub_100061E54(v0 + 288);
    uint64_t v30 = sub_100A94760(v28, v29);
    if (v25)
    {
      sub_1000CE9DC(v0 + 288);
      _StringGuts.grow(_:)(35);
      *(void *)(v0 + 352) = 0;
      *(void *)(v0 + 360) = 0xE000000000000000;
      v43._object = (void *)0x80000001013F3B70;
      v43._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v43);
      *(void *)(v0 + 400) = v25;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      return;
    }
    uint64_t v41 = v30;
    unint64_t v42 = v31;
    sub_1000CE9DC(v0 + 288);
    sub_100434E0C(v41, v42, (uint64_t *)(v0 + 336));
    uint64_t v44 = *(void *)(v0 + 776);
    uint64_t v46 = *(void *)(v0 + 336);
    unint64_t v45 = *(void *)(v0 + 344);
    sub_100898A34(v44, v46, v45);
    *(void *)(v0 + 976) = 0;
    uint64_t v122 = *(void *)(v0 + 960);
    unint64_t v124 = *(void *)(v0 + 968);
    unint64_t v53 = *(void *)(v0 + 952);
    uint64_t v54 = *(void *)(v0 + 944);
    unint64_t v55 = *(void *)(v0 + 936);
    uint64_t v56 = *(void *)(v0 + 928);
    unint64_t v57 = *(void *)(v0 + 872);
    uint64_t v58 = *(void *)(v0 + 864);
    sub_10001CFB8(v58, v57);
    sub_100037A24(v56, v55);
    sub_10001CFB8(v54, v53);
    sub_100037A24(v122, v124);
    sub_10001CFB8(v46, v45);
    uint64_t v59 = sub_100895FAC;
    goto LABEL_17;
  }
  uint64_t v121 = (uint64_t *)(v0 + 16);
  unint64_t v123 = *(void *)(v0 + 968);
  uint64_t v118 = *(void *)(v0 + 960);
  uint64_t v113 = *(void *)(v0 + 944);
  unint64_t v115 = *(void *)(v0 + 952);
  unint64_t v111 = *(void *)(v0 + 936);
  uint64_t v1 = *(void *)(v0 + 928);
  unint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v5 = *(void *)(v0 + 104);
  unint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 144);
  unint64_t v9 = *(void *)(v0 + 152);
  sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_10001CFB8(v5, v4);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  sub_10001CFB8(v3, v2);
  sub_100037A24(v1, v111);
  sub_10001CFB8(v113, v115);
  sub_100037A24(v118, v123);
  uint64_t v10 = *(void *)(v0 + 880);
  unint64_t v11 = *(void *)(v0 + 848);
  uint64_t v12 = *(void *)(v0 + 840);
  uint64_t v13 = *(void *)(v0 + 832);
  unint64_t v14 = *(void *)(v0 + 824);
  uint64_t v15 = sub_10089900C(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, id))sub_10089A500);
  if (!v10)
  {
    unint64_t v117 = v13;
    uint64_t v32 = *(void *)(v0 + 776);
    uint64_t v33 = *(unsigned int *)(v32 + qword_101650B90);
    uint64_t v34 = *(unsigned int *)(v32 + qword_101650B98);
    if (v34 < v33)
    {
      __break(1u);
    }
    else
    {
      uint64_t v35 = *(void *)(v0 + 552);
      uint64_t v36 = *(void *)(v0 + 528);
      uint64_t v37 = *(void *)(v0 + 512);
      (*(void (**)(uint64_t, void, void))(v0 + 760))(v36, *(void *)(v0 + 664), *(void *)(v0 + 632));
      uint64_t v38 = (void *)(v36 + *(int *)(v37 + 20));
      *uint64_t v38 = v33;
      v38[1] = v34;
      uint64_t v15 = sub_1008AF268(v35, v36);
      if (v11 >> 60 == 15)
      {
        sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
        sub_1003DD0D0(v121, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        goto LABEL_22;
      }
      if (v117 >= v14)
      {
        if (v117 - v14 < 0xFA1)
        {
          sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
          sub_1003DD0D0(v121, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          uint64_t v60 = v117;
          uint64_t v61 = v12;
        }
        else
        {
          uint64_t v48 = *(void *)(v0 + 472);
          uint64_t v49 = *(void *)(*(void *)(v0 + 504) + 144);
          char v50 = *(unsigned char *)(v0 + 988);
          sub_10000588C(&qword_10163A7A8);
          uint64_t v51 = v12;
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_101342130;
          *(void *)(inited + 32) = v117;
          *(void *)(inited + 40) = v51;
          *(void *)(inited + 48) = v11;
          sub_1000361E0(v51, v11);
          sub_1000361E0(v51, v11);
          sub_1009FD71C(v48, v50, inited, v49);
          sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
          sub_1003DCEB0(v117, v51, v11);
          swift_setDeallocating();
          swift_arrayDestroy();
          sub_1003DD0D0(v121, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          uint64_t v60 = v117;
          uint64_t v61 = v51;
        }
        sub_1003DCEB0(v60, v61, v11);
LABEL_22:
        unint64_t v62 = *(void *)(v0 + 800);
        uint64_t v63 = *(void *)(v0 + 792);
        uint64_t v64 = *(void *)(v0 + 784);
        uint64_t v65 = *(void *)(v0 + 752);
        uint64_t v66 = *(void *)(v0 + 744);
        swift_release();
        uint64_t v15 = sub_1003DCEB0(v64, v63, v62);
        if (v65 + 1 == v66)
        {
          unint64_t v67 = *(void *)(v0 + 712);
          uint64_t v68 = *(void *)(v0 + 704);
          unint64_t v69 = *(void *)(v0 + 696);
          uint64_t v70 = *(void *)(v0 + 688);
          unint64_t v71 = *(void *)(v0 + 680);
          uint64_t v72 = *(void *)(v0 + 672);
          sub_10001CFB8(*(void *)(v0 + 720), *(void *)(v0 + 728));
          sub_1008B10AC(v72, v71, v70, v69, v68, v67);
          swift_bridgeObjectRelease();
          uint64_t v73 = *(void *)(v0 + 664);
          uint64_t v74 = *(void *)(v0 + 640);
          uint64_t v75 = *(void *)(v0 + 632);
          uint64_t v76 = *(void *)(v0 + 600);
          sub_10001DAB4(*(void *)(v0 + 552), &qword_101650630);
          sub_10001DAB4(v76, &qword_101649E40);
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v39 = *(void (**)(BOOL))(v0 + 8);
          BOOL v40 = *(void *)(v0 + 744) != 0;
          goto LABEL_8;
        }
        unint64_t v77 = *(void *)(v0 + 752) + 1;
        *(void *)(v0 + 752) = v77;
        uint64_t v78 = *(void *)(v0 + 736);
        if (v77 < *(void *)(v78 + 16))
        {
          uint64_t v79 = *(void *)(v0 + 664);
          long long v80 = *(unint64_t **)(v0 + 648);
          uint64_t v81 = *(void *)(v0 + 640);
          uint64_t v82 = *(void *)(v0 + 632);
          uint64_t v83 = *(void *)(v0 + 600);
          uint64_t v84 = *(void *)(v0 + 584);
          uint64_t v85 = *(void *)(v0 + 496);
          uint64_t v86 = v78 + 16 * v77;
          unint64_t v88 = *(void *)(v86 + 32);
          unint64_t v87 = *(void *)(v86 + 40);
          unint64_t v89 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v81 + 16);
          *(void *)(v0 + 760) = v89;
          *(void *)(v0 + 768) = (v81 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v89(v80, v79, v82);
          sub_10001D074(v83, v84, &qword_101649E40);
          *(void *)(v0 + 776) = sub_1008963BC(v80, v88, v87, v84, v85, &qword_1016505B8, &qword_1016505C0, &qword_101650648, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1008982AC);
          if (v88 < 2)
          {
            unint64_t v93 = 0;
            uint64_t v94 = 0;
            uint64_t v95 = 0;
            unint64_t v96 = 0xF000000000000000;
          }
          else
          {
            uint64_t v90 = sub_100A03614(*(void *)(v0 + 472), v88, *(void *)(*(void *)(v0 + 504) + 144));
            unint64_t v93 = v90;
            uint64_t v94 = v91;
            unint64_t v96 = v92;
            if (v92 >> 60 == 15) {
              uint64_t v95 = 0;
            }
            else {
              uint64_t v95 = v90;
            }
          }
          *(void *)(v0 + 808) = v95;
          *(void *)(v0 + 800) = v96;
          *(void *)(v0 + 792) = v94;
          *(void *)(v0 + 784) = v93;
          unint64_t v97 = *(void *)(v0 + 728);
          uint64_t v98 = *(void *)(v0 + 720);
          unint64_t v99 = *(void *)(v0 + 680);
          uint64_t v100 = *(void *)(v0 + 672);
          sub_1000361E0(v100, v99);
          uint64_t v125 = PrivateKey.publicKey.getter(v100, v99);
          unint64_t v120 = v101;
          sub_1000361E0(v98, v97);
          sub_1003DCE94(v93, v94, v96);
          sub_1009DC0D4(v100, v99, v125, v120, v98, v97, v93, v94, v121, v96, v88);
          *(void *)(v0 + 816) = 0;
          long long v102 = *(_OWORD *)(v0 + 64);
          *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
          *(_OWORD *)(v0 + 136) = v102;
          *(void *)(v0 + 152) = *(void *)(v0 + 80);
          long long v103 = *(_OWORD *)(v0 + 32);
          *(_OWORD *)(v0 + 88) = *(_OWORD *)v121;
          *(_OWORD *)(v0 + 104) = v103;
          sub_1003DCE94(v93, v94, v96);
          sub_1003DD0D0(v121, (void (*)(void, void))sub_100037A38, (void (*)(uint64_t, uint64_t))sub_1000361E0);
          uint64_t v59 = sub_100893118;
LABEL_17:
          uint64_t v15 = (uint64_t)v59;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          goto _swift_task_switch;
        }
LABEL_34:
        __break(1u);
_swift_task_switch:
        _swift_task_switch(v15, v16, v17);
        return;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v114 = *(void *)(v0 + 792);
  unint64_t v116 = *(void *)(v0 + 800);
  uint64_t v112 = *(void *)(v0 + 784);
  uint64_t v104 = *(void *)(v0 + 720);
  unint64_t v105 = *(void *)(v0 + 728);
  unint64_t v18 = *(void *)(v0 + 712);
  uint64_t v106 = v12;
  uint64_t v19 = *(void *)(v0 + 704);
  unint64_t v20 = *(void *)(v0 + 696);
  unint64_t v119 = v11;
  uint64_t v21 = *(void *)(v0 + 688);
  unint64_t v22 = *(void *)(v0 + 680);
  uint64_t v23 = *(void *)(v0 + 672);
  uint64_t v24 = *(void *)(v0 + 640);
  uint64_t v109 = *(void *)(v0 + 632);
  uint64_t v110 = *(void *)(v0 + 664);
  uint64_t v107 = *(void *)(v0 + 552);
  uint64_t v108 = *(void *)(v0 + 600);
  sub_1003DD0D0(v121, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  swift_release();
  sub_1008B10AC(v23, v22, v21, v20, v19, v18);
  sub_10001CFB8(v104, v105);
  sub_1003DCEB0(v13, v106, v119);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v107, &qword_101650630);
  sub_10001DAB4(v108, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v110, v109);
  sub_1003DCEB0(v112, v114, v116);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(void (**)(BOOL))(v0 + 8);
  BOOL v40 = 0;
LABEL_8:
  v39(v40);
}

uint64_t sub_100895220()
{
  uint64_t v1 = v0 + 88;
  unint64_t v2 = *(void *)(v0 + 848);
  uint64_t v79 = v0 + 16;
  uint64_t v3 = *(void *)(v0 + 840);
  unint64_t v76 = *(void *)(v0 + 832);
  unint64_t v74 = *(void *)(v0 + 824);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 144);
  unint64_t v9 = *(void *)(v0 + 152);
  sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = (uint64_t (*)())sub_10089900C(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, id))sub_10089A500);
  unint64_t v77 = v2;
  uint64_t v75 = v3;
  uint64_t v13 = *(void *)(v0 + 776);
  uint64_t v14 = *(unsigned int *)(v13 + qword_101650B90);
  uint64_t v15 = *(unsigned int *)(v13 + qword_101650B98);
  if (v15 < v14)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(v0 + 552);
  uint64_t v17 = *(void *)(v0 + 528);
  uint64_t v18 = *(void *)(v0 + 512);
  (*(void (**)(uint64_t, void, void))(v0 + 760))(v17, *(void *)(v0 + 664), *(void *)(v0 + 632));
  uint64_t v19 = (void *)(v17 + *(int *)(v18 + 20));
  *uint64_t v19 = v14;
  v19[1] = v15;
  uint64_t v10 = (uint64_t (*)())sub_1008AF268(v16, v17);
  uint64_t v73 = (uint64_t *)v0;
  if (v77 >> 60 == 15)
  {
    uint64_t v21 = (void *)v0;
    sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1003DD0D0((void *)v79, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    goto LABEL_13;
  }
  uint64_t v21 = (void *)v0;
  if (v76 < v74)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v76 - v74 < 0xFA1)
  {
    sub_1008AA93C(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 472);
    uint64_t v23 = *(void *)(*(void *)(v0 + 504) + 144);
    char v24 = *(unsigned char *)(v0 + 988);
    sub_10000588C(&qword_10163A7A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = v76;
    *(void *)(inited + 40) = v75;
    *(void *)(inited + 48) = v77;
    sub_1000361E0(v75, v77);
    sub_1000361E0(v75, v77);
    sub_1009FD71C(v22, v24, inited, v23);
    sub_1008AA93C(v73[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1003DCEB0(v76, v75, v77);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  sub_1003DD0D0((void *)v79, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_1003DCEB0(v76, v75, v77);
LABEL_13:
  unint64_t v26 = v21[100];
  uint64_t v27 = v21[99];
  uint64_t v28 = v21[98];
  uint64_t v29 = v21[94];
  uint64_t v30 = v21[93];
  swift_release();
  uint64_t v10 = (uint64_t (*)())sub_1003DCEB0(v28, v27, v26);
  if (v29 + 1 != v30)
  {
    unint64_t v46 = v21[94] + 1;
    v21[94] = v46;
    uint64_t v47 = v21[92];
    if (v46 < *(void *)(v47 + 16))
    {
      uint64_t v48 = v21[83];
      uint64_t v49 = (unint64_t *)v21[81];
      uint64_t v50 = v21[80];
      uint64_t v51 = v21[79];
      uint64_t v52 = v21[75];
      uint64_t v53 = v21[73];
      uint64_t v54 = v21[62];
      uint64_t v55 = v47 + 16 * v46;
      unint64_t v57 = *(void *)(v55 + 32);
      unint64_t v56 = *(void *)(v55 + 40);
      uint64_t v58 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v50 + 16);
      v21[95] = v58;
      v21[96] = (v50 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v58(v49, v48, v51);
      sub_10001D074(v52, v53, &qword_101649E40);
      v21[97] = sub_1008963BC(v49, v57, v56, v53, v54, &qword_1016505B8, &qword_1016505C0, &qword_101650648, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1008982AC);
      if (v57 < 2)
      {
        unint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        unint64_t v65 = 0xF000000000000000;
      }
      else
      {
        uint64_t v59 = sub_100A03614(v73[59], v57, *(void *)(v73[63] + 144));
        unint64_t v62 = v59;
        uint64_t v63 = v60;
        unint64_t v65 = v61;
        if (v61 >> 60 == 15) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v59;
        }
      }
      v73[101] = v64;
      v73[100] = v65;
      v73[99] = v63;
      v73[98] = v62;
      unint64_t v66 = v73[91];
      uint64_t v67 = v73[90];
      unint64_t v68 = v73[85];
      uint64_t v69 = v73[84];
      sub_1000361E0(v69, v68);
      uint64_t v80 = PrivateKey.publicKey.getter(v69, v68);
      unint64_t v78 = v70;
      sub_1000361E0(v67, v66);
      sub_1003DCE94(v62, v63, v65);
      sub_1009DC0D4(v69, v68, v80, v78, v67, v66, v62, v63, (uint64_t *)v79, v65, v57);
      v73[102] = 0;
      long long v71 = *(_OWORD *)(v79 + 48);
      *(_OWORD *)(v1 + 32) = *(_OWORD *)(v79 + 32);
      *(_OWORD *)(v1 + 48) = v71;
      *(void *)(v1 + 64) = *(void *)(v79 + 64);
      long long v72 = *(_OWORD *)(v79 + 16);
      *(_OWORD *)uint64_t v1 = *(_OWORD *)v79;
      *(_OWORD *)(v1 + 16) = v72;
      sub_1003DCE94(v62, v63, v65);
      sub_1003DD0D0((void *)v79, (void (*)(void, void))sub_100037A38, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      uint64_t v10 = sub_100893118;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      return _swift_task_switch(v10, v11, v12);
    }
LABEL_27:
    __break(1u);
    return _swift_task_switch(v10, v11, v12);
  }
  unint64_t v31 = v21[91];
  uint64_t v32 = v21[90];
  unint64_t v33 = v21[89];
  uint64_t v34 = v21[88];
  unint64_t v35 = v21[87];
  uint64_t v36 = v21[86];
  uint64_t v37 = v21;
  unint64_t v38 = v21[85];
  uint64_t v39 = v37[84];
  sub_10001CFB8(v32, v31);
  sub_1008B10AC(v39, v38, v36, v35, v34, v33);
  swift_bridgeObjectRelease();
  uint64_t v40 = v37[83];
  uint64_t v41 = v37[80];
  uint64_t v42 = v37[79];
  uint64_t v43 = v37[75];
  sub_10001DAB4(v37[69], &qword_101650630);
  sub_10001DAB4(v43, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = (uint64_t (*)(BOOL))v37[1];
  BOOL v45 = v37[93] != 0;
  return v44(v45);
}

uint64_t sub_100895FAC()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = *(void *)(v0 + 976);
    uint64_t v2 = *(void *)(v0 + 856);
    *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 864);
    *(void *)(v0 + 904) = v2;
    *(void *)(v0 + 896) = v2;
    *(void *)(v0 + 888) = v1;
    uint64_t v3 = sub_100893498;
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 976);
    *(void *)(v0 + 848) = *(void *)(v0 + 872);
    long long v5 = *(_OWORD *)(v0 + 856);
    *(_OWORD *)(v0 + 832) = v5;
    *(void *)(v0 + 824) = v5;
    uint64_t v6 = *(void *)(v0 + 88);
    unint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    unint64_t v11 = *(void *)(v0 + 128);
    *(void *)(v0 + 856) = *(void *)(v0 + 136);
    *(void *)(v0 + 864) = v4;
    unint64_t v12 = *(void *)(v0 + 152);
    *(void *)(v0 + 872) = v12;
    sub_1000361E0(v4, v12);
    sub_1000361E0(v4, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_1000361E0(v10, v11);
    sub_1000361E0(v4, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_100A8E7CC(v6, v7, v8, v9, v4, v12, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(void *)(v0 + 880) = v17;
    if (v17)
    {
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v10, v11);
      sub_10001CFB8(v4, v12);
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      uint64_t v14 = _convertErrorToNSError(_:)();
      *(void *)(v13 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
      *(void *)(v13 + 64) = sub_10033149C((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
      *(void *)(v13 + 32) = v14;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v3 = sub_100895220;
    }
    else
    {
      long long v15 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 944) = v15;
      *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 248);
      sub_10001CFB8(v4, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v10, v11);
      sub_10001CFB8(v4, v12);
      uint64_t v3 = sub_100894220;
    }
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100896324(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008963BC(a1, a2, a3, a4, a5, &qword_1016505B8, &qword_1016505C0, &qword_101650648, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1008982AC);
}

uint64_t sub_100896370(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008963BC(a1, a2, a3, a4, a5, &qword_101650688, &qword_101650690, &qword_101650698, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100898670);
}

uint64_t sub_1008963BC(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unint64_t *a7, uint64_t *a8, uint64_t (*a9)(char *, unint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v31 = a5;
  uint64_t v14 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    sub_10000588C(a6);
    sub_100062734(v29, a6);
    swift_allocError();
    *(_DWORD *)uint64_t v24 = 2;
    *(unsigned char *)(v24 + 4) = 2;
    swift_willThrow();
    sub_10001DAB4(a4, &qword_101649E40);
    (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(a1, v17);
    return a4;
  }
  uint64_t result = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v18 + 16))(v20, a1, v17);
  unint64_t v22 = a3 - a2;
  if (a3 < a2)
  {
    if ((uint64_t)(a2 - a3) < 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v23 = a4;
    unint64_t v22 = a3 - a2;
LABEL_7:
    a4 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      uint64_t v29 = a1;
      uint64_t v25 = v23;
      sub_10001D074(v23, (uint64_t)v16, &qword_101649E40);
      sub_10000588C(v30);
      swift_allocObject();
      uint64_t v26 = v32;
      uint64_t v27 = a9(v20, a2, a4, v16, v31);
      if (v26)
      {
        sub_10001DAB4(v25, &qword_101649E40);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v29, v17);
      }
      else
      {
        a4 = v27;
        sub_10001DAB4(v25, &qword_101649E40);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v29, v17);
      }
      return a4;
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v23 = a4;
  if ((uint64_t)(a3 - a2) >= 0) {
    goto LABEL_7;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100896670(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier();
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v31 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v31 - v11;
  id v13 = sub_100896BD0(a1, a2);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  int v36 = a2;
  if (qword_101636DA8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_101650178);
  sub_10089C594(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_10089C594(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v32 = v17;
    unint64_t v33 = v16;
    uint64_t v34 = v14;
    unint64_t v35 = v7;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v31 = v19;
    *(_DWORD *)uint64_t v18 = 141559043;
    uint64_t v37 = 1752392040;
    uint64_t v38 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_1008FA0F0(v20, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1008AA93C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v18 + 22) = 2160;
    uint64_t v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 32) = 2081;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_1008FA0F0(v22, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1008AA93C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v18 + 42) = 2082;
    char v24 = v36;
    if ((_BYTE)v36)
    {
      if (v36 == 1) {
        uint64_t v25 = 0x61646E6F6365732ELL;
      }
      else {
        uint64_t v25 = 0xD000000000000010;
      }
      if (v36 == 1) {
        unint64_t v26 = 0xEA00000000007972;
      }
      else {
        unint64_t v26 = 0x80000001013F28C0;
      }
    }
    else
    {
      unint64_t v26 = 0xE800000000000000;
      uint64_t v25 = 0x7972616D6972702ELL;
    }
    unint64_t v7 = v35;
    uint64_t v27 = v33;
    uint64_t v37 = sub_1008FA0F0(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v32, "opened keymap: %{private,mask.hash}s/%{private,mask.hash}s/%{public}s)", (uint8_t *)v18, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = v34;
  }
  else
  {
    sub_1008AA93C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1008AA93C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);

    char v24 = v36;
  }
  sub_10089C594(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  type metadata accessor for BeaconKeyIndexMap();
  uint64_t v28 = swift_allocObject();
  [v14 fileDescriptor];
  uint64_t handle_from_file_descriptor = sp_key_index_map_create_handle_from_file_descriptor();

  if (!handle_from_file_descriptor)
  {
    sub_1008AA93C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_1008AB368((uint64_t)v7, v28 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  *(unsigned char *)(v28 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) = v24;
  *(void *)(v28 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_mapHandle) = handle_from_file_descriptor;
  return v28;
}

id sub_100896BD0(uint64_t a1, int a2)
{
  uint64_t v43 = type metadata accessor for BeaconIdentifier();
  uint64_t v4 = __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v40 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v44 = a2;
  sub_100897834(a2, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v12, &qword_101649E40);
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_101650178);
    sub_10089C594(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 141558531;
      uint64_t v45 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v46 = v21;
      v22._countAndFlagsBits = 47;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_1008FA0F0(v45, v46, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008AA93C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v20 + 22) = 2082;
      if ((_BYTE)v44)
      {
        if (v44 == 1)
        {
          uint64_t v24 = 0x61646E6F6365732ELL;
          unint64_t v25 = 0xEA00000000007972;
        }
        else
        {
          unint64_t v25 = 0x80000001013F28C0;
          uint64_t v24 = 0xD000000000000010;
        }
      }
      else
      {
        uint64_t v24 = 0x7972616D6972702ELL;
        unint64_t v25 = 0xE800000000000000;
      }
      uint64_t v45 = sub_1008FA0F0(v24, v25, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "no keymap URL for identifier %{private,mask.hash}s, sequence: %{public}s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008AA93C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  sub_1008AB490((uint64_t)v16);
  URL.path.getter();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v28 = [self fileHandleForReadingAtPath:v27];

  if (!v28)
  {
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_101650178);
    sub_10089C594(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v42 = v16;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v47 = v41;
      *(_DWORD *)uint64_t v32 = 141558531;
      uint64_t v45 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1008AAC94((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v46 = v33;
      v34._countAndFlagsBits = 47;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_1008FA0F0(v45, v46, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008AA93C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v32 + 22) = 2082;
      if ((_BYTE)v44)
      {
        if (v44 == 1)
        {
          uint64_t v36 = 0x61646E6F6365732ELL;
          unint64_t v37 = 0xEA00000000007972;
        }
        else
        {
          unint64_t v37 = 0x80000001013F28C0;
          uint64_t v36 = 0xD000000000000010;
        }
      }
      else
      {
        uint64_t v36 = 0x7972616D6972702ELL;
        unint64_t v37 = 0xE800000000000000;
      }
      uint64_t v39 = v42;
      uint64_t v45 = sub_1008FA0F0(v36, v37, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "could not open keymap for reading identifier: %{private,mask.hash}s, sequence: %{public}s", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v14 + 8))(v39, v13);
    }
    else
    {

      sub_1008AA93C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v28;
}

uint64_t sub_100897834@<X0>(unsigned __int8 a1@<W1>, char *a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DirectorySequence();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  sub_100897BE4(a1, (uint64_t)&v26 - v14);
  id v16 = [self defaultManager];
  unint64_t v26 = v15;
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)();

  uint64_t v17 = v8;
  DirectorySequence.next()();
  uint64_t v30 = v10;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v5, 1, v9) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
    uint64_t v22 = v30;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v9);
    uint64_t v23 = 1;
    uint64_t v24 = v29;
  }
  else
  {
    os_log_type_t v31 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    os_log_type_t v19 = (void (**)(char *, uint64_t))(v30 + 8);
    while (1)
    {
      v31(v13, v5, v9);
      if (URL.pathExtension.getter() == 0x70616D79656BLL && v20 == 0xE600000000000000) {
        break;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_9;
      }
      (*v19)(v13, v9);
      DirectorySequence.next()();
      if (v18(v5, 1, v9) == 1) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
LABEL_9:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
    (*v19)(v26, v9);
    uint64_t v24 = v29;
    v31(v29, v13, v9);
    uint64_t v23 = 0;
    uint64_t v22 = v30;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v24, v23, 1, v9);
}

uint64_t sub_100897BE4@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  v12[1] = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v12 - v8;
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconIdentifier();
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v7, v3);
  if (a1 > 1u) {
    URL.init(fileURLWithPath:)();
  }
  else {
    URL.appendingPathComponent(_:isDirectory:)();
  }
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v3);
}

Swift::Int sub_100897DAC()
{
  return Hasher._finalize()();
}

uint64_t sub_100897EEC()
{
  type metadata accessor for UUID();
  sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconIdentifier();
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100898020()
{
  return Hasher._finalize()();
}

uint64_t sub_10089815C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for BeaconIdentifier();
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  unsigned __int8 v7 = *(unsigned char *)(a2 + v6);
  unsigned __int8 v8 = *(unsigned char *)(a1 + v6);

  return sub_100719E48(v8, v7);
}

uint64_t sub_1008981E0()
{
  return sub_1008AAC94(&qword_101650540, (void (*)(uint64_t))type metadata accessor for BeaconKeyServiceBuilder.FileKey);
}

uint64_t sub_100898228()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E570);
  sub_100010324(v0, (uint64_t)qword_10170E570);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1008982AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v27 = a5;
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + qword_101650BA8) = 0;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = a1;
  v17(v5 + qword_101650B80, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_101650B90) = a2;
    *(_DWORD *)(v5 + qword_101650B98) = a2;
    *(_DWORD *)(v5 + qword_101650BA0) = a2;
    *(void *)(v5 + qword_101650B88) = a3;
    sub_10000588C(&qword_101650650);
    sub_100062734(&qword_101650658, &qword_101650650);
    uint64_t v18 = Set.init(minimumCapacity:)();
    sub_10000588C(&qword_101650660);
    os_log_type_t v19 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v19[2] = 256;
    v19[4] = v18;
    v19[5] = v18;
    for (uint64_t i = 6; i != 260; ++i)
    {
      v19[i] = v18;
      swift_bridgeObjectRetain();
    }
    *(void *)(v5 + qword_101650BB0) = v19;
    sub_10001D074(a4, (uint64_t)v12, &qword_101649E40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      swift_bridgeObjectRetain();
      sub_10001DAB4(a4, &qword_101649E40);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v13);
      sub_10001DAB4((uint64_t)v12, &qword_101649E40);
      return v5;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v21 = v27;
    if (!HIDWORD(v27))
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = v21;
      uint64_t v23 = v29;
      sub_10089B4C0((uint64_t)v16, v22, sub_1008AB490, (void (*)(void *, id *, uint64_t, uint64_t))sub_10089B734);
      if (v23) {
        swift_release();
      }
      sub_10001DAB4(a4, &qword_101649E40);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v24(v28, v13);
      v24((uint64_t)v16, v13);
      return v5;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100898670(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v27 = a5;
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + qword_101650BA8) = 0;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = a1;
  v17(v5 + qword_101650B80, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_101650B90) = a2;
    *(_DWORD *)(v5 + qword_101650B98) = a2;
    *(_DWORD *)(v5 + qword_101650BA0) = a2;
    *(void *)(v5 + qword_101650B88) = a3;
    sub_10000588C(&qword_1016506A0);
    sub_100062734(&qword_1016506A8, &qword_1016506A0);
    uint64_t v18 = Set.init(minimumCapacity:)();
    sub_10000588C(&qword_1016506B0);
    os_log_type_t v19 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v19[2] = 256;
    v19[4] = v18;
    v19[5] = v18;
    for (uint64_t i = 6; i != 260; ++i)
    {
      v19[i] = v18;
      swift_bridgeObjectRetain();
    }
    *(void *)(v5 + qword_101650BB0) = v19;
    sub_10001D074(a4, (uint64_t)v12, &qword_101649E40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      swift_bridgeObjectRetain();
      sub_10001DAB4(a4, &qword_101649E40);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v13);
      sub_10001DAB4((uint64_t)v12, &qword_101649E40);
      return v5;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v21 = v27;
    if (!HIDWORD(v27))
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = v21;
      uint64_t v23 = v29;
      sub_10089B4C0((uint64_t)v16, v22, sub_1008B11AC, (void (*)(void *, id *, uint64_t, uint64_t))sub_10089B994);
      if (v23) {
        swift_release();
      }
      sub_10001DAB4(a4, &qword_101649E40);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v24(v28, v13);
      v24((uint64_t)v16, v13);
      return v5;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100898A34(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v11 = *(void *)(a1 + qword_101650B88);
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v10 = qword_101650BA8;
  if (v11 - 1 >= *(void *)(a1 + qword_101650BA8)) {
    goto LABEL_6;
  }
  static os_log_type_t.error.getter();
  if (qword_101636DC8 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_101347BA0;
    *(void *)(result + 56) = &type metadata for Int;
    *(void *)(result + 64) = &protocol witness table for Int;
    *(void *)(result + 32) = v11;
    uint64_t v13 = *(void *)(v4 + v10);
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      break;
    }
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
LABEL_6:
    sub_1000361E0(v6, v5);
    LOBYTE(v3) = Data.subscript.getter();
    sub_10001CFB8(v6, v5);
    unint64_t v3 = v3;
    uint64_t v11 = qword_101650BA0;
    Swift::UInt32 v9 = *(_DWORD *)(v4 + qword_101650BA0);
    unsigned __int8 v7 = (void **)(v4 + qword_101650BB0);
    swift_beginAccess();
    unsigned __int8 v8 = *v7;
    sub_1000361E0(v6, v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unsigned __int8 v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      unsigned __int8 v8 = sub_100BBD394(v8);
      *unsigned __int8 v7 = v8;
    }
    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    sub_1000361E0(v6, v5);
    sub_100DD2D64((uint64_t)v23, v6, v5, v9);
    sub_10001CFB8(v23[0], v23[1]);
    swift_endAccess();
    uint64_t result = sub_10001CFB8(v6, v5);
    unsigned int v17 = *(_DWORD *)(v4 + v11);
    if (v17 < *(_DWORD *)(v4 + qword_101650B90)) {
      *(_DWORD *)(v4 + qword_101650B90) = v17;
    }
    if (*(_DWORD *)(v4 + qword_101650B98) < v17) {
      *(_DWORD *)(v4 + qword_101650B98) = v17;
    }
    int v18 = *(_DWORD *)(v4 + v11);
    BOOL v19 = __CFADD__(v18, 1);
    int v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    *(_DWORD *)(v4 + v11) = v20;
    uint64_t v21 = *(void *)(v4 + v10);
    BOOL v14 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (!v14)
    {
      *(void *)(v4 + v10) = v22;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t sub_100898CBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v11 = *(void *)(a1 + qword_101650B88);
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v10 = qword_101650BA8;
  if (v11 - 1 >= *(void *)(a1 + qword_101650BA8)) {
    goto LABEL_6;
  }
  static os_log_type_t.error.getter();
  if (qword_101636DC8 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_101347BA0;
    *(void *)(result + 56) = &type metadata for Int;
    *(void *)(result + 64) = &protocol witness table for Int;
    *(void *)(result + 32) = v11;
    uint64_t v13 = *(void *)(v4 + v10);
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      break;
    }
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
LABEL_6:
    sub_1000361E0(v6, v5);
    LOBYTE(v3) = Data.subscript.getter();
    sub_10001CFB8(v6, v5);
    unint64_t v3 = v3;
    uint64_t v11 = qword_101650BA0;
    Swift::UInt32 v9 = *(_DWORD *)(v4 + qword_101650BA0);
    unsigned __int8 v7 = (void **)(v4 + qword_101650BB0);
    swift_beginAccess();
    unsigned __int8 v8 = *v7;
    sub_1000361E0(v6, v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unsigned __int8 v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      unsigned __int8 v8 = sub_100BBD45C(v8);
      *unsigned __int8 v7 = v8;
    }
    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    sub_1000361E0(v6, v5);
    sub_100DD53E0((uint64_t)v23, v6, v5, v9);
    sub_10001CFB8(v23[0], v23[1]);
    swift_endAccess();
    uint64_t result = sub_10001CFB8(v6, v5);
    unsigned int v17 = *(_DWORD *)(v4 + v11);
    if (v17 < *(_DWORD *)(v4 + qword_101650B90)) {
      *(_DWORD *)(v4 + qword_101650B90) = v17;
    }
    if (*(_DWORD *)(v4 + qword_101650B98) < v17) {
      *(_DWORD *)(v4 + qword_101650B98) = v17;
    }
    int v18 = *(_DWORD *)(v4 + v11);
    BOOL v19 = __CFADD__(v18, 1);
    int v20 = v18 + 1;
    if (v19) {
      goto LABEL_18;
    }
    *(_DWORD *)(v4 + v11) = v20;
    uint64_t v21 = *(void *)(v4 + v10);
    BOOL v14 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (!v14)
    {
      *(void *)(v4 + v10) = v22;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t sub_100898F44()
{
  return sub_10089900C(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, id))sub_10089A500);
}

uint64_t sub_100898FA8()
{
  return sub_10089900C(10, (void (*)(uint64_t, uint64_t, uint64_t *, void **, id))sub_10089ACE0);
}

uint64_t sub_10089900C(int a1, void (*a2)(uint64_t, uint64_t, uint64_t *, void **, id))
{
  uint64_t v114 = a2;
  uint64_t v116 = type metadata accessor for URLResourceValues();
  uint64_t v117 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v118 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for URL();
  unint64_t v129 = *(void *)(v128 - 8);
  uint64_t v5 = __chkstk_darwin(v128);
  unint64_t v115 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v127 = (void (*)(char *, uint64_t))((char *)&v104 - v8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v104 - v9;
  uint64_t v11 = qword_101650BA8;
  uint64_t v12 = *(void *)(v2 + qword_101650B88);
  if (*(void *)(v2 + qword_101650BA8) < v12)
  {
    static os_log_type_t.error.getter();
    if (qword_101636DC8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
    *(void *)(v13 + 56) = &type metadata for Int;
    *(void *)(v13 + 64) = &protocol witness table for Int;
    *(void *)(v13 + 32) = v12;
    uint64_t v14 = *(void *)(v2 + v11);
    *(void *)(v13 + 96) = &type metadata for Int;
    *(void *)(v13 + 104) = &protocol witness table for Int;
    *(void *)(v13 + 72) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int v136 = a1;
  uint64_t v15 = sub_1008856C0((uint64_t)&v136, (uint64_t)&v137);
  unint64_t v17 = v16;
  int v135 = *(_DWORD *)(v2 + qword_101650B90);
  uint64_t v18 = sub_1008856C0((uint64_t)&v135, (uint64_t)&v136);
  unint64_t v20 = v19;
  int v134 = *(_DWORD *)(v2 + qword_101650B98);
  uint64_t v21 = sub_1008856C0((uint64_t)&v134, (uint64_t)&v135);
  unint64_t v23 = v22;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v24 = __DataStorage.init(length:)();
  uint64_t v143 = 0x102000000000;
  unint64_t v144 = v24 | 0x4000000000000000;
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  uint64_t v124 = v15;
  unint64_t v125 = v17;
  id v25 = v126;
  sub_1008AA270(v15, v17);
  uint64_t v122 = v18;
  unint64_t v123 = v20;
  sub_1008AA270(v18, v20);
  uint64_t v120 = v21;
  unint64_t v121 = v23;
  sub_1008AA270(v21, v23);
  id v126 = v25;
  id v26 = [self defaultManager];
  sub_10001D4B0(0, (unint64_t *)&qword_101642980);
  uint64_t v119 = v2;
  uint64_t v27 = v2 + qword_101650B80;
  URL.deletingLastPathComponent()();
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
  unint64_t v28 = v129;
  uint64_t v29 = v129 + 8;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v129 + 8);
  os_log_type_t v31 = v10;
  uint64_t v32 = v26;
  uint64_t v33 = v128;
  v30(v31, v128);
  URL.path.getter();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v35 = [v32 fileExistsAtPath:v34];

  if ((v35 & 1) == 0)
  {
    URL.path.getter();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 createFileAtPath:v36 contents:0 attributes:0];
  }
  sub_10001D4B0(0, (unint64_t *)&unk_1016569A0);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  unint64_t v38 = v28 + 16;
  unint64_t v37 = v39;
  uint64_t v40 = (uint64_t)v127;
  v39((char *)v127, v27, v33);
  id v41 = v126;
  id v42 = sub_10089A3A8(v40, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
  if (v41)
  {
    sub_10001CFB8(v143, v144);

LABEL_9:
    sub_10001CFB8(v120, v121);
    sub_10001CFB8(v122, v123);
    uint64_t v43 = v124;
    unint64_t v44 = v125;
    return sub_10001CFB8(v43, v44);
  }
  uint64_t v45 = v42;
  unint64_t v46 = v37;
  uint64_t v127 = v30;
  id v137 = 0;
  unsigned __int8 v47 = [v42 truncateAtOffset:0 error:&v137];
  id v48 = v137;
  if ((v47 & 1) == 0)
  {
    id v53 = v137;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001CFB8(v120, v121);
    sub_10001CFB8(v122, v123);
    sub_10001CFB8(v124, v125);
LABEL_13:
    uint64_t v43 = v143;
    unint64_t v44 = v144;
    return sub_10001CFB8(v43, v44);
  }
  unint64_t v129 = v38;
  uint64_t v113 = v29;
  id v126 = v32;
  uint64_t v49 = v143;
  unint64_t v50 = v144;
  id v137 = (id)v143;
  unint64_t v138 = v144;
  id v51 = v48;
  sub_1000361E0(v49, v50);
  unint64_t v52 = sub_1000362FC();
  NSFileHandle.write<A>(contentsOf:)();
  unint64_t v111 = v52;
  sub_10001CFB8(v49, v50);
  NSFileHandle.seekToEnd()();
  if (v55)
  {
    sub_10001CFB8(v49, v50);

    goto LABEL_9;
  }
  id v112 = v45;
  sub_10000588C(&qword_101650640);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = NSFileProtectionKey;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  unint64_t v57 = NSFileProtectionKey;
  uint64_t v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  unint64_t v59 = sub_10092DE24(inited);
  uint64_t v60 = v118;
  URLResourceValues.init()();
  sub_100653FB8(v59);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0);
  sub_1008AAC94(&qword_1016387D0, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  URL.path.getter();
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v137 = 0;
  id v63 = v126;
  unsigned __int8 v64 = [v126 setAttributes:isa ofItemAtPath:v62 error:&v137];

  if ((v64 & 1) == 0)
  {
    id v67 = v137;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10001CFB8(v120, v121);
    sub_10001CFB8(v122, v123);
    sub_10001CFB8(v124, v125);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v60, v116);
    goto LABEL_13;
  }
  id v65 = v137;
  URLResourceValues.isExcludedFromBackup.setter();
  unint64_t v66 = v115;
  v46(v115, v27, v128);
  URL.setResourceValues(_:)();
  uint64_t v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v68 + 16) = 256;
  bzero((void *)(v68 + 32), 0x800uLL);
  uint64_t v133 = (void *)v68;
  uint64_t v69 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v69 + 16) = 256;
  bzero((void *)(v69 + 32), 0x800uLL);
  uint64_t v132 = v69;
  long long v71 = v114;
  v114(v119, 0, &v132, &v133, v112);
  id v72 = v126;
  uint64_t v73 = 1;
  uint64_t v74 = v128;
  while (1)
  {
    if (v73 == 256) {
      break;
    }
    v71(v119, v73++, &v132, &v133, v112);
  }
  id v137 = 0;
  id v75 = v112;
  if ([v112 seekToOffset:32 error:&v137])
  {
    uint64_t v76 = v132;
    unint64_t v77 = v133;
    id v78 = v137;
    uint64_t v107 = v76;
    if (*(void *)(v76 + 16))
    {
      uint64_t v80 = v79;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v106 = v107 + 32;
      unint64_t v105 = &v132;
      uint64_t v83 = -255;
      while (1)
      {
        uint64_t v131 = *(void *)(v106 + v82 * 8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v77 = sub_100BBD380(v77);
        }
        uint64_t v110 = v80;
        if ((unint64_t)(v83 + 255) >= v77[2]) {
          break;
        }
        uint64_t v84 = v83;
        uint64_t v108 = v77;
        uint64_t v85 = sub_1008856C0((uint64_t)&v77[v82 + 4], (uint64_t)&v77[v82 + 5]);
        unint64_t v87 = v86;
        unint64_t v88 = (void *)sub_1008856C0((uint64_t)&v131, (uint64_t)v105);
        uint64_t v119 = v85;
        v141 = (void *)v85;
        unint64_t v142 = v87;
        unint64_t v129 = v87;
        v139 = &type metadata for Data;
        v140 = &protocol witness table for Data;
        id v137 = v88;
        unint64_t v138 = (unint64_t)v89;
        uint64_t v114 = v89;
        uint64_t v90 = sub_10001CD44(&v137, (uint64_t)&type metadata for Data);
        uint64_t v92 = *v90;
        unint64_t v91 = v90[1];
        uint64_t v109 = v81;
        switch(v91 >> 62)
        {
          case 1uLL:
            if (v92 >> 32 < (int)v92)
            {
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
              JUMPOUT(0x10089A344);
            }
            unint64_t v94 = (unint64_t)v114;
            sub_1000361E0((uint64_t)v88, (unint64_t)v114);
            sub_1000361E0((uint64_t)v88, v94);
            sub_1000361E0(v119, v129);
            sub_1000361E0(v92, v91);
            if (__DataStorage._bytes.getter() && __OFSUB__((int)v92, __DataStorage._offset.getter())) {
              goto LABEL_54;
            }
            __DataStorage._length.getter();
            Data._Representation.append(contentsOf:)();
            sub_10001CFB8(v92, v91);
LABEL_38:
            unint64_t v93 = (unint64_t)v114;
LABEL_41:
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v137);
            sub_10001CFB8((uint64_t)v88, v93);
            uint64_t v98 = (uint64_t)v141;
            unint64_t v99 = v142;
            id v137 = v141;
            unint64_t v138 = v142;
            uint64_t v100 = v109;
            NSFileHandle.write<A>(contentsOf:)();
            uint64_t v81 = v100;
            if (v100)
            {
              sub_10001CFB8((uint64_t)v88, v93);
              sub_10001CFB8(v119, v129);
              sub_10001CFB8(v98, v99);
              uint64_t v133 = v108;

              sub_10001CFB8(v120, v121);
              sub_10001CFB8(v122, v123);
              sub_10001CFB8(v124, v125);
              v127(v115, v128);
              (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v116);
              sub_10001CFB8(v143, v144);

              goto LABEL_49;
            }
            sub_10001CFB8((uint64_t)v88, v93);
            sub_10001CFB8(v119, v129);
            sub_10001CFB8(v98, v99);
            if (!v84)
            {

              sub_10001CFB8(v120, v121);
              sub_10001CFB8(v122, v123);
              sub_10001CFB8(v124, v125);
              uint64_t v133 = v108;
              long long v102 = v115;
              uint64_t v103 = v128;
              goto LABEL_48;
            }
            uint64_t v83 = v84 + 1;
            ++v82;
            unint64_t v77 = v108;
            if ((unint64_t)(v84 + 256) >= *(void *)(v107 + 16)) {
              goto LABEL_51;
            }
            break;
          case 2uLL:
            uint64_t v96 = *(void *)(v92 + 16);
            uint64_t v95 = *(void *)(v92 + 24);
            unint64_t v97 = (unint64_t)v114;
            sub_1000361E0((uint64_t)v88, (unint64_t)v114);
            sub_1000361E0((uint64_t)v88, v97);
            sub_1000361E0(v119, v129);
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v96, __DataStorage._offset.getter())) {
              goto LABEL_55;
            }
            if (__OFSUB__(v95, v96)) {
              goto LABEL_53;
            }
            __DataStorage._length.getter();
            Data._Representation.append(contentsOf:)();
            swift_release();
            swift_release();
            goto LABEL_38;
          case 3uLL:
            memset(v130, 0, 14);
            unint64_t v93 = (unint64_t)v114;
            sub_1000361E0((uint64_t)v88, (unint64_t)v114);
            sub_1000361E0((uint64_t)v88, v93);
            sub_1000361E0(v119, v129);
            goto LABEL_40;
          default:
            v130[0] = v92;
            LOWORD(v130[1]) = v91;
            BYTE2(v130[1]) = BYTE2(v91);
            BYTE3(v130[1]) = BYTE3(v91);
            BYTE4(v130[1]) = BYTE4(v91);
            BYTE5(v130[1]) = BYTE5(v91);
            unint64_t v93 = (unint64_t)v114;
            sub_1000361E0((uint64_t)v88, (unint64_t)v114);
            sub_1000361E0((uint64_t)v88, v93);
            sub_1000361E0(v119, v129);
LABEL_40:
            Data._Representation.append(contentsOf:)();
            goto LABEL_41;
        }
      }
      __break(1u);
    }
LABEL_51:
    __break(1u);
  }
  id v101 = v137;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_10001CFB8(v120, v121);
  sub_10001CFB8(v122, v123);
  sub_10001CFB8(v124, v125);
  long long v102 = v66;
  uint64_t v103 = v74;
LABEL_48:
  v127(v102, v103);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v116);
  sub_10001CFB8(v143, v144);
LABEL_49:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_10089A354(uint64_t a1)
{
  return sub_10089A3A8(a1, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
}

id sub_10089A3A8(uint64_t a1, SEL *a2)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = [swift_getObjCClassFromMetadata() *a2 v4, &v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t sub_10089A500(long long *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1;
  id v10 = (int *)((char *)a1 + qword_101650BB0);
  swift_beginAccess();
  if (a2 < 0)
  {
LABEL_67:
    __break(1u);
  }
  else if (*(void *)(*(void *)v10 + 16) > (unint64_t)a2)
  {
    unint64_t v43 = a2;
    uint64_t v5 = *(void *)(*(void *)(*(void *)v10 + 8 * a2 + 32) + 16);
    a2 = *(void *)a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)a3 = a2;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_69;
  }
  __break(1u);
LABEL_69:
  a2 = (uint64_t)sub_100BBD380((void *)a2);
LABEL_4:
  if (*(void *)(a2 + 16) <= v43)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(void *)(a2 + 8 * v43 + 32) = v5;
  *(void *)a3 = a2;
  if (!v5)
  {
    a3 = (uint64_t)a4;
    uint64_t v9 = (long long *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a4 = (uint64_t)v9;
    if (result)
    {
LABEL_60:
      if (*((void *)v9 + 2) > v43)
      {
        *((void *)v9 + v43 + 4) = 0;
        *(void *)a3 = v9;
        return result;
      }
      __break(1u);
      goto LABEL_76;
    }
LABEL_74:
    uint64_t result = (uint64_t)sub_100BBD380(v9);
    uint64_t v9 = (long long *)result;
    goto LABEL_60;
  }
  if (*(void *)(*(void *)v10 + 16) <= v43) {
    goto LABEL_71;
  }
  uint64_t v12 = *(void *)((char *)v9 + qword_101650B88);
  if ((unsigned __int128)(v12 * (__int128)28) >> 64 != (28 * v12) >> 63) {
    goto LABEL_72;
  }
  uint64_t v5 = *(void *)(*(void *)v10 + 8 * v43 + 32);
  uint64_t v13 = 28 * v12 / 256;
  swift_bridgeObjectRetain();
  uint64_t v58 = sub_1008AF1CC(v13);
  unint64_t v59 = v14;
  uint64_t v46 = v5 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v5 + 56);
  int64_t v47 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v44 = v5;
  uint64_t v45 = a5;
  while (1)
  {
    if (v17)
    {
      uint64_t v48 = (v17 - 1) & v17;
      int64_t v49 = v18;
      unint64_t v20 = __clz(__rbit64(v17)) | (v18 << 6);
      goto LABEL_34;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v21 >= v47) {
      break;
    }
    unint64_t v22 = *(void *)(v46 + 8 * v21);
    int64_t v23 = v18 + 1;
    if (!v22)
    {
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v47) {
        break;
      }
      unint64_t v22 = *(void *)(v46 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v18 + 3;
        if (v18 + 3 >= v47) {
          break;
        }
        unint64_t v22 = *(void *)(v46 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v18 + 4;
          if (v18 + 4 >= v47) {
            break;
          }
          unint64_t v22 = *(void *)(v46 + 8 * v23);
          if (!v22)
          {
            int64_t v23 = v18 + 5;
            if (v18 + 5 >= v47) {
              break;
            }
            unint64_t v22 = *(void *)(v46 + 8 * v23);
            if (!v22)
            {
              uint64_t v24 = v18 + 6;
              if (v18 + 6 >= v47) {
                break;
              }
              unint64_t v22 = *(void *)(v46 + 8 * v24);
              if (!v22)
              {
                while (1)
                {
                  int64_t v23 = v24 + 1;
                  if (__OFADD__(v24, 1)) {
                    goto LABEL_73;
                  }
                  if (v23 >= v47) {
                    goto LABEL_54;
                  }
                  unint64_t v22 = *(void *)(v46 + 8 * v23);
                  ++v24;
                  if (v22) {
                    goto LABEL_33;
                  }
                }
              }
              int64_t v23 = v18 + 6;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v48 = (v22 - 1) & v22;
    int64_t v49 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_34:
    uint64_t v25 = *(void *)(v5 + 48) + 24 * v20;
    uint64_t v27 = *(void *)v25;
    unint64_t v26 = *(void *)(v25 + 8);
    int v52 = *(_DWORD *)(v25 + 16);
    unint64_t v56 = &type metadata for UnsafeRawBufferPointer;
    unint64_t v57 = &protocol witness table for UnsafeRawBufferPointer;
    uint64_t v54 = &v52;
    p_dst = &__dst;
    unint64_t v28 = sub_10001CD44(&v54, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    a3 = *v28;
    if (*v28 && (uint64_t v29 = v28[1], v30 = v29 - a3, v29 != a3))
    {
      if (v30 <= 14)
      {
        *(void *)((char *)&__dst + 6) = 0;
        *(void *)&long long __dst = 0;
        BYTE14(__dst) = v29 - a3;
        memcpy(&__dst, (const void *)a3, v29 - a3);
        id v10 = (int *)__dst;
        uint64_t v9 = (long long *)(DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48));
        sub_1000361E0(v27, v26);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        sub_1000361E0(v27, v26);
        uint64_t v33 = __DataStorage.init(bytes:length:)();
        a3 = v33;
        if ((unint64_t)v30 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          id v10 = (int *)swift_allocObject();
          *((void *)v10 + 2) = 0;
          *((void *)v10 + 3) = v30;
          uint64_t v9 = (long long *)(a3 | 0x8000000000000000);
        }
        else
        {
          id v10 = (int *)(v30 << 32);
          uint64_t v9 = (long long *)(v33 | 0x4000000000000000);
        }
      }
    }
    else
    {
      sub_1000361E0(v27, v26);
      id v10 = 0;
      uint64_t v9 = (long long *)0xC000000000000000;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v54);
    *(void *)&long long __dst = v27;
    *((void *)&__dst + 1) = v26;
    unint64_t v50 = v26;
    unint64_t v56 = &type metadata for Data;
    unint64_t v57 = &protocol witness table for Data;
    uint64_t v54 = v10;
    p_dst = v9;
    os_log_type_t v31 = sub_10001CD44(&v54, (uint64_t)&type metadata for Data);
    a2 = *v31;
    unint64_t v32 = v31[1];
    switch(v32 >> 62)
    {
      case 1uLL:
        uint64_t v5 = (int)a2;
        if (a2 >> 32 < (int)a2) {
          goto LABEL_63;
        }
        a3 = v32 & 0x3FFFFFFFFFFFFFFFLL;
        sub_1000361E0(v27, v50);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        sub_1000361E0(a2, v32);
        a5 = __DataStorage._bytes.getter();
        if (a5 && __OFSUB__((int)a2, __DataStorage._offset.getter())) {
          goto LABEL_66;
        }
        __DataStorage._length.getter();
        Data._Representation.append(contentsOf:)();
        sub_10001CFB8(a2, v32);
        goto LABEL_51;
      case 2uLL:
        uint64_t v34 = v32 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v35 = *(void *)(a2 + 16);
        uint64_t v5 = *(void *)(a2 + 24);
        sub_1000361E0(v27, v50);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        swift_retain();
        swift_retain();
        a3 = v34;
        a5 = __DataStorage._bytes.getter();
        if (!a5) {
          goto LABEL_49;
        }
        a3 = v34;
        uint64_t v36 = __DataStorage._offset.getter();
        if (__OFSUB__(v35, v36)) {
          goto LABEL_65;
        }
        a5 += v35 - v36;
LABEL_49:
        BOOL v37 = __OFSUB__(v5, v35);
        v5 -= v35;
        if (v37) {
          goto LABEL_64;
        }
        __DataStorage._length.getter();
        Data._Representation.append(contentsOf:)();
        swift_release();
        swift_release();
LABEL_51:
        uint64_t v5 = v44;
        a5 = v45;
        unint64_t v19 = v50;
LABEL_13:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v54);
        sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
        id v10 = (int *)*((void *)&__dst + 1);
        uint64_t v9 = (long long *)__dst;
        a3 = (uint64_t)&v58;
        Data.append(_:)();
        sub_10001CFB8((uint64_t)v9, (unint64_t)v10);
        sub_10001CFB8(v27, v19);
        unint64_t v17 = v48;
        int64_t v18 = v49;
        break;
      case 3uLL:
        memset(v51, 0, 14);
        unint64_t v19 = v50;
        sub_1000361E0(v27, v50);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        goto LABEL_12;
      default:
        v51[0] = *v31;
        LOWORD(v51[1]) = v32;
        BYTE2(v51[1]) = BYTE2(v32);
        BYTE3(v51[1]) = BYTE3(v32);
        BYTE4(v51[1]) = BYTE4(v32);
        BYTE5(v51[1]) = BYTE5(v32);
        a2 = (uint64_t)v51 + BYTE6(v32);
        unint64_t v19 = v50;
        sub_1000361E0(v27, v50);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
LABEL_12:
        Data._Representation.append(contentsOf:)();
        goto LABEL_13;
    }
  }
LABEL_54:
  swift_release();
  swift_bridgeObjectRelease();
  id v10 = (int *)v58;
  uint64_t v9 = v59;
  Swift::UInt64 v38 = NSFileHandle.offset()();
  if (v39) {
    return sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
  }
  a3 = v38;
  a2 = *a4;
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  *a4 = a2;
  if ((v40 & 1) == 0) {
LABEL_76:
  }
    a2 = (uint64_t)sub_100BBD380((void *)a2);
  if (*(void *)(a2 + 16) <= (int64_t)v43) {
    __break(1u);
  }
  *(void *)(a2 + 8 * v43 + 32) = a3;
  *a4 = a2;
  uint64_t v54 = v10;
  p_dst = v9;
  sub_1000362FC();
  NSFileHandle.write<A>(contentsOf:)();
  return sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
}

uint64_t sub_10089ACE0(long long *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1;
  id v10 = (int *)((char *)a1 + qword_101650BB0);
  swift_beginAccess();
  if (a2 < 0)
  {
LABEL_67:
    __break(1u);
  }
  else if (*(void *)(*(void *)v10 + 16) > (unint64_t)a2)
  {
    unint64_t v45 = a2;
    uint64_t v5 = *(void *)(*(void *)(*(void *)v10 + 8 * a2 + 32) + 16);
    a2 = *(void *)a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)a3 = a2;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_69;
  }
  __break(1u);
LABEL_69:
  a2 = (uint64_t)sub_100BBD380((void *)a2);
LABEL_4:
  if (*(void *)(a2 + 16) <= v45)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(void *)(a2 + 8 * v45 + 32) = v5;
  *(void *)a3 = a2;
  if (!v5)
  {
    a3 = (uint64_t)a4;
    uint64_t v9 = (long long *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a4 = (uint64_t)v9;
    if (result)
    {
LABEL_60:
      if (*((void *)v9 + 2) > v45)
      {
        *((void *)v9 + v45 + 4) = 0;
        *(void *)a3 = v9;
        return result;
      }
      __break(1u);
      goto LABEL_76;
    }
LABEL_74:
    uint64_t result = (uint64_t)sub_100BBD380(v9);
    uint64_t v9 = (long long *)result;
    goto LABEL_60;
  }
  if (*(void *)(*(void *)v10 + 16) <= v45) {
    goto LABEL_71;
  }
  uint64_t v12 = *(void *)((char *)v9 + qword_101650B88);
  uint64_t v13 = (unsigned __int128)(v12 * (__int128)6) >> 64;
  uint64_t v14 = 6 * v12;
  if (v13 != v14 >> 63) {
    goto LABEL_72;
  }
  uint64_t v5 = *(void *)(*(void *)v10 + 8 * v45 + 32);
  uint64_t v15 = v14 / 256;
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_1008AF1CC(v15);
  unint64_t v61 = v16;
  uint64_t v48 = v5 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v5 + 56);
  int64_t v49 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v46 = v5;
  uint64_t v47 = a5;
  while (1)
  {
    if (v19)
    {
      uint64_t v50 = (v19 - 1) & v19;
      int64_t v51 = v20;
      unint64_t v22 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_34;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v23 >= v49) {
      break;
    }
    unint64_t v24 = *(void *)(v48 + 8 * v23);
    int64_t v25 = v20 + 1;
    if (!v24)
    {
      int64_t v25 = v20 + 2;
      if (v20 + 2 >= v49) {
        break;
      }
      unint64_t v24 = *(void *)(v48 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v20 + 3;
        if (v20 + 3 >= v49) {
          break;
        }
        unint64_t v24 = *(void *)(v48 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v20 + 4;
          if (v20 + 4 >= v49) {
            break;
          }
          unint64_t v24 = *(void *)(v48 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v20 + 5;
            if (v20 + 5 >= v49) {
              break;
            }
            unint64_t v24 = *(void *)(v48 + 8 * v25);
            if (!v24)
            {
              uint64_t v26 = v20 + 6;
              if (v20 + 6 >= v49) {
                break;
              }
              unint64_t v24 = *(void *)(v48 + 8 * v26);
              if (!v24)
              {
                while (1)
                {
                  int64_t v25 = v26 + 1;
                  if (__OFADD__(v26, 1)) {
                    goto LABEL_73;
                  }
                  if (v25 >= v49) {
                    goto LABEL_54;
                  }
                  unint64_t v24 = *(void *)(v48 + 8 * v25);
                  ++v26;
                  if (v24) {
                    goto LABEL_33;
                  }
                }
              }
              int64_t v25 = v20 + 6;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v50 = (v24 - 1) & v24;
    int64_t v51 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_34:
    uint64_t v27 = *(void *)(v5 + 48) + 24 * v22;
    uint64_t v29 = *(void *)v27;
    unint64_t v28 = *(void *)(v27 + 8);
    int v54 = *(_DWORD *)(v27 + 16);
    uint64_t v58 = &type metadata for UnsafeRawBufferPointer;
    unint64_t v59 = &protocol witness table for UnsafeRawBufferPointer;
    unint64_t v56 = &v54;
    p_dst = &__dst;
    uint64_t v30 = sub_10001CD44(&v56, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    a3 = *v30;
    if (*v30 && (v31 = v30[1], uint64_t v32 = v31 - a3, v31 != a3))
    {
      if (v32 <= 14)
      {
        *(void *)((char *)&__dst + 6) = 0;
        *(void *)&long long __dst = 0;
        BYTE14(__dst) = v31 - a3;
        memcpy(&__dst, (const void *)a3, v31 - a3);
        id v10 = (int *)__dst;
        uint64_t v9 = (long long *)(DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48));
        sub_1000361E0(v29, v28);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        sub_1000361E0(v29, v28);
        uint64_t v35 = __DataStorage.init(bytes:length:)();
        a3 = v35;
        if ((unint64_t)v32 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          id v10 = (int *)swift_allocObject();
          *((void *)v10 + 2) = 0;
          *((void *)v10 + 3) = v32;
          uint64_t v9 = (long long *)(a3 | 0x8000000000000000);
        }
        else
        {
          id v10 = (int *)(v32 << 32);
          uint64_t v9 = (long long *)(v35 | 0x4000000000000000);
        }
      }
    }
    else
    {
      sub_1000361E0(v29, v28);
      id v10 = 0;
      uint64_t v9 = (long long *)0xC000000000000000;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v56);
    *(void *)&long long __dst = v29;
    *((void *)&__dst + 1) = v28;
    unint64_t v52 = v28;
    uint64_t v58 = &type metadata for Data;
    unint64_t v59 = &protocol witness table for Data;
    unint64_t v56 = v10;
    p_dst = v9;
    uint64_t v33 = sub_10001CD44(&v56, (uint64_t)&type metadata for Data);
    a2 = *v33;
    unint64_t v34 = v33[1];
    switch(v34 >> 62)
    {
      case 1uLL:
        uint64_t v5 = (int)a2;
        if (a2 >> 32 < (int)a2) {
          goto LABEL_63;
        }
        a3 = v34 & 0x3FFFFFFFFFFFFFFFLL;
        sub_1000361E0(v29, v52);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        sub_1000361E0(a2, v34);
        a5 = __DataStorage._bytes.getter();
        if (a5 && __OFSUB__((int)a2, __DataStorage._offset.getter())) {
          goto LABEL_66;
        }
        __DataStorage._length.getter();
        Data._Representation.append(contentsOf:)();
        sub_10001CFB8(a2, v34);
        goto LABEL_51;
      case 2uLL:
        uint64_t v36 = v34 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v37 = *(void *)(a2 + 16);
        uint64_t v5 = *(void *)(a2 + 24);
        sub_1000361E0(v29, v52);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        swift_retain();
        swift_retain();
        a3 = v36;
        a5 = __DataStorage._bytes.getter();
        if (!a5) {
          goto LABEL_49;
        }
        a3 = v36;
        uint64_t v38 = __DataStorage._offset.getter();
        if (__OFSUB__(v37, v38)) {
          goto LABEL_65;
        }
        a5 += v37 - v38;
LABEL_49:
        BOOL v39 = __OFSUB__(v5, v37);
        v5 -= v37;
        if (v39) {
          goto LABEL_64;
        }
        __DataStorage._length.getter();
        Data._Representation.append(contentsOf:)();
        swift_release();
        swift_release();
LABEL_51:
        uint64_t v5 = v46;
        a5 = v47;
        unint64_t v21 = v52;
LABEL_13:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v56);
        sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
        id v10 = (int *)*((void *)&__dst + 1);
        uint64_t v9 = (long long *)__dst;
        a3 = (uint64_t)&v60;
        Data.append(_:)();
        sub_10001CFB8((uint64_t)v9, (unint64_t)v10);
        sub_10001CFB8(v29, v21);
        unint64_t v19 = v50;
        int64_t v20 = v51;
        break;
      case 3uLL:
        memset(v53, 0, 14);
        unint64_t v21 = v52;
        sub_1000361E0(v29, v52);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
        goto LABEL_12;
      default:
        v53[0] = *v33;
        LOWORD(v53[1]) = v34;
        BYTE2(v53[1]) = BYTE2(v34);
        BYTE3(v53[1]) = BYTE3(v34);
        BYTE4(v53[1]) = BYTE4(v34);
        BYTE5(v53[1]) = BYTE5(v34);
        a2 = (uint64_t)v53 + BYTE6(v34);
        unint64_t v21 = v52;
        sub_1000361E0(v29, v52);
        sub_1000361E0((uint64_t)v10, (unint64_t)v9);
LABEL_12:
        Data._Representation.append(contentsOf:)();
        goto LABEL_13;
    }
  }
LABEL_54:
  swift_release();
  swift_bridgeObjectRelease();
  id v10 = (int *)v60;
  uint64_t v9 = v61;
  Swift::UInt64 v40 = NSFileHandle.offset()();
  if (v41) {
    return sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
  }
  a3 = v40;
  a2 = *a4;
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  *a4 = a2;
  if ((v42 & 1) == 0) {
LABEL_76:
  }
    a2 = (uint64_t)sub_100BBD380((void *)a2);
  if (*(void *)(a2 + 16) <= (int64_t)v45) {
    __break(1u);
  }
  *(void *)(a2 + 8 * v45 + 32) = a3;
  *a4 = a2;
  unint64_t v56 = v10;
  p_dst = v9;
  sub_1000362FC();
  NSFileHandle.write<A>(contentsOf:)();
  return sub_10001CFB8((uint64_t)v10, (unint64_t)v9);
}

void sub_10089B4C0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(void *, id *, uint64_t, uint64_t))
{
  uint64_t v27 = a4;
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(a1);
  if (v5)
  {
  }
  else
  {
    uint64_t v16 = v15;
    sub_10001D4B0(0, (unint64_t *)&unk_1016569A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
    id v17 = sub_10089A3A8((uint64_t)v13, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
    uint64_t v18 = v17;
    if (v16 <= a2) {
      unsigned int v19 = a2;
    }
    else {
      unsigned int v19 = v16;
    }
    if (v19 < *(_DWORD *)(v7 + qword_101650B90)) {
      *(_DWORD *)(v7 + qword_101650B90) = v19;
    }
    int64_t v20 = v27;
    if (*(_DWORD *)(v7 + qword_101650B98) < HIDWORD(v16)) {
      *(_DWORD *)(v7 + qword_101650B98) = HIDWORD(v16);
    }
    id v28 = 0;
    unsigned int v21 = [v17 seekToOffset:4128 error:&v28];
    id v22 = v28;
    if (v21)
    {
      LOBYTE(v28) = 0;
      id v23 = v22;
      do
      {
        v20(v18, &v28, a2, v7);
      }
      while ((v28 & 1) == 0);
    }
    else
    {
      id v25 = v28;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_10089B734(void *a1, unsigned char *a2, void *a3, void **a4)
{
  id v10 = [a1 readDataOfLength:32];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  switch(v13 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(v11) - v11;
      if (!__OFSUB__(HIDWORD(v11), v11))
      {
        uint64_t v14 = (int)v14;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_22;
    case 2uLL:
      uint64_t v16 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_6;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v14 = BYTE6(v13);
LABEL_6:
      if (v14 <= 31)
      {
LABEL_7:
        uint64_t result = sub_10001CFB8(v11, v13);
        *a2 = 1;
        return result;
      }
      sub_1000361E0(v11, v13);
      sub_10089BBF4(v11, v13, (uint64_t)&v24);
      if (v4) {
        goto LABEL_11;
      }
      Swift::UInt32 v5 = v26;
      a2 = v24;
      id v10 = v25;
      if (v26 >= a3)
      {
        sub_1000361E0((uint64_t)v24, (unint64_t)v25);
        unsigned __int8 v21 = Data.subscript.getter();
        sub_10001CFB8((uint64_t)a2, (unint64_t)v10);
        if (v5 < *(_DWORD *)((char *)a4 + qword_101650B90)) {
          *(_DWORD *)((char *)a4 + qword_101650B90) = v5;
        }
        if (*(_DWORD *)((char *)a4 + qword_101650B98) < v5) {
          *(_DWORD *)((char *)a4 + qword_101650B98) = v5;
        }
        unint64_t v6 = v21;
        a4 = (void **)((char *)a4 + qword_101650BB0);
        swift_beginAccess();
        a3 = *a4;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = a3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
LABEL_23:
          a3 = sub_100BBD394(a3);
          *a4 = a3;
        }
        if (a3[2] <= v6)
        {
          __break(1u);
          JUMPOUT(0x10089B984);
        }
        sub_1000361E0((uint64_t)a2, (unint64_t)v10);
        sub_100DD2D64((uint64_t)v23, (uint64_t)a2, (unint64_t)v10, v5);
        sub_10001CFB8(v23[0], v23[1]);
        swift_endAccess();
        sub_10001CFB8(v11, v13);
        uint64_t v19 = (uint64_t)a2;
        unint64_t v20 = (unint64_t)v10;
      }
      else
      {
        sub_10001CFB8((uint64_t)v24, (unint64_t)v25);
LABEL_11:
        uint64_t v19 = v11;
        unint64_t v20 = v13;
      }
      return sub_10001CFB8(v19, v20);
  }
}

uint64_t sub_10089B994(void *a1, unsigned char *a2, void *a3, void **a4)
{
  id v10 = [a1 readDataOfLength:10];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  switch(v13 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(v11) - v11;
      if (!__OFSUB__(HIDWORD(v11), v11))
      {
        uint64_t v14 = (int)v14;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_22;
    case 2uLL:
      uint64_t v16 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_6;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v14 = BYTE6(v13);
LABEL_6:
      if (v14 <= 9)
      {
LABEL_7:
        uint64_t result = sub_10001CFB8(v11, v13);
        *a2 = 1;
        return result;
      }
      sub_1000361E0(v11, v13);
      sub_10089C01C(v11, v13, (uint64_t)&v24);
      if (v4) {
        goto LABEL_11;
      }
      Swift::UInt32 v5 = v26;
      a2 = v24;
      id v10 = v25;
      if (v26 >= a3)
      {
        sub_1000361E0((uint64_t)v24, (unint64_t)v25);
        unsigned __int8 v21 = Data.subscript.getter();
        sub_10001CFB8((uint64_t)a2, (unint64_t)v10);
        if (v5 < *(_DWORD *)((char *)a4 + qword_101650B90)) {
          *(_DWORD *)((char *)a4 + qword_101650B90) = v5;
        }
        if (*(_DWORD *)((char *)a4 + qword_101650B98) < v5) {
          *(_DWORD *)((char *)a4 + qword_101650B98) = v5;
        }
        unint64_t v6 = v21;
        a4 = (void **)((char *)a4 + qword_101650BB0);
        swift_beginAccess();
        a3 = *a4;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = a3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
LABEL_23:
          a3 = sub_100BBD45C(a3);
          *a4 = a3;
        }
        if (a3[2] <= v6)
        {
          __break(1u);
          JUMPOUT(0x10089BBE4);
        }
        sub_1000361E0((uint64_t)a2, (unint64_t)v10);
        sub_100DD53E0((uint64_t)v23, (uint64_t)a2, (unint64_t)v10, v5);
        sub_10001CFB8(v23[0], v23[1]);
        swift_endAccess();
        sub_10001CFB8(v11, v13);
        uint64_t v19 = (uint64_t)a2;
        unint64_t v20 = (unint64_t)v10;
      }
      else
      {
        sub_10001CFB8((uint64_t)v24, (unint64_t)v25);
LABEL_11:
        uint64_t v19 = v11;
        unint64_t v20 = v13;
      }
      return sub_10001CFB8(v19, v20);
  }
}

uint64_t sub_10089BBF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_1000361E0(a1, a2);
  sub_100886210(4, a1, a2, &v43);
  uint64_t v8 = v43;
  unint64_t v9 = v44;
  switch(v44 >> 62)
  {
    case 1uLL:
      uint64_t v41 = a3;
      uint64_t v12 = (v43 >> 32) - (int)v43;
      if (v43 >> 32 < (int)v43) {
        goto LABEL_46;
      }
      sub_1000361E0(v43, v44);
      unint64_t v13 = (unsigned int *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_9;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v8, v14)) {
        goto LABEL_48;
      }
      unint64_t v13 = (unsigned int *)((char *)v13 + (int)v8 - v14);
LABEL_9:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v8 >> 32) - (int)v8;
      }
      else {
        uint64_t v16 = v15;
      }
      BOOL v17 = (char *)v13 + v16;
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v10 = sub_10089C444(v13, v18);
      sub_10001CFB8(v8, v9);
      if (v3) {
        goto LABEL_16;
      }
      goto LABEL_28;
    case 2uLL:
      uint64_t v41 = a3;
      int v42 = v7;
      uint64_t v21 = *(void *)(v43 + 16);
      uint64_t v22 = *(void *)(v43 + 24);
      swift_retain();
      swift_retain();
      id v23 = (unsigned int *)__DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_20;
      }
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v24)) {
        goto LABEL_49;
      }
      id v23 = (unsigned int *)((char *)v23 + v21 - v24);
LABEL_20:
      BOOL v25 = __OFSUB__(v22, v21);
      uint64_t v26 = v22 - v21;
      if (v25) {
        goto LABEL_47;
      }
      uint64_t v27 = __DataStorage._length.getter();
      if (v27 >= v26) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      uint64_t v29 = (char *)v23 + v28;
      if (v23) {
        uint64_t v30 = (uint64_t)v29;
      }
      else {
        uint64_t v30 = 0;
      }
      int v10 = sub_10089C444(v23, v30);
      swift_release();
      swift_release();
      LODWORD(v7) = v42;
      if (v3) {
        goto LABEL_16;
      }
LABEL_28:
      a3 = v41;
      goto LABEL_29;
    case 3uLL:
      goto LABEL_4;
    default:
      if ((v44 & 0xFC000000000000) != 0)
      {
        int v10 = v43;
LABEL_29:
        sub_10001CFB8(v8, v9);
        uint64_t v31 = 0;
        switch((int)v7)
        {
          case 1:
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_50;
            }
            uint64_t v31 = HIDWORD(a1) - (int)a1;
LABEL_34:
            sub_1000361E0(a1, a2);
LABEL_35:
            if (__OFSUB__(v31, 4))
            {
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
            }
            sub_100435A9C(v31 - 4, a1, a2, &v43);
            uint64_t v34 = v43;
            unint64_t v35 = v44;
            switch(v44 >> 62)
            {
              case 1uLL:
                LODWORD(v36) = HIDWORD(v43) - v43;
                if (__OFSUB__(HIDWORD(v43), v43)) {
                  goto LABEL_52;
                }
                uint64_t v36 = (int)v36;
LABEL_41:
                if (v36 == 28)
                {
                  uint64_t result = sub_10001CFB8(a1, a2);
                  *(void *)a3 = v34;
                  *(void *)(a3 + 8) = v35;
                  *(_DWORD *)(a3 + 16) = v10;
                  return result;
                }
LABEL_43:
                sub_10001CFB8(v43, v44);
                sub_10000588C(&qword_1016505B8);
                sub_100062734(&qword_1016505C0, &qword_1016505B8);
                swift_allocError();
                *(_DWORD *)uint64_t v40 = 1;
                *(unsigned char *)(v40 + 4) = 2;
                swift_willThrow();
                uint64_t v19 = a1;
                unint64_t v20 = a2;
                break;
              case 2uLL:
                uint64_t v38 = *(void *)(v43 + 16);
                uint64_t v37 = *(void *)(v43 + 24);
                BOOL v25 = __OFSUB__(v37, v38);
                uint64_t v36 = v37 - v38;
                if (!v25) {
                  goto LABEL_41;
                }
                goto LABEL_53;
              case 3uLL:
                goto LABEL_43;
              default:
                uint64_t v36 = BYTE6(v44);
                goto LABEL_41;
            }
            break;
          case 2:
            uint64_t v33 = *(void *)(a1 + 16);
            uint64_t v32 = *(void *)(a1 + 24);
            uint64_t v31 = v32 - v33;
            if (!__OFSUB__(v32, v33)) {
              goto LABEL_34;
            }
            goto LABEL_51;
          case 3:
            goto LABEL_35;
          default:
            uint64_t v31 = BYTE6(a2);
            goto LABEL_35;
        }
      }
      else
      {
LABEL_4:
        sub_10000588C(&qword_1016505B8);
        sub_100062734(&qword_1016505C0, &qword_1016505B8);
        swift_allocError();
        *(_DWORD *)uint64_t v11 = 1;
        *(unsigned char *)(v11 + 4) = 2;
        swift_willThrow();
LABEL_16:
        sub_10001CFB8(a1, a2);
        uint64_t v19 = v8;
        unint64_t v20 = v9;
      }
      return sub_10001CFB8(v19, v20);
  }
}

uint64_t sub_10089C01C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_1000361E0(a1, a2);
  sub_100886210(4, a1, a2, &v43);
  uint64_t v8 = v43;
  unint64_t v9 = v44;
  switch(v44 >> 62)
  {
    case 1uLL:
      uint64_t v41 = a3;
      uint64_t v12 = (v43 >> 32) - (int)v43;
      if (v43 >> 32 < (int)v43) {
        goto LABEL_46;
      }
      sub_1000361E0(v43, v44);
      unint64_t v13 = (unsigned int *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_9;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v8, v14)) {
        goto LABEL_48;
      }
      unint64_t v13 = (unsigned int *)((char *)v13 + (int)v8 - v14);
LABEL_9:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v8 >> 32) - (int)v8;
      }
      else {
        uint64_t v16 = v15;
      }
      BOOL v17 = (char *)v13 + v16;
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v10 = sub_10089C4EC(v13, v18);
      sub_10001CFB8(v8, v9);
      if (v3) {
        goto LABEL_16;
      }
      goto LABEL_28;
    case 2uLL:
      uint64_t v41 = a3;
      int v42 = v7;
      uint64_t v21 = *(void *)(v43 + 16);
      uint64_t v22 = *(void *)(v43 + 24);
      swift_retain();
      swift_retain();
      id v23 = (unsigned int *)__DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_20;
      }
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v24)) {
        goto LABEL_49;
      }
      id v23 = (unsigned int *)((char *)v23 + v21 - v24);
LABEL_20:
      BOOL v25 = __OFSUB__(v22, v21);
      uint64_t v26 = v22 - v21;
      if (v25) {
        goto LABEL_47;
      }
      uint64_t v27 = __DataStorage._length.getter();
      if (v27 >= v26) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      uint64_t v29 = (char *)v23 + v28;
      if (v23) {
        uint64_t v30 = (uint64_t)v29;
      }
      else {
        uint64_t v30 = 0;
      }
      int v10 = sub_10089C4EC(v23, v30);
      swift_release();
      swift_release();
      LODWORD(v7) = v42;
      if (v3) {
        goto LABEL_16;
      }
LABEL_28:
      a3 = v41;
      goto LABEL_29;
    case 3uLL:
      goto LABEL_4;
    default:
      if ((v44 & 0xFC000000000000) != 0)
      {
        int v10 = v43;
LABEL_29:
        sub_10001CFB8(v8, v9);
        uint64_t v31 = 0;
        switch((int)v7)
        {
          case 1:
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_50;
            }
            uint64_t v31 = HIDWORD(a1) - (int)a1;
LABEL_34:
            sub_1000361E0(a1, a2);
LABEL_35:
            if (__OFSUB__(v31, 4))
            {
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
            }
            sub_100435A9C(v31 - 4, a1, a2, &v43);
            uint64_t v34 = v43;
            unint64_t v35 = v44;
            switch(v44 >> 62)
            {
              case 1uLL:
                LODWORD(v36) = HIDWORD(v43) - v43;
                if (__OFSUB__(HIDWORD(v43), v43)) {
                  goto LABEL_52;
                }
                uint64_t v36 = (int)v36;
LABEL_41:
                if (v36 == 6)
                {
                  uint64_t result = sub_10001CFB8(a1, a2);
                  *(void *)a3 = v34;
                  *(void *)(a3 + 8) = v35;
                  *(_DWORD *)(a3 + 16) = v10;
                  return result;
                }
LABEL_43:
                sub_10001CFB8(v43, v44);
                sub_10000588C(&qword_101650688);
                sub_100062734(&qword_101650690, &qword_101650688);
                swift_allocError();
                *(_DWORD *)uint64_t v40 = 1;
                *(unsigned char *)(v40 + 4) = 2;
                swift_willThrow();
                uint64_t v19 = a1;
                unint64_t v20 = a2;
                break;
              case 2uLL:
                uint64_t v38 = *(void *)(v43 + 16);
                uint64_t v37 = *(void *)(v43 + 24);
                BOOL v25 = __OFSUB__(v37, v38);
                uint64_t v36 = v37 - v38;
                if (!v25) {
                  goto LABEL_41;
                }
                goto LABEL_53;
              case 3uLL:
                goto LABEL_43;
              default:
                uint64_t v36 = BYTE6(v44);
                goto LABEL_41;
            }
            break;
          case 2:
            uint64_t v33 = *(void *)(a1 + 16);
            uint64_t v32 = *(void *)(a1 + 24);
            uint64_t v31 = v32 - v33;
            if (!__OFSUB__(v32, v33)) {
              goto LABEL_34;
            }
            goto LABEL_51;
          case 3:
            goto LABEL_35;
          default:
            uint64_t v31 = BYTE6(a2);
            goto LABEL_35;
        }
      }
      else
      {
LABEL_4:
        sub_10000588C(&qword_101650688);
        sub_100062734(&qword_101650690, &qword_101650688);
        swift_allocError();
        *(_DWORD *)uint64_t v11 = 1;
        *(unsigned char *)(v11 + 4) = 2;
        swift_willThrow();
LABEL_16:
        sub_10001CFB8(a1, a2);
        uint64_t v19 = v8;
        unint64_t v20 = v9;
      }
      return sub_10001CFB8(v19, v20);
  }
}

uint64_t sub_10089C444(unsigned int *a1, uint64_t a2)
{
  if (a1 && (unint64_t)(a2 - (void)a1 + 3) >= 7) {
    return *a1;
  }
  sub_10000588C(&qword_1016505B8);
  sub_100062734(&qword_1016505C0, &qword_1016505B8);
  swift_allocError();
  *(_DWORD *)uint64_t v3 = 1;
  *(unsigned char *)(v3 + 4) = 2;
  return swift_willThrow();
}

uint64_t sub_10089C4EC(unsigned int *a1, uint64_t a2)
{
  if (a1 && (unint64_t)(a2 - (void)a1 + 3) >= 7) {
    return *a1;
  }
  sub_10000588C(&qword_101650688);
  sub_100062734(&qword_101650690, &qword_101650688);
  swift_allocError();
  *(_DWORD *)uint64_t v3 = 1;
  *(unsigned char *)(v3 + 4) = 2;
  return swift_willThrow();
}

uint64_t sub_10089C594(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *sub_10089C5FC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_1008AA688(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1008AA74C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_1008AA7C8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10089C674(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int sub_10089C708(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v139 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  uint64_t v4 = *(void *)(v139 - 8);
  uint64_t v5 = __chkstk_darwin(v139);
  uint64_t v127 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v140 = (uint64_t)&v121 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v121 - v10;
  __chkstk_darwin(v9);
  uint64_t v137 = (uint64_t)&v121 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_140;
    }
    if (v12) {
      return sub_10089D88C(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_148;
  }
  Swift::Int v124 = result;
  uint64_t v131 = v4;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v129 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unint64_t v123 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v20 >= 2)
      {
        uint64_t v114 = *a1;
        do
        {
          unint64_t v115 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_135;
          }
          if (!v114) {
            goto LABEL_147;
          }
          uint64_t v116 = v18;
          uint64_t v117 = *(void *)&v18[16 * v115 + 32];
          uint64_t v118 = *(void *)&v18[16 * v20 + 24];
          sub_10089DBD0(v114 + *(void *)(v131 + 72) * v117, v114 + *(void *)(v131 + 72) * *(void *)&v18[16 * v20 + 16], v114 + *(void *)(v131 + 72) * v118, v129);
          if (v2) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v116 = sub_100B73584((uint64_t)v18);
          }
          if (v115 >= *((void *)v116 + 2)) {
            goto LABEL_137;
          }
          uint64_t v119 = &v116[16 * v115 + 32];
          *(void *)uint64_t v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v116 + 2);
          if (v20 > v120) {
            goto LABEL_138;
          }
          memmove(&v116[16 * v20 + 16], &v116[16 * v20 + 32], 16 * (v120 - v20));
          *((void *)v116 + 2) = v120 - 1;
          unint64_t v20 = v120 - 1;
          uint64_t v18 = v116;
        }
        while (v120 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v123[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v123 = (void *)v16;
    unint64_t v129 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v134 = v136 + 8;
  uint64_t v135 = v137 + 8;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v130 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      Swift::Int v27 = v19 + 1;
      Swift::Int v36 = v19;
      goto LABEL_58;
    }
    unint64_t v125 = v18;
    Swift::Int v23 = *a1;
    Swift::Int v24 = *(void *)(v131 + 72);
    sub_10089C594(*a1 + v24 * v22, v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    uint64_t v25 = v136;
    sub_10089C594(v23 + v24 * v21, v136, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    uint64_t v26 = *(int *)(v139 + 20);
    LODWORD(v138) = *(_DWORD *)(v135 + v26);
    LODWORD(v133) = *(_DWORD *)(v134 + v26);
    sub_1008AA93C(v25, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    sub_1008AA93C(v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    Swift::Int v128 = v21;
    Swift::Int v27 = v21 + 2;
    Swift::Int v142 = v12;
    Swift::Int v126 = v23;
    Swift::Int v141 = v24;
    if (v21 + 2 >= v12)
    {
      Swift::Int v35 = v24;
    }
    else
    {
      uint64_t v132 = v24 * v22;
      Swift::Int v28 = v23;
      Swift::Int v29 = v24 * v27;
      while (1)
      {
        Swift::Int v30 = v27;
        int v31 = v138 < v133;
        uint64_t v32 = v137;
        sub_10089C594(v28 + v29, v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v33 = v136;
        sub_10089C594(v28 + v132, v136, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        int v34 = *(_DWORD *)(v135 + *(int *)(v139 + 20)) >= *(_DWORD *)(v134 + *(int *)(v139 + 20));
        sub_1008AA93C(v33, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1008AA93C(v32, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        if (v31 == v34) {
          break;
        }
        ++v27;
        Swift::Int v35 = v141;
        v28 += v141;
        Swift::Int v12 = v142;
        if (v142 == v30 + 1)
        {
          Swift::Int v27 = v142;
          a1 = v130;
          goto LABEL_24;
        }
      }
      a1 = v130;
      Swift::Int v12 = v142;
      Swift::Int v35 = v141;
    }
LABEL_24:
    Swift::Int v36 = v128;
    if (v138 >= v133) {
      break;
    }
    uint64_t v18 = v125;
    if (v27 < v128) {
      goto LABEL_141;
    }
    if (v128 >= v27) {
      goto LABEL_38;
    }
    uint64_t v122 = v2;
    uint64_t v37 = 0;
    uint64_t v38 = v35 * (v27 - 1);
    Swift::Int v39 = v27 * v35;
    Swift::Int v40 = v128;
    uint64_t v41 = v128 * v35;
    do
    {
      if (v40 != v27 + v37 - 1)
      {
        Swift::Int v42 = v126;
        if (!v126) {
          goto LABEL_146;
        }
        Swift::Int v43 = v27;
        unint64_t v44 = v126 + v41;
        uint64_t v45 = v126 + v38;
        sub_1008AB368(v126 + v41, v127, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        if (v41 < v38 || v44 >= v42 + v39)
        {
          swift_arrayInitWithTakeFrontToBack();
          Swift::Int v35 = v141;
        }
        else
        {
          Swift::Int v35 = v141;
          if (v41 != v38) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_1008AB368(v127, v45, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        Swift::Int v27 = v43;
        Swift::Int v12 = v142;
      }
      ++v40;
      --v37;
      v38 -= v35;
      v39 -= v35;
      v41 += v35;
    }
    while (v40 < v27 + v37);
    uint64_t v2 = v122;
    a1 = v130;
    uint64_t v18 = v125;
    Swift::Int v36 = v128;
    if (v27 < v12) {
      goto LABEL_39;
    }
LABEL_58:
    if (v27 < v36) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v138 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_100B729CC(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v64 = *((void *)v18 + 2);
    unint64_t v63 = *((void *)v18 + 3);
    unint64_t v20 = v64 + 1;
    if (v64 >= v63 >> 1) {
      uint64_t v18 = sub_100B729CC((char *)(v63 > 1), v64 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    id v65 = v18 + 32;
    unint64_t v66 = &v18[16 * v64 + 32];
    Swift::Int v67 = v138;
    *(void *)unint64_t v66 = v36;
    *((void *)v66 + 1) = v67;
    if (v64)
    {
      while (1)
      {
        unint64_t v68 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v73 = &v65[16 * v20];
          uint64_t v74 = *((void *)v73 - 8);
          uint64_t v75 = *((void *)v73 - 7);
          BOOL v79 = __OFSUB__(v75, v74);
          uint64_t v76 = v75 - v74;
          if (v79) {
            goto LABEL_123;
          }
          uint64_t v78 = *((void *)v73 - 6);
          uint64_t v77 = *((void *)v73 - 5);
          BOOL v79 = __OFSUB__(v77, v78);
          uint64_t v71 = v77 - v78;
          char v72 = v79;
          if (v79) {
            goto LABEL_124;
          }
          unint64_t v80 = v20 - 2;
          uint64_t v81 = &v65[16 * v20 - 32];
          uint64_t v83 = *(void *)v81;
          uint64_t v82 = *((void *)v81 + 1);
          BOOL v79 = __OFSUB__(v82, v83);
          uint64_t v84 = v82 - v83;
          if (v79) {
            goto LABEL_126;
          }
          BOOL v79 = __OFADD__(v71, v84);
          uint64_t v85 = v71 + v84;
          if (v79) {
            goto LABEL_129;
          }
          if (v85 >= v76)
          {
            uint64_t v103 = &v65[16 * v68];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            BOOL v79 = __OFSUB__(v104, v105);
            uint64_t v106 = v104 - v105;
            if (v79) {
              goto LABEL_133;
            }
            BOOL v96 = v71 < v106;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v97 = *((void *)v18 + 4);
            uint64_t v98 = *((void *)v18 + 5);
            BOOL v79 = __OFSUB__(v98, v97);
            uint64_t v90 = v98 - v97;
            char v91 = v79;
            goto LABEL_89;
          }
          uint64_t v70 = *((void *)v18 + 4);
          uint64_t v69 = *((void *)v18 + 5);
          BOOL v79 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          char v72 = v79;
        }
        if (v72) {
          goto LABEL_125;
        }
        unint64_t v80 = v20 - 2;
        unint64_t v86 = &v65[16 * v20 - 32];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v89 = __OFSUB__(v87, v88);
        uint64_t v90 = v87 - v88;
        char v91 = v89;
        if (v89) {
          goto LABEL_128;
        }
        uint64_t v92 = &v65[16 * v68];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v79 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v79) {
          goto LABEL_131;
        }
        if (__OFADD__(v90, v95)) {
          goto LABEL_132;
        }
        if (v90 + v95 >= v71)
        {
          BOOL v96 = v71 < v95;
LABEL_95:
          if (v96) {
            unint64_t v68 = v80;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v91) {
          goto LABEL_127;
        }
        unint64_t v99 = &v65[16 * v68];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v79 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v79) {
          goto LABEL_130;
        }
        if (v102 < v90) {
          goto LABEL_14;
        }
LABEL_97:
        uint64_t v107 = v18;
        unint64_t v108 = v68 - 1;
        if (v68 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v130) {
          goto LABEL_145;
        }
        uint64_t v109 = &v65[16 * v108];
        uint64_t v110 = *(void *)v109;
        unint64_t v111 = &v65[16 * v68];
        uint64_t v112 = *((void *)v111 + 1);
        sub_10089DBD0(*v130 + *(void *)(v131 + 72) * *(void *)v109, *v130 + *(void *)(v131 + 72) * *(void *)v111, *v130 + *(void *)(v131 + 72) * v112, v129);
        if (v2) {
          goto LABEL_117;
        }
        if (v112 < v110) {
          goto LABEL_120;
        }
        if (v68 > *((void *)v107 + 2)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v109 = v110;
        *(void *)&v65[16 * v108 + 8] = v112;
        unint64_t v113 = *((void *)v107 + 2);
        if (v68 >= v113) {
          goto LABEL_122;
        }
        uint64_t v18 = v107;
        unint64_t v20 = v113 - 1;
        memmove(&v65[16 * v68], v111 + 16, 16 * (v113 - 1 - v68));
        *((void *)v107 + 2) = v113 - 1;
        if (v113 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    a1 = v130;
    Swift::Int v12 = v130[1];
    Swift::Int v19 = v138;
    if (v138 >= v12) {
      goto LABEL_106;
    }
  }
  uint64_t v18 = v125;
LABEL_38:
  if (v27 >= v12) {
    goto LABEL_58;
  }
LABEL_39:
  if (__OFSUB__(v27, v36)) {
    goto LABEL_139;
  }
  if (v27 - v36 >= v124) {
    goto LABEL_58;
  }
  if (__OFADD__(v36, v124)) {
    goto LABEL_142;
  }
  if (v36 + v124 >= v12) {
    Swift::Int v46 = v12;
  }
  else {
    Swift::Int v46 = v36 + v124;
  }
  if (v46 >= v36)
  {
    if (v27 != v46)
    {
      Swift::Int v128 = v36;
      unint64_t v125 = v18;
      Swift::Int v126 = v46;
      uint64_t v122 = v2;
      uint64_t v47 = *(void *)(v131 + 72);
      uint64_t v48 = v47 * (v27 - 1);
      uint64_t v132 = v47;
      Swift::Int v49 = v27 * v47;
      do
      {
        uint64_t v51 = 0;
        Swift::Int v52 = v128;
        Swift::Int v138 = v27;
        Swift::Int v133 = v49;
        while (1)
        {
          Swift::Int v141 = v52;
          uint64_t v53 = *a1;
          uint64_t v54 = v49 + v51 + *a1;
          uint64_t v55 = v137;
          sub_10089C594(v54, v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v56 = v48;
          uint64_t v57 = v48 + v51 + v53;
          uint64_t v58 = v136;
          sub_10089C594(v57, v136, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v59 = *(int *)(v139 + 20);
          LODWORD(v142) = *(_DWORD *)(v135 + v59);
          LODWORD(v53) = *(_DWORD *)(v134 + v59);
          sub_1008AA93C(v58, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_1008AA93C(v55, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v142 >= v53) {
            break;
          }
          uint64_t v60 = *a1;
          if (!*a1) {
            goto LABEL_144;
          }
          Swift::Int v49 = v133;
          uint64_t v48 = v56;
          uint64_t v61 = v60 + v56 + v51;
          sub_1008AB368(v60 + v133 + v51, v140, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          swift_arrayInitWithTakeFrontToBack();
          sub_1008AB368(v140, v61, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v51 -= v132;
          Swift::Int v52 = v141 + 1;
          Swift::Int v50 = v138;
          if (v138 == v141 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v50 = v138;
        uint64_t v48 = v56;
        Swift::Int v49 = v133;
LABEL_49:
        Swift::Int v27 = v50 + 1;
        v48 += v132;
        v49 += v132;
      }
      while (v27 != v126);
      Swift::Int v27 = v126;
      uint64_t v2 = v122;
      uint64_t v18 = v125;
      Swift::Int v36 = v128;
    }
    goto LABEL_58;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10089D218(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_130;
    }
    if (v3) {
      return sub_10089DB60(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_138;
  }
  Swift::Int v6 = result;
  uint64_t v90 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    long long __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      uint64_t v82 = v12;
      uint64_t v93 = v9;
      if (v13 >= 2)
      {
        uint64_t v83 = *v90;
        do
        {
          unint64_t v84 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_125;
          }
          if (!v83) {
            goto LABEL_137;
          }
          uint64_t v85 = v82;
          uint64_t v86 = *(void *)&v82[16 * v84 + 32];
          uint64_t v87 = *(void *)&v82[16 * v13 + 24];
          sub_10089E158((char *)(v83 + 8 * v86), (char *)(v83 + 8 * *(void *)&v82[16 * v13 + 16]), v83 + 8 * v87, __dst);
          if (v1) {
            break;
          }
          if (v87 < v86) {
            goto LABEL_126;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v85 = sub_100B73584((uint64_t)v85);
          }
          if (v84 >= *((void *)v85 + 2)) {
            goto LABEL_127;
          }
          uint64_t v88 = &v85[16 * v84 + 32];
          *(void *)uint64_t v88 = v86;
          *((void *)v88 + 1) = v87;
          unint64_t v89 = *((void *)v85 + 2);
          if (v13 > v89) {
            goto LABEL_128;
          }
          memmove(&v85[16 * v13 + 16], &v85[16 * v13 + 32], 16 * (v89 - v13));
          uint64_t v82 = v85;
          *((void *)v85 + 2) = v89 - 1;
          unint64_t v13 = v89 - 1;
        }
        while (v89 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v93[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v93 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_10000588C(&qword_101650680);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v93 = (void *)v8;
    long long __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v91 = *a1 - 8;
  uint64_t v92 = *a1 + 16;
  Swift::Int v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v94 = v6;
  Swift::Int v95 = v3;
  uint64_t v96 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 8 * v10);
      unsigned int v16 = *(_DWORD *)(v11 + 8 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (unsigned int *)(v92 + 8 * v14);
        unsigned int v18 = v15;
        while (1)
        {
          unsigned int v20 = *v17;
          v17 += 2;
          unsigned int v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unsigned int v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_131;
        }
        if (v14 < v10)
        {
          Swift::Int v21 = (uint64_t *)(v91 + 8 * v10);
          Swift::Int v22 = v10;
          Swift::Int v23 = v14;
          Swift::Int v24 = (uint64_t *)(v11 + 8 * v14);
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_136;
              }
              uint64_t v25 = *v24;
              uint64_t *v24 = *v21;
              *Swift::Int v21 = v25;
            }
            ++v23;
            --v21;
            ++v24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_129;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v26 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_132;
    }
    if (v26 >= v3) {
      Swift::Int v26 = v3;
    }
    if (v26 < v14) {
      break;
    }
    if (v10 != v26)
    {
      uint64_t v27 = v91 + 8 * v10;
      do
      {
        unsigned int v28 = *(_DWORD *)(v11 + 8 * v10);
        Swift::Int v29 = v14;
        uint64_t v30 = v27;
        do
        {
          if (v28 >= *(_DWORD *)v30) {
            break;
          }
          if (!v11) {
            goto LABEL_134;
          }
          int v31 = *(_DWORD *)(v30 + 12);
          *(void *)(v30 + 8) = *(void *)v30;
          *(_DWORD *)uint64_t v30 = v28;
          *(_DWORD *)(v30 + 4) = v31;
          v30 -= 8;
          ++v29;
        }
        while (v10 != v29);
        ++v10;
        v27 += 8;
      }
      while (v10 != v26);
      Swift::Int v10 = v26;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_124;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v33 = *((void *)v12 + 2);
    unint64_t v32 = *((void *)v12 + 3);
    unint64_t v13 = v33 + 1;
    uint64_t v11 = v96;
    if (v33 >= v32 >> 1)
    {
      uint64_t v81 = sub_100B729CC((char *)(v32 > 1), v33 + 1, 1, v12);
      uint64_t v11 = v96;
      Swift::Int v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    int v34 = v12 + 32;
    Swift::Int v35 = &v12[16 * v33 + 32];
    *(void *)Swift::Int v35 = v14;
    *((void *)v35 + 1) = v10;
    if (v33)
    {
      while (1)
      {
        unint64_t v36 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v41 = &v34[16 * v13];
          uint64_t v42 = *((void *)v41 - 8);
          uint64_t v43 = *((void *)v41 - 7);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_113;
          }
          uint64_t v46 = *((void *)v41 - 6);
          uint64_t v45 = *((void *)v41 - 5);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_114;
          }
          unint64_t v48 = v13 - 2;
          Swift::Int v49 = &v34[16 * v13 - 32];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_116;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_119;
          }
          if (v53 >= v44)
          {
            uint64_t v71 = &v34[16 * v36];
            uint64_t v73 = *(void *)v71;
            uint64_t v72 = *((void *)v71 + 1);
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_123;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v65 = *((void *)v12 + 4);
            uint64_t v66 = *((void *)v12 + 5);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_77;
          }
          uint64_t v38 = *((void *)v12 + 4);
          uint64_t v37 = *((void *)v12 + 5);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }
        if (v40) {
          goto LABEL_115;
        }
        unint64_t v48 = v13 - 2;
        uint64_t v54 = &v34[16 * v13 - 32];
        uint64_t v56 = *(void *)v54;
        uint64_t v55 = *((void *)v54 + 1);
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_118;
        }
        uint64_t v60 = &v34[16 * v36];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_121;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_122;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_83:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v59) {
          goto LABEL_117;
        }
        Swift::Int v67 = &v34[16 * v36];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_120;
        }
        if (v70 < v58) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v13)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v11) {
          goto LABEL_135;
        }
        uint64_t v76 = &v34[16 * v75];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v34[16 * v36];
        uint64_t v79 = *((void *)v78 + 1);
        sub_10089E158((char *)(v11 + 8 * *(void *)v76), (char *)(v11 + 8 * *(void *)v78), v11 + 8 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_110;
        }
        if (v36 > *((void *)v12 + 2)) {
          goto LABEL_111;
        }
        *(void *)uint64_t v76 = v77;
        *(void *)&v34[16 * v75 + 8] = v79;
        unint64_t v80 = *((void *)v12 + 2);
        if (v36 >= v80) {
          goto LABEL_112;
        }
        unint64_t v13 = v80 - 1;
        memmove(&v34[16 * v36], v78 + 16, 16 * (v80 - 1 - v36));
        *((void *)v12 + 2) = v80 - 1;
        uint64_t v11 = v96;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v94;
    Swift::Int v3 = v95;
    if (v10 >= v95)
    {
      uint64_t v9 = v93;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10089D88C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v32 = a1;
  uint64_t v40 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  uint64_t v7 = __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v37 = (uint64_t)&v30 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)&v30 - v13;
  uint64_t v39 = a3;
  uint64_t v31 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v34 = v37 + 8;
    uint64_t v35 = v36 + 8;
    uint64_t v15 = v14 * (v39 - 1);
    uint64_t v38 = v14;
    uint64_t v16 = v14 * v39;
    unint64_t v33 = a4;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v32;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v16 + v17 + *a4;
      uint64_t v21 = v36;
      sub_10089C594(v20, v36, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v22 = v15 + v17 + v19;
      uint64_t v23 = v15;
      uint64_t v24 = v37;
      sub_10089C594(v22, v37, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v25 = *(int *)(v40 + 20);
      unsigned int v26 = *(_DWORD *)(v35 + v25);
      unsigned int v42 = *(_DWORD *)(v34 + v25);
      unsigned int v43 = v26;
      uint64_t v27 = v24;
      uint64_t v15 = v23;
      sub_1008AA93C(v27, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t result = sub_1008AA93C(v21, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      a4 = v33;
      if (v43 >= v42)
      {
LABEL_4:
        uint64_t v15 = v23 + v38;
        v16 += v38;
        if (++v39 == v31) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v28 = *v33;
      if (!*v33) {
        break;
      }
      uint64_t v29 = v28 + v23 + v17;
      sub_1008AB368(v28 + v16 + v17, v41, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1008AB368(v41, v29, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v17 -= v38;
      if (v39 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10089DB60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    unsigned int v6 = *(_DWORD *)(v4 + 8 * a3);
    uint64_t v7 = result;
    uint64_t v8 = v5;
    while (1)
    {
      if (v6 >= *(_DWORD *)v8)
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      int v9 = *(_DWORD *)(v8 + 12);
      *(void *)(v8 + 8) = *(void *)v8;
      *(_DWORD *)uint64_t v8 = v6;
      *(_DWORD *)(v8 + 4) = v9;
      v8 -= 8;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10089DBD0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  uint64_t v8 = __chkstk_darwin(v53);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v45 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_68;
  }
  int64_t v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_69;
  }
  uint64_t v14 = (uint64_t)(a2 - a1) / v12;
  unint64_t v56 = a1;
  unint64_t v55 = a4;
  uint64_t v15 = v13 / v12;
  if (v14 >= v13 / v12)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = v15 * v12;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v31 = a4 + v17;
      unint64_t v54 = a4 + v17;
      unint64_t v56 = a2;
      BOOL v32 = v17 < 1 || a1 >= a2;
      uint64_t v33 = v53;
      if (!v32)
      {
        uint64_t v34 = -v12;
        uint64_t v35 = (uint64_t)v51;
        uint64_t v47 = v52 + 8;
        unint64_t v48 = v51 + 8;
        unint64_t v49 = a4;
        unint64_t v46 = a1;
        do
        {
          unint64_t v50 = a3 + v34;
          sub_10089C594(v31 + v34, v35, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          unint64_t v36 = a2 + v34;
          uint64_t v37 = v52;
          sub_10089C594(a2 + v34, v52, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v38 = *(int *)(v33 + 20);
          unsigned int v39 = *(_DWORD *)&v48[v38];
          unsigned int v40 = *(_DWORD *)(v47 + v38);
          sub_1008AA93C(v37, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_1008AA93C(v35, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v39 >= v40)
          {
            unint64_t v43 = v54;
            v54 += v34;
            unint64_t v41 = v50;
            if (a3 < v43 || v50 >= v43)
            {
              uint64_t v33 = v53;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = a2;
              unint64_t v42 = v49;
            }
            else
            {
              uint64_t v33 = v53;
              unint64_t v42 = v49;
              if (a3 != v43) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v36 = a2;
            }
          }
          else
          {
            unint64_t v41 = v50;
            if (a3 < a2 || v50 >= a2)
            {
              uint64_t v33 = v53;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = v49;
            }
            else
            {
              uint64_t v33 = v53;
              unint64_t v42 = v49;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v56 += v34;
          }
          unint64_t v31 = v54;
          if (v54 <= v42) {
            break;
          }
          a2 = v36;
          a3 = v41;
        }
        while (v36 > v46);
      }
      goto LABEL_66;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = v14 * v12;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v50 = a4 + v16;
    unint64_t v54 = a4 + v16;
    BOOL v18 = v16 < 1 || a2 >= a3;
    uint64_t v19 = v53;
    if (!v18)
    {
      uint64_t v20 = (uint64_t)v51;
      uint64_t v47 = v52 + 8;
      unint64_t v48 = v51 + 8;
      do
      {
        unint64_t v21 = a3;
        sub_10089C594(a2, v20, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v22 = v52;
        sub_10089C594(a4, v52, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v23 = *(int *)(v19 + 20);
        unsigned int v24 = *(_DWORD *)&v48[v23];
        unsigned int v25 = *(_DWORD *)(v47 + v23);
        sub_1008AA93C(v22, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1008AA93C(v20, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        unint64_t v26 = v56;
        if (v24 >= v25)
        {
          unint64_t v29 = v55 + v12;
          if (v56 < v55 || v56 >= v29)
          {
            uint64_t v19 = v53;
            swift_arrayInitWithTakeFrontToBack();
            a3 = v21;
          }
          else
          {
            a3 = v21;
            uint64_t v19 = v53;
            if (v56 != v55) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v55 = v29;
          unint64_t v27 = a2;
        }
        else
        {
          unint64_t v27 = a2 + v12;
          if (v56 < a2 || v56 >= v27)
          {
            uint64_t v19 = v53;
            swift_arrayInitWithTakeFrontToBack();
            a3 = v21;
          }
          else
          {
            a3 = v21;
            uint64_t v19 = v53;
            if (v56 == a2) {
              unint64_t v26 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        unint64_t v56 = v26 + v12;
        a4 = v55;
        if (v55 >= v50) {
          break;
        }
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_66:
    sub_100B73110(&v56, &v55, (uint64_t *)&v54);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10089E158(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  unsigned int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  unsigned int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      unsigned int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        BOOL v18 = v6;
        while (1)
        {
          uint64_t v19 = v17 + 8;
          unsigned int v20 = *((_DWORD *)v18 - 2);
          v18 -= 8;
          if (*((_DWORD *)v16 - 2) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            BOOL v18 = v6;
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = *(void *)v18;
            }
            unsigned int v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          unsigned int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        unsigned int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      unsigned int v24 = v7;
    }
LABEL_42:
    sub_100B72D80((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10089E3D4(uint64_t a1)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(a1 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v14 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v18) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v14 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v18) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v14 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v18) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v14 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    sub_10089C594(*(void *)(a1 + 48) + *(void *)(v7 + 72) * v21, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
    sub_1008AB368((uint64_t)v13, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    sub_101125EBC((uint64_t)v10, (uint64_t)v5);
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101653D50);
    uint64_t result = sub_1008AA93C((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v18) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v14 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v18) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v14 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10089E68C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v15 >= v7) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = *(void *)(v2 + 48) + 24 * v10;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    swift_bridgeObjectRetain();
    sub_101126134(v12, v13, v14);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v17 = v15 + 4;
  if (v17 < v7)
  {
    unint64_t v16 = *(void *)(v3 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v8 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v8);
        ++v17;
        if (v16) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v17;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_10089E84C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_1000361E0(*v11, v13);
    sub_101126514(v12, v13, &v17);
    sub_100037A24(v17, *((unint64_t *)&v17 + 1));
    uint64_t result = sub_10001CFB8(v12, v13);
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_10089EA08(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v24 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v27 = v4 + 16;
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v25 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v26 = v4 + 48;
  uint64_t v29 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(void *)(v29 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    sub_101126F68((uint64_t)v6, (uint64_t)v10);
    sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v17) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_25;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v17 = (v22 - 1) & v22;
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*v28)(v13, 1, 1, v3);
    return swift_release();
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10089ED90(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = sub_10112728C(*(unsigned char *)(*(void *)(v2 + 48) + v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

void sub_10089EF04(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
      sub_10033149C(&qword_10163C0A0, (unint64_t *)&qword_10163B900);
      Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v3 = v22;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    int64_t v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v10 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v12 = v4;
      }
      else
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v4 + 1;
        if (!v15)
        {
          uint64_t v12 = v4 + 2;
          if (v4 + 2 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 3;
            if (v4 + 3 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v4 + 4;
              if (v4 + 4 >= v9) {
                goto LABEL_36;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  goto LABEL_36;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_100132C20();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
      if (!v13) {
        goto LABEL_36;
      }
      while (1)
      {
        unint64_t v17 = (void *)sub_101127A68(v13);

        uint64_t v4 = v12;
        unint64_t v5 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v4;
          uint64_t v10 = v5;
          if (v19) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
  }
  if (*(void *)(*(void *)v1 + 16)) {
    goto LABEL_5;
  }
}

uint64_t sub_10089F210(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v28 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v22 - v11;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v13 = *(void *)(a1 + 16);
    v22[1] = a1;
    if (v13)
    {
      unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v14 = v4 + 16;
      uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
      uint64_t v17 = *(void *)(v14 + 56);
      unint64_t v18 = v14 + 40;
      int64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
      uint64_t v26 = v15;
      uint64_t v23 = (void (**)(char *, char *, uint64_t))(v14 + 16);
      uint64_t v24 = v17;
      uint64_t v27 = v14;
      unint64_t v19 = (void (**)(char *, uint64_t))(v14 - 8);
      swift_bridgeObjectRetain();
      v22[0] = v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v20 = (uint64_t)v28;
      while (1)
      {
        v26(v12, v16, v3);
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v18;
        (*(void (**)(char *, void, uint64_t, uint64_t))v18)(v12, 0, 1, v3);
        if ((*v25)(v12, 1, v3) == 1) {
          break;
        }
        (*v23)(v6, v12, v3);
        sub_101126F68((uint64_t)v6, v20);
        sub_10001DAB4(v20, &qword_101638CF0);
        (*v19)(v6, v3);
        v16 += v24;
        if (!--v13) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v21(v12, 1, 1, v3);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10089F49C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v15 >= v7) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = *(void *)(v2 + 48) + 24 * v10;
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
    unsigned __int8 v14 = *(unsigned char *)v11;
    swift_bridgeObjectRetain();
    sub_1011283DC(v14, v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v17 = v15 + 4;
  if (v17 < v7)
  {
    unint64_t v16 = *(void *)(v3 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v8 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v8);
        ++v17;
        if (v16) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v17;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_10089F65C(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016506F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CorrelationIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v28 = v7 + 16;
  int64_t v26 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v27 = v7 + 32;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(void *)(v18 + 48) + *(void *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    sub_101128590((uint64_t)v10, (uint64_t)v5);
    sub_10001DAB4((uint64_t)v5, &qword_1016506F8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10089F968(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101650550);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v27 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v28 = v4 + 48;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    sub_10089C594(*(void *)(v18 + 48) + *(void *)(v4 + 72) * i, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1) {
      return swift_release();
    }
    sub_1008AB368((uint64_t)v13, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_101128C64((uint64_t)v10);
    sub_10001DAB4((uint64_t)v10, &qword_101650550);
    uint64_t result = sub_1008AA93C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (v17) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v27) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_25;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_25;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_25;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v27) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

char *sub_10089FCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = *(void *)(v52 - 8);
  uint64_t v8 = __chkstk_darwin(v52);
  unint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  unint64_t v50 = v6;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
  if (-v14 < 64) {
    uint64_t v15 = ~(-1 << -(char)v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  uint64_t v56 = a1;
  uint64_t v57 = a1 + 56;
  uint64_t v53 = a1 + 56;
  uint64_t v51 = ~v14;
  uint64_t v58 = ~v14;
  int64_t v59 = 0;
  uint64_t v60 = v15 & v13;
  unint64_t v49 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  unint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v17 = a2 + 56;
  unint64_t v18 = (unint64_t)(63 - v14) >> 6;
  unint64_t v44 = v18 - 1;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  int64_t v47 = v18;
  unint64_t v46 = v18 - 6;
  uint64_t v45 = a1 + 104;
  uint64_t v54 = v7;
  while (1)
  {
    if (v16)
    {
      uint64_t v55 = (v16 - 1) & v16;
      unint64_t v20 = __clz(__rbit64(v16)) | (v19 << 6);
      int64_t v21 = v19;
      uint64_t v22 = (uint64_t)v50;
LABEL_9:
      sub_10089C594(*(void *)(a1 + 48) + *(void *)(v7 + 72) * v20, v22, type metadata accessor for SharedBeaconRecord);
      uint64_t v23 = 0;
      goto LABEL_10;
    }
    int64_t v21 = v19 + 1;
    uint64_t v22 = (uint64_t)v50;
    if (__OFADD__(v19, 1)) {
      __break(1u);
    }
    if (v21 >= v47)
    {
      uint64_t v55 = 0;
      uint64_t v23 = 1;
      int64_t v21 = v19;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v53 + 8 * v21);
    if (v32) {
      goto LABEL_19;
    }
    int64_t v33 = v19 + 2;
    if (v19 + 2 >= v47)
    {
      uint64_t v55 = 0;
      uint64_t v23 = 1;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v53 + 8 * v33);
    if (v32) {
      goto LABEL_23;
    }
    if (v19 + 3 >= v47)
    {
LABEL_36:
      uint64_t v55 = 0;
      uint64_t v23 = 1;
      int64_t v21 = v33;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v53 + 8 * (v19 + 3));
    if (v32)
    {
      int64_t v21 = v19 + 3;
      uint64_t v7 = v54;
      goto LABEL_19;
    }
    int64_t v33 = v19 + 4;
    if (v19 + 4 >= v47)
    {
      uint64_t v55 = 0;
      uint64_t v23 = 1;
      int64_t v21 = v19 + 3;
    }
    else
    {
      unint64_t v32 = *(void *)(v53 + 8 * v33);
      if (v32)
      {
LABEL_23:
        int64_t v21 = v33;
        uint64_t v7 = v54;
LABEL_19:
        uint64_t v55 = (v32 - 1) & v32;
        unint64_t v20 = __clz(__rbit64(v32)) + (v21 << 6);
        goto LABEL_9;
      }
      int64_t v21 = v19 + 5;
      if (v19 + 5 >= v47) {
        goto LABEL_36;
      }
      uint64_t v7 = v54;
      unint64_t v32 = *(void *)(v53 + 8 * v21);
      if (v32) {
        goto LABEL_19;
      }
      uint64_t v34 = v19;
      while (v46 != v34)
      {
        unint64_t v32 = *(void *)(v45 + 8 * v34++);
        if (v32)
        {
          int64_t v21 = v34 + 5;
          goto LABEL_19;
        }
      }
      uint64_t v55 = 0;
      uint64_t v23 = 1;
      int64_t v21 = v44;
    }
LABEL_10:
    uint64_t v24 = v52;
    (*v49)(v22, v23, 1, v52);
    uint64_t v56 = a1;
    uint64_t v57 = v53;
    uint64_t v58 = v51;
    int64_t v59 = v21;
    uint64_t v60 = v55;
    if ((*v48)(v22, 1, v24) == 1)
    {
      sub_100132C20();
      sub_10001DAB4(v22, (uint64_t *)&unk_101653D50);
      return (char *)a2;
    }
    uint64_t v25 = a1;
    sub_1008AB368(v22, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    Hasher.init(_seed:)();
    sub_10120EF7C();
    Swift::Int v26 = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v28 = v26 & ~v27;
    if ((*(void *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28)) {
      break;
    }
LABEL_6:
    sub_1008AA93C((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    int64_t v19 = v21;
    a1 = v25;
    uint64_t v7 = v54;
    unint64_t v16 = v55;
  }
  uint64_t v29 = ~v27;
  uint64_t v30 = *(void *)(v54 + 72);
  while (1)
  {
    sub_10089C594(*(void *)(a2 + 48) + v30 * v28, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    BOOL v31 = sub_101212AE0((uint64_t)v10, (uint64_t)v12);
    sub_1008AA93C((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    if (v31) {
      break;
    }
    unint64_t v28 = (v28 + 1) & v29;
    if (((*(void *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t isStackAllocationSafe = sub_1008AA93C((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  char v36 = *(unsigned char *)(a2 + 32);
  unint64_t v37 = (unint64_t)((1 << v36) + 63) >> 6;
  size_t v38 = 8 * v37;
  if ((v36 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(a2 + 56), v38);
    unsigned int v39 = sub_1008A5880((unint64_t *)((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0)), v37, a2, v28, &v56);
    swift_release();
    sub_100132C20();
    return v39;
  }
  else
  {
    unsigned int v40 = (void *)swift_slowAlloc();
    memcpy(v40, (const void *)(a2 + 56), v38);
    unint64_t v41 = sub_1008A5880((unint64_t *)v40, v37, a2, v28, &v56);
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
    return v41;
  }
}

unint64_t *sub_1008A03DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v39 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v37 = ~v4;
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & v3;
  int64_t v38 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(a2 + 56);
  uint64_t v8 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v40 = v8;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v41 = v9;
      unint64_t v11 = v10 | (v9 << 6);
    }
    else
    {
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v12 >= v38) {
        goto LABEL_42;
      }
      unint64_t v13 = *(void *)(v39 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v38) {
          goto LABEL_42;
        }
        unint64_t v13 = *(void *)(v39 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v38) {
            goto LABEL_42;
          }
          unint64_t v13 = *(void *)(v39 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v38) {
              goto LABEL_42;
            }
            unint64_t v13 = *(void *)(v39 + 8 * v14);
            if (!v13)
            {
              uint64_t v15 = v9 + 5;
              if (v9 + 5 >= v38)
              {
LABEL_42:
                sub_100132C20();
                return (unint64_t *)v2;
              }
              unint64_t v13 = *(void *)(v39 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v38) {
                    goto LABEL_42;
                  }
                  unint64_t v13 = *(void *)(v39 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_24;
                  }
                }
LABEL_44:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_24:
      unint64_t v6 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v41 = v14;
    }
    uint64_t v16 = *(void *)(v8 + 48) + 24 * v11;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    Swift::UInt v19 = *(unsigned __int8 *)(v16 + 16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v19);
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = v2;
    uint64_t v22 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v23 = v20 & ~v22;
    if ((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
      break;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v2 = v21;
    uint64_t v8 = v40;
    int64_t v9 = v41;
  }
  uint64_t v24 = ~v22;
  uint64_t v25 = *(void *)(v2 + 48);
  while (1)
  {
    uint64_t v26 = v25 + 24 * v23;
    int v27 = *(unsigned __int8 *)(v26 + 16);
    if (*(void *)v26 == v18 && *(void *)(v26 + 8) == v17)
    {
      if (v19 == v27) {
        break;
      }
      goto LABEL_28;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v19 ^ v27) & 1) == 0) {
      break;
    }
LABEL_28:
    unint64_t v23 = (v23 + 1) & v24;
    if (((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0) {
      goto LABEL_6;
    }
  }
  v42[0] = v40;
  v42[1] = v39;
  v42[2] = v37;
  v42[3] = v41;
  v42[4] = v6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
  uint64_t v30 = v21;
  char v31 = *(unsigned char *)(v21 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v37 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v33);
    uint64_t v34 = sub_1008A5D5C((unint64_t *)((char *)&v37 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v30, v23, v42);
    swift_release();
    sub_100132C20();
  }
  else
  {
    uint64_t v35 = (void *)swift_slowAlloc();
    memcpy(v35, v7, v33);
    uint64_t v34 = sub_1008A5D5C((unint64_t *)v35, v32, v30, v23, v42);
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
  }
  return v34;
}

void *sub_1008A0844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v100 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v98 = ~v4;
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & v3;
  int64_t v99 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(a2 + 56);
  uint64_t v8 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v107 = v7;
  uint64_t v101 = v8;
  while (1)
  {
    if (v6)
    {
      uint64_t v105 = (v6 - 1) & v6;
      int64_t v106 = v9;
      unint64_t v10 = __clz(__rbit64(v6)) | (v9 << 6);
    }
    else
    {
      int64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_154;
      }
      if (v11 >= v99)
      {
LABEL_145:
        sub_100132C20();
        return (void *)v2;
      }
      unint64_t v12 = *(void *)(v100 + 8 * v11);
      int64_t v13 = v9 + 1;
      if (!v12)
      {
        int64_t v13 = v9 + 2;
        if (v9 + 2 >= v99) {
          goto LABEL_145;
        }
        unint64_t v12 = *(void *)(v100 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v9 + 3;
          if (v9 + 3 >= v99) {
            goto LABEL_145;
          }
          unint64_t v12 = *(void *)(v100 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v9 + 4;
            if (v9 + 4 >= v99) {
              goto LABEL_145;
            }
            unint64_t v12 = *(void *)(v100 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = v9 + 5;
              if (v9 + 5 >= v99) {
                goto LABEL_145;
              }
              unint64_t v12 = *(void *)(v100 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_171;
                  }
                  if (v13 >= v99) {
                    goto LABEL_145;
                  }
                  unint64_t v12 = *(void *)(v100 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v13 = v9 + 5;
            }
          }
        }
      }
LABEL_24:
      uint64_t v105 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      int64_t v106 = v13;
    }
    uint64_t v15 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    unint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    sub_1000361E0(v17, v16);
    unint64_t v113 = v16;
    Data.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)&v7[(v20 >> 3) & 0xFFFFFFFFFFFFFF8] >> v20)) {
      break;
    }
LABEL_6:
    sub_10001CFB8(v17, v113);
    uint64_t v8 = v101;
    int64_t v9 = v106;
    unint64_t v6 = v105;
  }
  unint64_t v21 = v113 >> 62;
  uint64_t v22 = ~v19;
  unint64_t v103 = HIDWORD(v17);
  BOOL v23 = __OFSUB__(HIDWORD(v17), v17);
  BOOL v110 = v23;
  size_t v109 = HIDWORD(v17) - (int)v17;
  size_t v114 = BYTE6(v113);
  unint64_t v112 = v113 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v108 = (int)v17;
  uint64_t v104 = v17 >> 32;
  uint64_t v102 = (v17 >> 32) - (int)v17;
  uint64_t v111 = ~v19;
  while (2)
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v20);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    uint64_t v27 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v25), v25))
        {
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
        }
        uint64_t v27 = HIDWORD(v25) - (int)v25;
LABEL_38:
        sub_1000361E0(v25, v26);
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v25 + 16);
        uint64_t v28 = *(void *)(v25 + 24);
        uint64_t v27 = v28 - v29;
        if (!__OFSUB__(v28, v29)) {
          goto LABEL_38;
        }
        goto LABEL_148;
      case 3uLL:
        break;
      default:
        uint64_t v27 = BYTE6(v26);
        break;
    }
    size_t v30 = v114;
    switch((int)v21)
    {
      case 1:
        size_t v30 = v109;
        if (v110) {
          goto LABEL_150;
        }
        goto LABEL_43;
      case 2:
        uint64_t v32 = *(void *)(v17 + 16);
        uint64_t v31 = *(void *)(v17 + 24);
        BOOL v33 = __OFSUB__(v31, v32);
        size_t v30 = v31 - v32;
        if (!v33) {
          goto LABEL_43;
        }
        goto LABEL_149;
      case 3:
        if (v27) {
          goto LABEL_31;
        }
        goto LABEL_140;
      default:
LABEL_43:
        if (v27 != v30)
        {
LABEL_31:
          sub_10001CFB8(v25, v26);
          goto LABEL_32;
        }
        if (v27 >= 1)
        {
          switch(v26 >> 62)
          {
            case 1uLL:
              if ((int)v25 > v25 >> 32) {
                goto LABEL_151;
              }
              uint64_t v49 = __DataStorage._bytes.getter();
              if (v49)
              {
                uint64_t v50 = v49;
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v25, v51)) {
                  goto LABEL_153;
                }
                uint64_t v52 = (const void *)(v50 + (int)v25 - v51);
                __DataStorage._length.getter();
                if (!v21)
                {
LABEL_95:
                  *(_WORD *)__s1 = v17;
                  __s1[2] = BYTE2(v17);
                  __s1[3] = BYTE3(v17);
                  __s1[4] = v103;
                  __s1[5] = BYTE5(v17);
                  __s1[6] = BYTE6(v17);
                  __s1[7] = HIBYTE(v17);
                  *(_DWORD *)&__s1[8] = v113;
                  *(_WORD *)&__s1[12] = WORD2(v113);
                  if (!v52) {
                    goto LABEL_181;
                  }
                  int v57 = memcmp(v52, __s1, v114);
LABEL_97:
                  sub_10001CFB8(v25, v26);
                  goto LABEL_137;
                }
              }
              else
              {
                uint64_t v52 = 0;
                __DataStorage._length.getter();
                if (!v21) {
                  goto LABEL_95;
                }
              }
              if (v21 == 1)
              {
                if (v104 < v108) {
                  goto LABEL_163;
                }
                swift_retain();
                uint64_t v53 = __DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v108, v54)) {
                    goto LABEL_170;
                  }
                  v53 += v108 - v54;
                }
                uint64_t v55 = __DataStorage._length.getter();
                size_t v56 = v102;
                if (v55 < v102) {
                  size_t v56 = v55;
                }
                if (!v52) {
                  goto LABEL_184;
                }
                if (!v53) {
                  goto LABEL_185;
                }
                size_t v47 = v56;
                unint64_t v48 = v52;
                unint64_t v46 = (const void *)v53;
LABEL_79:
                int v57 = memcmp(v48, v46, v47);
                sub_10001CFB8(v17, v113);
                goto LABEL_97;
              }
              uint64_t v79 = *(void *)(v17 + 16);
              uint64_t v97 = *(void *)(v17 + 24);
              swift_retain();
              swift_retain();
              uint64_t v80 = __DataStorage._bytes.getter();
              if (v80)
              {
                uint64_t v81 = v80;
                uint64_t v82 = __DataStorage._offset.getter();
                if (__OFSUB__(v79, v82)) {
                  goto LABEL_169;
                }
                uint64_t v83 = v79;
                unint64_t v84 = (const void *)(v81 + v79 - v82);
              }
              else
              {
                uint64_t v83 = v79;
                unint64_t v84 = 0;
              }
              int64_t v85 = v97 - v83;
              if (__OFSUB__(v97, v83)) {
                goto LABEL_164;
              }
              uint64_t v86 = __DataStorage._length.getter();
              if (v86 >= v85) {
                size_t v87 = v85;
              }
              else {
                size_t v87 = v86;
              }
              if (!v52) {
                goto LABEL_175;
              }
              if (!v84) {
                goto LABEL_176;
              }
              int v57 = memcmp(v52, v84, v87);
LABEL_136:
              swift_release();
              swift_release();
              sub_10001CFB8(v25, v26);
              uint64_t v7 = v107;
LABEL_137:
              uint64_t v22 = v111;
              if (!v57) {
                goto LABEL_141;
              }
              break;
            case 2uLL:
              uint64_t v38 = *(void *)(v25 + 16);
              swift_retain();
              swift_retain();
              uint64_t v39 = __DataStorage._bytes.getter();
              if (v39)
              {
                uint64_t v40 = v39;
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__(v38, v41)) {
                  goto LABEL_152;
                }
                unint64_t v42 = (const void *)(v40 + v38 - v41);
              }
              else
              {
                unint64_t v42 = 0;
              }
              __DataStorage._length.getter();
              if (v21)
              {
                if (v21 == 1)
                {
                  if (v104 < v108) {
                    goto LABEL_157;
                  }
                  swift_retain();
                  int64_t v59 = (char *)__DataStorage._bytes.getter();
                  if (v59)
                  {
                    uint64_t v60 = __DataStorage._offset.getter();
                    if (__OFSUB__(v108, v60)) {
                      goto LABEL_168;
                    }
                    v59 += v108 - v60;
                  }
                  uint64_t v61 = __DataStorage._length.getter();
                  size_t v62 = v102;
                  if (v61 < v102) {
                    size_t v62 = v61;
                  }
                  if (!v42) {
                    goto LABEL_178;
                  }
                  if (!v59) {
                    goto LABEL_179;
                  }
                  int v57 = memcmp(v42, v59, v62);
                  sub_10001CFB8(v17, v113);
                }
                else
                {
                  uint64_t v96 = v2;
                  uint64_t v73 = *(void *)(v17 + 16);
                  uint64_t v97 = *(void *)(v17 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v74 = (char *)__DataStorage._bytes.getter();
                  if (v74)
                  {
                    uint64_t v75 = __DataStorage._offset.getter();
                    if (__OFSUB__(v73, v75)) {
                      goto LABEL_167;
                    }
                    v74 += v73 - v75;
                  }
                  BOOL v33 = __OFSUB__(v97, v73);
                  int64_t v76 = v97 - v73;
                  if (v33) {
                    goto LABEL_162;
                  }
                  uint64_t v77 = __DataStorage._length.getter();
                  if (v77 >= v76) {
                    size_t v78 = v76;
                  }
                  else {
                    size_t v78 = v77;
                  }
                  if (!v42) {
                    goto LABEL_173;
                  }
                  uint64_t v2 = v96;
                  if (!v74) {
                    goto LABEL_174;
                  }
                  int v57 = memcmp(v42, v74, v78);
                  swift_release();
                  swift_release();
                }
              }
              else
              {
                *(_WORD *)__s1 = v17;
                __s1[2] = BYTE2(v17);
                __s1[3] = BYTE3(v17);
                __s1[4] = v103;
                __s1[5] = BYTE5(v17);
                __s1[6] = BYTE6(v17);
                __s1[7] = HIBYTE(v17);
                *(_DWORD *)&__s1[8] = v113;
                *(_WORD *)&__s1[12] = WORD2(v113);
                if (!v42)
                {
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
                  swift_willThrow();
                  swift_errorRelease();
                  __break(1u);
                  swift_errorRelease();
                  swift_slowDealloc();
                  __break(1u);
                  JUMPOUT(0x1008A15DCLL);
                }
                int v57 = memcmp(v42, __s1, v114);
              }
              goto LABEL_136;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v21) {
                goto LABEL_80;
              }
              if (v21 == 1)
              {
                if (v104 < v108) {
                  goto LABEL_155;
                }
                sub_1000361E0(v17, v113);
                uint64_t v43 = __DataStorage._bytes.getter();
                if (!v43) {
                  goto LABEL_180;
                }
                uint64_t v35 = v43;
                uint64_t v44 = __DataStorage._offset.getter();
                uint64_t v37 = v108 - v44;
                if (__OFSUB__(v108, v44)) {
                  goto LABEL_161;
                }
                goto LABEL_61;
              }
              uint64_t v63 = *(void *)(v17 + 16);
              uint64_t v64 = *(void *)(v17 + 24);
              swift_retain();
              swift_retain();
              uint64_t v65 = (char *)__DataStorage._bytes.getter();
              if (v65)
              {
                uint64_t v66 = __DataStorage._offset.getter();
                if (__OFSUB__(v63, v66)) {
                  goto LABEL_166;
                }
                v65 += v63 - v66;
              }
              BOOL v33 = __OFSUB__(v64, v63);
              int64_t v67 = v64 - v63;
              if (v33) {
                goto LABEL_159;
              }
              uint64_t v68 = __DataStorage._length.getter();
              if (!v65) {
                goto LABEL_183;
              }
              goto LABEL_109;
            default:
              *(void *)__s1 = v25;
              *(_WORD *)&__s1[8] = v26;
              __s1[10] = BYTE2(v26);
              __s1[11] = BYTE3(v26);
              __s1[12] = BYTE4(v26);
              __s1[13] = BYTE5(v26);
              if (!v21)
              {
LABEL_80:
                __int16 __s2 = v17;
                char v116 = BYTE2(v17);
                char v117 = BYTE3(v17);
                char v118 = v103;
                char v119 = BYTE5(v17);
                char v120 = BYTE6(v17);
                char v121 = HIBYTE(v17);
                int v122 = v113;
                __int16 v123 = WORD2(v113);
                int v58 = memcmp(__s1, &__s2, v114);
                sub_10001CFB8(v25, v26);
                if (!v58) {
                  goto LABEL_141;
                }
                break;
              }
              if (v21 == 1)
              {
                if (v104 < v108) {
                  goto LABEL_156;
                }
                sub_1000361E0(v17, v113);
                uint64_t v34 = __DataStorage._bytes.getter();
                if (!v34) {
                  goto LABEL_177;
                }
                uint64_t v35 = v34;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v37 = v108 - v36;
                if (__OFSUB__(v108, v36)) {
                  goto LABEL_160;
                }
LABEL_61:
                uint64_t v45 = __DataStorage._length.getter();
                unint64_t v46 = (const void *)(v35 + v37);
                if (v45 >= v102) {
                  size_t v47 = v102;
                }
                else {
                  size_t v47 = v45;
                }
                unint64_t v48 = __s1;
                goto LABEL_79;
              }
              uint64_t v69 = *(void *)(v17 + 16);
              uint64_t v70 = *(void *)(v17 + 24);
              swift_retain();
              swift_retain();
              uint64_t v65 = (char *)__DataStorage._bytes.getter();
              if (v65)
              {
                uint64_t v71 = __DataStorage._offset.getter();
                if (__OFSUB__(v69, v71)) {
                  goto LABEL_165;
                }
                v65 += v69 - v71;
              }
              BOOL v33 = __OFSUB__(v70, v69);
              int64_t v67 = v70 - v69;
              if (v33) {
                goto LABEL_158;
              }
              uint64_t v68 = __DataStorage._length.getter();
              if (!v65) {
                goto LABEL_182;
              }
LABEL_109:
              if (v68 >= v67) {
                size_t v72 = v67;
              }
              else {
                size_t v72 = v68;
              }
              int v57 = memcmp(__s1, v65, v72);
              goto LABEL_136;
          }
LABEL_32:
          unint64_t v20 = (v20 + 1) & v22;
          if (((*(void *)&v7[(v20 >> 3) & 0xFFFFFFFFFFFFFF8] >> v20) & 1) == 0) {
            goto LABEL_6;
          }
          continue;
        }
LABEL_140:
        sub_10001CFB8(v25, v26);
LABEL_141:
        uint64_t isStackAllocationSafe = sub_10001CFB8(v17, v113);
        v125[0] = v101;
        v125[1] = v100;
        v125[2] = v98;
        v125[3] = v106;
        v125[4] = v105;
        char v89 = *(unsigned char *)(v2 + 32);
        unint64_t v90 = (unint64_t)((1 << v89) + 63) >> 6;
        size_t v91 = 8 * v90;
        if ((v89 & 0x3Fu) <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
        {
          __chkstk_darwin(isStackAllocationSafe);
          memcpy((char *)&v96 - ((v91 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v91);
          uint64_t v92 = sub_1008A6044((unint64_t *)((char *)&v96 - ((v91 + 15) & 0x3FFFFFFFFFFFFFF0)), v90, v2, v20, v125);
          swift_release();
          sub_100132C20();
          return v92;
        }
        else
        {
          uint64_t v93 = (void *)swift_slowAlloc();
          memcpy(v93, v7, v91);
          Swift::Int v94 = sub_1008A6044((unint64_t *)v93, v90, v2, v20, v125);
          swift_release();
          sub_100132C20();
          swift_slowDealloc();
          return v94;
        }
    }
  }
}

void *sub_1008A160C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  int64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int64_t v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  int v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_100132C20();
      sub_10001DAB4(v26, &qword_101638CF0);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_1008AAC94((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = sub_1008A6BD8((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_100132C20();
    return v45;
  }
  else
  {
    size_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    unint64_t v48 = sub_1008A6BD8((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
    return v48;
  }
}

unsigned char *sub_1008A1CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v43 = ~v6;
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v4;
  int64_t v9 = (unint64_t)(63 - v6) >> 6;
  uint64_t v10 = a2 + 56;
  swift_bridgeObjectRetain();
  unint64_t v47 = (unint64_t)"";
  int64_t v48 = 0;
  uint64_t v45 = "onnect";
  unint64_t v46 = "enableNotifyWhenFound";
  uint64_t v44 = v5;
  int64_t v42 = v9;
  while (2)
  {
    while (2)
    {
      if (v8)
      {
        unint64_t v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v48 << 6);
        goto LABEL_24;
      }
      int64_t v13 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
        goto LABEL_107;
      }
      if (v13 >= v9)
      {
LABEL_105:
        sub_100132C20();
        return (unsigned char *)v2;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v13);
      int64_t v15 = v48 + 1;
      if (!v14)
      {
        int64_t v15 = v48 + 2;
        if (v48 + 2 >= v9) {
          goto LABEL_105;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v48 + 3;
          if (v48 + 3 >= v9) {
            goto LABEL_105;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v48 + 4;
            if (v48 + 4 >= v9) {
              goto LABEL_105;
            }
            unint64_t v14 = *(void *)(v5 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v48 + 5;
              if (v48 + 5 < v9)
              {
                unint64_t v14 = *(void *)(v5 + 8 * v16);
                if (v14)
                {
                  int64_t v15 = v48 + 5;
                  goto LABEL_23;
                }
                while (1)
                {
                  int64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    break;
                  }
                  if (v15 >= v9) {
                    goto LABEL_105;
                  }
                  unint64_t v14 = *(void *)(v5 + 8 * v15);
                  ++v16;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
LABEL_107:
                __break(1u);
              }
              goto LABEL_105;
            }
          }
        }
      }
LABEL_23:
      unint64_t v8 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      int64_t v48 = v15;
LABEL_24:
      int v17 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v12);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v20 = v18 & ~v19;
      if (((*(void *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        continue;
      }
      break;
    }
    uint64_t v21 = ~v19;
LABEL_26:
    unint64_t v22 = 0xE700000000000000;
    uint64_t v23 = 0x6E776F6E6B6E75;
    switch(*(unsigned char *)(*(void *)(v2 + 48) + v20))
    {
      case 1:
        unint64_t v22 = v47 | 0x8000000000000000;
        uint64_t v23 = 0xD000000000000015;
        break;
      case 2:
        uint64_t v23 = 0xD000000000000016;
        unint64_t v24 = (unint64_t)v46;
        goto LABEL_50;
      case 3:
        unint64_t v22 = 0xE600000000000000;
        uint64_t v23 = 0x657461636F6CLL;
        break;
      case 4:
        unint64_t v22 = 0xEC000000676E6972;
        uint64_t v23 = 0x6168537472617473;
        break;
      case 5:
        uint64_t v23 = 0x72616853706F7473;
        goto LABEL_40;
      case 6:
        unsigned int v25 = 2036427888;
        goto LABEL_45;
      case 7:
        unsigned int v25 = 1886352499;
LABEL_45:
        uint64_t v23 = v25 | 0x6E756F5300000000;
        unint64_t v22 = 0xE900000000000064;
        break;
      case 8:
        uint64_t v23 = 0x61654C6E69676562;
        unint64_t v22 = 0xED0000676E696873;
        break;
      case 9:
        uint64_t v23 = 0x687361654C646E65;
LABEL_40:
        unint64_t v22 = 0xEB00000000676E69;
        break;
      case 0xA:
        uint64_t v23 = 0x4654426E69676562;
        unint64_t v22 = 0xEE00676E69646E69;
        break;
      case 0xB:
        uint64_t v23 = 0x6E69465442646E65;
        unint64_t v22 = 0xEC000000676E6964;
        break;
      case 0xC:
        unint64_t v22 = 0xEC000000676E6967;
        uint64_t v23 = 0x6E61526E69676562;
        break;
      case 0xD:
        uint64_t v23 = 0x69676E6152646E65;
        unint64_t v22 = 0xEA0000000000676ELL;
        break;
      case 0xE:
        uint64_t v23 = 0x6F4C656C62616E65;
        unint64_t v22 = 0xEE0065646F4D7473;
        break;
      case 0xF:
        uint64_t v23 = 0x4C656C6261736964;
        unint64_t v22 = 0xEF65646F4D74736FLL;
        break;
      case 0x10:
        unint64_t v22 = 0xE600000000000000;
        uint64_t v23 = 0x656D616E6572;
        break;
      case 0x11:
        uint64_t v23 = 0x7463656E6E6F63;
        break;
      case 0x12:
        unint64_t v22 = 0xEA00000000007463;
        uint64_t v23 = 0x656E6E6F63736964;
        break;
      case 0x13:
        uint64_t v23 = 0xD000000000000017;
        unint64_t v24 = (unint64_t)v45;
LABEL_50:
        unint64_t v22 = v24 | 0x8000000000000000;
        break;
      case 0x14:
        unint64_t v22 = 0xE600000000000000;
        uint64_t v23 = 0x726961706E75;
        break;
      case 0x15:
        uint64_t v23 = 0x65746167656C6564;
        unint64_t v22 = 0xEE00657261685364;
        break;
      default:
        break;
    }
    unint64_t v26 = 0xE700000000000000;
    uint64_t v27 = 0x6E776F6E6B6E75;
    switch(v17)
    {
      case 1:
        unint64_t v26 = v47 | 0x8000000000000000;
        if (v23 != 0xD000000000000015) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 2:
        unint64_t v31 = 0xD000000000000016;
        unint64_t v32 = (unint64_t)v46;
        goto LABEL_95;
      case 3:
        unint64_t v26 = 0xE600000000000000;
        if (v23 != 0x657461636F6CLL) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 4:
        unint64_t v26 = 0xEC000000676E6972;
        if (v23 != 0x6168537472617473) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 5:
        uint64_t v30 = 0x72616853706F7473;
        goto LABEL_73;
      case 6:
        unsigned int v33 = 2036427888;
        goto LABEL_81;
      case 7:
        unsigned int v33 = 1886352499;
LABEL_81:
        unint64_t v26 = 0xE900000000000064;
        if (v23 != (v33 | 0x6E756F5300000000)) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 8:
        uint64_t v27 = 0x61654C6E69676562;
        unint64_t v26 = 0xED0000676E696873;
        goto LABEL_89;
      case 9:
        uint64_t v30 = 0x687361654C646E65;
LABEL_73:
        unint64_t v26 = 0xEB00000000676E69;
        if (v23 != v30) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 10:
        uint64_t v28 = 0x4654426E69676562;
        uint64_t v29 = 0x676E69646E69;
        goto LABEL_86;
      case 11:
        unint64_t v26 = 0xEC000000676E6964;
        if (v23 != 0x6E69465442646E65) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 12:
        unint64_t v26 = 0xEC000000676E6967;
        if (v23 != 0x6E61526E69676562) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 13:
        unint64_t v26 = 0xEA0000000000676ELL;
        if (v23 != 0x69676E6152646E65) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 14:
        uint64_t v28 = 0x6F4C656C62616E65;
        uint64_t v29 = 0x65646F4D7473;
        goto LABEL_86;
      case 15:
        unint64_t v26 = 0xEF65646F4D74736FLL;
        if (v23 != 0x4C656C6261736964) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 16:
        unint64_t v26 = 0xE600000000000000;
        if (v23 != 0x656D616E6572) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 17:
        if (v23 != 0x7463656E6E6F63) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 18:
        unint64_t v26 = 0xEA00000000007463;
        if (v23 != 0x656E6E6F63736964) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 19:
        unint64_t v31 = 0xD000000000000017;
        unint64_t v32 = (unint64_t)v45;
LABEL_95:
        unint64_t v26 = v32 | 0x8000000000000000;
        if (v23 != v31) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 20:
        unint64_t v26 = 0xE600000000000000;
        if (v23 != 0x726961706E75) {
          goto LABEL_91;
        }
        goto LABEL_90;
      case 21:
        uint64_t v28 = 0x65746167656C6564;
        uint64_t v29 = 0x657261685364;
LABEL_86:
        unint64_t v26 = v29 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v23 != v28) {
          goto LABEL_91;
        }
        goto LABEL_90;
      default:
LABEL_89:
        if (v23 != v27) {
          goto LABEL_91;
        }
LABEL_90:
        if (v22 != v26)
        {
LABEL_91:
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          if (v34) {
            goto LABEL_99;
          }
          unint64_t v20 = (v20 + 1) & v21;
          if (((*(void *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          {
            uint64_t v5 = v44;
            int64_t v9 = v42;
            continue;
          }
          goto LABEL_26;
        }
        uint64_t isStackAllocationSafe = swift_bridgeObjectRelease_n();
LABEL_99:
        v49[0] = a1;
        v49[1] = v44;
        v49[2] = v43;
        v49[3] = v48;
        void v49[4] = v8;
        char v36 = *(unsigned char *)(v2 + 32);
        unint64_t v37 = (unint64_t)((1 << v36) + 63) >> 6;
        size_t v38 = 8 * v37;
        if ((v36 & 0x3Fu) <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
        {
          __chkstk_darwin(isStackAllocationSafe);
          memcpy((char *)&v42 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v38);
          char v39 = sub_1008A715C((unint64_t *)((char *)&v42 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0)), v37, v2, v20, v49);
          swift_release();
          sub_100132C20();
        }
        else
        {
          uint64_t v40 = (void *)swift_slowAlloc();
          memcpy(v40, (const void *)(v2 + 56), v38);
          char v39 = sub_1008A715C((unint64_t *)v40, v37, v2, v20, v49);
          swift_release();
          sub_100132C20();
          swift_slowDealloc();
        }
        return v39;
    }
  }
}

char *sub_1008A2A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v94 = *((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v106 = (uint64_t *)((char *)&v93 - v8);
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  uint64_t v114 = a1;
  unint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v9)
  {
LABEL_130:
    swift_bridgeObjectRelease();
    return (char *)a2;
  }
  unint64_t v10 = 0;
  uint64_t v101 = (char *)(a2 + 56);
  uint64_t v99 = a2;
  unint64_t v103 = v4;
  while (1)
  {
    if (v10 >= v9)
    {
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __DataStorage._length.getter();
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __DataStorage._length.getter();
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
    }
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    uint64_t v105 = *(void *)(v94 + 72);
    unint64_t v115 = v10 + 1;
    unint64_t v12 = v106;
    sub_10089C594(v11 + v105 * v10, (uint64_t)v106, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)();
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_1000361E0(*v12, v14);
    Data.hash(into:)();
    sub_10001CFB8(v13, v14);
    int64_t v15 = (char *)v12 + v4[5];
    type metadata accessor for UUID();
    sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v102 = v15;
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v100 = (char *)v12 + v103[6];
    uint64_t v4 = v103;
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v98 = v4[7];
    Hasher._combine(_:)(*((unsigned __int8 *)v12 + v98));
    uint64_t v96 = v4[8];
    uint64_t v16 = *(uint64_t *)((char *)v12 + v96);
    swift_bridgeObjectRetain();
    sub_100DF9434(__s1, v16);
    swift_bridgeObjectRelease();
    uint64_t v95 = v4[9];
    Hasher._combine(_:)(*((unsigned __int8 *)v12 + v95));
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v101;
    if ((*(void *)&v101[(v19 >> 3) & 0xFFFFFFFFFFFFFF8] >> v19)) {
      break;
    }
LABEL_4:
    sub_1008AA93C((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    a1 = v114;
    unint64_t v10 = v115;
    unint64_t v9 = *(void *)(v114 + 16);
    if (v115 == v9) {
      goto LABEL_130;
    }
  }
  uint64_t v104 = ~v18;
  while (2)
  {
    sub_10089C594(*(void *)(a2 + 48) + v19 * v105, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v22 = *(void *)v7;
    unint64_t v21 = *((void *)v7 + 1);
    uint64_t v23 = *v106;
    unint64_t v24 = v106[1];
    uint64_t v25 = 0;
    switch(v21 >> 62)
    {
      case 1uLL:
        LODWORD(v25) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22)) {
          goto LABEL_135;
        }
        uint64_t v25 = (int)v25;
LABEL_15:
        unint64_t v29 = v24 >> 62;
        switch(v24 >> 62)
        {
          case 1uLL:
            LODWORD(v30) = HIDWORD(v23) - v23;
            if (__OFSUB__(HIDWORD(v23), v23)) {
              goto LABEL_136;
            }
            uint64_t v30 = (int)v30;
LABEL_22:
            if (v25 != v30) {
              goto LABEL_9;
            }
            if (v25 < 1) {
              goto LABEL_122;
            }
            break;
          case 2uLL:
            uint64_t v32 = *(void *)(v23 + 16);
            uint64_t v31 = *(void *)(v23 + 24);
            BOOL v28 = __OFSUB__(v31, v32);
            uint64_t v30 = v31 - v32;
            if (!v28) {
              goto LABEL_22;
            }
            goto LABEL_137;
          case 3uLL:
            if (v25) {
              goto LABEL_9;
            }
            goto LABEL_122;
          default:
            uint64_t v30 = BYTE6(v24);
            goto LABEL_22;
        }
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(v22 + 16);
        uint64_t v26 = *(void *)(v22 + 24);
        BOOL v28 = __OFSUB__(v26, v27);
        uint64_t v25 = v26 - v27;
        if (!v28) {
          goto LABEL_15;
        }
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v25 = BYTE6(v21);
        goto LABEL_15;
    }
    switch(v21 >> 62)
    {
      case 1uLL:
        if ((int)v22 > v22 >> 32) {
          goto LABEL_138;
        }
        sub_1000361E0(*(void *)v7, *((void *)v7 + 1));
        uint64_t v47 = __DataStorage._bytes.getter();
        if (v47)
        {
          uint64_t v48 = v47;
          uint64_t v49 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v22, v49)) {
            goto LABEL_141;
          }
          uint64_t v97 = (const void *)(v48 + (int)v22 - v49);
        }
        else
        {
          uint64_t v97 = 0;
        }
        uint64_t v4 = v103;
        __DataStorage._length.getter();
        a2 = v99;
        if (v29)
        {
          if (v29 != 1)
          {
            uint64_t v78 = *(void *)(v23 + 16);
            uint64_t v79 = *(void *)(v23 + 24);
            swift_retain();
            swift_retain();
            uint64_t v80 = (char *)__DataStorage._bytes.getter();
            if (v80)
            {
              uint64_t v81 = __DataStorage._offset.getter();
              if (__OFSUB__(v78, v81)) {
                goto LABEL_156;
              }
              v80 += v78 - v81;
            }
            BOOL v28 = __OFSUB__(v79, v78);
            int64_t v82 = v79 - v78;
            if (v28) {
              goto LABEL_151;
            }
            uint64_t v83 = __DataStorage._length.getter();
            if (v83 >= v82) {
              size_t v84 = v82;
            }
            else {
              size_t v84 = v83;
            }
            if (!v97) {
              goto LABEL_162;
            }
            uint64_t v4 = v103;
            if (!v80) {
              goto LABEL_161;
            }
            int v77 = memcmp(v97, v80, v84);
            swift_release();
            swift_release();
            sub_10001CFB8(v22, v21);
            goto LABEL_121;
          }
          if (v23 >> 32 < (int)v23) {
            goto LABEL_150;
          }
          swift_retain();
          uint64_t v55 = (char *)__DataStorage._bytes.getter();
          if (v55)
          {
            uint64_t v56 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v23, v56)) {
              goto LABEL_157;
            }
            v55 += (int)v23 - v56;
          }
          uint64_t v57 = __DataStorage._length.getter();
          if (v57 >= (v23 >> 32) - (int)v23) {
            size_t v58 = (v23 >> 32) - (int)v23;
          }
          else {
            size_t v58 = v57;
          }
          a2 = v99;
          if (!v97) {
            goto LABEL_171;
          }
          unint64_t v20 = v101;
          uint64_t v4 = v103;
          if (!v55) {
            goto LABEL_170;
          }
          int v59 = memcmp(v97, v55, v58);
          sub_10001CFB8(v23, v24);
        }
        else
        {
          *(void *)&__s1[0] = v23;
          WORD4(__s1[0]) = v24;
          BYTE10(__s1[0]) = BYTE2(v24);
          BYTE11(__s1[0]) = BYTE3(v24);
          BYTE12(__s1[0]) = BYTE4(v24);
          BYTE13(__s1[0]) = BYTE5(v24);
          unint64_t v20 = v101;
          if (!v97) {
            goto LABEL_167;
          }
          int v59 = memcmp(v97, __s1, BYTE6(v24));
        }
        sub_10001CFB8(v22, v21);
        if (!v59) {
          goto LABEL_122;
        }
        goto LABEL_9;
      case 2uLL:
        uint64_t v38 = *(void *)(v22 + 16);
        swift_retain();
        swift_retain();
        uint64_t v39 = __DataStorage._bytes.getter();
        if (v39)
        {
          uint64_t v40 = v39;
          uint64_t v41 = __DataStorage._offset.getter();
          if (__OFSUB__(v38, v41)) {
            goto LABEL_140;
          }
          uint64_t v97 = (const void *)(v40 + v38 - v41);
        }
        else
        {
          uint64_t v97 = 0;
        }
        __DataStorage._length.getter();
        uint64_t v4 = v103;
        if (!v29)
        {
          *(void *)&__s1[0] = v23;
          WORD4(__s1[0]) = v24;
          BYTE10(__s1[0]) = BYTE2(v24);
          BYTE11(__s1[0]) = BYTE3(v24);
          BYTE12(__s1[0]) = BYTE4(v24);
          BYTE13(__s1[0]) = BYTE5(v24);
          unint64_t v20 = v101;
          a2 = v99;
          if (!v97) {
            goto LABEL_164;
          }
          int v54 = memcmp(v97, __s1, BYTE6(v24));
          goto LABEL_95;
        }
        if (v29 == 1)
        {
          if (v23 >> 32 < (int)v23) {
            goto LABEL_145;
          }
          swift_retain();
          uint64_t v50 = (char *)__DataStorage._bytes.getter();
          if (v50)
          {
            uint64_t v51 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v23, v51)) {
              goto LABEL_155;
            }
            v50 += (int)v23 - v51;
          }
          uint64_t v52 = __DataStorage._length.getter();
          if (v52 >= (v23 >> 32) - (int)v23) {
            size_t v53 = (v23 >> 32) - (int)v23;
          }
          else {
            size_t v53 = v52;
          }
          if (!v97) {
            goto LABEL_159;
          }
          unint64_t v20 = v101;
          uint64_t v4 = v103;
          a2 = v99;
          if (!v50) {
            goto LABEL_158;
          }
          int v54 = memcmp(v97, v50, v53);
          sub_10001CFB8(v23, v24);
LABEL_95:
          swift_release();
          swift_release();
          if (!v54) {
            goto LABEL_122;
          }
          goto LABEL_9;
        }
        uint64_t v70 = *(void *)(v23 + 16);
        uint64_t v71 = *(void *)(v23 + 24);
        swift_retain();
        swift_retain();
        size_t v72 = (char *)__DataStorage._bytes.getter();
        if (v72)
        {
          uint64_t v73 = __DataStorage._offset.getter();
          if (__OFSUB__(v70, v73)) {
            goto LABEL_154;
          }
          v72 += v70 - v73;
        }
        BOOL v28 = __OFSUB__(v71, v70);
        int64_t v74 = v71 - v70;
        a2 = v99;
        if (v28) {
          goto LABEL_149;
        }
        uint64_t v75 = __DataStorage._length.getter();
        if (v75 >= v74) {
          size_t v76 = v74;
        }
        else {
          size_t v76 = v75;
        }
        if (!v97) {
          goto LABEL_166;
        }
        uint64_t v4 = v103;
        if (!v72) {
          goto LABEL_165;
        }
        int v77 = memcmp(v97, v72, v76);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
LABEL_121:
        unint64_t v20 = v101;
        if (!v77) {
          goto LABEL_122;
        }
        goto LABEL_9;
      case 3uLL:
        *(void *)((char *)__s1 + 6) = 0;
        *(void *)&__s1[0] = 0;
        if (!v29) {
          goto LABEL_48;
        }
        if (v29 == 1)
        {
          uint64_t v33 = (v23 >> 32) - (int)v23;
          if (v23 >> 32 < (int)v23) {
            goto LABEL_143;
          }
          swift_retain();
          uint64_t v42 = __DataStorage._bytes.getter();
          if (!v42) {
            goto LABEL_160;
          }
          uint64_t v35 = v42;
          uint64_t v43 = __DataStorage._offset.getter();
          uint64_t v37 = (int)v23 - v43;
          if (__OFSUB__((int)v23, v43)) {
            goto LABEL_147;
          }
          goto LABEL_40;
        }
        uint64_t v60 = *(void *)(v23 + 16);
        uint64_t v61 = *(void *)(v23 + 24);
        swift_retain();
        swift_retain();
        uint64_t v62 = (char *)__DataStorage._bytes.getter();
        if (v62)
        {
          uint64_t v63 = __DataStorage._offset.getter();
          if (__OFSUB__(v60, v63)) {
            goto LABEL_153;
          }
          v62 += v60 - v63;
        }
        BOOL v28 = __OFSUB__(v61, v60);
        int64_t v64 = v61 - v60;
        if (v28) {
          goto LABEL_144;
        }
        uint64_t v65 = __DataStorage._length.getter();
        if (!v62) {
          goto LABEL_163;
        }
        goto LABEL_87;
      default:
        *(void *)&__s1[0] = *(void *)v7;
        WORD4(__s1[0]) = v21;
        BYTE10(__s1[0]) = BYTE2(v21);
        BYTE11(__s1[0]) = BYTE3(v21);
        BYTE12(__s1[0]) = BYTE4(v21);
        BYTE13(__s1[0]) = BYTE5(v21);
        if (!v29)
        {
LABEL_48:
          uint64_t __s2 = v23;
          __int16 v108 = v24;
          char v109 = BYTE2(v24);
          char v110 = BYTE3(v24);
          char v111 = BYTE4(v24);
          char v112 = BYTE5(v24);
          if (!memcmp(__s1, &__s2, BYTE6(v24))) {
            goto LABEL_122;
          }
LABEL_9:
          sub_1008AA93C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          unint64_t v19 = (v19 + 1) & v104;
          if (((*(void *)&v20[(v19 >> 3) & 0xFFFFFFFFFFFFFF8] >> v19) & 1) == 0) {
            goto LABEL_4;
          }
          continue;
        }
        if (v29 == 1)
        {
          uint64_t v33 = (v23 >> 32) - (int)v23;
          if (v23 >> 32 < (int)v23) {
            goto LABEL_142;
          }
          swift_retain();
          uint64_t v34 = __DataStorage._bytes.getter();
          if (!v34) {
            goto LABEL_168;
          }
          uint64_t v35 = v34;
          uint64_t v36 = __DataStorage._offset.getter();
          uint64_t v37 = (int)v23 - v36;
          if (__OFSUB__((int)v23, v36)) {
            goto LABEL_148;
          }
LABEL_40:
          uint64_t v44 = __DataStorage._length.getter();
          if (v44 >= v33) {
            size_t v45 = v33;
          }
          else {
            size_t v45 = v44;
          }
          int v46 = memcmp(__s1, (const void *)(v35 + v37), v45);
          sub_10001CFB8(v23, v24);
        }
        else
        {
          uint64_t v66 = *(void *)(v23 + 16);
          uint64_t v67 = *(void *)(v23 + 24);
          swift_retain();
          swift_retain();
          uint64_t v62 = (char *)__DataStorage._bytes.getter();
          if (v62)
          {
            uint64_t v68 = __DataStorage._offset.getter();
            if (__OFSUB__(v66, v68)) {
              goto LABEL_152;
            }
            v62 += v66 - v68;
          }
          BOOL v28 = __OFSUB__(v67, v66);
          int64_t v64 = v67 - v66;
          if (v28) {
            goto LABEL_146;
          }
          uint64_t v65 = __DataStorage._length.getter();
          if (!v62) {
            goto LABEL_169;
          }
LABEL_87:
          if (v65 >= v64) {
            size_t v69 = v64;
          }
          else {
            size_t v69 = v65;
          }
          int v46 = memcmp(__s1, v62, v69);
          swift_release();
          swift_release();
        }
        unint64_t v20 = v101;
        uint64_t v4 = v103;
        if (v46) {
          goto LABEL_9;
        }
LABEL_122:
        if ((static UUID.== infix(_:_:)() & 1) == 0
          || (static UUID.== infix(_:_:)() & 1) == 0
          || v7[v4[7]] != *((unsigned char *)v106 + v98)
          || (sub_100DF62D4(*(void *)&v7[v4[8]], *(uint64_t *)((char *)v106 + v96)) & 1) == 0
          || v7[v4[9]] != *((unsigned char *)v106 + v95))
        {
          goto LABEL_9;
        }
        sub_1008AA93C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t isStackAllocationSafe = sub_1008AA93C((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        char v86 = *(unsigned char *)(a2 + 32);
        unint64_t v87 = (unint64_t)((1 << v86) + 63) >> 6;
        size_t v88 = 8 * v87;
        if ((v86 & 0x3Fu) <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
        {
          __chkstk_darwin(isStackAllocationSafe);
          memcpy((char *)&v93 - ((v88 + 15) & 0x3FFFFFFFFFFFFFF0), v101, v88);
          char v89 = sub_1008A7CFC((unint64_t *)((char *)&v93 - ((v88 + 15) & 0x3FFFFFFFFFFFFFF0)), v87, a2, v19, &v114);
          swift_release();
          swift_bridgeObjectRelease();
          return v89;
        }
        else
        {
          size_t v91 = (void *)swift_slowAlloc();
          memcpy(v91, v101, v88);
          uint64_t v92 = sub_1008A7CFC((unint64_t *)v91, v87, a2, v19, &v114);
          swift_release();
          swift_bridgeObjectRelease();
          swift_slowDealloc();
          return v92;
        }
    }
  }
}

void *sub_1008A3828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
    sub_10033149C(&qword_10163C0A0, (unint64_t *)&qword_10163B900);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v46;
    uint64_t v4 = v47;
    uint64_t v6 = v48;
    int64_t v5 = v49;
    unint64_t v7 = v50;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v6;
  int64_t v44 = v5;
  unint64_t v45 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        unint64_t v14 = *(void **)(*(void *)(v3 + 48) + 8 * v13);
        id v15 = v14;
        goto LABEL_15;
      }
      int64_t v25 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        unint64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v25);
      if (v27)
      {
LABEL_28:
        uint64_t v12 = (v27 - 1) & v27;
        unint64_t v13 = __clz(__rbit64(v27)) + (v25 << 6);
        int64_t v5 = v25;
        goto LABEL_14;
      }
      int64_t v28 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_44;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v28);
      if (v27)
      {
LABEL_32:
        int64_t v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v42 + 8 * (v5 + 3));
        if (v27)
        {
          int64_t v25 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          unint64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v44 = v5;
          unint64_t v45 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v28);
        if (v27) {
          goto LABEL_32;
        }
        int64_t v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          unint64_t v27 = *(void *)(v42 + 8 * v25);
          if (v27) {
            goto LABEL_28;
          }
          int64_t v25 = v26 - 1;
          int64_t v29 = v5 + 6;
          while (v26 != v29)
          {
            unint64_t v27 = *(void *)(v42 + 8 * v29++);
            if (v27)
            {
              int64_t v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          unint64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v25;
          goto LABEL_15;
        }
      }
      unint64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v28;
      goto LABEL_15;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16
      || (uint64_t v39 = v16,
          sub_10001D4B0(0, (unint64_t *)&qword_10163B900),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          unint64_t v14 = v40,
          swift_unknownObjectRelease(),
          !v40))
    {
LABEL_53:
      sub_100132C20();
      return (void *)v2;
    }
LABEL_19:
    Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_10;
    }
    sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    uint64_t v22 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_47;
      }
    }
LABEL_10:

    uint64_t v3 = v41;
    uint64_t v6 = v43;
    int64_t v5 = v44;
    unint64_t v7 = v45;
  }
LABEL_47:

  char v31 = *(unsigned char *)(v2 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v33);
    sub_1008A8AB0((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v2, v19, &v41);
    uint64_t v35 = v34;
    swift_release();
    sub_100132C20();
  }
  else
  {
    uint64_t v36 = (void *)swift_slowAlloc();
    memcpy(v36, (const void *)(v2 + 56), v33);
    sub_1008A8AB0((unint64_t *)v36, v32, v2, v19, &v41);
    uint64_t v35 = v37;
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
  }
  return (void *)v35;
}

unint64_t *sub_1008A3D94(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  if (a2[2])
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v4;
    if (-v4 < 64) {
      uint64_t v5 = ~(-1 << -(char)v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & v3;
    int64_t v36 = (unint64_t)(63 - v4) >> 6;
    unint64_t v7 = (char *)(a2 + 7);
    uint64_t v8 = swift_bridgeObjectRetain();
    int64_t v9 = 0;
    uint64_t v38 = v8;
    while (1)
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        int64_t v39 = v9;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        if (v12 >= v36) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_39;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_39;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_39:
                  sub_100132C20();
                  return v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_39;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_42:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v6 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v39 = v14;
      }
      uint64_t v16 = (unsigned __int8 *)(*(void *)(v8 + 48) + 24 * v11);
      Swift::UInt v17 = *v16;
      uint64_t v19 = *((void *)v16 + 1);
      uint64_t v18 = *((void *)v16 + 2);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t v21 = (uint64_t)v2;
      uint64_t v22 = -1 << *((unsigned char *)v2 + 32);
      unint64_t v23 = v20 & ~v22;
      if ((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v8 = v38;
      int64_t v9 = v39;
      uint64_t v2 = (unint64_t *)v21;
    }
    uint64_t v24 = ~v22;
    unint64_t v25 = v2[6];
    while (1)
    {
      int64_t v26 = (unsigned __int8 *)(v25 + 24 * v23);
      if (*v26 == v17)
      {
        BOOL v27 = *((void *)v26 + 1) == v19 && *((void *)v26 + 2) == v18;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v23 = (v23 + 1) & v24;
      if (((*(void *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0) {
        goto LABEL_6;
      }
    }
    v40[0] = v38;
    v40[1] = v37;
    v40[2] = v35;
    v40[3] = v39;
    v40[4] = v6;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    char v29 = *(unsigned char *)(v21 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) <= 0xD
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v31);
      unint64_t v32 = sub_1008A8E40((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v21, v23, v40);
      swift_release();
      sub_100132C20();
      return v32;
    }
    else
    {
      size_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, v7, v31);
      uint64_t v2 = sub_1008A8E40((unint64_t *)v33, v30, v21, v23, v40);
      swift_release();
      sub_100132C20();
      swift_slowDealloc();
    }
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  return v2;
}

void *sub_1008A41F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016506F8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CorrelationIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  int v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  size_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  size_t v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_100132C20();
      sub_10001DAB4(v26, &qword_1016506F8);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_1008AAC94((unint64_t *)&unk_10166C250, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_1008AAC94(&qword_101650700, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    unint64_t v45 = sub_1008A911C((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_100132C20();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = sub_1008A911C((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
    return v48;
  }
}

void *sub_1008A48BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v43 = (char *)v33 - v12;
  if (*(void *)(a2 + 16))
  {
    uint64_t v44 = a1;
    unint64_t v45 = 0;
    unint64_t v13 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v39 = v8 + 48;
      uint64_t v41 = (char *)(a2 + 56);
      uint64_t v42 = v8 + 16;
      uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v40 = v8 + 56;
      v33[1] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      unint64_t v34 = v6;
      uint64_t v36 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = v8;
      while (1)
      {
        if (v14 >= v13) {
          __break(1u);
        }
        uint64_t v16 = *(void *)(v8 + 72);
        uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        v17(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v14, v7);
        unint64_t v45 = v14 + 1;
        unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
          break;
        }
        uint64_t v35 = v18;
        (*v38)(v43, v6, v7);
        sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v21 = v19 & ~v20;
        if ((*(void *)&v41[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21))
        {
          uint64_t v22 = a2;
          uint64_t v23 = ~v20;
          while (1)
          {
            v17(v11, *(void *)(v22 + 48) + v21 * v16, v7);
            sub_1008AAC94((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v25 = *v15;
            (*v15)(v11, v7);
            if (v24) {
              break;
            }
            unint64_t v21 = (v21 + 1) & v23;
            if (((*(void *)&v41[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21) & 1) == 0)
            {
              a2 = v22;
              unint64_t v6 = v34;
              goto LABEL_12;
            }
          }
          uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v25)(v43, v7);
          char v27 = *(unsigned char *)(v22 + 32);
          unint64_t v28 = (unint64_t)((1 << v27) + 63) >> 6;
          size_t v29 = 8 * v28;
          if ((v27 & 0x3Fu) <= 0xD
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v33 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0), v41, v29);
            uint64_t v30 = sub_1008A9678((void *)((char *)v33 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0)), v28, v22, v21, &v44);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v31 = (void *)swift_slowAlloc();
            memcpy(v31, v41, v29);
            uint64_t v30 = sub_1008A9678((unint64_t *)v31, v28, v22, v21, &v44);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return v30;
        }
        unint64_t v25 = *v15;
LABEL_12:
        v25(v43, v7);
        a1 = v44;
        unint64_t v14 = v45;
        unint64_t v13 = *(void *)(v44 + 16);
        uint64_t v8 = v37;
        if (v45 == v13)
        {
          v35(v6, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_1008A4E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101650550);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v43 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = ~v14;
  uint64_t v17 = a1 + 56;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v18 = -v14;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v16;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 56;
  uint64_t v52 = v15;
  int64_t v53 = 0;
  unint64_t v54 = v19 & v16;
  uint64_t v46 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v47 = v6;
  uint64_t v48 = v11;
  unint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v21 = a2 + 56;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    unint64_t v43 = v20;
    int64_t v44 = v22;
    if (v20)
    {
      uint64_t v49 = (v20 - 1) & v20;
      unint64_t v23 = __clz(__rbit64(v20)) | (v22 << 6);
      int64_t v24 = v22;
LABEL_9:
      uint64_t v25 = (uint64_t)v47;
      sub_10089C594(*(void *)(a1 + 48) + *(void *)(v48 + 72) * v23, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v26 = 0;
      goto LABEL_30;
    }
    int64_t v24 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      __break(1u);
    }
    int64_t v27 = (unint64_t)(v15 + 64) >> 6;
    if (v24 < v27)
    {
      unint64_t v28 = *(void *)(v17 + 8 * v24);
      if (v28) {
        goto LABEL_13;
      }
      v22 += 2;
      if (v24 + 1 >= v27) {
        goto LABEL_37;
      }
      unint64_t v28 = *(void *)(v17 + 8 * v22);
      if (v28) {
        goto LABEL_16;
      }
      if (v24 + 2 < v27)
      {
        unint64_t v28 = *(void *)(v17 + 8 * (v24 + 2));
        if (v28)
        {
          v24 += 2;
          goto LABEL_13;
        }
        int64_t v22 = v24 + 3;
        if (v24 + 3 >= v27)
        {
          uint64_t v49 = 0;
          uint64_t v26 = 1;
          v24 += 2;
          goto LABEL_29;
        }
        unint64_t v28 = *(void *)(v17 + 8 * v22);
        if (v28)
        {
LABEL_16:
          int64_t v24 = v22;
LABEL_13:
          uint64_t v49 = (v28 - 1) & v28;
          unint64_t v23 = __clz(__rbit64(v28)) + (v24 << 6);
          goto LABEL_9;
        }
        v24 += 4;
        if (v24 < v27)
        {
          unint64_t v28 = *(void *)(v17 + 8 * v24);
          if (v28) {
            goto LABEL_13;
          }
          int64_t v24 = v27 - 1;
          uint64_t v29 = v44 + 6;
          while (v27 != v29)
          {
            unint64_t v28 = *(void *)(v17 + 8 * v29++);
            if (v28)
            {
              int64_t v24 = v29 - 1;
              goto LABEL_13;
            }
          }
LABEL_37:
          uint64_t v49 = 0;
          uint64_t v26 = 1;
          goto LABEL_29;
        }
      }
    }
    uint64_t v49 = 0;
    uint64_t v26 = 1;
    int64_t v24 = v22;
LABEL_29:
    uint64_t v25 = (uint64_t)v47;
LABEL_30:
    (*v46)(v25, v26, 1, v7);
    uint64_t v50 = a1;
    uint64_t v51 = v17;
    uint64_t v52 = v15;
    int64_t v53 = v24;
    unint64_t v54 = v49;
    if ((*v45)(v25, 1, v7) == 1)
    {
      sub_100132C20();
      sub_10001DAB4(v25, &qword_101650550);
      return (void *)a2;
    }
    sub_1008AB368(v25, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v30 = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v32 = v30 & ~v31;
    if ((*(void *)(v21 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32)) {
      break;
    }
LABEL_6:
    sub_1008AA93C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    int64_t v22 = v53;
    unint64_t v20 = v54;
    a1 = v50;
    uint64_t v17 = v51;
    uint64_t v15 = v52;
  }
  uint64_t v33 = ~v31;
  uint64_t v34 = *(void *)(v48 + 72);
  while (1)
  {
    sub_10089C594(*(void *)(a2 + 48) + v34 * v32, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)()) {
      break;
    }
    sub_1008AA93C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    unint64_t v32 = (v32 + 1) & v33;
    if (((*(void *)(v21 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
      goto LABEL_6;
    }
  }
  sub_1008AA93C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t isStackAllocationSafe = sub_1008AA93C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  char v36 = *(unsigned char *)(a2 + 32);
  unint64_t v37 = (unint64_t)((1 << v36) + 63) >> 6;
  size_t v38 = 8 * v37;
  if ((v36 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(a2 + 56), v38);
    uint64_t v39 = sub_1008A9B5C((unint64_t *)((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0)), v37, a2, v32, &v50);
    swift_release();
    sub_100132C20();
    return v39;
  }
  else
  {
    uint64_t v40 = (void *)swift_slowAlloc();
    memcpy(v40, (const void *)(a2 + 56), v38);
    uint64_t v41 = sub_1008A9B5C((unint64_t *)v40, v37, a2, v32, &v50);
    swift_release();
    sub_100132C20();
    swift_slowDealloc();
    return v41;
  }
}

void *sub_1008A5510(uint64_t a1, uint64_t a2)
{
  return sub_1008A55E8(a1, a2, (uint64_t (*)(Swift::Int, uint64_t, uint64_t, uint64_t))sub_100B2A768);
}

void *sub_1008A557C(uint64_t a1, uint64_t a2)
{
  return sub_1008A55E8(a1, a2, (uint64_t (*)(Swift::Int, uint64_t, uint64_t, uint64_t))sub_100B2A774);
}

void *sub_1008A55E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(Swift::Int, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v23[0] = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 56;
    do
    {
      Swift::UInt v9 = *(unsigned __int8 *)(a1 + 32 + v7++);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v9);
      Swift::Int v10 = Hasher._finalize()();
      uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v12 = v10 & ~v11;
      if ((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
      {
        uint64_t v13 = *(void *)(v3 + 48);
        if (*(unsigned __int8 *)(v13 + v12) == v9)
        {
LABEL_9:
          v23[1] = v7;
          unint64_t v14 = (unint64_t)(63 - v11) >> 6;
          size_t v15 = 8 * v14;
          uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
          if (v14 < 0x81
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            uint64_t v18 = &v22[-v17];
            memcpy(&v22[-v17], (const void *)(v3 + 56), v15);
            Swift::Int v19 = sub_1008AA0B8((Swift::Int)v18, v14, v3, v12, v23, a3);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v20 = (void *)swift_slowAlloc();
            memcpy(v20, (const void *)(v3 + 56), v15);
            Swift::Int v19 = sub_1008AA0B8((Swift::Int)v20, v14, v3, v12, v23, a3);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return (void *)v19;
        }
        while (1)
        {
          unint64_t v12 = (v12 + 1) & ~v11;
          if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v13 + v12) == v9) {
            goto LABEL_9;
          }
        }
      }
    }
    while (v7 != v5);
  }
  return (void *)v3;
}

char *sub_1008A5880(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v46 = a2;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v9 - 8);
  uint64_t v49 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v11 = __chkstk_darwin(v52);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (char *)__chkstk_darwin(v11);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v19 = *(unint64_t *)((char *)a1 + v18) & ((-1 << a4) - 1);
  uint64_t v48 = a1;
  *(unint64_t *)((char *)a1 + v18) = v19;
  uint64_t v20 = v17 - 1;
  uint64_t v53 = v21;
  uint64_t v50 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  uint64_t v51 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v22 = a3 + 56;
  while (2)
  {
    uint64_t v47 = v20;
    do
    {
      while (1)
      {
        uint64_t v24 = *a5;
        uint64_t v23 = a5[1];
        uint64_t v25 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v27 = a5[4];
        uint64_t v56 = v23;
        uint64_t v55 = v25;
        if (v27)
        {
          uint64_t v54 = (v27 - 1) & v27;
          unint64_t v28 = __clz(__rbit64(v27)) | (v26 << 6);
LABEL_6:
          uint64_t v29 = v49;
          sub_10089C594(*(void *)(v24 + 48) + *(void *)(v53 + 72) * v28, v49, type metadata accessor for SharedBeaconRecord);
          uint64_t v30 = 0;
          goto LABEL_7;
        }
        int64_t v39 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        int64_t v40 = (unint64_t)(v25 + 64) >> 6;
        if (v39 >= v40)
        {
          uint64_t v54 = 0;
          uint64_t v30 = 1;
          uint64_t v29 = v49;
          goto LABEL_7;
        }
        unint64_t v41 = *(void *)(v23 + 8 * v39);
        if (v41) {
          goto LABEL_16;
        }
        if (v26 + 2 >= v40) {
          goto LABEL_33;
        }
        unint64_t v41 = *(void *)(v23 + 8 * (v26 + 2));
        if (v41)
        {
          int64_t v39 = v26 + 2;
LABEL_16:
          uint64_t v54 = (v41 - 1) & v41;
          unint64_t v28 = __clz(__rbit64(v41)) + (v39 << 6);
          int64_t v26 = v39;
          goto LABEL_6;
        }
        if (v26 + 3 >= v40)
        {
          uint64_t v54 = 0;
          uint64_t v30 = 1;
          v26 += 2;
          uint64_t v29 = v49;
          goto LABEL_7;
        }
        unint64_t v41 = *(void *)(v23 + 8 * (v26 + 3));
        if (v41)
        {
          int64_t v39 = v26 + 3;
          goto LABEL_16;
        }
        int64_t v39 = v26 + 4;
        if (v26 + 4 < v40)
        {
          unint64_t v41 = *(void *)(v23 + 8 * v39);
          if (v41) {
            goto LABEL_16;
          }
          int64_t v39 = v40 - 1;
          int64_t v44 = v26 + 5;
          while (v40 != v44)
          {
            unint64_t v41 = *(void *)(v23 + 8 * v44++);
            if (v41)
            {
              int64_t v39 = v44 - 1;
              goto LABEL_16;
            }
          }
LABEL_33:
          uint64_t v54 = 0;
          uint64_t v30 = 1;
          int64_t v26 = v39;
          uint64_t v29 = v49;
          goto LABEL_7;
        }
        uint64_t v54 = 0;
        uint64_t v30 = 1;
        v26 += 3;
        uint64_t v29 = v49;
LABEL_7:
        uint64_t v31 = v52;
        (*v51)(v29, v30, 1, v52);
        uint64_t v32 = v56;
        *a5 = v24;
        a5[1] = v32;
        a5[2] = v55;
        a5[3] = v26;
        a5[4] = v54;
        if ((*v50)(v29, 1, v31) == 1)
        {
          sub_10001DAB4(v29, (uint64_t *)&unk_101653D50);
          swift_retain();
          return sub_100B28718(v48, v46, v47, a3);
        }
        sub_1008AB368(v29, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
        Hasher.init(_seed:)();
        sub_10120EF7C();
        Swift::Int v33 = Hasher._finalize()();
        uint64_t v34 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v35 = v33 & ~v34;
        if ((*(void *)(v22 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35)) {
          break;
        }
LABEL_3:
        uint64_t result = (char *)sub_1008AA93C((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      }
      uint64_t v36 = ~v34;
      uint64_t v37 = *(void *)(v53 + 72);
      while (1)
      {
        sub_10089C594(*(void *)(a3 + 48) + v37 * v35, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
        BOOL v38 = sub_101212AE0((uint64_t)v13, (uint64_t)v16);
        sub_1008AA93C((uint64_t)v13, type metadata accessor for SharedBeaconRecord);
        if (v38) {
          break;
        }
        unint64_t v35 = (v35 + 1) & v36;
        if (((*(void *)(v22 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
          goto LABEL_3;
        }
      }
      uint64_t result = (char *)sub_1008AA93C((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      uint64_t v42 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v43 = *(unint64_t *)((char *)v48 + v42);
      *(unint64_t *)((char *)v48 + v42) = v43 & ~(1 << v35);
    }
    while ((v43 & (1 << v35)) == 0);
    uint64_t v20 = v47 - 1;
    if (__OFSUB__(v47, 1))
    {
LABEL_41:
      __break(1u);
      return result;
    }
    if (v47 != 1) {
      continue;
    }
    return (char *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_1008A5D5C(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v35 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v8 = a3 + 56;
  uint64_t v36 = a5;
LABEL_2:
  uint64_t v34 = v7;
LABEL_4:
  while (2)
  {
    int64_t v10 = a5[3];
    unint64_t v9 = a5[4];
    if (v9)
    {
      uint64_t v11 = (v9 - 1) & v9;
      unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_16:
      uint64_t v18 = *(void *)(*a5 + 48) + 24 * v12;
      uint64_t v20 = *(void *)v18;
      uint64_t v19 = *(void *)(v18 + 8);
      Swift::UInt v21 = *(unsigned __int8 *)(v18 + 16);
      a5[3] = v10;
      a5[4] = v11;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v21);
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v24 = v22 & ~v23;
      if (((*(void *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      {
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        a5 = v36;
        continue;
      }
      uint64_t v25 = ~v23;
      uint64_t v26 = *(void *)(v5 + 48);
      while (1)
      {
        uint64_t v27 = v26 + 24 * v24;
        int v28 = *(unsigned __int8 *)(v27 + 16);
        if (*(void *)v27 == v20 && *(void *)(v27 + 8) == v19)
        {
          if (v21 == v28) {
            goto LABEL_26;
          }
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v21 ^ v28) & 1) == 0)
        {
LABEL_26:
          uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
          uint64_t v30 = (v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
          a5 = v36;
          uint64_t v31 = *(unint64_t *)((char *)v35 + v30);
          *(unint64_t *)((char *)v35 + v30) = v31 & ~(1 << v24);
          uint64_t v5 = a3;
          if ((v31 & (1 << v24)) != 0)
          {
            uint64_t v7 = v34 - 1;
            if (__OFSUB__(v34, 1)) {
              goto LABEL_44;
            }
            if (v34 == 1) {
              return (unint64_t *)&_swiftEmptySetSingleton;
            }
            goto LABEL_2;
          }
          goto LABEL_4;
        }
        unint64_t v24 = (v24 + 1) & v25;
        if (((*(void *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
          goto LABEL_3;
        }
      }
    }
    break;
  }
  int64_t v13 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
    if (v13 >= v14)
    {
      int64_t v13 = a5[3];
LABEL_40:
      a5[3] = v13;
      a5[4] = 0;
      swift_retain();
      return (unint64_t *)sub_100B289CC(v35, a2, v34, v5);
    }
    uint64_t v15 = a5[1];
    unint64_t v16 = *(void *)(v15 + 8 * v13);
    if (v16) {
      goto LABEL_15;
    }
    int64_t v17 = v10 + 2;
    if (v10 + 2 >= v14) {
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v15 + 8 * v17);
    if (!v16)
    {
      if (v10 + 3 >= v14) {
        goto LABEL_41;
      }
      unint64_t v16 = *(void *)(v15 + 8 * (v10 + 3));
      if (v16)
      {
        int64_t v13 = v10 + 3;
        goto LABEL_15;
      }
      int64_t v17 = v10 + 4;
      if (v10 + 4 >= v14)
      {
        int64_t v13 = v10 + 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v17);
      if (!v16)
      {
        int64_t v13 = v10 + 5;
        if (v10 + 5 >= v14)
        {
LABEL_41:
          int64_t v13 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v13);
        if (!v16)
        {
          int64_t v13 = v14 - 1;
          int64_t v32 = v10 + 6;
          while (v14 != v32)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v32++);
            if (v16)
            {
              int64_t v13 = v32 - 1;
              goto LABEL_15;
            }
          }
          goto LABEL_40;
        }
        goto LABEL_15;
      }
    }
    int64_t v13 = v17;
LABEL_15:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
    int64_t v10 = v13;
    goto LABEL_16;
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void *sub_1008A6044(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v8 = a3 + 56;
  uint64_t v103 = a3 + 56;
  uint64_t v96 = a5;
LABEL_2:
  uint64_t v93 = v7;
  while (1)
  {
LABEL_4:
    int64_t v10 = a5[3];
    unint64_t v9 = a5[4];
    if (v9)
    {
      uint64_t v11 = (v9 - 1) & v9;
      unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_155;
      }
      int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
      if (v13 >= v14)
      {
        int64_t v13 = a5[3];
        goto LABEL_145;
      }
      uint64_t v15 = a5[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (!v16)
      {
        if (v10 + 2 >= v14) {
          goto LABEL_145;
        }
        unint64_t v16 = *(void *)(v15 + 8 * (v10 + 2));
        if (v16)
        {
          int64_t v13 = v10 + 2;
        }
        else
        {
          int64_t v17 = v10 + 3;
          if (v10 + 3 >= v14)
          {
            int64_t v13 = v10 + 2;
            goto LABEL_145;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v17);
          if (v16)
          {
            int64_t v13 = v10 + 3;
          }
          else
          {
            int64_t v13 = v10 + 4;
            if (v10 + 4 >= v14) {
              goto LABEL_151;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v13);
            if (!v16)
            {
              int64_t v13 = v14 - 1;
              int64_t v18 = v10 + 5;
              do
              {
                if (v14 == v18) {
                  goto LABEL_145;
                }
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
              }
              while (!v16);
              int64_t v13 = v18 - 1;
            }
          }
        }
      }
      uint64_t v11 = (v16 - 1) & v16;
      unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
      int64_t v10 = v13;
    }
    uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
    uint64_t v21 = *v19;
    unint64_t v20 = v19[1];
    a5[3] = v10;
    a5[4] = v11;
    Hasher.init(_seed:)();
    sub_1000361E0(v21, v20);
    Data.hash(into:)();
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v104 = v20;
    if ((*(void *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24)) {
      break;
    }
LABEL_3:
    sub_10001CFB8(v21, v104);
    a5 = v96;
  }
  unint64_t v25 = v20 >> 62;
  uint64_t v105 = ~v23;
  BOOL v26 = __OFSUB__(HIDWORD(v21), v21);
  BOOL v102 = v26;
  size_t __n = BYTE6(v20);
  uint64_t v100 = v21 >> 32;
  uint64_t v99 = (v21 >> 32) - (int)v21;
  while (2)
  {
    uint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v24);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v30 = 0;
    switch(v29 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v28), v28))
        {
          uint64_t v30 = HIDWORD(v28) - (int)v28;
LABEL_35:
          sub_1000361E0(v28, v29);
LABEL_36:
          size_t v33 = __n;
          switch((int)v25)
          {
            case 1:
              size_t v33 = HIDWORD(v21) - (int)v21;
              if (v102) {
                goto LABEL_150;
              }
              goto LABEL_40;
            case 2:
              uint64_t v35 = *(void *)(v21 + 16);
              uint64_t v34 = *(void *)(v21 + 24);
              BOOL v36 = __OFSUB__(v34, v35);
              size_t v33 = v34 - v35;
              if (!v36) {
                goto LABEL_40;
              }
              goto LABEL_149;
            case 3:
              if (v30) {
                goto LABEL_28;
              }
              goto LABEL_139;
            default:
LABEL_40:
              if (v30 != v33)
              {
LABEL_28:
                sub_10001CFB8(v28, v29);
LABEL_29:
                unint64_t v24 = (v24 + 1) & v105;
                if (((*(void *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
                  goto LABEL_3;
                }
                continue;
              }
              if (v30 >= 1)
              {
                switch(v29 >> 62)
                {
                  case 1uLL:
                    if ((int)v28 > v28 >> 32)
                    {
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
LABEL_155:
                      __break(1u);
LABEL_156:
                      __break(1u);
LABEL_157:
                      __break(1u);
LABEL_158:
                      __break(1u);
LABEL_159:
                      __break(1u);
LABEL_160:
                      __break(1u);
LABEL_161:
                      __break(1u);
LABEL_162:
                      __break(1u);
LABEL_163:
                      __break(1u);
LABEL_164:
                      __break(1u);
LABEL_165:
                      __break(1u);
LABEL_166:
                      __break(1u);
LABEL_167:
                      __break(1u);
LABEL_168:
                      __break(1u);
LABEL_169:
                      __break(1u);
LABEL_170:
                      __break(1u);
LABEL_171:
                      __break(1u);
LABEL_172:
                      __break(1u);
LABEL_173:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_174:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_175:
                      __break(1u);
LABEL_176:
                      __break(1u);
LABEL_177:
                      __break(1u);
LABEL_178:
                      __break(1u);
LABEL_179:
                      __break(1u);
LABEL_180:
                      __break(1u);
LABEL_181:
                      __break(1u);
LABEL_182:
                      __break(1u);
LABEL_183:
                      __break(1u);
LABEL_184:
                      __break(1u);
LABEL_185:
                      __break(1u);
LABEL_186:
                      __break(1u);
                    }
                    uint64_t v41 = __DataStorage._bytes.getter();
                    if (v41)
                    {
                      uint64_t v42 = v41;
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v28, v43)) {
                        goto LABEL_154;
                      }
                      int64_t v44 = (const void *)(v42 + (int)v28 - v43);
                    }
                    else
                    {
                      int64_t v44 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v8 = v103;
                    if (!v25)
                    {
                      *(void *)__s1 = v21;
                      *(_DWORD *)&__s1[8] = v104;
                      *(_WORD *)&__s1[12] = WORD2(v104);
                      if (!v44) {
                        goto LABEL_184;
                      }
                      int v59 = memcmp(v44, __s1, __n);
LABEL_123:
                      sub_10001CFB8(v28, v29);
                      uint64_t v5 = a3;
                      if (!v59) {
                        goto LABEL_140;
                      }
                      goto LABEL_29;
                    }
                    if (v25 == 1)
                    {
                      if (v100 < (int)v21) {
                        goto LABEL_164;
                      }
                      swift_retain();
                      uint64_t v60 = (char *)__DataStorage._bytes.getter();
                      if (v60)
                      {
                        uint64_t v61 = __DataStorage._offset.getter();
                        if (__OFSUB__((int)v21, v61)) {
                          goto LABEL_171;
                        }
                        v60 += (int)v21 - v61;
                      }
                      uint64_t v62 = __DataStorage._length.getter();
                      size_t v63 = (v21 >> 32) - (int)v21;
                      if (v62 < v99) {
                        size_t v63 = v62;
                      }
                      if (!v44) {
                        goto LABEL_177;
                      }
                      if (!v60) {
                        goto LABEL_178;
                      }
                      int v59 = memcmp(v44, v60, v63);
                      sub_10001CFB8(v21, v104);
                      goto LABEL_123;
                    }
                    uint64_t v80 = *(void *)(v21 + 16);
                    uint64_t v98 = *(char **)(v21 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v81 = __DataStorage._bytes.getter();
                    if (v81)
                    {
                      uint64_t v82 = v81;
                      uint64_t v83 = __DataStorage._offset.getter();
                      if (__OFSUB__(v80, v83)) {
                        goto LABEL_170;
                      }
                      uint64_t v84 = v80;
                      int64_t v85 = (const void *)(v82 + v80 - v83);
                    }
                    else
                    {
                      uint64_t v84 = v80;
                      int64_t v85 = 0;
                    }
                    char v86 = &v98[-v84];
                    if (__OFSUB__(v98, v84)) {
                      goto LABEL_165;
                    }
                    uint64_t v87 = __DataStorage._length.getter();
                    if (v87 >= (uint64_t)v86) {
                      size_t v88 = (size_t)v86;
                    }
                    else {
                      size_t v88 = v87;
                    }
                    if (!v44) {
                      goto LABEL_185;
                    }
                    if (!v85) {
                      goto LABEL_186;
                    }
                    int v53 = memcmp(v44, v85, v88);
LABEL_136:
                    swift_release();
                    swift_release();
                    sub_10001CFB8(v28, v29);
                    uint64_t v5 = a3;
LABEL_137:
                    uint64_t v8 = v103;
                    if (!v53) {
                      goto LABEL_140;
                    }
                    break;
                  case 2uLL:
                    uint64_t v45 = *(void *)(v28 + 16);
                    swift_retain();
                    swift_retain();
                    uint64_t v46 = __DataStorage._bytes.getter();
                    if (v46)
                    {
                      uint64_t v47 = v46;
                      uint64_t v48 = __DataStorage._offset.getter();
                      if (__OFSUB__(v45, v48)) {
                        goto LABEL_153;
                      }
                      uint64_t v97 = (void *)(v47 + v45 - v48);
                    }
                    else
                    {
                      uint64_t v97 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v8 = v103;
                    if (!v25)
                    {
                      *(void *)__s1 = v21;
                      *(_DWORD *)&__s1[8] = v104;
                      *(_WORD *)&__s1[12] = WORD2(v104);
                      if (!v97) {
                        goto LABEL_181;
                      }
                      int v59 = memcmp(v97, __s1, __n);
LABEL_109:
                      swift_release();
                      goto LABEL_120;
                    }
                    if (v25 == 1)
                    {
                      if (v100 < (int)v21) {
                        goto LABEL_158;
                      }
                      swift_retain();
                      uint64_t v55 = (char *)__DataStorage._bytes.getter();
                      if (v55)
                      {
                        uint64_t v56 = __DataStorage._offset.getter();
                        if (__OFSUB__((int)v21, v56)) {
                          goto LABEL_169;
                        }
                        v55 += (int)v21 - v56;
                      }
                      uint64_t v57 = __DataStorage._length.getter();
                      size_t v58 = (v21 >> 32) - (int)v21;
                      if (v57 < v99) {
                        size_t v58 = v57;
                      }
                      if (!v97) {
                        goto LABEL_175;
                      }
                      if (!v55) {
                        goto LABEL_176;
                      }
                      int v59 = memcmp(v97, v55, v58);
                      sub_10001CFB8(v21, v104);
                      goto LABEL_109;
                    }
                    uint64_t v74 = *(void *)(v21 + 16);
                    uint64_t v95 = *(void *)(v21 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v75 = (char *)__DataStorage._bytes.getter();
                    if (v75)
                    {
                      uint64_t v76 = __DataStorage._offset.getter();
                      if (__OFSUB__(v74, v76)) {
                        goto LABEL_168;
                      }
                      v75 += v74 - v76;
                    }
                    BOOL v36 = __OFSUB__(v95, v74);
                    int64_t v77 = v95 - v74;
                    if (v36) {
                      goto LABEL_163;
                    }
                    uint64_t v78 = __DataStorage._length.getter();
                    if (v78 >= v77) {
                      size_t v79 = v77;
                    }
                    else {
                      size_t v79 = v78;
                    }
                    if (!v97) {
                      goto LABEL_182;
                    }
                    uint64_t v8 = v103;
                    if (!v75) {
                      goto LABEL_183;
                    }
                    int v59 = memcmp(v97, v75, v79);
                    swift_release();
                    swift_release();
                    swift_release();
LABEL_120:
                    swift_release();
                    goto LABEL_123;
                  case 3uLL:
                    *(void *)&__s1[6] = 0;
                    *(void *)__s1 = 0;
                    if (!v25) {
                      goto LABEL_66;
                    }
                    if (v25 == 1)
                    {
                      if (v100 < (int)v21) {
                        goto LABEL_157;
                      }
                      sub_1000361E0(v21, v104);
                      uint64_t v49 = __DataStorage._bytes.getter();
                      if (!v49) {
                        goto LABEL_174;
                      }
                      uint64_t v38 = v49;
                      uint64_t v50 = __DataStorage._offset.getter();
                      uint64_t v40 = (int)v21 - v50;
                      if (__OFSUB__((int)v21, v50)) {
                        goto LABEL_162;
                      }
LABEL_62:
                      uint64_t v51 = __DataStorage._length.getter();
                      if (v51 >= v99) {
                        size_t v52 = (v21 >> 32) - (int)v21;
                      }
                      else {
                        size_t v52 = v51;
                      }
                      int v53 = memcmp(__s1, (const void *)(v38 + v40), v52);
                      sub_10001CFB8(v21, v104);
                      sub_10001CFB8(v28, v29);
                      goto LABEL_137;
                    }
                    uint64_t v70 = *(void *)(v21 + 16);
                    uint64_t v71 = *(void *)(v21 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v66 = (char *)__DataStorage._bytes.getter();
                    if (v66)
                    {
                      uint64_t v72 = __DataStorage._offset.getter();
                      if (__OFSUB__(v70, v72)) {
                        goto LABEL_167;
                      }
                      v66 += v70 - v72;
                    }
                    BOOL v36 = __OFSUB__(v71, v70);
                    int64_t v68 = v71 - v70;
                    if (v36) {
                      goto LABEL_160;
                    }
                    uint64_t v69 = __DataStorage._length.getter();
                    if (!v66) {
                      goto LABEL_180;
                    }
LABEL_103:
                    if (v69 >= v68) {
                      size_t v73 = v68;
                    }
                    else {
                      size_t v73 = v69;
                    }
                    int v53 = memcmp(__s1, v66, v73);
                    goto LABEL_136;
                  default:
                    *(void *)__s1 = v28;
                    *(_WORD *)&__s1[8] = v29;
                    __s1[10] = BYTE2(v29);
                    __s1[11] = BYTE3(v29);
                    __s1[12] = BYTE4(v29);
                    __s1[13] = BYTE5(v29);
                    if (!v25)
                    {
LABEL_66:
                      uint64_t __s2 = v21;
                      int v108 = v104;
                      __int16 v109 = WORD2(v104);
                      int v54 = memcmp(__s1, &__s2, __n);
                      sub_10001CFB8(v28, v29);
                      if (!v54) {
                        goto LABEL_140;
                      }
                      goto LABEL_29;
                    }
                    if (v25 == 1)
                    {
                      if (v100 < (int)v21) {
                        goto LABEL_156;
                      }
                      sub_1000361E0(v21, v104);
                      uint64_t v37 = __DataStorage._bytes.getter();
                      if (!v37) {
                        goto LABEL_173;
                      }
                      uint64_t v38 = v37;
                      uint64_t v39 = __DataStorage._offset.getter();
                      uint64_t v40 = (int)v21 - v39;
                      if (__OFSUB__((int)v21, v39)) {
                        goto LABEL_161;
                      }
                      goto LABEL_62;
                    }
                    uint64_t v64 = *(void *)(v21 + 16);
                    uint64_t v65 = *(void *)(v21 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v66 = (char *)__DataStorage._bytes.getter();
                    if (v66)
                    {
                      uint64_t v67 = __DataStorage._offset.getter();
                      if (__OFSUB__(v64, v67)) {
                        goto LABEL_166;
                      }
                      v66 += v64 - v67;
                    }
                    BOOL v36 = __OFSUB__(v65, v64);
                    int64_t v68 = v65 - v64;
                    if (v36) {
                      goto LABEL_159;
                    }
                    uint64_t v69 = __DataStorage._length.getter();
                    if (!v66) {
                      goto LABEL_179;
                    }
                    goto LABEL_103;
                }
                goto LABEL_29;
              }
LABEL_139:
              sub_10001CFB8(v28, v29);
LABEL_140:
              sub_10001CFB8(v21, v104);
              uint64_t v89 = (v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v90 = *(unint64_t *)((char *)a1 + v89);
              *(unint64_t *)((char *)a1 + v89) = v90 & ~(1 << v24);
              a5 = v96;
              if ((v90 & (1 << v24)) == 0) {
                goto LABEL_4;
              }
              uint64_t v7 = v93 - 1;
              if (__OFSUB__(v93, 1)) {
                goto LABEL_172;
              }
              if (v93 == 1) {
                return &_swiftEmptySetSingleton;
              }
              break;
          }
          goto LABEL_2;
        }
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        int64_t v13 = v17;
LABEL_145:
        a5[3] = v13;
        a5[4] = 0;
        swift_retain();
        return (void *)sub_100B28C80(a1, a2, v93, v5);
      case 2uLL:
        uint64_t v32 = *(void *)(v28 + 16);
        uint64_t v31 = *(void *)(v28 + 24);
        uint64_t v30 = v31 - v32;
        if (!__OFSUB__(v31, v32)) {
          goto LABEL_35;
        }
        goto LABEL_148;
      case 3uLL:
        goto LABEL_36;
      default:
        uint64_t v30 = BYTE6(v29);
        goto LABEL_36;
    }
  }
}

void *sub_1008A6BD8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  int v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  size_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          size_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
          uint64_t v51 = v64;
          swift_retain();
          return (void *)sub_100B2838C(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        unint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_1008AAC94((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

unsigned char *sub_1008A715C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v9 = a3 + 56;
LABEL_2:
  uint64_t v41 = v8;
  while (1)
  {
    int64_t v13 = a5[3];
    unint64_t v12 = a5[4];
    if (!v12) {
      break;
    }
    uint64_t v14 = (v12 - 1) & v12;
    unint64_t v15 = __clz(__rbit64(v12)) | (v13 << 6);
LABEL_23:
    int v21 = *(unsigned __int8 *)(*(void *)(*a5 + 48) + v15);
    a5[3] = v13;
    a5[4] = v14;
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v24 = v22 & ~v23;
    if ((*(void *)(v9 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
    {
      uint64_t v25 = ~v23;
LABEL_25:
      unint64_t v26 = 0xE700000000000000;
      uint64_t v27 = 0x6E776F6E6B6E75;
      switch(*(unsigned char *)(*(void *)(a3 + 48) + v24))
      {
        case 1:
          unint64_t v26 = 0x80000001013EF140;
          uint64_t v27 = 0xD000000000000015;
          break;
        case 2:
          uint64_t v27 = 0xD000000000000016;
          unint64_t v26 = 0x80000001013EF160;
          break;
        case 3:
          unint64_t v26 = 0xE600000000000000;
          uint64_t v27 = 0x657461636F6CLL;
          break;
        case 4:
          unint64_t v26 = 0xEC000000676E6972;
          uint64_t v27 = 0x6168537472617473;
          break;
        case 5:
          uint64_t v27 = 0x72616853706F7473;
          goto LABEL_36;
        case 6:
          unsigned int v28 = 2036427888;
          goto LABEL_33;
        case 7:
          unsigned int v28 = 1886352499;
LABEL_33:
          uint64_t v27 = v28 | 0x6E756F5300000000;
          unint64_t v26 = 0xE900000000000064;
          break;
        case 8:
          uint64_t v27 = 0x61654C6E69676562;
          unint64_t v26 = 0xED0000676E696873;
          break;
        case 9:
          uint64_t v27 = 0x687361654C646E65;
LABEL_36:
          unint64_t v26 = 0xEB00000000676E69;
          break;
        case 0xA:
          uint64_t v27 = 0x4654426E69676562;
          uint64_t v29 = 0x676E69646E69;
          goto LABEL_49;
        case 0xB:
          uint64_t v27 = 0x6E69465442646E65;
          unint64_t v26 = 0xEC000000676E6964;
          break;
        case 0xC:
          unint64_t v26 = 0xEC000000676E6967;
          uint64_t v27 = 0x6E61526E69676562;
          break;
        case 0xD:
          uint64_t v27 = 0x69676E6152646E65;
          unint64_t v26 = 0xEA0000000000676ELL;
          break;
        case 0xE:
          uint64_t v27 = 0x6F4C656C62616E65;
          uint64_t v29 = 0x65646F4D7473;
          goto LABEL_49;
        case 0xF:
          uint64_t v27 = 0x4C656C6261736964;
          unint64_t v26 = 0xEF65646F4D74736FLL;
          break;
        case 0x10:
          unint64_t v26 = 0xE600000000000000;
          uint64_t v27 = 0x656D616E6572;
          break;
        case 0x11:
          uint64_t v27 = 0x7463656E6E6F63;
          break;
        case 0x12:
          unint64_t v26 = 0xEA00000000007463;
          uint64_t v27 = 0x656E6E6F63736964;
          break;
        case 0x13:
          uint64_t v27 = 0xD000000000000017;
          unint64_t v26 = 0x80000001013EF240;
          break;
        case 0x14:
          unint64_t v26 = 0xE600000000000000;
          uint64_t v27 = 0x726961706E75;
          break;
        case 0x15:
          uint64_t v27 = 0x65746167656C6564;
          uint64_t v29 = 0x657261685364;
LABEL_49:
          unint64_t v26 = v29 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        default:
          break;
      }
      unint64_t v30 = 0xE700000000000000;
      uint64_t v31 = 0x6E776F6E6B6E75;
      switch(v21)
      {
        case 1:
          unint64_t v30 = 0x80000001013EF140;
          if (v27 != 0xD000000000000015) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 2:
          unint64_t v32 = 0xD000000000000016;
          size_t v33 = "enableNotifyWhenFound";
          goto LABEL_85;
        case 3:
          unint64_t v30 = 0xE600000000000000;
          if (v27 != 0x657461636F6CLL) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 4:
          unint64_t v30 = 0xEC000000676E6972;
          if (v27 != 0x6168537472617473) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 5:
          uint64_t v34 = 0x72616853706F7473;
          goto LABEL_66;
        case 6:
          unsigned int v35 = 2036427888;
          goto LABEL_61;
        case 7:
          unsigned int v35 = 1886352499;
LABEL_61:
          unint64_t v30 = 0xE900000000000064;
          if (v27 != (v35 | 0x6E756F5300000000)) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 8:
          unint64_t v30 = 0xED0000676E696873;
          if (v27 != 0x61654C6E69676562) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 9:
          uint64_t v34 = 0x687361654C646E65;
LABEL_66:
          unint64_t v30 = 0xEB00000000676E69;
          if (v27 != v34) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 10:
          uint64_t v36 = 0x4654426E69676562;
          uint64_t v37 = 0x676E69646E69;
          goto LABEL_94;
        case 11:
          unint64_t v30 = 0xEC000000676E6964;
          if (v27 != 0x6E69465442646E65) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 12:
          unint64_t v30 = 0xEC000000676E6967;
          if (v27 != 0x6E61526E69676562) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 13:
          unint64_t v30 = 0xEA0000000000676ELL;
          if (v27 != 0x69676E6152646E65) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 14:
          uint64_t v36 = 0x6F4C656C62616E65;
          uint64_t v37 = 0x65646F4D7473;
          goto LABEL_94;
        case 15:
          unint64_t v30 = 0xEF65646F4D74736FLL;
          if (v27 != 0x4C656C6261736964) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 16:
          unint64_t v30 = 0xE600000000000000;
          if (v27 != 0x656D616E6572) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 17:
          if (v27 != 0x7463656E6E6F63) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 18:
          unint64_t v30 = 0xEA00000000007463;
          if (v27 != 0x656E6E6F63736964) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 19:
          unint64_t v32 = 0xD000000000000017;
          size_t v33 = "onnect";
LABEL_85:
          unint64_t v30 = (unint64_t)v33 | 0x8000000000000000;
          if (v27 != v32) {
            goto LABEL_90;
          }
          goto LABEL_89;
        case 20:
          unint64_t v30 = 0xE600000000000000;
          uint64_t v31 = 0x726961706E75;
          goto LABEL_88;
        case 21:
          uint64_t v36 = 0x65746167656C6564;
          uint64_t v37 = 0x657261685364;
LABEL_94:
          unint64_t v30 = v37 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v27 != v36) {
            goto LABEL_90;
          }
          goto LABEL_89;
        default:
LABEL_88:
          if (v27 != v31) {
            goto LABEL_90;
          }
LABEL_89:
          if (v26 != v30)
          {
LABEL_90:
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v38) {
              goto LABEL_4;
            }
            unint64_t v24 = (v24 + 1) & v25;
            if (((*(void *)(v9 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
              continue;
            }
            goto LABEL_25;
          }
          swift_bridgeObjectRelease_n();
LABEL_4:
          uint64_t v10 = (v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
          uint64_t v11 = *(unint64_t *)((char *)a1 + v10);
          *(unint64_t *)((char *)a1 + v10) = v11 & ~(1 << v24);
          if ((v11 & (1 << v24)) == 0) {
            continue;
          }
          uint64_t v8 = v41 - 1;
          if (__OFSUB__(v41, 1)) {
            goto LABEL_104;
          }
          if (v41 == 1) {
            return &_swiftEmptySetSingleton;
          }
          break;
      }
      goto LABEL_2;
    }
  }
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_104:
    __break(1u);
    JUMPOUT(0x1008A7BF4);
  }
  int64_t v17 = (unint64_t)(a5[2] + 64) >> 6;
  if (v16 < v17)
  {
    uint64_t v18 = a5[1];
    unint64_t v19 = *(void *)(v18 + 8 * v16);
    if (!v19)
    {
      if (v13 + 2 >= v17) {
        goto LABEL_100;
      }
      unint64_t v19 = *(void *)(v18 + 8 * (v13 + 2));
      if (v19)
      {
        int64_t v16 = v13 + 2;
      }
      else
      {
        if (v13 + 3 >= v17)
        {
          int64_t v16 = v13 + 2;
          goto LABEL_100;
        }
        unint64_t v19 = *(void *)(v18 + 8 * (v13 + 3));
        if (v19)
        {
          int64_t v16 = v13 + 3;
        }
        else
        {
          int64_t v16 = v13 + 4;
          if (v13 + 4 >= v17)
          {
            int64_t v16 = v13 + 3;
            goto LABEL_100;
          }
          unint64_t v19 = *(void *)(v18 + 8 * v16);
          if (!v19)
          {
            int64_t v16 = v17 - 1;
            int64_t v20 = v13 + 5;
            do
            {
              if (v17 == v20) {
                goto LABEL_100;
              }
              unint64_t v19 = *(void *)(v18 + 8 * v20++);
            }
            while (!v19);
            int64_t v16 = v20 - 1;
          }
        }
      }
    }
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
    int64_t v13 = v16;
    goto LABEL_23;
  }
  int64_t v16 = a5[3];
LABEL_100:
  a5[3] = v16;
  a5[4] = 0;
  swift_retain();
  return sub_100B28F1C(a1, a2, v41, a3);
}

char *sub_1008A7CFC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v103 = a2;
  char v116 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v108 = *((void *)v116 - 1);
  uint64_t v9 = __chkstk_darwin(v116);
  uint64_t v11 = (uint64_t *)((char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v107 = (uint64_t)&v102 - v13;
  __chkstk_darwin(v12);
  char v120 = (uint64_t *)((char *)&v102 - v14);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v17 = *(unint64_t *)((char *)a1 + v16) & ((-1 << a4) - 1);
  unint64_t v104 = a1;
  *(unint64_t *)((char *)a1 + v16) = v17;
  uint64_t v105 = v15 - 1;
  uint64_t v18 = *a5;
  unint64_t v19 = a5[1];
  unint64_t v20 = *(void *)(*a5 + 16);
  if (v19 == v20) {
    goto LABEL_128;
  }
  uint64_t v119 = a3 + 56;
  uint64_t v113 = a3;
  int64_t v106 = a5;
  char v121 = v11;
LABEL_3:
  if (v19 >= v20) {
    goto LABEL_134;
  }
  uint64_t v21 = v18 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
  uint64_t v118 = *(void *)(v108 + 72);
  uint64_t v22 = v107;
  sub_10089C594(v21 + v118 * v19, v107, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  a5[1] = v19 + 1;
  uint64_t v23 = v120;
  sub_1008AB368(v22, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  Hasher.init(_seed:)();
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_1000361E0(*v23, v25);
  Data.hash(into:)();
  sub_10001CFB8(v24, v25);
  unint64_t v26 = v116;
  uint64_t v27 = (char *)v23 + v116[5];
  type metadata accessor for UUID();
  sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  unint64_t v115 = v27;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v114 = (char *)v23 + v26[6];
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v112 = v26[7];
  Hasher._combine(_:)(*((unsigned __int8 *)v23 + v112));
  uint64_t v110 = v26[8];
  uint64_t v28 = *(uint64_t *)((char *)v23 + v110);
  swift_bridgeObjectRetain();
  sub_100DF9434(__s1, v28);
  swift_bridgeObjectRelease();
  uint64_t v109 = v26[9];
  Hasher._combine(_:)(*((unsigned __int8 *)v23 + v109));
  Swift::Int v29 = Hasher._finalize()();
  uint64_t v30 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v31 = v29 & ~v30;
  if (((*(void *)(v119 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
  {
LABEL_125:
    sub_1008AA93C((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
LABEL_126:
    a5 = v106;
    goto LABEL_127;
  }
  uint64_t v117 = ~v30;
  while (2)
  {
    sub_10089C594(*(void *)(a3 + 48) + v31 * v118, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v33 = *v11;
    unint64_t v32 = v11[1];
    uint64_t v34 = *v120;
    unint64_t v35 = v120[1];
    uint64_t v36 = 0;
    switch(v32 >> 62)
    {
      case 1uLL:
        LODWORD(v36) = HIDWORD(v33) - v33;
        if (!__OFSUB__(HIDWORD(v33), v33))
        {
          uint64_t v36 = (int)v36;
LABEL_13:
          unint64_t v40 = v35 >> 62;
          switch(v35 >> 62)
          {
            case 1uLL:
              LODWORD(v41) = HIDWORD(v34) - v34;
              if (__OFSUB__(HIDWORD(v34), v34)) {
                goto LABEL_131;
              }
              uint64_t v41 = (int)v41;
LABEL_18:
              if (v36 != v41) {
                goto LABEL_7;
              }
              if (v36 < 1) {
                goto LABEL_116;
              }
              break;
            case 2uLL:
              uint64_t v43 = *(void *)(v34 + 16);
              uint64_t v42 = *(void *)(v34 + 24);
              BOOL v39 = __OFSUB__(v42, v43);
              uint64_t v41 = v42 - v43;
              if (!v39) {
                goto LABEL_18;
              }
              goto LABEL_132;
            case 3uLL:
              if (v36) {
                goto LABEL_7;
              }
              goto LABEL_116;
            default:
              uint64_t v41 = BYTE6(v35);
              goto LABEL_18;
          }
          switch(v32 >> 62)
          {
            case 1uLL:
              if ((int)v33 > v33 >> 32) {
                goto LABEL_133;
              }
              sub_1000361E0(v33, v32);
              int64_t v49 = (char *)__DataStorage._bytes.getter();
              if (!v49) {
                goto LABEL_32;
              }
              uint64_t v50 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v33, v50)) {
                goto LABEL_136;
              }
              v49 += (int)v33 - v50;
LABEL_32:
              __DataStorage._length.getter();
              a3 = v113;
              if (!v40)
              {
                *(void *)&__s1[0] = v34;
                WORD4(__s1[0]) = v35;
                BYTE10(__s1[0]) = BYTE2(v35);
                BYTE11(__s1[0]) = BYTE3(v35);
                BYTE12(__s1[0]) = BYTE4(v35);
                BYTE13(__s1[0]) = BYTE5(v35);
                if (!v49) {
                  goto LABEL_166;
                }
                int v89 = memcmp(v49, __s1, BYTE6(v35));
                sub_10001CFB8(v33, v32);
                if (v89) {
                  goto LABEL_7;
                }
                goto LABEL_116;
              }
              char v111 = v49;
              if (v40 == 1)
              {
                if (v34 >> 32 < (int)v34) {
                  goto LABEL_146;
                }
                swift_retain();
                uint64_t v51 = (char *)__DataStorage._bytes.getter();
                if (v51)
                {
                  uint64_t v52 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v34, v52)) {
                    goto LABEL_153;
                  }
                  v51 += (int)v34 - v52;
                }
                uint64_t v53 = __DataStorage._length.getter();
                if (v53 >= (v34 >> 32) - (int)v34) {
                  size_t v54 = (v34 >> 32) - (int)v34;
                }
                else {
                  size_t v54 = v53;
                }
                a3 = v113;
                if (!v111) {
                  goto LABEL_156;
                }
                if (!v51) {
                  goto LABEL_157;
                }
                int v55 = memcmp(v111, v51, v54);
                sub_10001CFB8(v34, v35);
                uint64_t v56 = v33;
                unint64_t v57 = v32;
                goto LABEL_69;
              }
              uint64_t v90 = *(void *)(v34 + 16);
              uint64_t v91 = *(void *)(v34 + 24);
              swift_retain();
              swift_retain();
              uint64_t v92 = (char *)__DataStorage._bytes.getter();
              if (v92)
              {
                uint64_t v93 = __DataStorage._offset.getter();
                if (__OFSUB__(v90, v93)) {
                  goto LABEL_152;
                }
                v92 += v90 - v93;
              }
              BOOL v39 = __OFSUB__(v91, v90);
              int64_t v94 = v91 - v90;
              if (v39) {
                goto LABEL_147;
              }
              uint64_t v95 = __DataStorage._length.getter();
              if (v95 >= v94) {
                size_t v96 = v94;
              }
              else {
                size_t v96 = v95;
              }
              if (!v111) {
                goto LABEL_167;
              }
              if (!v92) {
                goto LABEL_168;
              }
              int v97 = memcmp(v111, v92, v96);
              swift_release();
              swift_release();
              sub_10001CFB8(v33, v32);
              if (v97) {
                goto LABEL_7;
              }
              goto LABEL_116;
            case 2uLL:
              uint64_t v58 = *(void *)(v33 + 16);
              swift_retain();
              swift_retain();
              int v59 = (char *)__DataStorage._bytes.getter();
              if (!v59) {
                goto LABEL_47;
              }
              uint64_t v60 = __DataStorage._offset.getter();
              if (__OFSUB__(v58, v60)) {
                goto LABEL_135;
              }
              v59 += v58 - v60;
LABEL_47:
              __DataStorage._length.getter();
              if (v40)
              {
                char v111 = v59;
                if (v40 != 1)
                {
                  uint64_t v82 = *(void *)(v34 + 16);
                  uint64_t v83 = *(void *)(v34 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v84 = (char *)__DataStorage._bytes.getter();
                  if (v84)
                  {
                    uint64_t v85 = __DataStorage._offset.getter();
                    if (__OFSUB__(v82, v85)) {
                      goto LABEL_150;
                    }
                    v84 += v82 - v85;
                  }
                  BOOL v39 = __OFSUB__(v83, v82);
                  int64_t v86 = v83 - v82;
                  a3 = v113;
                  if (v39) {
                    goto LABEL_145;
                  }
                  uint64_t v87 = __DataStorage._length.getter();
                  if (v87 >= v86) {
                    size_t v88 = v86;
                  }
                  else {
                    size_t v88 = v87;
                  }
                  if (!v111) {
                    goto LABEL_164;
                  }
                  if (!v84) {
                    goto LABEL_165;
                  }
                  int v80 = memcmp(v111, v84, v88);
                  swift_release();
                  swift_release();
                  goto LABEL_101;
                }
                if (v34 >> 32 < (int)v34) {
                  goto LABEL_140;
                }
                swift_retain();
                uint64_t v61 = (char *)__DataStorage._bytes.getter();
                if (v61)
                {
                  uint64_t v62 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v34, v62)) {
                    goto LABEL_151;
                  }
                  v61 += (int)v34 - v62;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= (v34 >> 32) - (int)v34) {
                  size_t v64 = (v34 >> 32) - (int)v34;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v111) {
                  goto LABEL_158;
                }
                a3 = v113;
                if (!v61) {
                  goto LABEL_159;
                }
                int v65 = memcmp(v111, v61, v64);
                sub_10001CFB8(v34, v35);
                swift_release();
                swift_release();
                if (v65) {
                  goto LABEL_7;
                }
              }
              else
              {
                *(void *)&__s1[0] = v34;
                WORD4(__s1[0]) = v35;
                BYTE10(__s1[0]) = BYTE2(v35);
                BYTE11(__s1[0]) = BYTE3(v35);
                BYTE12(__s1[0]) = BYTE4(v35);
                BYTE13(__s1[0]) = BYTE5(v35);
                a3 = v113;
                if (!v59) {
                  goto LABEL_163;
                }
                int v81 = memcmp(v59, __s1, BYTE6(v35));
                swift_release();
                swift_release();
                if (v81) {
                  goto LABEL_7;
                }
              }
              goto LABEL_116;
            case 3uLL:
              *(void *)((char *)__s1 + 6) = 0;
              *(void *)&__s1[0] = 0;
              if (!v40) {
                goto LABEL_71;
              }
              if (v40 == 1)
              {
                uint64_t v44 = (v34 >> 32) - (int)v34;
                if (v34 >> 32 < (int)v34) {
                  goto LABEL_139;
                }
                swift_retain();
                uint64_t v66 = __DataStorage._bytes.getter();
                if (!v66) {
                  goto LABEL_160;
                }
                uint64_t v46 = v66;
                uint64_t v67 = __DataStorage._offset.getter();
                uint64_t v48 = (int)v34 - v67;
                if (__OFSUB__((int)v34, v67)) {
                  goto LABEL_144;
                }
                goto LABEL_65;
              }
              uint64_t v76 = *(void *)(v34 + 16);
              uint64_t v77 = *(void *)(v34 + 24);
              swift_retain();
              swift_retain();
              uint64_t v72 = (char *)__DataStorage._bytes.getter();
              if (v72)
              {
                uint64_t v78 = __DataStorage._offset.getter();
                if (__OFSUB__(v76, v78)) {
                  goto LABEL_149;
                }
                v72 += v76 - v78;
              }
              BOOL v39 = __OFSUB__(v77, v76);
              int64_t v74 = v77 - v76;
              if (v39) {
                goto LABEL_142;
              }
              uint64_t v75 = __DataStorage._length.getter();
              if (!v72) {
                goto LABEL_162;
              }
              goto LABEL_84;
            default:
              *(void *)&__s1[0] = v33;
              WORD4(__s1[0]) = v32;
              BYTE10(__s1[0]) = BYTE2(v32);
              BYTE11(__s1[0]) = BYTE3(v32);
              BYTE12(__s1[0]) = BYTE4(v32);
              BYTE13(__s1[0]) = BYTE5(v32);
              if (v40)
              {
                if (v40 == 1)
                {
                  uint64_t v44 = (v34 >> 32) - (int)v34;
                  if (v34 >> 32 < (int)v34)
                  {
                    __break(1u);
LABEL_139:
                    __break(1u);
LABEL_140:
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
                  }
                  swift_retain();
                  uint64_t v45 = __DataStorage._bytes.getter();
                  if (!v45) {
                    goto LABEL_155;
                  }
                  uint64_t v46 = v45;
                  uint64_t v47 = __DataStorage._offset.getter();
                  uint64_t v48 = (int)v34 - v47;
                  if (__OFSUB__((int)v34, v47)) {
                    goto LABEL_143;
                  }
LABEL_65:
                  uint64_t v68 = __DataStorage._length.getter();
                  if (v68 >= v44) {
                    size_t v69 = v44;
                  }
                  else {
                    size_t v69 = v68;
                  }
                  int v55 = memcmp(__s1, (const void *)(v46 + v48), v69);
                  uint64_t v56 = v34;
                  unint64_t v57 = v35;
LABEL_69:
                  sub_10001CFB8(v56, v57);
                  if (v55) {
                    goto LABEL_7;
                  }
                }
                else
                {
                  uint64_t v70 = *(void *)(v34 + 16);
                  uint64_t v71 = *(void *)(v34 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v72 = (char *)__DataStorage._bytes.getter();
                  if (v72)
                  {
                    uint64_t v73 = __DataStorage._offset.getter();
                    if (__OFSUB__(v70, v73)) {
                      goto LABEL_148;
                    }
                    v72 += v70 - v73;
                  }
                  BOOL v39 = __OFSUB__(v71, v70);
                  int64_t v74 = v71 - v70;
                  if (v39) {
                    goto LABEL_141;
                  }
                  uint64_t v75 = __DataStorage._length.getter();
                  if (!v72) {
                    goto LABEL_161;
                  }
LABEL_84:
                  if (v75 >= v74) {
                    size_t v79 = v74;
                  }
                  else {
                    size_t v79 = v75;
                  }
                  int v80 = memcmp(__s1, v72, v79);
LABEL_101:
                  swift_release();
                  swift_release();
                  if (v80)
                  {
LABEL_7:
                    uint64_t v11 = v121;
                    sub_1008AA93C((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                    unint64_t v31 = (v31 + 1) & v117;
                    if (((*(void *)(v119 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
                      goto LABEL_125;
                    }
                    continue;
                  }
                }
              }
              else
              {
LABEL_71:
                uint64_t __s2 = v34;
                __int16 v123 = v35;
                char v124 = BYTE2(v35);
                char v125 = BYTE3(v35);
                char v126 = BYTE4(v35);
                char v127 = BYTE5(v35);
                if (memcmp(__s1, &__s2, BYTE6(v35))) {
                  goto LABEL_7;
                }
              }
LABEL_116:
              if ((static UUID.== infix(_:_:)() & 1) == 0
                || (static UUID.== infix(_:_:)() & 1) == 0
                || *((unsigned __int8 *)v121 + v116[7]) != *((unsigned __int8 *)v120 + v112)
                || (sub_100DF62D4(*(uint64_t *)((char *)v121 + v116[8]), *(uint64_t *)((char *)v120 + v110)) & 1) == 0
                || *((unsigned __int8 *)v121 + v116[9]) != *((unsigned __int8 *)v120 + v109))
              {
                goto LABEL_7;
              }
              uint64_t v11 = v121;
              sub_1008AA93C((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
              sub_1008AA93C((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
              uint64_t v98 = (v31 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v99 = *(unint64_t *)((char *)v104 + v98);
              *(unint64_t *)((char *)v104 + v98) = v99 & ~(1 << v31);
              if ((v99 & (1 << v31)) == 0) {
                goto LABEL_126;
              }
              uint64_t v100 = v105 - 1;
              a5 = v106;
              if (__OFSUB__(v105, 1)) {
                goto LABEL_154;
              }
              --v105;
              if (!v100) {
                return (char *)&_swiftEmptySetSingleton;
              }
LABEL_127:
              uint64_t v18 = *a5;
              unint64_t v19 = a5[1];
              unint64_t v20 = *(void *)(*a5 + 16);
              if (v19 == v20)
              {
LABEL_128:
                swift_retain();
                return sub_100B29490(v104, v103, v105, a3);
              }
              break;
          }
          goto LABEL_3;
        }
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        return (char *)&_swiftEmptySetSingleton;
      case 2uLL:
        uint64_t v38 = *(void *)(v33 + 16);
        uint64_t v37 = *(void *)(v33 + 24);
        BOOL v39 = __OFSUB__(v37, v38);
        uint64_t v36 = v37 - v38;
        if (!v39) {
          goto LABEL_13;
        }
        goto LABEL_130;
      case 3uLL:
        goto LABEL_13;
      default:
        uint64_t v36 = BYTE6(v32);
        goto LABEL_13;
    }
  }
}

void sub_1008A8AB0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v36 = a3 + 56;
  while (2)
  {
    uint64_t v34 = v7;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000) == 0)
        {
          int64_t v9 = a5[3];
          unint64_t v8 = a5[4];
          if (v8)
          {
            uint64_t v10 = (v8 - 1) & v8;
            unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_7:
            uint64_t v12 = *(void **)(*(void *)(*a5 + 48) + 8 * v11);
            id v13 = v12;
            goto LABEL_8;
          }
          int64_t v26 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          int64_t v27 = (unint64_t)(a5[2] + 64) >> 6;
          if (v26 >= v27)
          {
            uint64_t v12 = 0;
            uint64_t v10 = 0;
            goto LABEL_8;
          }
          uint64_t v28 = a5[1];
          unint64_t v29 = *(void *)(v28 + 8 * v26);
          if (v29)
          {
LABEL_22:
            uint64_t v10 = (v29 - 1) & v29;
            unint64_t v11 = __clz(__rbit64(v29)) + (v26 << 6);
            int64_t v9 = v26;
            goto LABEL_7;
          }
          int64_t v31 = v9 + 2;
          if (v9 + 2 >= v27) {
            goto LABEL_41;
          }
          unint64_t v29 = *(void *)(v28 + 8 * v31);
          if (v29)
          {
LABEL_29:
            int64_t v26 = v31;
            goto LABEL_22;
          }
          if (v9 + 3 < v27)
          {
            unint64_t v29 = *(void *)(v28 + 8 * (v9 + 3));
            if (v29)
            {
              int64_t v26 = v9 + 3;
              goto LABEL_22;
            }
            int64_t v31 = v9 + 4;
            if (v9 + 4 >= v27)
            {
              uint64_t v12 = 0;
              uint64_t v10 = 0;
              v9 += 3;
LABEL_8:
              a5[3] = v9;
              a5[4] = v10;
              if (!v12) {
                goto LABEL_47;
              }
              goto LABEL_12;
            }
            unint64_t v29 = *(void *)(v28 + 8 * v31);
            if (v29) {
              goto LABEL_29;
            }
            int64_t v26 = v9 + 5;
            if (v9 + 5 < v27)
            {
              unint64_t v29 = *(void *)(v28 + 8 * v26);
              if (v29) {
                goto LABEL_22;
              }
              int64_t v26 = v27 - 1;
              int64_t v32 = v9 + 6;
              while (v27 != v32)
              {
                unint64_t v29 = *(void *)(v28 + 8 * v32++);
                if (v29)
                {
                  int64_t v26 = v32 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              uint64_t v12 = 0;
              uint64_t v10 = 0;
              int64_t v9 = v26;
              goto LABEL_8;
            }
          }
          uint64_t v12 = 0;
          uint64_t v10 = 0;
          int64_t v9 = v31;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (sub_10001D4B0(0, (unint64_t *)&qword_10163B900),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              uint64_t v12 = v38,
              swift_unknownObjectRelease(),
              !v38))
        {
LABEL_47:
          swift_retain();
          sub_100B29854(a1, a2, v34, a3);
          return;
        }
LABEL_12:
        Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v16 = v14 & ~v15;
        unint64_t v17 = v16 >> 6;
        uint64_t v18 = 1 << v16;
        if (((1 << v16) & *(void *)(v36 + 8 * (v16 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
        id v19 = *(id *)(*(void *)(a3 + 48) + 8 * v16);
        char v20 = static NSObject.== infix(_:_:)();

        if (v20) {
          break;
        }
        uint64_t v21 = ~v15;
        for (unint64_t i = v16 + 1; ; unint64_t i = v23 + 1)
        {
          unint64_t v23 = i & v21;
          if (((*(void *)(v36 + (((i & v21) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v21)) & 1) == 0) {
            break;
          }
          id v24 = *(id *)(*(void *)(a3 + 48) + 8 * v23);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25)
          {

            unint64_t v17 = v23 >> 6;
            uint64_t v18 = 1 << v23;
            goto LABEL_25;
          }
        }
LABEL_3:
      }
LABEL_25:
      unint64_t v30 = a1[v17];
      a1[v17] = v30 & ~v18;
    }
    while ((v18 & v30) == 0);
    uint64_t v7 = v34 - 1;
    if (__OFSUB__(v34, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v34 != 1) {
      continue;
    }
    break;
  }
}

unint64_t *sub_1008A8E40(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = a3;
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v35 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v9 = a3 + 56;
  while (2)
  {
    uint64_t v34 = v8;
    do
    {
      while (1)
      {
        int64_t v11 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v12 = (v10 - 1) & v10;
          unint64_t v13 = __clz(__rbit64(v10)) | (v11 << 6);
          goto LABEL_16;
        }
        int64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        int64_t v15 = (unint64_t)(a5[2] + 64) >> 6;
        if (v14 >= v15)
        {
          int64_t v14 = a5[3];
LABEL_39:
          a5[3] = v14;
          a5[4] = 0;
          swift_retain();
          return (unint64_t *)sub_100B29860(v35, a2, v34, v6);
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v14);
        if (!v17)
        {
          int64_t v18 = v11 + 2;
          if (v11 + 2 >= v15) {
            goto LABEL_39;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            if (v11 + 3 >= v15) {
              goto LABEL_40;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v11 + 3));
            if (v17)
            {
              int64_t v14 = v11 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v11 + 4;
            if (v11 + 4 >= v15)
            {
              int64_t v14 = v11 + 3;
              goto LABEL_39;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v14 = v11 + 5;
              if (v11 + 5 >= v15)
              {
LABEL_40:
                int64_t v14 = v18;
                goto LABEL_39;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v14);
              if (!v17)
              {
                int64_t v14 = v15 - 1;
                int64_t v32 = v11 + 6;
                while (v15 != v32)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v32++);
                  if (v17)
                  {
                    int64_t v14 = v32 - 1;
                    goto LABEL_15;
                  }
                }
                goto LABEL_39;
              }
              goto LABEL_15;
            }
          }
          int64_t v14 = v18;
        }
LABEL_15:
        uint64_t v12 = (v17 - 1) & v17;
        unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
        int64_t v11 = v14;
LABEL_16:
        id v19 = (unsigned __int8 *)(*(void *)(*a5 + 48) + 24 * v13);
        Swift::UInt v20 = *v19;
        uint64_t v21 = *((void *)v19 + 1);
        uint64_t v22 = *((void *)v19 + 2);
        a5[3] = v11;
        a5[4] = v12;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v20);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v23 = Hasher._finalize()();
        uint64_t v24 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v25 = v23 & ~v24;
        if ((*(void *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25)) {
          break;
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        uint64_t v6 = a3;
      }
      uint64_t v26 = ~v24;
      uint64_t v27 = *(void *)(v6 + 48);
      while (1)
      {
        uint64_t v28 = (unsigned __int8 *)(v27 + 24 * v25);
        if (*v28 == v20)
        {
          BOOL v29 = *((void *)v28 + 1) == v21 && *((void *)v28 + 2) == v22;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
        }
        unint64_t v25 = (v25 + 1) & v26;
        if (((*(void *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
          goto LABEL_3;
        }
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      uint64_t v30 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v31 = *(unint64_t *)((char *)v35 + v30);
      *(unint64_t *)((char *)v35 + v30) = v31 & ~(1 << v25);
      uint64_t v6 = a3;
    }
    while ((v31 & (1 << v25)) == 0);
    uint64_t v8 = v34 - 1;
    if (__OFSUB__(v34, 1))
    {
LABEL_43:
      __break(1u);
      return result;
    }
    if (v34 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void *sub_1008A911C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v49 = a2;
  uint64_t v9 = sub_10000588C(&qword_1016506F8);
  __chkstk_darwin(v9 - 8);
  int64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CorrelationIdentifier();
  uint64_t v13 = __chkstk_darwin(v12);
  int64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v63 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v51 = a1;
  uint64_t v52 = v21;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v61 = v21 + 16;
  uint64_t v62 = a3;
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  unint64_t v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  size_t v54 = a5;
  int v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v60 = a3 + 56;
  uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v53 = v11;
  while (2)
  {
    uint64_t v50 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v29 = a5[3];
        unint64_t v30 = a5[4];
        uint64_t v59 = v28;
        if (v30)
        {
          uint64_t v58 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v11, *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31, v12);
          uint64_t v32 = 0;
          goto LABEL_8;
        }
        int64_t v41 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v42 = (unint64_t)(v28 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * v41);
        if (v43) {
          goto LABEL_17;
        }
        if (v29 + 2 >= v42) {
          goto LABEL_34;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 2));
        if (v43)
        {
          int64_t v41 = v29 + 2;
LABEL_17:
          uint64_t v58 = (v43 - 1) & v43;
          unint64_t v31 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v29 = v41;
          goto LABEL_7;
        }
        if (v29 + 3 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          v29 += 2;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 3));
        if (v43)
        {
          int64_t v41 = v29 + 3;
          goto LABEL_17;
        }
        int64_t v41 = v29 + 4;
        if (v29 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v27 + 8 * v41);
          if (v43) {
            goto LABEL_17;
          }
          int64_t v41 = v42 - 1;
          int64_t v46 = v29 + 5;
          while (v42 != v46)
          {
            unint64_t v43 = *(void *)(v27 + 8 * v46++);
            if (v43)
            {
              int64_t v41 = v46 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          int64_t v29 = v41;
          goto LABEL_8;
        }
        uint64_t v58 = 0;
        uint64_t v32 = 1;
        v29 += 3;
LABEL_8:
        (*v57)(v11, v32, 1, v12);
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v59;
        a5[3] = v29;
        a5[4] = v58;
        if ((*v56)(v11, 1, v12) == 1)
        {
          sub_10001DAB4((uint64_t)v11, &qword_1016506F8);
          uint64_t v47 = v62;
          swift_retain();
          return (void *)sub_100B29B20(v51, v49, v50, v47);
        }
        (*v55)(v63, v11, v12);
        uint64_t v33 = v62;
        sub_1008AAC94((unint64_t *)&unk_10166C250, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
        uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
        unint64_t v25 = *v24;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      }
      uint64_t v59 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v22 + 72);
      BOOL v39 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      while (1)
      {
        v39(v15, *(void *)(v62 + 48) + v38 * v36, v12);
        sub_1008AAC94(&qword_101650700, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v40) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          int64_t v11 = v53;
          a5 = v54;
          uint64_t v22 = v52;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      uint64_t v44 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v22 = v52;
      uint64_t v45 = *(unint64_t *)((char *)v51 + v44);
      *(unint64_t *)((char *)v51 + v44) = v45 & ~(1 << v36);
      int64_t v11 = v53;
      a5 = v54;
    }
    while ((v45 & (1 << v36)) == 0);
    uint64_t v23 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v50 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

void *sub_1008A9678(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v43 = a2;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v20 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v44 = a1;
  uint64_t v45 = v20 - 1;
  uint64_t v21 = *a5;
  unint64_t v22 = a5[1];
  unint64_t v23 = *(void *)(*a5 + 16);
  uint64_t v54 = a3;
  if (v22 == v23)
  {
    uint64_t v24 = v43;
    uint64_t v25 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v12, 1, 1, v13);
LABEL_22:
    sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
    uint64_t v41 = v54;
    swift_retain();
    return (void *)sub_100B2838C(v44, v24, v25, v41);
  }
  uint64_t v42 = v5;
  uint64_t v53 = v19 + 56;
  uint64_t v52 = v19 + 48;
  uint64_t v50 = a5;
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v19 + 32);
  uint64_t v55 = a3 + 56;
  uint64_t v56 = v19 + 16;
  unint64_t v57 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v26 = v19;
  int64_t v46 = v12;
  uint64_t v49 = v19;
  uint64_t v58 = (char *)&v42 - v18;
  while (v22 < v23)
  {
    uint64_t v28 = *(void *)(v26 + 72);
    int64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
    v29(v12, v21 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)) + v28 * v22, v13);
    a5[1] = v22 + 1;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v48(v12, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v13) == 1)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      goto LABEL_22;
    }
    (*v51)(v58, v12, v13);
    uint64_t v30 = v54;
    sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = v30;
    uint64_t v33 = -1 << *(unsigned char *)(v30 + 32);
    unint64_t v34 = v31 & ~v33;
    if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
      uint64_t v27 = *v57;
LABEL_5:
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v27)(v58, v13);
      goto LABEL_6;
    }
    uint64_t v47 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v35 = v32;
    uint64_t v36 = ~v33;
    while (1)
    {
      v29(v16, *(void *)(v35 + 48) + v34 * v28, v13);
      sub_1008AAC94((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *v57;
      (*v57)(v16, v13);
      if (v37) {
        break;
      }
      unint64_t v34 = (v34 + 1) & v36;
      if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        uint64_t v12 = v46;
        goto LABEL_5;
      }
    }
    uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v27)(v58, v13);
    uint64_t v38 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v39 = *(unint64_t *)((char *)v44 + v38);
    *(unint64_t *)((char *)v44 + v38) = v39 & ~(1 << v34);
    if ((v39 & (1 << v34)) == 0)
    {
      uint64_t v12 = v46;
LABEL_6:
      uint64_t v26 = v49;
      a5 = v50;
      goto LABEL_7;
    }
    uint64_t v40 = v45 - 1;
    uint64_t v26 = v49;
    a5 = v50;
    if (__OFSUB__(v45, 1)) {
      goto LABEL_24;
    }
    uint64_t v12 = v46;
    --v45;
    if (!v40) {
      return &_swiftEmptySetSingleton;
    }
LABEL_7:
    uint64_t v21 = *a5;
    unint64_t v22 = a5[1];
    unint64_t v23 = *(void *)(*a5 + 16);
    if (v22 == v23)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      v48(v12, 1, 1, v13);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void *sub_1008A9B5C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v46 = a2;
  uint64_t v55 = a5;
  uint64_t v8 = sub_10000588C(&qword_101650550);
  __chkstk_darwin(v8 - 8);
  uint64_t v49 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconIdentifier();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v11);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v19 = *(unint64_t *)((char *)a1 + v18) & ((-1 << a4) - 1);
  uint64_t v48 = a1;
  *(unint64_t *)((char *)a1 + v18) = v19;
  uint64_t v20 = v17 - 1;
  uint64_t v51 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v52 = v21;
  uint64_t v50 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  uint64_t v22 = a3 + 56;
  while (2)
  {
    uint64_t v47 = v20;
    do
    {
      while (1)
      {
        uint64_t v24 = *v55;
        uint64_t v23 = v55[1];
        uint64_t v25 = v55[2];
        int64_t v26 = v55[3];
        unint64_t v27 = v55[4];
        uint64_t v53 = v25;
        uint64_t v54 = v23;
        if (v27)
        {
          uint64_t v28 = (v27 - 1) & v27;
          unint64_t v29 = __clz(__rbit64(v27)) | (v26 << 6);
LABEL_6:
          uint64_t v30 = v49;
          sub_10089C594(*(void *)(v24 + 48) + *(void *)(v52 + 72) * v29, v49, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
          uint64_t v31 = 0;
          goto LABEL_7;
        }
        int64_t v41 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        int64_t v42 = (unint64_t)(v25 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v28 = 0;
          uint64_t v31 = 1;
          uint64_t v30 = v49;
          goto LABEL_7;
        }
        unint64_t v43 = *(void *)(v23 + 8 * v41);
        if (v43) {
          goto LABEL_18;
        }
        if (v26 + 2 >= v42) {
          goto LABEL_33;
        }
        unint64_t v43 = *(void *)(v23 + 8 * (v26 + 2));
        if (v43)
        {
          int64_t v41 = v26 + 2;
LABEL_18:
          uint64_t v28 = (v43 - 1) & v43;
          unint64_t v29 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v26 = v41;
          goto LABEL_6;
        }
        if (v26 + 3 >= v42)
        {
          uint64_t v28 = 0;
          uint64_t v31 = 1;
          v26 += 2;
          uint64_t v30 = v49;
          goto LABEL_7;
        }
        unint64_t v43 = *(void *)(v23 + 8 * (v26 + 3));
        if (v43)
        {
          int64_t v41 = v26 + 3;
          goto LABEL_18;
        }
        int64_t v41 = v26 + 4;
        if (v26 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v23 + 8 * v41);
          if (v43) {
            goto LABEL_18;
          }
          int64_t v41 = v42 - 1;
          int64_t v44 = v26 + 5;
          while (v42 != v44)
          {
            unint64_t v43 = *(void *)(v23 + 8 * v44++);
            if (v43)
            {
              int64_t v41 = v44 - 1;
              goto LABEL_18;
            }
          }
LABEL_33:
          uint64_t v28 = 0;
          uint64_t v31 = 1;
          int64_t v26 = v41;
          uint64_t v30 = v49;
          goto LABEL_7;
        }
        uint64_t v28 = 0;
        uint64_t v31 = 1;
        v26 += 3;
        uint64_t v30 = v49;
LABEL_7:
        (*v51)(v30, v31, 1, v10);
        uint64_t v32 = v55;
        uint64_t v33 = v54;
        *uint64_t v55 = v24;
        v32[1] = v33;
        uint64_t v32[2] = v53;
        v32[3] = v26;
        v32[4] = v28;
        if ((*v50)(v30, 1, v10) == 1)
        {
          sub_10001DAB4(v30, &qword_101650550);
          swift_retain();
          return (void *)sub_100B2A3C8(v48, v46, v47, a3);
        }
        sub_1008AB368(v30, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1008AAC94(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v34 = Hasher._finalize()();
        uint64_t v35 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v22 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
LABEL_3:
        uint64_t result = (void *)sub_1008AA93C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      }
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v52 + 72);
      while (1)
      {
        sub_10089C594(*(void *)(a3 + 48) + v38 * v36, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_1008AA93C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v22 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_3;
        }
      }
      sub_1008AA93C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t result = (void *)sub_1008AA93C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v39 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v40 = *(unint64_t *)((char *)v48 + v39);
      *(unint64_t *)((char *)v48 + v39) = v40 & ~(1 << v36);
    }
    while ((v40 & (1 << v36)) == 0);
    uint64_t v20 = v47 - 1;
    if (__OFSUB__(v47, 1))
    {
LABEL_41:
      __break(1u);
      return result;
    }
    if (v47 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

Swift::Int sub_1008AA0B8(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t (*a6)(Swift::Int, uint64_t, uint64_t, uint64_t))
{
  Swift::Int v7 = result;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v11 = *a5;
  unint64_t v10 = a5[1];
  unint64_t v12 = *(void *)(*a5 + 16);
  if (v10 == v12)
  {
LABEL_2:
    swift_retain();
    return a6(v7, a2, v9, a3);
  }
  else
  {
    uint64_t v14 = a3 + 56;
    while ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 >= v12) {
        goto LABEL_20;
      }
      Swift::UInt v15 = *(unsigned __int8 *)(v11 + v10 + 32);
      a5[1] = v10 + 1;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v15);
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = 1 << v17;
      if (((1 << v17) & *(void *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v20 = *(void *)(a3 + 48);
        if (*(unsigned __int8 *)(v20 + v17) == v15)
        {
LABEL_15:
          uint64_t v23 = 8 * v18;
          uint64_t v24 = *(void *)(v7 + 8 * v18);
          *(void *)(v7 + v23) = v24 & ~v19;
          if ((v19 & v24) != 0)
          {
            if (__OFSUB__(v9--, 1)) {
              goto LABEL_21;
            }
            if (!v9) {
              return (Swift::Int)&_swiftEmptySetSingleton;
            }
          }
        }
        else
        {
          for (unint64_t i = v17 + 1; ; unint64_t i = v22 + 1)
          {
            unint64_t v22 = i & ~v16;
            if (((*(void *)(v14 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
              break;
            }
            if (*(unsigned __int8 *)(v20 + v22) == v15)
            {
              unint64_t v18 = v22 >> 6;
              uint64_t v19 = 1 << v22;
              goto LABEL_15;
            }
          }
        }
      }
      uint64_t v11 = *a5;
      unint64_t v10 = a5[1];
      unint64_t v12 = *(void *)(*a5 + 16);
      if (v10 == v12) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t sub_1008AA270(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      sub_1008AA478((int)a1, a1 >> 32);
      uint64_t result = sub_10001CFB8(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      sub_1008AA478(v5, v6);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = Data._Representation.replaceSubrange(_:with:count:)();
      break;
  }
  return result;
}

uint64_t sub_1008AA478(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1008AA520(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1008AA58CLL);
  }
  return result;
}

uint64_t sub_1008AA59C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1008AA668);
  }
  return result;
}

uint64_t sub_1008AA688(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1008AA74C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1008AA7C8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1008AA84C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *unint64_t v12 = v3;
  v12[1] = sub_10001D2E4;
  return sub_10088B2E0(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1008AA93C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1008AA99C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for BeaconIdentifier() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v3 | v7 | 7;
  unint64_t v10 = ((*(void *)(*(void *)v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = type metadata accessor for UUID();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v0 + v8, v11);
  v12(v0 + v8 + v6[7], v11);

  return _swift_deallocObject(v0, v10, v9);
}

uint64_t sub_1008AAB2C()
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for BeaconIdentifier() - 8);
  uint64_t v6 = v0 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_10088AB9C(v0 + v3, v6);
}

uint64_t sub_1008AAC94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008AACDC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v15 = (v3 + 32) & ~v3;
  unint64_t v14 = (*(void *)(v2 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = sub_10000588C(&qword_1016575E0);
  uint64_t v4 = *(void *)(v17 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v14 + v5 + 16) & ~v5;
  unint64_t v7 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (int *)(type metadata accessor for BeaconIdentifier() - 8);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = (v7 + v9 + 8) & ~v9;
  uint64_t v16 = v10 + *(void *)(*(void *)v8 + 64);
  uint64_t v11 = v3 | v9 | v5 | 7;
  swift_unknownObjectRelease();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v15, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v17);
  swift_release();
  v12(v0 + v10, v1);
  v12(v0 + v10 + v8[7], v1);

  return _swift_deallocObject(v0, v16, v11);
}

uint64_t sub_1008AAF10(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for BeaconIdentifier();
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v6);
  uint64_t v14 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)(v1 + v9);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_100033F68;
  return sub_10088F3B0(a1, v10, v11, v1 + v5, v13, v14, v1 + v8, v15);
}

uint64_t sub_1008AB10C()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008AB1A0()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  v4[2] = v3;
  return _swift_task_switch(sub_10088F8E0, 0, 0);
}

uint64_t sub_1008AB284()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008AB2BC()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  uint64_t v4 = (uint64_t (*)(int *))((char *)&dword_1016505A0 + dword_1016505A0);
  return v4(v2);
}

uint64_t sub_1008AB368(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008AB3D0(uint64_t a1)
{
  uint64_t v9 = sub_10000588C(&qword_10163C618);
  uint64_t v10 = sub_100062734(&qword_10163C620, &qword_10163C618);
  v8[0] = a1;
  uint64_t v2 = sub_10001CD44(v8, v9);
  uint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_10089C5FC(v3, v4, &v7);
  uint64_t v5 = v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
  return v5;
}

void sub_1008AB490(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&unk_1016569A0);
  unint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  unint64_t v7 = v4 + 16;
  v8(v6, a1, v3);
  id v9 = sub_10089A3A8((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (v1) {
    return;
  }
  uint64_t v10 = v9;
  id v92 = 0;
  if (([v9 seekToOffset:0 error:&v92] & 1) == 0)
  {
    id v17 = v92;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_17:

    return;
  }
  id v11 = v92;
  id v12 = [v10 readDataOfLength:3];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  switch(v15 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(v13) - v13;
      if (__OFSUB__(HIDWORD(v13), v13))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        swift_release();
        uint64_t v69 = v85;
        swift_release();
        unint64_t v71 = v84;
        goto LABEL_104;
      }
      uint64_t v16 = (int)v16;
LABEL_9:
      if (v16 != 3
        || Data.subscript.getter() != 75
        || Data.subscript.getter() != 73
        || Data.subscript.getter() != 77)
      {
LABEL_15:
        sub_10000588C(&qword_1016505B8);
        sub_100062734(&qword_1016505C0, &qword_1016505B8);
        swift_allocError();
        *(_DWORD *)uint64_t v25 = 0;
        *(unsigned char *)(v25 + 4) = 2;
        swift_willThrow();
LABEL_16:
        sub_10001CFB8(v13, v15);
        goto LABEL_17;
      }
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v16 = v18 - v19;
      if (!v20) {
        goto LABEL_9;
      }
      goto LABEL_100;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v16 = BYTE6(v15);
      goto LABEL_9;
  }
  id v21 = [v10 readDataOfLength:1];
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v23;

  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(v22) - v22;
      if (__OFSUB__(HIDWORD(v22), v22))
      {
        __break(1u);
LABEL_106:
        __break(1u);
      }
      uint64_t v24 = (int)v24;
LABEL_22:
      if (v24 != 1 || Data.subscript.getter() != 1)
      {
LABEL_27:
        int v31 = Data.subscript.getter();
        sub_10000588C(&qword_1016505B8);
        sub_100062734(&qword_1016505C0, &qword_1016505B8);
        swift_allocError();
        *(_DWORD *)uint64_t v32 = v31;
        *(unsigned char *)(v32 + 4) = 0;
        swift_willThrow();
LABEL_28:
        uint64_t v33 = v22;
LABEL_29:
        sub_10001CFB8(v33, v7);
        goto LABEL_16;
      }
      break;
    case 2uLL:
      uint64_t v27 = *(void *)(v22 + 16);
      uint64_t v26 = *(void *)(v22 + 24);
      BOOL v20 = __OFSUB__(v26, v27);
      uint64_t v24 = v26 - v27;
      if (!v20) {
        goto LABEL_22;
      }
      goto LABEL_106;
    case 3uLL:
      goto LABEL_27;
    default:
      uint64_t v24 = BYTE6(v7);
      goto LABEL_22;
  }
  id v28 = [v10 readDataOfLength:4];
  uint64_t v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  switch(v30 >> 62)
  {
    case 1uLL:
      unint64_t v90 = v30;
      uint64_t v34 = v91;
      uint64_t v35 = (int)v91;
      uint64_t v89 = (v34 >> 32) - (int)v34;
      if (v34 >> 32 >= (int)v34)
      {
        sub_1000361E0(v91, v90);
        uint64_t v36 = __DataStorage._bytes.getter();
        if (!v36)
        {
          __DataStorage._length.getter();
LABEL_49:
          unint64_t v30 = v90;
          sub_10001CFB8(v91, v90);
          goto LABEL_50;
        }
        unint64_t v88 = v36;
        uint64_t v37 = __DataStorage._offset.getter();
        BOOL v20 = __OFSUB__(v35, v37);
        uint64_t v38 = v35 - v37;
        if (!v20)
        {
          uint64_t v39 = __DataStorage._length.getter();
          uint64_t v40 = v89;
          if (v39 < v89) {
            uint64_t v40 = v39;
          }
          if ((unint64_t)(v40 + 3) >= 7)
          {
            uint64_t v86 = *(unsigned int *)(v88 + v38);
            uint64_t v87 = v22;
            unint64_t v30 = v90;
            sub_10001CFB8(v91, v90);
            goto LABEL_52;
          }
          goto LABEL_49;
        }
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      __break(1u);
      goto LABEL_108;
    case 2uLL:
      uint64_t v89 = *(void *)(v91 + 16);
      unint64_t v90 = v30;
      unint64_t v88 = *(void *)(v91 + 24);
      swift_retain();
      swift_retain();
      uint64_t v41 = __DataStorage._bytes.getter();
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = __DataStorage._offset.getter();
        uint64_t v44 = v89;
        if (__OFSUB__(v89, v43))
        {
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
        uint64_t v86 = v42 + v89 - v43;
      }
      else
      {
        uint64_t v86 = 0;
        uint64_t v44 = v89;
      }
      uint64_t v45 = v88 - v44;
      if (__OFSUB__(v88, v44))
      {
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      uint64_t v46 = __DataStorage._length.getter();
      if (!v86 || (v46 >= v45 ? (uint64_t v47 = v45) : (uint64_t v47 = v46), (unint64_t)(v47 + 3) < 7))
      {
        swift_release();
        swift_release();
        unint64_t v30 = v90;
LABEL_50:
        sub_10000588C(&qword_1016505B8);
        sub_100062734(&qword_1016505C0, &qword_1016505B8);
        swift_allocError();
        *(_DWORD *)uint64_t v48 = 0;
        *(unsigned char *)(v48 + 4) = 1;
        swift_willThrow();
LABEL_76:
        sub_10001CFB8(v91, v30);
        goto LABEL_28;
      }
      uint64_t v86 = *(unsigned int *)v86;
      uint64_t v87 = v22;
      swift_release();
      swift_release();
      unint64_t v30 = v90;
LABEL_52:
      id v49 = [v10 readDataOfLength:4];
      uint64_t v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      unint64_t v88 = v51;
      unint64_t v52 = v51 >> 62;
      uint64_t v22 = v87;
      switch(v52)
      {
        case 1uLL:
          unint64_t v90 = v30;
          uint64_t v53 = v89;
          uint64_t v54 = (int)v89;
          uint64_t v85 = (v53 >> 32) - (int)v53;
          if (v53 >> 32 < (int)v53) {
            goto LABEL_111;
          }
          sub_1000361E0(v89, v88);
          unint64_t v84 = __DataStorage._bytes.getter();
          if (!v84)
          {
            __DataStorage._length.getter();
LABEL_74:
            sub_10001CFB8(v89, v88);
            unint64_t v30 = v90;
LABEL_75:
            sub_10000588C(&qword_1016505B8);
            sub_100062734(&qword_1016505C0, &qword_1016505B8);
            swift_allocError();
            *(_DWORD *)uint64_t v67 = 1;
            *(unsigned char *)(v67 + 4) = 2;
            swift_willThrow();
            sub_10001CFB8(v89, v88);
            goto LABEL_76;
          }
          uint64_t v55 = __DataStorage._offset.getter();
          BOOL v20 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v20) {
            goto LABEL_113;
          }
          uint64_t v57 = __DataStorage._length.getter();
          uint64_t v58 = v85;
          if (v57 < v85) {
            uint64_t v58 = v57;
          }
          if ((unint64_t)(v58 + 3) < 7) {
            goto LABEL_74;
          }
          uint64_t v87 = v22;
          int v83 = *(_DWORD *)(v84 + v56);
          sub_10001CFB8(v89, v88);
LABEL_78:
          id v68 = [v10 readDataOfLength:4];
          uint64_t v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v71 = v70;

          switch(v71 >> 62)
          {
            case 1uLL:
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              uint64_t v82 = (v69 >> 32) - (int)v69;
              if (v69 >> 32 < (int)v69) {
                goto LABEL_115;
              }
              sub_1000361E0(v85, v84);
              if (!__DataStorage._bytes.getter())
              {
                __DataStorage._length.getter();
LABEL_103:
                unint64_t v71 = v84;
                uint64_t v69 = v85;
                sub_10001CFB8(v85, v84);
LABEL_104:
                sub_10000588C(&qword_1016505B8);
                sub_100062734(&qword_1016505C0, &qword_1016505B8);
                swift_allocError();
                *(_DWORD *)uint64_t v81 = 1;
                *(unsigned char *)(v81 + 4) = 2;
                swift_willThrow();
                sub_10001CFB8(v69, v71);
                sub_10001CFB8(v89, v88);
                sub_10001CFB8(v91, v90);
                uint64_t v33 = v87;
                goto LABEL_29;
              }
              if (__OFSUB__((int)v69, __DataStorage._offset.getter())) {
                goto LABEL_117;
              }
              uint64_t v72 = __DataStorage._length.getter();
              uint64_t v73 = v82;
              if (v72 < v82) {
                uint64_t v73 = v72;
              }
              if ((unint64_t)(v73 + 3) < 7) {
                goto LABEL_103;
              }
              sub_10001CFB8(v85, v84);
LABEL_98:
              uint64_t v80 = v87;
              Data.subscript.getter();
              sub_10001CFB8(v13, v15);
              sub_10001CFB8(v80, v7);
              sub_10001CFB8(v91, v90);

              sub_10001CFB8(v89, v88);
              sub_10001CFB8(v85, v84);
              return;
            case 2uLL:
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              uint64_t v74 = *(void *)(v69 + 16);
              uint64_t v82 = *(void *)(v69 + 24);
              swift_retain();
              swift_retain();
              uint64_t v75 = __DataStorage._bytes.getter();
              if (!v75) {
                goto LABEL_91;
              }
              uint64_t v76 = __DataStorage._offset.getter();
              if (__OFSUB__(v74, v76)) {
                goto LABEL_118;
              }
              v75 += v74 - v76;
LABEL_91:
              BOOL v20 = __OFSUB__(v82, v74);
              uint64_t v77 = v82 - v74;
              if (v20) {
                goto LABEL_116;
              }
              uint64_t v78 = __DataStorage._length.getter();
              if (v78 >= v77) {
                uint64_t v79 = v77;
              }
              else {
                uint64_t v79 = v78;
              }
              if (!v75 || (unint64_t)(v79 + 3) < 7) {
                goto LABEL_101;
              }
              swift_release();
              swift_release();
              goto LABEL_98;
            case 3uLL:
              goto LABEL_104;
            default:
              if ((v71 & 0xFC000000000000) == 0) {
                goto LABEL_104;
              }
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              goto LABEL_98;
          }
        case 2uLL:
          unint64_t v90 = v30;
          uint64_t v59 = *(void *)(v89 + 16);
          unint64_t v84 = *(void *)(v89 + 24);
          uint64_t v85 = v59;
          swift_retain();
          swift_retain();
          uint64_t v60 = __DataStorage._bytes.getter();
          uint64_t v87 = v22;
          if (v60)
          {
            uint64_t v61 = v60;
            uint64_t v62 = __DataStorage._offset.getter();
            if (__OFSUB__(v85, v62)) {
              goto LABEL_114;
            }
            uint64_t v63 = (int *)(v61 + v85 - v62);
          }
          else
          {
            uint64_t v63 = 0;
          }
          uint64_t v64 = v84 - v85;
          if (!__OFSUB__(v84, v85))
          {
            uint64_t v65 = __DataStorage._length.getter();
            if (v63)
            {
              uint64_t v66 = v65 >= v64 ? v64 : v65;
              if ((unint64_t)(v66 + 3) >= 7)
              {
                int v83 = *v63;
                swift_release();
                swift_release();
                goto LABEL_78;
              }
            }
            swift_release();
            swift_release();
            unint64_t v30 = v90;
            uint64_t v22 = v87;
            goto LABEL_75;
          }
          break;
        case 3uLL:
          goto LABEL_75;
        default:
          if ((v88 & 0xFC000000000000) == 0) {
            goto LABEL_75;
          }
          unint64_t v90 = v30;
          int v83 = v89;
          goto LABEL_78;
      }
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      JUMPOUT(0x1008ABF70);
    case 3uLL:
      goto LABEL_50;
    default:
      if ((v30 & 0xFC000000000000) == 0) {
        goto LABEL_50;
      }
      uint64_t v86 = v91;
      uint64_t v87 = v22;
      goto LABEL_52;
  }
}

uint64_t sub_1008ABFC0()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  v6(v0 + v3 + *(int *)(v7 + 20), v5);
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_10001CFB8(*v10, v11);
    sub_10001CFB8(v10[2], v10[3]);
    unint64_t v12 = v10[5];
    if (v12 >> 60 != 15) {
      sub_10001CFB8(v10[4], v12);
    }
  }

  return _swift_deallocObject(v0, ((((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v2 | 7);
}

uint64_t sub_1008AC18C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v4;
  uint64_t v11 = *(void *)((char *)v1 + v5);
  uint64_t v12 = *(void *)((char *)v1 + v6);
  uint64_t v13 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *unint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_10088B7D8(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1008AC30C()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  v6(v0 + v3 + *(int *)(v7 + 20), v5);
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_10001CFB8(*v10, v11);
    sub_10001CFB8(v10[2], v10[3]);
    unint64_t v12 = v10[5];
    if (v12 >> 60 != 15) {
      sub_10001CFB8(v10[4], v12);
    }
  }

  return _swift_deallocObject(v0, ((((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v2 | 7);
}

uint64_t sub_1008AC4D0()
{
  uint64_t v2 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void *)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *(void *)(v0 + v6);
  uint64_t v12 = *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v13;
  *uint64_t v13 = v1;
  v13[1] = sub_100033F68;
  return sub_10088BD60(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1008AC62C(uint64_t a1)
{
  return sub_10088EFF0(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1008AC63C(uint64_t a1)
{
  v1[13] = a1;
  sub_10000588C(&qword_101650678);
  v1[14] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DirectorySequence();
  v1[34] = v3;
  v1[35] = *(void *)(v3 - 8);
  v1[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[37] = v4;
  v1[38] = *(void *)(v4 - 8);
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  return _swift_task_switch(sub_1008AC93C, 0, 0);
}

uint64_t sub_1008AC93C()
{
  v172 = v0;
  id v166 = [self defaultManager];
  if (qword_101636DA8 != -1) {
    goto LABEL_85;
  }
  while (1)
  {
    uint64_t v1 = v0[13];
    uint64_t v2 = v0[44];
    uint64_t v3 = v0[37];
    uint64_t v4 = v0[38];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_101650178);
    v164 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v164(v2, v1, v3);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[44];
    uint64_t v10 = v0[37];
    uint64_t v11 = v0[38];
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      v171[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      v0[12] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      sub_1008AAC94((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_1008FA0F0(v13, v14, (uint64_t *)v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v167 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v167(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Verify file integrity for directory: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v167 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v167(v0[44], v0[37]);
    }

    uint64_t v15 = v0[37];
    uint64_t v16 = v0[38];
    uint64_t v17 = v0[33];
    NSFileManager.flatSequence(at:includingPropertiesForKeys:)();
    DirectorySequence.next()();
    v165 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v165(v17, 1, v15) == 1)
    {
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    else
    {
      v161 = *(void (**)(void, void, void))(v0[38] + 32);
      uint64_t v145 = v0[15];
      uint64_t v147 = v0[16];
      uint64_t v18 = _swiftEmptyArrayStorage;
      do
      {
        unint64_t v159 = (unint64_t)v18;
        while (1)
        {
          v161(v0[43], v0[33], v0[37]);
          if (URL.pathExtension.getter() == 0x70616D79656BLL && v21 == 0xE600000000000000) {
            break;
          }
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v23) {
            goto LABEL_18;
          }
          v164(v0[42], v0[43], v0[37]);
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.error.getter();
          BOOL v26 = os_log_type_enabled(v24, v25);
          uint64_t v27 = v0[42];
          uint64_t v28 = v0[37];
          if (v26)
          {
            uint64_t v29 = swift_slowAlloc();
            v171[0] = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v29 = 136315138;
            uint64_t v30 = URL.path.getter();
            *(void *)(v29 + 4) = sub_1008FA0F0(v30, v31, (uint64_t *)v171);
            swift_bridgeObjectRelease();
            v167(v27, v28);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Removing unexpected file: %s", (uint8_t *)v29, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v167(v0[42], v0[37]);
          }

          URL._bridgeToObjectiveC()(v34);
          uint64_t v36 = v35;
          v0[5] = 0;
          unsigned int v37 = [v166 removeItemAtURL:v35 error:v0 + 5];

          uint64_t v38 = (void *)v0[5];
          if (v37)
          {
            id v39 = v38;
          }
          else
          {
            id v40 = v38;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRelease();
          }
          v167(v0[43], v0[37]);
          uint64_t v19 = v0[37];
          uint64_t v20 = v0[33];
          DirectorySequence.next()();
          if (v165(v20, 1, v19) == 1)
          {
            uint64_t v18 = (void *)v159;
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease();
LABEL_18:
        uint64_t v32 = v0[43];
        sub_1008AB490(v32);
        char v42 = v41;
        LODWORD(v32) = v43;
        uint64_t v44 = v0[43];
        uint64_t v45 = v0[37];
        unint64_t v46 = HIDWORD(v41);
        uint64_t v47 = v0[29];
        unint64_t v143 = HIDWORD(v43);
        uint64_t v144 = v0[28];
        v164(v47, v44, v45);
        uint64_t v48 = v47 + *(int *)(v145 + 20);
        *(unsigned char *)uint64_t v48 = v42;
        *(_DWORD *)(v48 + 4) = v46;
        *(_DWORD *)(v48 + 8) = v32;
        *(_DWORD *)(v48 + 12) = v143;
        sub_10089C594(v47, v144, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v18 = (void *)v159;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v18 = (void *)sub_100A71A44(0, *(void *)(v159 + 16) + 1, 1, v159);
        }
        unint64_t v51 = v18[2];
        unint64_t v50 = v18[3];
        if (v51 >= v50 >> 1) {
          uint64_t v18 = (void *)sub_100A71A44(v50 > 1, v51 + 1, 1, (unint64_t)v18);
        }
        uint64_t v52 = v0[43];
        uint64_t v53 = v0[37];
        uint64_t v54 = v0[33];
        uint64_t v55 = v0[28];
        uint64_t v56 = v0[29];
        v18[2] = v51 + 1;
        sub_1008AB368(v55, (uint64_t)v18+ ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80))+ *(void *)(v147 + 72) * v51, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1008AA93C(v56, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v167(v52, v53);
        DirectorySequence.next()();
      }
      while (v165(v54, 1, v53) != 1);
    }
LABEL_31:
    (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
    int64_t v57 = v18[2];
    uint64_t v58 = _swiftEmptyArrayStorage;
    v160 = v18;
    if (!v57) {
      break;
    }
    uint64_t v60 = v0[15];
    uint64_t v59 = v0[16];
    v171[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B82E4(0, v57, 0);
    uint64_t v61 = (uint64_t)v18 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
    uint64_t v62 = *(void *)(v59 + 72);
    while (1)
    {
      uint64_t v63 = v0[27];
      sub_10089C594(v61, v63, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      int32x2_t v168 = *(int32x2_t *)(v63 + *(int *)(v60 + 20) + 8);
      if (vcgt_u32((uint32x2_t)v168, (uint32x2_t)vdup_lane_s32(v168, 1)).u8[0]) {
        break;
      }
      sub_1008AA93C(v0[27], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v58 = v171[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B82E4(0, v58[2] + 1, 1);
        uint64_t v58 = v171[0];
      }
      unint64_t v65 = v58[2];
      unint64_t v64 = v58[3];
      if (v65 >= v64 >> 1)
      {
        sub_1000B82E4(v64 > 1, v65 + 1, 1);
        uint64_t v58 = v171[0];
      }
      v58[2] = v65 + 1;
      v58[v65 + 4] = v168;
      v61 += v62;
      if (!--v57)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_once();
  }
LABEL_40:
  v171[0] = v58;
  swift_bridgeObjectRetain();
  sub_10088645C((uint64_t *)v171);
  swift_bridgeObjectRelease();
  if (v171[0][2])
  {
    uint64_t v66 = v0[25];
    uint64_t v67 = v0[26];
    int v169 = *((_DWORD *)v171[0] + 8);
    int v154 = *((_DWORD *)v171[0] + 9);
    swift_release();
    v171[0] = _swiftEmptyArrayStorage;
    uint64_t v68 = v160[2];
    swift_bridgeObjectRetain();
    uint64_t v162 = v68;
    if (v68)
    {
      unint64_t v69 = 0;
      uint64_t v157 = v67 + 8;
      uint64_t v153 = v66 + 12;
      uint64_t v70 = v0[15];
      uint64_t v71 = v0[16];
      v155 = _swiftEmptyArrayStorage;
      uint64_t v72 = v160;
      while (1)
      {
        if (v69 >= v72[2]) {
          goto LABEL_84;
        }
        uint64_t v73 = v0[25];
        uint64_t v74 = v0[26];
        unint64_t v75 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        uint64_t v76 = *(void *)(v71 + 72);
        sub_10089C594((uint64_t)v72 + v75 + v76 * v69, v74, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        int v77 = *(_DWORD *)(v157 + *(int *)(v70 + 20));
        sub_10089C594(v74, v73, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v78 = v0[25];
        if (v77 == v169)
        {
          int v79 = *(_DWORD *)(v153 + *(int *)(v70 + 20));
          sub_1008AA93C(v78, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v79 == v154)
          {
            sub_1008AB368(v0[26], v0[24], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            uint64_t v80 = v155;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B82A8(0, v155[2] + 1, 1);
              uint64_t v80 = v171[0];
            }
            unint64_t v82 = v80[2];
            unint64_t v81 = v80[3];
            if (v82 >= v81 >> 1)
            {
              sub_1000B82A8(v81 > 1, v82 + 1, 1);
              uint64_t v80 = v171[0];
            }
            uint64_t v83 = v0[24];
            v80[2] = v82 + 1;
            v155 = v80;
            sub_1008AB368(v83, (uint64_t)v80 + v75 + v82 * v76, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            goto LABEL_45;
          }
        }
        else
        {
          sub_1008AA93C(v78, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        }
        sub_1008AA93C(v0[26], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
LABEL_45:
        uint64_t v72 = v160;
        if (v162 == ++v69) {
          goto LABEL_56;
        }
      }
    }
    v155 = _swiftEmptyArrayStorage;
LABEL_56:
    swift_bridgeObjectRelease();
    v171[0] = v155;
    swift_retain();
    sub_1008863B4(v171);
    swift_release();
    if (v171[0][2])
    {
      uint64_t v87 = *(unsigned __int8 *)(v0[16] + 80);
      sub_10089C594((uint64_t)v171[0] + ((v87 + 32) & ~v87), v0[14], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v88 = 0;
    }
    else
    {
      uint64_t v88 = 1;
    }
    uint64_t v89 = v0[15];
    uint64_t v90 = v0[16];
    uint64_t v91 = v0[14];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v91, v88, 1, v89);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v91, 1, v89) == 1)
    {
      sub_10001DAB4(v0[14], &qword_101650678);
      uint64_t v92 = 1;
    }
    else
    {
      uint64_t v93 = v0[14];
      v164(v0[31], v93, v0[37]);
      sub_1008AA93C(v93, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v92 = 0;
    }
    uint64_t v94 = v0[31];
    uint64_t v95 = v0[32];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[38] + 56))(v94, v92, 1, v0[37]);
    sub_10001D608(v94, v95, &qword_101649E40);
  }
  else
  {
    uint64_t v84 = v0[37];
    uint64_t v85 = v0[38];
    uint64_t v86 = v0[32];
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v86, 1, 1, v84);
  }
  uint64_t v96 = v160[2];
  if (v96)
  {
    uint64_t v97 = v0[16];
    uint64_t v158 = v0[15];
    uint64_t v98 = (uint64_t)v160 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v148 = v0[21] + 8;
    uint64_t v146 = v0[20] + 12;
    uint64_t v150 = v0[17] + 12;
    uint64_t v151 = v0[18] + 8;
    v156 = (void (**)(void, void, void))(v0[38] + 32);
    uint64_t v170 = *(void *)(v97 + 72);
    while (1)
    {
      uint64_t v101 = v0[37];
      uint64_t v102 = v0[32];
      uint64_t v103 = v0[30];
      sub_10089C594(v98, v0[23], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_10001D074(v102, v103, &qword_101649E40);
      if (v165(v103, 1, v101) == 1) {
        break;
      }
      (*v156)(v0[41], v0[30], v0[37]);
      if ((static URL.== infix(_:_:)() & 1) == 0)
      {
        v167(v0[41], v0[37]);
        goto LABEL_74;
      }
      uint64_t v104 = v0[23];
      uint64_t v106 = v0[20];
      uint64_t v105 = v0[21];
      sub_10089C594(v104, v0[22], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_10089C594(v104, v105, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_10089C594(v104, v106, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.default.getter();
      BOOL v109 = os_log_type_enabled(v107, v108);
      uint64_t v163 = v0[41];
      uint64_t v152 = v0[37];
      uint64_t v110 = v0[22];
      uint64_t v111 = v0[23];
      uint64_t v112 = v0[20];
      uint64_t v113 = v0[21];
      if (v109)
      {
        uint64_t v149 = v0[23];
        uint64_t v114 = swift_slowAlloc();
        v171[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v114 = 136315650;
        uint64_t v115 = URL.path.getter();
        *(void *)(v114 + 4) = sub_1008FA0F0(v115, v116, (uint64_t *)v171);
        swift_bridgeObjectRelease();
        sub_1008AA93C(v110, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        *(_WORD *)(v114 + 12) = 1024;
        int v117 = *(_DWORD *)(v148 + *(int *)(v158 + 20));
        sub_1008AA93C(v113, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        *(_DWORD *)(v114 + 14) = v117;
        *(_WORD *)(v114 + 18) = 1024;
        int v118 = *(_DWORD *)(v146 + *(int *)(v158 + 20));
        sub_1008AA93C(v112, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        *(_DWORD *)(v114 + 20) = v118;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "KEEP: %s [%u...%u]", (uint8_t *)v114, 0x18u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v167(v163, v152);
        uint64_t v100 = v149;
      }
      else
      {
        sub_1008AA93C(v0[20], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1008AA93C(v113, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);

        sub_1008AA93C(v110, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v167(v163, v152);
        uint64_t v100 = v111;
      }
LABEL_67:
      sub_1008AA93C(v100, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v98 += v170;
      if (!--v96) {
        goto LABEL_80;
      }
    }
    sub_10001DAB4(v0[30], &qword_101649E40);
LABEL_74:
    uint64_t v119 = v0[23];
    uint64_t v120 = v0[18];
    uint64_t v121 = v0[17];
    sub_10089C594(v119, v0[19], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    sub_10089C594(v119, v120, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    sub_10089C594(v119, v121, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    int v122 = Logger.logObject.getter();
    os_log_type_t v123 = static os_log_type_t.default.getter();
    BOOL v124 = os_log_type_enabled(v122, v123);
    uint64_t v126 = v0[18];
    uint64_t v125 = v0[19];
    uint64_t v127 = v0[17];
    if (v124)
    {
      uint64_t v128 = swift_slowAlloc();
      v171[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = 136315650;
      uint64_t v129 = URL.path.getter();
      *(void *)(v128 + 4) = sub_1008FA0F0(v129, v130, (uint64_t *)v171);
      swift_bridgeObjectRelease();
      sub_1008AA93C(v125, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      *(_WORD *)(v128 + 12) = 1024;
      int v131 = *(_DWORD *)(v151 + *(int *)(v158 + 20));
      sub_1008AA93C(v126, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      *(_DWORD *)(v128 + 14) = v131;
      *(_WORD *)(v128 + 18) = 1024;
      int v132 = *(_DWORD *)(v150 + *(int *)(v158 + 20));
      sub_1008AA93C(v127, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      *(_DWORD *)(v128 + 20) = v132;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "TOSS: %s [%u...%u]", (uint8_t *)v128, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008AA93C(v0[17], type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_1008AA93C(v126, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_1008AA93C(v125, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
    }

    URL._bridgeToObjectiveC()(v133);
    uint64_t v135 = v134;
    v0[7] = 0;
    unsigned int v136 = [v166 removeItemAtURL:v134 error:v0 + 7];

    uint64_t v137 = (void *)v0[7];
    uint64_t v138 = v0[23];
    if (v136)
    {
      id v99 = v137;
    }
    else
    {
      id v139 = v137;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    uint64_t v100 = v138;
    goto LABEL_67;
  }
LABEL_80:
  swift_bridgeObjectRelease();
  uint64_t v140 = v0[32];

  sub_10001DAB4(v140, &qword_101649E40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::Int v141 = (uint64_t (*)(void))v0[1];
  return v141();
}

uint64_t sub_1008AE3F4(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v5, &qword_101649E40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_101649E40);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    sub_1008AB490((uint64_t)v9);
    if (v1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      unsigned int v13 = v12;
      unint64_t v14 = HIDWORD(v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if (v14 < v13) {
        __break(1u);
      }
      else {
        return v13;
      }
    }
  }
  return result;
}

uint64_t sub_1008AE5F8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v12 = 0;
  unint64_t v13 = a3;
  while (1)
  {
    BOOL v15 = v13 > a2;
    if (v13 >= a1) {
      break;
    }
    if (v13 > a2 || a4 == v13) {
      goto LABEL_13;
    }
    char v12 = 1;
LABEL_2:
    BOOL v14 = __CFADD__(v13++, 1);
    if (v14)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  if (v13 <= a2)
  {
    if (a4 == v13)
    {
      if (v12)
      {
        BOOL v15 = 0;
        goto LABEL_13;
      }
      return 0;
    }
    goto LABEL_2;
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  BOOL v15 = 1;
LABEL_13:
  unint64_t v5 = a1 - 1;
  if (!a1) {
    goto LABEL_38;
  }
  if (v5 >= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a1 - 1;
  }
  if (v7 < a3) {
    goto LABEL_39;
  }
  uint64_t v4 = sub_100A6F35C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v8 = v4[2];
  unint64_t v13 = v4[3];
  unint64_t v6 = v8 + 1;
  if (v8 < v13 >> 1) {
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v4 = sub_100A6F35C((void *)(v13 > 1), v6, 1, v4);
LABEL_19:
  v4[2] = v6;
  uint64_t v16 = &v4[2 * v8];
  v16[4] = a3;
  v16[5] = v7;
  if (v5 > a4)
  {
    swift_bridgeObjectRelease();
    return a4 + 1;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_24:
  BOOL v14 = __CFADD__(a2, 1);
  unint64_t v17 = a2 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    if (v17 <= a3) {
      unint64_t v6 = a3;
    }
    else {
      unint64_t v6 = v17;
    }
    if (v6 <= a4)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_30;
      }
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_43:
  uint64_t v4 = sub_100A6F35C(0, v4[2] + 1, 1, v4);
LABEL_30:
  unint64_t v19 = v4[2];
  unint64_t v18 = v4[3];
  if (v19 >= v18 >> 1) {
    uint64_t v4 = sub_100A6F35C((void *)(v18 > 1), v19 + 1, 1, v4);
  }
  v4[2] = v19 + 1;
  uint64_t v20 = &v4[2 * v19];
  v20[4] = v6;
  v20[5] = a4;
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 >= a3) {
    return 0;
  }
  if (a3 - 1 >= v17)
  {
    if (v17 <= 1) {
      return 0;
    }
    return v17;
  }
  __break(1u);
  return result;
}

unint64_t sub_1008AE810(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!(a3 | a4)) {
    return a1;
  }
  unint64_t v5 = a3;
  if (a4 >= a1 && a2 >= a3)
  {
    if (qword_101636DA8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_101650178);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_9;
    }
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    _print_unlocked<A, B>(_:_:)();
    os_log_type_t type = v8;
    v10._countAndFlagsBits = 3026478;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    _print_unlocked<A, B>(_:_:)();
    sub_1008FA0F0(0, 0xE000000000000000, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    _print_unlocked<A, B>(_:_:)();
    v11._countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    sub_1008FA0F0(0, 0xE000000000000000, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v12 = "requested [%{public}s] and hole [%{public}s] cannnot overlap!";
    goto LABEL_8;
  }
  if (a1 && a1 - 1 == a4)
  {
    if (a2 >= a3) {
      return v5;
    }
    __break(1u);
  }
  if (a2 == -1)
  {
    __break(1u);
  }
  else
  {
    if (a2 + 1 == a3)
    {
      unint64_t v5 = a1;
      if (a4 >= a1) {
        return v5;
      }
      __break(1u);
    }
    if (qword_101636DA8 == -1) {
      goto LABEL_21;
    }
  }
  swift_once();
LABEL_21:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_101650178);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v15)) {
    goto LABEL_9;
  }
  uint64_t v9 = swift_slowAlloc();
  uint64_t v19 = swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 136446466;
  _print_unlocked<A, B>(_:_:)();
  os_log_type_t type = v15;
  v16._countAndFlagsBits = 3026478;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  _print_unlocked<A, B>(_:_:)();
  sub_1008FA0F0(0, 0xE000000000000000, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v9 + 12) = 2082;
  _print_unlocked<A, B>(_:_:)();
  v17._countAndFlagsBits = 3026478;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  sub_1008FA0F0(0, 0xE000000000000000, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  char v12 = "ERROR: Unadjacent hole! requested [%{public}s] and hole [%{public}s]";
LABEL_8:
  _os_log_impl((void *)&_mh_execute_header, v7, type, v12, (uint8_t *)v9, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_9:

  return a1;
}

void *sub_1008AECFC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v12 = 0;
  unint64_t v13 = a3;
  while (1)
  {
    BOOL v15 = v13 > a2;
    if (v13 < a1)
    {
      if (v13 > a2 || a4 == v13) {
        goto LABEL_13;
      }
      char v12 = 1;
      goto LABEL_2;
    }
    if (v13 > a2)
    {
      if ((v12 & 1) == 0)
      {
        uint64_t v4 = _swiftEmptyArrayStorage;
        unint64_t v22 = a2 + 1;
        if (a2 != -1) {
          goto LABEL_27;
        }
        goto LABEL_40;
      }
      BOOL v15 = 1;
LABEL_13:
      unint64_t v7 = a1 - 1;
      if (a1)
      {
        if (v7 >= a4) {
          unint64_t v6 = a4;
        }
        else {
          unint64_t v6 = a1 - 1;
        }
        if (v6 >= a3)
        {
          uint64_t v4 = sub_100A6F35C(0, 1, 1, _swiftEmptyArrayStorage);
          unint64_t v8 = v4[2];
          unint64_t v13 = v4[3];
          int64_t v5 = v8 + 1;
          if (v8 < v13 >> 1) {
            goto LABEL_19;
          }
          goto LABEL_46;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        uint64_t v4 = sub_100A6F35C((void *)(v13 > 1), v5, 1, v4);
LABEL_19:
        v4[2] = v5;
        Swift::String v16 = &v4[2 * v8];
        v16[4] = a3;
        v16[5] = v6;
        if (v7 > a4)
        {
          if (qword_101636DA8 != -1) {
            swift_once();
          }
          uint64_t v17 = type metadata accessor for Logger();
          sub_100010324(v17, (uint64_t)qword_101650178);
          unint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = (uint8_t *)swift_slowAlloc();
            unint64_t v30 = swift_slowAlloc();
            *(_DWORD *)uint64_t v20 = 136446210;
            _print_unlocked<A, B>(_:_:)();
            v21._countAndFlagsBits = 3026478;
            v21._object = (void *)0xE300000000000000;
            String.append(_:)(v21);
            _print_unlocked<A, B>(_:_:)();
            sub_1008FA0F0(0, 0xE000000000000000, (uint64_t *)&v30);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "Hole created %{public}s", v20, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
        }
        if (!v15) {
          return v4;
        }
        unint64_t v22 = a2 + 1;
        if (a2 != -1)
        {
LABEL_27:
          if (v22 <= a3) {
            unint64_t v23 = a3;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23 > a4)
          {
            __break(1u);
          }
          else if (swift_isUniquelyReferenced_nonNull_native())
          {
            goto LABEL_32;
          }
          uint64_t v4 = sub_100A6F35C(0, v4[2] + 1, 1, v4);
LABEL_32:
          unint64_t v25 = v4[2];
          unint64_t v24 = v4[3];
          if (v25 >= v24 >> 1) {
            uint64_t v4 = sub_100A6F35C((void *)(v24 > 1), v25 + 1, 1, v4);
          }
          v4[2] = v25 + 1;
          BOOL v26 = &v4[2 * v25];
          v26[4] = v23;
          v26[5] = a4;
          if (v22 >= a3) {
            return v4;
          }
          if (a3 - 1 < v22)
          {
            __break(1u);
          }
          else
          {
            if (v22 < 2) {
              return v4;
            }
            static os_log_type_t.default.getter();
            if (qword_101636DC8 == -1) {
              goto LABEL_38;
            }
          }
          swift_once();
LABEL_38:
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_101342130;
          unint64_t v30 = v22;
          _print_unlocked<A, B>(_:_:)();
          v28._countAndFlagsBits = 3026478;
          v28._object = (void *)0xE300000000000000;
          String.append(_:)(v28);
          _print_unlocked<A, B>(_:_:)();
          *(void *)(v27 + 56) = &type metadata for String;
          *(void *)(v27 + 64) = sub_10000B4CC();
          *(void *)(v27 + 32) = 0;
          *(void *)(v27 + 40) = 0xE000000000000000;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          return v4;
        }
LABEL_40:
        __break(1u);
        return _swiftEmptyArrayStorage;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (a4 == v13) {
      break;
    }
LABEL_2:
    if (__CFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
  }
  if (v12)
  {
    BOOL v15 = 0;
    goto LABEL_13;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1008AF1CC(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1008AF268(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = a1;
  uint64_t v3 = sub_10000588C(&qword_101650630);
  __chkstk_darwin(v3 - 8);
  uint64_t v82 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v86 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v78 = (uint64_t)&v75 - v9;
  __chkstk_darwin(v8);
  uint64_t v85 = (uint64_t)&v75 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v84 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v75 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v75 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v75 - v21;
  id v88 = [self defaultManager];
  URL.deletingLastPathComponent()();
  uint64_t v80 = v5;
  uint64_t v23 = *(int *)(v5 + 20);
  uint64_t v89 = a2;
  uint64_t v24 = a2 + v23;
  uint64_t v92 = *(void *)(a2 + v23);
  v93[0] = (id)dispatch thunk of CustomStringConvertible.description.getter();
  v93[1] = v25;
  v26._countAndFlagsBits = 45;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  uint64_t v27 = *(void *)(v24 + 8);
  uint64_t v28 = v11;
  uint64_t v92 = v27;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v87 = v22;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v91 = v20;
  URL.appendingPathExtension(_:)();
  unint64_t v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v90 = v12 + 8;
  v30(v17, v28);
  if (qword_101636DA8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100010324(v31, (uint64_t)qword_101650178);
  uint64_t v33 = v85;
  sub_10089C594(v89, v85, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  uint64_t v34 = v84;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v84, v91, v28);
  uint64_t v75 = v32;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    v93[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v77 = v28;
    uint64_t v38 = URL.path.getter();
    uint64_t v92 = sub_1008FA0F0(v38, v39, (uint64_t *)v93);
    uint64_t v76 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1008AA93C(v33, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v40 = URL.path.getter();
    uint64_t v92 = sub_1008FA0F0(v40, v41, (uint64_t *)v93);
    unint64_t v30 = v76;
    uint64_t v28 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v30(v34, v28);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Renaming %s to %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1008AA93C(v33, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    v30(v34, v28);
  }

  char v42 = v88;
  uint64_t v43 = (uint64_t)v86;
  URL._bridgeToObjectiveC()(v44);
  unint64_t v46 = v45;
  v93[0] = 0;
  unsigned int v47 = [v42 removeItemAtURL:v45 error:v93];

  if (v47)
  {
    id v48 = v93[0];
  }
  else
  {
    id v50 = v93[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v83 = 0;
  }
  URL._bridgeToObjectiveC()(v49);
  uint64_t v52 = v51;
  URL._bridgeToObjectiveC()(v53);
  uint64_t v55 = v54;
  v93[0] = 0;
  unsigned int v56 = [v42 moveItemAtURL:v52 toURL:v54 error:v93];

  id v57 = v93[0];
  if (v56)
  {
    uint64_t v58 = v82;
    sub_10001D074(v81, v82, &qword_101650630);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v58, 1, v80) == 1)
    {
      id v59 = v57;

      v30(v91, v28);
      v30(v87, v28);
      return sub_10001DAB4(v58, &qword_101650630);
    }
    uint64_t v62 = v78;
    sub_1008AB368(v58, v78, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_10089C594(v62, v43, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    id v63 = v57;
    unint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      v93[0] = (id)swift_slowAlloc();
      uint64_t v76 = v30;
      uint64_t v77 = v28;
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v67 = URL.path.getter();
      uint64_t v92 = sub_1008FA0F0(v67, v68, (uint64_t *)v93);
      unint64_t v30 = v76;
      uint64_t v28 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008AA93C(v43, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Deleting %s", v66, 0xCu);
      swift_arrayDestroy();
      char v42 = v88;
      swift_slowDealloc();
      uint64_t v62 = v78;
      swift_slowDealloc();
    }
    else
    {
      sub_1008AA93C(v43, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    }

    URL._bridgeToObjectiveC()(v69);
    uint64_t v71 = v70;
    v93[0] = 0;
    unsigned int v72 = [v42 removeItemAtURL:v70 error:v93];

    if (v72)
    {
      id v73 = v93[0];
    }
    else
    {
      id v74 = v93[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    sub_1008AA93C(v62, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }
  else
  {
    id v61 = v93[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  v30(v91, v28);
  return ((uint64_t (*)(char *, uint64_t))v30)(v87, v28);
}

uint64_t sub_1008AFBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[105] = v3;
  v4[99] = a3;
  v4[93] = a2;
  v4[87] = a1;
  uint64_t v5 = type metadata accessor for KeyGenerationBeaconInfo();
  v4[106] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[107] = v6;
  v4[108] = *(void *)(v6 + 64);
  v4[109] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v4[110] = swift_task_alloc();
  v4[111] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[112] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[113] = v8;
  v4[114] = *(void *)(v8 + 64);
  v4[115] = swift_task_alloc();
  v4[116] = swift_task_alloc();
  v4[117] = swift_task_alloc();
  v4[118] = swift_task_alloc();
  v4[119] = swift_task_alloc();
  return _swift_task_switch(sub_1008AFD7C, 0, 0);
}

uint64_t sub_1008AFD7C()
{
  unint64_t v1 = (uint64_t *)(*(void *)(v0 + 696) + *(int *)(*(void *)(v0 + 848) + 24));
  uint64_t v2 = *v1;
  *(void *)(v0 + 960) = *v1;
  unint64_t v3 = v1[1];
  *(void *)(v0 + 968) = v3;
  uint64_t v4 = v1[2];
  *(void *)(v0 + 976) = v4;
  unint64_t v5 = v1[3];
  *(void *)(v0 + 984) = v5;
  uint64_t v6 = v1[4];
  *(void *)(v0 + 992) = v6;
  unint64_t v7 = v1[5];
  *(void *)(v0 + 1000) = v7;
  if (v3 >> 60 == 15)
  {
    sub_1008B0CAC();
    swift_allocError();
    *uint64_t v8 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9(0);
  }
  uint64_t v11 = *(void *)(v0 + 944);
  uint64_t v12 = *(void *)(v0 + 904);
  uint64_t v41 = *(void *)(v0 + 896);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_100037A38(v6, v7);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconIdentifier();
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 1008) = v13;
  *(void *)(v0 + 1016) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v11, v41);
  URL.appendingPathComponent(_:)();
  if (v7 >> 60 != 15) {
    URL.appendingPathComponent(_:)();
  }
  uint64_t v14 = *(void *)(v0 + 936);
  uint64_t v15 = *(void *)(v0 + 928);
  uint64_t v16 = *(void *)(v0 + 904);
  uint64_t v17 = *(void *)(v0 + 896);
  uint64_t v42 = *(void *)(v0 + 888);
  uint64_t v43 = *(void *)(v0 + 880);
  uint64_t v18 = *(void *)(v0 + 872);
  uint64_t v19 = *(void *)(v0 + 864);
  uint64_t v20 = *(void *)(v0 + 856);
  uint64_t v21 = *(void *)(v0 + 840);
  uint64_t v40 = *(void *)(v0 + 792);
  uint64_t v38 = *(void *)(v0 + 912);
  uint64_t v39 = *(void *)(v0 + 744);
  uint64_t v22 = *(void *)(v0 + 696);
  (*(void (**)(void))(v16 + 56))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  sub_10089C594(v22, v18, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v24 = (v38 + *(unsigned __int8 *)(v20 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v0 + 1024) = v25;
  *(void *)(v25 + 16) = v21;
  uint64_t v26 = v15;
  uint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32);
  v27(v25 + v23, v26, v17);
  sub_1008AB368(v18, v25 + v24, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v28 = (void *)(v25 + ((v19 + v24 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v28 = v39;
  v28[1] = v40;
  swift_retain();
  swift_asyncLet_begin();
  sub_10001D074(v42, v43, &qword_101649E40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v43, 1, v17) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 880), &qword_101649E40);
    *(unsigned char *)(v0 + 1058) = 0;
    return _swift_asyncLet_get_throwing(v0 + 16, v0 + 1056, sub_1008B04C8, v0 + 656);
  }
  uint64_t v29 = *(void *)(v0 + 744);
  v27(*(void *)(v0 + 920), *(void *)(v0 + 880), *(void *)(v0 + 896));
  if (v29)
  {
    unint64_t v30 = *(void *)(v0 + 792);
    if (v30)
    {
      unint64_t v31 = *(void *)(v0 + 744) / 0x60uLL;
      unint64_t v32 = v30 / 0x60;
      if (v32 >= v31)
      {
        uint64_t v33 = v31 + 1;
        uint64_t v34 = v32 + 1;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
LABEL_16:
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 1032) = v35;
  void *v35 = v0;
  v35[1] = sub_1008B0308;
  uint64_t v36 = *(void *)(v0 + 920);
  uint64_t v37 = *(void *)(v0 + 696);
  return sub_100891CBC(v36, v37, 1, v33, v34, 1);
}

uint64_t sub_1008B0308(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1040) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_1008B0684;
  }
  else
  {
    *(unsigned char *)(v4 + 1057) = a1 & 1;
    unint64_t v5 = sub_1008B0434;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1008B0434()
{
  (*(void (**)(void, void))(v0 + 1008))(*(void *)(v0 + 920), *(void *)(v0 + 896));
  *(unsigned char *)(v0 + 1058) = *(unsigned char *)(v0 + 1057);
  return _swift_asyncLet_get_throwing(v0 + 16, v0 + 1056, sub_1008B04C8, v0 + 656);
}

uint64_t sub_1008B04C8()
{
  uint64_t v2 = (unsigned char *)(v1 + 1056);
  *(void *)(v1 + 1048) = v0;
  if (v0)
  {
    uint64_t v3 = v1 + 704;
    uint64_t v4 = sub_1008B0868;
  }
  else
  {
    uint64_t v3 = v1 + 752;
    *(unsigned char *)(v1 + 1059) = *v2;
    uint64_t v4 = sub_1008B0510;
  }
  return _swift_asyncLet_finish(v1 + 16, v2, v4, v3);
}

uint64_t sub_1008B0510()
{
  return _swift_task_switch(sub_1008B052C, 0, 0);
}

uint64_t sub_1008B052C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 896);
  uint64_t v5 = *(void *)(v0 + 888);
  sub_1008B10AC(*(void *)(v0 + 960), *(void *)(v0 + 968), *(void *)(v0 + 976), *(void *)(v0 + 984), *(void *)(v0 + 992), *(void *)(v0 + 1000));
  sub_10001DAB4(v5, &qword_101649E40);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v7 = (*(unsigned char *)(v0 + 1059) | *(unsigned char *)(v0 + 1058)) & 1;
  return v6(v7);
}

uint64_t sub_1008B0684()
{
  (*(void (**)(void, void))(v0 + 1008))(*(void *)(v0 + 920), *(void *)(v0 + 896));
  return _swift_asyncLet_finish(v0 + 16, v0 + 1056, sub_1008B0710, v0 + 800);
}

uint64_t sub_1008B0710()
{
  return _swift_task_switch(sub_1008B072C, 0, 0);
}

uint64_t sub_1008B072C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[126];
  uint64_t v2 = v0[119];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[112];
  uint64_t v5 = v0[111];
  sub_1008B10AC(v0[120], v0[121], v0[122], v0[123], v0[124], v0[125]);
  sub_10001DAB4(v5, &qword_101649E40);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t sub_1008B0868()
{
  return _swift_task_switch(sub_1008B0884, 0, 0);
}

uint64_t sub_1008B0884()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[126];
  uint64_t v2 = v0[119];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[112];
  uint64_t v5 = v0[111];
  sub_1008B10AC(v0[120], v0[121], v0[122], v0[123], v0[124], v0[125]);
  sub_10001DAB4(v5, &qword_101649E40);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t sub_1008B09C0()
{
  uint64_t v1 = (int *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  v6(v0 + v3 + *(int *)(v7 + 20), v5);
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_10001CFB8(*v10, v11);
    sub_10001CFB8(v10[2], v10[3]);
    unint64_t v12 = v10[5];
    if (v12 >> 60 != 15) {
      sub_10001CFB8(v10[4], v12);
    }
  }

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1008B0B74(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[5] = v9;
  v11[6] = v10;
  v11[3] = v7;
  v11[4] = v8;
  v11[1] = sub_100033F68;
  v11[2] = a1;
  return _swift_task_switch(sub_10088D950, 0, 0);
}

unint64_t sub_1008B0CAC()
{
  unint64_t result = qword_101650610;
  if (!qword_101650610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101650610);
  }
  return result;
}

uint64_t sub_1008B0D00()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  unint64_t v6 = (int *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(*(void *)v6 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = type metadata accessor for UUID();
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v0 + v8, v10);
  uint64_t v12 = type metadata accessor for BeaconIdentifier();
  v11(v0 + v8 + *(int *)(v12 + 20), v10);
  uint64_t v13 = v0 + v8 + v6[7];
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = (uint64_t *)(v0 + v8 + v6[8]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15)
  {
    sub_10001CFB8(*v15, v16);
    sub_10001CFB8(v15[2], v15[3]);
    unint64_t v17 = v15[5];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(v15[4], v17);
    }
  }

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_1008B0F20(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + v6;
  uint64_t v12 = v1 + v9;
  uint64_t v13 = (uint64_t *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  unint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *unint64_t v16 = v3;
  v16[1] = sub_100033F68;
  return sub_100891A9C(a1, v10, v11, v12, v14, v15);
}

uint64_t sub_1008B10AC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    return sub_100037A24(a5, a6);
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101650848);
}

unint64_t sub_1008B1138()
{
  unint64_t result = qword_101650638;
  if (!qword_101650638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650638);
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016507B8);
}

void sub_1008B11AC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&unk_1016569A0);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  unint64_t v7 = v4 + 16;
  v8(v6, a1, v3);
  id v9 = sub_10089A3A8((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (v1) {
    return;
  }
  uint64_t v10 = v9;
  id v92 = 0;
  if (([v9 seekToOffset:0 error:&v92] & 1) == 0)
  {
    id v17 = v92;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_17:

    return;
  }
  id v11 = v92;
  id v12 = [v10 readDataOfLength:3];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  switch(v15 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(v13) - v13;
      if (__OFSUB__(HIDWORD(v13), v13))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        swift_release();
        uint64_t v69 = v85;
        swift_release();
        unint64_t v71 = v84;
        goto LABEL_104;
      }
      uint64_t v16 = (int)v16;
LABEL_9:
      if (v16 != 3
        || Data.subscript.getter() != 75
        || Data.subscript.getter() != 73
        || Data.subscript.getter() != 77)
      {
LABEL_15:
        sub_10000588C(&qword_101650688);
        sub_100062734(&qword_101650690, &qword_101650688);
        swift_allocError();
        *(_DWORD *)uint64_t v25 = 0;
        *(unsigned char *)(v25 + 4) = 2;
        swift_willThrow();
LABEL_16:
        sub_10001CFB8(v13, v15);
        goto LABEL_17;
      }
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v16 = v18 - v19;
      if (!v20) {
        goto LABEL_9;
      }
      goto LABEL_100;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v16 = BYTE6(v15);
      goto LABEL_9;
  }
  id v21 = [v10 readDataOfLength:1];
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v23;

  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(v22) - v22;
      if (__OFSUB__(HIDWORD(v22), v22))
      {
        __break(1u);
LABEL_106:
        __break(1u);
      }
      uint64_t v24 = (int)v24;
LABEL_22:
      if (v24 != 1 || Data.subscript.getter() != 1)
      {
LABEL_27:
        int v31 = Data.subscript.getter();
        sub_10000588C(&qword_101650688);
        sub_100062734(&qword_101650690, &qword_101650688);
        swift_allocError();
        *(_DWORD *)uint64_t v32 = v31;
        *(unsigned char *)(v32 + 4) = 0;
        swift_willThrow();
LABEL_28:
        uint64_t v33 = v22;
LABEL_29:
        sub_10001CFB8(v33, v7);
        goto LABEL_16;
      }
      break;
    case 2uLL:
      uint64_t v27 = *(void *)(v22 + 16);
      uint64_t v26 = *(void *)(v22 + 24);
      BOOL v20 = __OFSUB__(v26, v27);
      uint64_t v24 = v26 - v27;
      if (!v20) {
        goto LABEL_22;
      }
      goto LABEL_106;
    case 3uLL:
      goto LABEL_27;
    default:
      uint64_t v24 = BYTE6(v7);
      goto LABEL_22;
  }
  id v28 = [v10 readDataOfLength:4];
  uint64_t v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  switch(v30 >> 62)
  {
    case 1uLL:
      unint64_t v90 = v30;
      uint64_t v34 = v91;
      uint64_t v35 = (int)v91;
      uint64_t v89 = (v34 >> 32) - (int)v34;
      if (v34 >> 32 >= (int)v34)
      {
        sub_1000361E0(v91, v90);
        uint64_t v36 = __DataStorage._bytes.getter();
        if (!v36)
        {
          __DataStorage._length.getter();
LABEL_49:
          unint64_t v30 = v90;
          sub_10001CFB8(v91, v90);
          goto LABEL_50;
        }
        unint64_t v88 = v36;
        uint64_t v37 = __DataStorage._offset.getter();
        BOOL v20 = __OFSUB__(v35, v37);
        uint64_t v38 = v35 - v37;
        if (!v20)
        {
          uint64_t v39 = __DataStorage._length.getter();
          uint64_t v40 = v89;
          if (v39 < v89) {
            uint64_t v40 = v39;
          }
          if ((unint64_t)(v40 + 3) >= 7)
          {
            uint64_t v86 = *(unsigned int *)(v88 + v38);
            uint64_t v87 = v22;
            unint64_t v30 = v90;
            sub_10001CFB8(v91, v90);
            goto LABEL_52;
          }
          goto LABEL_49;
        }
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      __break(1u);
      goto LABEL_108;
    case 2uLL:
      uint64_t v89 = *(void *)(v91 + 16);
      unint64_t v90 = v30;
      unint64_t v88 = *(void *)(v91 + 24);
      swift_retain();
      swift_retain();
      uint64_t v41 = __DataStorage._bytes.getter();
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = __DataStorage._offset.getter();
        uint64_t v44 = v89;
        if (__OFSUB__(v89, v43))
        {
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
        uint64_t v86 = v42 + v89 - v43;
      }
      else
      {
        uint64_t v86 = 0;
        uint64_t v44 = v89;
      }
      uint64_t v45 = v88 - v44;
      if (__OFSUB__(v88, v44))
      {
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      uint64_t v46 = __DataStorage._length.getter();
      if (!v86 || (v46 >= v45 ? (uint64_t v47 = v45) : (uint64_t v47 = v46), (unint64_t)(v47 + 3) < 7))
      {
        swift_release();
        swift_release();
        unint64_t v30 = v90;
LABEL_50:
        sub_10000588C(&qword_101650688);
        sub_100062734(&qword_101650690, &qword_101650688);
        swift_allocError();
        *(_DWORD *)uint64_t v48 = 0;
        *(unsigned char *)(v48 + 4) = 1;
        swift_willThrow();
LABEL_76:
        sub_10001CFB8(v91, v30);
        goto LABEL_28;
      }
      uint64_t v86 = *(unsigned int *)v86;
      uint64_t v87 = v22;
      swift_release();
      swift_release();
      unint64_t v30 = v90;
LABEL_52:
      id v49 = [v10 readDataOfLength:4];
      uint64_t v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      unint64_t v88 = v51;
      unint64_t v52 = v51 >> 62;
      uint64_t v22 = v87;
      switch(v52)
      {
        case 1uLL:
          unint64_t v90 = v30;
          uint64_t v53 = v89;
          uint64_t v54 = (int)v89;
          uint64_t v85 = (v53 >> 32) - (int)v53;
          if (v53 >> 32 < (int)v53) {
            goto LABEL_111;
          }
          sub_1000361E0(v89, v88);
          unint64_t v84 = __DataStorage._bytes.getter();
          if (!v84)
          {
            __DataStorage._length.getter();
LABEL_74:
            sub_10001CFB8(v89, v88);
            unint64_t v30 = v90;
LABEL_75:
            sub_10000588C(&qword_101650688);
            sub_100062734(&qword_101650690, &qword_101650688);
            swift_allocError();
            *(_DWORD *)uint64_t v67 = 1;
            *(unsigned char *)(v67 + 4) = 2;
            swift_willThrow();
            sub_10001CFB8(v89, v88);
            goto LABEL_76;
          }
          uint64_t v55 = __DataStorage._offset.getter();
          BOOL v20 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v20) {
            goto LABEL_113;
          }
          uint64_t v57 = __DataStorage._length.getter();
          uint64_t v58 = v85;
          if (v57 < v85) {
            uint64_t v58 = v57;
          }
          if ((unint64_t)(v58 + 3) < 7) {
            goto LABEL_74;
          }
          uint64_t v87 = v22;
          int v83 = *(_DWORD *)(v84 + v56);
          sub_10001CFB8(v89, v88);
LABEL_78:
          id v68 = [v10 readDataOfLength:4];
          uint64_t v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v71 = v70;

          switch(v71 >> 62)
          {
            case 1uLL:
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              uint64_t v82 = (v69 >> 32) - (int)v69;
              if (v69 >> 32 < (int)v69) {
                goto LABEL_115;
              }
              sub_1000361E0(v85, v84);
              if (!__DataStorage._bytes.getter())
              {
                __DataStorage._length.getter();
LABEL_103:
                unint64_t v71 = v84;
                uint64_t v69 = v85;
                sub_10001CFB8(v85, v84);
LABEL_104:
                sub_10000588C(&qword_101650688);
                sub_100062734(&qword_101650690, &qword_101650688);
                swift_allocError();
                *(_DWORD *)uint64_t v81 = 1;
                *(unsigned char *)(v81 + 4) = 2;
                swift_willThrow();
                sub_10001CFB8(v69, v71);
                sub_10001CFB8(v89, v88);
                sub_10001CFB8(v91, v90);
                uint64_t v33 = v87;
                goto LABEL_29;
              }
              if (__OFSUB__((int)v69, __DataStorage._offset.getter())) {
                goto LABEL_117;
              }
              uint64_t v72 = __DataStorage._length.getter();
              uint64_t v73 = v82;
              if (v72 < v82) {
                uint64_t v73 = v72;
              }
              if ((unint64_t)(v73 + 3) < 7) {
                goto LABEL_103;
              }
              sub_10001CFB8(v85, v84);
LABEL_98:
              uint64_t v80 = v87;
              Data.subscript.getter();
              sub_10001CFB8(v13, v15);
              sub_10001CFB8(v80, v7);
              sub_10001CFB8(v91, v90);

              sub_10001CFB8(v89, v88);
              sub_10001CFB8(v85, v84);
              return;
            case 2uLL:
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              uint64_t v74 = *(void *)(v69 + 16);
              uint64_t v82 = *(void *)(v69 + 24);
              swift_retain();
              swift_retain();
              uint64_t v75 = __DataStorage._bytes.getter();
              if (!v75) {
                goto LABEL_91;
              }
              uint64_t v76 = __DataStorage._offset.getter();
              if (__OFSUB__(v74, v76)) {
                goto LABEL_118;
              }
              v75 += v74 - v76;
LABEL_91:
              BOOL v20 = __OFSUB__(v82, v74);
              uint64_t v77 = v82 - v74;
              if (v20) {
                goto LABEL_116;
              }
              uint64_t v78 = __DataStorage._length.getter();
              if (v78 >= v77) {
                uint64_t v79 = v77;
              }
              else {
                uint64_t v79 = v78;
              }
              if (!v75 || (unint64_t)(v79 + 3) < 7) {
                goto LABEL_101;
              }
              swift_release();
              swift_release();
              goto LABEL_98;
            case 3uLL:
              goto LABEL_104;
            default:
              if ((v71 & 0xFC000000000000) == 0) {
                goto LABEL_104;
              }
              unint64_t v84 = v71;
              uint64_t v85 = v69;
              goto LABEL_98;
          }
        case 2uLL:
          unint64_t v90 = v30;
          uint64_t v59 = *(void *)(v89 + 16);
          unint64_t v84 = *(void *)(v89 + 24);
          uint64_t v85 = v59;
          swift_retain();
          swift_retain();
          uint64_t v60 = __DataStorage._bytes.getter();
          uint64_t v87 = v22;
          if (v60)
          {
            uint64_t v61 = v60;
            uint64_t v62 = __DataStorage._offset.getter();
            if (__OFSUB__(v85, v62)) {
              goto LABEL_114;
            }
            id v63 = (int *)(v61 + v85 - v62);
          }
          else
          {
            id v63 = 0;
          }
          uint64_t v64 = v84 - v85;
          if (!__OFSUB__(v84, v85))
          {
            uint64_t v65 = __DataStorage._length.getter();
            if (v63)
            {
              uint64_t v66 = v65 >= v64 ? v64 : v65;
              if ((unint64_t)(v66 + 3) >= 7)
              {
                int v83 = *v63;
                swift_release();
                swift_release();
                goto LABEL_78;
              }
            }
            swift_release();
            swift_release();
            unint64_t v30 = v90;
            uint64_t v22 = v87;
            goto LABEL_75;
          }
          break;
        case 3uLL:
          goto LABEL_75;
        default:
          if ((v88 & 0xFC000000000000) == 0) {
            goto LABEL_75;
          }
          unint64_t v90 = v30;
          int v83 = v89;
          goto LABEL_78;
      }
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      JUMPOUT(0x1008B1C8CLL);
    case 3uLL:
      goto LABEL_50;
    default:
      if ((v30 & 0xFC000000000000) == 0) {
        goto LABEL_50;
      }
      uint64_t v86 = v91;
      uint64_t v87 = v22;
      goto LABEL_52;
  }
}

uint64_t sub_1008B1CDC()
{
  swift_unknownObjectRelease();
  sub_1001A1AD8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1008B1D24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10088E92C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1008B1DEC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1016506E0 + dword_1016506E0);
  return v6(a1, v4);
}

uint64_t sub_1008B1EA4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1008B1EE4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10001D2E4;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D2E4;
  return sub_10088FFB8();
}

uint64_t *sub_1008B1FB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1008B2088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1008B2104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_1008B21A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1008B221C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  *(void *)(v8 + 4) = *(void *)(v9 + 4);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_1008B22B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008B22C4);
}

uint64_t sub_1008B22C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008B22DC);
}

uint64_t sub_1008B22E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008B2598(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
}

uint64_t sub_1008B2300(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1008B2364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  return a1;
}

uint64_t sub_1008B23F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1008B246C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008B2480);
}

uint64_t sub_1008B2484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1008B24F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008B2504);
}

uint64_t sub_1008B2508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1008B2578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008B2598(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
}

uint64_t sub_1008B2598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BeaconKeyServiceBuilder.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008B26F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyServiceBuilder.Error()
{
  return &type metadata for BeaconKeyServiceBuilder.Error;
}

unint64_t sub_1008B2734()
{
  unint64_t result = qword_101650880;
  if (!qword_101650880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650880);
  }
  return result;
}

uint64_t sub_1008B2794@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v37 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v37 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v37 - v23;
  if (!a2)
  {
    uint64_t v39 = a1;
    uint64_t v42 = v6;
    uint64_t v25 = v16;
    if (qword_101636DC0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170E588);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Caller attempted to calculate dateInterval for bucket 0!", v29, 2u);
      swift_slowDealloc();
    }

    a2 = 1;
    uint64_t v16 = v25;
    uint64_t v6 = v42;
    a1 = v39;
  }
  uint64_t v38 = a2;
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  unint64_t v30 = v24;
  int v31 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v31(v19, a1, v5);
  uint64_t v32 = v22;
  Date.init(timeInterval:since:)();
  uint64_t v39 = v30;
  v31(v19, v30, v5);
  Date.init(timeInterval:since:)();
  v31(v19, v16, v5);
  Date.init(timeInterval:since:)();
  Date.timeIntervalSince1970.getter();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v42 = v6 + 8;
  v33(v11, v5);
  uint64_t v34 = v40;
  Date.init(timeIntervalSince1970:)();
  if (v38 == 1) {
    uint64_t v35 = v32;
  }
  else {
    uint64_t v35 = v16;
  }
  v31(v19, v35, v5);
  v31(v41, v34, v5);
  DateInterval.init(start:end:)();
  v33(v34, v5);
  v33(v16, v5);
  v33(v32, v5);
  return ((uint64_t (*)(char *, uint64_t))v33)(v39, v5);
}

uint64_t sub_1008B2BE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, char *a7@<X8>)
{
  v202 = a6;
  id v204 = a5;
  v196 = a3;
  uint64_t v185 = a2;
  v192 = a7;
  uint64_t v199 = type metadata accessor for Calendar.Component();
  uint64_t v198 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  v197 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v211 = v10;
  uint64_t v212 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v188 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  v178 = (char *)&v177 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v184 = (char *)&v177 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v177 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  v186 = (char *)&v177 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v183 = (char *)&v177 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v200 = (char *)&v177 - v25;
  __chkstk_darwin(v24);
  v193 = (char *)&v177 - v26;
  uint64_t v213 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  unint64_t v29 = (char *)&v177 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v182 = (uint64_t)&v177 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  v180 = (char *)&v177 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v181 = (uint64_t)&v177 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v179 = (char *)&v177 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v195 = (uint64_t)&v177 - v40;
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v177 - v41;
  uint64_t v191 = type metadata accessor for Calendar();
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  v203 = (char *)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  LODWORD(v210) = static os_log_type_t.default.getter();
  if (qword_1016372D8 != -1) {
    swift_once();
  }
  uint64_t v208 = qword_10170F030;
  uint64_t v218 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v44 = swift_allocObject();
  long long v217 = xmmword_101347BA0;
  *(_OWORD *)(v44 + 16) = xmmword_101347BA0;
  uint64_t v189 = a4;
  sub_10001E2BC(a4, (uint64_t)v42);
  uint64_t v45 = String.init<A>(describing:)();
  uint64_t v47 = v46;
  *(void *)(v44 + 56) = &type metadata for String;
  unint64_t v48 = sub_10000B4CC();
  *(void *)(v44 + 64) = v48;
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = v47;
  uint64_t v50 = a1[3];
  uint64_t v49 = a1[4];
  unint64_t v51 = sub_10001CD44(a1, v50);
  uint64_t v52 = *(void *)(*(void *)(v49 + 8) + 8);
  v215 = *(void (**)(uint64_t, uint64_t))(v52 + 32);
  v216 = v51;
  v215(v50, v52);
  uint64_t v53 = UUID.uuidString.getter();
  uint64_t v55 = v54;
  v214 = *(void (**)(char *, uint64_t))(v27 + 8);
  v214(v29, v213);
  *(void *)(v44 + 96) = &type metadata for String;
  *(void *)(v44 + 104) = v48;
  *(void *)(v44 + 72) = v53;
  *(void *)(v44 + 80) = v55;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v194 = qword_10170F030;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v217;
  id v219 = v204;
  id v187 = v204;
  sub_10000588C(&qword_101650940);
  uint64_t v57 = String.init<A>(describing:)();
  *(void *)(v56 + 56) = &type metadata for String;
  *(void *)(v56 + 64) = v48;
  *(void *)(v56 + 32) = v57;
  *(void *)(v56 + 40) = v58;
  uint64_t v206 = v52;
  uint64_t v207 = v50;
  uint64_t v205 = v52 + 32;
  v215(v50, v52);
  uint64_t v59 = UUID.uuidString.getter();
  uint64_t v61 = v60;
  v210 = v29;
  v214(v29, v213);
  *(void *)(v56 + 96) = &type metadata for String;
  *(void *)(v56 + 104) = v48;
  uint64_t v208 = v48;
  *(void *)(v56 + 72) = v59;
  *(void *)(v56 + 80) = v61;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v62 = v195;
  sub_10001E2BC((uint64_t)v196, v195);
  uint64_t v63 = v211;
  uint64_t v64 = v212;
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
  int v66 = v65(v62, 1, v211);
  uint64_t v209 = v27 + 8;
  if (v66 != 1)
  {
    v201 = v65;
    uint64_t v78 = v193;
    v196 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
    uint64_t v195 = v64 + 32;
    v196(v193, v62, v63);
    uint64_t v79 = sub_10001CD44(v202, v202[3]);
    uint64_t v80 = sub_1010ABA5C(*v79);
    uint64_t v81 = v198;
    uint64_t v82 = v197;
    uint64_t v83 = v199;
    uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v198 + 104))(v197, enum case for Calendar.Component.minute(_:), v199);
    if (__OFSUB__(0, v80)) {
      goto LABEL_33;
    }
    uint64_t v84 = (uint64_t)v179;
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v83);
    uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    uint64_t v86 = v183;
    v85(v183, v78, v63);
    uint64_t v87 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v201;
    if (v201(v84, 1, v63) == 1)
    {
      unint64_t v88 = v196;
      v196(v200, (uint64_t)v86, v63);
      sub_10001DAB4(v84, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v86, v63);
      unint64_t v88 = v196;
      v196(v200, v84, v63);
    }
    uint64_t v95 = v186;
    uint64_t v96 = v181;
    sub_10001E2BC(v189, v181);
    if (v87(v96, 1, v63) == 1)
    {
      sub_10001DAB4(v96, (uint64_t *)&unk_10163AC90);
      uint64_t v97 = v192;
      uint64_t v98 = &qword_10170F000;
      id v99 = v200;
    }
    else
    {
      v88(v95, v96, v63);
      id v99 = v200;
      char v118 = static Date.> infix(_:_:)();
      uint64_t v97 = v192;
      uint64_t v98 = &qword_10170F000;
      if (v118)
      {
        v85(v192, v95, v63);
        static os_log_type_t.default.getter();
        uint64_t v119 = v63;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))qword_10170F030;
        uint64_t v120 = swift_allocObject();
        *(_OWORD *)(v120 + 16) = v217;
        sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
        int v117 = v97;
        uint64_t v122 = v208;
        *(void *)(v120 + 56) = &type metadata for String;
        *(void *)(v120 + 64) = v122;
        *(void *)(v120 + 32) = v121;
        *(void *)(v120 + 40) = v123;
        BOOL v124 = v210;
        v215(v207, v206);
        uint64_t v125 = UUID.uuidString.getter();
        uint64_t v127 = v126;
        uint64_t v128 = v124;
        uint64_t v113 = v213;
        v214(v128, v213);
        *(void *)(v120 + 96) = &type metadata for String;
        *(void *)(v120 + 104) = v122;
        *(void *)(v120 + 72) = v125;
        *(void *)(v120 + 80) = v127;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v114 = *(void (**)(char *, uint64_t))(v212 + 8);
        v114(v95, v119);
        v114(v200, v119);
        uint64_t v129 = v193;
        uint64_t v130 = v119;
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v212 + 8))(v95, v63);
    }
    v85(v97, v99, v63);
    uint64_t v143 = v63;
    LODWORD(v199) = static os_log_type_t.default.getter();
    v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98[6];
    uint64_t v144 = swift_allocObject();
    *(_OWORD *)(v144 + 16) = v217;
    sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v146 = v208;
    *(void *)(v144 + 56) = &type metadata for String;
    *(void *)(v144 + 64) = v146;
    *(void *)(v144 + 32) = v145;
    *(void *)(v144 + 40) = v147;
    uint64_t v148 = v210;
    v215(v207, v206);
    uint64_t v149 = UUID.uuidString.getter();
    uint64_t v150 = v99;
    uint64_t v152 = v151;
    uint64_t v113 = v213;
    v214(v148, v213);
    *(void *)(v144 + 96) = &type metadata for String;
    *(void *)(v144 + 104) = v146;
    *(void *)(v144 + 72) = v149;
    *(void *)(v144 + 80) = v152;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v114 = *(void (**)(char *, uint64_t))(v212 + 8);
    uint64_t v153 = v150;
    int v117 = v97;
    v114(v153, v143);
    uint64_t v129 = v193;
    uint64_t v130 = v143;
LABEL_26:
    v114(v129, v130);
    if (v204) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  sub_10001DAB4(v62, (uint64_t *)&unk_10163AC90);
  uint64_t v67 = sub_10001CD44(v202, v202[3]);
  uint64_t v68 = sub_1010ABA20(*v67);
  uint64_t v69 = v198;
  unint64_t v70 = v197;
  uint64_t v71 = v199;
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v198 + 104))(v197, enum case for Calendar.Component.day(_:), v199);
  if (!__OFSUB__(0, v68))
  {
    uint64_t v73 = (uint64_t)v180;
    uint64_t v74 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65;
    uint64_t v75 = v185;
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    uint64_t v76 = v184;
    v200 = *(char **)(v64 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v200)(v184, v75, v63);
    if (v74(v73, 1, v63) == 1)
    {
      uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
      v77((char *)v201, v76, v63);
      sub_10001DAB4(v73, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v76, v63);
      uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
      v77((char *)v201, (char *)v73, v63);
    }
    id v89 = v204;
    uint64_t v90 = v182;
    sub_10001E2BC(v189, v182);
    unsigned int v91 = v74(v90, 1, v63);
    v196 = (void (*)(char *, uint64_t, uint64_t))v77;
    if (v91 == 1)
    {
      sub_10001DAB4(v90, (uint64_t *)&unk_10163AC90);
      id v92 = v192;
      uint64_t v93 = &qword_10170F000;
      uint64_t v94 = (char *)v201;
      goto LABEL_22;
    }
    uint64_t v100 = v178;
    v77(v178, (char *)v90, v63);
    uint64_t v94 = (char *)v201;
    char v101 = static Date.> infix(_:_:)();
    uint64_t v102 = v192;
    uint64_t v103 = v64;
    uint64_t v93 = &qword_10170F000;
    if ((v101 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v103 + 8))(v100, v63);
      id v92 = v102;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v200)(v92, v94, v63);
      uint64_t v131 = v63;
      LODWORD(v200) = static os_log_type_t.default.getter();
      id v204 = (id)v93[6];
      uint64_t v132 = swift_allocObject();
      *(_OWORD *)(v132 + 16) = v217;
      sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v134 = v92;
      uint64_t v135 = v208;
      *(void *)(v132 + 56) = &type metadata for String;
      *(void *)(v132 + 64) = v135;
      *(void *)(v132 + 32) = v133;
      *(void *)(v132 + 40) = v136;
      uint64_t v137 = v210;
      v215(v207, v206);
      uint64_t v138 = UUID.uuidString.getter();
      id v139 = v94;
      uint64_t v141 = v140;
      Swift::Int v142 = v137;
      uint64_t v113 = v213;
      v214(v142, v213);
      *(void *)(v132 + 96) = &type metadata for String;
      *(void *)(v132 + 104) = v135;
      int v117 = v134;
      *(void *)(v132 + 72) = v138;
      *(void *)(v132 + 80) = v141;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v114 = *(void (**)(char *, uint64_t))(v212 + 8);
      v114(v139, v131);
      if (!v89) {
        goto LABEL_31;
      }
LABEL_27:
      id v154 = v187;
      id v155 = [v154 timestamp];
      v156 = v188;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v155) = static Date.> infix(_:_:)();
      v114(v156, v211);
      if (v155)
      {
        uint64_t v157 = sub_10001CD44(v202, v202[3]);
        if (sub_1010AC04C(*v157))
        {
          id v158 = [v154 timestamp];
          unint64_t v159 = v188;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v160 = v211;
          v114(v117, v211);
          v196(v117, (uint64_t)v159, v160);
          static os_log_type_t.default.getter();
          uint64_t v213 = qword_10170F030;
          uint64_t v161 = swift_allocObject();
          *(_OWORD *)(v161 + 16) = v217;
          sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v163 = v208;
          *(void *)(v161 + 56) = &type metadata for String;
          *(void *)(v161 + 64) = v163;
          *(void *)(v161 + 32) = v162;
          *(void *)(v161 + 40) = v164;
          v165 = v210;
          v215(v207, v206);
          uint64_t v166 = UUID.uuidString.getter();
          uint64_t v168 = v167;
          v214(v165, v113);
          *(void *)(v161 + 96) = &type metadata for String;
          *(void *)(v161 + 104) = v163;
          *(void *)(v161 + 72) = v166;
          *(void *)(v161 + 80) = v168;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          type metadata accessor for Transaction();
          static Transaction.asyncTask(name:block:)();
        }
      }

      goto LABEL_31;
    }
    ((void (*)(char *, char *, uint64_t))v200)(v192, v100, v63);
    uint64_t v104 = v63;
    LODWORD(v200) = static os_log_type_t.default.getter();
    uint64_t v105 = swift_allocObject();
    *(_OWORD *)(v105 + 16) = v217;
    sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v107 = v208;
    *(void *)(v105 + 56) = &type metadata for String;
    *(void *)(v105 + 64) = v107;
    *(void *)(v105 + 32) = v106;
    *(void *)(v105 + 40) = v108;
    v215(v207, v206);
    uint64_t v109 = UUID.uuidString.getter();
    uint64_t v111 = v110;
    uint64_t v112 = v213;
    v214(v210, v213);
    *(void *)(v105 + 96) = &type metadata for String;
    *(void *)(v105 + 104) = v107;
    *(void *)(v105 + 72) = v109;
    *(void *)(v105 + 80) = v111;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v113 = v112;
    uint64_t v114 = *(void (**)(char *, uint64_t))(v212 + 8);
    v114(v100, v104);
    uint64_t v115 = v104;
    id v116 = v204;
    v114((char *)v201, v115);
    int v117 = v102;
    if (v116) {
      goto LABEL_27;
    }
LABEL_31:
    static os_log_type_t.default.getter();
    uint64_t v169 = swift_allocObject();
    *(_OWORD *)(v169 + 16) = v217;
    sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v171 = v208;
    *(void *)(v169 + 56) = &type metadata for String;
    *(void *)(v169 + 64) = v171;
    *(void *)(v169 + 32) = v170;
    *(void *)(v169 + 40) = v172;
    uint64_t v173 = v210;
    v215(v207, v206);
    uint64_t v174 = UUID.uuidString.getter();
    uint64_t v176 = v175;
    v214(v173, v113);
    *(void *)(v169 + 96) = &type metadata for String;
    *(void *)(v169 + 104) = v171;
    *(void *)(v169 + 72) = v174;
    *(void *)(v169 + 80) = v176;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v190 + 8))(v203, v191);
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1008B40E4(char a1)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  if (a1) {
    uint64_t v2 = sub_1010AB688(v5);
  }
  else {
    uint64_t v2 = sub_1010AAFA8(v5);
  }
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) == 0) {
    return v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1008B41EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E588);
  sub_100010324(v0, (uint64_t)qword_10170E588);
  return Logger.init(subsystem:category:)();
}

uint64_t TimeBasedKeySequence.description.getter(char a1)
{
  if (a1) {
    return 0x61646E6F6365732ELL;
  }
  else {
    return 0x7972616D6972702ELL;
  }
}

searchpartyd::TimeBasedKeySequence_optional __swiftcall TimeBasedKeySequence.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 2) {
    v1.value = searchpartyd_TimeBasedKeySequence_secondary;
  }
  else {
    v1.value = searchpartyd_TimeBasedKeySequence_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t TimeBasedKeySequence.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

Swift::Int sub_1008B42D0()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1008B4320()
{
  if (*v0) {
    Swift::UInt v1 = 2;
  }
  else {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1008B4358()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *sub_1008B43A4@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_1008B43C4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (*v1) {
    uint64_t v2 = 2;
  }
  *a1 = v2;
}

uint64_t sub_1008B43DC()
{
  if (*v0) {
    return 0x61646E6F6365732ELL;
  }
  else {
    return 0x7972616D6972702ELL;
  }
}

uint64_t sub_1008B441C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101650938);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = type metadata accessor for TimeBasedKeysCriteria();
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v56 = (uint64_t *)((char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v57 = (char *)&v54 - v17;
  id v18 = [a1 dateInterval];
  if (v18)
  {
    uint64_t v19 = v18;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20(v6, v11, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {

      v20(v13, v6, v7);
      uint64_t v21 = v57;
      v20(v57, v13, v7);
LABEL_34:
      swift_storeEnumTagMultiPayload();
LABEL_38:
      uint64_t v53 = v58;
      sub_1008B6400((uint64_t)v21, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(a2, 0, 1, v14);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_10001DAB4((uint64_t)v6, &qword_101650938);
  id v22 = [a1 sequence];
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = [a1 index];
    if (v24)
    {
      uint64_t v25 = v24;
      id v26 = [a1 hint];
      if (v26)
      {
        uint64_t v27 = v26;
        id v28 = [v23 integerValue];
        if (v28 == (id)1)
        {
          uint64_t v29 = v14;
          char v30 = 0;
        }
        else
        {
          if (v28 != (id)2)
          {

            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(a2, 1, 1, v14);
          }
          uint64_t v29 = v14;
          char v30 = 1;
        }
        id v50 = [v25 unsignedLongLongValue];
        unsigned __int8 v51 = [v27 unsignedCharValue];

        uint64_t v21 = v57;
        char *v57 = v30;
        *((void *)v21 + 1) = v50;
        v21[16] = v51;
        uint64_t v14 = v29;
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v25 = v23;
    }
  }
  id v31 = [a1 indices];
  if (!v31)
  {
    id v43 = [a1 index];
    if (v43)
    {
      uint64_t v44 = v43;
      id v45 = [a1 hint];
      if (v45)
      {
        uint64_t v46 = v45;
        uint64_t v47 = v14;
        id v48 = [v44 unsignedLongLongValue];
        unsigned __int8 v49 = [v46 unsignedCharValue];

        uint64_t v21 = v57;
        *(void *)uint64_t v57 = v48;
        uint64_t v14 = v47;
        v21[8] = v49;
        goto LABEL_34;
      }
    }
    uint64_t v21 = v57;
    goto LABEL_34;
  }
  uint64_t v32 = v31;
  sub_1003395AC();
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v33 >> 62))
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v34) {
      goto LABEL_17;
    }
LABEL_36:
    swift_bridgeObjectRelease();

    uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_37:
    uint64_t v52 = (uint64_t)v56;
    *uint64_t v56 = v37;
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = v57;
    sub_1008B6400(v52, (uint64_t)v57);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_36;
  }
LABEL_17:
  uint64_t v54 = v14;
  uint64_t v55 = a2;
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B6F10(0, v34 & ~(v34 >> 63), 0);
  if ((v34 & 0x8000000000000000) == 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v59;
    do
    {
      if ((v33 & 0xC000000000000001) != 0) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v38 = *(id *)(v33 + 8 * v36 + 32);
      }
      uint64_t v39 = v38;
      id v40 = [v38 unsignedLongLongValue];

      uint64_t v59 = v37;
      unint64_t v42 = v37[2];
      unint64_t v41 = v37[3];
      if (v42 >= v41 >> 1)
      {
        sub_1000B6F10(v41 > 1, v42 + 1, 1);
        uint64_t v37 = v59;
      }
      ++v36;
      v37[2] = v42 + 1;
      v37[v42 + 4] = v40;
    }
    while (v34 != v36);
    swift_bridgeObjectRelease();

    uint64_t v14 = v54;
    a2 = v55;
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t TimeBasedKeysCriteria.description.getter()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v5);
  uint64_t v7 = (unsigned __int8 *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008B4F98(v0, (uint64_t)v7);
  uint64_t v8 = 0x6F4D74666972642ELL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v34[0] = 0xD000000000000010;
      v34[1] = 0x80000001014097F0;
      v11._countAndFlagsBits = Array.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 2u:
      uint64_t v12 = *(void *)v7;
      unsigned __int8 v13 = v7[8];
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_101342130;
      *(void *)(v14 + 56) = &type metadata for UInt8;
      *(void *)(v14 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v14 + 32) = v13;
      uint64_t v15 = String.init(format:_:)();
      uint64_t v17 = v16;
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v34[0] = 0xD000000000000017;
      v34[1] = 0x80000001014097D0;
      uint64_t v33 = v12;
      goto LABEL_12;
    case 3u:
      int v18 = *v7;
      uint64_t v19 = *((void *)v7 + 1);
      unsigned __int8 v20 = v7[16];
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_101342130;
      *(void *)(v21 + 56) = &type metadata for UInt8;
      *(void *)(v21 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v21 + 32) = v20;
      uint64_t v15 = String.init(format:_:)();
      uint64_t v17 = v22;
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v34[0] = 0xD000000000000013;
      v34[1] = 0x80000001014097B0;
      if (v18) {
        uint64_t v23 = 0x61646E6F6365732ELL;
      }
      else {
        uint64_t v23 = 0x7972616D6972702ELL;
      }
      if (v18) {
        unint64_t v24 = 0xEA00000000007972;
      }
      else {
        unint64_t v24 = 0xE800000000000000;
      }
      unint64_t v25 = v24;
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 8236;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      uint64_t v33 = v19;
LABEL_12:
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 8236;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      v29._countAndFlagsBits = v15;
      v29._object = v17;
      String.append(_:)(v29);
LABEL_13:
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 41;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      uint64_t v8 = v34[0];
      break;
    case 4u:
      return v8;
    default:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v7, v1);
      v34[0] = 0;
      v34[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v34, ".dateInterval(");
      HIBYTE(v34[1]) = -18;
      sub_1008B63B8(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 41;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      uint64_t v8 = v34[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
  return v8;
}

uint64_t type metadata accessor for TimeBasedKeysCriteria()
{
  uint64_t result = qword_101650900;
  if (!qword_101650900) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008B4F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKeysCriteria();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008B5000()
{
  return _swift_task_switch(sub_1008B501C, 0, 0);
}

uint64_t sub_1008B501C()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 16) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD00000000000003FLL;
  *((void *)v1 + 16) = 0x80000001014099F0;
  return _swift_task_switch(sub_1008B5168, v1, 0);
}

uint64_t sub_1008B5168()
{
  sub_10117F650(*(void *)(v0 + 16));
  return _swift_task_switch(sub_1008B51F8, 0, 0);
}

uint64_t sub_1008B51F8()
{
  type metadata accessor for AnalyticsPublisher();
  v0[3] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = sub_1008B52AC;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_1008B52AC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1008B53C4, 0, 0);
}

uint64_t sub_1008B53C4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1008B5428()
{
  unint64_t result = qword_101650888;
  if (!qword_101650888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650888);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimeBasedKeySequence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008B5548);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedKeySequence()
{
  return &type metadata for TimeBasedKeySequence;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for TimeBasedKeysCriteria(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for DateInterval();
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TimeBasedKeysCriteria(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for TimeBasedKeysCriteria(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1008B5908((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for DateInterval();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1008B5908(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeBasedKeysCriteria();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for DateInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1008B5908((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for DateInterval();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1008B5ADC()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1008B5B84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v56 = a1;
  int v6 = a4 & 1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v61 = (char *)&v52 - v18;
  __chkstk_darwin(v17);
  unsigned __int8 v20 = (char *)&v52 - v19;
  LODWORD(v55) = v6;
  uint64_t v21 = sub_1008B40E4(v6);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v60 = v7;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v22 = sub_1010AAFA8(v64[0]);
  swift_bridgeObjectRelease();
  if (v22 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_1008B63B8((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v23 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v57 = v11;
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  if (v23) {
    uint64_t v25 = a2;
  }
  else {
    uint64_t v25 = a3;
  }
  v24(v61, v25, v10);
  Date.timeIntervalSince(_:)();
  double v27 = v26 / ((double)(unint64_t)v21 * 60.0);
  if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v27 <= -1.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v27 >= 1.84467441e19)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((unint64_t)v27 == -1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v65 = (unint64_t)v27 + 1;
  if (qword_101636DC0 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170E588);
  v24(v16, a2, v10);
  Swift::String v29 = v59;
  v24(v59, a3, v10);
  uint64_t v30 = v58;
  uint64_t v31 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v9, v56, v60);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v64[0] = v56;
    *(_DWORD *)uint64_t v35 = 136447491;
    BOOL v36 = v55 == 0;
    if (v55) {
      uint64_t v37 = 0x61646E6F6365732ELL;
    }
    else {
      uint64_t v37 = 0x7972616D6972702ELL;
    }
    os_log_t v55 = v32;
    if (v36) {
      unint64_t v38 = 0xE800000000000000;
    }
    else {
      unint64_t v38 = 0xEA00000000007972;
    }
    uint64_t v63 = sub_1008FA0F0(v37, v38, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2048;
    swift_beginAccess();
    uint64_t v62 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 22) = 2082;
    sub_1008B63B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v54 = v20;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_1008FA0F0(v39, v40, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v52 = v9;
    int v53 = v34;
    unint64_t v41 = *(void (**)(char *, uint64_t))(v57 + 8);
    v41(v16, v10);
    *(_WORD *)(v35 + 32) = 2082;
    unint64_t v42 = v59;
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_1008FA0F0(v43, v44, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v42, v10);
    *(_WORD *)(v35 + 42) = 2160;
    uint64_t v62 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 52) = 2081;
    sub_1008B63B8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v45 = v52;
    uint64_t v46 = v60;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_1008FA0F0(v47, v48, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v45, v46);
    os_log_t v49 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v53, "Bucket [%{public}s] calculated to ‣%llu baseTime: %{public}s date: %{public}s  beacon: %{private,mask.hash}s.", (uint8_t *)v35, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v41(v61, v10);
    v41(v54, v10);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
    id v50 = *(void (**)(char *, uint64_t))(v57 + 8);
    v50(v29, v10);
    v50(v16, v10);
    v50(v61, v10);
    v50(v20, v10);
  }
  swift_beginAccess();
  return v65;
}

uint64_t sub_1008B63B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008B6400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKeysCriteria();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1008B6464(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001CD44(a1, v13);
  double v14 = 0.0;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 112))(v13, v12)) {
    Date.timeIntervalSince(_:)();
  }
  Date.timeIntervalSince(_:)();
  if (v15 >= 0.0) {
    double v14 = v15;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v16 = sub_1010AAFA8(v27);
  swift_bridgeObjectRelease();
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  if (!is_mul_ok(v16, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_18;
  }
  double v17 = v14 / (double)(60 * v16);
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v17 <= -1.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v17 >= 1.84467441e19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v18 = v26 + (unint64_t)v17;
  if (__CFADD__(v26, (unint64_t)v17))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  Date.addingTimeInterval(_:)();
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  sub_10001CD44(a1, v20);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8) + 32))(v20);
  unint64_t v21 = sub_1008B5B84((uint64_t)v8, (uint64_t)v11, a4, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  unint64_t result = v18 - v21;
  if (v18 < v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__CFADD__(v18, v21))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 + v21 < result)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1008B681C()
{
  if (*((void *)v0 + 6))
  {
    uint64_t v1 = *((void *)v0 + 6);
  }
  else
  {
    uint64_t v2 = v0;
    double v3 = v0[3];
    double v4 = v0[4];
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for XPCScheduler();
    swift_allocObject();
    uint64_t v1 = sub_1006E2AB8(0xD000000000000013, 0x8000000101409B90, (uint64_t)sub_1008B7CF8, v5, v3, v4, 1.0);
    swift_release();
    *((void *)v2 + 6) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1008B690C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1008B6CAC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1008B6964(uint64_t a1)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABCB8(v10);
  double v4 = v3;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 24) = v4 * 60.0;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABCC4(v10);
  double v6 = v5;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 32) = v6 * 60.0;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABCD0(v10);
  double v8 = v7;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 40) = v8 * 60.0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1008B6AD4()
{
  uint64_t v0 = sub_1008B681C();
  sub_1006E216C();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_1016372B8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  double v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_release();
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_10000B4CC();
  *(void *)(v1 + 32) = 0x656863534350583CLL;
  *(void *)(v1 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1008B6CAC()
{
  uint64_t v66 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v84 = *(void *)(v66 - 8);
  uint64_t v1 = __chkstk_darwin(v66);
  uint64_t v67 = (double *)((char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)&v62 - v4;
  uint64_t v6 = __chkstk_darwin(v3);
  unint64_t v65 = (char *)&v62 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v62 - v8;
  uint64_t v80 = (void *)type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v80);
  uint64_t v11 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v78 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  double v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637188 != -1) {
    goto LABEL_48;
  }
  while (1)
  {
    sub_100ECF824(0xD000000000000012, 0x8000000101409AC0, (void *)qword_10170EE68);
    uint64_t v68 = v5;
    uint64_t v69 = v9;
    if (v19) {
      double v20 = v0[5];
    }
    else {
      double v20 = (double)v18;
    }
    static Date.trustedNow.getter((uint64_t)v17);
    static os_log_type_t.info.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    uint64_t v77 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    long long v76 = xmmword_101342130;
    *(_OWORD *)(v21 + 16) = xmmword_101342130;
    *(void *)(v21 + 56) = &type metadata for Double;
    *(void *)(v21 + 64) = &protocol witness table for Double;
    *(double *)(v21 + 32) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v81 = *((void *)v0 + 2);
    uint64_t v22 = sub_100AE35FC();
    __chkstk_darwin(v22);
    *(&v62 - 2) = v17;
    *((double *)&v62 - 1) = v20;
    uint64_t v24 = sub_1000A493C((uint64_t (*)(char *))sub_1008B7B0C, &v62 - 4, v23);
    uint64_t v25 = *(char **)(v24 + 16);
    if (!v25) {
      break;
    }
    uint64_t v62 = v17;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    unint64_t v70 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    uint64_t v26 = v24 + v70;
    uint64_t v84 = *(void *)(v84 + 72);
    uint64_t v75 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v74 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v73 = v86;
    uint64_t v82 = v24;
    swift_bridgeObjectRetain();
    unint64_t v72 = 0x80000001013F1B20;
    unint64_t v71 = 0x80000001013F1AD0;
    uint64_t v27 = v26;
    uint64_t v83 = v25;
    uint64_t v28 = v25;
    do
    {
      static os_log_type_t.default.getter();
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v76;
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v32 = v31;
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = sub_10000B4CC();
      *(void *)(v29 + 32) = v30;
      *(void *)(v29 + 40) = v32;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      os_log_type_t v33 = *(char **)(v81 + 160);
      if (qword_101636940 != -1) {
        swift_once();
      }
      uint64_t v34 = v79;
      uint64_t v35 = sub_100010324(v79, (uint64_t)qword_10170DA70);
      BOOL v36 = v78;
      uint64_t v37 = (*v75)(v78, v35, v34);
      __chkstk_darwin(v37);
      *(&v62 - 4) = v33;
      *(&v62 - 3) = (char *)v27;
      *(&v62 - 2) = v36;
      OS_dispatch_queue.sync<A>(execute:)();
      (*v74)(v36, v34);
      uint64_t v38 = (uint64_t)v80;
      sub_1008B7B30(v27, v11 + *((int *)v80 + 5), type metadata accessor for WildModeAssociationRecord);
      *(unsigned char *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + *(int *)(v38 + 24)) = 66;
      uint64_t v39 = v84;
      if (qword_101637118 != -1) {
        swift_once();
      }
      v88[3] = v38;
      v88[4] = (uint64_t)&off_1015B3E48;
      unint64_t v40 = sub_10001D958(v88);
      sub_1008B7B30(v11, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
      id v41 = objc_allocWithZone((Class)UNUserNotificationCenter);
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v43 = [v41 initWithBundleIdentifier:v42];

      sub_10001D010((uint64_t)v88, (uint64_t)&v87);
      uint64_t v44 = swift_allocObject();
      sub_10001CEB0(&v87, v44 + 16);
      *(void *)(v44 + 56) = v43;
      v86[2] = sub_1008B7BD8;
      v86[3] = v44;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v86[0] = sub_10107F250;
      v86[1] = &unk_1015D9080;
      id v45 = _Block_copy(aBlock);
      id v46 = v43;
      swift_release();
      [v46 getDeliveredNotificationsWithCompletionHandler:v45];
      _Block_release(v45);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v88);
      sub_1008B7BFC(v11, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
      v27 += v39;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    uint64_t v0 = (double *)_swiftEmptyArrayStorage;
    aBlock[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    Swift::String v5 = 0;
    uint64_t v12 = 250;
    uint64_t v9 = (char *)v26;
    uint64_t v80 = _swiftEmptyArrayStorage;
    uint64_t v15 = v66;
    uint64_t v14 = (uint64_t)v65;
    double v17 = v69;
    uint64_t v11 = (uint64_t)v83;
    do
    {
      if ((unint64_t)v5 >= *(void *)(v82 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
      sub_1008B7B30((uint64_t)v9, (uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
      int v48 = v17[*(int *)(v15 + 64)];
      if (v48 == 8 || (v48 & 0xFA) == 0)
      {
        sub_1008B7BFC((uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
        uint64_t v47 = v84;
      }
      else
      {
        sub_1008B7C5C((uint64_t)v17, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7CB0(0, *((void *)v0 + 2) + 1, 1);
        }
        uint64_t v0 = (double *)aBlock[0];
        unint64_t v51 = *(void *)(aBlock[0] + 16);
        unint64_t v50 = *(void *)(aBlock[0] + 24);
        if (v51 >= v50 >> 1)
        {
          sub_1000B7CB0(v50 > 1, v51 + 1, 1);
          uint64_t v0 = (double *)aBlock[0];
        }
        *((void *)v0 + 2) = v51 + 1;
        uint64_t v47 = v84;
        sub_1008B7C5C(v14, (uint64_t)v0 + v70 + v51 * v84);
        double v17 = v69;
        uint64_t v11 = (uint64_t)v83;
      }
      ++v5;
      v9 += v47;
    }
    while ((char *)v11 != v5);
    uint64_t v14 = v82;
    swift_bridgeObjectRelease();
    Swift::String v5 = *(char **)(aBlock[0] + 16);
    swift_release();
    double v17 = 0;
    aBlock[0] = _swiftEmptyArrayStorage;
    uint64_t v12 = 1;
    uint64_t v11 = 379;
    uint64_t v0 = v67;
    uint64_t v9 = v68;
    while ((unint64_t)v17 < *(void *)(v14 + 16))
    {
      sub_1008B7B30(v26, (uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
      unsigned int v52 = v9[*(int *)(v15 + 64)];
      BOOL v53 = v52 > 8;
      int v54 = (1 << v52) & 0x17B;
      if (v53 || v54 == 0)
      {
        sub_1008B7C5C((uint64_t)v9, (uint64_t)v0);
        uint64_t v56 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7CB0(0, v56[2] + 1, 1);
          uint64_t v0 = v67;
        }
        uint64_t v57 = (void *)aBlock[0];
        unint64_t v59 = *(void *)(aBlock[0] + 16);
        unint64_t v58 = *(void *)(aBlock[0] + 24);
        if (v59 >= v58 >> 1)
        {
          sub_1000B7CB0(v58 > 1, v59 + 1, 1);
          uint64_t v0 = v67;
          uint64_t v57 = (void *)aBlock[0];
        }
        v57[2] = v59 + 1;
        uint64_t v80 = v57;
        sub_1008B7C5C((uint64_t)v0, (uint64_t)v57 + v70 + v59 * v84);
        uint64_t v9 = v68;
        uint64_t v14 = v82;
      }
      else
      {
        sub_1008B7BFC((uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
      }
      ++v17;
      v26 += v84;
      if (v83 == v17)
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = *(void *)(aBlock[0] + 16);
        swift_release();
        if (v5) {
          sub_100AA5514();
        }
        uint64_t v14 = v64;
        uint64_t v15 = v63;
        double v17 = v62;
        if (v60) {
          sub_100AA86FC();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_1008B78B8(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10001E2BC(a1 + *(int *)(v12 + 44), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10001E324((uint64_t)v4);
    Date.addingTimeInterval(_:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    uint64_t v9 = v11;
  }
  char v13 = static Date.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v13 & 1;
}

uint64_t sub_1008B7AA8()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WildModeAssociationManager()
{
  return self;
}

uint64_t sub_1008B7B0C(uint64_t a1)
{
  return sub_1008B78B8(a1) & 1;
}

uint64_t sub_1008B7B30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008B7B98()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1008B7BD8(unint64_t a1)
{
  sub_100E04010(a1, v1 + 16, *(void **)(v1 + 56));
}

uint64_t sub_1008B7BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1008B7BF4()
{
  return swift_release();
}

uint64_t sub_1008B7BFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1008B7C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008B7CC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008B7CF8()
{
  return sub_1008B690C();
}

uint64_t *AirPodsLESendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  static AirPodsLESendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsLESendPairingStatusCommandPayload.expectedLength.modify())()
{
  return j__swift_endAccess_0;
}

double AirPodsLESendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1008B7F28(a1, v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1008B7E34@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1008B7F08);
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 != 60) {
        goto LABEL_18;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v13 = (int)v13;
LABEL_12:
          if (v13 != 4) {
            goto LABEL_19;
          }
          *a9 = result;
          a9[1] = a2;
          a9[2] = a3;
          a9[3] = a4;
          a9[4] = a5;
          a9[5] = a6;
          a9[6] = a7;
          a9[7] = a8;
          return result;
        case 2uLL:
          uint64_t v15 = *(void *)(a3 + 16);
          uint64_t v14 = *(void *)(a3 + 24);
          BOOL v12 = __OFSUB__(v14, v15);
          uint64_t v13 = v14 - v15;
          if (!v12) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v13 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v10 = *(void *)(result + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1008B7F28@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v23, v24);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v26 = v10;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v19 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v20 = v11;
    sub_1000BD078((uint64_t)v23, v24);
    uint64_t v21 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v22 = v12;
    uint64_t v17 = v12;
    uint64_t v18 = v21;
    sub_1000361E0(v19, v20);
    sub_1000362FC();
    uint64_t v13 = DataProtocol.intValue.getter();
    sub_100435A9C(v13, v19, v20, &v21);
    sub_10001CFB8(v19, v20);
    sub_1008B7E34(v7, v8, v9, v26, v21, v22, v18, v17, v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v15 = v25[1];
    *a2 = v25[0];
    a2[1] = v15;
    long long v16 = v25[3];
    a2[2] = v25[2];
    a2[3] = v16;
  }
  return result;
}

unint64_t sub_1008B8130(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1008B8160();
  unint64_t result = sub_1008B81B4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008B8160()
{
  unint64_t result = qword_101650A48;
  if (!qword_101650A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650A48);
  }
  return result;
}

unint64_t sub_1008B81B4()
{
  unint64_t result = qword_101650A50;
  if (!qword_101650A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650A50);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsLESendPairingStatusCommandPayload;
}

id sub_1008B8218()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)ACAccountStore) init];
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_1008B8284(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PairingLockCheckEndPoint();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v62 - v9;
  sub_10000588C(&qword_101650B38);
  swift_allocObject();
  uint64_t v74 = Future.init()();
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = 0xD000000000000022;
  *(void *)(v11 + 40) = 0x8000000101409DE0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1003699C4((uint64_t)v10);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v12 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v14 = swift_allocObject();
  sub_1008BA614((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PairingLockCheckEndPoint);
  long long v15 = (void *)sub_1004A37B0((uint64_t)v8, v13, v14);
  sub_1008BA67C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PairingLockCheckEndPoint);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 112);
  unint64_t v18 = *(void *)(a1 + 120);
  unint64_t v60 = *(void *)(a1 + 104);
  uint64_t v59 = *(void *)(a1 + 96);
  long long v57 = *(_OWORD *)(a1 + 128);
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v73 = *(void *)(a1 + 32);
  uint64_t v76 = sub_1010B5CB0(v19, v20, v21, v22, v73, v16, v17, v18, v57, *((unint64_t *)&v57 + 1), v59, v60);
  unint64_t v77 = v23;
  id v24 = sub_1008B8218();
  uint64_t v25 = sub_1004C6DD4();

  if (!v25) {
    goto LABEL_7;
  }
  uint64_t v75 = sub_1004C6EF0();
  uint64_t v27 = v26;

  if (!v27) {
    goto LABEL_7;
  }
  uint64_t v62 = v15;
  uint64_t v28 = Data.hexString.getter();
  uint64_t v71 = v29;
  uint64_t v72 = v28;
  uint64_t v30 = Data.hexString.getter();
  uint64_t v67 = v31;
  uint64_t v68 = v30;
  uint64_t v32 = *(void *)(a1 + 48);
  uint64_t v69 = *(void *)(a1 + 56);
  uint64_t v70 = v32;
  uint64_t v33 = *(void *)(a1 + 64);
  uint64_t v65 = *(void *)(a1 + 72);
  uint64_t v66 = v33;
  unint64_t v35 = *(void *)(a1 + 88);
  uint64_t v63 = *(void *)(a1 + 80);
  uint64_t v34 = v63;
  uint64_t v64 = v27;
  uint64_t v36 = *(void *)(a1 + 144);
  unint64_t v37 = *(void *)(a1 + 152);
  uint64_t v38 = *(void *)(a1 + 160);
  unint64_t v39 = *(void *)(a1 + 168);
  uint64_t v40 = *(void *)(a1 + 176);
  unint64_t v41 = *(void *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v34, v35);
  sub_1000361E0(v36, v37);
  sub_1000361E0(v38, v39);
  sub_1000361E0(v40, v41);
  uint64_t v43 = v76;
  unint64_t v42 = v77;
  sub_100037A38(v76, v77);
  *((void *)&v61 + 1) = v64;
  *(void *)&long long v61 = v75;
  *((void *)&v58 + 1) = v41;
  *((void *)&v56 + 1) = v39;
  *(void *)&long long v58 = v40;
  *((void *)&v55 + 1) = v37;
  *(void *)&long long v56 = v38;
  *((void *)&v54 + 1) = v35;
  *(void *)&long long v55 = v36;
  *(void *)&long long v54 = v63;
  *((void *)&v53 + 1) = v65;
  *(void *)&long long v53 = v66;
  sub_100BC980C(v72, v71, v68, v67, v73, v16, v70, v69, v53, v54, v55, v56, v58, v43, v42, v61);
  if (v44)
  {
    uint64_t v47 = v44;
    uint64_t v48 = v45;
    unint64_t v49 = v46;
    sub_1004A9AB4(v44, v45, v46, 0, v62);
    uint64_t v50 = v74;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v47, v48, v49);
    sub_100037A24(v76, v77);
  }
  else
  {
LABEL_7:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v78 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v51 = v79;
    uint64_t v50 = v74;
    Future.finish(error:)();
    sub_100037A24(v76, v77);
  }
  swift_release();
  return v50;
}

void sub_1008B88FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for JSONDecoder.DateDecodingStrategy();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    uint64_t v35 = a2;
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    long long v33 = xmmword_101342130;
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    type metadata accessor for FMNServerInteractionController.FMNResponseFields();
    sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:), v3);
    dispatch thunk of JSONDecoder.dateDecodingStrategy.setter();
    uint64_t v11 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v13 = v12;
    sub_1008BA708();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v11, v13);
    uint64_t v29 = v37;
    unint64_t v30 = v38;
    uint64_t v31 = v39;
    unint64_t v32 = v40;
    Future.finish(result:)();
    swift_release();
    sub_100037A24(v29, v30);
    sub_100037A24(v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    if (*(void *)(v14 + 16) && (uint64_t v15 = sub_100723FF4(0xD000000000000016, 0x8000000101409D10), (v16 & 1) != 0))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
      *(void *)(v20 + 56) = &type metadata for String;
      unint64_t v21 = sub_10000B4CC();
      *(void *)(v20 + 64) = v21;
      *(void *)(v20 + 32) = v19;
      *(void *)(v20 + 40) = v18;
      type metadata accessor for FMNServerInteractionController.FMNResponseFields();
      sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v20 + 96) = &type metadata for String;
      *(void *)(v20 + 104) = v21;
      *(void *)(v20 + 72) = v22;
      *(void *)(v20 + 80) = v23;
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_101342130;
      type metadata accessor for FMNServerInteractionController.FMNResponseFields();
      sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_10000B4CC();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
    }
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v41 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v28 = v36;
    Future.finish(error:)();
  }
}

void sub_1008B8FF8(void *a1)
{
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  uint64_t v6 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Future.finish(error:)();
}

void sub_1008B919C()
{
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v0 = swift_allocObject();
    *(_OWORD *)(v0 + 16) = xmmword_101342130;
    type metadata accessor for FMNServerInteractionController.FMNResponseFields();
    sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v3 = v2;
    *(void *)(v0 + 56) = &type metadata for String;
    unint64_t v4 = sub_10000B4CC();
    *(void *)(v0 + 64) = v4;
    *(void *)(v0 + 32) = v1;
    *(void *)(v0 + 40) = v3;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v7 = v6;
    sub_1008BA5C0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v5, v7);
    static os_log_type_t.default.getter();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101342130;
    FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = v4;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    Future.finish(result:)();
    swift_release();
  }
  else
  {
    uint64_t v8 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    if (*(void *)(v8 + 16) && (uint64_t v9 = sub_100723FF4(0xD000000000000016, 0x8000000101409D10), (v10 & 1) != 0))
    {
      uint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_10000B4CC();
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 32) = v12;
      *(void *)(v14 + 40) = v13;
      type metadata accessor for FMNServerInteractionController.FMNResponseFields();
      sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v15;
      *(void *)(v14 + 72) = v16;
      *(void *)(v14 + 80) = v17;
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_101342130;
      type metadata accessor for FMNServerInteractionController.FMNResponseFields();
      sub_1008BA578((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v21 = v20;
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_10000B4CC();
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = v21;
    }
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
}

uint64_t sub_1008B9824()
{
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v1 = String.init<A>(describing:)();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return Future.finish(error:)();
}

void sub_1008B994C()
{
  uint64_t v0 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  static os_log_type_t.default.getter();
  if (v0 == 200)
  {
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    Future.finish(result:)();
  }
  else
  {
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    uint64_t v5 = (void *)FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_10000B4CC();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
}

uint64_t sub_1008B9B64()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PairingValidator()
{
  return self;
}

uint64_t sub_1008B9BC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UnpairEndPoint();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  char v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v32[-v11];
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v13);
  unint64_t v15 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  sub_1003C5E38(a1, (uint64_t)v15);
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10000B4CC();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v20 = Future.init()();
  sub_1008B9FFC(a2);
  sub_1010B5140(a2);
  if (v21)
  {
    uint64_t v24 = v21;
    uint64_t v25 = v22;
    unint64_t v26 = v23;
    sub_100F35AB4((uint64_t)v12);
    type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject();
    uint64_t v27 = type metadata accessor for FMNMockingPreferences();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 1, 1, v27);
    uint64_t v28 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
    type metadata accessor for ServerInteractionController(0);
    uint64_t v29 = swift_allocObject();
    sub_1008BA614((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UnpairEndPoint);
    unint64_t v30 = (void *)sub_1004A3398((uint64_t)v10, v28, v29);
    sub_1008BA67C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for UnpairEndPoint);
    swift_bridgeObjectRetain();
    sub_1000361E0(v25, v26);
    sub_1004A97B8(v24, v25, v26, 0, v30);
    swift_release();
    sub_1001D7860(v24, v25, v26);
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v24, v25, v26);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    v32[15] = 0;
    Future.finish(result:)();
  }
  return v20;
}

uint64_t *sub_1008B9FFC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1008BA050()
{
  return sub_1008B9824();
}

void sub_1008BA058()
{
}

uint64_t sub_1008BA060(void *a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PairingLockAckEndPoint();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v43 - v9;
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = 0xD00000000000001BLL;
  *(void *)(v11 + 40) = 0x8000000101409CF0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101650B28);
  swift_allocObject();
  uint64_t v54 = Future.init()();
  sub_1004B9034((uint64_t)v10);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v12 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v14 = swift_allocObject();
  sub_1008BA614((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PairingLockAckEndPoint);
  long long v53 = (void *)sub_1004A7100((uint64_t)v8, v13, v14);
  sub_1008BA67C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PairingLockAckEndPoint);
  uint64_t v15 = Data.hexString.getter();
  uint64_t v51 = v16;
  uint64_t v52 = v15;
  uint64_t v17 = Data.hexString.getter();
  uint64_t v49 = v18;
  uint64_t v50 = v17;
  uint64_t v20 = a1[4];
  uint64_t v19 = a1[5];
  uint64_t v47 = a1[6];
  uint64_t v48 = v20;
  uint64_t v46 = a1[7];
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[9];
  uint64_t v44 = v19;
  uint64_t v45 = v21;
  uint64_t v23 = a1[10];
  unint64_t v24 = a1[11];
  uint64_t v25 = a1[12];
  unint64_t v26 = a1[13];
  uint64_t v27 = a1[14];
  unint64_t v28 = a1[15];
  uint64_t v30 = a1[16];
  unint64_t v29 = a1[17];
  uint64_t v31 = a1[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, v24);
  sub_1000361E0(v25, v26);
  sub_1000361E0(v27, v28);
  sub_1000361E0(v30, v29);
  *((void *)&v42 + 1) = v26;
  *(void *)&long long v42 = v25;
  *((void *)&v41 + 1) = v22;
  *(void *)&long long v41 = v45;
  sub_1009F1B34(v52, v51, v50, v49, v48, v44, v47, v46, v41, v23, v24, v42, v27, v28, v30, v29, v31);
  if (v32)
  {
    uint64_t v35 = v32;
    uint64_t v36 = v33;
    unint64_t v37 = v34;
    sub_1004AC180(v32, v33, v34, 0, v53);
    uint64_t v38 = v54;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v35, v36, v37);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v55 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008BA578(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v39 = v56;
    uint64_t v38 = v54;
    Future.finish(error:)();
  }
  swift_release();
  return v38;
}

void sub_1008BA54C(void *a1)
{
}

void sub_1008BA570()
{
}

uint64_t sub_1008BA578(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1008BA5C0()
{
  unint64_t result = qword_101650B30;
  if (!qword_101650B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B30);
  }
  return result;
}

uint64_t sub_1008BA614(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008BA67C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1008BA6DC(void *a1)
{
}

void sub_1008BA700(uint64_t a1)
{
  sub_1008B88FC(a1, v1);
}

unint64_t sub_1008BA708()
{
  unint64_t result = qword_101650B40;
  if (!qword_101650B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B40);
  }
  return result;
}

uint64_t destroy for PairingCheckData(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  uint64_t v2 = a1[22];
  unint64_t v3 = a1[23];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for PairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  unint64_t v11 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *(void *)(a2 + 96);
  unint64_t v13 = *(void *)(a2 + 104);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 112);
  unint64_t v15 = *(void *)(a2 + 120);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 112) = v14;
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  unint64_t v17 = *(void *)(a2 + 136);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  uint64_t v18 = *(void *)(a2 + 144);
  unint64_t v19 = *(void *)(a2 + 152);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 144) = v18;
  *(void *)(a1 + 152) = v19;
  uint64_t v20 = *(void *)(a2 + 160);
  unint64_t v21 = *(void *)(a2 + 168);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 168) = v21;
  uint64_t v23 = *(void *)(a2 + 176);
  unint64_t v22 = *(void *)(a2 + 184);
  sub_1000361E0(v23, v22);
  *(void *)(a1 + 176) = v23;
  *(void *)(a1 + 184) = v22;
  return a1;
}

uint64_t *assignWithCopy for PairingCheckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[10];
  unint64_t v13 = a2[11];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  a1[10] = v12;
  a1[11] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[12];
  unint64_t v19 = a1[13];
  a1[12] = v16;
  a1[13] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[14];
  unint64_t v21 = a2[15];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[14];
  unint64_t v23 = a1[15];
  a1[14] = v20;
  a1[15] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[16];
  unint64_t v25 = a2[17];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[16];
  unint64_t v27 = a1[17];
  a1[16] = v24;
  a1[17] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[18];
  unint64_t v29 = a2[19];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[18];
  unint64_t v31 = a1[19];
  a1[18] = v28;
  a1[19] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[20];
  unint64_t v33 = a2[21];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[20];
  unint64_t v35 = a1[21];
  a1[20] = v32;
  a1[21] = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v37 = a2[22];
  unint64_t v36 = a2[23];
  sub_1000361E0(v37, v36);
  uint64_t v38 = a1[22];
  unint64_t v39 = a1[23];
  a1[22] = v37;
  a1[23] = v36;
  sub_10001CFB8(v38, v39);
  return a1;
}

uint64_t assignWithTake for PairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 96);
  unint64_t v13 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 112);
  unint64_t v15 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 144);
  unint64_t v19 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 160);
  unint64_t v21 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 176);
  unint64_t v23 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingCheckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingCheckData()
{
  return &type metadata for PairingCheckData;
}

uint64_t destroy for PairingAckData(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_10001CFB8(*(void *)(a1 + 96), *(void *)(a1 + 104));
  sub_10001CFB8(*(void *)(a1 + 112), *(void *)(a1 + 120));
  sub_10001CFB8(*(void *)(a1 + 128), *(void *)(a1 + 136));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingAckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  unint64_t v11 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *(void *)(a2 + 96);
  unint64_t v13 = *(void *)(a2 + 104);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 112);
  unint64_t v15 = *(void *)(a2 + 120);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 112) = v14;
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  unint64_t v17 = *(void *)(a2 + 136);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PairingAckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[10];
  unint64_t v13 = a2[11];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  a1[10] = v12;
  a1[11] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[12];
  unint64_t v19 = a1[13];
  a1[12] = v16;
  a1[13] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[14];
  unint64_t v21 = a2[15];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[14];
  unint64_t v23 = a1[15];
  a1[14] = v20;
  a1[15] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[16];
  unint64_t v25 = a2[17];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[16];
  unint64_t v27 = a1[17];
  a1[16] = v24;
  a1[17] = v25;
  sub_10001CFB8(v26, v27);
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PairingAckData(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PairingAckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 96);
  unint64_t v13 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 112);
  unint64_t v15 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v16, v17);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingAckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingAckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingAckData()
{
  return &type metadata for PairingAckData;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1008BB068()
{
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 44;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
}

uint64_t sub_1008BB120()
{
  uint64_t result = *v0;
  sub_1008BB068();
  return result;
}

uint64_t sub_1008BB12C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1008BB640();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

double sub_1008BB158@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

Swift::Int sub_1008BB164()
{
  return Hasher._finalize()();
}

uint64_t sub_1008BB1E0()
{
  sub_1008BB068();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1008BB238()
{
  return Hasher._finalize()();
}

uint64_t sub_1008BB2B0(uint64_t a1)
{
  unint64_t v2 = sub_1008BB900();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008BB2EC(uint64_t a1)
{
  unint64_t v2 = sub_1008BB900();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008BB328(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  sub_1008BB068();
  uint64_t v5 = v4;
  sub_1008BB068();
  if (v3 == v2 && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1008BB3D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1008BB954(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1008BB408(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1008BB068();
  sub_1000BD078((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
}

uint64_t sub_1008BB4D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1008BB640();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_1008BB508@<X0>(void *a1@<X8>)
{
  uint64_t result = *v1;
  sub_1008BB068();
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1008BB53C()
{
  unint64_t result = qword_101650B48;
  if (!qword_101650B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B48);
  }
  return result;
}

unint64_t sub_1008BB594()
{
  unint64_t result = qword_101650B50;
  if (!qword_101650B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B50);
  }
  return result;
}

unint64_t sub_1008BB5EC()
{
  unint64_t result = qword_101650B58;
  if (!qword_101650B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B58);
  }
  return result;
}

uint64_t sub_1008BB640()
{
  uint64_t v0 = type metadata accessor for NSScanner.NumberRepresentation();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)NSScanner);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithString:v9];

  static CharacterSet.letters.getter();
  uint64_t v11 = NSScanner.scanCharacters(from:)();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v13)
  {
    uint64_t v26 = v11;
    uint64_t v14 = enum case for NSScanner.NumberRepresentation.decimal(_:);
    unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
    v15(v3, enum case for NSScanner.NumberRepresentation.decimal(_:), v0);
    uint64_t v25 = NSScanner.scanInt(representation:)();
    char v17 = v16;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v1 + 8);
    v18(v3, v0);
    if ((v17 & 1) != 0
      || (unint64_t v23 = v15,
          uint64_t v24 = v18,
          v19._countAndFlagsBits = 44,
          v19._object = (void *)0xE100000000000000,
          !(unint64_t)NSScanner.scanString(_:)(v19).value._object))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v23(v3, v14, v0);
      NSScanner.scanInt(representation:)();
      char v21 = v20;

      v24(v3, v0);
      if ((v21 & 1) == 0) {
        return v26;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  else
  {

    return 0;
  }
}

unint64_t sub_1008BB900()
{
  unint64_t result = qword_10165F430;
  if (!qword_10165F430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F430);
  }
  return result;
}

uint64_t sub_1008BB954(void *a1)
{
  uint64_t v3 = a1[3];
  sub_10001CD44(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    uint64_t v3 = v12;
    sub_10001CD44(v11, v12);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1008BB640();
    if (v9)
    {
      uint64_t v3 = v8;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v3;
    }
    sub_1008BBA90();
    swift_allocError();
    *id v10 = v5;
    v10[1] = v7;
    swift_willThrow();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_1008BBA90()
{
  unint64_t result = qword_101650B60;
  if (!qword_101650B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B60);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType.CodingError()
{
  return &type metadata for FeatureSupportMatrixProductType.CodingError;
}

uint64_t initializeWithCopy for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FeatureSupportMatrixProductType(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType()
{
  return &type metadata for FeatureSupportMatrixProductType;
}

uint64_t sub_1008BBBE0(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t My = type metadata accessor for Feature.FindMy();
  v14[3] = My;
  v14[4] = sub_10001E264();
  uint64_t v8 = sub_10001D958(v14);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v8, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v14);
  if (My)
  {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 64));
    sub_10033E2F8(a1, (uint64_t)v6);
    if (v9 == 4)
    {
      sub_10033E35C((uint64_t)v6);
    }
    else
    {
      int v11 = v6[*(int *)(v4 + 64)];
      sub_10033E35C((uint64_t)v6);
      if (v11 != 1)
      {
        char v10 = 1;
        return v10 & 1;
      }
    }
    char v10 = a2 ^ 1;
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1008BBD30(void *a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10001CD44(a1, v9);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10))
  {
    sub_10001D010((uint64_t)a1, (uint64_t)v16);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    char v11 = swift_dynamicCast();
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (v11)
    {
      v12(v4, 0, 1, v5);
      sub_10055ABB0((uint64_t)v4, (uint64_t)v8);
      char v13 = sub_1008BBBE0((uint64_t)v8, 1);
      sub_10033E35C((uint64_t)v8);
    }
    else
    {
      char v13 = 1;
      v12(v4, 1, 1, v5);
      sub_1008BBF14((uint64_t)v4);
    }
  }
  else
  {
    char v13 = 1;
  }
  return v13 & 1;
}

uint64_t sub_1008BBF14(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *SendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.getter()
{
  return static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  static SendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static SendPairingStatusCommandPayload.expectedLength.modify())()
{
  return j__swift_endAccess_0;
}

double SendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1008BC200(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1008BC0A8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_21;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 60) {
        goto LABEL_26;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_23;
          }
          uint64_t v11 = (int)v11;
LABEL_12:
          if (v11 != 4) {
            goto LABEL_27;
          }
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(a3 + 16);
          uint64_t v12 = *(void *)(a3 + 24);
          BOOL v10 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_24;
        case 3uLL:
          goto LABEL_27;
        default:
          uint64_t v11 = BYTE6(a4);
          goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_22;
    case 3uLL:
      goto LABEL_26;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
  switch(a6 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(a5) - a5;
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v14 = (int)v14;
LABEL_17:
      if (v14 != 1286)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x1008BC1D0);
      }
      *a7 = result;
      a7[1] = a2;
      a7[2] = a3;
      a7[3] = a4;
      a7[4] = a5;
      a7[5] = a6;
      return result;
    case 2uLL:
      uint64_t v16 = *(void *)(a5 + 16);
      uint64_t v15 = *(void *)(a5 + 24);
      BOOL v10 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_20;
    default:
      goto LABEL_25;
  }
}

uint64_t sub_1008BC200@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v15, v16);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v18 = v10;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_1008BC0A8(v7, v8, v9, v18, v11, v12, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v14 = v17[1];
    *a2 = v17[0];
    a2[1] = v14;
    a2[2] = v17[2];
  }
  return result;
}

unint64_t sub_1008BC380(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1008BC3B0();
  unint64_t result = sub_1008BC404();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008BC3B0()
{
  unint64_t result = qword_101650B70;
  if (!qword_101650B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B70);
  }
  return result;
}

unint64_t sub_1008BC404()
{
  unint64_t result = qword_101650B78;
  if (!qword_101650B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650B78);
  }
  return result;
}

ValueMetadata *type metadata accessor for SendPairingStatusCommandPayload()
{
  return &type metadata for SendPairingStatusCommandPayload;
}

uint64_t sub_1008BC468()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1008BC528()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170E5A0 = result;
  return result;
}

uint64_t sub_1008BC584(uint64_t a1)
{
  int v10 = *(_DWORD *)(v1 + *(int *)(a1 + 36));
  uint64_t v3 = sub_1008857C4((uint64_t)&v10, (uint64_t)v11);
  unint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
  unint64_t v8 = v7;
  v11[0] = v6;
  v11[1] = v7;
  sub_1000361E0(v6, v7);
  sub_1000361E0(v3, v5);
  sub_100A42CBC(v3, v5);
  sub_10001CFB8(v3, v5);
  sub_10001CFB8(v6, v8);
  sub_10001CFB8(v3, v5);
  return v11[0];
}

uint64_t sub_1008BC678@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v59 = a5;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  long long v58 = (char *)&v51 - v13;
  uint64_t v56 = *(void *)(a3 - 8);
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v57 = a2 >> 62;
  sub_1000361E0(a1, a2);
  sub_100886210(4, a1, a2, (uint64_t *)&v62);
  unint64_t v15 = *((void *)&v62 + 1);
  uint64_t v16 = v62;
  switch(*((void *)&v62 + 1) >> 62)
  {
    case 1:
      uint64_t v53 = v5;
      uint64_t v54 = a4;
      uint64_t v18 = ((uint64_t)v62 >> 32) - (int)v62;
      if ((uint64_t)v62 >> 32 < (int)v62) {
        goto LABEL_45;
      }
      uint64_t v51 = v11;
      uint64_t v52 = v10;
      sub_1000361E0(v62, *((unint64_t *)&v62 + 1));
      Swift::String v19 = (_DWORD *)__DataStorage._bytes.getter();
      if (!v19) {
        goto LABEL_7;
      }
      uint64_t v20 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v16, v20)) {
        goto LABEL_47;
      }
      Swift::String v19 = (_DWORD *)((char *)v19 + (int)v16 - v20);
LABEL_7:
      uint64_t v21 = v53;
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v18) {
        uint64_t v23 = (v16 >> 32) - (int)v16;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = (char *)v19 + v23;
      if (v19) {
        uint64_t v25 = (uint64_t)v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1008BCD04(v19, v25, &v61);
      sub_10001CFB8(v16, v15);
      if (!v21) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 2:
      uint64_t v52 = v10;
      uint64_t v53 = v5;
      uint64_t v51 = v11;
      uint64_t v54 = a4;
      uint64_t v27 = *(void *)(v62 + 16);
      uint64_t v26 = *(void *)(v62 + 24);
      swift_retain();
      swift_retain();
      uint64_t v28 = (_DWORD *)__DataStorage._bytes.getter();
      if (!v28) {
        goto LABEL_18;
      }
      uint64_t v29 = __DataStorage._offset.getter();
      if (__OFSUB__(v27, v29)) {
        goto LABEL_48;
      }
      uint64_t v28 = (_DWORD *)((char *)v28 + v27 - v29);
LABEL_18:
      BOOL v30 = __OFSUB__(v26, v27);
      uint64_t v31 = v26 - v27;
      if (v30) {
        goto LABEL_46;
      }
      uint64_t v32 = __DataStorage._length.getter();
      if (v32 >= v31) {
        uint64_t v33 = v31;
      }
      else {
        uint64_t v33 = v32;
      }
      uint64_t v34 = (char *)v28 + v33;
      if (v28) {
        uint64_t v35 = (uint64_t)v34;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v36 = v53;
      sub_1008BCD04(v28, v35, &v61);
      if (v36)
      {
        swift_release();
        swift_release();
LABEL_29:
        sub_10001CFB8(a1, a2);
        uint64_t v37 = v16;
        unint64_t v38 = v15;
        return sub_10001CFB8(v37, v38);
      }
      else
      {
        swift_release();
        swift_release();
LABEL_32:
        sub_10001CFB8(v16, v15);
        int v39 = v61;
LABEL_33:
        uint64_t v40 = type metadata accessor for KeyIndexMapGenerator.Record();
        long long v42 = v58;
        uint64_t v41 = v59;
        *(_DWORD *)(v59 + *(int *)(v40 + 36)) = v39;
        uint64_t v43 = 0;
        switch((int)v57)
        {
          case 1:
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_49;
            }
            uint64_t v43 = HIDWORD(a1) - (int)a1;
LABEL_38:
            sub_1000361E0(a1, a2);
LABEL_39:
            if (__OFSUB__(v43, 4))
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
            }
            sub_100435A9C(v43 - 4, a1, a2, (uint64_t *)&v62);
            long long v61 = v62;
            dispatch thunk of RawRepresentable.init(rawValue:)();
            uint64_t v46 = v56;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v42, 1, a3) == 1)
            {
              (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
              type metadata accessor for KeyIndexMapGenerator.Error();
              swift_getWitnessTable();
              swift_allocError();
              *(_DWORD *)uint64_t v47 = 1;
              *(unsigned char *)(v47 + 4) = 2;
              swift_willThrow();
              uint64_t v37 = a1;
              unint64_t v38 = a2;
              return sub_10001CFB8(v37, v38);
            }
            sub_10001CFB8(a1, a2);
            uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
            uint64_t v50 = v55;
            v49(v55, v42, a3);
            uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v49)(v41, v50, a3);
            break;
          case 2:
            uint64_t v45 = *(void *)(a1 + 16);
            uint64_t v44 = *(void *)(a1 + 24);
            uint64_t v43 = v44 - v45;
            if (!__OFSUB__(v44, v45)) {
              goto LABEL_38;
            }
            goto LABEL_50;
          case 3:
            goto LABEL_39;
          default:
            uint64_t v43 = BYTE6(a2);
            goto LABEL_39;
        }
      }
      return result;
    case 3:
      *(void *)((char *)&v61 + 6) = 0;
      *(void *)&long long v61 = 0;
      char v17 = (char *)&v61;
      goto LABEL_28;
    default:
      LODWORD(v61) = v62;
      WORD2(v61) = WORD2(v62);
      *(void *)((char *)&v61 + 6) = *(void *)((char *)&v62 + 6);
      char v17 = (char *)&v61 + BYTE14(v62);
LABEL_28:
      sub_1008BCD04(&v61, (uint64_t)v17, &v60);
      if (v5) {
        goto LABEL_29;
      }
      uint64_t v51 = v11;
      uint64_t v52 = v10;
      sub_10001CFB8(v16, v15);
      int v39 = v60;
      goto LABEL_33;
  }
}

uint64_t sub_1008BCC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v7 = v6(a3, a4);
  unint64_t v9 = v8;
  uint64_t v10 = v6(v5, a4);
  unint64_t v12 = v11;
  LOBYTE(v5) = static Data.< infix(_:_:)();
  sub_10001CFB8(v10, v12);
  sub_10001CFB8(v7, v9);
  return v5 & 1;
}

_DWORD *sub_1008BCD04@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if (result && (unint64_t)(a2 - (void)result + 3) >= 7)
  {
    *a3 = *result;
  }
  else
  {
    type metadata accessor for KeyIndexMapGenerator.Error();
    swift_getWitnessTable();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 1;
    *(unsigned char *)(v3 + 4) = 2;
    return (_DWORD *)swift_willThrow();
  }
  return result;
}

void sub_1008BCDA8(uint64_t a1, uint64_t a2)
{
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_DWORD *)(v2 + *(int *)(a2 + 36)));
}

BOOL sub_1008BCDF4(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for KeyIndexMapGenerator.Record();
  return *(_DWORD *)(a1 + *(int *)(v4 + 36)) == *(_DWORD *)(a2 + *(int *)(v4 + 36));
}

Swift::Int sub_1008BCE64(uint64_t a1)
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_DWORD *)(v1 + *(int *)(a1 + 36)));
  return Hasher._finalize()();
}

uint64_t sub_1008BCEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008BCC48(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_1008BCEDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1008BC678(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

Swift::Int sub_1008BCF04(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_1008BCDA8((uint64_t)v4, a2);
  return Hasher._finalize()();
}

BOOL sub_1008BCF48(uint64_t a1, uint64_t a2)
{
  return sub_1008BCDF4(a1, a2);
}

uint64_t sub_1008BCF54()
{
  uint64_t v1 = v0 + qword_101650B80;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1008BCFC8()
{
  sub_1008BCF54();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyIndexMapGenerator()
{
  return sub_1000103A0();
}

uint64_t sub_1008BD038()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1008BD0D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3;
  int v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t sub_1008BD1CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1008BD1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 48) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 48) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1008BD274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 40) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 40) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1008BD2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 32) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 32) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1008BD36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 24) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 24) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1008BD3E8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFFC;
    if ((v6 & 0xFFFFFFFC) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1008BD4FCLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_1008BD510(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1008BD6BCLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Record()
{
  return sub_1000103A0();
}

uint64_t sub_1008BD6FC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Error()
{
  return sub_1000103A0();
}

uint64_t initializeBufferWithCopyOfBuffer for DatabaseError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t sub_1008BD744(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1008BD78C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1008BD7D0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1008BD7E8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for LocalFindableAccessoryFirmwareVersionNumber(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Header()
{
  return sub_1000103A0();
}

uint64_t sub_1008BD824(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  size_t v8 = (char *)&v11 - v7;
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)();
  unsigned int v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  if (a1 != 3 && a1 != 2 && a1 != 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  URL.appendingPathComponent(_:)();
  return ((uint64_t (*)(char *, uint64_t))v9)(v8, v2);
}

uint64_t sub_1008BDA60(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v7);
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1 == 3)
  {
    uint64_t v8 = 0x646572616853;
    unint64_t v9 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a1 == 2)
  {
    uint64_t v8 = 0x65746176697250;
LABEL_10:
    unint64_t v9 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a1 != 1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v8 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  uint64_t v8 = 0x63696C627550;
  unint64_t v9 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v8);
  id v10 = [a2 ownerName];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  URL.appendPathComponent(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = [a2 zoneName];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v21._countAndFlagsBits = v16;
  v21._object = v18;
  v19._countAndFlagsBits = 0x6E656B6F742ELL;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  URL.appendPathComponent(_:)(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1008BDCF8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v8);
  id v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v25 = 0;
  LODWORD(v6) = [v7 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:0 error:&v25];

  id v11 = v25;
  if (!v6)
  {
    uint64_t v23 = v11;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  int v12 = self;
  id v25 = 0;
  id v13 = [v12 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v25];
  id v14 = v25;
  if (!v13)
  {
    uint64_t v24 = v14;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  uint64_t v18 = sub_1010EB9E4(v15, v17, 0);
  if (!v1)
  {
    uint64_t v20 = (uint64_t)v18;
    unint64_t v21 = v19;
    Data.write(to:excludeFromBackup:options:)();
    sub_10001CFB8(v20, v21);
  }
  return sub_10001CFB8(v15, v17);
}

id sub_1008BDF6C()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v7 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v7];

  if (v4) {
    return v7;
  }
  id v6 = v7;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_1008BE054()
{
  uint64_t v0 = type metadata accessor for CryptoError();
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  id v3 = [self defaultManager];
  URL.path.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v5 = [v3 fileExistsAtPath:v4];

  uint64_t result = 0;
  if (v5)
  {
    uint64_t v7 = Data.init(contentsOf:options:)();
    unint64_t v9 = v8;
    uint64_t v10 = sub_1010EBE40();
    unint64_t v14 = v11;
    uint64_t v12 = v10;
    sub_10001D4B0(0, &qword_101650DB8);
    sub_10000588C(&qword_101650DC0);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    *(void *)(v13 + 32) = sub_10001D4B0(0, &qword_101650DC8);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v7, v9);
    swift_bridgeObjectRelease();
    if (v16[3])
    {
      if (swift_dynamicCast()) {
        return v15;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_100498978((uint64_t)v16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1008BE548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocationFetcher();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v3 + 16);
  sub_1008BEF08(v3, (uint64_t)v14);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  sub_1008BF0D8((uint64_t)v14, v17 + v15);
  *(void *)(v17 + v16) = a1;
  uint64_t v18 = (void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = v23;
  void *v18 = v22;
  v18[1] = v19;
  aBlock[4] = sub_1008BF13C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9710;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1008BEEB0();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
  return swift_release();
}

uint64_t sub_1008BE87C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() / 96;
}

uint64_t sub_1008BE8BC()
{
  return *(void *)v0;
}

uint64_t sub_1008BE8C4()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1008BE8CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1008BE8D4()
{
  return sub_100474850() & 1;
}

uint64_t sub_1008BE924()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1008BE964()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_1008BE96C()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_1008BE978()
{
  return sub_10047495C();
}

uint64_t sub_1008BE9C4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_1005DF650(a2, a1, a3, a4);

  return swift_release();
}

uint64_t sub_1008BEA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v23 = a3;
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  unint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  v15[2] = v21;
  v15[3] = v17;
  v15[4] = v16;
  aBlock[4] = sub_1008BEE68;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D96C0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1008BEEB0();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
  return swift_release();
}

uint64_t sub_1008BED78()
{
  return -1;
}

uint64_t sub_1008BED80()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return 2;
}

uint64_t sub_1008BEE14()
{
  return 0;
}

uint64_t sub_1008BEE28()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1008BEE68()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1008BEE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1008BEEA8()
{
  return swift_release();
}

unint64_t sub_1008BEEB0()
{
  unint64_t result = qword_10163B7E0;
  if (!qword_10163B7E0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B7E0);
  }
  return result;
}

uint64_t sub_1008BEF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008BEF6C()
{
  id v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_1008BF0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008BF13C()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (void *)(v0 + v2);
  unint64_t v5 = *(void **)(v0 + v3);
  uint64_t v6 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_retain();
  sub_1005DF650(v5, v4, v7, v8);

  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for DiskFetchPolicy(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1008BF2A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiskFetchPolicy()
{
  return &type metadata for DiskFetchPolicy;
}

uint64_t _s13DefaultPolicyVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s13DefaultPolicyVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13DefaultPolicyVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

__n128 _s13DefaultPolicyVwtk(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s13DefaultPolicyVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t _s13DefaultPolicyVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s13DefaultPolicyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s13DefaultPolicyVMa()
{
  return &_s13DefaultPolicyVN;
}

unint64_t sub_1008BF5B8()
{
  unint64_t result = qword_101650DD0;
  if (!qword_101650DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650DD0);
  }
  return result;
}

unint64_t sub_1008BF60C(uint64_t a1)
{
  unint64_t result = sub_1008BF634();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1008BF634()
{
  unint64_t result = qword_101650DD8;
  if (!qword_101650DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650DD8);
  }
  return result;
}

unint64_t sub_1008BF688(uint64_t a1)
{
  unint64_t result = sub_1008BF6B0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1008BF6B0()
{
  unint64_t result = qword_101650DE0;
  if (!qword_101650DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101650DE0);
  }
  return result;
}

uint64_t sub_1008BF70C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A1534(*(void *)(v0 + 80));
  sub_1000A1534(*(void *)(v0 + 96));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FirmwareUpdateAlert()
{
  return self;
}

uint64_t destroy for FirmwareUpdateAlertService(uint64_t a1)
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for FirmwareUpdateAlertService(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateAlertService()
{
  return &type metadata for FirmwareUpdateAlertService;
}

uint64_t sub_1008BF9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  v3[7] = *(void *)(v6 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1008BFA88, a3, 0);
}

uint64_t sub_1008BFA88()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100270168, 0, 0);
}

void sub_1008BFB78(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
}

uint64_t sub_1008BFB9C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008BFC68(uint64_t result, char a2)
{
  switch((char)result)
  {
    case 1:
    case 4:
      if (a2) {
        unint64_t result = 2;
      }
      else {
        unint64_t result = 1;
      }
      break;
    case 2:
      unint64_t result = 0;
      break;
    case 3:
      return result;
    default:
      type metadata accessor for SPBeaconSharingError(0);
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1008BFD30();
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t result = swift_willThrow();
      break;
  }
  return result;
}

unint64_t sub_1008BFD30()
{
  unint64_t result = qword_1016385F8;
  if (!qword_1016385F8)
  {
    type metadata accessor for SPBeaconSharingError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016385F8);
  }
  return result;
}

uint64_t sub_1008BFD88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v28 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  unint64_t v14 = v25;
  v23[1] = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v16 + ((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D496C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9BB0;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain();
  uint64_t v19 = v24;
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v20 = v28;
  uint64_t v21 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  swift_release();
  return v13;
}

uint64_t sub_1008C0228(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  *(void *)(v15 + ((v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D48D4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9AE8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v18 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v18);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  swift_release();
  return v13;
}

uint64_t sub_1008C065C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v0;
  aBlock[4] = sub_1008D4D84;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA010;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v0;
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v12[0]);
  return swift_release();
}

uint64_t sub_1008C097C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v28 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_1016511B8);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  unint64_t v14 = v25;
  v23[1] = *(void *)&v25[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v16 + ((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D49D8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9CA0;
  id v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain();
  uint64_t v19 = v24;
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v20 = v28;
  uint64_t v21 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  swift_release();
  return v13;
}

uint64_t sub_1008C0E1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000588C(&qword_1016511C8);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  *(void *)(v15 + ((v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D4A70;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9D90;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v18 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v18);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  swift_release();
  return v13;
}

uint64_t sub_1008C1250()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1008C12B0()
{
  sub_1008C1250();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CommandCompletion()
{
  return self;
}

uint64_t sub_1008C1308()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager))
    {
      uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    }
    else
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0
                                                           + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManagerCreator);
      swift_retain();
      uint64_t v9 = v10(v0, &off_1015D99B0);
      uint64_t v12 = v11;
      swift_release();
      *uint64_t v8 = v9;
      v8[1] = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRetain();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1008C14D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagCommandManager();
  return [super dealloc];
}

uint64_t type metadata accessor for TagCommandManager()
{
  return self;
}

uint64_t sub_1008C15B8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v58 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for DispatchQoS();
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v56 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DispatchTimeInterval();
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v10 = (uint64_t *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = type metadata accessor for DispatchTime();
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v11 = __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v46 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v49 = v17;
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  uint64_t v19 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v20 = *v19;
  if (!*(void *)(*v19 + 16)) {
    goto LABEL_8;
  }
  uint64_t v47 = a3;
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1007240CC(a2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a3 = v47;
LABEL_8:
    uint64_t v48 = v6;
    type metadata accessor for CommandCompletion();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = 0;
    *(unsigned char *)(v27 + 24) = 1;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(void *)(v27 + 96) = 0;
    *(void *)(v27 + 64) = a3;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    v28(v18, a2, v15);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v62 = *v19;
    *uint64_t v19 = 0x8000000000000000;
    sub_100170AD0(v27, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    *uint64_t v19 = v62;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_endAccess();
    swift_release();
LABEL_9:
    uint64_t v30 = v52;
    uint64_t v47 = sub_1008C1308();
    uint64_t v32 = v31;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 24))(a2, ObjectType, v32);
    sub_1008C1ED4(a2);
    static DispatchTime.now()();
    *uint64_t v10 = 62;
    uint64_t v34 = v50;
    uint64_t v35 = v51;
    (*(void (**)(void *, void, uint64_t))(v50 + 104))(v10, enum case for DispatchTimeInterval.seconds(_:), v51);
    uint64_t v36 = v53;
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v34 + 8))(v10, v35);
    uint64_t v54 = *(void *)(v54 + 8);
    uint64_t v37 = v55;
    ((void (*)(char *, uint64_t))v54)(v13, v55);
    uint64_t v51 = *(void *)&v30[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
    unint64_t v38 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v30;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v39 + v38, v18, v15);
    aBlock[4] = sub_1008D4988;
    aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015D9C00;
    uint64_t v40 = _Block_copy(aBlock);
    uint64_t v41 = v30;
    long long v42 = v56;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v43 = v58;
    uint64_t v44 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v40);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v59);
    ((void (*)(char *, uint64_t))v54)(v36, v37);
    return swift_release();
  }
  uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 64))
  {
    uint64_t v48 = v6;
    *(void *)(v23 + 64) = v47;
    swift_retain();
    swift_release();
    goto LABEL_9;
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for CommandError(0);
  uint64_t v62 = 1;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v25;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD00000000000003ALL;
  *(void *)(inited + 56) = 0x800000010140A380;
  sub_10092CEEC(inited);
  sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v26 = (void *)aBlock[0];
  Future.finish(error:)();

  return swift_release();
}

void sub_1008C1ED4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v146 = *(void *)(v4 - 8);
  uint64_t v147 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v144 = (uint64_t)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v143 = (char *)&v129 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  id v139 = (char *)&v129 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v133 = (char *)&v129 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v134 = (char *)&v129 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v135 = (uint64_t)&v129 - v16;
  __chkstk_darwin(v15);
  uint64_t v130 = (char *)&v129 - v17;
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_1016511A0);
  __chkstk_darwin(v18 - 8);
  uint64_t v136 = (uint64_t)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10163BBA0);
  __chkstk_darwin(v20 - 8);
  uint64_t v137 = (uint64_t)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v22 - 8);
  uint64_t v138 = (char *)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for Date();
  uint64_t v141 = *(void *)(v140 - 8);
  uint64_t v24 = __chkstk_darwin(v140);
  uint64_t v131 = (uint64_t)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v132 = (char *)&v129 - v26;
  uint64_t v27 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v142 = (uint64_t)&v129 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v129 - v35;
  __chkstk_darwin(v34);
  uint64_t v145 = (uint64_t)&v129 - v37;
  uint64_t v38 = type metadata accessor for DispatchPredicate();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (uint64_t *)((char *)&v129 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v42 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *uint64_t v41 = v42;
  (*(void (**)(void *, void, uint64_t))(v39 + 104))(v41, enum case for DispatchPredicate.onQueue(_:), v38);
  id v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)();
  uint64_t v45 = *(void (**)(void *, uint64_t))(v39 + 8);
  uint64_t v44 = v39 + 8;
  v45(v41, v38);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  swift_retain();
  sub_100ACD178((uint64_t)v29);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    uint64_t v129 = v2;
    uint64_t v144 = a1;
    uint64_t v54 = v145;
    sub_1008DA39C((uint64_t)v29, v145, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10000588C(&qword_10164B280);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347500;
    uint64_t v56 = (void *)SPBeaconTypeDurian;
    uint64_t v57 = (void *)SPBeaconTypeAccessory;
    *(void *)(inited + 32) = SPBeaconTypeDurian;
    *(void *)(inited + 40) = v57;
    long long v58 = (void *)SPBeaconTypeHele;
    *(void *)(inited + 48) = SPBeaconTypeHele;
    uint64_t v59 = *(int *)(v30 + 64);
    uint64_t v60 = *(int *)(v30 + 68);
    uint64_t v61 = v54;
    uint64_t v62 = *(void *)(v54 + v59);
    uint64_t v63 = *(void *)(v61 + v60);
    id v64 = v56;
    id v65 = v57;
    id v66 = v58;
    LOBYTE(v62) = sub_100DF1520(v62, v63);
    sub_1008DA314(v61, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v67 = v147;
    if (v62)
    {
      sub_1008DA404((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      uint64_t v68 = v146;
      uint64_t v69 = v143;
LABEL_13:
      if (qword_101636880 != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      sub_100010324(v76, (uint64_t)qword_10170D770);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v144, v67);
      uint64_t v77 = v142;
      sub_1008DA314(v61, v142, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = swift_slowAlloc();
        uint64_t v146 = swift_slowAlloc();
        v148[0] = v146;
        *(_DWORD *)uint64_t v80 = 141558531;
        uint64_t v149 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 12) = 2081;
        sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v149 = sub_1008FA0F0(v81, v82, v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
        *(_WORD *)(v80 + 22) = 2082;
        id v83 = sub_100D1C7BC();
        uint64_t v84 = SPBeaconType.description.getter((uint64_t)v83);
        unint64_t v86 = v85;

        uint64_t v149 = sub_1008FA0F0(v84, v86, v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1008DA404(v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "#Durian: TagCommandManager: skip fetch battery state for beacon: %{private,mask.hash}s of unsupported type %{public}s.", (uint8_t *)v80, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v87 = v145;
      }
      else
      {

        sub_1008DA404(v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
        uint64_t v87 = v61;
      }
      goto LABEL_46;
    }
    id v70 = sub_100D1C7BC();
    char v71 = sub_100272E5C((uint64_t)v70, inited);

    sub_1008DA404((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRelease();
    uint64_t v68 = v146;
    uint64_t v69 = v143;
    if ((v71 & 1) == 0) {
      goto LABEL_13;
    }
    swift_retain();
    uint64_t v72 = v136;
    sub_100AE9138(v144, v136);
    uint64_t v73 = sub_10000588C(&qword_1016511B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48))(v72, 1, v73) == 1)
    {
      sub_10001DAB4(v72, (uint64_t *)&unk_1016511A0);
      uint64_t v74 = type metadata accessor for BeaconStatus(0);
      uint64_t v75 = v137;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v137, 1, 1, v74);
    }
    else
    {
      uint64_t v75 = v137;
      sub_1008DA39C(v72, v137, type metadata accessor for BeaconStatus);
      uint64_t v74 = type metadata accessor for BeaconStatus(0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v75, 0, 1, v74);
    }
    unint64_t v88 = v139;
    uint64_t v89 = v140;
    uint64_t v90 = v141;
    swift_release();
    type metadata accessor for BeaconStatus(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48))(v75, 1, v74) == 1)
    {
      sub_10001DAB4(v75, &qword_10163BBA0);
      uint64_t v91 = (uint64_t)v138;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v138, 1, 1, v89);
    }
    else
    {
      uint64_t v92 = v75 + *(int *)(v74 + 24);
      uint64_t v91 = (uint64_t)v138;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v138, v92, v89);
      sub_1008DA404(v75, type metadata accessor for BeaconStatus);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v89);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v91, 1, v89) != 1)
      {
        uint64_t v110 = v132;
        (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v132, v91, v89);
        if (qword_101636CD8 != -1) {
          swift_once();
        }
        OS_dispatch_queue.sync<A>(execute:)();
        sub_1010ABF30(v148[0]);
        double v112 = v111;
        swift_bridgeObjectRelease();
        uint64_t v113 = v131;
        static Date.trustedNow.getter(v131);
        Date.timeIntervalSince(_:)();
        double v115 = v114;
        char v118 = *(void (**)(char *, uint64_t))(v90 + 8);
        uint64_t v117 = v90 + 8;
        id v116 = v118;
        v118((char *)v113, v89);
        if (v112 >= v115)
        {
          uint64_t v141 = v117;
          if (qword_101636880 != -1) {
            swift_once();
          }
          uint64_t v122 = type metadata accessor for Logger();
          sub_100010324(v122, (uint64_t)qword_10170D770);
          uint64_t v123 = v130;
          (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v130, v144, v67);
          BOOL v124 = Logger.logObject.getter();
          os_log_type_t v125 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v124, v125))
          {
            uint64_t v126 = swift_slowAlloc();
            uint64_t v144 = swift_slowAlloc();
            v148[0] = v144;
            *(_DWORD *)uint64_t v126 = 141558275;
            uint64_t v149 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v126 + 12) = 2081;
            sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v149 = sub_1008FA0F0(v127, v128, v148);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v123, v67);
            _os_log_impl((void *)&_mh_execute_header, v124, v125, "#Durian: TagCommandManager: skip fetch battery state for: %{private,mask.hash}s.", (uint8_t *)v126, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v116(v132, v140);
            goto LABEL_43;
          }

          (*(void (**)(char *, uint64_t))(v68 + 8))(v123, v67);
          v116(v132, v89);
LABEL_45:
          uint64_t v87 = v61;
          goto LABEL_46;
        }
        v116(v110, v89);
LABEL_23:
        uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
        uint64_t v94 = v134;
        v93(v134, v144, v67);
        swift_beginAccess();
        uint64_t v95 = v135;
        LOBYTE(v94) = sub_100DC8CB8(v135, v94);
        uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
        v96(v95, v67);
        swift_endAccess();
        if (v94)
        {
          if (qword_101636880 != -1) {
            swift_once();
          }
          uint64_t v97 = type metadata accessor for Logger();
          sub_100010324(v97, (uint64_t)qword_10170D770);
          uint64_t v98 = v133;
          v93(v133, v144, v67);
          id v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v99, v100))
          {
            uint64_t v101 = swift_slowAlloc();
            v148[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v101 = 141558275;
            uint64_t v149 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v101 + 12) = 2081;
            uint64_t v146 = v101 + 14;
            sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v149 = sub_1008FA0F0(v102, v103, v148);
            uint64_t v61 = v145;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v96((uint64_t)v98, v67);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "#Durian: TagCommandManager: fetch battery state for: %{private,mask.hash}s.", (uint8_t *)v101, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v96((uint64_t)v98, v67);
          }

          sub_1008C1308();
          uint64_t v120 = v119;
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v144, ObjectType, v120);
          swift_unknownObjectRelease();
          goto LABEL_45;
        }
        if (qword_101636880 != -1) {
          swift_once();
        }
        uint64_t v104 = type metadata accessor for Logger();
        sub_100010324(v104, (uint64_t)qword_10170D770);
        v93(v88, v144, v67);
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v105, v106))
        {
          uint64_t v107 = swift_slowAlloc();
          v148[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v107 = 141558275;
          uint64_t v149 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v107 + 12) = 2081;
          uint64_t v146 = v107 + 14;
          sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v149 = sub_1008FA0F0(v108, v109, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v96((uint64_t)v88, v67);
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "#Durian: TagCommandManager: skip fetch battery state for beacon: %{private,mask.hash}s - already fetching.", (uint8_t *)v107, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_43:
          uint64_t v87 = v145;
LABEL_46:
          sub_1008DA404(v87, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          return;
        }

        v96((uint64_t)v88, v67);
        goto LABEL_45;
      }
    }
    sub_10001DAB4(v91, (uint64_t *)&unk_10163AC90);
    goto LABEL_23;
  }
  sub_10001DAB4((uint64_t)v29, &qword_10163B9F0);
  uint64_t v44 = v147;
  if (qword_101636880 != -1) {
LABEL_48:
  }
    swift_once();
  uint64_t v46 = type metadata accessor for Logger();
  sub_100010324(v46, (uint64_t)qword_10170D770);
  uint64_t v47 = v146;
  uint64_t v48 = v144;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v144, a1, v44);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    v148[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 141558275;
    uint64_t v149 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2081;
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v149 = sub_1008FA0F0(v52, v53, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v44);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "#Durian: TagCommandManager: skip fetch battery state for non-owned device: %{private,mask.hash}s.", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v44);
  }
}

uint64_t sub_1008C34FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v33 = v4;
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 64);
      swift_retain();
      uint64_t result = swift_release();
      if (v21)
      {
        uint64_t v32 = v21;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        uint64_t v22 = *v14;
        if (*(void *)(*v14 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v23 = sub_1007240CC(a2);
          if (v24)
          {
            uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v25 + 64) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v26 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        *uint64_t v26 = 0;
        v26[1] = 0;
        swift_unknownObjectRelease();
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v32;
        aBlock[4] = sub_1008D49A0;
        aBlock[5] = v28;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015D9C50;
        uint64_t v29 = _Block_copy(aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v37 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v30 = v33;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v29);
        swift_release();

        (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v30);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008C3A00(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v65 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v59 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchTimeInterval();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v10 = (void *)((char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = type metadata accessor for DispatchTime();
  uint64_t v58 = *(void *)(v64 - 8);
  uint64_t v11 = __chkstk_darwin(v64);
  uint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v56 = (char *)v50 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v53 = v17;
  char v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a1;
  uint64_t v19 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = *(void *)(*v19 + 16);
  uint64_t v63 = a3;
  if (!v21) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1007240CC(v65);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a3 = v63;
LABEL_8:
    uint64_t v51 = v6;
    uint64_t v52 = v5;
    type metadata accessor for CommandCompletion();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    *(unsigned char *)(v28 + 24) = 1;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
    *(_OWORD *)(v28 + 80) = 0u;
    *(void *)(v28 + 88) = a3;
    *(void *)(v28 + 96) = 0;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    v29(v18, v65, v15);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = *v19;
    *uint64_t v19 = 0x8000000000000000;
    sub_100170AD0(v28, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    *uint64_t v19 = v67;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_endAccess();
LABEL_9:
    swift_release();
    uint64_t v31 = v57;
    v50[1] = sub_1008C1308();
    uint64_t v33 = v32;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v35 = v65;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 88))(v65, ObjectType, v33);
    uint64_t v36 = v13;
    static DispatchTime.now()();
    *uint64_t v10 = 62;
    uint64_t v37 = v54;
    uint64_t v38 = v55;
    (*(void (**)(void *, void, uint64_t))(v54 + 104))(v10, enum case for DispatchTimeInterval.seconds(_:), v55);
    uint64_t v39 = v56;
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v37 + 8))(v10, v38);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v58 + 8);
    v40(v36, v64);
    uint64_t v41 = v40;
    uint64_t v58 = *(void *)&v31[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v35, v15);
    unint64_t v42 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v43 = (v53 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = (char *)swift_allocObject();
    *((void *)v44 + 2) = v31;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v44[v42], v18, v15);
    *(void *)&v44[v43] = v63;
    aBlock[4] = sub_1008D4A08;
    aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015D9CF0;
    uint64_t v45 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v46 = v31;
    uint64_t v47 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v48 = v61;
    uint64_t v49 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v45);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v62);
    v41(v39, v64);
    swift_release();
    return;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_retain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 88))
  {
    uint64_t v51 = v6;
    uint64_t v52 = v5;
    *(void *)(v24 + 88) = v63;
    swift_retain();
    goto LABEL_9;
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for CommandError(0);
  uint64_t v67 = 1;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v26;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD000000000000036;
  *(void *)(inited + 56) = 0x800000010140A480;
  sub_10092CEEC(inited);
  sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  _BridgedStoredNSError.init(_:userInfo:)();
  id v27 = aBlock[0];
  Future.finish(error:)();
  swift_release();
}

uint64_t sub_1008C433C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v34 = v6;
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void **)(v20 + 88);
      swift_retain();
      uint64_t result = swift_release();
      if (v21)
      {
        aBlock[0] = a3;
        uint64_t v41 = v21;
        sub_10000588C(&qword_1016511B8);
        sub_100062734(&qword_1016511C0, &qword_1016511B8);
        swift_retain_n();
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v22)
        {
          static os_log_type_t.error.getter();
          if (qword_101637278 != -1) {
            swift_once();
          }
          os_log(_:dso:log:_:_:)();
          uint64_t v23 = *v14;
          if (*(void *)(*v14 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v24 = sub_1007240CC(a2);
            if (v25)
            {
              uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
              swift_retain();
              swift_bridgeObjectRelease();
              *(void *)(v26 + 88) = 0;
              swift_release();
              swift_release();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          id v27 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
          *id v27 = 0;
          v27[1] = 0;
          swift_unknownObjectRelease();
          sub_10000584C();
          uint64_t v28 = v35;
          (*(void (**)(char *, void, uint64_t))(v35 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v11);
          uint64_t v29 = (void *)static OS_dispatch_queue.global(qos:)();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = v21;
          aBlock[4] = sub_1008DB770;
          aBlock[5] = v30;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          void aBlock[2] = sub_1004B5480;
          aBlock[3] = &unk_1015D9D40;
          uint64_t v31 = _Block_copy(aBlock);
          swift_retain();
          static DispatchQoS.unspecified.getter();
          uint64_t v41 = _swiftEmptyArrayStorage;
          sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v32 = v36;
          uint64_t v33 = v34;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v31);
          swift_release();

          (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v33);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
        }
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008C48D0(uint64_t a1)
{
  if (a1)
  {
    type metadata accessor for CommandError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
}

uint64_t sub_1008C4990(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  uint64_t v33 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v31 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v31);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  v29[0] = Future.init()();
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v14 = v30;
  uint64_t v15 = v31;
  v29[1] = *(void *)&v30[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v16 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, a1, v31);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v18 = (v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = v14;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v17, v16, v15);
  *(void *)(v21 + v18) = v32;
  uint64_t v22 = v29[0];
  *(void *)(v21 + v19) = v29[0];
  *(void *)(v21 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D4C40;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9F20;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v20;
  swift_retain();
  swift_retain();
  char v25 = v33;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v26 = v36;
  uint64_t v27 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  swift_release();
  return v22;
}

uint64_t sub_1008C4E98(char *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v97 = a3;
  uint64_t v95 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchTimeInterval();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  os_log_type_t v79 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for DispatchTime();
  uint64_t v89 = *(void *)(v101 - 8);
  uint64_t v16 = __chkstk_darwin(v101);
  uint64_t v78 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v88 = (char *)&v76 - v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v19 - 8);
  uint64_t v100 = v19;
  __chkstk_darwin(v19);
  uint64_t v86 = v20;
  uint64_t v98 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a2;
  sub_1008C5B48(a2);
  uint64_t v22 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(*(void *)v22 + 16);
  uint64_t v91 = v13;
  uint64_t v92 = v11;
  if (v24)
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_1007240CC(v21);
    if (v26)
    {
      uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
      swift_retain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CommandCompletion();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0;
  *(unsigned char *)(v27 + 24) = 1;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(void *)(v27 + 96) = 0;
LABEL_6:
  uint64_t v93 = v12;
  uint64_t v94 = v9;
  *(void *)(v27 + 16) = v97;
  *(unsigned char *)(v27 + 24) = 0;
  *(void *)(v27 + 32) = a4;
  uint64_t v82 = a4;
  swift_retain();
  swift_release();
  *(void *)(v27 + 40) = a5;
  swift_retain();
  swift_release();
  uint64_t v29 = (uint64_t)v98;
  uint64_t v28 = v99;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  uint64_t v31 = v100;
  uint64_t v85 = v99 + 16;
  uint64_t v84 = v30;
  v30(v98, v21, v100);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v108 = *(void **)v22;
  *(void *)uint64_t v22 = 0x8000000000000000;
  sub_100170AD0(v27, v29, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v22 = v108;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v31);
  swift_endAccess();
  id v83 = a1;
  uint64_t v33 = sub_1008C1308();
  uint64_t v35 = v34;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v36 = swift_allocObject();
  long long v76 = xmmword_101342130;
  *(_OWORD *)(v36 + 16) = xmmword_101342130;
  aBlock = (void **)v33;
  uint64_t v103 = v35;
  uint64_t v77 = v35;
  uint64_t v96 = v33;
  swift_unknownObjectRetain();
  sub_10000588C(&qword_101651188);
  uint64_t v37 = String.init<A>(describing:)();
  uint64_t v39 = v38;
  *(void *)(v36 + 56) = &type metadata for String;
  unint64_t v40 = sub_10000B4CC();
  *(void *)(v36 + 64) = v40;
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v87 = v27;
  switch((unint64_t)v97)
  {
    case 1uLL:
      static os_log_type_t.default.getter();
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = v76;
      uint64_t v42 = UUID.uuidString.getter();
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = v40;
      *(void *)(v41 + 32) = v42;
      *(void *)(v41 + 40) = v43;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_getObjectType();
      id v44 = [self rangingSequence];
      goto LABEL_12;
    case 2uLL:
      static os_log_type_t.default.getter();
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v76;
      uint64_t v46 = UUID.uuidString.getter();
      *(void *)(v45 + 56) = &type metadata for String;
      *(void *)(v45 + 64) = v40;
      *(void *)(v45 + 32) = v46;
      *(void *)(v45 + 40) = v47;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v77 + 48))(v21, ObjectType);
      goto LABEL_15;
    case 5uLL:
      static os_log_type_t.default.getter();
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v76;
      uint64_t v54 = UUID.uuidString.getter();
      *(void *)(v53 + 56) = &type metadata for String;
      *(void *)(v53 + 64) = v40;
      *(void *)(v53 + 32) = v54;
      *(void *)(v53 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_getObjectType();
      id v52 = [self shortSequence];
      (*(void (**)(void))(v77 + 56))();
      goto LABEL_14;
    default:
      static os_log_type_t.default.getter();
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v76;
      uint64_t v50 = UUID.uuidString.getter();
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = v40;
      *(void *)(v49 + 32) = v50;
      *(void *)(v49 + 40) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_getObjectType();
      id v44 = [self defaultSequence];
LABEL_12:
      id v52 = v44;
      (*(void (**)(void))(v77 + 40))();
LABEL_14:

LABEL_15:
      uint64_t v56 = v83;
      uint64_t v57 = v82;
      uint64_t v58 = v21;
      uint64_t v59 = v81;
      uint64_t v60 = v80;
      uint64_t v61 = v79;
      uint64_t v62 = v78;
      static DispatchTime.now()();
      *uint64_t v61 = 62;
      (*(void (**)(void *, void, uint64_t))(v60 + 104))(v61, enum case for DispatchTimeInterval.seconds(_:), v59);
      uint64_t v63 = v88;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v60 + 8))(v61, v59);
      uint64_t v97 = *(void (**)(char *, uint64_t))(v89 + 8);
      v97(v62, v101);
      uint64_t v89 = *(void *)&v56[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
      uint64_t v64 = v98;
      uint64_t v65 = v100;
      v84(v98, v58, v100);
      uint64_t v66 = v99;
      unint64_t v67 = (*(unsigned __int8 *)(v99 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
      unint64_t v68 = (v86 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v69 = swift_allocObject();
      *(void *)(v69 + 16) = v56;
      (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))(v69 + v67, v64, v65);
      *(void *)(v69 + v68) = v57;
      os_log_type_t v106 = sub_1008D4D00;
      uint64_t v107 = v69;
      aBlock = _NSConcreteStackBlock;
      uint64_t v103 = 1107296256;
      uint64_t v104 = sub_1004B5480;
      uint64_t v105 = &unk_1015D9F70;
      id v70 = _Block_copy(&aBlock);
      swift_retain();
      char v71 = v56;
      uint64_t v72 = v90;
      static DispatchQoS.unspecified.getter();
      uint64_t v108 = _swiftEmptyArrayStorage;
      sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v73 = v92;
      uint64_t v74 = v95;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v70);
      swift_release();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v73, v74);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v72, v93);
      v97(v63, v101);
      return swift_release();
  }
}

uint64_t sub_1008C5B48(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1007240CC(a1);
    if (v7)
    {
      uint64_t v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
      swift_retain();
      swift_bridgeObjectRelease();
      if (v8[4])
      {
        swift_retain();
        static os_log_type_t.default.getter();
        if (qword_101637230 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        Future.finish(result:)();
        swift_release();
      }
      if (v8[5])
      {
        swift_retain();
        static os_log_type_t.default.getter();
        if (qword_101637230 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        Future.finish(result:)();
        swift_release();
      }
      if (v8[6])
      {
        swift_retain();
        static os_log_type_t.default.getter();
        if (qword_101637230 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        Future.finish(result:)();
        swift_release();
      }
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008C5D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v54 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v15 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1007240CC(a2);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void **)(v18 + 32);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = 0;
LABEL_6:
  uint64_t v20 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1007240CC(a2);
    if (v22)
    {
      uint64_t v23 = a2;
      uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v24 + 40);
      swift_retain();
      a2 = v23;
      uint64_t v26 = v25;
      swift_release();
      if (!v19) {
        return swift_release();
      }
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = 0;
  if (!v19) {
    return swift_release();
  }
LABEL_12:
  uint64_t v48 = v9;
  uint64_t v49 = a2;
  aBlock[0] = a3;
  uint64_t v57 = v19;
  sub_10000588C(&qword_101651180);
  sub_100062734((unint64_t *)&unk_1016511D0, &qword_101651180);
  swift_retain_n();
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  if (v27)
  {
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v28 = *v14;
    uint64_t v29 = *(void *)(*v14 + 16);
    uint64_t v47 = v7;
    uint64_t v30 = v49;
    if (v29)
    {
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_1007240CC(v30);
      if (v32)
      {
        uint64_t v33 = *(void *)(*(void *)(v28 + 56) + 8 * v31);
        swift_retain();
        swift_bridgeObjectRelease();
        *(void *)(v33 + 40) = 0;
        uint64_t v30 = v49;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v34 = *v14;
    if (*(void *)(*v14 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v35 = sub_1007240CC(v30);
      if (v36)
      {
        uint64_t v37 = *(void *)(*(void *)(v34 + 56) + 8 * v35);
        swift_retain();
        swift_bridgeObjectRelease();
        *(void *)(v37 + 32) = 0;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v38 = (void *)(v52 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    *uint64_t v38 = 0;
    v38[1] = 0;
    swift_unknownObjectRelease();
    sub_10000584C();
    uint64_t v40 = v50;
    uint64_t v39 = v51;
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v51);
    uint64_t v41 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v39);
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v19;
    *(void *)(v42 + 24) = v26;
    aBlock[4] = sub_1008D4D44;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015D9FC0;
    uint64_t v43 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v44 = v53;
    static DispatchQoS.unspecified.getter();
    uint64_t v57 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v45 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v43);
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v6);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v48);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

void sub_1008C6428(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    type metadata accessor for CommandError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
  if (a2)
  {
    type metadata accessor for CommandError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
}

uint64_t sub_1008C656C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000588C(&qword_101651180);
  swift_allocObject();
  uint64_t v13 = Future.init()();
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  *(void *)(v15 + ((v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1008D4AD8;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D9E58;
  unint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v18 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v18);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  swift_release();
  return v13;
}

uint64_t sub_1008C69A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v63 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  __chkstk_darwin(v10);
  uint64_t v59 = (uint64_t *)((char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = type metadata accessor for DispatchTime();
  uint64_t v62 = *(void *)(v70 - 8);
  uint64_t v12 = __chkstk_darwin(v70);
  uint64_t v58 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v69 = (char *)&v52 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v57 = v17;
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008C5B48(a2);
  uint64_t v19 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(*(void *)v19 + 16);
  uint64_t v67 = v7;
  uint64_t v68 = v6;
  if (v21)
  {
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_1007240CC(a2);
    if (v23)
    {
      uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CommandCompletion();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  *(unsigned char *)(v24 + 24) = 1;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(void *)(v24 + 96) = 0;
LABEL_6:
  *(void *)(v24 + 48) = a3;
  swift_retain();
  swift_release();
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v56(v18, a2, v15);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v77 = *(void **)v19;
  *(void *)uint64_t v19 = 0x8000000000000000;
  sub_100170AD0(v24, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v19 = v77;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  swift_endAccess();
  uint64_t v26 = sub_1008C1308();
  uint64_t v28 = v27;
  static os_log_type_t.default.getter();
  uint64_t v55 = a1;
  uint64_t v52 = a2;
  uint64_t v54 = v15;
  uint64_t v53 = v18;
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_101342130;
  aBlock = (void **)v26;
  uint64_t v72 = v28;
  swift_unknownObjectRetain();
  sub_10000588C(&qword_101651188);
  uint64_t v30 = String.init<A>(describing:)();
  uint64_t v32 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 64) = sub_10000B4CC();
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v34 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 64))(v52, ObjectType, v28);
  unint64_t v35 = v58;
  static DispatchTime.now()();
  char v36 = v59;
  *uint64_t v59 = 62;
  uint64_t v38 = v60;
  uint64_t v37 = v61;
  (*(void (**)(void *, void, uint64_t))(v60 + 104))(v36, enum case for DispatchTimeInterval.seconds(_:), v61);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v38 + 8))(v36, v37);
  uint64_t v62 = *(void *)(v62 + 8);
  ((void (*)(char *, uint64_t))v62)(v35, v70);
  uint64_t v39 = v55;
  uint64_t v61 = *(void *)&v55[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v40 = v53;
  uint64_t v41 = v34;
  uint64_t v42 = v54;
  v56(v53, v41, v54);
  unint64_t v43 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v44 + v43, v40, v42);
  uint64_t v75 = sub_1008D4AF4;
  uint64_t v76 = v44;
  aBlock = _NSConcreteStackBlock;
  uint64_t v72 = 1107296256;
  uint64_t v73 = sub_1004B5480;
  uint64_t v74 = &unk_1015D9EA8;
  uint64_t v45 = _Block_copy(&aBlock);
  id v46 = v39;
  uint64_t v47 = v63;
  static DispatchQoS.unspecified.getter();
  uint64_t v77 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v48 = v65;
  uint64_t v49 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v50 = v69;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v45);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v66);
  ((void (*)(char *, uint64_t))v62)(v50, v70);
  return swift_release();
}

uint64_t sub_1008C71F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v32 = v4;
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 48);
      swift_retain();
      uint64_t result = swift_release();
      if (v21)
      {
        uint64_t v31 = v21;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        unint64_t v22 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        void *v22 = 0;
        v22[1] = 0;
        swift_unknownObjectRelease();
        uint64_t v23 = *v14;
        if (*(void *)(*v14 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_1007240CC(a2);
          if (v25)
          {
            uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v26 + 48) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_1008D4B0C;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015D9ED0;
        uint64_t v28 = _Block_copy(aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        char v36 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v29 = v32;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v28);
        swift_release();

        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v29);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008C76E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v66 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v65 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = type metadata accessor for DispatchTime();
  uint64_t v69 = *(void *)(v77 - 8);
  uint64_t v12 = __chkstk_darwin(v77);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v68 = (char *)&v59 - v15;
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v64 = v17;
  uint64_t v75 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)(*v18 + 16);
  uint64_t v67 = a2;
  if (!v20) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1007240CC(a2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v60 = v14;
    uint64_t v61 = v10;
    uint64_t v63 = v5;
    type metadata accessor for CommandCompletion();
    uint64_t v28 = a2;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = 0;
    *(unsigned char *)(v29 + 24) = 1;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 80) = 0u;
    *(void *)(v29 + 96) = 0;
    *(void *)(v29 + 56) = v73;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    uint64_t v31 = (uint64_t)v75;
    uint64_t v32 = v28;
    uint64_t v33 = v76;
    v30(v75, v32, v76);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *v18;
    uint64_t *v18 = 0x8000000000000000;
    uint64_t v74 = v29;
    sub_100170AD0(v29, v31, isUniquelyReferenced_nonNull_native);
    uint64_t *v18 = v84;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v31, v33);
    swift_endAccess();
    goto LABEL_9;
  }
  uint64_t v23 = *(void *)(*(void *)(v19 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v74 = v23;
  if (*(void *)(v23 + 56))
  {
    swift_retain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for CommandError(0);
    uint64_t v84 = 1;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v25;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000035;
    *(void *)(inited + 56) = 0x800000010140A250;
    sub_10092CEEC(inited);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = aBlock;
    Future.finish(error:)();

    return swift_release_n();
  }
  uint64_t v60 = v14;
  uint64_t v61 = v10;
  uint64_t v63 = v5;
  *(void *)(v74 + 56) = v73;
  swift_retain();
LABEL_9:
  uint64_t v62 = v7;
  uint64_t v73 = v8;
  uint64_t v35 = sub_1008C1308();
  uint64_t v37 = v36;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101342130;
  aBlock = (void **)v35;
  uint64_t v79 = v37;
  swift_unknownObjectRetain();
  sub_10000588C(&qword_101651188);
  uint64_t v39 = String.init<A>(describing:)();
  uint64_t v41 = v40;
  *(void *)(v38 + 56) = &type metadata for String;
  *(void *)(v38 + 64) = sub_10000B4CC();
  *(void *)(v38 + 32) = v39;
  *(void *)(v38 + 40) = v41;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v43 = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 72))(v67, ObjectType, v37);
  uint64_t v44 = v60;
  static DispatchTime.now()();
  uint64_t v45 = v65;
  void *v65 = 62;
  uint64_t v46 = v66;
  uint64_t v47 = v61;
  (*(void (**)(void *, void, uint64_t))(v66 + 104))(v45, enum case for DispatchTimeInterval.seconds(_:), v61);
  uint64_t v48 = v68;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v46 + 8))(v45, v47);
  uint64_t v69 = *(void *)(v69 + 8);
  ((void (*)(char *, uint64_t))v69)(v44, v77);
  uint64_t v66 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v49 = v75;
  uint64_t v50 = v43;
  uint64_t v51 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v75, v50, v76);
  unint64_t v52 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v53 + v52, v49, v51);
  uint64_t v82 = sub_1008D4908;
  uint64_t v83 = v53;
  aBlock = _NSConcreteStackBlock;
  uint64_t v79 = 1107296256;
  uint64_t v80 = sub_1004B5480;
  uint64_t v81 = &unk_1015D9B38;
  uint64_t v54 = _Block_copy(&aBlock);
  uint64_t v55 = a1;
  uint64_t v56 = v70;
  static DispatchQoS.unspecified.getter();
  uint64_t v84 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v57 = v62;
  uint64_t v58 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v54);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v58);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v56, v73);
  ((void (*)(char *, uint64_t))v69)(v48, v77);
  return swift_release();
}

uint64_t sub_1008C8144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v32 = v4;
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 56);
      swift_retain();
      uint64_t result = swift_release();
      if (v21)
      {
        uint64_t v31 = v21;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        char v22 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        void *v22 = 0;
        v22[1] = 0;
        swift_unknownObjectRelease();
        uint64_t v23 = *v14;
        if (*(void *)(*v14 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_1007240CC(a2);
          if (v25)
          {
            uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v26 + 56) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_1008D4920;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015D9B60;
        uint64_t v28 = _Block_copy(aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v36 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v29 = v32;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v28);
        swift_release();

        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v29);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008C8630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CommandError(0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  sub_10092CEEC(inited);
  sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Future.finish(error:)();
}

uint64_t sub_1008C8738(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v70 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v69 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v68 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v64 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v63 = (uint64_t *)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v75 = type metadata accessor for DispatchTime();
  uint64_t v67 = *(void *)(v75 - 8);
  uint64_t v12 = __chkstk_darwin(v75);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v66 = (char *)&v57 - v15;
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v62 = v17;
  uint64_t v73 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)(*v18 + 16);
  uint64_t v65 = a2;
  if (!v20) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1007240CC(a2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v58 = v14;
    uint64_t v59 = v10;
    uint64_t v61 = v5;
    type metadata accessor for CommandCompletion();
    uint64_t v26 = a2;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = 0;
    *(unsigned char *)(v27 + 24) = 1;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(void *)(v27 + 96) = 0;
    *(void *)(v27 + 72) = v71;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    uint64_t v29 = (uint64_t)v73;
    uint64_t v30 = v26;
    uint64_t v31 = v74;
    v28(v73, v30, v74);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v82 = *v18;
    uint64_t *v18 = 0x8000000000000000;
    uint64_t v72 = v27;
    sub_100170AD0(v27, v29, isUniquelyReferenced_nonNull_native);
    uint64_t *v18 = v82;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v29, v31);
    swift_endAccess();
    goto LABEL_9;
  }
  uint64_t v23 = *(void *)(*(void *)(v19 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v72 = v23;
  if (*(void *)(v23 + 72))
  {
    swift_retain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for CommandError(0);
    uint64_t v82 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v24 = aBlock;
    Future.finish(error:)();

    return swift_release_n();
  }
  uint64_t v58 = v14;
  uint64_t v59 = v10;
  uint64_t v61 = v5;
  *(void *)(v72 + 72) = v71;
  swift_retain();
LABEL_9:
  uint64_t v60 = v7;
  uint64_t v71 = v8;
  uint64_t v33 = sub_1008C1308();
  uint64_t v35 = v34;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_101342130;
  aBlock = (void **)v33;
  uint64_t v77 = v35;
  swift_unknownObjectRetain();
  sub_10000588C(&qword_101651188);
  uint64_t v37 = String.init<A>(describing:)();
  uint64_t v39 = v38;
  *(void *)(v36 + 56) = &type metadata for String;
  *(void *)(v36 + 64) = sub_10000B4CC();
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v41 = v65;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v35 + 80))(0, v65, ObjectType, v35);
  uint64_t v42 = v58;
  static DispatchTime.now()();
  uint64_t v43 = v63;
  void *v63 = 62;
  uint64_t v44 = v64;
  uint64_t v45 = v59;
  (*(void (**)(void *, void, uint64_t))(v64 + 104))(v43, enum case for DispatchTimeInterval.seconds(_:), v59);
  uint64_t v46 = v66;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v44 + 8))(v43, v45);
  uint64_t v67 = *(void *)(v67 + 8);
  ((void (*)(char *, uint64_t))v67)(v42, v75);
  uint64_t v64 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v47 = v73;
  uint64_t v48 = v41;
  uint64_t v49 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v73, v48, v74);
  unint64_t v50 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v51 + v50, v47, v49);
  uint64_t v80 = sub_1008D4A8C;
  uint64_t v81 = v51;
  aBlock = _NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  uint64_t v78 = sub_1004B5480;
  uint64_t v79 = &unk_1015D9DE0;
  unint64_t v52 = _Block_copy(&aBlock);
  uint64_t v53 = a1;
  uint64_t v54 = v68;
  static DispatchQoS.unspecified.getter();
  uint64_t v82 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v55 = v60;
  uint64_t v56 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v52);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v56);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v71);
  ((void (*)(char *, uint64_t))v67)(v46, v75);
  return swift_release();
}

uint64_t sub_1008C90C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *v14;
  if (*(void *)(*v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v32 = v4;
      uint64_t v20 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 72);
      swift_retain();
      uint64_t result = swift_release();
      if (v21)
      {
        uint64_t v31 = v21;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        char v22 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        void *v22 = 0;
        v22[1] = 0;
        swift_unknownObjectRelease();
        uint64_t v23 = *v14;
        if (*(void *)(*v14 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_1007240CC(a2);
          if (v25)
          {
            uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v26 + 72) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_1008D4AA4;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015D9E08;
        uint64_t v28 = _Block_copy(aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v36 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v29 = v32;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v28);
        swift_release();

        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v29);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008C95B0()
{
  sub_1008C1308();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t sub_1008C960C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v56 = a4;
  unint64_t v57 = a5;
  uint64_t v55 = a3;
  uint64_t v58 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v54 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v18 = *v17;
  if (*(void *)(*v17 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1007240CC(v58);
    if (v20)
    {
      uint64_t v21 = *(void *)(v18 + 56);
      uint64_t v52 = v11;
      uint64_t v53 = v13;
      char v22 = v9;
      uint64_t v23 = v6;
      uint64_t v24 = v10;
      uint64_t v25 = v7;
      uint64_t v26 = *(void *)(v21 + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v26 + 88);
      swift_retain();
      uint64_t v28 = v25;
      uint64_t v29 = v53;
      swift_release();
      if (v27)
      {
        sub_10000584C();
        uint64_t v51 = v24;
        uint64_t v30 = v54;
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v14);
        uint64_t v50 = static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
        uint64_t v31 = (void *)swift_allocObject();
        uint64_t v32 = v56;
        v31[2] = v55;
        v31[3] = v27;
        unint64_t v33 = v57;
        v31[4] = v32;
        v31[5] = v33;
        aBlock[4] = sub_1008DB4B4;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015DAB00;
        uint64_t v34 = _Block_copy(aBlock);
        swift_retain();
        swift_errorRetain();
        sub_1000361E0(v32, v33);
        static DispatchQoS.unspecified.getter();
        uint64_t v59 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v35 = (void *)v50;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v34);
        swift_release();

        (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v23);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v51);
        uint64_t result = swift_release();
        uint64_t v37 = *v17;
        uint64_t v38 = v58;
        if (!*(void *)(*v17 + 16)) {
          return result;
        }
        swift_bridgeObjectRetain();
        unint64_t v39 = sub_1007240CC(v38);
        if (v40)
        {
          uint64_t v41 = *(void *)(*(void *)(v37 + 56) + 8 * v39);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(void *)(v41 + 88) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_101342130;
  type metadata accessor for UUID();
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v43 = v58;
  uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v46 = v45;
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_10000B4CC();
  *(void *)(v42 + 32) = v44;
  *(void *)(v42 + 40) = v46;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v47 = *v17;
  if (*(void *)(v47 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_1007240CC(v43);
    if (v49)
    {
      uint64_t v41 = *(void *)(*(void *)(v47 + 56) + 8 * v48);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1008C9C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v53 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v51 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*(void *)(*v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(v53);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v49 = v9;
      uint64_t v50 = v11;
      char v20 = v7;
      uint64_t v21 = v4;
      uint64_t v22 = v8;
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v24 + 80);
      swift_retain();
      uint64_t v26 = v23;
      uint64_t v27 = v50;
      swift_release();
      if (v25)
      {
        sub_10000584C();
        uint64_t v48 = v22;
        uint64_t v28 = v51;
        (*(void (**)(char *, void, uint64_t))(v51 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v12);
        uint64_t v47 = static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v52;
        *(void *)(v29 + 24) = v25;
        aBlock[4] = sub_1008DB294;
        aBlock[5] = v29;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015DAA60;
        uint64_t v30 = _Block_copy(aBlock);
        swift_retain();
        swift_errorRetain();
        static DispatchQoS.unspecified.getter();
        uint64_t v54 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v31 = (void *)v47;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v30);
        swift_release();

        (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v21);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v48);
        uint64_t result = swift_release();
        uint64_t v33 = *v15;
        uint64_t v34 = v53;
        if (!*(void *)(*v15 + 16)) {
          return result;
        }
        swift_bridgeObjectRetain();
        unint64_t v35 = sub_1007240CC(v34);
        if (v36)
        {
          uint64_t v37 = *(void *)(*(void *)(v33 + 56) + 8 * v35);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(void *)(v37 + 80) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101342130;
  type metadata accessor for UUID();
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v39 = v53;
  uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v42 = v41;
  *(void *)(v38 + 56) = &type metadata for String;
  *(void *)(v38 + 64) = sub_10000B4CC();
  *(void *)(v38 + 32) = v40;
  *(void *)(v38 + 40) = v42;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v43 = *v15;
  if (*(void *)(v43 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v44 = sub_1007240CC(v39);
    if (v45)
    {
      uint64_t v37 = *(void *)(*(void *)(v43 + 56) + 8 * v44);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1008CA230(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v2 = Error.localizedDescription.getter();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_10000B4CC();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    Future.finish(error:)();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return Future.finish(result:)();
  }
}

uint64_t sub_1008CA3E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v172 = a3;
  uint64_t v150 = type metadata accessor for DispatchTimeInterval();
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v148 = (char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v158 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v147 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v157 = (char *)&v133 - v9;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v145 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  v156 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v133 - v16;
  uint64_t v18 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v18 - 8);
  uint64_t v154 = (uint64_t)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v152 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v146 = (uint64_t)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v159 = (uint64_t (**)(uint64_t))type metadata accessor for BeaconObservation();
  uint64_t v151 = (uint64_t)*(v159 - 1);
  uint64_t v21 = __chkstk_darwin(v159);
  uint64_t v144 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v161 = (char *)&v133 - v23;
  uint64_t v164 = type metadata accessor for Date();
  uint64_t v160 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = (uint64_t)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v174 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v169 = (char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v168 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v28 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v30 = (char *)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = a1;
  uint64_t v31 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v32 = *(void *)v31;
  uint64_t v33 = *(void *)(*(void *)v31 + 16);
  uint64_t v166 = v13;
  if (v33)
  {
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_1007240CC(a2);
    if (v35)
    {
      uint64_t v36 = v12;
      uint64_t v37 = a2;
      uint64_t v38 = *(void *)(*(void *)(v32 + 56) + 8 * v34);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v167 = *(void *)(v38 + 32);
      swift_retain();
      a2 = v37;
      uint64_t v12 = v36;
      uint64_t v13 = v166;
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v167 = 0;
LABEL_6:
  uint64_t v39 = *(void *)v31;
  if (*(void *)(*(void *)v31 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_1007240CC(a2);
    if (v41)
    {
      uint64_t v42 = v12;
      uint64_t v43 = a2;
      uint64_t v44 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v44 + 32) = 0;
      a2 = v43;
      uint64_t v12 = v42;
      uint64_t v13 = v166;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v173 = v26;
  if (v172)
  {
    uint64_t v45 = *(void *)v31;
    uint64_t v46 = *(void *)(*(void *)v31 + 16);
    swift_errorRetain();
    if (v46)
    {
      swift_bridgeObjectRetain();
      unint64_t v47 = sub_1007240CC(a2);
      if (v48)
      {
        uint64_t v49 = *(void *)(*(void *)(v45 + 56) + 8 * v47);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void *)(v49 + 40);
        swift_retain();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = 0;
      }
    }
    uint64_t v67 = *(void *)v31;
    if (*(void *)(*(void *)v31 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v68 = sub_1007240CC(a2);
      if (v69)
      {
        uint64_t v70 = *(void *)(*(void *)(v67 + 56) + 8 * v68);
        swift_retain();
        swift_bridgeObjectRelease();
        *(void *)(v70 + 40) = 0;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_101342130;
    uint64_t v72 = v172;
    swift_getErrorValue();
    uint64_t v73 = Error.localizedDescription.getter();
    uint64_t v75 = v74;
    *(void *)(v71 + 56) = &type metadata for String;
    *(void *)(v71 + 64) = sub_10000B4CC();
    *(void *)(v71 + 32) = v73;
    *(void *)(v71 + 40) = v75;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10000584C();
    uint64_t v76 = v165;
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for DispatchQoS.QoSClass.default(_:), v165);
    uint64_t v77 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v76);
    uint64_t v78 = (void *)swift_allocObject();
    v78[2] = v167;
    v78[3] = v72;
    v78[4] = v46;
    v180 = sub_1008DB02C;
    uint64_t v181 = v78;
    aBlock = _NSConcreteStackBlock;
    uint64_t v177 = 1107296256;
    v178 = sub_1004B5480;
    v179 = &unk_1015DA998;
    uint64_t v79 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    uint64_t v80 = v168;
    static DispatchQoS.unspecified.getter();
    uint64_t v175 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v81 = v169;
    uint64_t v82 = v171;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v79);
    swift_release();

    swift_errorRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v174 + 8))(v81, v82);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v80, v170);
  }
  else
  {
    id v139 = v17;
    uint64_t v172 = v6;
    static os_log_type_t.default.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v50 = v163;
    static Date.trustedNow.getter(v163);
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v52 = (uint64_t)v161;
    uint64_t v143 = v12;
    uint64_t v142 = v13 + 16;
    uint64_t v141 = v51;
    v51(v161, (char *)a2, v12);
    uint64_t v53 = v159;
    uint64_t v54 = v52 + *((int *)v159 + 5);
    uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 16);
    v138(v54, v50, v164);
    *(unsigned char *)(v52 + *((int *)v53 + 6)) = 25;
    uint64_t v55 = a2;
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v56 = qword_10170E330;
    uint64_t v57 = sub_10000588C(&qword_10163A778);
    uint64_t v58 = *(void *)(v151 + 72);
    uint64_t v59 = *(unsigned __int8 *)(v151 + 80);
    uint64_t v60 = (v59 + 32) & ~v59;
    uint64_t v136 = v57;
    uint64_t v135 = v60 + v58;
    uint64_t v134 = v59 | 7;
    uint64_t v61 = swift_allocObject();
    long long v133 = xmmword_101342130;
    *(_OWORD *)(v61 + 16) = xmmword_101342130;
    uint64_t v137 = v60;
    sub_1008DA314(v52, v61 + v60, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v62 = type metadata accessor for Transaction();
    __chkstk_darwin(v62);
    *((void *)&v133 - 4) = v56;
    *((void *)&v133 - 3) = v61;
    *((void *)&v133 - 2) = 0;
    *((void *)&v133 - 1) = 0;
    uint64_t v151 = v63;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v64 = v154;
    sub_100ACD178(v154);
    swift_release();
    uint64_t v65 = v153;
    int v66 = v152[6](v64, 1, v153);
    uint64_t v140 = v55;
    if (v66 == 1)
    {
      sub_10001DAB4(v64, &qword_10163B9F0);
    }
    else
    {
      uint64_t v83 = v64;
      uint64_t v84 = v146;
      sub_1008DA39C(v83, v146, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v85 = v84 + *(int *)(v65 + 28);
      uint64_t v86 = v145;
      sub_10001D074(v85, v145, &qword_101638CF0);
      uint64_t v87 = v143;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v86, 1, v143) == 1)
      {
        sub_1008DA404(v84, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_10001DAB4(v86, &qword_101638CF0);
      }
      else
      {
        unint64_t v88 = v139;
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v139, v86, v87);
        uint64_t v154 = 0;
        uint64_t v89 = qword_10170E330;
        uint64_t v90 = (uint64_t)v144;
        v141(v144, v88, v87);
        uint64_t v91 = v159;
        v138(v90 + *((int *)v159 + 5), v163, v164);
        *(unsigned char *)(v90 + *((int *)v91 + 6)) = 25;
        uint64_t v92 = swift_allocObject();
        *(_OWORD *)(v92 + 16) = v133;
        uint64_t v93 = sub_1008DA314(v90, v92 + v137, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        __chkstk_darwin(v93);
        *((void *)&v133 - 4) = v89;
        *((void *)&v133 - 3) = v92;
        *((void *)&v133 - 2) = 0;
        *((void *)&v133 - 1) = 0;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
        sub_1008DA404(v90, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        (*(void (**)(char *, uint64_t))(v166 + 8))(v88, v87);
        sub_1008DA404(v146, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
    }
    sub_10000584C();
    uint64_t v94 = v165;
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for DispatchQoS.QoSClass.default(_:), v165);
    uint64_t v95 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v94);
    uint64_t v96 = swift_allocObject();
    *(void *)(v96 + 16) = v167;
    v180 = sub_1008DACB4;
    uint64_t v181 = (void *)v96;
    aBlock = _NSConcreteStackBlock;
    uint64_t v177 = 1107296256;
    v178 = sub_1004B5480;
    v179 = &unk_1015DA8F8;
    uint64_t v97 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v98 = v168;
    static DispatchQoS.unspecified.getter();
    uint64_t v175 = _swiftEmptyArrayStorage;
    uint64_t v99 = sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v100 = sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v101 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v102 = v169;
    uint64_t v153 = v101;
    uint64_t v103 = v171;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v97);

    uint64_t v104 = v174 + 8;
    uint64_t v105 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v174 + 8);
    ((void (*)(char *, uint64_t))v105)(v102, v103);
    uint64_t v106 = v173 + 8;
    uint64_t v151 = *(void *)(v173 + 8);
    ((void (*)(char *, uint64_t))v151)(v98, v170);
    swift_release();
    uint64_t v107 = *(void *)v31;
    uint64_t v108 = *(void *)(*(void *)v31 + 16);
    uint64_t v173 = v106;
    uint64_t v174 = v104;
    uint64_t v165 = v99;
    unint64_t v159 = &v178;
    uint64_t v154 = v100;
    uint64_t v152 = v105;
    if (v108)
    {
      swift_bridgeObjectRetain();
      uint64_t v109 = v140;
      unint64_t v110 = sub_1007240CC(v140);
      if (v111)
      {
        uint64_t v112 = *(void *)(*(void *)(v107 + 56) + 8 * v110);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v113 = *(void *)(v112 + 40);
        swift_retain();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v113 = 0;
      }
    }
    else
    {
      uint64_t v113 = 0;
      uint64_t v109 = v140;
    }
    uint64_t v114 = v150;
    uint64_t v115 = v149;
    id v116 = v148;
    uint64_t v117 = v147;
    static DispatchTime.now()();
    *id v116 = 40;
    (*(void (**)(void *, void, uint64_t))(v115 + 104))(v116, enum case for DispatchTimeInterval.seconds(_:), v114);
    char v118 = v157;
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v115 + 8))(v116, v114);
    uint64_t v158 = *(void *)(v158 + 8);
    ((void (*)(char *, uint64_t))v158)(v117, v172);
    uint64_t v119 = v162;
    uint64_t v150 = *(void *)&v162[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    uint64_t v120 = v156;
    uint64_t v121 = v109;
    uint64_t v122 = v143;
    v141(v156, (char *)v121, v143);
    uint64_t v123 = v166;
    unint64_t v124 = (*(unsigned __int8 *)(v166 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80);
    unint64_t v125 = (v155 + v124 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v126 = swift_allocObject();
    *(void *)(v126 + 16) = v119;
    (*(void (**)(unint64_t, char *, uint64_t))(v123 + 32))(v126 + v124, v120, v122);
    *(void *)(v126 + v125) = v113;
    v180 = sub_1008DAFC8;
    uint64_t v181 = (void *)v126;
    aBlock = _NSConcreteStackBlock;
    uint64_t v177 = 1107296256;
    v178 = sub_1004B5480;
    v179 = &unk_1015DA948;
    uint64_t v127 = _Block_copy(&aBlock);
    swift_retain();
    id v128 = v119;
    uint64_t v129 = v168;
    static DispatchQoS.unspecified.getter();
    uint64_t v175 = _swiftEmptyArrayStorage;
    uint64_t v130 = v169;
    uint64_t v131 = v171;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v127);
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v152)(v130, v131);
    ((void (*)(char *, uint64_t))v151)(v129, v170);
    ((void (*)(char *, uint64_t))v158)(v118, v172);
    sub_1008DA404((uint64_t)v161, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v163, v164);
  }
  return swift_release();
}

uint64_t sub_1008CB9FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *v13;
  if (*(void *)(*v13 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1007240CC(a2);
    if (v17)
    {
      uint64_t v18 = *(void *)(v15 + 56);
      uint64_t v32 = v6;
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v19 + 40);
      swift_retain();
      uint64_t result = swift_release();
      if (v20)
      {
        aBlock[0] = v20;
        if (a3)
        {
          uint64_t v39 = a3;
          sub_10000588C(&qword_101651180);
          sub_100062734((unint64_t *)&unk_1016511D0, &qword_101651180);
          swift_retain_n();
          char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          swift_release();
          if (v21)
          {
            static os_log_type_t.error.getter();
            if (qword_101637278 != -1) {
              swift_once();
            }
            os_log(_:dso:log:_:_:)();
            uint64_t v22 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            void *v22 = 0;
            v22[1] = 0;
            swift_unknownObjectRelease();
            uint64_t v23 = *v13;
            if (*(void *)(*v13 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v24 = sub_1007240CC(a2);
              if (v25)
              {
                uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
                swift_retain();
                swift_bridgeObjectRelease();
                *(void *)(v26 + 40) = 0;
                swift_release();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            sub_10000584C();
            uint64_t v27 = v33;
            (*(void (**)(char *, void, uint64_t))(v33 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v10);
            uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
            (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
            aBlock[4] = sub_1008D4AA4;
            aBlock[5] = v20;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            void aBlock[2] = sub_1004B5480;
            aBlock[3] = &unk_1015DA9C0;
            uint64_t v29 = _Block_copy(aBlock);
            swift_retain();
            static DispatchQoS.unspecified.getter();
            uint64_t v39 = _swiftEmptyArrayStorage;
            sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            uint64_t v30 = v35;
            uint64_t v31 = v32;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v29);
            swift_release();

            (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v31);
            (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v36);
          }
        }
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008CBF7C()
{
  type metadata accessor for CommandError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Future.finish(error:)();
}

uint64_t sub_1008CC030(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
    swift_beginAccess();
    uint64_t v19 = *v18;
    if (*(void *)(v19 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_1007240CC(a1);
      if (v21)
      {
        uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v23 = *(void *)(v22 + 16);
        char v24 = *(unsigned char *)(v22 + 24);
        swift_release();
        if ((v24 & 1) == 0 && v23 == 2)
        {
          swift_retain();
          sub_100AE381C(a1, (uint64_t)v6);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          {
            sub_10001DAB4((uint64_t)v6, &qword_1016511E0);
          }
          else
          {
            sub_1008DA39C((uint64_t)v6, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
            int v25 = v10[*(int *)(v7 + 52)];
            sub_1008DA404((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
            if (v25 == 1) {
              return 1;
            }
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008CC350(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v144 = (void *)type metadata accessor for DispatchTimeInterval();
  uint64_t v143 = *(v144 - 1);
  __chkstk_darwin(v144);
  uint64_t v142 = (char **)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v158 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v158 - 8);
  uint64_t v8 = __chkstk_darwin(v158);
  uint64_t v10 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v152 = (char *)&v132 - v11;
  uint64_t v138 = type metadata accessor for BeaconObservation();
  uint64_t v139 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v149 = (uint64_t)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for Date();
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v147 = (uint64_t)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v165 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v15 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v164 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v153 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v162 - 8);
  uint64_t v20 = __chkstk_darwin(v162);
  uint64_t v141 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v135 = (char *)&v132 - v23;
  uint64_t v140 = v24;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v132 - v25;
  uint64_t v151 = a1;
  uint64_t v27 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v28 = *(void *)v27;
  uint64_t v29 = *(void *)(*(void *)v27 + 16);
  uint64_t v163 = a2;
  uint64_t v145 = v7;
  if (v29)
  {
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_1007240CC(a2);
    if (v31)
    {
      uint64_t v32 = *(void *)(*(void *)(v28 + 56) + 8 * v30);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v159 = *(void *)(v32 + 32);
      swift_retain();
      a2 = v163;
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v159 = 0;
LABEL_6:
  uint64_t v33 = a3;
  uint64_t v34 = *(void *)v27;
  if (*(void *)(*(void *)v27 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v35 = sub_1007240CC(a2);
    if (v36)
    {
      uint64_t v37 = *(void *)(*(void *)(v34 + 56) + 8 * v35);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v37 + 32) = 0;
      a2 = v163;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v38 = *(void *)v27;
  if (*(void *)(*(void *)v27 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v39 = sub_1007240CC(a2);
    if (v40)
    {
      uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v156 = *(void *)(v41 + 40);
      swift_retain();
      a2 = v163;
      swift_release();
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v156 = 0;
LABEL_15:
  uint64_t v160 = v16;
  if (a3)
  {
    uint64_t v42 = *(void *)v27;
    uint64_t v43 = *(void *)(*(void *)v27 + 16);
    swift_errorRetain();
    if (v43)
    {
      swift_bridgeObjectRetain();
      unint64_t v44 = sub_1007240CC(a2);
      if (v45)
      {
        uint64_t v46 = *(void *)(*(void *)(v42 + 56) + 8 * v44);
        swift_retain();
        swift_bridgeObjectRelease();
        *(void *)(v46 + 40) = 0;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (qword_101637318 != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    sub_100010324(v59, (uint64_t)qword_10170F080);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      uint64_t v146 = v15;
      *(_DWORD *)uint64_t v62 = 136446210;
      uint64_t v63 = v18;
      swift_getErrorValue();
      uint64_t v64 = Error.localizedDescription.getter();
      uint64_t v166 = sub_1008FA0F0(v64, v65, &aBlock);
      uint64_t v66 = v159;
      uint64_t v67 = v63;
      unint64_t v68 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "#Durian: Unauthorized playSound started with error - %{public}s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v67 = v18;
      uint64_t v66 = v159;
      unint64_t v68 = v15;
    }
    sub_10000584C();
    uint64_t v69 = v154;
    uint64_t v70 = v153;
    uint64_t v71 = v155;
    (*(void (**)(char *, void, uint64_t))(v154 + 104))(v153, enum case for DispatchQoS.QoSClass.default(_:), v155);
    uint64_t v72 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    uint64_t v73 = (void *)swift_allocObject();
    v73[2] = v66;
    v73[3] = v33;
    v73[4] = v156;
    uint64_t v171 = sub_1008DB82C;
    uint64_t v172 = v73;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v168 = 1107296256;
    uint64_t v169 = sub_1004B5480;
    uint64_t v170 = &unk_1015DA808;
    uint64_t v74 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v75 = v161;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v74);

    swift_errorRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v165 + 8))(v68, v75);
    (*(void (**)(char *, uint64_t))(v164 + 8))(v67, v160);
  }
  else
  {
    if (qword_101637318 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = sub_100010324(v47, (uint64_t)qword_10170F080);
    uint64_t v49 = v157;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 16);
    uint64_t v137 = v157 + 16;
    uint64_t v136 = v50;
    v50((uint64_t)v26, a2, v162);
    uint64_t v133 = v48;
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v146 = v15;
    uint64_t v134 = v18;
    if (v53)
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v132 = v10;
      *(_DWORD *)uint64_t v54 = 141558275;
      uint64_t v166 = 1752392040;
      uint64_t aBlock = v55;
      uint64_t v56 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v54 + 12) = 2081;
      sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v166 = sub_1008FA0F0(v57, v58, &aBlock);
      uint64_t v15 = v146;
      uint64_t v18 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v157 + 8))(v26, v56);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "#Durian: Unauthorized playSound started for %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      uint64_t v10 = v132;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v162);
    }

    uint64_t v76 = v147;
    static Date.trustedNow.getter(v147);
    uint64_t v77 = v149;
    uint64_t v78 = v163;
    v136(v149, v163, v162);
    uint64_t v79 = v138;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v77 + *(int *)(v138 + 20), v76, v150);
    *(unsigned char *)(v77 + *(int *)(v79 + 24)) = 25;
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v80 = qword_10170E330;
    sub_10000588C(&qword_10163A778);
    unint64_t v81 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_101342130;
    sub_1008DA314(v77, v82 + v81, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v83 = type metadata accessor for Transaction();
    __chkstk_darwin(v83);
    *(&v132 - 4) = (char *)v80;
    *(&v132 - 3) = (char *)v82;
    *(&v132 - 2) = 0;
    *(&v132 - 1) = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    sub_10000584C();
    uint64_t v84 = v154;
    uint64_t v85 = v153;
    uint64_t v86 = v155;
    (*(void (**)(char *, void, uint64_t))(v154 + 104))(v153, enum case for DispatchQoS.QoSClass.default(_:), v155);
    uint64_t v87 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
    uint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = v159;
    uint64_t v171 = sub_1008DACB4;
    uint64_t v172 = (void *)v88;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v168 = 1107296256;
    uint64_t v169 = sub_1004B5480;
    uint64_t v170 = &unk_1015DA768;
    uint64_t v89 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v90 = sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v91 = sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v92 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v154 = v91;
    uint64_t v153 = (char *)v92;
    uint64_t v93 = v161;
    uint64_t v155 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v89);

    uint64_t v94 = v165 + 8;
    uint64_t v139 = *(void *)(v165 + 8);
    ((void (*)(char *, uint64_t))v139)(v15, v93);
    uint64_t v95 = *(void (**)(char *, uint64_t))(v164 + 8);
    v164 += 8;
    uint64_t v138 = (uint64_t)v95;
    v95(v18, v160);
    swift_release();
    char v96 = sub_1008CC030(v78);
    uint64_t v165 = v94;
    if (v96)
    {
      uint64_t v97 = v135;
      uint64_t v98 = v162;
      v136((uint64_t)v135, v78, v162);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        uint64_t v133 = v102;
        *(_DWORD *)uint64_t v101 = 141558531;
        uint64_t v166 = 1752392040;
        uint64_t aBlock = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v101 + 12) = 2081;
        sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v166 = sub_1008FA0F0(v103, v104, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v157 + 8))(v97, v98);
        *(_WORD *)(v101 + 22) = 2048;
        uint64_t v166 = 14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "#Durian: Forcing play sound complete future for %{private,mask.hash}s in %ld seconds.", (uint8_t *)v101, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v157 + 8))(v97, v98);
      }

      uint64_t v109 = v145;
      static DispatchTime.now()();
      char v111 = v142;
      *uint64_t v142 = 14;
      uint64_t v112 = v143;
      uint64_t v113 = v144;
      (*(void (**)(void *, void, void *))(v143 + 104))(v111, enum case for DispatchTimeInterval.seconds(_:), v144);
      uint64_t v108 = v152;
      + infix(_:_:)();
      (*(void (**)(void *, void *))(v112 + 8))(v111, v113);
      uint64_t v144 = *(void **)(v109 + 8);
      ((void (*)(char *, uint64_t))v144)(v10, v158);
      unint64_t v110 = v10;
      uint64_t v135 = 0;
      uint64_t v142 = 0;
    }
    else
    {
      static DispatchTime.now()();
      uint64_t v105 = v142;
      *uint64_t v142 = 40;
      uint64_t v106 = v143;
      uint64_t v107 = v144;
      (*(void (**)(void *, void, void *))(v143 + 104))(v105, enum case for DispatchTimeInterval.seconds(_:), v144);
      uint64_t v108 = v152;
      + infix(_:_:)();
      (*(void (**)(void *, void *))(v106 + 8))(v105, v107);
      uint64_t v109 = v145;
      uint64_t v144 = *(void **)(v145 + 8);
      ((void (*)(char *, uint64_t))v144)(v10, v158);
      uint64_t v142 = (void *)0x800000010140AEB0;
      unint64_t v110 = v10;
      uint64_t v135 = (char *)0xD00000000000001FLL;
    }
    uint64_t v114 = v151;
    uint64_t v143 = *(void *)&v151[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v110, v108, v158);
    uint64_t v115 = v141;
    uint64_t v116 = v162;
    v136((uint64_t)v141, v163, v162);
    uint64_t v117 = v157;
    unint64_t v118 = (*(unsigned __int8 *)(v157 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
    unint64_t v119 = (v140 + v118 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v120 = swift_allocObject();
    *(void *)(v120 + 16) = v114;
    (*(void (**)(unint64_t, char *, uint64_t))(v117 + 32))(v120 + v118, v115, v116);
    *(void *)(v120 + v119) = v156;
    uint64_t v121 = (void *)(v120 + ((v119 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v122 = v142;
    void *v121 = v135;
    v121[1] = v122;
    uint64_t v171 = sub_1008DAEDC;
    uint64_t v172 = (void *)v120;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v168 = 1107296256;
    uint64_t v169 = sub_1004B5480;
    uint64_t v170 = &unk_1015DA7B8;
    uint64_t v123 = _Block_copy(&aBlock);
    swift_retain();
    id v124 = v114;
    unint64_t v125 = v134;
    static DispatchQoS.unspecified.getter();
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v126 = v146;
    uint64_t v127 = v161;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v123);
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v139)(v126, v127);
    ((void (*)(char *, uint64_t))v138)(v125, v160);
    id v128 = v110;
    uint64_t v129 = v158;
    uint64_t v130 = (void (*)(char *, uint64_t))v144;
    ((void (*)(char *, uint64_t))v144)(v128, v158);
    v130(v152, v129);
    sub_1008DA404(v149, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v150);
  }
  return swift_release();
}

uint64_t sub_1008CDA9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v60 = a4;
  unint64_t v61 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v58 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v56 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v19 = *v17;
  if (*(void *)(*v17 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_1007240CC(a2);
    if (v21)
    {
      uint64_t v22 = *(void *)(v19 + 56);
      uint64_t v55 = v8;
      uint64_t v23 = *(void *)(v22 + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(v23 + 40);
      swift_retain();
      uint64_t result = swift_release();
      if (v24)
      {
        aBlock[0] = v24;
        if (a3)
        {
          uint64_t v63 = a3;
          sub_10000588C(&qword_101651180);
          sub_100062734((unint64_t *)&unk_1016511D0, &qword_101651180);
          swift_retain_n();
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          swift_release();
          if (v25)
          {
            uint64_t v53 = v24;
            if (qword_101637318 != -1) {
              swift_once();
            }
            uint64_t v26 = type metadata accessor for Logger();
            sub_100010324(v26, (uint64_t)qword_10170F080);
            unint64_t v27 = v61;
            swift_bridgeObjectRetain_n();
            uint64_t v28 = Logger.logObject.getter();
            os_log_type_t v29 = static os_log_type_t.error.getter();
            int v30 = v29;
            uint64_t v54 = v28;
            if (os_log_type_enabled(v28, v29))
            {
              int v52 = v30;
              char v31 = (uint8_t *)swift_slowAlloc();
              uint64_t v32 = swift_slowAlloc();
              uint64_t v51 = v32;
              uint64_t v50 = v31;
              *(_DWORD *)char v31 = 136315138;
              aBlock[0] = v32;
              uint64_t v33 = v60;
              if (!v27) {
                uint64_t v33 = 0;
              }
              uint64_t v48 = v33;
              if (v27) {
                unint64_t v34 = v27;
              }
              else {
                unint64_t v34 = 0xE000000000000000;
              }
              uint64_t v49 = v31 + 4;
              swift_bridgeObjectRetain();
              uint64_t v63 = (void *)sub_1008FA0F0(v48, v34, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              unint64_t v35 = v54;
              _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v52, "#Durian: Finished waiting for Unauthorized play sound to complete. %s", v50, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            char v36 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            *char v36 = 0;
            v36[1] = 0;
            swift_unknownObjectRelease();
            uint64_t v37 = *v17;
            if (*(void *)(*v17 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v38 = sub_1007240CC(a2);
              if (v39)
              {
                uint64_t v40 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
                swift_retain();
                swift_bridgeObjectRelease();
                *(void *)(v40 + 40) = 0;
                swift_release();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            sub_10000584C();
            uint64_t v41 = v56;
            (*(void (**)(char *, void, uint64_t))(v56 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v14);
            uint64_t v42 = (void *)static OS_dispatch_queue.global(qos:)();
            (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v14);
            uint64_t v43 = (void *)swift_allocObject();
            unint64_t v44 = v61;
            v43[2] = v60;
            v43[3] = v44;
            v43[4] = v53;
            aBlock[4] = (uint64_t)sub_1008DAF38;
            aBlock[5] = (uint64_t)v43;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            void aBlock[2] = (uint64_t)sub_1004B5480;
            aBlock[3] = (uint64_t)&unk_1015DA858;
            char v45 = _Block_copy(aBlock);
            swift_retain();
            swift_bridgeObjectRetain();
            static DispatchQoS.unspecified.getter();
            uint64_t v63 = _swiftEmptyArrayStorage;
            sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            uint64_t v46 = v55;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v45);
            swift_release();

            (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v46);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
          }
        }
        return swift_release();
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008CE1A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for CommandError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
  else
  {
    Future.finish(result:)();
  }
}

uint64_t sub_1008CE278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*(void *)(*v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v19 + 40);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = 0;
LABEL_6:
  uint64_t v21 = *v15;
  if (!*(void *)(*v15 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1007240CC(a2);
  if (v23)
  {
    uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
    swift_retain();
    swift_bridgeObjectRelease();
    *(void *)(v24 + 40) = 0;
    swift_release();
    swift_release();
LABEL_9:
    if (a3) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  if (a3)
  {
LABEL_10:
    uint64_t v52 = v20;
    uint64_t v25 = *v15;
    uint64_t v26 = *(void *)(*v15 + 16);
    swift_errorRetain();
    if (v26)
    {
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1007240CC(a2);
      if (v28)
      {
        uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * v27);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v30 = *(void *)(v29 + 32);
        swift_retain();
        swift_release();
LABEL_19:
        uint64_t v37 = *v15;
        if (*(void *)(*v15 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v38 = sub_1007240CC(a2);
          if (v39)
          {
            uint64_t v40 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v40 + 32) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v53 = v10;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_101342130;
        swift_getErrorValue();
        uint64_t v42 = Error.localizedDescription.getter();
        uint64_t v44 = v43;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = sub_10000B4CC();
        *(void *)(v41 + 32) = v42;
        *(void *)(v41 + 40) = v44;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
        char v45 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        uint64_t v46 = (void *)swift_allocObject();
        v46[2] = v30;
        v46[3] = a3;
        v46[4] = v52;
        uint64_t v64 = sub_1008DB82C;
        unint64_t v65 = v46;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v61 = 1107296256;
        uint64_t v62 = sub_1004B5480;
        uint64_t v63 = &unk_1015DA6C8;
        uint64_t v47 = _Block_copy(&aBlock);
        swift_errorRetain();
        swift_retain();
        swift_retain();
        uint64_t v48 = v53;
        static DispatchQoS.unspecified.getter();
        uint64_t v59 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v49 = v54;
        uint64_t v50 = v58;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v47);

        swift_errorRelease();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v49, v50);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = 0;
    goto LABEL_19;
  }
LABEL_14:
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  char v31 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v20;
  uint64_t v64 = sub_1008DACB4;
  unint64_t v65 = (void *)v32;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  uint64_t v62 = sub_1004B5480;
  uint64_t v63 = &unk_1015DA678;
  uint64_t v33 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  unint64_t v34 = v10;
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  unint64_t v35 = v54;
  uint64_t v36 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);
  swift_release();

  (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v56);
  return swift_release();
}

uint64_t sub_1008CEB10(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a1;
  uint64_t v15 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess();
  uint64_t v16 = *(void *)v15;
  if (*(void *)(*(void *)v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1007240CC(a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v19 + 40);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = 0;
LABEL_6:
  uint64_t v21 = *(void *)v15;
  if (!*(void *)(*(void *)v15 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1007240CC(a2);
  if (v23)
  {
    uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
    swift_retain();
    swift_bridgeObjectRelease();
    *(void *)(v24 + 40) = 0;
    swift_release();
    swift_release();
LABEL_9:
    if (a3) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  if (a3)
  {
LABEL_10:
    uint64_t v52 = v20;
    uint64_t v25 = *(void *)v15;
    uint64_t v26 = *(void *)(*(void *)v15 + 16);
    swift_errorRetain();
    if (v26)
    {
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1007240CC(a2);
      if (v28)
      {
        uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * v27);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v30 = *(void *)(v29 + 32);
        swift_retain();
        swift_release();
LABEL_19:
        uint64_t v37 = *(void *)v15;
        if (*(void *)(*(void *)v15 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v38 = sub_1007240CC(a2);
          if (v39)
          {
            uint64_t v40 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(v40 + 32) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v53 = v10;
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_101342130;
        swift_getErrorValue();
        uint64_t v42 = Error.localizedDescription.getter();
        uint64_t v44 = v43;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = sub_10000B4CC();
        *(void *)(v41 + 32) = v42;
        *(void *)(v41 + 40) = v44;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_10000584C();
        (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
        char v45 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        uint64_t v46 = (void *)swift_allocObject();
        v46[2] = v30;
        v46[3] = a3;
        v46[4] = v52;
        uint64_t v64 = sub_1008DB82C;
        unint64_t v65 = v46;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v61 = 1107296256;
        uint64_t v62 = sub_1004B5480;
        uint64_t v63 = &unk_1015DA5D8;
        uint64_t v47 = _Block_copy(&aBlock);
        swift_errorRetain();
        swift_retain();
        swift_retain();
        uint64_t v48 = v53;
        static DispatchQoS.unspecified.getter();
        uint64_t v59 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v49 = v54;
        uint64_t v50 = v58;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v47);

        swift_errorRelease();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v49, v50);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = 0;
    goto LABEL_19;
  }
LABEL_14:
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  char v31 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v20;
  uint64_t v64 = sub_1008DACB4;
  unint64_t v65 = (void *)v32;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  uint64_t v62 = sub_1004B5480;
  uint64_t v63 = &unk_1015DA588;
  uint64_t v33 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  unint64_t v34 = v10;
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  unint64_t v35 = v54;
  uint64_t v36 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v56);
  swift_release();
  sub_1008C1ED4(a2);
  return swift_release();
}

uint64_t sub_1008CF3C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result) {
    uint64_t result = Future.finish(error:)();
  }
  if (a3) {
    return Future.finish(error:)();
  }
  return result;
}

uint64_t sub_1008CF410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = type metadata accessor for BeaconObservation();
  *(void *)&long long v77 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v86 = *(void *)(v8 - 8);
  uint64_t v87 = v8;
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = a1;
  uint64_t v14 = a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers;
  swift_beginAccess();
  uint64_t v15 = *(void *)v14;
  if (*(void *)(*(void *)v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1007240CC(a2);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(v18 + 48);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = 0;
LABEL_6:
  uint64_t v20 = *(void *)v14;
  if (*(void *)(*(void *)v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1007240CC(a2);
    if (v22)
    {
      uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(v23 + 32);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = 0;
LABEL_11:
  uint64_t v25 = *(void *)v14;
  if (*(void *)(*(void *)v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1007240CC(a2);
    if (v27)
    {
      uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v28 + 40);
      swift_retain();
      swift_release();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = 0;
LABEL_16:
  uint64_t v83 = v29;
  uint64_t v88 = v7;
  uint64_t v78 = v24;
  if (v24 | v29)
  {
    sub_10000584C();
    uint64_t v30 = v81;
    char v31 = v80;
    uint64_t v32 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
    uint64_t v74 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v83;
    *(void *)(v33 + 16) = v24;
    *(void *)(v33 + 24) = v34;
    uint64_t v94 = (uint64_t (*)())sub_1008DAD40;
    uint64_t v95 = v33;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v91 = 1107296256;
    uint64_t v92 = sub_1004B5480;
    uint64_t v93 = &unk_1015DA4E8;
    unint64_t v35 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v89 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    uint64_t v75 = v10;
    uint64_t v36 = a3;
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v37 = v19;
    unint64_t v38 = v85;
    uint64_t v39 = v87;
    uint64_t v7 = v88;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v40 = (void *)v74;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v35);

    uint64_t v41 = v38;
    uint64_t v19 = v37;
    uint64_t v42 = v39;
    a3 = v36;
    uint64_t v43 = v84;
    uint64_t v10 = v75;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v43);
    swift_release();
  }
  uint64_t v44 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v7, a2, v44);
  uint64_t v45 = v76;
  static Date.trustedNow.getter((uint64_t)&v7[*(int *)(v76 + 20)]);
  v7[*(int *)(v45 + 24)] = 27;
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v46 = qword_10170E330;
  sub_10000588C(&qword_10163A778);
  unint64_t v47 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  uint64_t v48 = swift_allocObject();
  long long v77 = xmmword_101342130;
  *(_OWORD *)(v48 + 16) = xmmword_101342130;
  sub_1008DA314((uint64_t)v7, v48 + v47, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v49 = type metadata accessor for Transaction();
  __chkstk_darwin(v49);
  *(&v73 - 4) = v46;
  *(&v73 - 3) = v48;
  *(&v73 - 2) = 0;
  *(&v73 - 1) = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v76 = a2;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = v77;
    swift_getErrorValue();
    uint64_t v51 = Error.localizedDescription.getter();
    uint64_t v53 = v52;
    *(void *)(v50 + 56) = &type metadata for String;
    *(void *)(v50 + 64) = sub_10000B4CC();
    *(void *)(v50 + 32) = v51;
    *(void *)(v50 + 40) = v53;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10000584C();
    uint64_t v54 = v81;
    uint64_t v55 = v80;
    uint64_t v56 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
    uint64_t v57 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v19;
    *(void *)(v58 + 24) = a3;
    uint64_t v94 = sub_1008DACE4;
    uint64_t v95 = v58;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v91 = 1107296256;
    uint64_t v92 = sub_1004B5480;
    uint64_t v93 = &unk_1015DA498;
    uint64_t v59 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v89 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v60 = v85;
    uint64_t v61 = v12;
    uint64_t v62 = v87;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v59);

    swift_release();
    swift_release();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v60, v62);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v61, v84);
    sub_1008DA404((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    swift_release();
    a2 = v76;
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10000584C();
    uint64_t v63 = v81;
    uint64_t v64 = v80;
    uint64_t v65 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
    uint64_t v66 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = v19;
    uint64_t v94 = sub_1008DACB4;
    uint64_t v95 = v67;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v91 = 1107296256;
    uint64_t v92 = sub_1004B5480;
    uint64_t v93 = &unk_1015DA448;
    unint64_t v68 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v89 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v69 = v85;
    uint64_t v70 = v12;
    uint64_t v71 = v87;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v68);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v71);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v70, v84);
    swift_release();
    sub_1008C1ED4(a2);
    swift_release();
    swift_release();
    sub_1008DA404((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  }
  sub_1008D0170(v79, a2);
  return swift_release();
}

uint64_t sub_1008D0170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  if (*(void *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1007240CC(a2);
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v8 + 32) = 0;
      swift_release();
      uint64_t result = swift_release();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1007240CC(a2);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 48) = 0;
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1008D0278(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    type metadata accessor for CommandError(0);
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000028;
    *(void *)(inited + 56) = 0x800000010140AD50;
    sub_10092CEEC(inited);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
  if (a2)
  {
    type metadata accessor for CommandError(0);
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v5 = swift_initStackObject();
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    *(void *)(v5 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v5 + 40) = v6;
    *(void *)(v5 + 72) = &type metadata for String;
    *(void *)(v5 + 48) = 0xD000000000000028;
    *(void *)(v5 + 56) = 0x800000010140AD50;
    sub_10092CEEC(v5);
    sub_1008DB4EC((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Future.finish(error:)();
  }
}

uint64_t sub_1008D0468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 + 16);
  uint64_t v31 = a2;
  if (v17)
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_1007240CC(a2);
    if (v19)
    {
      uint64_t v20 = *(void *)(*(void *)(v16 + 56) + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 56);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = 0;
LABEL_6:
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  char v22 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v32;
  *(void *)(v23 + 24) = v21;
  aBlock[4] = sub_1008DAC7C;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA3A8;
  uint64_t v24 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  swift_release();

  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  uint64_t result = swift_release();
  uint64_t v26 = *v15;
  if (*(void *)(*v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1007240CC(v31);
    if (v28)
    {
      uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v29 + 56) = 0;
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008D08EC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (a2) {
      Future.finish(error:)();
    }
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    if (a2) {
      return Future.finish(result:)();
    }
  }
  return result;
}

uint64_t sub_1008D0AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v41 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v37 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v33 - v11;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170F080);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v38 = a1;
  uint64_t v36 = v14;
  v14(v12, a1, v7);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v34 = v4;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc();
    void v33[2] = v19;
    *(_DWORD *)uint64_t v18 = 141558275;
    uint64_t v45 = 1752392040;
    aBlock[0] = v19;
    uint64_t v35 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    v33[1] = v18 + 14;
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = sub_1008FA0F0(v20, v21, aBlock);
    uint64_t v3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "TagCommandManager handling user stats fetch result. Beacon: %{private,mask.hash}s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v34;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  char v22 = v39;
  uint64_t v35 = *(void *)&v39[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v23 = v37;
  v36(v37, v38, v7);
  unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v25 = (v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v26 + v24, v23, v7);
  uint64_t v27 = v40;
  sub_1008DA8CC(v40, v26 + v25);
  aBlock[4] = (uint64_t)sub_1008DA934;
  aBlock[5] = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_1015DA2B8;
  char v28 = _Block_copy(aBlock);
  id v29 = v22;
  sub_1008DAB70(v27, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA9C4);
  uint64_t v30 = v41;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v31 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v44);
  return swift_release();
}

uint64_t sub_1008D10B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v16 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v37 = v16;
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v45 = a2;
  if (v18)
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1007240CC(a2);
    if (v20)
    {
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v21 + 72);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = 0;
LABEL_6:
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  uint64_t v23 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v24 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v45, v9);
  unint64_t v25 = (*(unsigned __int8 *)(v10 + 80) + 82) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v38;
  sub_1008DA8CC(v38, v26 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v25, (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)(v26 + ((v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v22;
  aBlock[4] = sub_1008DAAE0;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA308;
  char v28 = _Block_copy(aBlock);
  sub_1008DAB70(v27, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA9C4);
  swift_retain();
  id v29 = v39;
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v30 = v42;
  uint64_t v31 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  swift_release();

  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  uint64_t result = swift_release();
  uint64_t v33 = *v37;
  if (*(void *)(*v37 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_1007240CC(v24);
    if (v35)
    {
      uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v36 + 72) = 0;
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008D1644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v4 = a1;
  sub_1008DA8CC(a1, (uint64_t)v43);
  uint64_t v6 = v43[0];
  unint64_t v5 = v43[1];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  sub_1008DA8CC(v4, (uint64_t)v44);
  if (v46)
  {
    uint64_t v14 = *(void *)&v44[0];
    swift_errorRetain();
    if (qword_101637318 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F080);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
    sub_1008DAB70(v4, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA9C4);
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v37 = v14;
    if (v18)
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v38 = v4;
      uint64_t v20 = v19;
      uint64_t v21 = swift_slowAlloc();
      os_log_t v35 = v16;
      uint64_t v22 = (void *)v21;
      uint64_t v36 = swift_slowAlloc();
      *(void *)&long long v47 = v36;
      *(_DWORD *)uint64_t v20 = 138543875;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&v41[0] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v23;
      sub_1008DAB70(v38, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
      sub_1008DAB70(v38, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
      *(_WORD *)(v20 + 12) = 2160;
      *(void *)&v41[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 22) = 2081;
      sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v41[0] = sub_1008FA0F0(v24, v25, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      os_log_t v26 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, v17, "#Durian: Fetch user stats completed with error - %{public}@, device: %{private,mask.hash}s.", (uint8_t *)v20, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v38;
      swift_slowDealloc();

      if (!v39) {
        return sub_1008DAB70(v4, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
      }
      goto LABEL_12;
    }
    sub_1008DAB70(v4, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
    sub_1008DAB70(v4, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

    if (v39) {
LABEL_12:
    }
      Future.finish(error:)();
  }
  else
  {
    long long v49 = v44[2];
    long long v50 = v44[3];
    char v51 = v45;
    long long v47 = v44[0];
    long long v48 = v44[1];
    sub_100037A38(v6, v5);
    if (qword_101637318 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170F080);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, a2, v7);
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v37 = v31;
      *(_DWORD *)uint64_t v30 = 141558275;
      uint64_t v40 = 1752392040;
      *(void *)&v41[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v38 = v4;
      sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_1008FA0F0(v32, v33, (uint64_t *)v41);
      uint64_t v4 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "#Durian: Fetch user stats completed: device: %{private,mask.hash}s.", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }

    if (v39)
    {
      v41[2] = v49;
      v41[3] = v50;
      char v42 = v51;
      v41[0] = v47;
      v41[1] = v48;
      Future.finish(result:)();
    }
  }
  return sub_1008DAB70(v4, (void (*)(void, void, void, void, void, void, void, void, _WORD))sub_1008DA8BC);
}

uint64_t sub_1008D1CF0(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 296) = a2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v3 + 192) = v4;
  *(void *)(v3 + 200) = *(void *)(v4 - 8);
  *(void *)(v3 + 208) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  *(void *)(v3 + 216) = v5;
  *(void *)(v3 + 224) = *(void *)(v5 - 8);
  *(void *)(v3 + 232) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v3 + 240) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 248) = v7;
  *(void *)(v3 + 256) = *(void *)(v7 + 64);
  *(void *)(v3 + 264) = swift_task_alloc();
  return _swift_task_switch(sub_1008D1E74, 0, 0);
}

uint64_t sub_1008D1E74()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639358 + dword_101639358);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1008D1FB0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008D1FB0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1008D20B0, 0, 0);
}

uint64_t sub_1008D20B0()
{
  uint64_t v1 = v0[35];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 8));
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[36] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1008D23F0;
    uint64_t v3 = v0[22];
    char v4 = *((unsigned char *)v0 + 296);
    return sub_10105A6E0(v3, v4);
  }
  else
  {
    uint64_t v6 = v0[33];
    uint64_t v8 = v0[30];
    uint64_t v7 = v0[31];
    uint64_t v9 = v0[29];
    uint64_t v19 = v0[28];
    uint64_t v10 = v0[26];
    uint64_t v20 = v0[27];
    uint64_t v11 = (void *)v0[23];
    uint64_t v17 = v0[24];
    uint64_t v18 = v0[25];
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 16))(v6, v0[22], v8);
    unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v11;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v13 + v12, v6, v8);
    v0[6] = sub_1008DA71C;
    v0[7] = v13;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015DA268;
    uint64_t v14 = _Block_copy(v0 + 2);
    id v15 = v11;
    static DispatchQoS.unspecified.getter();
    v0[21] = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v10, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v9, v20);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_1008D23F0()
{
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_1008DB830;
  }
  else
  {
    uint64_t v1 = sub_1008D2524;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1008D2524()
{
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v4 = v0[29];
  uint64_t v15 = v0[28];
  uint64_t v5 = v0[26];
  uint64_t v16 = v0[27];
  uint64_t v6 = (void *)v0[23];
  uint64_t v13 = v0[24];
  uint64_t v14 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[22], v3);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v8 + v7, v1, v3);
  v0[6] = sub_1008DA71C;
  v0[7] = v8;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015DA268;
  uint64_t v9 = _Block_copy(v0 + 2);
  id v10 = v6;
  static DispatchQoS.unspecified.getter();
  v0[21] = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, v16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1008D27C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_101126F68(a2, (uint64_t)v5);
  sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
  return swift_endAccess();
}

uint64_t sub_1008D2888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  char v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v43 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(*v16 + 16);
  uint64_t v49 = a2;
  if (v18)
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1007240CC(a2);
    if (v20)
    {
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v21 + 64);
      swift_retain();
      a2 = v49;
      swift_release();
      if (!a3) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = 0;
  if (!a3)
  {
LABEL_4:
    swift_retain();
    sub_100ACD178((uint64_t)v15);
    swift_release();
    uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v15, 1, v23);
    sub_10001DAB4((uint64_t)v15, &qword_10163B9F0);
    if (v24 != 1) {
      sub_1008C1ED4(a2);
    }
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    unint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v22;
    aBlock[4] = sub_1008DA494;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015DA1F0;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    char v28 = v43;
    static DispatchQoS.unspecified.getter();
    long long v50 = _swiftEmptyArrayStorage;
    sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_type_t v29 = v45;
    uint64_t v31 = v48;
    uint64_t v30 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v27);
    swift_release();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v31);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v46);
    uint64_t result = swift_release();
    uint64_t v33 = *v16;
    if (*(void *)(*v16 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_1007240CC(v30);
      if ((v35 & 1) == 0) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_18;
    }
    return result;
  }
LABEL_11:
  swift_errorRetain();
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v37 = Error.localizedDescription.getter();
  uint64_t v39 = v38;
  *(void *)(v36 + 56) = &type metadata for String;
  *(void *)(v36 + 64) = sub_10000B4CC();
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v22)
  {
    swift_retain();
    Future.finish(error:)();
    swift_release();
    swift_errorRelease();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_errorRelease();
  }
  uint64_t v40 = v49;
  uint64_t v33 = *v16;
  if (*(void *)(*v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_1007240CC(v40);
    if ((v41 & 1) == 0) {
      return swift_bridgeObjectRelease();
    }
LABEL_18:
    uint64_t v42 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
    swift_retain();
    swift_bridgeObjectRelease();
    *(void *)(v42 + 64) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1008D2F30(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  if (a1) {
    return Future.finish(result:)();
  }
  return result;
}

void sub_1008D2FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v49 = (os_log_t)type metadata accessor for DispatchQoS();
  Class isa = v49[-1].isa;
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BeaconObservation();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1008CC030(a2))
  {
    if (qword_101637318 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170F080);
    os_log_t v49 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v17, "#Durian: AirTag is playing unauthorized sound. Not forcing completion.", v18, 2u);
      swift_slowDealloc();
    }
    os_log_t v19 = v49;

    return;
  }
  uint64_t v45 = v4;
  char v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t v22 = *(void *)(*v20 + 16);
  uint64_t v44 = v5;
  if (!v22) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1007240CC(a2);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v27 = 0;
    goto LABEL_14;
  }
  uint64_t v25 = *(void *)(*(void *)(v21 + 56) + 8 * v23);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v25 + 40);
  swift_retain();
  uint64_t v27 = v26;
  swift_release();
LABEL_14:
  uint64_t v28 = *v20;
  if (*(void *)(*v20 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_1007240CC(a2);
    if (v30)
    {
      uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v31 + 40) = 0;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v32 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v15, a2, v32);
  static Date.trustedNow.getter((uint64_t)&v15[*(int *)(v12 + 20)]);
  v15[*(int *)(v12 + 24)] = 29;
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v33 = qword_10170E330;
  sub_10000588C(&qword_10163A778);
  unint64_t v34 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_101342130;
  sub_1008DA314((uint64_t)v15, v35 + v34, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v36 = type metadata accessor for Transaction();
  __chkstk_darwin(v36);
  *(&v43 - 4) = v33;
  *(&v43 - 3) = v35;
  *(&v43 - 2) = 0;
  *(&v43 - 1) = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v27;
  aBlock[4] = sub_1008DA37C;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA150;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v40 = v46;
  static DispatchQoS.unspecified.getter();
  long long v50 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  char v41 = v48;
  uint64_t v42 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v39);
  swift_release();

  (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v42);
  (*((void (**)(char *, os_log_t))isa + 1))(v40, v49);
  sub_1008DA404((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  swift_release();
}

uint64_t sub_1008D3754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v56 = a4;
  unint64_t v57 = a5;
  uint64_t v55 = a3;
  uint64_t v58 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v54 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess();
  uint64_t v18 = *v17;
  if (*(void *)(*v17 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1007240CC(v58);
    if (v20)
    {
      uint64_t v21 = *(void *)(v18 + 56);
      uint64_t v52 = v11;
      uint64_t v53 = v13;
      uint64_t v22 = v9;
      uint64_t v23 = v6;
      uint64_t v24 = v10;
      uint64_t v25 = v7;
      uint64_t v26 = *(void *)(v21 + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v26 + 96);
      swift_retain();
      uint64_t v28 = v25;
      unint64_t v29 = v53;
      swift_release();
      if (v27)
      {
        sub_10000584C();
        uint64_t v51 = v24;
        uint64_t v30 = v54;
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v14);
        uint64_t v50 = static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
        uint64_t v31 = (void *)swift_allocObject();
        uint64_t v32 = v56;
        v31[2] = v55;
        v31[3] = v27;
        unint64_t v33 = v57;
        v31[4] = v32;
        v31[5] = v33;
        aBlock[4] = sub_1008DA2C0;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1004B5480;
        aBlock[3] = &unk_1015DA0B0;
        unint64_t v34 = _Block_copy(aBlock);
        swift_retain();
        swift_errorRetain();
        sub_1000361E0(v32, v33);
        static DispatchQoS.unspecified.getter();
        uint64_t v59 = _swiftEmptyArrayStorage;
        sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v35 = (void *)v50;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v34);
        swift_release();

        (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v23);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v51);
        uint64_t result = swift_release();
        uint64_t v37 = *v17;
        uint64_t v38 = v58;
        if (!*(void *)(*v17 + 16)) {
          return result;
        }
        swift_bridgeObjectRetain();
        unint64_t v39 = sub_1007240CC(v38);
        if (v40)
        {
          uint64_t v41 = *(void *)(*(void *)(v37 + 56) + 8 * v39);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(void *)(v41 + 96) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_101342130;
  type metadata accessor for UUID();
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v43 = v58;
  uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v46 = v45;
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_10000B4CC();
  *(void *)(v42 + 32) = v44;
  *(void *)(v42 + 40) = v46;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v47 = *v17;
  if (*(void *)(v47 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_1007240CC(v43);
    if (v49)
    {
      uint64_t v41 = *(void *)(*(void *)(v47 + 56) + 8 * v48);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1008D3D74(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v2 = Error.localizedDescription.getter();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_10000B4CC();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    Future.finish(error:)();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return Future.finish(result:)();
  }
}

uint64_t sub_1008D3F84(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(char *, void *, id))
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a3;
  id v15 = a1;
  id v16 = a5;
  a6(v13, a5, v15);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1008D474C(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void (*a7)(uint64_t, unint64_t, char *, void *, id))
{
  uint64_t v24 = a7;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a1;
  id v19 = a6;
  uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  v24(v20, v22, v14, a6, v18);

  sub_10001CFB8(v20, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v25);
}

uint64_t sub_1008D48BC()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D48D4()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C76E0);
}

uint64_t sub_1008D48EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1008D48FC()
{
  return swift_release();
}

uint64_t sub_1008D4908()
{
  return sub_1008DA734(sub_1008C8144);
}

void sub_1008D4920()
{
  sub_1008C8630(v0, 0xD000000000000025, 0x800000010140A2E0);
}

uint64_t sub_1008D4954()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D496C()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C15B8);
}

uint64_t sub_1008D4988()
{
  return sub_1008DA734(sub_1008C34FC);
}

void sub_1008D49A0()
{
  sub_1008C48D0(*(void *)(v0 + 16));
}

uint64_t sub_1008D49C0()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D49D8()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C3A00);
}

uint64_t sub_1008D49F0()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D4A08()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C433C);
}

uint64_t sub_1008D4A20()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008D4A58()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D4A70()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C8738);
}

uint64_t sub_1008D4A8C()
{
  return sub_1008DA734(sub_1008C90C4);
}

void sub_1008D4AA4()
{
}

uint64_t sub_1008D4AC0()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D4AD8()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C69A0);
}

uint64_t sub_1008D4AF4()
{
  return sub_1008DA734(sub_1008C71F4);
}

void sub_1008D4B0C()
{
  sub_1008C8630(v0, 0xD000000000000029, 0x800000010140A6C0);
}

uint64_t sub_1008D4B40()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1008D4C40()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(char **)(v0 + 16);
  unint64_t v6 = *(void (**)(char *, uint64_t))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1008C4E98(v5, v0 + v2, v6, v7, v8);
}

uint64_t sub_1008D4CE8()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008D4D00()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C5D8C);
}

uint64_t sub_1008D4D18()
{
  return sub_1008DB23C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

void sub_1008D4D44()
{
  sub_1008C6428(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1008D4D4C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008D4D84()
{
  return sub_1008C95B0();
}

id sub_1008D4D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue;
  unint64_t v17 = sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  uint64_t v10 = v3;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v3[v18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v10[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_batteryFetchInFlight] = &_swiftEmptySetSingleton;
  uint64_t v11 = &v10[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *(void *)&v10[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers] = _swiftEmptyDictionarySingleton;
  uint64_t v12 = v20;
  *(void *)&v10[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_beaconStore] = v19;
  uint64_t v13 = &v10[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManagerCreator];
  uint64_t v14 = v21;
  *(void *)uint64_t v13 = v12;
  *((void *)v13 + 1) = v14;
  swift_retain();
  swift_retain();

  id v15 = (objc_class *)type metadata accessor for TagCommandManager();
  v22.receiver = v10;
  v22.super_class = v15;
  return [super init];
}

uint64_t sub_1008D5088(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v33 = a5;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  unint64_t v39 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v32 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v33;
  uint64_t v31 = *(void *)&v33[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v13, v10);
  uint64_t v22 = v35;
  *(void *)(v21 + v20) = v34;
  uint64_t v23 = (uint64_t *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v24 = v36;
  *uint64_t v23 = v22;
  v23[1] = v24;
  aBlock[4] = sub_1008DB39C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAAB0;
  uint64_t v25 = _Block_copy(aBlock);
  id v26 = v18;
  swift_errorRetain();
  sub_1000361E0(v22, v24);
  uint64_t v27 = v32;
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v28 = v39;
  uint64_t v29 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v38);
  return swift_release();
}

uint64_t sub_1008D5564(uint64_t a1, uint64_t a2, void *a3)
{
  id v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DB154;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAA10;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  unint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  unint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D5A18(uint64_t a1, uint64_t a2, void *a3)
{
  id v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DAF5C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA8A8;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  unint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  unint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D5ECC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v40 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v36 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v32 - v12;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F080);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v37 = a1;
  uint64_t v35 = v15;
  v15(v13, a1, v8);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = v5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32[2] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v44 = 1752392040;
    aBlock[0] = v20;
    uint64_t v34 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    v32[1] = v19 + 14;
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = sub_1008FA0F0(v21, v22, aBlock);
    uint64_t v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "#Durian: didStartPlayingUnauthorizedSoundOnDevice: %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v33;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v23 = v38;
  uint64_t v34 = *(void *)&v38[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  uint64_t v24 = v36;
  v35(v36, v37, v8);
  unint64_t v25 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v26 + v25, v24, v8);
  *(void *)(v26 + ((v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v39;
  aBlock[4] = (uint64_t)sub_1008DADC8;
  aBlock[5] = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_1015DA718;
  uint64_t v27 = _Block_copy(aBlock);
  id v28 = v23;
  swift_errorRetain();
  uint64_t v29 = v40;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v30 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v4);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return swift_release();
}

uint64_t sub_1008D64BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DAD94;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA628;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  uint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D6970(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DAD60;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA538;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  uint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D6E24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DAC9C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA3F8;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  uint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D72D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DAC38;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA358;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  uint64_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D778C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v49 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - v14;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_100010324(v16, (uint64_t)qword_10170F080);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v43 = v11 + 16;
  v44(v15, a3, v10);
  sub_100037A38(a1, a2);
  swift_errorRetain();
  sub_100037A38(a1, a2);
  swift_errorRetain();
  uint64_t v45 = v17;
  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = a1;
  int v48 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, (os_log_type_t)v48);
  unint64_t v21 = a2;
  unint64_t v22 = a2 >> 60;
  uint64_t v46 = v10;
  uint64_t v42 = v11;
  unint64_t v51 = v21;
  if (v20)
  {
    uint64_t v39 = v18;
    unint64_t v50 = v19;
    uint64_t v47 = a3;
    uint64_t v40 = a5;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    *(void *)uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558787;
    *(void *)&long long v52 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v52 = sub_1008FA0F0(v24, v25, (uint64_t *)v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
    v26(v15, v10);
    *(_WORD *)(v23 + 22) = 2048;
    uint64_t v41 = v26;
    if (v22 <= 0xE)
    {
      a3 = v47;
      switch(v51 >> 62)
      {
        case 1uLL:
          int v35 = v50;
          unint64_t v36 = HIDWORD(v50);
          sub_100037A24(v50, v51);
          LODWORD(v27) = v36 - v35;
          if (__OFSUB__(v36, v35)) {
            __break(1u);
          }
          uint64_t v27 = (int)v27;
          break;
        case 2uLL:
          a3 = *(void *)(v50 + 16);
          uint64_t v37 = *(void *)(v50 + 24);
          sub_100037A24(v50, v51);
          uint64_t v27 = v37 - a3;
          if (!__OFSUB__(v37, a3)) {
            goto LABEL_6;
          }
          __break(1u);
          goto LABEL_24;
        case 3uLL:
LABEL_24:
          sub_100037A24(v50, v51);
          uint64_t v27 = 0;
          break;
        default:
          unsigned __int8 v30 = BYTE6(v51);
          sub_100037A24(v50, v51);
          uint64_t v27 = v30;
          break;
      }
    }
    else
    {
      uint64_t v27 = 0;
LABEL_6:
      a3 = v47;
    }
    *(void *)&long long v52 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100037A24(v50, v51);
    *(_WORD *)(v23 + 32) = 2114;
    if (a4)
    {
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v52 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      *(void *)&long long v52 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = 0;
    }
    uint64_t v31 = v39;
    *uint64_t v38 = v28;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v48, "#Durian: TagCommandManager: didFetchUserStats: %{private,mask.hash}s, statsData: %ld, error: %{public}@.", (uint8_t *)v23, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v29 = v50;
  }
  else
  {
    sub_100037A24(v19, v21);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v11 + 8);
    v41(v15, v10);
    sub_100037A24(v19, v21);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v29 = v19;
  }
  if (v22 <= 0xE)
  {
    unint64_t v33 = v51;
    sub_100037A38(v29, v51);
    sub_1000361E0(v29, v33);
    sub_1010F4B0C(v29, v33, (uint64_t)&v52);
    *(_OWORD *)uint64_t v59 = v52;
    *(void *)&v59[16] = v53 | ((unint64_t)v54 << 16);
    long long v60 = v55;
    *(_OWORD *)uint64_t v61 = v56;
    *(void *)&v61[16] = v57;
    *(_WORD *)&v61[24] = v58;
    sub_100091B38((uint64_t)&v52);
    sub_1008D0AA8(a3, (uint64_t)v59);
    sub_100037A24(v29, v33);
    sub_1003DD160((uint64_t)&v52);
    return sub_1003DD160((uint64_t)&v52);
  }
  else
  {
    uint64_t v32 = a4;
    if (!a4)
    {
      sub_1008DABCC();
      uint64_t v32 = swift_allocError();
    }
    *(void *)uint64_t v59 = v32;
    *(_OWORD *)&v59[8] = 0u;
    long long v60 = 0u;
    memset(v61, 0, 25);
    v61[25] = 1;
    swift_errorRetain();
    swift_errorRetain();
    sub_1008D0AA8(a3, (uint64_t)v59);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_1008D81DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v36 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170F080);
  uint64_t v16 = *(void (**)(void, void, void))(v8 + 16);
  uint64_t v29 = v8 + 16;
  uint64_t v28 = v16;
  v16(v13, a2, v7);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v30 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v27 = v11;
    uint64_t v34 = a2;
    uint64_t v35 = a4;
    uint64_t v19 = swift_slowAlloc();
    unint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(void *)uint64_t v44 = v26;
    *(_DWORD *)uint64_t v19 = 141558531;
    *(void *)&long long v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v37 = sub_1008FA0F0(v20, v21, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = v8;
    unint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v33 = v7;
    uint64_t v31 = v22;
    v22(v13, v7);
    *(_WORD *)(v19 + 22) = 2114;
    if (a3)
    {
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v37 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      *(void *)&long long v37 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v23 = 0;
    }
    *unint64_t v25 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "#Durian: TagCommandManager: didFetchUserStats object: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v19, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v34;
    if (!a3) {
      goto LABEL_10;
    }
LABEL_7:
    *(void *)uint64_t v44 = a3;
    *(_OWORD *)&v44[8] = 0u;
    long long v45 = 0u;
    memset(v46, 0, 25);
    v46[25] = 1;
    swift_errorRetain();
    sub_1008D0AA8(a2, (uint64_t)v44);
    return swift_errorRelease();
  }
  uint64_t v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  v31(v13, v7);
  swift_errorRelease();
  swift_errorRelease();

  if (a3) {
    goto LABEL_7;
  }
LABEL_10:
  sub_1009223E8(v36, (uint64_t)&v37);
  *(_OWORD *)uint64_t v44 = v37;
  *(void *)&v44[16] = v38 | ((unint64_t)v39 << 16);
  long long v45 = v40;
  *(_OWORD *)uint64_t v46 = v41;
  *(void *)&v46[16] = v42;
  *(_WORD *)&v46[24] = v43;
  sub_100091B38((uint64_t)&v37);
  sub_1008D0AA8(a2, (uint64_t)v44);
  sub_1003DD160((uint64_t)&v37);
  return sub_1003DD160((uint64_t)&v37);
}

uint64_t sub_1008D8A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  v15[1] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  sub_10001D074(a2, (uint64_t)v6, &qword_101638CF0);
  uint64_t v12 = String.init<A>(describing:)();
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 72) = v12;
  *(void *)(v7 + 80) = v13;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

void sub_1008D8BDC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v51 = a4;
  uint64_t v59 = a3;
  unint64_t v56 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v50 = (char *)&v48 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v48 - v15;
  if (qword_101636880 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100010324(v17, (uint64_t)qword_10170D770);
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v58 = a2;
  v57(v16, a2, v5);
  uint64_t v55 = v18;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    long long v52 = v14;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v48 = v23;
    *(_DWORD *)uint64_t v22 = 134218499;
    uint64_t v60 = v56;
    uint64_t v61 = v23;
    uint64_t v53 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2160;
    uint64_t v60 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2081;
    char v49 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = sub_1008FA0F0(v24, v25, &v61);
    uint64_t v6 = v53;
    uint64_t v9 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unsigned __int16 v54 = *(void (**)(char *, uint64_t))(v6 + 8);
    v54(v16, v5);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "        #Durian: TagCommandManager: didFetch batteryStatus: [%lu] for device: %{private,mask.hash}s.", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v52;
    swift_slowDealloc();
  }
  else
  {
    unsigned __int16 v54 = *(void (**)(char *, uint64_t))(v6 + 8);
    v54(v16, v5);
  }

  if (v59)
  {
    v57(v14, v58, v5);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      long long v52 = v14;
      uint64_t v30 = (void *)v29;
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138543875;
      uint64_t v53 = v6;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v60 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v31;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v28 + 12) = 2160;
      uint64_t v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 22) = 2081;
      sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = v52;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = sub_1008FA0F0(v33, v34, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v54(v32, v5);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "            #Durian: TagCommandManager: didFetch batteryStatus error: %{public}@ for device: %{private,mask.hash}s.", (uint8_t *)v28, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      v54(v14, v5);
    }
  }
  else
  {
    char v35 = sub_1012D6678(v56);
    if (v35 == 7)
    {
      v57(v9, v58, v5);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 134218499;
        uint64_t v60 = v56;
        uint64_t v61 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 12) = 2160;
        uint64_t v60 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 22) = 2081;
        sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v60 = sub_1008FA0F0(v40, v41, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v54(v9, v5);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "            Unable to init BatteryLevel from CLFindMyAccessoryBatteryStatus %lu for beacon %{private,mask.hash}s.", (uint8_t *)v38, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v54(v9, v5);
      }
    }
    else
    {
      char v42 = v35;
      type metadata accessor for Transaction();
      unsigned __int8 v43 = v50;
      v57(v50, v58, v5);
      unint64_t v44 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v45 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v45 + v44, v43, v5);
      *(unsigned char *)(v45 + v44 + v7) = v42;
      uint64_t v46 = v51;
      *(void *)(((v44 + v7) & 0xFFFFFFFFFFFFFFF8) + v45 + 8) = v51;
      id v47 = v46;
      static Transaction.asyncTask(name:block:)();
      swift_release();
    }
  }
}

uint64_t sub_1008D9478(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  aBlock[4] = sub_1008DA47C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA1A0;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_errorRetain();
  os_log_type_t v20 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v30;
  uint64_t v22 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1008D992C(uint64_t a1, void *a2)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(v3);
  uint64_t v27 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_1008DA2FC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA100;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  id v19 = v23;
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  os_log_type_t v20 = v27;
  uint64_t v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v26);
  return swift_release();
}

uint64_t sub_1008D9DC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v32 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  sub_1008DB4EC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v18 = v33;
  uint64_t v31 = *(void *)&v33[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v13, v10);
  uint64_t v22 = v35;
  *(void *)(v21 + v20) = v34;
  uint64_t v23 = (uint64_t *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v24 = v36;
  *uint64_t v23 = v22;
  v23[1] = v24;
  aBlock[4] = sub_1008DA2A4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DA060;
  uint64_t v25 = _Block_copy(aBlock);
  id v26 = v18;
  swift_errorRetain();
  sub_1000361E0(v22, v24);
  uint64_t v27 = v32;
  static DispatchQoS.unspecified.getter();
  char v42 = _swiftEmptyArrayStorage;
  sub_1008DB4EC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v28 = v39;
  uint64_t v29 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v38);
  return swift_release();
}

uint64_t sub_1008DA2A4()
{
  return sub_1008DB3B4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1008D3754);
}

uint64_t sub_1008DA2C0()
{
  return sub_1008D3D74(*(void *)(v0 + 16));
}

uint64_t sub_1008DA2FC()
{
  return sub_1008DA734((uint64_t (*)(uint64_t, uint64_t))sub_1008D2FD4);
}

uint64_t sub_1008DA314(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1008DA37C()
{
  sub_1008C48D0(*(void *)(v0 + 16));
}

uint64_t sub_1008DA39C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008DA404(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1008DA464()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DA47C()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008D2888);
}

uint64_t sub_1008DA494()
{
  return sub_1008D2F30(*(void *)(v0 + 16));
}

uint64_t sub_1008DA49C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v6 + v0;
  unint64_t v8 = v6 + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v8, v5);
}

uint64_t sub_1008DA540()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  char v7 = *(unsigned char *)(v0 + v4);
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *unint64_t v8 = v1;
  v8[1] = sub_10001D2E4;
  return sub_1008D1CF0(v5, v7, v6);
}

uint64_t sub_1008DA650()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008DA71C()
{
  return sub_1008DA734(sub_1008D27C8);
}

uint64_t sub_1008DA734(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_1008DA7AC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_1008DA8BC(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(void *)(v0 + v6 + 16), *(void *)(v0 + v6 + 24), *(void *)(v0 + v6 + 32), *(void *)(v0 + v6 + 40), *(void *)(v0 + v6 + 48), *(void *)(v0 + v6 + 56), *(unsigned char *)(v0 + v6 + 64), *(unsigned char *)(v0 + v6 + 65));

  return _swift_deallocObject(v0, v6 + 66, v5);
}

uint64_t sub_1008DA8BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if (a10) {
    return swift_errorRelease();
  }
  else {
    return sub_100037A24(a1, a2);
  }
}

uint64_t sub_1008DA8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016511F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008DA934()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_1008D10B4(v3, v0 + v2, v4);
}

uint64_t sub_1008DA9C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if (a10) {
    return swift_errorRetain();
  }
  else {
    return sub_100037A38(a1, a2);
  }
}

uint64_t sub_1008DA9D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 82) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1008DA8BC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80), *(unsigned char *)(v0 + 81));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1008DAAE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 82) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1008D1644(v0 + 16, v0 + v2, v3);
}

uint64_t sub_1008DAB70(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, _WORD))
{
  return a1;
}

unint64_t sub_1008DABCC()
{
  unint64_t result = qword_101651200;
  if (!qword_101651200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651200);
  }
  return result;
}

uint64_t sub_1008DAC20()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DAC38()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008D0468);
}

uint64_t sub_1008DAC50()
{
  return sub_1008DB23C((void (*)(void))&_swift_errorRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1008DAC7C()
{
  return sub_1008D08EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1008DAC84()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DAC9C()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CF410);
}

uint64_t sub_1008DACB8()
{
  return sub_1008DB23C((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DACE4()
{
  if (*(void *)(v0 + 16)) {
    return Future.finish(error:)();
  }
  return result;
}

uint64_t sub_1008DAD14()
{
  return sub_1008DB23C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

void sub_1008DAD40()
{
  sub_1008D0278(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1008DAD48()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DAD60()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CEB10);
}

uint64_t sub_1008DAD7C()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DAD94()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CE278);
}

uint64_t sub_1008DADB0()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DADC8()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CC350);
}

uint64_t sub_1008DADE0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1008DAEDC()
{
  return sub_1008DB3B4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1008CDA9C);
}

uint64_t sub_1008DAEF8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1008DAF38()
{
  sub_1008CE1A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1008DAF44()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DAF5C()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CA3E4);
}

uint64_t sub_1008DAF74()
{
  if (*(void *)(v0 + 16)) {
    return Future.finish(result:)();
  }
  return result;
}

uint64_t sub_1008DAFB0()
{
  return sub_1008DB064((void (*)(void))&_swift_release);
}

uint64_t sub_1008DAFC8()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008CB9FC);
}

uint64_t sub_1008DAFE4()
{
  swift_release();
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1008DB02C()
{
  return sub_1008CF3C4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008DB04C()
{
  return sub_1008DB064((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1008DB064(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v5 | 7;
  unint64_t v8 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  a1(*(void *)(v1 + v8));

  return _swift_deallocObject(v1, v8 + 8, v7);
}

uint64_t sub_1008DB154()
{
  return sub_1008DB16C((uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_1008C9C2C);
}

uint64_t sub_1008DB16C(uint64_t (*a1)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v4, v1 + v3, v5);
}

uint64_t sub_1008DB210()
{
  return sub_1008DB23C((void (*)(void))&_swift_errorRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1008DB23C(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, 32, 7);
}

uint64_t sub_1008DB294()
{
  return sub_1008CA230(*(void *)(v0 + 16));
}

uint64_t sub_1008DB2A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();
  sub_10001CFB8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1008DB39C()
{
  return sub_1008DB3B4((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1008C960C);
}

uint64_t sub_1008DB3B4(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v3;
  uint64_t v7 = *(void *)(v1 + v4);
  unint64_t v8 = (uint64_t *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return a1(v5, v6, v7, v9, v10);
}

uint64_t sub_1008DB46C()
{
  swift_errorRelease();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1008DB4B4()
{
  return sub_1008D3D74(*(void *)(v0 + 16));
}

uint64_t sub_1008DB4EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TagCommandManager.TagCommandManagerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1008DB5D0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TagCommandManager.TagCommandManagerError()
{
  return &type metadata for TagCommandManager.TagCommandManagerError;
}

unint64_t sub_1008DB60C()
{
  unint64_t result = qword_101651210;
  if (!qword_101651210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651210);
  }
  return result;
}

uint64_t sub_1008DB834(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1008DB888()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E5A8);
  sub_100010324(v0, (uint64_t)qword_10170E5A8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1008DB90C()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize();
  sub_10000588C(&qword_1016513B8);
  swift_allocObject();
  v0[15] = CurrentValueSubject.init(_:)();
  id v2 = [self sharedInstance];
  if (v2)
  {
    v0[16] = v2;
    v0[17] = [objc_allocWithZone((Class)type metadata accessor for NetworkMonitor()) init];
    v0[18] = _swiftEmptyArrayStorage;
    v0[19] = 0;
    v0[20] = _swiftEmptyArrayStorage;
    swift_retain();
    uint64_t v3 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
    swift_release();
    v0[14] = v3;
    if (qword_101636DD0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E5A8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Created iOS Maintenance Connection Observer", v7, 2u);
      swift_slowDealloc();
    }

    return (uint64_t)v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1008DBAE4()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      int v4 = *(_DWORD *)(v1 + 4 * i + 32);
      notify_cancel(v4);
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1008DBBA0()
{
  sub_1008DBAE4();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MaintenanceConnectionObserveriOS()
{
  return self;
}

uint64_t sub_1008DBBF0(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = sub_100033F68;
  return sub_1008DBC8C(a2);
}

uint64_t sub_1008DBC8C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000588C(&qword_10163C6C8);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchQoS.QoSClass();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101656720);
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_1008DBDDC, v1, 0);
}

uint64_t sub_1008DBDDC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  *(void *)(*(void *)(v0 + 64) + 152) = *(void *)(v0 + 56);
  swift_retain();
  swift_release();
  *(void *)(v0 + 40) = AnyCurrentValuePublisher.publisher.getter();
  sub_10000584C();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DispatchQoS.QoSClass.default(_:), v4);
  uint64_t v6 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(void *)(v0 + 48) = v6;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  sub_10000588C((uint64_t *)&unk_101648940);
  sub_100062734((unint64_t *)&unk_101656770, (uint64_t *)&unk_101648940);
  sub_10027B124();
  Publisher.receive<A>(on:options:)();
  sub_1003D7734(v5);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101656780, (uint64_t *)&unk_101656720);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v11);
  swift_beginAccess();
  sub_10000588C(&qword_10163A540);
  sub_100062734(&qword_10163A548, &qword_10163A540);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  sub_1008DD170();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  NetworkMonitor.startMonitoring(block:)((uint64_t)sub_1008DE804, v8);
  swift_release_n();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1008DC160;
  return sub_1008DC470();
}

uint64_t sub_1008DC160()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1008DC2B0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1008DC348()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1008DC470();
}

uint64_t sub_1008DC3D8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1008DC470()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1008DC5BC, v0, 0);
}

void sub_1008DC5BC()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v0 + 112) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 136);
    uint64_t v46 = (void (*)(uint64_t, uint64_t))((char *)&dword_101651390 + dword_101651390);
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1008DCB44;
    v46(v3, v2);
    return;
  }
  id v5 = [*(id *)(v1 + 128) getActivePairedDevice];
  if (v5) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  AnyCurrentValuePublisher.value.getter();
  int v7 = *(unsigned __int8 *)(v0 + 128);
  *(unsigned char *)(v0 + 129) = v6;
  CurrentValueSubject.send(_:)();
  if (qword_101636DD0 != -1) {
    swift_once();
  }
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170E5A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  id v12 = v5;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    log = v13;
    os_log_type_t v44 = v14;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446979;
    if (v5) {
      uint64_t v16 = 1684826487;
    }
    else {
      uint64_t v16 = 7105633;
    }
    if (v5) {
      unint64_t v17 = 0xE400000000000000;
    }
    else {
      unint64_t v17 = 0xE300000000000000;
    }
    *(void *)(v0 + 32) = sub_1008FA0F0(v16, v17, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    unint64_t v18 = 0xE400000000000000;
    uint64_t v19 = 7105633;
    if (v7 == 1) {
      uint64_t v19 = 1684826487;
    }
    else {
      unint64_t v18 = 0xE300000000000000;
    }
    if (v7) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 1701736302;
    }
    if (v7) {
      unint64_t v21 = v18;
    }
    else {
      unint64_t v21 = 0xE400000000000000;
    }
    *(void *)(v0 + 16) = sub_1008FA0F0(v20, v21, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2160;
    *(void *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 32) = 2081;
    if (v5)
    {
      id v22 = [v12 pairingID];
      uint64_t v23 = *(void *)(v0 + 80);
      if (v22)
      {
        unint64_t v24 = v22;
        uint64_t v26 = *(void *)(v0 + 64);
        uint64_t v25 = *(void *)(v0 + 72);
        uint64_t v27 = *(void *)(v0 + 56);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v23, v25, v27);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v27);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v23, 1, v27) != 1)
        {
          uint64_t v28 = *(void *)(v0 + 80);
          uint64_t v29 = *(void *)(v0 + 56);
          uint64_t v30 = *(void *)(v0 + 64);
          uint64_t v31 = UUID.uuidString.getter();
          unint64_t v33 = v32;
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
LABEL_32:
          uint64_t v37 = *(void *)(v0 + 96);
          uint64_t v38 = *(void *)(v0 + 104);
          uint64_t v39 = *(void *)(v0 + 88);
          *(void *)(v0 + 24) = sub_1008FA0F0(v31, v33, &v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, log, v44, "Updated iOS Maintenance Connection policy (New: %{public}s, Old: %{public}s) - activePairedDevice:%{private,mask.hash}s.", (uint8_t *)v15, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v43 = v0 + 56;
        uint64_t v42 = *(void *)(v0 + 56);
        uint64_t v41 = *(void *)(v43 + 8);

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v23, 1, 1, v42);
        __break(1u);
      }

      __break(1u);
      return;
    }
    unint64_t v33 = 0xE400000000000000;
    uint64_t v31 = 1701736302;
    goto LABEL_32;
  }
  uint64_t v35 = *(void *)(v0 + 96);
  uint64_t v34 = *(void *)(v0 + 104);
  uint64_t v36 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
LABEL_33:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(void (**)(void))(v0 + 8);
  v40();
}

uint64_t sub_1008DCB44(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(unsigned char *)(*(void *)v1 + 131) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1008DCC5C, v2, 0);
}

void sub_1008DCC5C()
{
  uint64_t v44 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 131);
  if (v1 == 3)
  {
    swift_release();
    id v2 = [*(id *)(*(void *)(v0 + 48) + 128) getActivePairedDevice];
    if (v2) {
      char v3 = 1;
    }
    else {
      char v3 = 2;
    }
    AnyCurrentValuePublisher.value.getter();
    int v4 = *(unsigned __int8 *)(v0 + 128);
    *(unsigned char *)(v0 + 129) = v3;
    CurrentValueSubject.send(_:)();
    if (qword_101636DD0 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v8 = sub_100010324(v7, (uint64_t)qword_10170E5A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    id v9 = v2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      log = v10;
      os_log_type_t v41 = v11;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446979;
      if (v2) {
        uint64_t v13 = 1684826487;
      }
      else {
        uint64_t v13 = 7105633;
      }
      if (v2) {
        unint64_t v14 = 0xE400000000000000;
      }
      else {
        unint64_t v14 = 0xE300000000000000;
      }
      *(void *)(v0 + 32) = sub_1008FA0F0(v13, v14, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      unint64_t v15 = 0xE400000000000000;
      uint64_t v16 = 7105633;
      if (v4 == 1) {
        uint64_t v16 = 1684826487;
      }
      else {
        unint64_t v15 = 0xE300000000000000;
      }
      if (v4) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 1701736302;
      }
      if (v4) {
        unint64_t v18 = v15;
      }
      else {
        unint64_t v18 = 0xE400000000000000;
      }
      *(void *)(v0 + 16) = sub_1008FA0F0(v17, v18, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2160;
      *(void *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 32) = 2081;
      if (v2)
      {
        id v19 = [v9 pairingID];
        uint64_t v20 = *(void *)(v0 + 80);
        if (v19)
        {
          unint64_t v21 = v19;
          uint64_t v23 = *(void *)(v0 + 64);
          uint64_t v22 = *(void *)(v0 + 72);
          uint64_t v24 = *(void *)(v0 + 56);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v20, v22, v24);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v24);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v24) != 1)
          {
            uint64_t v25 = *(void *)(v0 + 80);
            uint64_t v26 = *(void *)(v0 + 56);
            uint64_t v27 = *(void *)(v0 + 64);
            uint64_t v28 = UUID.uuidString.getter();
            unint64_t v30 = v29;
            (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
LABEL_30:
            uint64_t v34 = *(void *)(v0 + 96);
            uint64_t v35 = *(void *)(v0 + 104);
            uint64_t v36 = *(void *)(v0 + 88);
            *(void *)(v0 + 24) = sub_1008FA0F0(v28, v30, &v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, log, v41, "Updated iOS Maintenance Connection policy (New: %{public}s, Old: %{public}s) - activePairedDevice:%{private,mask.hash}s.", (uint8_t *)v12, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v40 = v0 + 56;
          uint64_t v39 = *(void *)(v0 + 56);
          uint64_t v38 = *(void *)(v40 + 8);

          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v20, 1, 1, v39);
          __break(1u);
        }

        __break(1u);
        return;
      }
      unint64_t v30 = 0xE400000000000000;
      uint64_t v28 = 1701736302;
      goto LABEL_30;
    }
    uint64_t v32 = *(void *)(v0 + 96);
    uint64_t v31 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  else
  {
    *(unsigned char *)(v0 + 130) = v1;
    CurrentValueSubject.send(_:)();
    swift_release();
  }
LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(void (**)(void))(v0 + 8);
  v37();
}

void sub_1008DD170()
{
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v52 = xmmword_101347500;
  uint64_t v43 = v53;
  v53[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53[1] = v8;
  void v53[2] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53[3] = v9;
  v53[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53[5] = v10;
  sub_10000584C();
  uint64_t v11 = 0;
  uint64_t v48 = (void *)(v0 + 144);
  unsigned int v46 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v45 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v47 = v5 + 104;
  uint64_t v12 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v44 = v51;
  do
  {
    out_token[0] = 0;
    v45(v7, v46, v4);
    swift_bridgeObjectRetain();
    uint64_t v13 = static OS_dispatch_queue.global(qos:)();
    (*v12)(v7, v4);
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    void v51[2] = sub_1008DD97C;
    v51[3] = v14;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v51[0] = sub_1008DB834;
    v51[1] = &unk_1015DABF8;
    unint64_t v15 = _Block_copy(aBlock);
    swift_release();
    uint64_t v16 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    notify_register_dispatch((const char *)(v16 + 32), out_token, v13, v15);
    swift_release();
    _Block_release(v15);

    int v17 = out_token[0];
    swift_beginAccess();
    unint64_t v18 = *(void **)(v0 + 144);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 144) = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v18 = sub_100A71B08(0, v18[2] + 1, 1, v18);
      *uint64_t v48 = v18;
    }
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      unint64_t v18 = sub_100A71B08((void *)(v20 > 1), v21 + 1, 1, v18);
      *uint64_t v48 = v18;
    }
    v18[2] = v21 + 1;
    *((_DWORD *)v18 + v21 + 8) = v17;
    swift_endAccess();
    v11 += 16;
  }
  while (v11 != 48);
  swift_arrayDestroy();
  id v22 = [*(id *)(v0 + 128) getActivePairedDevice];
  if (!v22)
  {
    unint64_t v32 = 0xE400000000000000;
    uint64_t v30 = 1701736302;
    goto LABEL_12;
  }
  uint64_t v23 = v22;
  id v24 = [v22 pairingID];

  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v40, 1, 1, v42);
    goto LABEL_19;
  }
  uint64_t v25 = v39;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = v41;
  uint64_t v27 = v40;
  uint64_t v28 = v25;
  uint64_t v29 = v42;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v28, v42);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v27, 1, v29) == 1)
  {
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v30 = UUID.uuidString.getter();
  unint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v29);
LABEL_12:
  if (qword_101636DD0 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100010324(v33, (uint64_t)qword_10170E5A8);
  swift_bridgeObjectRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 141558275;
    *(void *)out_token = 1752392040;
    aBlock[0] = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)out_token = sub_1008FA0F0(v30, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Registered active paired device changed handlers. Current device: %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1008DD8AC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1008DD944()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008DD97C()
{
  return sub_1008DD8AC();
}

uint64_t sub_1008DD984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1008DD994()
{
  return swift_release();
}

uint64_t sub_1008DD99C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_1008DC348();
}

uint64_t sub_1008DDA2C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return _swift_task_switch(sub_1008DDA4C, 0, 0);
}

uint64_t sub_1008DDA4C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1008DDB80;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008DDB80(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1008DDC80, 0, 0);
}

uint64_t sub_1008DDC80()
{
  uint64_t v1 = *(void *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 176);
    return _swift_task_switch(sub_1008DDD24, v2, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v3(3);
  }
}

uint64_t sub_1008DDD24()
{
  *(void *)(v0 + 184) = *(void *)(*(void *)(v0 + 176) + 136);
  swift_retain();
  return _swift_task_switch(sub_1008DDD98, 0, 0);
}

uint64_t sub_1008DDD98()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[24] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[25] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_1008DDEB0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_1008DDEB0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 208) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_1008DE00C, 0, 0);
}

uint64_t sub_1008DE00C()
{
  v0[27] = *(void *)(v0[26] + 16);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[22];
  return _swift_task_switch(sub_1008DE07C, v1, 0);
}

uint64_t sub_1008DE07C()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 176) + 136);
  swift_retain();
  return _swift_task_switch(sub_1008DE0F0, 0, 0);
}

uint64_t sub_1008DE0F0()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_1008DE20C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_1008DE20C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 248) = *(void *)(v1 + 128);
  return _swift_task_switch(sub_1008DE368, 0, 0);
}

uint64_t sub_1008DE368()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = *(void *)(v0[31] + 16);
  swift_bridgeObjectRelease();
  if (__OFADD__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    v0[32] = v1 + v2;
    if (qword_101636CD8 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v3 = qword_10170E390;
  v0[33] = qword_10170E390;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1008DE494;
  return unsafeBlocking<A>(_:)(v0 + 17, sub_10001D704, v3, &type metadata for Configuration);
}

uint64_t sub_1008DE494()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1008DE5AC, 0, 0);
}

uint64_t sub_1008DE5AC()
{
  char v1 = sub_1010AC43C(*(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  if (v1)
  {
    AnyCurrentValuePublisher.value.getter();
    BOOL v2 = *(void *)(v0 + 144) > 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  uint64_t v3 = *(void **)(*(void *)(v0 + 152) + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator);
  if (v3
    && ((id v4 = [v3 path],
         id v5 = [v4 status],
         v4,
         v5 == (id)1)
     || v5 == (id)3)
    || (*(uint64_t *)(v0 + 256) > 0 ? (int v6 = 1) : (int v6 = v2), v6 != 1))
  {
    swift_release();
    uint64_t v12 = 3;
  }
  else
  {
    if (qword_101636DD0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E5A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      BOOL v10 = *(void *)(v0 + 256) > 0;
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109376;
      *(_DWORD *)(v0 + 280) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 1024;
      *(_DWORD *)(v0 + 284) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Network is down - policy is no maintenance. hasShares: %{BOOL}d, hasOtherDeviecs: %{BOOL}d.", (uint8_t *)v11, 0xEu);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v12);
}

uint64_t sub_1008DE7FC()
{
  return sub_1008DC2B0();
}

uint64_t sub_1008DE804()
{
  return sub_1008DC3D8();
}

uint64_t sub_1008DE80C()
{
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1008DC348();
}

uint64_t sub_1008DE89C()
{
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1008DC348();
}

uint64_t *sub_1008DE92C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    BOOL v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

void *sub_1008DEA14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_1008DEAAC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1008DEB48(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1008DEBC4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1008DEC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008DEC64);
}

uint64_t sub_1008DEC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1008DED14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008DED28);
}

uint64_t sub_1008DED28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockAckResponse()
{
  uint64_t result = qword_101651418;
  if (!qword_101651418) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008DEE1C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1008DEEB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101651450);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AccessoryPairingLockAckResponse();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_1008DF278();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v16 = v8;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  char v23 = 0;
  uint64_t v13 = v21;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v14;
  char v22 = 1;
  sub_100342C5C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v10 + *(int *)(v16 + 20), v5, v11);
  sub_1008DF2CC((uint64_t)v10, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1008DF330((uint64_t)v10);
}

uint64_t sub_1008DF184()
{
  if (*v0) {
    return 0x6449616E6D66;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1008DF1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1008DF598(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008DF1E8(uint64_t a1)
{
  unint64_t v2 = sub_1008DF278();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008DF224(uint64_t a1)
{
  unint64_t v2 = sub_1008DF278();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008DF260@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1008DEEB4(a1, a2);
}

unint64_t sub_1008DF278()
{
  unint64_t result = qword_101651458;
  if (!qword_101651458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651458);
  }
  return result;
}

uint64_t sub_1008DF2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008DF330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingLockAckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008DF458);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockAckResponse.CodingKeys;
}

unint64_t sub_1008DF494()
{
  unint64_t result = qword_101651460;
  if (!qword_101651460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651460);
  }
  return result;
}

unint64_t sub_1008DF4EC()
{
  unint64_t result = qword_101651468;
  if (!qword_101651468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651468);
  }
  return result;
}

unint64_t sub_1008DF544()
{
  unint64_t result = qword_101651470;
  if (!qword_101651470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651470);
  }
  return result;
}

uint64_t sub_1008DF598(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013F10B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t destroy for AirPodsSendPairingDataCommandPayloadv2(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  uint64_t v2 = a1[21];
  unint64_t v3 = a1[22];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  unint64_t v15 = *(void *)(a2 + 88);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(a2 + 96);
  unint64_t v17 = *(void *)(a2 + 104);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 112);
  unint64_t v19 = *(void *)(a2 + 120);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  unint64_t v24 = *(void *)(a2 + 176);
  sub_1000361E0(v25, v24);
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v24;
  return a1;
}

uint64_t assignWithCopy for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_1000361E0(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_1000361E0(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  sub_1000361E0(v20, v21);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a2 + 80);
  unint64_t v25 = *(void *)(a2 + 88);
  sub_1000361E0(v24, v25);
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a2 + 96);
  unint64_t v29 = *(void *)(a2 + 104);
  sub_1000361E0(v28, v29);
  uint64_t v30 = *(void *)(a1 + 96);
  unint64_t v31 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 112);
  unint64_t v33 = *(void *)(a2 + 120);
  sub_1000361E0(v32, v33);
  uint64_t v34 = *(void *)(a1 + 112);
  unint64_t v35 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = *(void *)(a2 + 128);
  unint64_t v37 = *(void *)(a2 + 136);
  sub_1000361E0(v36, v37);
  uint64_t v38 = *(void *)(a1 + 128);
  unint64_t v39 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = *(void *)(a2 + 144);
  unint64_t v41 = *(void *)(a2 + 152);
  sub_1000361E0(v40, v41);
  uint64_t v42 = *(void *)(a1 + 144);
  unint64_t v43 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  sub_10001CFB8(v42, v43);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v45 = *(void *)(a2 + 168);
  unint64_t v44 = *(void *)(a2 + 176);
  sub_1000361E0(v45, v44);
  uint64_t v46 = *(void *)(a1 + 168);
  unint64_t v47 = *(void *)(a1 + 176);
  *(void *)(a1 + 168) = v45;
  *(void *)(a1 + 176) = v44;
  sub_10001CFB8(v46, v47);
  return a1;
}

__n128 initializeWithTake for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 96);
  unint64_t v17 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 144);
  unint64_t v23 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v22, v23);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v24 = *(void *)(a1 + 168);
  unint64_t v25 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  sub_10001CFB8(v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 184) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingDataCommandPayloadv2()
{
  return &type metadata for AirPodsSendPairingDataCommandPayloadv2;
}

uint64_t sub_1008DFB88(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

double sub_1008DFE9C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1008E0160(a1, (uint64_t)v10);
  if (!v2)
  {
    long long v5 = v18;
    *(_OWORD *)(a2 + 128) = v17;
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v19;
    *(void *)(a2 + 176) = v20;
    long long v6 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v16;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v9;
  }
  return result;
}

uint64_t sub_1008DFF1C(void *a1)
{
  return sub_1008DFB88(a1);
}

unint64_t sub_1008DFF34(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1008DFF64();
  unint64_t result = sub_1008DFFB8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008DFF64()
{
  unint64_t result = qword_101651478;
  if (!qword_101651478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651478);
  }
  return result;
}

unint64_t sub_1008DFFB8()
{
  unint64_t result = qword_101651480;
  if (!qword_101651480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651480);
  }
  return result;
}

uint64_t sub_1008E000C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1008E0140);
      }
      uint64_t v24 = (int)v24;
LABEL_6:
      if (v24 != 32) {
        goto LABEL_18;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          LODWORD(v28) = HIDWORD(a10) - a10;
          if (__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_16;
          }
          uint64_t v28 = (int)v28;
LABEL_12:
          if (v28 != 1) {
            goto LABEL_19;
          }
          *(void *)a9 = result;
          *(void *)(a9 + 8) = a2;
          *(void *)(a9 + 16) = a10;
          *(void *)(a9 + 24) = a11;
          *(void *)(a9 + 32) = a3;
          *(void *)(a9 + 40) = a4;
          *(void *)(a9 + 48) = a12;
          *(void *)(a9 + 56) = a13;
          *(void *)(a9 + 64) = a5;
          *(void *)(a9 + 72) = a6;
          *(void *)(a9 + 80) = a7;
          *(void *)(a9 + 88) = a8;
          *(void *)(a9 + 96) = a14;
          *(void *)(a9 + 104) = a15;
          *(void *)(a9 + 112) = a16;
          *(void *)(a9 + 120) = a17;
          *(void *)(a9 + 128) = a18;
          *(void *)(a9 + 136) = a19;
          *(void *)(a9 + 144) = a20;
          *(void *)(a9 + 152) = a21;
          *(unsigned char *)(a9 + 160) = a22;
          *(void *)(a9 + 168) = a23;
          *(void *)(a9 + 176) = a24;
          return result;
        case 2uLL:
          uint64_t v30 = *(void *)(a10 + 16);
          uint64_t v29 = *(void *)(a10 + 24);
          BOOL v27 = __OFSUB__(v29, v30);
          uint64_t v28 = v29 - v30;
          if (!v27) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v28 = BYTE6(a11);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v26 = *(void *)(result + 16);
      uint64_t v25 = *(void *)(result + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v24 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1008E0160@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v73 = v10;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v66 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v67 = v11;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v64 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v65 = v12;
  uint64_t v13 = v70;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v14 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v16 = v15;
  uint64_t v17 = static MACAddress.length.getter();
  if ((unsigned __int128)(v17 * (__int128)3) >> 64 != (3 * v17) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v62 = v14;
  unint64_t v63 = v16;
  if (__OFADD__(3 * v17, 60))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v19 = v18;
  sub_1000362FC();
  uint64_t v20 = DataProtocol.intValue.getter();
  uint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = static MACAddress.length.getter();
  uint64_t v23 = v22 + 20;
  if (__OFADD__(v22, 20))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v21 * v23 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v58 = Data.subdata(in:)();
  unint64_t v59 = v24;
  uint64_t v60 = v13;
  unint64_t v61 = v19;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v55 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v56 = v25;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v53 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v54 = v26;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v51 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v52 = v27;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v49 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v50 = v28;
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v47 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v48 = v29;
  uint64_t v57 = DataProtocol.intValue.getter();
  sub_1000BD078((uint64_t)v68, v69);
  uint64_t v30 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v46 = v31;
  uint64_t v13 = v30;
  if (v57 > 3)
  {
    if (qword_101637310 == -1)
    {
LABEL_12:
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170F068);
      unint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v43 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid beaconPartId %ld!", v43, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v44 = type metadata accessor for BinaryDecodingError();
      sub_100499A70();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104))(v45, enum case for BinaryDecodingError.decodingError(_:), v44);
      swift_willThrow();
      sub_10001CFB8(v13, v46);
      sub_10001CFB8(v47, v48);
      sub_10001CFB8(v49, v50);
      sub_10001CFB8(v51, v52);
      sub_10001CFB8(v53, v54);
      sub_10001CFB8(v55, v56);
      sub_10001CFB8(v58, v59);
      sub_10001CFB8(v60, v61);
      sub_10001CFB8(v62, v63);
      sub_10001CFB8(v64, v65);
      sub_10001CFB8(v66, v67);
      sub_10001CFB8(v9, v73);
      sub_10001CFB8(v7, v8);
      goto LABEL_15;
    }
LABEL_22:
    swift_once();
    goto LABEL_12;
  }
  sub_10001CFB8(v47, v48);
  sub_10001CFB8(v60, v19);
  if (v57 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1008E000C(v7, v8, v9, v73, v66, v67, v64, v65, (uint64_t)v71, v62, v63, v58, v59, v55, v56, v53, v54, v51, v52,
      v49,
      v50,
      v57,
      v13,
      v46);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v68);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v33 = v71[9];
    long long v34 = v71[10];
    long long v35 = v71[7];
    *(_OWORD *)(a2 + 128) = v71[8];
    *(_OWORD *)(a2 + 144) = v33;
    *(_OWORD *)(a2 + 160) = v34;
    long long v36 = v71[5];
    long long v37 = v71[6];
    *(_OWORD *)(a2 + 64) = v71[4];
    *(_OWORD *)(a2 + 80) = v36;
    *(void *)(a2 + 176) = v72;
    *(_OWORD *)(a2 + 96) = v37;
    *(_OWORD *)(a2 + 112) = v35;
    long long v38 = v71[1];
    *(_OWORD *)a2 = v71[0];
    *(_OWORD *)(a2 + 16) = v38;
    long long v39 = v71[3];
    *(_OWORD *)(a2 + 32) = v71[2];
    *(_OWORD *)(a2 + 48) = v39;
  }
  return result;
}

uint64_t *sub_1008E0824(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000361E0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000361E0(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1008E0934(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1008E09C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000361E0(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_1008E0A80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1008E0B58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1008E0BDC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1008E0C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008E0CA0);
}

uint64_t sub_1008E0CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1008E0D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008E0D70);
}

void *sub_1008E0D70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockAckResponse()
{
  uint64_t result = qword_1016514E0;
  if (!qword_1016514E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008E0E6C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1008E0F08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101651520);
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AirPodsPairingLockAckResponse();
  __chkstk_darwin(v8);
  uint64_t v10 = (_OWORD *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_1008E141C();
  uint64_t v11 = (uint64_t)v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  unint64_t v24 = a1;
  uint64_t v18 = v4;
  char v26 = 0;
  sub_100037AA0();
  uint64_t v12 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = (uint64_t)v10;
  *uint64_t v10 = v25;
  char v26 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[1] = v25;
  char v26 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  _OWORD v10[2] = v25;
  LOBYTE(v25) = 3;
  sub_100342C5C();
  uint64_t v14 = v18;
  uint64_t v15 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v13 + *(int *)(v8 + 28), v14, v15);
  sub_1008E1470(v13, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return sub_1008E14D4(v13);
}

uint64_t sub_1008E1304()
{
  uint64_t result = 1684628325;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x644970696863;
      break;
    case 2:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      uint64_t result = 0x6449616E6D66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1008E138C(uint64_t a1)
{
  unint64_t v2 = sub_1008E141C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008E13C8(uint64_t a1)
{
  unint64_t v2 = sub_1008E141C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008E1404@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1008E0F08(a1, a2);
}

unint64_t sub_1008E141C()
{
  unint64_t result = qword_101651528;
  if (!qword_101651528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651528);
  }
  return result;
}

uint64_t sub_1008E1470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008E14D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsPairingLockAckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008E15FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AirPodsPairingLockAckResponse.CodingKeys;
}

unint64_t sub_1008E1638()
{
  unint64_t result = qword_101651530;
  if (!qword_101651530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651530);
  }
  return result;
}

unint64_t sub_1008E1690()
{
  unint64_t result = qword_101651538;
  if (!qword_101651538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651538);
  }
  return result;
}

unint64_t sub_1008E16E8()
{
  unint64_t result = qword_101651540;
  if (!qword_101651540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651540);
  }
  return result;
}

uint64_t sub_1008E173C()
{
  sub_1008E18F0();
  sub_1008E18D0();
  sub_1004270C8(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);

  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  sub_1008E74C4(v0 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, (uint64_t (*)(void))type metadata accessor for Intent);
  return v0;
}

uint64_t sub_1008E1824()
{
  sub_1008E173C();

  return swift_deallocClassInstance();
}

uint64_t sub_1008E187C()
{
  return type metadata accessor for IntentSession();
}

uint64_t type metadata accessor for IntentSession()
{
  uint64_t result = qword_1016515A0;
  if (!qword_1016515A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008E18D0()
{
  return sub_1008E1910((uint64_t)sub_1008E7548, (uint64_t)&unk_1015DB078);
}

uint64_t sub_1008E18F0()
{
  return sub_1008E1910((uint64_t)sub_1008E7524, (uint64_t)&unk_1015DB050);
}

uint64_t sub_1008E1910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = a1;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v16);
}

void sub_1008E1BD4(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *a2;
    [*(id *)(Strong + v5) invalidate];
    uint64_t v6 = *(void **)(v4 + v5);
    *(void *)(v4 + v5) = 0;
    swift_release();
  }
}

void *sub_1008E1C54()
{
  uint64_t v1 = v0;
  uint64_t v73 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v4 = __chkstk_darwin(v78);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  long long v77 = (char *)&v66 - v8;
  __chkstk_darwin(v7);
  uint64_t v79 = (char *)&v66 - v9;
  uint64_t v10 = type metadata accessor for ShareRecord();
  uint64_t v74 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v13 = __chkstk_darwin(v85);
  uint64_t v84 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v83 = (char *)&v66 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v1 + 72);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  char v22 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) == 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v71 = v6;
  uint64_t v91 = _swiftEmptyArrayStorage;
  uint64_t v76 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore);
  uint64_t v23 = sub_100AD2AD4();
  uint64_t v24 = v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
  swift_beginAccess();
  BOOL v38 = *(unsigned char *)(v24 + 41) == 1;
  uint64_t v80 = v23;
  if (v38)
  {
    static os_log_type_t.default.getter();
    if (qword_101637298 == -1)
    {
LABEL_5:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_101342130;
      uint64_t v26 = UUID.uuidString.getter();
      uint64_t v28 = v27;
      *(void *)(v25 + 56) = &type metadata for String;
      *(void *)(v25 + 64) = sub_10000B4CC();
      *(void *)(v25 + 32) = v26;
      *(void *)(v25 + 40) = v28;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100442D7C(v80);
      return v91;
    }
LABEL_52:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v82 = *(void *)(v23 + 16);
  if (v82)
  {
    unint64_t v29 = 0;
    uint64_t v70 = v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID;
    uint64_t v81 = v23 + 32;
    uint64_t v69 = (void (**)(char *, uint64_t))(v2 + 8);
    long long v68 = xmmword_101347BA0;
    uint64_t v30 = (uint64_t)v77;
    uint64_t v31 = (uint64_t)v79;
    uint64_t v67 = v10;
    do
    {
      if (v29 >= *(void *)(v23 + 16))
      {
        __break(1u);
        goto LABEL_51;
      }
      sub_10001D010(v81 + 40 * v29, (uint64_t)&v88);
      sub_10001D010((uint64_t)&v88, (uint64_t)v87);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      uint64_t v32 = (uint64_t)v83;
      if (swift_dynamicCast())
      {
        sub_1008E73F4(v32, v84, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        long long v33 = sub_100B6DD88();
        uint64_t v34 = v33[2];
        if (!v34)
        {
          swift_bridgeObjectRelease();
LABEL_33:
          sub_1008E74C4(v84, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v23 = v80;
          goto LABEL_10;
        }
        uint64_t v35 = (uint64_t)v33
            + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
        uint64_t v36 = *(void *)(v74 + 72);
        while (1)
        {
          sub_1008E745C(v35, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          long long v37 = &v12[*(int *)(v10 + 40)];
          BOOL v38 = *(void *)v37 == *(void *)(v24 + 24) && *((void *)v37 + 1) == *(void *)(v24 + 32);
          if (v38) {
            break;
          }
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1008E74C4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          if (v39) {
            goto LABEL_42;
          }
          v35 += v36;
          if (!--v34)
          {
            swift_bridgeObjectRelease();
            uint64_t v30 = (uint64_t)v77;
            uint64_t v31 = (uint64_t)v79;
            goto LABEL_33;
          }
        }
        sub_1008E74C4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
LABEL_42:
        swift_bridgeObjectRelease();
        sub_10001D010((uint64_t)&v88, (uint64_t)v86);
        uint64_t v62 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v62 = sub_100A6F7F0(0, v62[2] + 1, 1, v62);
        }
        uint64_t v30 = (uint64_t)v77;
        uint64_t v23 = v80;
        unint64_t v64 = v62[2];
        unint64_t v63 = v62[3];
        if (v64 >= v63 >> 1) {
          uint64_t v62 = sub_100A6F7F0((void *)(v63 > 1), v64 + 1, 1, v62);
        }
        v62[2] = v64 + 1;
        sub_10001CEB0(v86, (uint64_t)&v62[5 * v64 + 4]);
        uint64_t v91 = v62;
        uint64_t v60 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v61 = v84;
        goto LABEL_47;
      }
      uint64_t v40 = v78;
      if (!swift_dynamicCast())
      {
        int v75 = static os_log_type_t.error.getter();
        if (qword_101637298 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = v68;
        uint64_t v46 = UUID.uuidString.getter();
        uint64_t v48 = v47;
        *(void *)(v45 + 56) = &type metadata for String;
        unint64_t v49 = sub_10000B4CC();
        *(void *)(v45 + 64) = v49;
        *(void *)(v45 + 32) = v46;
        *(void *)(v45 + 40) = v48;
        uint64_t v51 = v89;
        uint64_t v50 = v90;
        sub_10001CD44(&v88, v89);
        unint64_t v52 = v72;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8) + 32))(v51);
        uint64_t v53 = UUID.uuidString.getter();
        uint64_t v55 = v54;
        (*v69)(v52, v73);
        *(void *)(v45 + 96) = &type metadata for String;
        *(void *)(v45 + 104) = v49;
        *(void *)(v45 + 72) = v53;
        *(void *)(v45 + 80) = v55;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v30 = (uint64_t)v77;
        uint64_t v31 = (uint64_t)v79;
        uint64_t v23 = v80;
        uint64_t v10 = v67;
        goto LABEL_10;
      }
      sub_1008E73F4(v31, v30, type metadata accessor for SharedBeaconRecord);
      unint64_t v41 = (void *)(v30 + *(int *)(v40 + 32));
      if (*v41 == *(void *)(v24 + 24) && v41[1] == *(void *)(v24 + 32))
      {
        uint64_t v44 = (uint64_t)v71;
        sub_1008E745C(v30, (uint64_t)v71, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v44 = (uint64_t)v71;
        sub_1008E745C(v30, (uint64_t)v71, type metadata accessor for SharedBeaconRecord);
        if ((v43 & 1) == 0)
        {
          sub_1008E74C4(v44, type metadata accessor for SharedBeaconRecord);
          goto LABEL_9;
        }
      }
      char v56 = *(unsigned char *)(v44 + *(int *)(v78 + 52));
      sub_1008E74C4(v44, type metadata accessor for SharedBeaconRecord);
      if (v56)
      {
        sub_10001D010((uint64_t)&v88, (uint64_t)v86);
        uint64_t v57 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v57 = sub_100A6F7F0(0, v57[2] + 1, 1, v57);
        }
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        if (v59 >= v58 >> 1) {
          uint64_t v57 = sub_100A6F7F0((void *)(v58 > 1), v59 + 1, 1, v57);
        }
        v57[2] = v59 + 1;
        sub_10001CEB0(v86, (uint64_t)&v57[5 * v59 + 4]);
        uint64_t v91 = v57;
        uint64_t v60 = type metadata accessor for SharedBeaconRecord;
        uint64_t v61 = v30;
LABEL_47:
        sub_1008E74C4(v61, v60);
        uint64_t v31 = (uint64_t)v79;
        goto LABEL_10;
      }
LABEL_9:
      sub_1008E74C4(v30, type metadata accessor for SharedBeaconRecord);
LABEL_10:
      ++v29;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v87);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v88);
    }
    while (v29 != v82);
  }
  swift_bridgeObjectRelease();
  return v91;
}

uint64_t sub_1008E2724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 72);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a2;
  v16[4] = a3;
  void v16[5] = a1;
  aBlock[4] = sub_1008E7358;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAFD8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v21 = _swiftEmptyArrayStorage;
  sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1008E2A34(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v84 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v82 = *(void *)(v9 - 8);
  uint64_t v83 = v9;
  __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101651780);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Intent();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v19 = Strong;
  uint64_t v78 = v14;
  uint64_t v20 = sub_1008E1C54();
  if (v20[2])
  {
    uint64_t v76 = a3;
    long long v77 = a2;
    uint64_t v79 = v20;
    uint64_t v73 = v12;
    uint64_t v74 = v11;
    int v75 = v17;
    int v72 = static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    uint64_t v71 = qword_10170EFF0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_10134BF90;
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000B4CC();
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    uint64_t v26 = (void *)(v19 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent);
    swift_beginAccess();
    uint64_t v27 = v26[1];
    uint64_t v28 = (void *)v26[2];
    uint64_t v29 = *(unsigned __int8 *)v26;
    swift_bridgeObjectRetain();
    sub_100B967D0(v29, v27, v28);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 72) = v31;
    *(void *)(v21 + 80) = v33;
    uint64_t v35 = v26[3];
    uint64_t v34 = v26[4];
    uint64_t v70 = v26;
    *(void *)(v21 + 136) = &type metadata for String;
    *(void *)(v21 + 144) = v25;
    unint64_t v69 = v25;
    *(void *)(v21 + 112) = v35;
    *(void *)(v21 + 120) = v34;
    uint64_t v36 = v79;
    int64_t v37 = v79[2];
    if (v37)
    {
      uint64_t v67 = a4;
      uint64_t v68 = v19;
      uint64_t v88 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000B6ED0(0, v37, 0);
      uint64_t v38 = (uint64_t)(v36 + 4);
      char v39 = (void (**)(char *, uint64_t))(v80 + 8);
      do
      {
        sub_10001D010(v38, (uint64_t)v85);
        uint64_t v41 = v86;
        uint64_t v40 = v87;
        sub_10001CD44(v85, v86);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8) + 32))(v41);
        uint64_t v42 = UUID.uuidString.getter();
        uint64_t v44 = v43;
        (*v39)(v8, v84);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
        uint64_t v45 = v88;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B6ED0(0, v45[2] + 1, 1);
          uint64_t v45 = v88;
        }
        unint64_t v47 = v45[2];
        unint64_t v46 = v45[3];
        if (v47 >= v46 >> 1)
        {
          sub_1000B6ED0(v46 > 1, v47 + 1, 1);
          uint64_t v45 = v88;
        }
        v45[2] = v47 + 1;
        uint64_t v48 = &v45[2 * v47];
        v48[4] = v42;
        v48[5] = v44;
        v38 += 40;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
      a2 = v77;
      uint64_t v19 = v68;
      a4 = v67;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a2 = v77;
    }
    uint64_t v58 = Array.description.getter();
    uint64_t v60 = v59;
    swift_bridgeObjectRelease();
    unint64_t v61 = v69;
    *(void *)(v21 + 176) = &type metadata for String;
    *(void *)(v21 + 184) = v61;
    *(void *)(v21 + 152) = v58;
    *(void *)(v21 + 160) = v60;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v19 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 0;
    uint64_t v62 = (uint64_t)v75;
    sub_1008E745C((uint64_t)v70, (uint64_t)v75, (uint64_t (*)(void))type metadata accessor for Intent);
    sub_1008E53FC(v62);
    sub_1008E74C4(v62, (uint64_t (*)(void))type metadata accessor for Intent);
    sub_1008E5028();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABE60(v85[0]);
    swift_bridgeObjectRelease();
    v85[0] = *(void *)(a4 + 48);
    swift_retain();
    unint64_t v63 = v81;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
    uint64_t v88 = *(void **)(v19 + 72);
    sub_10000588C(&qword_101651788);
    sub_10000584C();
    sub_100062734(&qword_101651790, &qword_101651788);
    sub_1008E7364((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
    unint64_t v64 = v78;
    Publisher.throttle<A>(for:scheduler:latest:)();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v83);
    swift_release();
    sub_100062734(&qword_101651798, &qword_101651780);
    swift_retain();
    uint64_t v65 = v74;
    uint64_t v66 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v64, v65);
    *(void *)(v19 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = v66;
    swift_release();
    swift_retain();
    sub_10036A8F4((uint64_t)sub_1008E73B4, v19);
    uint64_t v56 = swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_101342130;
    uint64_t v51 = UUID.uuidString.getter();
    uint64_t v53 = v52;
    *(void *)(v50 + 56) = &type metadata for String;
    *(void *)(v50 + 64) = sub_10000B4CC();
    *(void *)(v50 + 32) = v51;
    *(void *)(v50 + 40) = v53;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v54 = swift_allocObject();
    swift_weakInit();
    uint64_t v55 = type metadata accessor for Transaction();
    __chkstk_darwin(v55);
    *(&v67 - 4) = v19;
    *(&v67 - 3) = (uint64_t)sub_1008E73BC;
    *(&v67 - 2) = v54;
    swift_retain();
    static Transaction.named<A>(_:with:)();
    swift_release_n();
    uint64_t v56 = swift_unknownObjectWeakLoadStrong();
    if (v56)
    {
      uint64_t v57 = v19 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess();
      sub_1008E745C(v57, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Intent);
      sub_100EFABD4((uint64_t)v17);
      swift_unknownObjectRelease();
      uint64_t v56 = sub_1008E74C4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Intent);
    }
  }
  ((void (*)(uint64_t))a2)(v56);
  return swift_release();
}

uint64_t sub_1008E3490(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  type metadata accessor for Transaction();
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.named<A>(_:with:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1008E3590(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = a1;
  type metadata accessor for Transaction();
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.named<A>(_:with:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1008E3690(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Intent();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    uint64_t v15 = *(void **)(Strong + 72);
    *uint64_t v12 = v15;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
    id v16 = v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    if (v15)
    {
      static os_log_type_t.default.getter();
      if (qword_101637298 == -1)
      {
LABEL_4:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_101342130;
        uint64_t v18 = UUID.uuidString.getter();
        uint64_t v20 = v19;
        *(void *)(v17 + 56) = &type metadata for String;
        *(void *)(v17 + 64) = sub_10000B4CC();
        *(void *)(v17 + 32) = v18;
        *(void *)(v17 + 40) = v20;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1008E745C(a4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Intent);
        uint64_t v21 = v14 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
        swift_beginAccess();
        sub_1008E6E9C((uint64_t)v8, v21);
        swift_endAccess();
        uint64_t v22 = sub_1008E53FC(a4);
        ((void (*)(uint64_t))a2)(v22);
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_4;
  }
  return a2();
}

uint64_t sub_1008E3974(uint64_t a1, uint64_t (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v4 = Strong;
  *(unsigned char *)(Strong + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 1;
  sub_1008E18F0();
  sub_1008E18D0();
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = 0;
  uint64_t v5 = swift_release();
  ((void (*)(uint64_t))a2)(v5);
  return swift_release();
}

uint64_t sub_1008E3A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_1008E6290;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAE70;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1008E3D40(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    Transaction.capture()();
    if ((*(unsigned char *)(v5 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) & 1) == 0) {
      a3();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1008E3DC8(uint64_t a1)
{
  uint64_t v105 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  unint64_t v104 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for DispatchQoS();
  uint64_t v116 = *(uint64_t (***)(void, void))(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Intent();
  uint64_t v101 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v99 = (uint64_t)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v7;
  __chkstk_darwin(v6);
  uint64_t v114 = (uint64_t)&v90 - v8;
  uint64_t v123 = type metadata accessor for DispatchPredicate();
  unint64_t v118 = *(void (***)(void *, uint64_t))(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v122 = (int64_t *)((char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000588C(&qword_101638D80);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v107 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v106 = (char *)&v90 - v13;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v14 - 8);
  uint64_t v124 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v125 - 8);
  uint64_t v17 = __chkstk_darwin(v125 - 8);
  uint64_t v126 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v90 - v19;
  Swift::Int v128 = sub_100DF3570((uint64_t)&off_1015A5670);
  int64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v127 = v16;
  uint64_t v121 = (void (**)(void, void, void))v21;
  if (v21)
  {
    uint64_t v135 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v21, 0);
    uint64_t v23 = a1 + 32;
    uint64_t v22 = v135;
    do
    {
      sub_10001D010(v23, (uint64_t)&aBlock);
      unint64_t v25 = v132;
      uint64_t v24 = v133;
      sub_10001CD44(&aBlock, (uint64_t)v132);
      (*(void (**)(void *))(*(void *)(*((void *)v24 + 1) + 8) + 32))(v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v22[2] + 1, 1);
        uint64_t v22 = v135;
      }
      unint64_t v27 = v22[2];
      unint64_t v26 = v22[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000B7034(v26 > 1, v27 + 1, 1);
        uint64_t v22 = v135;
      }
      void v22[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v127 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(void *)(v127 + 72) * v27, v20, v125);
      uint64_t v135 = v22;
      v23 += 40;
      --v21;
    }
    while (v21);
  }
  if (!v22[2])
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v112 = v2;
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v120 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101347BA0;
  uint64_t v29 = v108;
  unint64_t v119 = (void (**)(void *, void, uint64_t))((char *)v108
                                                         + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID);
  uint64_t v30 = UUID.uuidString.getter();
  uint64_t v32 = v31;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v33 = sub_10000B4CC();
  uint64_t v117 = v33;
  *(void *)(v28 + 32) = v30;
  *(void *)(v28 + 40) = v32;
  *(void *)(v28 + 96) = &type metadata for Int;
  *(void *)(v28 + 104) = &protocol witness table for Int;
  uint64_t v34 = v121;
  *(void *)(v28 + 64) = v33;
  *(void *)(v28 + 72) = v34;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v36 = v35 + 16;
  int64_t v37 = dispatch_group_create();
  dispatch_group_enter(v37);
  sub_10001CD44(v29 + 4, v29[7]);
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = v124;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v124, 1, 1, v38);
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v35;
  v40[3] = v29;
  v40[4] = a1;
  void v40[5] = v37;
  uint64_t v92 = v35;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v37;
  sub_10044CCF0((char *)v22, v39, v128, 0, (uint64_t)sub_1008E7140, (uint64_t)v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001DAB4(v39, (uint64_t *)&unk_10163AC90);
  static os_log_type_t.default.getter();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_101347500;
  uint64_t v43 = UUID.uuidString.getter();
  uint64_t v44 = v117;
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = v44;
  *(void *)(v42 + 32) = v43;
  *(void *)(v42 + 40) = v45;
  swift_beginAccess();
  uint64_t v46 = *(void *)(*(void *)v36 + 16);
  *(void *)(v42 + 96) = &type metadata for Int;
  *(void *)(v42 + 104) = &protocol witness table for Int;
  *(void *)(v42 + 112) = v34;
  *(void *)(v42 + 72) = v46;
  *(void *)(v42 + 136) = &type metadata for Int;
  *(void *)(v42 + 144) = &protocol witness table for Int;
  os_log(_:dso:log:_:_:)();
  uint64_t v22 = v29;
  swift_bridgeObjectRelease();
  uint64_t v91 = v41;
  OS_dispatch_group.wait()();
  uint64_t v47 = *(void *)v36;
  uint64_t v48 = *(void *)(*(void *)v36 + 64);
  uint64_t v93 = *(void *)v36 + 64;
  uint64_t v49 = 1 << *(unsigned char *)(v47 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  unint64_t v51 = v50 & v48;
  uint64_t v117 = OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore;
  unint64_t v110 = v29 + 2;
  uint64_t v52 = (uint64_t)v29 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
  uint64_t v115 = v47;
  swift_bridgeObjectRetain();
  uint64_t v98 = v52;
  uint64_t result = swift_beginAccess();
  uint64_t v124 = 0;
  uint64_t v113 = v127 + 16;
  uint64_t v121 = (void (**)(void, void, void))(v127 + 32);
  LODWORD(v120) = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v119 = (void (**)(void *, void, uint64_t))(v118 + 13);
  ++v118;
  uint64_t v97 = &v131;
  char v96 = (void (**)(char *, uint64_t))(v112 + 8);
  uint64_t v95 = (void (**)(char *, uint64_t))(v116 + 1);
  uint64_t v116 = (uint64_t (**)(void, void))(v127 + 8);
  int64_t v109 = (unint64_t)(v49 + 63) >> 6;
  int64_t v90 = v109 - 1;
  uint64_t v54 = &qword_101638D88;
  long long v94 = xmmword_101342130;
  a1 = (uint64_t)v107;
  uint64_t v55 = (uint64_t)v106;
  uint64_t v56 = v125;
  while (1)
  {
    if (v51)
    {
      unint64_t v57 = __clz(__rbit64(v51));
      uint64_t v58 = (v51 - 1) & v51;
      unint64_t v59 = v57 | (v124 << 6);
LABEL_17:
      uint64_t v60 = v115;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v127 + 16))(a1, *(void *)(v115 + 48) + *(void *)(v127 + 72) * v59, v56);
      uint64_t v61 = *(void *)(v60 + 56);
      uint64_t v62 = sub_10000588C(v54);
      unint64_t v63 = *(void **)(v61 + 8 * v59);
      *(void *)(a1 + *(int *)(v62 + 48)) = v63;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(a1, 0, 1, v62);
      id v64 = v63;
      goto LABEL_36;
    }
    int64_t v65 = v124 + 1;
    if (__OFADD__(v124, 1)) {
      goto LABEL_46;
    }
    if (v65 < v109)
    {
      unint64_t v66 = *(void *)(v93 + 8 * v65);
      if (v66) {
        goto LABEL_21;
      }
      int64_t v67 = v124 + 2;
      ++v124;
      if (v65 + 1 < v109)
      {
        unint64_t v66 = *(void *)(v93 + 8 * v67);
        if (v66) {
          goto LABEL_24;
        }
        uint64_t v124 = v65 + 1;
        if (v65 + 2 < v109)
        {
          unint64_t v66 = *(void *)(v93 + 8 * (v65 + 2));
          if (v66)
          {
            v65 += 2;
            goto LABEL_21;
          }
          int64_t v67 = v65 + 3;
          uint64_t v124 = v65 + 2;
          if (v65 + 3 < v109) {
            break;
          }
        }
      }
    }
LABEL_35:
    uint64_t v68 = sub_10000588C(v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(a1, 1, 1, v68);
    uint64_t v58 = 0;
LABEL_36:
    sub_10001D608(a1, v55, &qword_101638D80);
    uint64_t v69 = sub_10000588C(v54);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 48))(v55, 1, v69) == 1)
    {
      swift_release();

      return swift_release();
    }
    Swift::Int v128 = v58;
    uint64_t v70 = v54;
    uint64_t v71 = *(void **)(v55 + *(int *)(v69 + 48));
    uint64_t v72 = (uint64_t)v126;
    (*v121)(v126, v55, v56);
    uint64_t v73 = (void *)v22[9];
    uint64_t v74 = v122;
    *uint64_t v122 = v73;
    uint64_t v75 = v123;
    (*v119)(v74, v120, v123);
    id v76 = v73;
    LOBYTE(v73) = _dispatchPreconditionTest(_:)();
    (*v118)(v74, v75);
    if ((v73 & 1) == 0)
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    sub_100ACCD98(v72, (uint64_t)&aBlock);
    if (v132)
    {
      sub_10001CEB0(&aBlock, (uint64_t)&v135);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v78 = Strong;
        sub_10000588C((uint64_t *)&unk_101657630);
        uint64_t v79 = swift_allocObject();
        *(_OWORD *)(v79 + 16) = v94;
        sub_10001D010((uint64_t)&v135, v79 + 32);
        uint64_t v80 = v114;
        sub_1008E745C(v98, v114, (uint64_t (*)(void))type metadata accessor for Intent);
        uint64_t v112 = *(void *)(v78 + 72);
        uint64_t v81 = v80;
        uint64_t v82 = v99;
        sub_1008E745C(v81, v99, (uint64_t (*)(void))type metadata accessor for Intent);
        unint64_t v83 = (*(unsigned __int8 *)(v101 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
        uint64_t v84 = (void *)swift_allocObject();
        v84[2] = v79;
        v84[3] = v71;
        v84[4] = v78;
        sub_1008E73F4(v82, (uint64_t)v84 + v83, (uint64_t (*)(void))type metadata accessor for Intent);
        uint64_t v133 = sub_1008E72A8;
        uint64_t v134 = v84;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        uint64_t v131 = sub_1004B5480;
        uint64_t v132 = &unk_1015DAF88;
        uint64_t v85 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain();
        id v111 = v71;
        swift_unknownObjectRetain();
        uint64_t v86 = v102;
        static DispatchQoS.unspecified.getter();
        uint64_t v129 = _swiftEmptyArrayStorage;
        sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v87 = v104;
        uint64_t v88 = v105;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v89 = v85;
        uint64_t v56 = v125;
        _Block_release(v89);
        uint64_t v55 = (uint64_t)v106;
        (*v96)(v87, v88);
        (*v95)(v86, v103);
        swift_unknownObjectRelease();
        uint64_t v22 = v108;
        swift_bridgeObjectRelease();

        swift_release();
        a1 = (uint64_t)v107;
        sub_1008E74C4(v114, (uint64_t (*)(void))type metadata accessor for Intent);
      }
      else
      {
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v135);
      uint64_t result = (*v116)(v126, v56);
    }
    else
    {
      (*v116)(v72, v56);

      uint64_t result = sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
    }
    uint64_t v54 = v70;
    unint64_t v51 = v128;
  }
  unint64_t v66 = *(void *)(v93 + 8 * v67);
  if (v66)
  {
LABEL_24:
    int64_t v65 = v67;
LABEL_21:
    uint64_t v58 = (v66 - 1) & v66;
    unint64_t v59 = __clz(__rbit64(v66)) + (v65 << 6);
    uint64_t v124 = v65;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v65 = v67 + 1;
    if (__OFADD__(v67, 1)) {
      break;
    }
    if (v65 >= v109)
    {
      uint64_t v124 = v90;
      goto LABEL_35;
    }
    unint64_t v66 = *(void *)(v93 + 8 * v65);
    ++v67;
    if (v66) {
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

void sub_1008E4EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  swift_beginAccess();
  *(void *)(a2 + 16) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347500;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(v9 + 96) = &type metadata for Int;
  *(void *)(v9 + 104) = &protocol witness table for Int;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = v14;
  uint64_t v15 = *(void *)(a4 + 16);
  *(void *)(v9 + 136) = &type metadata for Int;
  *(void *)(v9 + 144) = &protocol witness table for Int;
  *(void *)(v9 + 112) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  dispatch_group_leave(a5);
}

uint64_t sub_1008E5028()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1008E70B0;
  uint64_t v14 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAEE8;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v12);
}

void sub_1008E52E4(uint64_t a1)
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer;
  if (!*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer))
  {
    uint64_t v3 = self;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABE0C(v8);
    double v5 = v4;
    swift_bridgeObjectRelease();
    id v6 = [v3 scheduledTimerWithTimeInterval:a1 target:"nearOwnerBeaconNotObserved" selector:0 userInfo:1 repeats:v5];
    uint64_t v7 = *(void **)(a1 + v1);
    *(void *)(a1 + v1) = v6;
  }
}

uint64_t sub_1008E53FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Intent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  sub_10000584C();
  unint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
  sub_1008E745C(a1, (uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Intent);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  sub_1008E73F4((uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for Intent);
  aBlock[4] = sub_1008E704C;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015DAEC0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1008E7364((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v9, v20);
}

uint64_t sub_1008E5794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer;
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer);
  if (v9)
  {
    [v9 invalidate];
    uint64_t v10 = *(void **)(a1 + v8);
    *(void *)(a1 + v8) = 0;
  }
  id v11 = [self scheduledTimerWithTimeInterval:a1 target:"intentTimerFiredWithTimer:" selector:0 userInfo:0 repeats:*(double *)(a2 + 48)];
  uint64_t v12 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = v11;
  id v13 = v11;

  v24[3] = static os_log_type_t.default.getter();
  if (qword_101637298 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v18 = sub_10000B4CC();
  *(void *)(v14 + 64) = v18;
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  id v19 = [v13 fireDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1008E7364((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v18;
  *(void *)(v14 + 72) = v20;
  *(void *)(v14 + 80) = v22;
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1008E5A30()
{
  uint64_t v0 = type metadata accessor for Intent();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v11[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_1008E1C54();
    static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    uint64_t v7 = UUID.uuidString.getter();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v10 = v4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess();
      sub_1008E745C(v10, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Intent);
      sub_100EF969C(v4, (uint64_t)v5);
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return sub_1008E74C4((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Intent);
    }
    else
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1008E5D30()
{
  uint64_t v0 = type metadata accessor for Intent();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v16[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void **)(result + 72);
    *uint64_t v6 = v9;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    id v10 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    if (v9)
    {
      static os_log_type_t.default.getter();
      if (qword_101637298 == -1) {
        goto LABEL_4;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_4:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    uint64_t v12 = UUID.uuidString.getter();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10000B4CC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v15 = v8 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess();
      sub_1008E745C(v15, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Intent);
      sub_100EFABD4((uint64_t)v2);
      swift_release();
      swift_unknownObjectRelease();
      return sub_1008E74C4((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Intent);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008E6100()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Intent();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1008E6210()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008E6248()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1008E6290()
{
  return sub_1008E3D40(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_1008E629C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1008E62AC()
{
  return swift_release();
}

uint64_t sub_1008E62B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v110 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v96 - v7;
  uint64_t v109 = sub_10000588C(&qword_1016517A0);
  uint64_t v9 = __chkstk_darwin(v109);
  uint64_t v108 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v107 = (uint64_t)v96 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v106 = (char *)v96 - v14;
  __chkstk_darwin(v13);
  uint64_t v105 = (char *)v96 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (void *)((char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v21 = *(void **)(result + 72);
  *id v19 = v21;
  uint64_t v22 = result;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v23 = v21;
  uint64_t v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v24 & 1) == 0) {
    goto LABEL_64;
  }
  v96[1] = v22;
  id v111 = sub_1008E1C54();
  int64_t v25 = *(void *)(a2 + 16);
  unint64_t v26 = (char *)_swiftEmptyArrayStorage;
  if (!v25)
  {
LABEL_28:
    unint64_t v114 = *((void *)v26 + 2);
    if (v114)
    {
      unint64_t v62 = 0;
      uint64_t v63 = v111[2];
      uint64_t v113 = (uint64_t)(v26 + 32);
      uint64_t v109 = (uint64_t)(v111 + 4);
      id v64 = (void (**)(char *, uint64_t))(v110 + 8);
      uint64_t v24 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v108 = v26;
      uint64_t v112 = v63;
      do
      {
        if (v62 >= *((void *)v26 + 2))
        {
          __break(1u);
          goto LABEL_58;
        }
        sub_10001D010(v113 + 40 * v62, (uint64_t)v118);
        if (v63)
        {
          int64_t v65 = (void *)v24;
          swift_bridgeObjectRetain();
          uint64_t v66 = v109;
          uint64_t v67 = v63;
          while (1)
          {
            sub_10001D010(v66, (uint64_t)&v115);
            uint64_t v69 = v116;
            uint64_t v68 = v117;
            sub_10001CD44(&v115, v116);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v68 + 8) + 8) + 32))(v69);
            uint64_t v71 = v119;
            uint64_t v70 = v120;
            sub_10001CD44(v118, v119);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v70 + 8) + 8) + 32))(v71);
            LOBYTE(v70) = static UUID.== infix(_:_:)();
            uint64_t v72 = *v64;
            (*v64)(v6, v3);
            v72(v8, v3);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v115);
            if (v70) {
              break;
            }
            v66 += 40;
            if (!--v67)
            {
              swift_bridgeObjectRelease();
              uint64_t v24 = (uint64_t)v65;
              unint64_t v26 = v108;
              uint64_t v63 = v112;
              goto LABEL_30;
            }
          }
          swift_bridgeObjectRelease();
          sub_10001D010((uint64_t)v118, (uint64_t)&v115);
          uint64_t v24 = (uint64_t)v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v24 = (uint64_t)sub_100A6F7F0(0, v65[2] + 1, 1, v65);
          }
          unint64_t v26 = v108;
          unint64_t v74 = *(void *)(v24 + 16);
          unint64_t v73 = *(void *)(v24 + 24);
          if (v74 >= v73 >> 1) {
            uint64_t v24 = (uint64_t)sub_100A6F7F0((void *)(v73 > 1), v74 + 1, 1, (void *)v24);
          }
          *(void *)(v24 + 16) = v74 + 1;
          sub_10001CEB0(&v115, v24 + 40 * v74 + 32);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v118);
          uint64_t v63 = v112;
        }
        else
        {
LABEL_30:
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v118);
        }
        ++v62;
      }
      while (v62 != v114);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v24 + 16)) {
        goto LABEL_55;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = (uint64_t)_swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2])
      {
LABEL_55:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    LODWORD(v6) = static os_log_type_t.default.getter();
    if (qword_101637298 != -1) {
      goto LABEL_65;
    }
    goto LABEL_45;
  }
  *(void *)&long long v115 = _swiftEmptyArrayStorage;
  sub_1000B7570(0, v25, 0);
  uint64_t v28 = sub_100803228(a2);
  uint64_t v29 = 0;
  uint64_t v30 = a2 + 64;
  uint64_t v102 = v110 + 16;
  uint64_t v100 = v110 + 8;
  char v31 = *(unsigned char *)(a2 + 32);
  v96[0] = a2 + 88;
  uint64_t v104 = a2;
  uint64_t v103 = v8;
  int64_t v97 = v25;
  uint64_t v98 = v27;
  uint64_t v99 = a2 + 64;
  uint64_t v101 = v6;
  while ((v28 & 0x8000000000000000) == 0 && v28 < 1 << v31)
  {
    if ((*(void *)(v30 + 8 * ((unint64_t)v28 >> 6)) & (1 << v28)) == 0) {
      goto LABEL_59;
    }
    if (*(_DWORD *)(a2 + 36) != v27) {
      goto LABEL_60;
    }
    uint64_t v113 = 1 << v28;
    unint64_t v114 = (unint64_t)v28 >> 6;
    uint64_t v112 = v29;
    uint64_t v36 = v109;
    uint64_t v35 = v110;
    uint64_t v37 = (uint64_t)v105;
    uint64_t v38 = (uint64_t)&v105[*(int *)(v109 + 48)];
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
    v39(v105, *(void *)(a2 + 48) + *(void *)(v110 + 72) * v28, v3);
    sub_10001D010(*(void *)(a2 + 56) + 40 * v28, v38);
    uint64_t v40 = (uint64_t)v106;
    v39(v106, v37, v3);
    sub_10001D010(v38, v40 + *(int *)(v36 + 48));
    uint64_t v41 = v3;
    uint64_t v42 = v107;
    sub_10001D608(v40, v107, &qword_1016517A0);
    sub_10001DAB4(v37, &qword_1016517A0);
    uint64_t v43 = *(int *)(v36 + 48);
    uint64_t v44 = v108;
    uint64_t v45 = (long long *)&v108[v43];
    uint64_t v46 = v42 + v43;
    v39(v108, v42, v41);
    sub_10001D010(v46, (uint64_t)v45);
    sub_10001CEB0(v45, (uint64_t)v118);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v41);
    sub_10001DAB4(v42, &qword_1016517A0);
    uint64_t v47 = v115;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7570(0, *(void *)(v47 + 16) + 1, 1);
      uint64_t v47 = v115;
    }
    unint64_t v49 = *(void *)(v47 + 16);
    unint64_t v48 = *(void *)(v47 + 24);
    uint64_t v3 = v41;
    uint64_t v8 = v103;
    uint64_t v6 = v101;
    if (v49 >= v48 >> 1) {
      sub_1000B7570(v48 > 1, v49 + 1, 1);
    }
    uint64_t v50 = v119;
    uint64_t v51 = v120;
    uint64_t v52 = sub_1000BD078((uint64_t)v118, v119);
    uint64_t v24 = (uint64_t)v96;
    __chkstk_darwin(v52);
    uint64_t v54 = (char *)v96 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v55 + 16))(v54);
    sub_1006985B0(v49, (uint64_t)v54, (uint64_t *)&v115, v50, v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v118);
    a2 = v104;
    char v31 = *(unsigned char *)(v104 + 32);
    unint64_t v32 = 1 << v31;
    if (v28 >= 1 << v31) {
      goto LABEL_61;
    }
    uint64_t v30 = v99;
    unint64_t v56 = v114;
    uint64_t v57 = *(void *)(v99 + 8 * v114);
    if ((v57 & v113) == 0) {
      goto LABEL_62;
    }
    LODWORD(v27) = v98;
    if (*(_DWORD *)(v104 + 36) != v98) {
      goto LABEL_63;
    }
    unint64_t v58 = v57 & (-2 << (v28 & 0x3F));
    if (v58)
    {
      unint64_t v32 = __clz(__rbit64(v58)) | v28 & 0xFFFFFFFFFFFFFFC0;
      int64_t v33 = v97;
      uint64_t v34 = v112;
    }
    else
    {
      unint64_t v59 = v114 + 1;
      unint64_t v60 = (v32 + 63) >> 6;
      int64_t v33 = v97;
      uint64_t v34 = v112;
      if (v114 + 1 < v60)
      {
        unint64_t v61 = *(void *)(v99 + 8 * v59);
        if (!v61)
        {
          unint64_t v59 = v114 + 2;
          if (v114 + 2 >= v60) {
            goto LABEL_6;
          }
          unint64_t v61 = *(void *)(v99 + 8 * v59);
          if (!v61)
          {
            while (v60 - 3 != v56)
            {
              unint64_t v61 = *(void *)(v96[0] + 8 * v56++);
              if (v61)
              {
                unint64_t v59 = v56 + 2;
                goto LABEL_21;
              }
            }
            goto LABEL_6;
          }
        }
LABEL_21:
        unint64_t v32 = __clz(__rbit64(v61)) + (v59 << 6);
      }
    }
LABEL_6:
    uint64_t v29 = v34 + 1;
    uint64_t v28 = v32;
    if (v29 == v33)
    {
      unint64_t v26 = (char *)v115;
      goto LABEL_28;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_45:
  uint64_t v75 = qword_10170EFF0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_101347BA0;
  uint64_t v77 = UUID.uuidString.getter();
  uint64_t v79 = v78;
  *(void *)(v76 + 56) = &type metadata for String;
  unint64_t v114 = sub_10000B4CC();
  *(void *)(v76 + 64) = v114;
  *(void *)(v76 + 32) = v77;
  *(void *)(v76 + 40) = v79;
  int64_t v80 = *(void *)(v24 + 16);
  if (v80)
  {
    uint64_t v109 = v76;
    id v111 = (void *)v75;
    LODWORD(v112) = v6;
    *(void *)&long long v115 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B6ED0(0, v80, 0);
    uint64_t v113 = v24;
    uint64_t v81 = v24 + 32;
    uint64_t v82 = (void (**)(char *, uint64_t))(v110 + 8);
    do
    {
      sub_10001D010(v81, (uint64_t)v118);
      uint64_t v84 = v119;
      uint64_t v83 = v120;
      sub_10001CD44(v118, v119);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v83 + 8) + 8) + 32))(v84);
      uint64_t v85 = UUID.uuidString.getter();
      uint64_t v87 = v86;
      (*v82)(v8, v3);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v118);
      uint64_t v88 = v115;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6ED0(0, *(void *)(v88 + 16) + 1, 1);
        uint64_t v88 = v115;
      }
      unint64_t v90 = *(void *)(v88 + 16);
      unint64_t v89 = *(void *)(v88 + 24);
      if (v90 >= v89 >> 1)
      {
        sub_1000B6ED0(v89 > 1, v90 + 1, 1);
        uint64_t v88 = v115;
      }
      *(void *)(v88 + 16) = v90 + 1;
      uint64_t v91 = v88 + 16 * v90;
      *(void *)(v91 + 32) = v85;
      *(void *)(v91 + 40) = v87;
      v81 += 40;
      --v80;
    }
    while (v80);
    uint64_t v24 = v113;
    swift_bridgeObjectRelease();
    uint64_t v76 = v109;
  }
  uint64_t v92 = Array.description.getter();
  uint64_t v94 = v93;
  swift_bridgeObjectRelease();
  unint64_t v95 = v114;
  *(void *)(v76 + 96) = &type metadata for String;
  *(void *)(v76 + 104) = v95;
  *(void *)(v76 + 72) = v92;
  *(void *)(v76 + 80) = v94;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008E3DC8(v24);
  swift_bridgeObjectRelease();
  sub_1008E18D0();
  sub_1008E5028();
  return swift_release();
}

uint64_t sub_1008E6E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Intent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008E6F00()
{
  unint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1008E704C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1008E5794(v2, v3);
}

void sub_1008E70B0()
{
  sub_1008E52E4(v0);
}

uint64_t sub_1008E70B8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008E70F0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1008E7140(uint64_t a1)
{
  sub_1008E4EB8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1008E714C()
{
  uint64_t v1 = (int *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[11];
  uint64_t v6 = type metadata accessor for BeaconLocationUpdate();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1008E72A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Intent() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = (char *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100EF8E5C(v2, v3, v4, v5);
}

uint64_t sub_1008E7310()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1008E7358()
{
  return sub_1008E2A34(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1008E7364(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008E73AC(uint64_t *a1)
{
  return sub_1008E3490(a1);
}

uint64_t sub_1008E73B4(uint64_t a1)
{
  return sub_1008E3590(a1);
}

uint64_t sub_1008E73BC()
{
  return sub_1008E5A30();
}

uint64_t sub_1008E73C4(uint64_t a1)
{
  return sub_1008E3A24(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1008E73E8()
{
  return sub_1008E62B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1008E73F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008E745C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008E74C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1008E7524()
{
  sub_1008E1BD4(v0, &OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer);
}

void sub_1008E7548()
{
  sub_1008E1BD4(v0, &OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer);
}

uint64_t sub_1008E756C()
{
  return sub_1008E5D30();
}

uint64_t sub_1008E75A8(uint64_t a1)
{
  return sub_1008E73C4(a1);
}

uint64_t sub_1008E75C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008E75D4);
}

uint64_t sub_1008E75D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1008E7684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008E7698);
}

void *sub_1008E7698(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NFCTapEndPoint()
{
  uint64_t result = qword_101651800;
  if (!qword_101651800) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008E778C()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x6970617463666E2FLL;
  v1._object = (void *)0xEB000000006F666ELL;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

ValueMetadata *type metadata accessor for SendPairingDataCommandPayload()
{
  return &type metadata for SendPairingDataCommandPayload;
}

uint64_t sub_1008E78A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1008E7A88(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_1008E78D4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1008E7904();
  unint64_t result = sub_1008E7958();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008E7904()
{
  unint64_t result = qword_101651838;
  if (!qword_101651838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651838);
  }
  return result;
}

unint64_t sub_1008E7958()
{
  unint64_t result = qword_101651840;
  if (!qword_101651840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651840);
  }
  return result;
}

uint64_t sub_1008E79AC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_15;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 32) {
        goto LABEL_18;
      }
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v8 = (int)v8;
LABEL_11:
      if (v8 != 1326)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1008E7A68);
      }
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(a3 + 16);
      uint64_t v9 = *(void *)(a3 + 24);
      BOOL v7 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_14;
    default:
      goto LABEL_17;
  }
}

uint64_t sub_1008E7A88(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = sub_1000BD078((uint64_t)v11, v12);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000BD078((uint64_t)v11, v12);
    uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v3 = sub_1008E79AC(v6, v7, v8, v10);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

void *sub_1008E7BBC@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__CFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *sub_1008E7BD8(void *result, void *a2)
{
  if (__CFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *sub_1008E7BF4@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result < *a2) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *sub_1008E7C10(void *result, void *a2)
{
  if (*result < *a2) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

BOOL sub_1008E7C2C(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1008E7C40(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1008E7C54(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1008E7C68(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1008E7C7C()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x7972616D6972702ELL;
}

Swift::Int sub_1008E7D04()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1008E7D4C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1008E7D78()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_1008E7DBC@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  if (*result >= (unint64_t)*v2)
  {
    if (*result - *v2 >= 0)
    {
      *a2 = *result - *v2;
      return result;
    }
  }
  else
  {
    if (v4 - v3 >= 0)
    {
      *a2 = v3 - v4;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1008E7DF4@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *v2;
  if ((*result & 0x8000000000000000) == 0)
  {
    BOOL v5 = __CFADD__(v4, v3);
    v4 += v3;
    if (!v5) {
      goto LABEL_9;
    }
    __break(1u);
  }
  BOOL v6 = __OFSUB__(0, v3);
  unint64_t v7 = -v3;
  if (v6)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    BOOL v5 = v4 >= v7;
    v4 -= v7;
    if (v5)
    {
LABEL_9:
      *a2 = v4;
      return result;
    }
    goto LABEL_11;
  }
LABEL_12:
  unint64_t result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1008E7E90(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = *a6;
  if ((*a6 & 0x8000000000000000) == 0)
  {
    BOOL v8 = __CFADD__(v6, v7);
    v6 += v7;
    if (!v8) {
      goto LABEL_9;
    }
    __break(1u);
  }
  BOOL v9 = __OFSUB__(0, v7);
  unint64_t v10 = -v7;
  if (v9)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    BOOL v8 = v6 >= v10;
    v6 -= v10;
    if (v8)
    {
LABEL_9:
      *a1 = v6;
      return 0;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_1008E7F34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0) {
      return (uint64_t *)(v4 == 0);
    }
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      uint64_t v4 = v3 - v2;
      return (uint64_t *)(v4 == 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1008E7F6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  sub_10001CD44(v8, v8[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v8);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v6;
  return result;
}

uint64_t sub_1008E8054(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1000BD078((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
}

ValueMetadata *type metadata accessor for PrimaryWildIndex()
{
  return &type metadata for PrimaryWildIndex;
}

unint64_t sub_1008E80FC()
{
  unint64_t result = qword_101651848;
  if (!qword_101651848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651848);
  }
  return result;
}

void *sub_1008E8150()
{
  return &protocol witness table for Int64;
}

void *sub_1008E815C()
{
  return &protocol witness table for Int64;
}

void *sub_1008E8168()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_1008E8178()
{
  unint64_t result = qword_101651850;
  if (!qword_101651850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651850);
  }
  return result;
}

unint64_t sub_1008E81CC(void *a1)
{
  a1[1] = sub_1008E822C();
  a1[2] = sub_1008E8280();
  a1[3] = sub_1008E82D4();
  a1[4] = sub_1008E8328();
  a1[5] = sub_1008E837C();
  a1[6] = sub_1008E83D0();
  a1[7] = sub_1008E8424();
  unint64_t result = sub_1008E8478();
  a1[8] = result;
  return result;
}

unint64_t sub_1008E822C()
{
  unint64_t result = qword_101651858;
  if (!qword_101651858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651858);
  }
  return result;
}

unint64_t sub_1008E8280()
{
  unint64_t result = qword_101651860;
  if (!qword_101651860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651860);
  }
  return result;
}

unint64_t sub_1008E82D4()
{
  unint64_t result = qword_101651868;
  if (!qword_101651868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651868);
  }
  return result;
}

unint64_t sub_1008E8328()
{
  unint64_t result = qword_101651870;
  if (!qword_101651870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651870);
  }
  return result;
}

unint64_t sub_1008E837C()
{
  unint64_t result = qword_101651878;
  if (!qword_101651878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651878);
  }
  return result;
}

unint64_t sub_1008E83D0()
{
  unint64_t result = qword_101651880;
  if (!qword_101651880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651880);
  }
  return result;
}

unint64_t sub_1008E8424()
{
  unint64_t result = qword_101651888;
  if (!qword_101651888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651888);
  }
  return result;
}

unint64_t sub_1008E8478()
{
  unint64_t result = qword_101651890;
  if (!qword_101651890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651890);
  }
  return result;
}

uint64_t sub_1008E84CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E5C8);
  sub_100010324(v0, (uint64_t)qword_10170E5C8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1008E8548(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v230 = a4;
  v229 = a3;
  int v224 = a2;
  v231 = (uint8_t *)a1;
  uint64_t v210 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v210);
  long long v217 = (uint64_t *)((char *)&v208 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v213 = (uint64_t)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v215 = *(void *)(v216 - 8);
  uint64_t v8 = __chkstk_darwin(v216);
  unint64_t v10 = (char *)&v208 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v212 = (uint64_t)&v208 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v208 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v15 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v218 = (uint64_t)&v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = type metadata accessor for UUID();
  uint64_t v226 = *(void *)(v227 - 8);
  uint64_t v17 = __chkstk_darwin(v227);
  uint64_t v223 = (uint64_t)&v208 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v211 = (char *)&v208 - v19;
  uint64_t v220 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v220);
  v221 = (uint64_t *)((char *)&v208 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for LostModeRecord();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v214 = (uint64_t)&v208 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  int64_t v25 = (char *)&v208 - v24;
  uint64_t v26 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v208 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v30 = *((void *)v29 - 1);
  __chkstk_darwin(v29);
  unint64_t v32 = (char *)&v208 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = v4;
  v228 = (int *)v21;
  uint64_t v33 = (uint64_t)&v231[*(int *)(v21 + 24)];
  sub_100ACD178((uint64_t)v28);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, int *))(v30 + 48);
  v222 = v29;
  if (v34(v28, 1, v29) != 1)
  {
    sub_1008F42F4((uint64_t)v28, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v43 = (uint64_t)v32;
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170E5C8);
    sub_1008F4038((uint64_t)v231, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = v227;
    if (v47)
    {
      uint64_t v49 = swift_slowAlloc();
      *(void *)&long long v238 = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 141558275;
      *(void *)&long long v232 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 12) = 2081;
      uint64_t v219 = v49 + 14;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v232 = sub_1008FA0F0(v50, v51, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v43 = (uint64_t)v32;
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v63 = v226;
    id v64 = v221;
    sub_1008F4038(v43 + v222[6], (uint64_t)v221, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v66 = v223;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v209 = v43;
        uint64_t v226 = *v64;
        uint64_t v100 = v64[2];
        uint64_t v223 = v64[1];
        uint64_t v101 = v64[3];
        uint64_t v102 = v64[4];
        v222 = (int *)v64[5];
        uint64_t v103 = (uint64_t)v211;
        (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v211, v33, v48);
        uint64_t v104 = (uint64_t *)&v231[v228[9]];
        uint64_t v106 = *v104;
        uint64_t v105 = v104[1];
        uint64_t v107 = (uint64_t *)&v231[v228[7]];
        uint64_t v108 = *v107;
        uint64_t v109 = v107[1];
        uint64_t v110 = (uint64_t *)&v231[v228[8]];
        uint64_t v111 = *v110;
        uint64_t v112 = v110[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F33D54(v103, v100, v101, v226, v223, v102, (uint64_t)v222, 0x646F4D2074736F4CLL, 0xE900000000000065, v106, v105, v108, v109, v111, v112, v224 & 1);
        if (v113)
        {
          uint64_t v90 = v113;
          uint64_t v91 = v114;
          unint64_t v92 = v115;
          sub_10076813C(v113, v114, v115);
          uint64_t v116 = (void *)sub_1008ED4AC(0);
          sub_1008EC844(v90, v91, v92, v116);
          swift_release();
          uint64_t v117 = swift_allocObject();
          unint64_t v118 = v229;
          uint64_t v119 = v230;
          *(void *)(v117 + 16) = v229;
          *(void *)(v117 + 24) = v119;
          swift_retain();
          Future.addFailure(block:)();
          swift_release();
          swift_release();
          uint64_t v120 = (void *)swift_allocObject();
          v120[2] = v225;
          v120[3] = v118;
          v120[4] = v119;
          swift_retain();
          swift_retain();
          Future.addSuccess(block:)();
          swift_release();
          swift_release();
          swift_release();
          sub_1001D7860(v90, v91, v92);
          goto LABEL_32;
        }
        static os_log_type_t.error.getter();
        if (qword_1016372E0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        sub_100484228();
        swift_allocError();
        unsigned char *v183 = 0;
        v229();
        swift_errorRelease();
        v184 = type metadata accessor for OwnedBeaconRecord;
        uint64_t v185 = (long long *)((char *)&v236 + 8);
        return sub_1008F40A0(*((void *)v185 - 32), (uint64_t (*)(void))v184);
      case 2:
        uint64_t v209 = v43;
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v63 + 32))(v66, v64, v48);
        uint64_t v121 = (uint64_t)v211;
        (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v211, v66, v48);
        uint64_t v122 = (uint64_t *)&v231[v228[9]];
        uint64_t v123 = *v122;
        uint64_t v124 = v122[1];
        uint64_t v125 = (uint64_t *)&v231[v228[7]];
        uint64_t v126 = *v125;
        uint64_t v127 = v125[1];
        Swift::Int v128 = (uint64_t *)&v231[v228[8]];
        uint64_t v129 = *v128;
        uint64_t v130 = v128[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F42A30(v121, 0x646F4D2074736F4CLL, 0xE900000000000065, v123, v124, v126, v127, v129, v130, v224 & 1);
        if (!v131)
        {
          static os_log_type_t.error.getter();
          uint64_t v186 = v209;
          if (qword_1016372E0 != -1) {
            swift_once();
          }
          os_log(_:dso:log:_:_:)();
          sub_100484228();
          swift_allocError();
          *id v187 = 0;
          v229();
          swift_errorRelease();
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v48);
          return sub_1008F40A0(v186, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
        uint64_t v90 = v131;
        uint64_t v91 = v132;
        unint64_t v92 = v133;
        BOOL v134 = sub_100DF1520(*(void *)(v209 + v222[16]), *(void *)(v209 + v222[17]));
        sub_10076813C(v90, v91, v92);
        if (v134) {
          char v135 = 2;
        }
        else {
          char v135 = 1;
        }
        uint64_t v136 = (void *)sub_1008ED4AC(v135);
        sub_1008EC4EC(v90, v91, v92, v136);
        swift_release();
        uint64_t v137 = swift_allocObject();
        uint64_t v138 = v229;
        uint64_t v139 = v230;
        *(void *)(v137 + 16) = v229;
        *(void *)(v137 + 24) = v139;
        swift_retain();
        Future.addFailure(block:)();
        swift_release();
        swift_release();
        uint64_t v140 = (void *)swift_allocObject();
        v140[2] = v225;
        v140[3] = v138;
        v140[4] = v139;
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)();
        swift_release();
        swift_release();
        swift_release();
        sub_1001D7860(v90, v91, v92);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v223, v48);
LABEL_32:
        uint64_t v98 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v141 = (long long *)((char *)&v236 + 8);
        break;
      case 3:
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1008EC140();
        swift_allocError();
        *uint64_t v142 = 7;
        v229();
        swift_errorRelease();
        sub_1008F40A0(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v63 + 8))(v64, v48);
      default:
        swift_bridgeObjectRelease();
        sub_1008EC140();
        swift_allocError();
        *uint64_t v67 = 7;
        v229();
        swift_errorRelease();
        return sub_1008F40A0(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    goto LABEL_57;
  }
  sub_10001DAB4((uint64_t)v28, &qword_10163B9F0);
  sub_100AE75E0(v33, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v219) != 1)
  {
    uint64_t v52 = (uint64_t)v14;
    uint64_t v53 = v218;
    sub_1008F42F4(v52, v218, type metadata accessor for OwnedBeaconGroup);
    uint64_t v54 = v228;
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    uint64_t v56 = sub_100010324(v55, (uint64_t)qword_10170E5C8);
    uint64_t v57 = v214;
    sub_1008F4038((uint64_t)v231, v214, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc();
      *(void *)&long long v238 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 141558275;
      *(void *)&long long v232 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2081;
      uint64_t v226 = v56;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v232 = sub_1008FA0F0(v61, v62, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0(v57, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0(v57, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v69 = sub_1004D1434();
    uint64_t v70 = v225;
    swift_retain();
    uint64_t v71 = sub_1008ECEF4(v69, v70);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v72 = &v231[v54[9]];
    uint64_t v73 = *(void *)v72;
    uint64_t v74 = *((void *)v72 + 1);
    uint64_t v75 = &v231[v54[7]];
    uint64_t v76 = *(void *)v75;
    uint64_t v77 = *((void *)v75 + 1);
    uint64_t v78 = &v231[v54[8]];
    uint64_t v79 = *(void *)v78;
    uint64_t v80 = *((void *)v78 + 1);
    long long v238 = xmmword_10136D170;
    *(void *)&long long v239 = v73;
    *((void *)&v239 + 1) = v74;
    *(void *)&long long v240 = v76;
    *((void *)&v240 + 1) = v77;
    *(void *)&long long v241 = v79;
    *((void *)&v241 + 1) = v80;
    LOBYTE(v242) = v224 & 1;
    *((void *)&v242 + 1) = v71;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 136315138;
      uint64_t v237 = v84;
      v231 = v83 + 4;
      long long v234 = v240;
      long long v235 = v241;
      long long v236 = v242;
      long long v233 = v239;
      long long v232 = v238;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v85 = String.init<A>(describing:)();
      *(void *)&long long v232 = sub_1008FA0F0(v85, v86, &v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v53 = v218;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "AirPodsLostModeContent: %s", v83, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_100DC21D4(&v238);
    if (v87)
    {
      uint64_t v90 = v87;
      uint64_t v91 = v88;
      unint64_t v92 = v89;
      sub_10076813C(v87, v88, v89);
      uint64_t v93 = (void *)sub_1008ED4AC(2);
      sub_1008EC194(v90, v91, v92, v93);
      swift_release();
      uint64_t v94 = swift_allocObject();
      unint64_t v95 = v229;
      uint64_t v96 = v230;
      *(void *)(v94 + 16) = v229;
      *(void *)(v94 + 24) = v96;
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      int64_t v97 = (void *)swift_allocObject();
      v97[2] = v225;
      v97[3] = v95;
      v97[4] = v96;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      swift_release();
      sub_1001D7860(v90, v91, v92);
      uint64_t v98 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v99 = v53;
LABEL_58:
      sub_1008F40A0(v99, v98);
      return sub_1001D7860(v90, v91, v92);
    }
    static os_log_type_t.error.getter();
    if (qword_1016372E0 == -1)
    {
LABEL_36:
      os_log(_:dso:log:_:_:)();
      sub_100484228();
      swift_allocError();
      *uint64_t v143 = 0;
      v229();
      swift_errorRelease();
      return sub_1008F40A0(v53, type metadata accessor for OwnedBeaconGroup);
    }
LABEL_65:
    swift_once();
    goto LABEL_36;
  }
  sub_10001DAB4((uint64_t)v14, &qword_10163BB20);
  swift_retain();
  sub_10000588C(&qword_101651898);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v35 = *(void *)(v238 + 16);
  uint64_t v36 = v228;
  if (v35)
  {
    uint64_t v37 = v215;
    uint64_t v38 = v238 + ((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80));
    uint64_t v39 = *(void *)(v215 + 72);
    swift_bridgeObjectRetain();
    uint64_t v40 = v217;
    while (1)
    {
      sub_1008F4038(v38, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1008F40A0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v38 += v39;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = 1;
        uint64_t v42 = v213;
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = v213;
    sub_1008F42F4((uint64_t)v10, v213, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
    uint64_t v40 = v217;
    uint64_t v42 = v213;
    uint64_t v37 = v215;
  }
LABEL_38:
  uint64_t v144 = (int *)v216;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v42, v41, 1, v216);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v37 + 48))(v42, 1, v144) == 1)
  {
    sub_10001DAB4(v42, (uint64_t *)&unk_10163B1D0);
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v145 = swift_allocObject();
    *(_OWORD *)(v145 + 16) = xmmword_101342130;
    uint64_t v146 = UUID.uuidString.getter();
    uint64_t v148 = v147;
    *(void *)(v145 + 56) = &type metadata for String;
    *(void *)(v145 + 64) = sub_10000B4CC();
    *(void *)(v145 + 32) = v146;
    *(void *)(v145 + 40) = v148;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1008EC140();
    swift_allocError();
    *uint64_t v149 = 1;
    v229();
    return swift_errorRelease();
  }
  uint64_t v150 = v212;
  sub_1008F42F4(v42, v212, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v151 = (uint64_t *)&v231[v36[9]];
  uint64_t v152 = v151[1];
  uint64_t v223 = *v151;
  uint64_t v153 = v36[8];
  uint64_t v154 = (uint64_t *)&v231[v36[7]];
  uint64_t v155 = (int *)v154[1];
  uint64_t v220 = *v154;
  uint64_t v156 = *(void *)&v231[v153 + 8];
  v221 = *(uint64_t **)&v231[v153];
  sub_10000588C(&qword_1016578C0);
  uint64_t v157 = *(void *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
  v228 = (int *)((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
  v231 = (uint8_t *)swift_allocObject();
  *((_OWORD *)v231 + 1) = xmmword_101342130;
  uint64_t v158 = (int *)sub_10000588C(&qword_1016518A8);
  uint64_t v159 = (char *)v40 + v158[12];
  uint64_t v160 = (uint64_t *)(v150 + v144[7]);
  uint64_t v161 = *v160;
  unint64_t v162 = v160[1];
  *uint64_t v40 = *v160;
  v40[1] = v162;
  (*(void (**)(char *, uint64_t, uint64_t))(v226 + 16))(v159, v150 + v144[9], v227);
  uint64_t v163 = v144[11];
  uint64_t v164 = *(void *)(v150 + v144[10]);
  uint64_t v165 = *(void *)(v150 + v163);
  uint64_t v227 = v156;
  swift_bridgeObjectRetain();
  uint64_t v226 = v152;
  swift_bridgeObjectRetain();
  v222 = v155;
  swift_bridgeObjectRetain();
  sub_1000361E0(v161, v162);
  uint64_t v166 = sub_1002AAF08(v164, v165);
  if (v167 >> 60 == 15) {
    goto LABEL_68;
  }
  uint64_t v168 = v166;
  unint64_t v169 = v167;
  uint64_t v170 = (uint64_t *)((char *)v40 + v158[16]);
  uint64_t v171 = sub_1002AA5D4(v166, v167);
  unint64_t v173 = v172;
  sub_100037A24(v168, v169);
  uint64_t v174 = Data.hexString.getter();
  uint64_t v176 = v175;
  sub_10001CFB8(v171, v173);
  *uint64_t v170 = v174;
  v170[1] = v176;
  uint64_t v177 = sub_1002AAF08(v164, v165);
  if (v178 >> 60 == 15)
  {
LABEL_69:
    __break(1u);
    JUMPOUT(0x1008EA4CCLL);
  }
  unint64_t v179 = v178;
  uint64_t v53 = (uint64_t)v231;
  uint64_t v180 = (uint64_t)v228 + (void)v231;
  uint64_t v181 = v177;
  uint64_t v182 = v217;
  switch(v178 >> 62)
  {
    case 1uLL:
      LODWORD(v188) = HIDWORD(v177) - v177;
      if (__OFSUB__(HIDWORD(v177), v177))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      uint64_t v188 = (int)v188;
LABEL_54:
      if (v188 < -1)
      {
        __break(1u);
        goto LABEL_65;
      }
LABEL_55:
      v192 = (uint64_t *)((char *)v217 + v158[20]);
      uint64_t v193 = Data.subdata(in:)();
      unint64_t v195 = v194;
      sub_100037A24(v181, v179);
      uint64_t v196 = Data.hexString.getter();
      uint64_t v198 = v197;
      sub_10001CFB8(v193, v195);
      uint64_t *v192 = v196;
      v192[1] = v198;
      swift_storeEnumTagMultiPayload();
      sub_100DC15D4(v182, v180);
      long long v238 = xmmword_10136D170;
      *(void *)&long long v239 = v223;
      *((void *)&v239 + 1) = v226;
      *(void *)&long long v240 = v220;
      *((void *)&v240 + 1) = v222;
      *(void *)&long long v241 = v221;
      *((void *)&v241 + 1) = v227;
      LOBYTE(v242) = v224 & 1;
      *((void *)&v242 + 1) = v53;
      sub_100DC21D4(&v238);
      if (v199)
      {
        uint64_t v90 = v199;
        uint64_t v91 = v200;
        unint64_t v92 = v201;
        sub_10076813C(v199, v200, v201);
        v202 = (void *)sub_1008ED4AC(3);
        sub_1008EC194(v90, v91, v92, v202);
        swift_release();
        uint64_t v203 = swift_allocObject();
        id v204 = v229;
        uint64_t v205 = v230;
        *(void *)(v203 + 16) = v229;
        *(void *)(v203 + 24) = v205;
        swift_retain();
        Future.addFailure(block:)();
        swift_release();
        swift_release();
        uint64_t v206 = (void *)swift_allocObject();
        v206[2] = v225;
        v206[3] = v204;
        v206[4] = v205;
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)();
        swift_release();
        swift_release();
        swift_release();
        sub_1001D7860(v90, v91, v92);
        uint64_t v98 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
        uint64_t v141 = &v238;
LABEL_57:
        uint64_t v99 = *((void *)v141 - 32);
        goto LABEL_58;
      }
      static os_log_type_t.error.getter();
      if (qword_1016372E0 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      sub_100484228();
      swift_allocError();
      *uint64_t v207 = 0;
      v229();
      swift_errorRelease();
      v184 = type metadata accessor for LocalFindableAccessoryRecord;
      uint64_t v185 = &v238;
      return sub_1008F40A0(*((void *)v185 - 32), (uint64_t (*)(void))v184);
    case 2uLL:
      uint64_t v190 = *(void *)(v177 + 16);
      uint64_t v189 = *(void *)(v177 + 24);
      BOOL v191 = __OFSUB__(v189, v190);
      uint64_t v188 = v189 - v190;
      if (!v191) {
        goto LABEL_54;
      }
      goto LABEL_67;
    default:
      goto LABEL_55;
  }
}

void sub_1008EA4F0(char a1, NSObject *a2)
{
  if ((a1 & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:
  os_log(_:dso:log:_:_:)();

  dispatch_group_leave(a2);
}

uint64_t sub_1008EA5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v15 = (void *)(a1 + v14[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v16 = (void *)(a1 + v14[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v16 = a4;
  v16[1] = a5;
  uint64_t v17 = (void *)(a1 + v14[7]);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v17 = a6;
  v17[1] = a7;
  return result;
}

void sub_1008EA6B8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  sub_1008F4734(a1, v5);
  dispatch_group_leave(a3);
}

uint64_t sub_1008EA71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v5 = v4[8];
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t v6 = *(void *)(a2 + v5 + 8);
  uint64_t v8 = (void *)(a1 + v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v8 = v7;
  v8[1] = v6;
  uint64_t v9 = v4[9];
  uint64_t v11 = *(void *)(a2 + v9);
  uint64_t v10 = *(void *)(a2 + v9 + 8);
  uint64_t v12 = (void *)(a1 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v12 = v11;
  v12[1] = v10;
  uint64_t v13 = v4[7];
  uint64_t v15 = *(void *)(a2 + v13);
  uint64_t v14 = *(void *)(a2 + v13 + 8);
  uint64_t v16 = (void *)(a1 + v13);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v16 = v15;
  v16[1] = v14;
  return result;
}

void sub_1008EA7DC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1008F43D4(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = *v6;
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    v12[1] = v7;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10001DAB4((uint64_t)v6, &qword_101651918);
    static os_log_type_t.default.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1008EA9FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v125 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v125);
  uint64_t v126 = (uint64_t *)((char *)&v116 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v128 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v128 - 8);
  uint64_t v4 = __chkstk_darwin(v128);
  uint64_t v131 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v127 = (char *)&v116 - v6;
  uint64_t v130 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v130);
  uint64_t v8 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v13 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100ACD178((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_10163B9F0);
    uint64_t v16 = type metadata accessor for AirPodsLostModeContent.Device(0);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v18 = a1;
    return v17(v18, 1, 1, v16);
  }
  uint64_t v122 = v3;
  uint64_t v124 = a1;
  sub_1008F42F4((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = v15;
  uint64_t v21 = sub_1002AAF08(*(void *)&v15[v12[16]], *(void *)&v15[v12[17]]);
  unint64_t v23 = v22;
  uint64_t v129 = v21;
  if (v22 >> 60 == 15)
  {
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v123 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = (uint64_t)v20;
    uint64_t v26 = v131;
  }
  else
  {
    uint64_t v27 = v21;
    sub_1000361E0(v21, v22);
    uint64_t v28 = sub_1002AA5D4(v27, v23);
    unint64_t v30 = v29;
    sub_100037A24(v27, v23);
    uint64_t v121 = Data.hexString.getter();
    uint64_t v32 = v31;
    sub_10001CFB8(v28, v30);
    uint64_t v25 = (uint64_t)v20;
    uint64_t v33 = v131;
    switch(v23 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v129), v129)) {
          goto LABEL_33;
        }
        uint64_t v34 = HIDWORD(v129) - (int)v129;
LABEL_10:
        sub_1000361E0(v129, v23);
        if (v34 < -1)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          JUMPOUT(0x1008EB568);
        }
LABEL_11:
        uint64_t v119 = v8;
        uint64_t v37 = v32;
        uint64_t v38 = v33;
        uint64_t v39 = v129;
        uint64_t v40 = Data.subdata(in:)();
        unint64_t v42 = v41;
        uint64_t v43 = v39;
        uint64_t v26 = v38;
        uint64_t v24 = v37;
        uint64_t v8 = v119;
        sub_100037A24(v43, v23);
        uint64_t v120 = Data.hexString.getter();
        uint64_t v123 = v44;
        sub_10001CFB8(v40, v42);
        break;
      case 2uLL:
        uint64_t v36 = *(void *)(v129 + 16);
        uint64_t v35 = *(void *)(v129 + 24);
        uint64_t v34 = v35 - v36;
        if (!__OFSUB__(v35, v36)) {
          goto LABEL_10;
        }
        goto LABEL_34;
      default:
        goto LABEL_11;
    }
  }
  sub_1008F4038(v25 + v12[6], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v130 = v24;
    uint64_t v131 = v25;
    uint64_t v61 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    unint64_t v62 = &v8[v61[12]];
    unint64_t v63 = *((void *)v62 + 1);
    uint64_t v127 = *(char **)v62;
    id v64 = (unint64_t *)&v8[v61[16]];
    unint64_t v65 = *v64;
    unint64_t v66 = v64[1];
    uint64_t v67 = &v8[v61[20]];
    uint64_t v68 = *(char **)v67;
    unint64_t v69 = *((void *)v67 + 1);
    uint64_t v70 = v122;
    uint64_t v71 = v8;
    uint64_t v72 = v128;
    unint64_t v118 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 32);
    uint64_t v119 = v68;
    v118(v26, v71, v128);
    unint64_t v132 = v65;
    unint64_t v133 = v66;
    sub_1000336D4();
    uint64_t v73 = Data.init<A>(hexString:)();
    if (v74 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100037A24(v129, v23);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v26, v72);
      sub_1008F40A0(v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      uint64_t v116 = v73;
      unint64_t v117 = v74;
      uint64_t v79 = v72;
      unint64_t v132 = (unint64_t)v127;
      unint64_t v133 = v63;
      uint64_t v80 = Data.init<A>(hexString:)();
      if (v81 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100037A24(v116, v117);
        sub_100037A24(v129, v23);
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v26, v72);
        sub_1008F40A0(v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        uint64_t v82 = v80;
        unint64_t v83 = v81;
        unint64_t v132 = (unint64_t)v119;
        unint64_t v133 = v69;
        uint64_t v84 = Data.init<A>(hexString:)();
        unint64_t v86 = v85;
        sub_100037A24(v129, v23);
        sub_1008F40A0(v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (v86 >> 60 != 15)
        {
          uint64_t v104 = (int *)sub_10000588C(&qword_1016518D0);
          uint64_t v105 = v26;
          uint64_t v106 = v126;
          uint64_t v107 = (char *)v126 + v104[20];
          uint64_t v108 = v79;
          uint64_t v109 = (uint64_t *)((char *)v126 + v104[24]);
          uint64_t v110 = (uint64_t *)((char *)v126 + v104[28]);
          unint64_t v111 = v117;
          uint64_t *v126 = v116;
          v106[1] = v111;
          v106[2] = v82;
          v106[3] = v83;
          v106[4] = v84;
          v106[5] = v86;
          v118((uint64_t)v107, (char *)v105, v108);
          uint64_t v112 = v130;
          *uint64_t v109 = v121;
          v109[1] = v112;
          uint64_t v113 = v123;
          uint64_t *v110 = v120;
          v110[1] = v113;
          swift_storeEnumTagMultiPayload();
          uint64_t v114 = v124;
          sub_100DC15D4(v106, v124);
          uint64_t v115 = type metadata accessor for AirPodsLostModeContent.Device(0);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v114, 0, 1, v115);
        }
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v26, v79);
        sub_100037A24(v116, v117);
        sub_100037A24(v82, v83);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v87 = v124;
    uint64_t v88 = type metadata accessor for AirPodsLostModeContent.Device(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
  }
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v130 = v24;
    uint64_t v131 = v25;
    os_log_type_t v46 = (int *)sub_10000588C(&qword_1016555E0);
    BOOL v47 = &v8[v46[12]];
    uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))v47;
    unint64_t v49 = *((void *)v47 + 1);
    uint64_t v50 = (unint64_t *)&v8[v46[16]];
    unint64_t v51 = v50[1];
    unint64_t v117 = *v50;
    unint64_t v118 = v48;
    uint64_t v52 = (unint64_t *)&v8[v46[20]];
    unint64_t v54 = *v52;
    unint64_t v53 = v52[1];
    swift_bridgeObjectRelease();
    uint64_t v55 = v122;
    uint64_t v56 = v127;
    uint64_t v57 = v8;
    uint64_t v58 = v128;
    uint64_t v119 = *(char **)(v122 + 32);
    ((void (*)(char *, char *, uint64_t))v119)(v127, v57, v128);
    unint64_t v132 = v54;
    unint64_t v133 = v53;
    sub_1000336D4();
    uint64_t v59 = Data.init<A>(hexString:)();
    if (v60 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100037A24(v129, v23);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v58);
      sub_1008F40A0(v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v16 = type metadata accessor for AirPodsLostModeContent.Device(0);
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
      uint64_t v18 = v124;
      return v17(v18, 1, 1, v16);
    }
    uint64_t v76 = v60;
    uint64_t v77 = v59;
    if (v51)
    {
      unint64_t v132 = v117;
      unint64_t v133 = v51;
      uint64_t v122 = Data.init<A>(hexString:)();
      unint64_t v117 = v78;
    }
    else
    {
      uint64_t v122 = 0;
      unint64_t v117 = 0xF000000000000000;
    }
    unint64_t v89 = v127;
    uint64_t v90 = v131;
    if (v49)
    {
      unint64_t v132 = (unint64_t)v118;
      unint64_t v133 = v49;
      swift_bridgeObjectRetain();
      uint64_t v91 = Data.init<A>(hexString:)();
      unint64_t v93 = v92;
      sub_100037A24(v129, v23);
    }
    else
    {
      sub_100037A24(v129, v23);
      uint64_t v91 = 0;
      unint64_t v93 = 0xF000000000000000;
    }
    sub_1008F40A0(v90, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRelease();
    uint64_t v94 = (int *)sub_10000588C(&qword_1016518D0);
    unint64_t v95 = v126;
    uint64_t v96 = (char *)v126 + v94[20];
    int64_t v97 = (uint64_t *)((char *)v126 + v94[24]);
    uint64_t v98 = (uint64_t *)((char *)v126 + v94[28]);
    unint64_t v99 = v117;
    uint64_t *v126 = v122;
    v95[1] = v99;
    v95[2] = v91;
    v95[3] = v93;
    v95[4] = v77;
    v95[5] = v76;
    ((void (*)(char *, char *, uint64_t))v119)(v96, v89, v128);
    uint64_t v100 = v130;
    *int64_t v97 = v121;
    v97[1] = v100;
    uint64_t v101 = v123;
    *uint64_t v98 = v120;
    v98[1] = v101;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v124;
    sub_100DC15D4(v95, v124);
    uint64_t v103 = type metadata accessor for AirPodsLostModeContent.Device(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v102, 0, 1, v103);
  }
  else
  {
    sub_1008F40A0(v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100037A24(v129, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = type metadata accessor for AirPodsLostModeContent.Device(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v124, 1, 1, v75);
    return sub_1008F40A0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  }
}

uint64_t sub_1008EB578(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1008EB6A8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  unint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v4 = sub_10000588C(&qword_101646108);
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for ServerStatusCode();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  v25[3] = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LostModeResponse();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v32 = (uint64_t)v25 - v10;
  static os_log_type_t.debug.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  long long v26 = xmmword_101342130;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  v25[1] = sub_1008F4174((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
  v25[2] = v12;
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v19 = v18;
  sub_1008F4174(&qword_1016518D8, (void (*)(uint64_t))type metadata accessor for LostModeResponse);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10001CFB8(v17, v19);
  static os_log_type_t.default.getter();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v26;
  uint64_t v21 = v32;
  sub_1008F4038(v32, v27, (uint64_t (*)(void))type metadata accessor for LostModeResponse);
  uint64_t v22 = String.init<A>(describing:)();
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = v16;
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008F39B8(v21, v30);
  swift_release();
  return sub_1008F40A0(v21, (uint64_t (*)(void))type metadata accessor for LostModeResponse);
}

uint64_t sub_1008EBC38(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = a4;
    void v11[3] = a2;
    v11[4] = a3;
    swift_retain();
    swift_retain();
    sub_1008EBE10(a5, (uint64_t)sub_1008F41D4, (uint64_t)v11);
    return swift_release();
  }
}

uint64_t sub_1008EBD88(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    a3(a1);
    return swift_errorRelease();
  }
  else
  {
    sub_100A9E7EC(14);
    return ((uint64_t (*)(void))a3)(0);
  }
}

uint64_t sub_1008EBE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (objc_class *)swift_allocObject();
  *((void *)v10 + 2) = a2;
  *((void *)v10 + 3) = a3;
  swift_retain();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  sub_1008F4038(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100B3EBC8(a1, v3, (void (*)(uint64_t))sub_1008F41E0, v10);
  return swift_release_n();
}

uint64_t sub_1008EBFE0(char a1, void (*a2)(void))
{
  if (a1)
  {
    static os_log_type_t.default.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return ((uint64_t (*)(void))a2)(0);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *uint64_t v4 = 6;
    a2();
    return swift_errorRelease();
  }
}

unint64_t sub_1008EC140()
{
  unint64_t result = qword_1016518A0;
  if (!qword_1016518A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016518A0);
  }
  return result;
}

uint64_t sub_1008EC194(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v27[3] = &type metadata for AirPodsLostModeRequest;
  unint64_t v12 = sub_1008F4100();
  v27[0] = a1;
  v27[1] = a2;
  v27[4] = v12;
  v27[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v13 lock];
  *((unsigned char *)a4 + qword_101645A50) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_1008F5E44((uint64_t)v11, (uint64_t)&unk_1016518E8, (uint64_t)v16);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v17 = Future.init()();
  uint64_t v18 = (uint64_t)a4 + qword_101645A38;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v18, (uint64_t)v26);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  sub_10001CEB0(v26, v20 + 24);
  *(void *)(v20 + 64) = v19;
  swift_retain();
  swift_retain();
  sub_10048C190((uint64_t)v27, (uint64_t)v25);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1008F4C84;
  *(void *)(v22 + 24) = v20;
  *(unsigned char *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = v21;
  *(void *)(v22 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  return v17;
}

uint64_t sub_1008EC4EC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v27[3] = &type metadata for AccessoryLostModeRequest;
  unint64_t v12 = sub_1008EDD30();
  v27[0] = a1;
  v27[1] = a2;
  v27[4] = v12;
  v27[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v13 lock];
  *((unsigned char *)a4 + qword_101645A50) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_1008F5E44((uint64_t)v11, (uint64_t)&unk_1016518C0, (uint64_t)v16);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v17 = Future.init()();
  uint64_t v18 = (uint64_t)a4 + qword_101645A38;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v18, (uint64_t)v26);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  sub_10001CEB0(v26, v20 + 24);
  *(void *)(v20 + 64) = v19;
  swift_retain();
  swift_retain();
  sub_10048C190((uint64_t)v27, (uint64_t)v25);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1008F4C84;
  *(void *)(v22 + 24) = v20;
  *(unsigned char *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = v21;
  *(void *)(v22 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  return v17;
}

uint64_t sub_1008EC844(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v27[3] = &type metadata for LostModeRequest;
  unint64_t v12 = sub_1008EDC70();
  v27[0] = a1;
  v27[1] = a2;
  v27[4] = v12;
  v27[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v13 lock];
  *((unsigned char *)a4 + qword_101645A50) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_1008F5E44((uint64_t)v11, (uint64_t)&unk_101645BB0, (uint64_t)v16);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v17 = Future.init()();
  uint64_t v18 = (uint64_t)a4 + qword_101645A38;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v18, (uint64_t)v26);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  sub_10001CEB0(v26, v20 + 24);
  *(void *)(v20 + 64) = v19;
  swift_retain();
  swift_retain();
  sub_10048C190((uint64_t)v27, (uint64_t)v25);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1008EDD18;
  *(void *)(v22 + 24) = v20;
  *(unsigned char *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = v21;
  *(void *)(v22 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  return v17;
}

uint64_t sub_1008ECB9C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v27[3] = &type metadata for ConfigurationRequest;
  unint64_t v12 = sub_1008F41E8();
  v27[0] = a1;
  v27[1] = a2;
  v27[4] = v12;
  v27[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v13 lock];
  *((unsigned char *)a4 + qword_101645A50) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_1008F5E44((uint64_t)v11, (uint64_t)&unk_101651910, (uint64_t)v16);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v17 = Future.init()();
  uint64_t v18 = (uint64_t)a4 + qword_101645A38;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v18, (uint64_t)v26);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  sub_10001CEB0(v26, v20 + 24);
  *(void *)(v20 + 64) = v19;
  swift_retain();
  swift_retain();
  sub_10048C190((uint64_t)v27, (uint64_t)v25);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1008F4C84;
  *(void *)(v22 + 24) = v20;
  *(unsigned char *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = v21;
  *(void *)(v22 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  return v17;
}

void *sub_1008ECEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v4 = sub_10000588C(&qword_1016518C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for AirPodsLostModeContent.Device(0);
  uint64_t v40 = *(void *)(v45 - 8);
  uint64_t v7 = __chkstk_darwin(v45);
  uint64_t v39 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v35 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  os_log_type_t v46 = (void (**)(char *, uint64_t))(v11 + 8);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v51 = a1;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v22 = 0;
  unint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v22 >= v43) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v42 + 8 * v22);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v24, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
    {
      swift_release();
      return v41;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_1008EA9FC((uint64_t)v6);
    if (v2)
    {
      (*v46)(v13, v10);
      uint64_t v34 = v41;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    (*v46)(v13, v10);
    if ((*v44)(v6, 1, v45) == 1)
    {
      unint64_t result = (void *)sub_10001DAB4((uint64_t)v6, &qword_1016518C8);
    }
    else
    {
      uint64_t v37 = type metadata accessor for AirPodsLostModeContent.Device;
      sub_1008F42F4((uint64_t)v6, v38, type metadata accessor for AirPodsLostModeContent.Device);
      sub_1008F42F4(v38, v39, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = (void *)sub_100A70B80(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v29 = v41[2];
      unint64_t v28 = v41[3];
      unint64_t v30 = (uint64_t (*)(uint64_t))(v29 + 1);
      if (v29 >= v28 >> 1)
      {
        unint64_t v36 = v41[2];
        uint64_t v37 = (uint64_t (*)(uint64_t))(v29 + 1);
        uint64_t v33 = (void *)sub_100A70B80(v28 > 1, v29 + 1, 1, (unint64_t)v41);
        unint64_t v29 = v36;
        unint64_t v30 = v37;
        unint64_t v41 = v33;
      }
      uint64_t v31 = v40;
      uint64_t v32 = v41;
      v41[2] = v30;
      unint64_t result = (void *)sub_1008F42F4(v39, (uint64_t)v32+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v29, type metadata accessor for AirPodsLostModeContent.Device);
    }
  }
  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v43) {
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v43) {
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v43) {
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v22 + 4;
  if (v22 + 4 >= v43)
  {
LABEL_34:
    uint64_t v34 = v41;
    (*v50)(v16, 1, 1, v10);
LABEL_35:
    swift_release();
    return v34;
  }
  unint64_t v26 = *(void *)(v42 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v22 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v43) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v42 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1008ED4AC(char a1)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  uint64_t v40 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v39 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 1:
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v19 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
      uint64_t v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      uint64_t v47 = type metadata accessor for AccessoryLostModeEndPoint();
      uint64_t v48 = sub_1008F4174(&qword_1016518F8, (void (*)(uint64_t))type metadata accessor for AccessoryLostModeEndPoint);
      unint64_t v20 = sub_10001D958(v46);
      (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v20, enum case for FMNAccountType.accessory(_:), v4);
      break;
    case 2:
    case 3:
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v11 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
      uint64_t v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      uint64_t v13 = type metadata accessor for AirPodsLostModeEndPoint();
      uint64_t v47 = v13;
      uint64_t v48 = sub_1008F4174(&qword_1016518F0, (void (*)(uint64_t))type metadata accessor for AirPodsLostModeEndPoint);
      uint64_t v14 = sub_10001D958(v46);
      uint64_t v15 = (unsigned int *)&enum case for FMNAccountType.w2Accessory(_:);
      goto LABEL_4;
    default:
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v16 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
      uint64_t v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      uint64_t v13 = type metadata accessor for LostModeEndPoint();
      uint64_t v47 = v13;
      uint64_t v48 = sub_1008F4174(&qword_101651900, (void (*)(uint64_t))type metadata accessor for LostModeEndPoint);
      uint64_t v14 = sub_10001D958(v46);
      uint64_t v15 = (unsigned int *)&enum case for FMNAccountType.searchParty(_:);
LABEL_4:
      uint64_t v17 = *v15;
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
      v18(v7, v17, v4);
      type metadata accessor for AccountURLComponents();
      swift_allocObject();
      *uint64_t v14 = (uint64_t)sub_1010E7A64((uint64_t)v7);
      v18((char *)v14 + *(int *)(v13 + 20), v17, v4);
      break;
  }
  if (qword_101636DD8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170E5C8);
  sub_10001D010((uint64_t)v46, (uint64_t)v43);
  int64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v38[1] = v25;
    *(_DWORD *)uint64_t v24 = 141558275;
    uint64_t v41 = 1752392040;
    uint64_t v42 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2081;
    v38[0] = v24 + 14;
    sub_10001CD44(v43, v44);
    uint64_t v26 = v12;
    int64_t v27 = v39;
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
    sub_1008F4174(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v30 = v29;
    uint64_t v31 = v27;
    uint64_t v12 = v26;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v2);
    uint64_t v41 = sub_1008FA0F0(v28, v30, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Lost Mode endpoint: %{private,mask.hash}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  }

  uint64_t v32 = type metadata accessor for ServerInteractionController(0);
  sub_10001D010((uint64_t)v46, (uint64_t)v43);
  uint64_t v33 = v44;
  uint64_t v34 = v45;
  uint64_t v35 = sub_1000BD078((uint64_t)v43, v44);
  swift_retain();
  uint64_t v36 = sub_10048E388(v35, v12, v32, v33, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
  return v36;
}

uint64_t sub_1008EDBC4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008EDBFC(uint64_t a1)
{
  return sub_1008EB578(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1008EDC04()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008EDC1C(uint64_t a1)
{
  return sub_1008EB6A8(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1008EDC28()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008EDC40()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008EDC58()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

unint64_t sub_1008EDC70()
{
  unint64_t result = qword_1016518B0;
  if (!qword_1016518B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016518B0);
  }
  return result;
}

uint64_t sub_1008EDCC4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008EDCFC()
{
  return sub_1008F489C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1008EDD18(uint64_t a1)
{
  return sub_100489D2C(a1, *(void *)(v1 + 16), v1 + 24, *(void *)(v1 + 64));
}

unint64_t sub_1008EDD30()
{
  unint64_t result = qword_1016518B8;
  if (!qword_1016518B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016518B8);
  }
  return result;
}

uint64_t sub_1008EDD84()
{
  return sub_1008F489C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1008EDDA4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v238 = a2;
  v247 = (uint8_t *)a1;
  uint64_t v223 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v223);
  uint64_t v230 = (uint64_t *)((char *)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v226 = (uint64_t)&v222 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v228 = *(void *)(v229 - 8);
  uint64_t v11 = __chkstk_darwin(v229);
  uint64_t v13 = (char *)&v222 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v225 = (uint64_t)&v222 - v14;
  uint64_t v244 = type metadata accessor for UUID();
  uint64_t v239 = *(void *)(v244 - 8);
  uint64_t v15 = __chkstk_darwin(v244);
  uint64_t v240 = (uint64_t)&v222 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int v224 = (char *)&v222 - v17;
  uint64_t v235 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v235);
  long long v236 = (uint64_t *)((char *)&v222 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v222 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v232 = *(void *)(v233 - 8);
  __chkstk_darwin(v233);
  uint64_t v231 = (uint64_t)&v222 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for LostModeRecord();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v227 = (uint64_t)&v222 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v234 = (uint64_t)&v222 - v26;
  uint64_t v27 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v27 - 8);
  unint64_t v29 = (char *)&v222 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v31 = *((void *)v30 - 1);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v222 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a4;
  *(void *)(v34 + 24) = a5;
  uint64_t v246 = v34;
  uint64_t v241 = a3;
  v245 = (int *)v23;
  uint64_t v35 = (uint64_t)&v247[*(int *)(v23 + 24)];
  uint64_t v242 = a4;
  swift_retain();
  v243 = a5;
  sub_100ACD178((uint64_t)v29);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v31 + 48);
  uint64_t v237 = v30;
  if (v36(v29, 1, v30) != 1)
  {
    sub_1008F42F4((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100010324(v45, (uint64_t)qword_10170E5C8);
    uint64_t v46 = v234;
    sub_1008F4038((uint64_t)v247, v234, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = v244;
    if (v49)
    {
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long v254 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 141558275;
      *(void *)&long long v248 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 12) = 2081;
      uint64_t v233 = v51 + 14;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v248 = sub_1008FA0F0(v52, v53, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0(v46, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0(v46, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v64 = v240;
    unint64_t v65 = v236;
    sub_1008F4038((uint64_t)&v33[v237[6]], (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v235 = (uint64_t)v33;
        uint64_t v240 = *v65;
        uint64_t v102 = v65[2];
        uint64_t v237 = (int *)v65[1];
        uint64_t v103 = v65[3];
        uint64_t v104 = v65[4];
        long long v236 = (uint64_t *)v65[5];
        uint64_t v105 = (uint64_t)v224;
        (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v224, v35, v50);
        uint64_t v106 = (uint64_t *)&v247[v245[9]];
        uint64_t v108 = *v106;
        uint64_t v107 = v106[1];
        uint64_t v109 = (uint64_t *)&v247[v245[7]];
        uint64_t v110 = *v109;
        uint64_t v111 = v109[1];
        uint64_t v112 = (uint64_t *)&v247[v245[8]];
        uint64_t v113 = *v112;
        uint64_t v114 = v112[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F33D54(v105, v102, v103, v240, (uint64_t)v237, v104, (uint64_t)v236, 0x646F4D2074736F4CLL, 0xE900000000000065, v108, v107, v110, v111, v113, v114, v238 & 1);
        if (v115)
        {
          uint64_t v93 = v115;
          uint64_t v94 = v116;
          unint64_t v95 = v117;
          swift_bridgeObjectRetain();
          sub_1000361E0(v94, v95);
          unint64_t v118 = (void *)sub_1008ED4AC(0);
          sub_1008EC844(v93, v94, v95, v118);
          swift_release();
          uint64_t v119 = swift_allocObject();
          uint64_t v120 = v246;
          *(void *)(v119 + 16) = sub_1006CCE84;
          *(void *)(v119 + 24) = v120;
          swift_retain();
          Future.addFailure(block:)();
          swift_release();
          swift_release();
          uint64_t v121 = (void *)swift_allocObject();
          v121[2] = v241;
          v121[3] = sub_1006CCE84;
          v121[4] = v120;
          swift_retain();
          swift_retain();
          Future.addSuccess(block:)();
          swift_release();
          swift_release();
          swift_release();
          sub_1001D7860(v93, v94, v95);
          uint64_t v100 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
          uint64_t v122 = (char *)&v257 + 8;
          goto LABEL_57;
        }
        static os_log_type_t.error.getter();
        uint64_t v192 = v235;
        if (qword_1016372E0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        sub_100484228();
        uint64_t v193 = swift_allocError();
        *unint64_t v194 = 0;
        uint64_t v195 = v242;
        swift_beginAccess();
        *(void *)(v195 + 16) = v193;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        unint64_t v69 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v70 = v192;
        goto LABEL_62;
      case 2u:
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v123 = v239;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v239 + 32))(v64, v65, v50);
        uint64_t v124 = (uint64_t)v224;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v224, v64, v50);
        uint64_t v125 = (uint64_t *)&v247[v245[9]];
        uint64_t v126 = *v125;
        uint64_t v127 = v125[1];
        uint64_t v128 = (uint64_t *)&v247[v245[7]];
        uint64_t v129 = *v128;
        uint64_t v130 = v128[1];
        uint64_t v131 = (uint64_t *)&v247[v245[8]];
        uint64_t v133 = *v131;
        uint64_t v132 = v131[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F42A30(v124, 0x646F4D2074736F4CLL, 0xE900000000000065, v126, v127, v129, v130, v133, v132, v238 & 1);
        if (v134)
        {
          uint64_t v93 = v134;
          uint64_t v94 = v135;
          unint64_t v95 = v136;
          BOOL v137 = sub_100DF1520(*(void *)&v33[v237[16]], *(void *)&v33[v237[17]]);
          swift_bridgeObjectRetain();
          sub_1000361E0(v94, v95);
          if (v137) {
            char v138 = 2;
          }
          else {
            char v138 = 1;
          }
          uint64_t v139 = (void *)sub_1008ED4AC(v138);
          sub_1008EC4EC(v93, v94, v95, v139);
          swift_release();
          uint64_t v140 = swift_allocObject();
          uint64_t v141 = v246;
          *(void *)(v140 + 16) = sub_1006CCE84;
          *(void *)(v140 + 24) = v141;
          swift_retain();
          Future.addFailure(block:)();
          swift_release();
          swift_release();
          uint64_t v142 = (void *)swift_allocObject();
          v142[2] = v241;
          v142[3] = sub_1006CCE84;
          v142[4] = v141;
          swift_retain();
          swift_retain();
          Future.addSuccess(block:)();
          swift_release();
          swift_release();
          swift_release();
          sub_1001D7860(v93, v94, v95);
          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v240, v244);
          uint64_t v100 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
          uint64_t v101 = (uint64_t)v33;
          goto LABEL_58;
        }
        uint64_t v196 = v244;
        static os_log_type_t.error.getter();
        if (qword_1016372E0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        sub_100484228();
        uint64_t v197 = swift_allocError();
        *uint64_t v198 = 0;
        uint64_t v199 = v242;
        swift_beginAccess();
        *(void *)(v199 + 16) = v197;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v240, v196);
LABEL_19:
        unint64_t v69 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v70 = (uint64_t)v33;
        break;
      case 3u:
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1008EC140();
        uint64_t v143 = swift_allocError();
        *uint64_t v144 = 7;
        uint64_t v145 = v242;
        swift_beginAccess();
        *(void *)(v145 + 16) = v143;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        sub_1008F40A0((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t *, uint64_t))(v239 + 8))(v65, v50);
        return swift_release();
      default:
        swift_bridgeObjectRelease();
        sub_1008EC140();
        uint64_t v66 = swift_allocError();
        *uint64_t v67 = 7;
        uint64_t v68 = v242;
        swift_beginAccess();
        *(void *)(v68 + 16) = v66;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        goto LABEL_19;
    }
    goto LABEL_62;
  }
  sub_10001DAB4((uint64_t)v29, &qword_10163B9F0);
  sub_100AE75E0(v35, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v21, 1, v233) != 1)
  {
    uint64_t v54 = v231;
    sub_1008F42F4((uint64_t)v21, v231, type metadata accessor for OwnedBeaconGroup);
    uint64_t v55 = v245;
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    uint64_t v57 = sub_100010324(v56, (uint64_t)qword_10170E5C8);
    uint64_t v58 = v227;
    sub_1008F4038((uint64_t)v247, v227, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      *(void *)&long long v254 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 141558275;
      *(void *)&long long v248 = 1752392040;
      uint64_t v240 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2081;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v248 = sub_1008FA0F0(v62, v63, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0(v58, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0(v58, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v71 = sub_1004D1434();
    uint64_t v72 = v241;
    swift_retain();
    uint64_t v73 = sub_1008ECEF4(v71, v72);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v74 = &v247[v55[9]];
    uint64_t v75 = *(void *)v74;
    uint64_t v76 = *((void *)v74 + 1);
    uint64_t v77 = &v247[v55[7]];
    uint64_t v78 = *(void *)v77;
    uint64_t v79 = *((void *)v77 + 1);
    uint64_t v80 = &v247[v55[8]];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    long long v254 = xmmword_10136D170;
    *(void *)&long long v255 = v75;
    *((void *)&v255 + 1) = v76;
    *(void *)&long long v256 = v78;
    *((void *)&v256 + 1) = v79;
    *(void *)&long long v257 = v81;
    *((void *)&v257 + 1) = v82;
    LOBYTE(v258) = v238 & 1;
    *((void *)&v258 + 1) = v73;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      unint64_t v85 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)unint64_t v85 = 136315138;
      uint64_t v253 = v86;
      v247 = v85 + 4;
      long long v250 = v256;
      long long v251 = v257;
      long long v252 = v258;
      long long v249 = v255;
      long long v248 = v254;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v87 = String.init<A>(describing:)();
      *(void *)&long long v248 = sub_1008FA0F0(v87, v88, &v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v54 = v231;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "AirPodsLostModeContent: %s", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_100DC21D4(&v254);
    unint64_t v92 = v243;
    if (v89)
    {
      uint64_t v93 = v89;
      uint64_t v94 = v90;
      unint64_t v95 = v91;
      swift_bridgeObjectRetain();
      sub_1000361E0(v94, v95);
      uint64_t v96 = (void *)sub_1008ED4AC(2);
      sub_1008EC194(v93, v94, v95, v96);
      swift_release();
      uint64_t v97 = swift_allocObject();
      uint64_t v98 = v246;
      *(void *)(v97 + 16) = sub_1006CCE84;
      *(void *)(v97 + 24) = v98;
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      unint64_t v99 = (void *)swift_allocObject();
      v99[2] = v241;
      v99[3] = sub_1006CCE84;
      v99[4] = v98;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      swift_release();
      sub_1001D7860(v93, v94, v95);
      uint64_t v100 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v101 = v54;
LABEL_58:
      sub_1008F40A0(v101, v100);
      sub_1001D7860(v93, v94, v95);
      return swift_release();
    }
    static os_log_type_t.error.getter();
    if (qword_1016372E0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_65;
  }
  sub_10001DAB4((uint64_t)v21, &qword_10163BB20);
  swift_retain();
  sub_10000588C(&qword_101651898);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v37 = *(void *)(v254 + 16);
  uint64_t v38 = v245;
  if (v37)
  {
    uint64_t v39 = v228;
    uint64_t v40 = v254 + ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80));
    uint64_t v41 = *(void *)(v228 + 72);
    swift_bridgeObjectRetain();
    uint64_t v42 = v239;
    while (1)
    {
      sub_1008F4038(v40, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1008F40A0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v40 += v41;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = 1;
        uint64_t v44 = v226;
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = v226;
    sub_1008F42F4((uint64_t)v13, v226, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = 1;
    uint64_t v42 = v239;
    uint64_t v44 = v226;
    uint64_t v39 = v228;
  }
LABEL_38:
  uint64_t v149 = (int *)v229;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v44, v43, 1, v229);
  swift_bridgeObjectRelease();
  int v150 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48))(v44, 1, v149);
  uint64_t v151 = v230;
  if (v150 != 1)
  {
    uint64_t v160 = v225;
    sub_1008F42F4(v44, v225, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v161 = (uint64_t *)&v247[v38[9]];
    uint64_t v162 = v161[1];
    uint64_t v240 = *v161;
    uint64_t v163 = v38[8];
    uint64_t v164 = (uint64_t *)&v247[v38[7]];
    unint64_t v92 = v164[1];
    uint64_t v235 = *v164;
    uint64_t v165 = *(void *)&v247[v163 + 8];
    long long v236 = *(uint64_t **)&v247[v163];
    sub_10000588C(&qword_1016578C0);
    uint64_t v166 = *(void *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
    v245 = (int *)((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
    v247 = (uint8_t *)swift_allocObject();
    *((_OWORD *)v247 + 1) = xmmword_101342130;
    unint64_t v167 = (int *)sub_10000588C(&qword_1016518A8);
    uint64_t v168 = (char *)v151 + v167[12];
    unint64_t v169 = (uint64_t *)(v160 + v149[7]);
    uint64_t v170 = *v169;
    unint64_t v171 = v169[1];
    *uint64_t v151 = *v169;
    v151[1] = v171;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v168, v160 + v149[9], v244);
    uint64_t v172 = v149[11];
    uint64_t v173 = *(void *)(v160 + v149[10]);
    uint64_t v174 = *(void *)(v160 + v172);
    uint64_t v239 = v165;
    swift_bridgeObjectRetain();
    uint64_t v244 = v162;
    swift_bridgeObjectRetain();
    uint64_t v237 = (int *)v92;
    swift_bridgeObjectRetain();
    sub_1000361E0(v170, v171);
    uint64_t v175 = sub_1002AAF08(v173, v174);
    if (v176 >> 60 != 15)
    {
      uint64_t v177 = v175;
      unint64_t v178 = v176;
      unint64_t v179 = (uint64_t *)((char *)v151 + v167[16]);
      uint64_t v54 = sub_1002AA5D4(v175, v176);
      unint64_t v181 = v180;
      sub_100037A24(v177, v178);
      uint64_t v182 = Data.hexString.getter();
      uint64_t v184 = v183;
      sub_10001CFB8(v54, v181);
      uint64_t *v179 = v182;
      v179[1] = v184;
      uint64_t v185 = sub_1002AAF08(v173, v174);
      if (v186 >> 60 == 15)
      {
LABEL_69:

        swift_release();
        __break(1u);
        JUMPOUT(0x1008EFF3CLL);
      }
      unint64_t v187 = v186;
      uint64_t v188 = (uint64_t)v247;
      uint64_t v189 = (uint64_t)v245 + (void)v247;
      uint64_t v190 = v185;
      BOOL v191 = v230;
      switch(v186 >> 62)
      {
        case 1uLL:
          LODWORD(v200) = HIDWORD(v185) - v185;
          if (!__OFSUB__(HIDWORD(v185), v185))
          {
            uint64_t v200 = (int)v200;
LABEL_54:
            if (v200 >= -1)
            {
LABEL_55:
              id v204 = (uint64_t *)((char *)v230 + v167[20]);
              uint64_t v205 = Data.subdata(in:)();
              unint64_t v207 = v206;
              sub_100037A24(v190, v187);
              uint64_t v208 = Data.hexString.getter();
              uint64_t v210 = v209;
              sub_10001CFB8(v205, v207);
              *id v204 = v208;
              v204[1] = v210;
              swift_storeEnumTagMultiPayload();
              sub_100DC15D4(v191, v189);
              long long v254 = xmmword_10136D170;
              *(void *)&long long v255 = v240;
              *((void *)&v255 + 1) = v244;
              *(void *)&long long v256 = v235;
              *((void *)&v256 + 1) = v237;
              *(void *)&long long v257 = v236;
              *((void *)&v257 + 1) = v239;
              LOBYTE(v258) = v238 & 1;
              *((void *)&v258 + 1) = v188;
              sub_100DC21D4(&v254);
              if (v211)
              {
                uint64_t v93 = v211;
                uint64_t v94 = v212;
                unint64_t v95 = v213;
                swift_bridgeObjectRetain();
                sub_1000361E0(v94, v95);
                uint64_t v214 = (void *)sub_1008ED4AC(3);
                sub_1008EC194(v93, v94, v95, v214);
                swift_release();
                uint64_t v215 = swift_allocObject();
                uint64_t v216 = v246;
                *(void *)(v215 + 16) = sub_1006CCE84;
                *(void *)(v215 + 24) = v216;
                swift_retain();
                Future.addFailure(block:)();
                swift_release();
                swift_release();
                long long v217 = (void *)swift_allocObject();
                v217[2] = v241;
                v217[3] = sub_1006CCE84;
                v217[4] = v216;
                swift_retain();
                swift_retain();
                Future.addSuccess(block:)();
                swift_release();
                swift_release();
                swift_release();
                sub_1001D7860(v93, v94, v95);
                uint64_t v100 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
                uint64_t v122 = (char *)&v252 + 8;
LABEL_57:
                uint64_t v101 = *((void *)v122 - 32);
                goto LABEL_58;
              }
              static os_log_type_t.error.getter();
              if (qword_1016372E0 != -1) {
                swift_once();
              }
              os_log(_:dso:log:_:_:)();
              sub_100484228();
              uint64_t v218 = swift_allocError();
              *uint64_t v219 = 0;
              uint64_t v220 = v242;
              swift_beginAccess();
              *(void *)(v220 + 16) = v218;
              swift_errorRetain();
              swift_errorRelease();
              dispatch_group_leave(v243);
              swift_errorRelease();
              unint64_t v69 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
              uint64_t v70 = v225;
LABEL_62:
              sub_1008F40A0(v70, v69);
              return swift_release();
            }
            __break(1u);
LABEL_65:
            swift_once();
LABEL_36:
            os_log(_:dso:log:_:_:)();
            sub_100484228();
            uint64_t v146 = swift_allocError();
            *uint64_t v147 = 0;
            uint64_t v148 = v242;
            swift_beginAccess();
            *(void *)(v148 + 16) = v146;
            swift_errorRetain();
            swift_errorRelease();
            dispatch_group_leave(v92);
            swift_errorRelease();
            unint64_t v69 = type metadata accessor for OwnedBeaconGroup;
            uint64_t v70 = v54;
            goto LABEL_62;
          }
          __break(1u);
LABEL_67:
          __break(1u);
          break;
        case 2uLL:
          uint64_t v202 = *(void *)(v185 + 16);
          uint64_t v201 = *(void *)(v185 + 24);
          BOOL v203 = __OFSUB__(v201, v202);
          uint64_t v200 = v201 - v202;
          if (!v203) {
            goto LABEL_54;
          }
          goto LABEL_67;
        default:
          goto LABEL_55;
      }
    }

    swift_release();
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v152 = v243;
  sub_10001DAB4(v44, (uint64_t *)&unk_10163B1D0);
  static os_log_type_t.error.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v153 = swift_allocObject();
  *(_OWORD *)(v153 + 16) = xmmword_101342130;
  uint64_t v154 = UUID.uuidString.getter();
  uint64_t v156 = v155;
  *(void *)(v153 + 56) = &type metadata for String;
  *(void *)(v153 + 64) = sub_10000B4CC();
  *(void *)(v153 + 32) = v154;
  *(void *)(v153 + 40) = v156;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008EC140();
  uint64_t v157 = swift_allocError();
  *uint64_t v158 = 1;
  uint64_t v159 = v242;
  swift_beginAccess();
  *(void *)(v159 + 16) = v157;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(v152);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1008EFF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v69 = a7;
  uint64_t v70 = a8;
  uint64_t v63 = a2;
  uint64_t v64 = a6;
  uint64_t v67 = a3;
  uint64_t v62 = a9;
  uint64_t v12 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v12);
  uint64_t v68 = (void *)((char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for LostModeRecord();
  v58[0] = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v60 = (uint64_t)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58[1] = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v58 - v17;
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  uint64_t v66 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v19 = swift_allocObject();
  long long v61 = xmmword_101342130;
  *(_OWORD *)(v19 + 16) = xmmword_101342130;
  sub_1008F4038(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v59 = v18;
  uint64_t v20 = String.init<A>(describing:)();
  uint64_t v22 = v21;
  *(void *)(v19 + 56) = &type metadata for String;
  unint64_t v65 = sub_10000B4CC();
  *(void *)(v19 + 64) = v65;
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = dispatch_group_create();
  dispatch_group_enter(v23);
  uint64_t v24 = swift_allocBox();
  uint64_t v26 = v25;
  sub_1008EC140();
  uint64_t v27 = swift_allocError();
  *uint64_t v28 = 8;
  *uint64_t v26 = v27;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = *(void *)(v70 + 280);
  unint64_t v30 = (void *)swift_allocObject();
  v30[2] = a4;
  v30[3] = a5;
  uint64_t v31 = v64;
  uint64_t v64 = v12;
  uint64_t v32 = v69;
  v30[4] = v31;
  v30[5] = v32;
  uint64_t v33 = v67;
  v30[6] = v63;
  v30[7] = v33;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v24;
  *(void *)(v34 + 24) = v23;
  swift_bridgeObjectRetain();
  uint64_t v67 = v24;
  swift_retain();
  uint64_t v35 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = a1;
  uint64_t v69 = v29;
  sub_101074370(a1, 0, (void (*)(uint64_t))sub_1008F43A4, (uint64_t)v30, (void (*)(uint64_t (*)()))sub_1008F43B8, (void (*)(uint64_t (*)()))v34);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  uint64_t v37 = v68;
  sub_1008F43D4((uint64_t)v26, (uint64_t)v68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = *v37;
    static os_log_type_t.error.getter();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = v61;
    uint64_t v72 = v38;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v40 = String.init<A>(describing:)();
    unint64_t v41 = v65;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = v41;
    *(void *)(v39 + 32) = v40;
    *(void *)(v39 + 40) = v42;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    uint64_t v43 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v62 + 16))(v62, v43);

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    unint64_t v44 = v65;
    uint64_t v45 = v60;
    sub_1008F42F4((uint64_t)v37, v60, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = 0;
    dispatch_group_enter(v35);
    uint64_t v47 = v35;
    swift_retain();
    sub_1008EDDA4(v45, 1, v70, v46, v47);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess();
    uint64_t v48 = *(void *)(v46 + 16);
    if (v48)
    {
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v61;
      uint64_t v71 = v48;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v50 = String.init<A>(describing:)();
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = v44;
      *(void *)(v49 + 32) = v50;
      *(void *)(v49 + 40) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      dispatch_group_enter(v47);
      uint64_t v52 = (uint64_t)v59;
      sub_1008F4038(v36, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      unint64_t v53 = (*(unsigned __int8 *)(v58[0] + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58[0] + 80);
      uint64_t v54 = swift_allocObject();
      sub_1008F42F4(v52, v54 + v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v55 = v47;
      sub_100B3CA80(v45, 0, (void (*)(Class))sub_1008F45C4, v54, v69, v55);
      swift_release();

      OS_dispatch_group.wait()();
      swift_errorRetain();
      uint64_t v56 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void *))(v62 + 16))(v62, v56);

      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_100A9E7EC(14);
      (*(void (**)(uint64_t, void))(v62 + 16))(v62, 0);
    }
    sub_1008F40A0(v45, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1008F06F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v238 = a2;
  v247 = (uint8_t *)a1;
  uint64_t v223 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v223);
  uint64_t v230 = (uint64_t *)((char *)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v226 = (uint64_t)&v222 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v228 = *(void *)(v229 - 8);
  uint64_t v11 = __chkstk_darwin(v229);
  uint64_t v13 = (char *)&v222 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v225 = (uint64_t)&v222 - v14;
  uint64_t v244 = type metadata accessor for UUID();
  uint64_t v239 = *(void *)(v244 - 8);
  uint64_t v15 = __chkstk_darwin(v244);
  uint64_t v240 = (uint64_t)&v222 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int v224 = (char *)&v222 - v17;
  uint64_t v235 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v235);
  long long v236 = (uint64_t *)((char *)&v222 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v222 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v232 = *(void *)(v233 - 8);
  __chkstk_darwin(v233);
  uint64_t v231 = (uint64_t)&v222 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for LostModeRecord();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v227 = (uint64_t)&v222 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v234 = (uint64_t)&v222 - v26;
  uint64_t v27 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v222 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v31 = *((void *)v30 - 1);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v222 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a4;
  *(void *)(v34 + 24) = a5;
  uint64_t v246 = v34;
  uint64_t v241 = a3;
  v245 = (int *)v23;
  uint64_t v35 = (uint64_t)&v247[*(int *)(v23 + 24)];
  uint64_t v242 = a4;
  swift_retain();
  v243 = a5;
  sub_100ACD178((uint64_t)v29);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v31 + 48);
  uint64_t v237 = v30;
  if (v36(v29, 1, v30) != 1)
  {
    sub_1008F42F4((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100010324(v45, (uint64_t)qword_10170E5C8);
    uint64_t v46 = v234;
    sub_1008F4038((uint64_t)v247, v234, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = v244;
    if (v49)
    {
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long v254 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 141558275;
      *(void *)&long long v248 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 12) = 2081;
      uint64_t v233 = v51 + 14;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v248 = sub_1008FA0F0(v52, v53, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0(v46, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0(v46, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v64 = v240;
    unint64_t v65 = v236;
    sub_1008F4038((uint64_t)&v33[v237[6]], (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v235 = (uint64_t)v33;
        uint64_t v240 = *v65;
        uint64_t v102 = v65[2];
        uint64_t v237 = (int *)v65[1];
        uint64_t v103 = v65[3];
        uint64_t v104 = v65[4];
        long long v236 = (uint64_t *)v65[5];
        uint64_t v105 = (uint64_t)v224;
        (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v224, v35, v50);
        uint64_t v106 = (uint64_t *)&v247[v245[9]];
        uint64_t v108 = *v106;
        uint64_t v107 = v106[1];
        uint64_t v109 = (uint64_t *)&v247[v245[7]];
        uint64_t v110 = *v109;
        uint64_t v111 = v109[1];
        uint64_t v112 = (uint64_t *)&v247[v245[8]];
        uint64_t v113 = *v112;
        uint64_t v114 = v112[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F33D54(v105, v102, v103, v240, (uint64_t)v237, v104, (uint64_t)v236, 0x646F4D2074736F4CLL, 0xE900000000000065, v108, v107, v110, v111, v113, v114, v238 & 1);
        if (v115)
        {
          uint64_t v93 = v115;
          uint64_t v94 = v116;
          unint64_t v95 = v117;
          swift_bridgeObjectRetain();
          sub_1000361E0(v94, v95);
          unint64_t v118 = (void *)sub_1008ED4AC(0);
          sub_1008EC844(v93, v94, v95, v118);
          swift_release();
          uint64_t v119 = swift_allocObject();
          uint64_t v120 = v246;
          *(void *)(v119 + 16) = sub_1006CD6E0;
          *(void *)(v119 + 24) = v120;
          swift_retain();
          Future.addFailure(block:)();
          swift_release();
          swift_release();
          uint64_t v121 = (void *)swift_allocObject();
          v121[2] = v241;
          v121[3] = sub_1006CD6E0;
          v121[4] = v120;
          swift_retain();
          swift_retain();
          Future.addSuccess(block:)();
          swift_release();
          swift_release();
          swift_release();
          sub_1001D7860(v93, v94, v95);
          uint64_t v100 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
          uint64_t v122 = (char *)&v257 + 8;
          goto LABEL_57;
        }
        static os_log_type_t.error.getter();
        uint64_t v192 = v235;
        if (qword_1016372E0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        sub_100484228();
        uint64_t v193 = swift_allocError();
        *unint64_t v194 = 0;
        uint64_t v195 = v242;
        swift_beginAccess();
        *(void *)(v195 + 16) = v193;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        uint64_t v69 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v70 = v192;
        goto LABEL_62;
      case 2u:
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v123 = v239;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v239 + 32))(v64, v65, v50);
        uint64_t v124 = (uint64_t)v224;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v224, v64, v50);
        uint64_t v125 = (uint64_t *)&v247[v245[9]];
        uint64_t v126 = *v125;
        uint64_t v127 = v125[1];
        uint64_t v128 = (uint64_t *)&v247[v245[7]];
        uint64_t v129 = *v128;
        uint64_t v130 = v128[1];
        uint64_t v131 = (uint64_t *)&v247[v245[8]];
        uint64_t v133 = *v131;
        uint64_t v132 = v131[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100F42A30(v124, 0x646F4D2074736F4CLL, 0xE900000000000065, v126, v127, v129, v130, v133, v132, v238 & 1);
        if (v134)
        {
          uint64_t v93 = v134;
          uint64_t v94 = v135;
          unint64_t v95 = v136;
          BOOL v137 = sub_100DF1520(*(void *)&v33[v237[16]], *(void *)&v33[v237[17]]);
          swift_bridgeObjectRetain();
          sub_1000361E0(v94, v95);
          if (v137) {
            char v138 = 2;
          }
          else {
            char v138 = 1;
          }
          uint64_t v139 = (void *)sub_1008ED4AC(v138);
          sub_1008EC4EC(v93, v94, v95, v139);
          swift_release();
          uint64_t v140 = swift_allocObject();
          uint64_t v141 = v246;
          *(void *)(v140 + 16) = sub_1006CD6E0;
          *(void *)(v140 + 24) = v141;
          swift_retain();
          Future.addFailure(block:)();
          swift_release();
          swift_release();
          uint64_t v142 = (void *)swift_allocObject();
          v142[2] = v241;
          v142[3] = sub_1006CD6E0;
          v142[4] = v141;
          swift_retain();
          swift_retain();
          Future.addSuccess(block:)();
          swift_release();
          swift_release();
          swift_release();
          sub_1001D7860(v93, v94, v95);
          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v240, v244);
          uint64_t v100 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
          uint64_t v101 = (uint64_t)v33;
          goto LABEL_58;
        }
        uint64_t v196 = v244;
        static os_log_type_t.error.getter();
        if (qword_1016372E0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        sub_100484228();
        uint64_t v197 = swift_allocError();
        *uint64_t v198 = 0;
        uint64_t v199 = v242;
        swift_beginAccess();
        *(void *)(v199 + 16) = v197;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v240, v196);
LABEL_19:
        uint64_t v69 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v70 = (uint64_t)v33;
        break;
      case 3u:
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1008EC140();
        uint64_t v143 = swift_allocError();
        *uint64_t v144 = 7;
        uint64_t v145 = v242;
        swift_beginAccess();
        *(void *)(v145 + 16) = v143;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        sub_1008F40A0((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t *, uint64_t))(v239 + 8))(v65, v50);
        return swift_release();
      default:
        swift_bridgeObjectRelease();
        sub_1008EC140();
        uint64_t v66 = swift_allocError();
        *uint64_t v67 = 7;
        uint64_t v68 = v242;
        swift_beginAccess();
        *(void *)(v68 + 16) = v66;
        swift_errorRetain();
        swift_errorRelease();
        dispatch_group_leave(v243);
        swift_errorRelease();
        goto LABEL_19;
    }
    goto LABEL_62;
  }
  sub_10001DAB4((uint64_t)v29, &qword_10163B9F0);
  sub_100AE75E0(v35, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v21, 1, v233) != 1)
  {
    uint64_t v54 = v231;
    sub_1008F42F4((uint64_t)v21, v231, type metadata accessor for OwnedBeaconGroup);
    uint64_t v55 = v245;
    if (qword_101636DD8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    uint64_t v57 = sub_100010324(v56, (uint64_t)qword_10170E5C8);
    uint64_t v58 = v227;
    sub_1008F4038((uint64_t)v247, v227, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      *(void *)&long long v254 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 141558275;
      *(void *)&long long v248 = 1752392040;
      uint64_t v240 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2081;
      sub_1008F4174((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v248 = sub_1008FA0F0(v62, v63, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1008F40A0(v58, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1008F40A0(v58, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }

    uint64_t v71 = sub_1004D1434();
    uint64_t v72 = v241;
    swift_retain();
    uint64_t v73 = sub_1008ECEF4(v71, v72);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v74 = &v247[v55[9]];
    uint64_t v75 = *(void *)v74;
    uint64_t v76 = *((void *)v74 + 1);
    uint64_t v77 = &v247[v55[7]];
    uint64_t v78 = *(void *)v77;
    uint64_t v79 = *((void *)v77 + 1);
    uint64_t v80 = &v247[v55[8]];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    long long v254 = xmmword_10136D170;
    *(void *)&long long v255 = v75;
    *((void *)&v255 + 1) = v76;
    *(void *)&long long v256 = v78;
    *((void *)&v256 + 1) = v79;
    *(void *)&long long v257 = v81;
    *((void *)&v257 + 1) = v82;
    LOBYTE(v258) = v238 & 1;
    *((void *)&v258 + 1) = v73;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      unint64_t v85 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)unint64_t v85 = 136315138;
      uint64_t v253 = v86;
      v247 = v85 + 4;
      long long v250 = v256;
      long long v251 = v257;
      long long v252 = v258;
      long long v249 = v255;
      long long v248 = v254;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v87 = String.init<A>(describing:)();
      *(void *)&long long v248 = sub_1008FA0F0(v87, v88, &v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v54 = v231;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "AirPodsLostModeContent: %s", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_100DC21D4(&v254);
    unint64_t v92 = v243;
    if (v89)
    {
      uint64_t v93 = v89;
      uint64_t v94 = v90;
      unint64_t v95 = v91;
      swift_bridgeObjectRetain();
      sub_1000361E0(v94, v95);
      uint64_t v96 = (void *)sub_1008ED4AC(2);
      sub_1008EC194(v93, v94, v95, v96);
      swift_release();
      uint64_t v97 = swift_allocObject();
      uint64_t v98 = v246;
      *(void *)(v97 + 16) = sub_1006CD6E0;
      *(void *)(v97 + 24) = v98;
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      unint64_t v99 = (void *)swift_allocObject();
      v99[2] = v241;
      v99[3] = sub_1006CD6E0;
      v99[4] = v98;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      swift_release();
      sub_1001D7860(v93, v94, v95);
      uint64_t v100 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v101 = v54;
LABEL_58:
      sub_1008F40A0(v101, v100);
      sub_1001D7860(v93, v94, v95);
      return swift_release();
    }
    static os_log_type_t.error.getter();
    if (qword_1016372E0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_65;
  }
  sub_10001DAB4((uint64_t)v21, &qword_10163BB20);
  swift_retain();
  sub_10000588C(&qword_101651898);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v37 = *(void *)(v254 + 16);
  uint64_t v38 = v245;
  if (v37)
  {
    uint64_t v39 = v228;
    uint64_t v40 = v254 + ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80));
    uint64_t v41 = *(void *)(v228 + 72);
    swift_bridgeObjectRetain();
    uint64_t v42 = v239;
    while (1)
    {
      sub_1008F4038(v40, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1008F40A0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v40 += v41;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = 1;
        uint64_t v44 = v226;
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = v226;
    sub_1008F42F4((uint64_t)v13, v226, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = 1;
    uint64_t v42 = v239;
    uint64_t v44 = v226;
    uint64_t v39 = v228;
  }
LABEL_38:
  uint64_t v149 = (int *)v229;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v44, v43, 1, v229);
  swift_bridgeObjectRelease();
  int v150 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48))(v44, 1, v149);
  uint64_t v151 = v230;
  if (v150 != 1)
  {
    uint64_t v160 = v225;
    sub_1008F42F4(v44, v225, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v161 = (uint64_t *)&v247[v38[9]];
    uint64_t v162 = v161[1];
    uint64_t v240 = *v161;
    uint64_t v163 = v38[8];
    uint64_t v164 = (uint64_t *)&v247[v38[7]];
    unint64_t v92 = v164[1];
    uint64_t v235 = *v164;
    uint64_t v165 = *(void *)&v247[v163 + 8];
    long long v236 = *(uint64_t **)&v247[v163];
    sub_10000588C(&qword_1016578C0);
    uint64_t v166 = *(void *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
    v245 = (int *)((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
    v247 = (uint8_t *)swift_allocObject();
    *((_OWORD *)v247 + 1) = xmmword_101342130;
    unint64_t v167 = (int *)sub_10000588C(&qword_1016518A8);
    uint64_t v168 = (char *)v151 + v167[12];
    unint64_t v169 = (uint64_t *)(v160 + v149[7]);
    uint64_t v170 = *v169;
    unint64_t v171 = v169[1];
    *uint64_t v151 = *v169;
    v151[1] = v171;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v168, v160 + v149[9], v244);
    uint64_t v172 = v149[11];
    uint64_t v173 = *(void *)(v160 + v149[10]);
    uint64_t v174 = *(void *)(v160 + v172);
    uint64_t v239 = v165;
    swift_bridgeObjectRetain();
    uint64_t v244 = v162;
    swift_bridgeObjectRetain();
    uint64_t v237 = (int *)v92;
    swift_bridgeObjectRetain();
    sub_1000361E0(v170, v171);
    uint64_t v175 = sub_1002AAF08(v173, v174);
    if (v176 >> 60 != 15)
    {
      uint64_t v177 = v175;
      unint64_t v178 = v176;
      unint64_t v179 = (uint64_t *)((char *)v151 + v167[16]);
      uint64_t v54 = sub_1002AA5D4(v175, v176);
      unint64_t v181 = v180;
      sub_100037A24(v177, v178);
      uint64_t v182 = Data.hexString.getter();
      uint64_t v184 = v183;
      sub_10001CFB8(v54, v181);
      uint64_t *v179 = v182;
      v179[1] = v184;
      uint64_t v185 = sub_1002AAF08(v173, v174);
      if (v186 >> 60 == 15)
      {
LABEL_69:

        swift_release();
        __break(1u);
        JUMPOUT(0x1008F2890);
      }
      unint64_t v187 = v186;
      uint64_t v188 = (uint64_t)v247;
      uint64_t v189 = (uint64_t)v245 + (void)v247;
      uint64_t v190 = v185;
      BOOL v191 = v230;
      switch(v186 >> 62)
      {
        case 1uLL:
          LODWORD(v200) = HIDWORD(v185) - v185;
          if (!__OFSUB__(HIDWORD(v185), v185))
          {
            uint64_t v200 = (int)v200;
LABEL_54:
            if (v200 >= -1)
            {
LABEL_55:
              id v204 = (uint64_t *)((char *)v230 + v167[20]);
              uint64_t v205 = Data.subdata(in:)();
              unint64_t v207 = v206;
              sub_100037A24(v190, v187);
              uint64_t v208 = Data.hexString.getter();
              uint64_t v210 = v209;
              sub_10001CFB8(v205, v207);
              *id v204 = v208;
              v204[1] = v210;
              swift_storeEnumTagMultiPayload();
              sub_100DC15D4(v191, v189);
              long long v254 = xmmword_10136D170;
              *(void *)&long long v255 = v240;
              *((void *)&v255 + 1) = v244;
              *(void *)&long long v256 = v235;
              *((void *)&v256 + 1) = v237;
              *(void *)&long long v257 = v236;
              *((void *)&v257 + 1) = v239;
              LOBYTE(v258) = v238 & 1;
              *((void *)&v258 + 1) = v188;
              sub_100DC21D4(&v254);
              if (v211)
              {
                uint64_t v93 = v211;
                uint64_t v94 = v212;
                unint64_t v95 = v213;
                swift_bridgeObjectRetain();
                sub_1000361E0(v94, v95);
                uint64_t v214 = (void *)sub_1008ED4AC(3);
                sub_1008EC194(v93, v94, v95, v214);
                swift_release();
                uint64_t v215 = swift_allocObject();
                uint64_t v216 = v246;
                *(void *)(v215 + 16) = sub_1006CD6E0;
                *(void *)(v215 + 24) = v216;
                swift_retain();
                Future.addFailure(block:)();
                swift_release();
                swift_release();
                long long v217 = (void *)swift_allocObject();
                v217[2] = v241;
                v217[3] = sub_1006CD6E0;
                v217[4] = v216;
                swift_retain();
                swift_retain();
                Future.addSuccess(block:)();
                swift_release();
                swift_release();
                swift_release();
                sub_1001D7860(v93, v94, v95);
                uint64_t v100 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
                uint64_t v122 = (char *)&v252 + 8;
LABEL_57:
                uint64_t v101 = *((void *)v122 - 32);
                goto LABEL_58;
              }
              static os_log_type_t.error.getter();
              if (qword_1016372E0 != -1) {
                swift_once();
              }
              os_log(_:dso:log:_:_:)();
              sub_100484228();
              uint64_t v218 = swift_allocError();
              *uint64_t v219 = 0;
              uint64_t v220 = v242;
              swift_beginAccess();
              *(void *)(v220 + 16) = v218;
              swift_errorRetain();
              swift_errorRelease();
              dispatch_group_leave(v243);
              swift_errorRelease();
              uint64_t v69 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
              uint64_t v70 = v225;
LABEL_62:
              sub_1008F40A0(v70, v69);
              return swift_release();
            }
            __break(1u);
LABEL_65:
            swift_once();
LABEL_36:
            os_log(_:dso:log:_:_:)();
            sub_100484228();
            uint64_t v146 = swift_allocError();
            *uint64_t v147 = 0;
            uint64_t v148 = v242;
            swift_beginAccess();
            *(void *)(v148 + 16) = v146;
            swift_errorRetain();
            swift_errorRelease();
            dispatch_group_leave(v92);
            swift_errorRelease();
            uint64_t v69 = type metadata accessor for OwnedBeaconGroup;
            uint64_t v70 = v54;
            goto LABEL_62;
          }
          __break(1u);
LABEL_67:
          __break(1u);
          break;
        case 2uLL:
          uint64_t v202 = *(void *)(v185 + 16);
          uint64_t v201 = *(void *)(v185 + 24);
          BOOL v203 = __OFSUB__(v201, v202);
          uint64_t v200 = v201 - v202;
          if (!v203) {
            goto LABEL_54;
          }
          goto LABEL_67;
        default:
          goto LABEL_55;
      }
    }

    swift_release();
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v152 = v243;
  sub_10001DAB4(v44, (uint64_t *)&unk_10163B1D0);
  static os_log_type_t.error.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v153 = swift_allocObject();
  *(_OWORD *)(v153 + 16) = xmmword_101342130;
  uint64_t v154 = UUID.uuidString.getter();
  uint64_t v156 = v155;
  *(void *)(v153 + 56) = &type metadata for String;
  *(void *)(v153 + 64) = sub_10000B4CC();
  *(void *)(v153 + 32) = v154;
  *(void *)(v153 + 40) = v156;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008EC140();
  uint64_t v157 = swift_allocError();
  *uint64_t v158 = 1;
  uint64_t v159 = v242;
  swift_beginAccess();
  *(void *)(v159 + 16) = v157;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(v152);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1008F28B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a3;
  uint64_t v49 = a2;
  uint64_t v4 = sub_10000588C(&qword_101651918);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for LostModeRecord();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v46 = (uint64_t)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v43 - v10;
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  long long v48 = xmmword_101342130;
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  sub_1008F4038(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  uint64_t v44 = v11;
  uint64_t v45 = v7;
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  uint64_t v18 = swift_allocBox();
  uint64_t v20 = v19;
  sub_1008EC140();
  uint64_t v21 = swift_allocError();
  unsigned char *v22 = 8;
  *uint64_t v20 = v21;
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = *(void *)(v49 + 280);
  uint64_t v24 = v17;
  sub_100B3D190(a1, 0, v23, v18, v24);

  OS_dispatch_group.wait()();
  swift_beginAccess();
  sub_1008F43D4((uint64_t)v20, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = *v6;
    static os_log_type_t.error.getter();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v48;
    uint64_t v51 = v25;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v27 = String.init<A>(describing:)();
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = v16;
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v28;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    uint64_t v29 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v29);

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    v43[1] = v18;
    uint64_t v30 = v46;
    sub_1008F42F4((uint64_t)v6, v46, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = 0;
    dispatch_group_enter(v24);
    uint64_t v32 = v24;
    swift_retain();
    sub_1008F06F8(v30, 1, v49, v31, v32);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess();
    uint64_t v33 = *(void *)(v31 + 16);
    if (v33)
    {
      uint64_t v49 = v23;
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v48;
      uint64_t v50 = v33;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = v16;
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 40) = v36;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      dispatch_group_enter(v32);
      uint64_t v37 = v32;
      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v48;
      sub_1008F4038(v30, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v39 = String.init<A>(describing:)();
      *(void *)(v38 + 56) = &type metadata for String;
      *(void *)(v38 + 64) = v16;
      *(void *)(v38 + 32) = v39;
      *(void *)(v38 + 40) = v40;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100B3D974(v30, v49, v37);

      OS_dispatch_group.wait()();
      swift_errorRetain();
      uint64_t v41 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void *))(v47 + 16))(v47, v41);

      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_100A9E7EC(14);
      (*(void (**)(uint64_t, void))(v47 + 16))(v47, 0);
    }
    sub_1008F40A0(v30, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_release();
  }
  return swift_release();
}

void sub_1008F2F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  uint64_t v61 = a8;
  uint64_t v56 = a4;
  uint64_t v57 = a7;
  uint64_t v59 = a6;
  uint64_t v55 = a2;
  uint64_t v12 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v12 - 8);
  uint64_t v53 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for LostModeRecord();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v14 = __chkstk_darwin(v54);
  uint64_t v51 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v50 = (uint64_t)&v50 - v16;
  _Block_copy(a9);
  os_log_type_t v60 = (void (**)(void, void *))a9;
  _Block_copy(a9);
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  long long v58 = xmmword_101342130;
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v21 = sub_10000B4CC();
  *(void *)(v17 + 64) = v21;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a5 | a3)
  {
    uint64_t v28 = a5;
    uint64_t v29 = a3;
    *(void *)&long long v58 = a1;
    uint64_t v30 = sub_100B6D358(a1);
    uint64_t v32 = v52;
    uint64_t v31 = v53;
    if (v30[2])
    {
      sub_1008F4038((uint64_t)v30 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)), v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
      uint64_t v34 = v31;
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
      uint64_t v34 = v53;
      uint64_t v35 = 1;
    }
    uint64_t v36 = (int *)v54;
    v33(v34, v35, 1, v54);
    uint64_t v37 = v60;
    uint64_t v39 = v56;
    uint64_t v38 = v57;
    uint64_t v40 = v55;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v32 + 48))(v31, 1, v36) == 1)
    {
      sub_10001DAB4(v31, &qword_10163BB70);
      uint64_t v41 = v36;
      uint64_t v42 = v51;
      UUID.init()();
      uint64_t v43 = (char *)v42 + v41[6];
      uint64_t v44 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t))(*(void *)(v44 - 8) + 16))(v43, v58, v44);
      *uint64_t v42 = xmmword_101348180;
      uint64_t v45 = (uint64_t *)((char *)v42 + v41[7]);
      *uint64_t v45 = v40;
      v45[1] = v29;
      uint64_t v46 = (uint64_t *)((char *)v42 + v41[8]);
      *uint64_t v46 = v39;
      v46[1] = v28;
      uint64_t v47 = (void *)((char *)v42 + v41[9]);
      *uint64_t v47 = v59;
      v47[1] = v38;
      _Block_copy(v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1008F28B4((uint64_t)v42, v61, (uint64_t)v37);
      _Block_release(v37);
      uint64_t v48 = (uint64_t)v42;
    }
    else
    {
      uint64_t v49 = v50;
      sub_1008F42F4(v31, v50, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      _Block_copy(v37);
      sub_1008EFF60(v49, v40, v29, v39, v28, v59, v38, v61, (uint64_t)v37);
      _Block_release(v37);
      uint64_t v48 = v49;
    }
    sub_1008F40A0(v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    _Block_release(v37);
    _Block_release(v37);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v58;
    uint64_t v23 = UUID.uuidString.getter();
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = v21;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100484228();
    swift_allocError();
    *uint64_t v25 = 0;
    uint64_t v26 = (void *)_convertErrorToNSError(_:)();
    uint64_t v27 = v60;
    v60[2](v60, v26);

    swift_errorRelease();
    _Block_release(v27);
    _Block_release(v27);
  }
}

uint64_t sub_1008F34F8(uint64_t a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v38 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LostModeRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v35 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v36 = (uint64_t)&v31 - v12;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a3;
  uint64_t v37 = a3;
  _Block_copy(a3);
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  long long v33 = xmmword_101342130;
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v32 = sub_10000B4CC();
  *(void *)(v13 + 64) = v32;
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v38;
  uint64_t v18 = sub_100B6D358(a1);
  if (v18[2])
  {
    sub_1008F4038((uint64_t)v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_10163BB70);
    static os_log_type_t.error.getter();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v33;
    uint64_t v20 = UUID.uuidString.getter();
    unint64_t v21 = v32;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = v21;
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1008EC140();
    swift_allocError();
    *uint64_t v23 = 0;
    uint64_t v24 = (void *)_convertErrorToNSError(_:)();
    v37[2](v37, v24);

    swift_errorRelease();
  }
  else
  {
    uint64_t v25 = v36;
    sub_1008F42F4((uint64_t)v7, v36, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v26 = v35;
    sub_1008F4038(v25, v35, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    unint64_t v27 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v28 = (void *)swift_allocObject();
    uint64_t v29 = v39;
    v28[2] = sub_1001DF814;
    v28[3] = v29;
    v28[4] = v17;
    sub_1008F42F4(v26, (uint64_t)v28 + v27, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    swift_retain();
    swift_retain();
    sub_1008E8548(v25, 0, (void (*)(void))sub_1008F4A7C, (uint64_t)v28);
    swift_release();
    sub_1008F40A0(v25, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  return swift_release();
}

uint64_t sub_1008F39B8(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = type metadata accessor for ServerStatusCode();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v29 - v9, a1, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for ServerStatusCode.success(_:))
  {
    static os_log_type_t.default.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return ((uint64_t (*)(void))a2)(0);
  }
  int v14 = v12;
  if (v12 == enum case for ServerStatusCode.notModified(_:))
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1008EC140();
    uint64_t v15 = swift_allocError();
    char v17 = 6;
LABEL_21:
    *uint64_t v16 = v17;
    ((void (*)(uint64_t))a2)(v15);
    return swift_errorRelease();
  }
  if (v12 == enum case for ServerStatusCode.badRequest(_:))
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1008EC140();
    swift_allocError();
    unsigned char *v18 = 2;
    a2();
    return swift_errorRelease();
  }
  if (v12 == enum case for ServerStatusCode.unauthorized(_:))
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1008EC140();
    uint64_t v15 = swift_allocError();
    char v17 = 3;
    goto LABEL_21;
  }
  unint64_t v32 = a2;
  int v19 = enum case for ServerStatusCode.serverConflict(_:);
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (v14 == v19)
  {
    a2 = v32;
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1008EC140();
    uint64_t v15 = swift_allocError();
    char v17 = 5;
    goto LABEL_21;
  }
  os_log_type_t v21 = v20;
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_10170F038;
  v11(v8, a1, v4);
  if (os_log_type_enabled(v22, v21))
  {
    os_log_t v31 = v22;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v34 = v30;
    *(_DWORD *)uint64_t v23 = 136446210;
    sub_1008F4174(&qword_10164C4D0, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_1008FA0F0(v24, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v31, v21, "Failed to submit lost mode: %{public}s.", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v8, v4);
  }
  unint64_t v27 = v32;
  sub_1008EC140();
  swift_allocError();
  *uint64_t v28 = 4;
  v27();
  swift_errorRelease();
  return ((uint64_t (*)(char *, uint64_t))v26)(v10, v4);
}

uint64_t sub_1008F4038(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008F40A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1008F4100()
{
  unint64_t result = qword_1016518E0;
  if (!qword_1016518E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016518E0);
  }
  return result;
}

uint64_t sub_1008F4154()
{
  return sub_1008F489C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1008F4174(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008F41BC()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F41D4(uint64_t a1)
{
  return sub_1008EBD88(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1008F41E0(char a1)
{
  return sub_1008EBFE0(a1, *(void (**)(void))(v1 + 16));
}

unint64_t sub_1008F41E8()
{
  unint64_t result = qword_101651908;
  if (!qword_101651908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651908);
  }
  return result;
}

uint64_t sub_1008F423C()
{
  return sub_1008F489C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1008F4258()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1008F42A4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1008F42E4(uint64_t a1)
{
  return sub_1004897CC(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1008F42F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1008F435C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1008F43A4(uint64_t a1)
{
  return sub_1008EA5F4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_1008F43B8(uint64_t a1)
{
  sub_1008EA6B8(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1008F43D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101651918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008F443C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008F4474()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1008F45C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1008EA71C(a1, v4);
}

uint64_t sub_1008F4638(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001D2E4;
  return sub_100AD2DC4(a1, v1);
}

uint64_t sub_1008F46D4()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F46EC()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F4704()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F471C()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F4734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101651918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008F47A0(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100AD2DC4(a1, v1);
}

uint64_t sub_1008F483C()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F4854()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F486C()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F4884()
{
  return sub_1008F489C((void (*)(void))&_swift_release);
}

uint64_t sub_1008F489C(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1008F48E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008F491C()
{
  uint64_t v1 = (int *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1008F4A7C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LostModeRecord() - 8);
  uint64_t v4 = (void (*)(uint64_t))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1008EBC38(a1, v4, v5, v6, v7);
}

unsigned char *_s13LostModeErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008F4BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *_s13LostModeErrorOMa()
{
  return &_s13LostModeErrorON;
}

unint64_t sub_1008F4BFC()
{
  unint64_t result = qword_101651930;
  if (!qword_101651930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651930);
  }
  return result;
}

uint64_t sub_1008F4C8C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1008F4CEC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1008F4D3C(char a1)
{
  switch(a1)
  {
    case 1:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000013;
      v4[1] = 0x800000010140BD00;
      break;
    case 2:
      strcpy((char *)v4, ".explicit (");
      HIDWORD(v4[1]) = -352321536;
      break;
    case 3:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000012;
      v4[1] = 0x800000010140BCE0;
      break;
    case 4:
      strcpy((char *)v4, ".automatic (");
      BYTE5(v4[1]) = 0;
      HIWORD(v4[1]) = -5120;
      break;
    default:
      strcpy((char *)v4, ".unknown (");
      BYTE3(v4[1]) = 0;
      HIDWORD(v4[1]) = -369098752;
      break;
  }
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4[0];
}

uint64_t sub_1008F4ED0()
{
  return sub_1008F4D3C(*v0);
}

unsigned char *storeEnumTagSinglePayload for ShareType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008F4FA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareType()
{
  return &type metadata for ShareType;
}

unint64_t sub_1008F4FE0()
{
  unint64_t result = qword_101651938;
  if (!qword_101651938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651938);
  }
  return result;
}

unint64_t sub_1008F5034()
{
  unint64_t result = qword_101651940;
  if (!qword_101651940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651940);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingLocalMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008F5154);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingLocalMessageType()
{
  return &type metadata for BeaconSharingLocalMessageType;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingSessionMessageType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1008F5228);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionMessageType()
{
  return &type metadata for BeaconSharingSessionMessageType;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008F532CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingMessageType()
{
  return &type metadata for BeaconSharingMessageType;
}

uint64_t sub_1008F536C@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1008F5C40(*a1);
  *a2 = result;
  return result;
}

void sub_1008F5398(void *a1@<X8>)
{
  *a1 = &off_1015A56A0;
}

uint64_t sub_1008F53A8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1008F5408()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1008F5458(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1008F5A70(a1, a2, a3, (uint64_t (*)(void))sub_1008F5498, (uint64_t (*)(void))sub_1008F54EC, (uint64_t (*)(void))sub_1008F5540);
}

unint64_t sub_1008F5498()
{
  unint64_t result = qword_101651948;
  if (!qword_101651948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651948);
  }
  return result;
}

unint64_t sub_1008F54EC()
{
  unint64_t result = qword_101651950;
  if (!qword_101651950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651950);
  }
  return result;
}

unint64_t sub_1008F5540()
{
  unint64_t result = qword_101651958;
  if (!qword_101651958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651958);
  }
  return result;
}

uint64_t sub_1008F5594()
{
  return sub_10044951C(&qword_101651960, &qword_101651968);
}

unint64_t sub_1008F55C0()
{
  unint64_t result = qword_101651970;
  if (!qword_101651970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651970);
  }
  return result;
}

int *sub_1008F5614@<X0>(int *result@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *result;
  if (*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1008F562C(void *a1@<X8>)
{
  *a1 = &off_1015A56D8;
}

uint64_t sub_1008F563C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1008F569C()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1008F56EC()
{
  return Hasher._finalize()();
}

void sub_1008F5730()
{
}

Swift::Int sub_1008F5758()
{
  return Hasher._finalize()();
}

_DWORD *sub_1008F5798@<X0>(_DWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1008F57AC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1008F57B4(void *a1@<X8>)
{
  *a1 = &off_1015A5700;
}

uint64_t sub_1008F57C4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1008F5824()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1008F5874(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1008F5A70(a1, a2, a3, (uint64_t (*)(void))sub_1008F58B4, (uint64_t (*)(void))sub_1008F5908, (uint64_t (*)(void))sub_1008F595C);
}

unint64_t sub_1008F58B4()
{
  unint64_t result = qword_101651978;
  if (!qword_101651978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651978);
  }
  return result;
}

unint64_t sub_1008F5908()
{
  unint64_t result = qword_101651980;
  if (!qword_101651980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651980);
  }
  return result;
}

unint64_t sub_1008F595C()
{
  unint64_t result = qword_101651988;
  if (!qword_101651988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651988);
  }
  return result;
}

uint64_t sub_1008F59B0()
{
  return sub_10044951C(&qword_101651990, &qword_101651998);
}

unint64_t sub_1008F59DC()
{
  unint64_t result = qword_1016519A0;
  if (!qword_1016519A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016519A0);
  }
  return result;
}

uint64_t sub_1008F5A30(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1008F5A70(a1, a2, a3, (uint64_t (*)(void))sub_1008F5AC4, (uint64_t (*)(void))sub_1008F5B18, (uint64_t (*)(void))sub_1008F5B6C);
}

uint64_t sub_1008F5A70(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1008F5AC4()
{
  unint64_t result = qword_1016519A8;
  if (!qword_1016519A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016519A8);
  }
  return result;
}

unint64_t sub_1008F5B18()
{
  unint64_t result = qword_1016519B0;
  if (!qword_1016519B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016519B0);
  }
  return result;
}

unint64_t sub_1008F5B6C()
{
  unint64_t result = qword_1016519B8;
  if (!qword_1016519B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016519B8);
  }
  return result;
}

uint64_t sub_1008F5BC0()
{
  return sub_10044951C(&qword_1016519C0, &qword_1016519C8);
}

unint64_t sub_1008F5BEC()
{
  unint64_t result = qword_1016519D0;
  if (!qword_1016519D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016519D0);
  }
  return result;
}

uint64_t sub_1008F5C40(uint64_t result)
{
  if (result >= 0x11) {
    return 17;
  }
  else {
    return result;
  }
}

unint64_t sub_1008F5C58(char a1)
{
  unint64_t v1 = 0x73736563637573;
  switch(a1)
  {
    case 1:
      unint64_t v1 = 0xD00000000000001CLL;
      break;
    case 2:
      unint64_t v1 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v1 = 0x6C69617641746F6ELL;
      break;
    case 4:
      unint64_t v1 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0x756C615677617228;
  v4._object = (void *)0xEA00000000003A65;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1008F5DD8(uint64_t a1, unint64_t a2)
{
  sub_1000362FC();
  unint64_t v4 = DataProtocol.intValue.getter();
  sub_10001CFB8(a1, a2);
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_1008F5E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10001DAB4(a1, &qword_10164DBB0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1008F5FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10001DAB4(a1, &qword_10164DBB0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_10000588C((uint64_t *)&unk_101638DC0);
  return swift_task_create();
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database._test_raw_scalar_sql_query(_:)(Swift::String a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v10[0] = 0x7365547265646E75;
  v10[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v11 != 1) {
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v5, v4) & 1) != 0
    && static Database.beforeFirstUnlock.getter())
  {
    sub_1001A149C();
    swift_allocError();
    int v7 = 4;
LABEL_14:
    *(_DWORD *)uint64_t v6 = v7;
    *(unsigned char *)(v6 + 4) = 1;
    return swift_willThrow();
  }
  if (!Database.readConnection.getter(v5, v4))
  {
    sub_1001A149C();
    swift_allocError();
    int v7 = 2;
    goto LABEL_14;
  }
  Connection.scalar(_:_:)();
  if (!v3)
  {
    if (v10[3])
    {
      sub_10000588C(&qword_1016519E0);
      if (swift_dynamicCast())
      {
        swift_release();
        return v11;
      }
    }
    else
    {
      sub_10001DAB4((uint64_t)v10, &qword_1016519D8);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 0;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
  }
  return swift_release();
}

uint64_t Database.writeConnection.getter(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  swift_retain();
  swift_release();
  return v5;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.reset()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  (*(void (**)(void))(v1 + 96))();
  if (!v2) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v4, v3);
  }
}

{
  Database.reset()();
}

uint64_t Database.readConnection.getter(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 16);
  swift_retain();
  swift_release();
  return v5;
}

uint64_t Database.openOrScheduleOpenAfterFirstUnlockIfNeeded(logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v37 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  int v14 = (char *)&v32 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v36 = a1;
  uint64_t v16 = a1;
  uint64_t v18 = v17;
  v15((char *)&v32 - v13, v16, v17);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3))
  {
    uint64_t v33 = v15;
    uint64_t v34 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v35 = a3;
    uint64_t v19 = a2;
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    if (static Database.beforeFirstUnlock.getter())
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v18);
      uint64_t v22 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
      uint64_t v23 = v34;
      v33(v34, v20, v18);
      unint64_t v24 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      unint64_t v25 = (char *)swift_allocObject();
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 3) = 0;
      uint64_t v26 = v35;
      *((void *)v25 + 4) = v19;
      *((void *)v25 + 5) = v26;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v24], v23, v18);
      *(void *)&v25[(v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v3;
      swift_unknownObjectRetain();
      sub_1008F5E44(v37, (uint64_t)&unk_1016519F0, (uint64_t)v25);
      return swift_release();
    }
    uint64_t v28 = v3;
    uint64_t v29 = (uint64_t)v14;
    uint64_t v30 = v19;
    uint64_t v31 = v35;
  }
  else
  {
    uint64_t v28 = v3;
    uint64_t v29 = (uint64_t)v14;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
  }
  sub_1008F8B30(v28, v29, v30, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v18);
}

uint64_t static Database.establishConnection(logger:temporary:)(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v93 = a1;
  uint64_t v7 = type metadata accessor for Connection.Location();
  uint64_t v104 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v101 = (char *)v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)v88 - v11);
  __chkstk_darwin(v10);
  int v14 = (char *)v88 - v13;
  uint64_t v106 = type metadata accessor for URL();
  uint64_t v103 = *(void *)(v106 - 8);
  uint64_t v15 = __chkstk_darwin(v106);
  uint64_t v94 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v88 - v19;
  uint64_t v21 = *(void (**)(char *))(a4 + 72);
  uint64_t v105 = v22;
  uint64_t v100 = v23;
  v21((char *)v88 - v19);
  unsigned int v95 = a2;
  uint64_t v97 = a4;
  uint64_t v98 = v7;
  uint64_t v96 = a3;
  if (a2)
  {
    unint64_t v24 = *(void (**)(char *, void, uint64_t))(v104 + 104);
    v24(v14, enum case for Connection.Location.temporary(_:), v7);
    type metadata accessor for ConnectionPair();
    swift_allocObject();
    uint64_t v25 = (uint64_t)v14;
    uint64_t v26 = 0;
    unint64_t v27 = 0xF000000000000000;
    id v28 = v102;
  }
  else
  {
    *uint64_t v12 = URL.path.getter();
    v12[1] = v29;
    uint64_t v30 = v104;
    unint64_t v24 = *(void (**)(char *, void, uint64_t))(v104 + 104);
    v24((char *)v12, enum case for Connection.Location.uri(_:), v7);
    id v28 = v102;
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    if (v28)
    {
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v12, v7);
      goto LABEL_7;
    }
    uint64_t v33 = v31;
    unint64_t v34 = v32;
    type metadata accessor for ConnectionPair();
    swift_allocObject();
    uint64_t v25 = (uint64_t)v12;
    uint64_t v26 = v33;
    unint64_t v27 = v34;
  }
  uint64_t v35 = ConnectionPair.init(_:readonly:key:)(v25, 0, v26, v27);
  if (!v28)
  {
    uint64_t v61 = v35;
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    uint64_t v63 = v106;
    v62(v100, v106);
    v62(v105, v63);
    v62((uint64_t)v20, v63);
    return v61;
  }
LABEL_7:
  uint64_t v99 = 0;
  id v102 = [self defaultManager];
  uint64_t v36 = v103;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  uint64_t v38 = v94;
  unint64_t v92 = v20;
  v37(v94, v20, v106);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v39 = v36;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v44 = v96;
  uint64_t v45 = (uint64_t *)v101;
  unint64_t v91 = v24;
  if (v43)
  {
    uint64_t v46 = swift_slowAlloc();
    int v90 = v42;
    uint64_t v47 = v46;
    uint64_t v89 = (void *)swift_slowAlloc();
    uint64_t v93 = (void *)swift_slowAlloc();
    id v108 = v93;
    *(_DWORD *)uint64_t v47 = 136446466;
    v88[1] = v47 + 4;
    sub_1008FACE0((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v48 = v106;
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v107 = sub_1008FA0F0(v49, v50, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v94 = *(char **)(v39 + 8);
    ((void (*)(char *, uint64_t))v94)(v38, v48);
    *(_WORD *)(v47 + 12) = 2114;
    uint64_t v51 = _convertErrorToNSError(_:)();
    uint64_t v107 = v51;
    unint64_t v24 = v91;
    uint64_t v45 = (uint64_t *)v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v89 = v51;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v90, "Unable to open %{public}s: %{public}@", (uint8_t *)v47, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v94 = *(char **)(v39 + 8);
    ((void (*)(char *, uint64_t))v94)(v38, v106);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v52 = v97;
  uint64_t v53 = v92;
  if (v95)
  {
    uint64_t v54 = v45;
    uint64_t v55 = v98;
  }
  else
  {
    URL._bridgeToObjectiveC()((NSURL *)v95);
    uint64_t v57 = v56;
    id v108 = 0;
    unsigned int v58 = [v102 removeItemAtURL:v56 error:&v108];

    if (v58)
    {
      id v59 = v108;
    }
    else
    {
      id v64 = v108;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v99 = 0;
    }
    URL._bridgeToObjectiveC()(v60);
    uint64_t v66 = v65;
    id v108 = 0;
    unsigned int v67 = [v102 removeItemAtURL:v65 error:&v108];

    if (v67)
    {
      id v68 = v108;
    }
    else
    {
      id v70 = v108;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v99 = 0;
    }
    URL._bridgeToObjectiveC()(v69);
    uint64_t v72 = v71;
    id v108 = 0;
    unsigned int v73 = [v102 removeItemAtURL:v71 error:&v108];

    if (v73)
    {
      id v74 = v108;
    }
    else
    {
      id v75 = v108;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v99 = 0;
    }
    uint64_t v54 = (uint64_t *)v101;
    uint64_t v55 = v98;
    unint64_t v24 = v91;
  }
  *uint64_t v54 = URL.path.getter();
  v54[1] = v76;
  uint64_t v77 = v104;
  v24((char *)v54, enum case for Connection.Location.uri(_:), v55);
  uint64_t v78 = v99;
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 64))(v44, v52);
  if (v78)
  {

    swift_errorRelease();
    (*(void (**)(uint64_t *, uint64_t))(v77 + 8))(v54, v55);
    uint64_t v83 = v105;
    uint64_t v61 = v106;
    os_log_type_t v84 = (void (*)(uint64_t, uint64_t))v94;
    ((void (*)(uint64_t, uint64_t))v94)(v100, v106);
    v84(v83, v61);
    v84((uint64_t)v53, v61);
  }
  else
  {
    uint64_t v81 = v79;
    unint64_t v82 = v80;
    type metadata accessor for ConnectionPair();
    swift_allocObject();
    uint64_t v61 = ConnectionPair.init(_:readonly:key:)((uint64_t)v54, 0, v81, v82);

    swift_errorRelease();
    uint64_t v86 = v106;
    uint64_t v87 = (void (*)(uint64_t, uint64_t))v94;
    ((void (*)(uint64_t, uint64_t))v94)(v100, v106);
    v87(v105, v86);
    v87((uint64_t)v53, v86);
  }
  return v61;
}

void sub_1008F71C8()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.startup()()
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  if (((*(uint64_t (**)(void))(v1 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    sub_1001A149C();
    swift_allocError();
    int v8 = 4;
LABEL_6:
    *(_DWORD *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  uint64_t v10 = v9(v6, v5);
  swift_release();
  if (v10)
  {
    sub_1001A149C();
    swift_allocError();
    int v8 = 3;
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 112))(v6, v5);
  if (!v3)
  {
    if (!v9(v6, v5))
    {
      sub_1001A149C();
      swift_allocError();
      int v8 = 2;
      goto LABEL_6;
    }
    swift_retain();
    swift_release();
    v11._countAndFlagsBits = 0xD000000000000019;
    v11._object = (void *)0x80000001013F43E0;
    Connection.execute(_:)(v11);
    if (v12 || (Database.optimize()(), v13))
    {
LABEL_40:
      swift_release();
      return;
    }
    Connection.handle.getter();
    _sqlite3_maintain_load_factor();
    int v14 = Connection.userVersion.getter();
    unint64_t v15 = *(void *)(v5 + 40);
    int v16 = v14;
    if (((int (*)(uint64_t, uint64_t))v15)(v6, v5) < v14)
    {
      if (qword_101636DE0 == -1)
      {
LABEL_14:
        uint64_t v17 = type metadata accessor for Logger();
        sub_100010324(v17, (uint64_t)qword_10170E5E0);
        swift_unknownObjectRetain_n();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v53 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136446722;
          uint64_t v55 = v4;
          os_log_type_t type = v19;
          uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v55 = sub_1008FA0F0(v21, v22, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 1024;
          LODWORD(v55) = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v20 + 18) = 1024;
          int v23 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v6, v5);
          swift_unknownObjectRelease();
          LODWORD(v55) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, type, "%{public}s Schema too new! (%d) -- expected <= %d", (uint8_t *)v20, 0x18u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        sub_1001A149C();
        swift_allocError();
        *(_DWORD *)uint64_t v39 = v16;
        *(unsigned char *)(v39 + 4) = 0;
        swift_willThrow();
        goto LABEL_40;
      }
LABEL_42:
      swift_once();
      goto LABEL_14;
    }
    if (v16 >= ((int (*)(uint64_t, uint64_t))v15)(v6, v5))
    {
      if (qword_101636DE0 == -1) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t))v15;
      int v24 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v6, v5);
      if (v24 >= v16)
      {
        int v25 = v24;
        if (v16 != v24)
        {
          if (qword_101636DE0 != -1) {
            swift_once();
          }
          log = *(void (**)(void))(v5 + 88);
          int v47 = v25;
          while (v16 < v25)
          {
            unint64_t v15 = (v16 + 1);
            uint64_t v26 = type metadata accessor for Logger();
            sub_100010324(v26, (uint64_t)qword_10170E5E0);
            swift_unknownObjectRetain();
            unint64_t v27 = Logger.logObject.getter();
            os_log_type_t v28 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v27, v28))
            {
              int v48 = v16;
              uint64_t v29 = swift_slowAlloc();
              uint64_t v53 = swift_slowAlloc();
              *(_DWORD *)uint64_t v29 = 136446722;
              uint64_t v55 = v4;
              uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v29 + 4) = sub_1008FA0F0(v30, v31, &v53);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              *(_WORD *)(v29 + 12) = 1024;
              *(_DWORD *)(v29 + 14) = v48;
              *(_WORD *)(v29 + 18) = 1024;
              *(_DWORD *)(v29 + 20) = v15;
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s migrating schema %d -> %d", (uint8_t *)v29, 0x18u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v15 = v15;
            }
            else
            {

              swift_unknownObjectRelease();
            }
            log();
            uint64_t v53 = 0;
            unint64_t v54 = 0xE000000000000000;
            _StringGuts.grow(_:)(24);
            swift_bridgeObjectRelease();
            uint64_t v53 = 0xD000000000000016;
            unint64_t v54 = 0x80000001013F4400;
            LODWORD(v55) = v15;
            v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v32);
            swift_bridgeObjectRelease();
            Connection.run(_:_:)();
            swift_bridgeObjectRelease();
            swift_release();
            int v16 = v15;
            int v25 = v47;
            if (v47 == v15) {
              goto LABEL_28;
            }
          }
          __break(1u);
          goto LABEL_42;
        }
LABEL_28:
        sub_1008FA99C(v6, v5);
        if (qword_101636DE0 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_100010324(v33, (uint64_t)qword_10170E5E0);
        swift_unknownObjectRetain_n();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v52))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v53 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136446466;
          uint64_t v55 = v4;
          uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v55 = sub_1008FA0F0(v36, v37, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          *(_WORD *)(v35 + 12) = 1024;
          int v38 = v46(v6, v5);
          swift_unknownObjectRelease();
          LODWORD(v55) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v52, "%{public}s is available. [schema version %d]", (uint8_t *)v35, 0x12u);
LABEL_37:
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_39:
          (*(void (**)(uint64_t, uint64_t))(v5 + 120))(v6, v5);
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      __break(1u);
    }
    swift_once();
LABEL_35:
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170E5E0);
    swift_unknownObjectRetain_n();
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v55 = v4;
      os_log_type_t typea = v41;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_1008FA0F0(v43, v44, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 1024;
      int v45 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v6, v5);
      swift_unknownObjectRelease();
      LODWORD(v55) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, typea, "%{public}s is available. [schema version %d]", (uint8_t *)v42, 0x12u);
      goto LABEL_37;
    }
LABEL_38:

    swift_unknownObjectRelease_n();
    goto LABEL_39;
  }
}

{
  Database.startup()();
}

void sub_1008F7F24()
{
}

uint64_t Database.description.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 16))())
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 8250;
    v3._object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 0x206574694C515320;
    v5._object = (void *)0xE900000000000076;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 0x322E33342E33;
    v6._object = (void *)0xE600000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 32;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = Connection.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 62;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 8250;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x206574694C515320;
    v13._object = (void *)0xE900000000000076;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 0x322E33342E33;
    v14._object = (void *)0xE600000000000000;
    String.append(_:)(v14);
    v15._object = (void *)0x80000001013F4420;
    v15._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v15);
  }
  return 60;
}

void *Connection.init(_:readonly:key:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  int v28 = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v12);
  Swift::String v14 = v13;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v15 = v8 + 8;
  int v16 = v17;
  v17((uint64_t)v10, v7);
  *(void *)unint64_t v31 = 0;
  LODWORD(v10) = [v11 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:v31];

  id v18 = *(id *)v31;
  if (v10)
  {
    uint64_t v26 = v16;
    uint64_t v27 = v15;
    URL.path.getter();
    os_log_type_t v19 = v29;
    uint64_t v20 = v30;
    uint64_t v21 = Connection.__allocating_init(_:readonly:)();
    if (v20)
    {
      sub_100037A24(a3, a4);
      v26(a1, v7);
    }
    else
    {
      os_log_type_t v19 = (void *)v21;
      if (a4 >> 60 == 15)
      {
        swift_retain();
      }
      else
      {
        uint64_t v23 = a3;
        switch(a4 >> 62)
        {
          case 1uLL:
            if ((int)a3 > a3 >> 32) {
              __break(1u);
            }
            swift_retain();
            sub_100037A38(a3, a4);
            swift_retain();
            sub_100037A38(a3, a4);
            sub_1008FAD34((int)a3, a4 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v19, a3, a4, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))&_sqlite3_key_v2);
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(a3 + 16);
            swift_retain();
            sub_100037A38(v23, a4);
            swift_retain();
            sub_100037A38(v23, a4);
            swift_retain();
            swift_retain();
            sub_1008FAD34(v24, a4 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v19, v23, a4, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))&_sqlite3_key_v2);
            swift_release();
            swift_release();
            break;
          case 3uLL:
            *(void *)&v31[6] = 0;
            *(void *)unint64_t v31 = 0;
            swift_retain_n();
            Connection.handle.getter();
            goto LABEL_12;
          default:
            *(void *)unint64_t v31 = a3;
            *(_WORD *)&v31[8] = a4;
            v31[10] = BYTE2(a4);
            v31[11] = BYTE3(a4);
            v31[12] = BYTE4(a4);
            v31[13] = BYTE5(a4);
            swift_retain_n();
            Connection.handle.getter();
LABEL_12:
            sqlite3_key_v2();
            sub_100037A24(a3, a4);
            break;
        }
        swift_release();
        sub_100037A24(v23, a4);
        Connection.scalar(_:_:)();
        sub_10001DAB4((uint64_t)v31, &qword_1016519D8);
        sub_100037A24(v23, a4);
        sub_100037A24(v23, a4);
      }
      v26(a1, v7);
      swift_release();
    }
  }
  else
  {
    os_log_type_t v19 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100037A24(a3, a4);
    v16(a1, v7);
  }
  return v19;
}

void DatabaseCheckpointMode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DatabaseCheckpointMode.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL static Database.beforeFirstUnlock.getter()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::String v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  Swift::String v6 = (char *)v10 - v5;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  sub_1008FACE0((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v7 = v10[1] == v10[0];
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7;
}

uint64_t Database.await(state:)()
{
  return sub_1008FAD28(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.optimize()()
{
  sub_1008F9690(v0, v1, 0xD000000000000010, (void *)0x80000001013F4440);
}

uint64_t Connection.userVersion.getter()
{
  uint64_t result = Connection.scalar(_:_:)();
  if (!v0)
  {
    if (!v4)
    {
LABEL_7:
      sub_10001DAB4((uint64_t)v3, &qword_1016519D8);
      goto LABEL_8;
    }
    sub_10000588C(&qword_1016519E0);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_8:
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 4) = 0;
      return swift_willThrow();
    }
    uint64_t result = v5;
    if (v5 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      return result;
    }
    if (v5 > 0x7FFFFFFF)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.update(userVersion:)(Swift::Int32 userVersion)
{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  if (!v1) {
    swift_release();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.excludeFromBackup()()
{
  sub_1008FA99C(v0, v1);
}

uint64_t sub_1008F8B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 80))(a3, a4);
}

uint64_t sub_1008F8CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  return _swift_task_switch(sub_1008F8CFC, 0, 0);
}

uint64_t sub_1008F8CFC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    Swift::String v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v2;
    *Swift::String v2 = v0;
    v2[1] = sub_1008F8E30;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008F8E30(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1008F8F30, 0, 0);
}

uint64_t sub_1008F8F30()
{
  int v16 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[25])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_unknownObjectRetain_n();
    Swift::String v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = v0[21];
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      v0[18] = v4;
      uint64_t v6 = CustomStringConvertible.typeDescription.getter();
      v0[19] = sub_1008FA0F0(v6, v7, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    Swift::String v14 = (void *)swift_task_alloc();
    v0[26] = v14;
    *Swift::String v14 = v0;
    v14[1] = sub_1008F9238;
    return sub_100611988();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170F250);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to get FirstUnlockService", v11, 2u);
      swift_slowDealloc();
    }

    Swift::String v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_1008F9238()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1008F9334, 0, 0);
}

uint64_t sub_1008F9334()
{
  os_log_type_t v10 = v0;
  (*(void (**)(void))(v0[23] + 80))(v0[22]);
  swift_unknownObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[21];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[16] = v3;
    uint64_t v5 = CustomStringConvertible.typeDescription.getter();
    v0[17] = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SQLite database for %s opened successfully after device unlock.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  swift_release();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.incrementalVacuum()()
{
  sub_1008F9690(v0, v1, 0xD00000000000001ALL, (void *)0x800000010140BDB0);
}

uint64_t sub_1008F9690(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(void))(a2 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    sub_1001A149C();
    swift_allocError();
    int v9 = 4;
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    {
      swift_retain();
      swift_release();
      v10._countAndFlagsBits = a3;
      v10._object = a4;
      Connection.execute(_:)(v10);
      return swift_release();
    }
    sub_1001A149C();
    swift_allocError();
    int v9 = 2;
  }
  *(_DWORD *)uint64_t v8 = v9;
  *(unsigned char *)(v8 + 4) = 1;
  return swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkpoint(mode:)(searchpartyd::DatabaseCheckpointMode mode)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (((*(uint64_t (**)())(v2 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    sub_1001A149C();
    swift_allocError();
    int v7 = 4;
LABEL_11:
    *(_DWORD *)uint64_t v6 = v7;
    *(unsigned char *)(v6 + 4) = 1;
    swift_willThrow();
    return;
  }
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3))
  {
    sub_1001A149C();
    swift_allocError();
    int v7 = 2;
    goto LABEL_11;
  }
  swift_retain();
  swift_release();
  *(void *)pnCkpt = 0;
  uint64_t v8 = (sqlite3 *)Connection.handle.getter();
  sqlite3_wal_checkpoint_v2(v8, "main", mode, &pnCkpt[1], pnCkpt);
  if (qword_101636CE0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170E398);
  Swift::String v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109376;
    swift_beginAccess();
    int v14 = pnCkpt[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 1024;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Checkpointed %d/%d", (uint8_t *)v12, 0xEu);
    swift_slowDealloc();
  }

  swift_release();
}

uint64_t Connection.rekey(key:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 > a1 >> 32) {
        __break(1u);
      }
      swift_retain();
      sub_1000361E0(a1, a2);
      uint64_t v10 = sub_1008FAD34((int)a1, a2 & 0x3FFFFFFFFFFFFFFFLL, v2, a1, a2, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))&_sqlite3_rekey_v2);
      if (v3) {
        goto LABEL_15;
      }
      uint64_t v9 = v10;
      uint64_t v4 = 0;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      swift_retain();
      sub_1000361E0(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v8 = sub_1008FAD34(v7, a2 & 0x3FFFFFFFFFFFFFFFLL, v2, a1, a2, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))&_sqlite3_rekey_v2);
      if (v3)
      {
        swift_release();
        sub_10001CFB8(a1, a2);
        swift_release();
        swift_release();
        __break(1u);
LABEL_15:
        swift_release();
        sub_10001CFB8(a1, a2);
        __break(1u);
        JUMPOUT(0x1008F9D10);
      }
      uint64_t v9 = v8;
      uint64_t v4 = 0;
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v12, 0, 14);
      swift_retain();
      Connection.handle.getter();
      goto LABEL_6;
    default:
      v12[0] = a1;
      LOWORD(v12[1]) = a2;
      BYTE2(v12[1]) = BYTE2(a2);
      BYTE3(v12[1]) = BYTE3(a2);
      BYTE4(v12[1]) = BYTE4(a2);
      BYTE5(v12[1]) = BYTE5(a2);
      swift_retain();
      Connection.handle.getter();
LABEL_6:
      uint64_t v9 = sqlite3_rekey_v2();
      break;
  }
  swift_release();
  sub_10001CFB8(a1, a2);
  Connection.scalar(_:_:)();
  if (!v4) {
    sub_10001DAB4((uint64_t)v12, &qword_1016519D8);
  }
  return v9;
}

uint64_t sub_1008F9D20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E5E0);
  sub_100010324(v0, (uint64_t)qword_10170E5E0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1008F9D98()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008F9E80()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10001D2E4;
  *(_OWORD *)(v6 + 176) = v7;
  *(void *)(v6 + 160) = v4;
  *(void *)(v6 + 168) = v5;
  return _swift_task_switch(sub_1008F8CFC, 0, 0);
}

uint64_t sub_1008F9FA0()
{
  return swift_slowDealloc();
}

uint64_t sub_1008F9FAC()
{
  return swift_slowAlloc();
}

uint64_t sub_1008F9FB4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1008F9FF0(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_1008FA028(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1008FA050(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1008FA078(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_1008FA0F0(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1008FA0F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1008FA1C4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10012F428((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10012F428((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1008FA1C4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1008FA380(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1008FA380(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1008FA418(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1008FA590(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1008FA590(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1008FA418(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10048C8E8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1008FA590(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A788);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  Swift::String v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_1008FA6E0(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void sub_1008FA6F0(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  int64_t v8 = *a2;
  if (*a2)
  {
    *int64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_1008FA7A8(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_1008FA888;
  return v5(v2 + 32);
}

uint64_t sub_1008FA888()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  unint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1008FA99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLResourceValues();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  size_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  int v14 = (char *)&v27 - v13;
  __chkstk_darwin(v12);
  int v16 = (char *)&v27 - v15;
  id v17 = [self defaultManager];
  (*(void (**)(char *, char *, char *, uint64_t, uint64_t))(a2 + 72))(v16, v14, v11, a1, a2);
  URLResourceValues.init()();
  URLResourceValues.isExcludedFromBackup.setter();
  URL.path.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(a1) = [v17 fileExistsAtPath:v18];

  if (a1)
  {
    uint64_t v19 = v29;
    URL.setResourceValues(_:)();
    if (v19) {
      goto LABEL_9;
    }
    uint64_t v29 = 0;
  }
  URL.path.getter();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v21 = [v17 fileExistsAtPath:v20];

  if (v21)
  {
    uint64_t v22 = v29;
    URL.setResourceValues(_:)();
    if (v22) {
      goto LABEL_9;
    }
    uint64_t v29 = 0;
  }
  URL.path.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v24 = [v17 fileExistsAtPath:v23];

  if (v24) {
    URL.setResourceValues(_:)();
  }
LABEL_9:

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v25(v14, v7);
  return ((uint64_t (*)(char *, uint64_t))v25)(v16, v7);
}

uint64_t sub_1008FACE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1008FAD28(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1008FAD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, const char *, uint64_t, uint64_t))
{
  uint64_t v10 = __DataStorage._bytes.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v12))
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      JUMPOUT(0x1008FAE40);
    }
    uint64_t v13 = v11 + a1 - v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  __DataStorage._length.getter();
  uint64_t v14 = Connection.handle.getter();
  uint64_t v15 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (HIDWORD(a4) - a4);
      if (!__OFSUB__(HIDWORD(a4), a4)) {
        return a6(v14, "main", v13, v15);
      }
      __break(1u);
LABEL_10:
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v16 = *(void *)(a4 + 24);
      uint64_t v15 = v16 - v17;
      if (__OFSUB__(v16, v17)) {
        goto LABEL_17;
      }
      if (v15 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
        goto LABEL_15;
      }
      if (v15 > 0x7FFFFFFF)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      return a6(v14, "main", v13, v15);
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      return a6(v14, "main", v13, v15);
    default:
      uint64_t v15 = BYTE6(a5);
      return a6(v14, "main", v13, v15);
  }
}

unint64_t sub_1008FAE54()
{
  unint64_t result = qword_101651A00;
  if (!qword_101651A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651A00);
  }
  return result;
}

unint64_t sub_1008FAEAC()
{
  unint64_t result = qword_101651A08;
  if (!qword_101651A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651A08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DatabaseCheckpointMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008FAFCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseCheckpointMode()
{
  return &type metadata for DatabaseCheckpointMode;
}

unsigned char *storeEnumTagSinglePayload for DatabaseState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008FB0D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseState()
{
  return &type metadata for DatabaseState;
}

uint64_t getEnumTagSinglePayload for DatabaseError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DatabaseError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_1008FB154(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1008FB170(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

uint64_t sub_1008FB1A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008FB1D8(uint64_t a1)
{
  unsigned int v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_101651A10 + dword_101651A10);
  return v6(a1, v4);
}

uint64_t sub_1008FB294(uint64_t a1)
{
  return sub_1008FCF0C(a1, qword_10170E5F8);
}

uint64_t sub_1008FB2A0()
{
  uint64_t v2 = v0;
  v1[2] = v0;
  swift_defaultActor_initialize();
  v0[14] = 0xD00000000000001ALL;
  v0[15] = 0x800000010136D920;
  v0[18] = _swiftEmptyDictionarySingleton;
  sub_10000588C(&qword_101651D68);
  swift_allocObject();
  v0[19] = AsyncStreamProvider.init()();
  id v3 = [self sharedInstance];
  v1[3] = v3;
  if (v3)
  {
    unsigned int v4 = v3;
    v2[16] = v3;
    id v5 = objc_allocWithZone((Class)type metadata accessor for AccessoryDelegateTrampoline());
    id v6 = v4;
    v2[17] = [v5 init];
    return _swift_task_switch(sub_1008FB4E4, v2, 0);
  }
  else
  {
    if (qword_101636DE8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E5F8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "ACCConnectionInfo.sharedInstance() returned nil!", v10, 2u);
      swift_slowDealloc();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for AccessoryConnectionService();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    uint64_t v11 = (uint64_t (*)(void))v1[1];
    return v11(0);
  }
}

uint64_t sub_1008FB4E4()
{
  swift_weakAssign();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1008FB560()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AccessoryConnectionService()
{
  return self;
}

uint64_t sub_1008FB5DC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1008FB5FC, v0, 0);
}

uint64_t sub_1008FB5FC()
{
  [*(id *)(*(void *)(v0 + 16) + 128) registerDelegate:*(void *)(*(void *)(v0 + 16) + 136)];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_1008FB668(char *a1, char *a2)
{
  return dword_10136DB5C[*a1] == dword_10136DB5C[*a2];
}

Swift::Int sub_1008FB68C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_10136DB5C[v1]);
  return Hasher._finalize()();
}

void sub_1008FB6DC()
{
  Hasher._combine(_:)(dword_10136DB5C[*v0]);
}

Swift::Int sub_1008FB714()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_10136DB5C[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1008FB760@<X0>(int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10090062C(*a1);
  *a2 = result;
  return result;
}

void sub_1008FB78C(_DWORD *a1@<X8>)
{
  *a1 = dword_10136DB5C[*v1];
}

uint64_t sub_1008FB7A4()
{
  uint64_t result = 0x6E776F6E6B6E752ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64656C6961662ELL;
      break;
    case 2:
      uint64_t result = 0x6465737361702ELL;
      break;
    case 3:
      uint64_t result = 0x74756F656D69742ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1008FB830()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E610);
  sub_100010324(v0, (uint64_t)qword_10170E610);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1008FB8B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163CBC0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = type metadata accessor for AccessoryConnectionService.Event();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v8;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v16, a1, v7);
  swift_storeEnumTagMultiPayload();
  v17(v13, a1, v7);
  uint64_t v18 = sub_10000588C(&qword_101660EA0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
  uint64_t v29 = v2;
  swift_beginAccess();
  sub_10015F374((uint64_t)v6, (uint64_t)v13);
  swift_endAccess();
  if (qword_101636DE8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170E5F8);
  v17(v11, a1, v7);
  NSString v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446210;
    sub_1009009B8((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_1008FA0F0(v23, v24, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Accessory detached: %{public}s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v7);
  }

  uint64_t v25 = type metadata accessor for Transaction();
  __chkstk_darwin(v25);
  *(&v27 - 2) = v29;
  *(&v27 - 1) = (uint64_t)v16;
  static Transaction.named<A>(_:with:)();
  return sub_1008FF488((uint64_t)v16);
}

uint64_t sub_1008FBD38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v129 = a1;
  uint64_t v122 = type metadata accessor for AccessoryConnectionService.Event();
  __chkstk_darwin(v122);
  uint64_t v126 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v116 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v112 - v11;
  __chkstk_darwin(v10);
  uint64_t v115 = (char *)&v112 - v13;
  uint64_t v14 = sub_10000588C(&qword_10163CBC0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v114 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v112 - v17;
  uint64_t v19 = type metadata accessor for MACAddress();
  uint64_t v127 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v118 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v119 = (char *)&v112 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v112 - v24;
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v121 = (uint64_t)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v113 = (uint64_t)&v112 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v112 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v112 - v34;
  id v130 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v131 = v36;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a2 + 16) && (unint64_t v37 = sub_1007241B8((uint64_t)&v132), (v38 & 1) != 0))
  {
    sub_10012F428(*(void *)(a2 + 56) + 32 * v37, (uint64_t)&v134);
  }
  else
  {
    long long v134 = 0u;
    long long v135 = 0u;
  }
  sub_1004268DC((uint64_t)&v132);
  uint64_t v128 = v19;
  unint64_t v117 = v12;
  if (!*((void *)&v135 + 1))
  {
    sub_10001DAB4((uint64_t)&v134, (uint64_t *)&unk_101651CE0);
LABEL_10:
    uint64_t v125 = 0;
    char v40 = 1;
    goto LABEL_11;
  }
  sub_10000588C(&qword_101651CF0);
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  if (!swift_dynamicCast())
  {
    uint64_t v19 = v128;
    goto LABEL_10;
  }
  id v39 = v130;
  uint64_t v132 = 0;
  char v133 = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v125 = v132;
  char v40 = v133;
  uint64_t v19 = v128;
LABEL_11:
  id v130 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v131 = v41;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a2 + 16) && (unint64_t v42 = sub_1007241B8((uint64_t)&v132), (v43 & 1) != 0))
  {
    sub_10012F428(*(void *)(a2 + 56) + 32 * v42, (uint64_t)&v134);
  }
  else
  {
    long long v134 = 0u;
    long long v135 = 0u;
  }
  sub_1004268DC((uint64_t)&v132);
  if (!*((void *)&v135 + 1))
  {
    uint64_t v46 = (uint64_t *)&unk_101651CE0;
    int v47 = (char *)&v134;
    goto LABEL_20;
  }
  sub_10000588C(&qword_101651CF0);
  sub_10001D4B0(0, &qword_101651CF8);
  if (!swift_dynamicCast())
  {
LABEL_21:
    uint64_t v48 = 1;
    goto LABEL_22;
  }
  id v44 = v130;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  MACAddress.init(data:type:)();

  uint64_t v45 = v127;
  uint64_t v19 = v128;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v33, 1, v128) == 1)
  {
    uint64_t v46 = (uint64_t *)&unk_1016477E0;
    int v47 = v33;
LABEL_20:
    sub_10001DAB4((uint64_t)v47, v46);
    goto LABEL_21;
  }
  uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v103(v25, v33, v128);
  v103(v35, v25, v128);
  uint64_t v19 = v128;
  uint64_t v48 = 0;
LABEL_22:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56))(v35, v48, 1, v19);
  if (v40)
  {
    uint64_t v120 = 0;
    uint64_t v125 = 0;
  }
  else
  {
    if (((unint64_t)v125 & 0x8000000000000000) != 0 || (unint64_t)v125 >> 32)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1008FCEE0);
    }
    if ((v125 - 1) > 2) {
      uint64_t v120 = 0;
    }
    else {
      uint64_t v120 = v125;
    }
  }
  swift_beginAccess();
  uint64_t v49 = *(void *)(v3 + 144);
  uint64_t v50 = *(void *)(v49 + 16);
  uint64_t v123 = v7;
  uint64_t v124 = v3;
  if (!v50)
  {
    uint64_t v61 = sub_10000588C(&qword_101660EA0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v18, 1, 1, v61);
LABEL_35:
    sub_10001DAB4((uint64_t)v18, &qword_10163CBC0);
    unint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  unint64_t v51 = sub_1007240CC(v129);
  uint64_t v112 = v3 + 144;
  if (v52)
  {
    unint64_t v53 = v51;
    uint64_t v54 = v6;
    uint64_t v55 = v35;
    uint64_t v56 = v18;
    uint64_t v57 = *(void *)(v49 + 56);
    uint64_t v58 = sub_10000588C(&qword_101660EA0);
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v60 = v57 + *(void *)(v59 + 72) * v53;
    uint64_t v18 = v56;
    uint64_t v35 = v55;
    uint64_t v6 = v54;
    sub_10001D074(v60, (uint64_t)v18, &qword_101660EA0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v59 + 56))(v18, 0, 1, v58);
  }
  else
  {
    uint64_t v62 = sub_10000588C(&qword_101660EA0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v18, 1, 1, v62);
  }
  swift_bridgeObjectRelease();
  uint64_t v63 = sub_10000588C(&qword_101660EA0);
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v18, 1, v63) == 1) {
    goto LABEL_35;
  }
  char v66 = *v18;
  uint64_t v67 = v6;
  uint64_t v68 = v113;
  sub_1005F4F18((uint64_t)&v18[*(int *)(v63 + 64)], v113);
  unint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v69 = (uint64_t)v115;
  v65(v115, v129, v67);
  uint64_t v70 = (uint64_t)v114;
  uint64_t v71 = (uint64_t)&v114[*(int *)(v63 + 64)];
  unsigned char *v114 = v66;
  *(unsigned char *)(v70 + 1) = v120;
  sub_10001D074(v68, v71, (uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v70, 0, 1, v63);
  swift_beginAccess();
  sub_10015F374(v70, v69);
  swift_endAccess();
  uint64_t v72 = v68;
  uint64_t v6 = v67;
  sub_10001DAB4(v72, (uint64_t *)&unk_1016477E0);
LABEL_37:
  uint64_t v73 = sub_10000588C(&qword_101651BD8);
  id v74 = v126;
  uint64_t v75 = (uint64_t)&v126[*(int *)(v73 + 48)];
  v65(v126, v129, v6);
  sub_10001D074((uint64_t)v35, v75, (uint64_t *)&unk_1016477E0);
  if (v125 >= 4) {
    char v76 = 0;
  }
  else {
    char v76 = (char)v125;
  }
  v74[*(int *)(v73 + 64)] = v76;
  swift_storeEnumTagMultiPayload();
  uint64_t v77 = v121;
  sub_10001D074((uint64_t)v35, v121, (uint64_t *)&unk_1016477E0);
  uint64_t v79 = v127;
  uint64_t v78 = v128;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v77, 1, v128) == 1)
  {
    uint64_t v80 = v6;
    sub_10001DAB4(v77, (uint64_t *)&unk_1016477E0);
    if (qword_101636DE8 != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    sub_100010324(v81, (uint64_t)qword_10170E5F8);
    unint64_t v82 = v116;
    v65(v116, v129, v80);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v125 = v35;
      uint64_t v85 = 0x6E776F6E6B6E752ELL;
      uint64_t v86 = swift_slowAlloc();
      *(void *)&long long v134 = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446466;
      sub_1009009B8((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      id v130 = (id)sub_1008FA0F0(v87, v88, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v82, v80);
      *(_WORD *)(v86 + 12) = 2082;
      unint64_t v89 = 0xE800000000000000;
      switch((char)v120)
      {
        case 1:
          unint64_t v89 = 0xE700000000000000;
          uint64_t v85 = 0x64656C6961662ELL;
          break;
        case 2:
          unint64_t v89 = 0xE700000000000000;
          uint64_t v85 = 0x6465737361702ELL;
          break;
        case 3:
          uint64_t v85 = 0x74756F656D69742ELL;
          break;
        default:
          break;
      }
      id v130 = (id)sub_1008FA0F0(v85, v89, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Accessory attached: %{public}s authStatus: %{public}s macAddress: nil)", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v35 = v125;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v123 + 8))(v82, v80);
    }
  }
  else
  {
    uint64_t v125 = v35;
    int v90 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v119, v77, v78);
    if (qword_101636DE8 != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    sub_100010324(v91, (uint64_t)qword_10170E5F8);
    unint64_t v92 = v117;
    v65(v117, v129, v6);
    uint64_t v93 = v118;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v118, v90, v78);
    uint64_t v94 = v90;
    unsigned int v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = 0x6E776F6E6B6E752ELL;
      uint64_t v98 = swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      *(void *)&long long v134 = v129;
      *(_DWORD *)uint64_t v98 = 136446722;
      sub_1009009B8((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      id v130 = (id)sub_1008FA0F0(v99, v100, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v92, v6);
      *(_WORD *)(v98 + 12) = 2082;
      unint64_t v101 = 0xE800000000000000;
      switch((char)v120)
      {
        case 1:
          unint64_t v101 = 0xE700000000000000;
          uint64_t v97 = 0x64656C6961662ELL;
          break;
        case 2:
          unint64_t v101 = 0xE700000000000000;
          uint64_t v97 = 0x6465737361702ELL;
          break;
        case 3:
          uint64_t v97 = 0x74756F656D69742ELL;
          break;
        default:
          break;
      }
      id v130 = (id)sub_1008FA0F0(v97, v101, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 22) = 2082;
      sub_1009009B8((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v104 = v93;
      uint64_t v105 = v128;
      uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
      id v130 = (id)sub_1008FA0F0(v106, v107, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v108 = *(void (**)(char *, uint64_t))(v127 + 8);
      v108(v104, v105);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Accessory property changed: %{public}s authStatus: %{public}s macAddress: %{public}s", (uint8_t *)v98, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v108(v119, v105);
      uint64_t v35 = v125;
    }
    else
    {

      id v102 = *(void (**)(char *, uint64_t))(v79 + 8);
      v102(v93, v78);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v92, v6);
      v102(v94, v78);
      uint64_t v35 = v125;
    }
  }
  uint64_t v109 = type metadata accessor for Transaction();
  __chkstk_darwin(v109);
  uint64_t v110 = (uint64_t)v126;
  static Transaction.named<A>(_:with:)();
  sub_10001DAB4((uint64_t)v35, (uint64_t *)&unk_1016477E0);
  return sub_1008FF488(v110);
}

uint64_t sub_1008FCF00(uint64_t a1)
{
  return sub_1008FCF0C(a1, qword_101651A20);
}

uint64_t sub_1008FCF0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001E384(v3, a2);
  uint64_t v4 = sub_100010324(v3, (uint64_t)a2);
  if (qword_101636DF0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100010324(v3, (uint64_t)qword_10170E610);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v6(v4, v5, v3);
}

void *sub_1008FCFD0(uint64_t a1)
{
  swift_getObjectType();
  if (*(void *)(sub_1009003B0(a1, (void (*)(_OWORD *__return_ptr, unsigned char *, unsigned char *))sub_100900A00) + 16))
  {
    sub_10000588C((uint64_t *)&unk_101644340);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v5 = v2;
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1008FFFDC(v3, 1, &v5);
  swift_bridgeObjectRelease();
  return v5;
}

double sub_1008FD0AC@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100173F4C(a1, (uint64_t)v18);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v17[1];
    *(void *)a3 = v17[0];
    *(void *)(a3 + 8) = v6;
    uint64_t v7 = a2[3];
    uint64_t v8 = sub_10001CD44(a2, v7);
    *(void *)(a3 + 40) = v7;
    uint64_t v9 = sub_10001D958((uint64_t *)(a3 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v9, v8, v7);
  }
  else
  {
    if (qword_101636DF8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_101651A20);
    sub_100173F4C(a1, (uint64_t)v18);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v15 = AnyHashable.description.getter();
      sub_1008FA0F0(v15, v16, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1004268DC((uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Dropping non-String metadata key: %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004268DC((uint64_t)v18);
    }

    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t sub_1008FD2EC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  unsigned int v28 = a3;
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v25 - v15;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    if (a2)
    {
      UUID.init(uuidString:)();
      uint64_t v19 = v11;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        swift_release();
        return sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
      }
      else
      {
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v27(v16, v9, v10);
        uint64_t v20 = v30;
        if (v30)
        {
          if (v28 >= 0xA) {
            int v21 = 10;
          }
          else {
            int v21 = v28;
          }
          unsigned int v28 = v21;
          uint64_t v26 = sub_1008FCFD0(v29);
          uint64_t v25 = sub_1008FCFD0(v20);
          uint64_t v29 = *(void *)(v5
                          + OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_workItemQueue);
          (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v14, v16, v10);
          unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
          uint64_t v30 = v19;
          unint64_t v23 = (v22 + v12) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v24 = swift_allocObject();
          *(void *)(v24 + 16) = v18;
          v27((char *)(v24 + v22), v14, v10);
          *(unsigned char *)(v24 + v22 + v12) = v28;
          *(void *)(v23 + v24 + 8) = v26;
          *(void *)(v24 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8)) = v25;
          swift_retain();
          dispatch thunk of WorkItemQueue.enqueue(_:)();
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v10);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v10);
          return swift_release();
        }
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008FD648(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 64) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_1008FD670, 0, 0);
}

uint64_t sub_1008FD670()
{
  char v1 = *(unsigned char *)(v0 + 64);
  type metadata accessor for Transaction();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1008FD76C;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1008FD76C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100771174, 0, 0);
}

uint64_t sub_1008FD884(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  *(unsigned char *)(v6 + 64) = a4;
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  return _swift_task_switch(sub_1008FD8AC, 0, 0);
}

uint64_t sub_1008FD8AC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[2];
  v0[6] = sub_100654E30(v0[4]);
  v0[7] = sub_100654E30(v1);
  return _swift_task_switch(sub_1008FD928, v2, 0);
}

uint64_t sub_1008FD928()
{
  sub_100900F54(*(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1008FDAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    if (a2)
    {
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        swift_release();
        return sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
      }
      else
      {
        uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v18(v12, v5, v6);
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
        unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = v14;
        v18((char *)(v16 + v15), v10, v6);
        swift_retain();
        dispatch thunk of WorkItemQueue.enqueue(_:)();
        swift_release();
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008FDD6C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1008FDD8C, 0, 0);
}

uint64_t sub_1008FDD8C()
{
  type metadata accessor for Transaction();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1008FDE74;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1008FDE74()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100771174, 0, 0);
}

uint64_t sub_1008FDF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1008FDFA8, a2, 0);
}

uint64_t sub_1008FDFA8()
{
  sub_1008FB8B4(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1008FE080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    if (a2)
    {
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        swift_release();
        return sub_10001DAB4((uint64_t)v7, &qword_101638CF0);
      }
      else
      {
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v17(v14, v7, v8);
        if (v25)
        {
          uint64_t v18 = sub_1008FCFD0(v25);
          uint64_t v19 = *(void *)(v3
                          + OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_workItemQueue);
          uint64_t v24 = v18;
          uint64_t v25 = v19;
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
          unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          int v21 = (void (*)(unint64_t, char *, uint64_t))v17;
          unint64_t v22 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v23 = swift_allocObject();
          *(void *)(v23 + 16) = v16;
          v21(v23 + v20, v12, v8);
          *(void *)(v23 + v22) = v24;
          swift_retain();
          dispatch thunk of WorkItemQueue.enqueue(_:)();
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
          return swift_release();
        }
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008FE388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1008FE3AC, 0, 0);
}

uint64_t sub_1008FE3AC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for Transaction();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1008FE4A4;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1008FE4A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100771174, 0, 0);
}

uint64_t sub_1008FE5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  void v4[2] = a2;
  return _swift_task_switch(sub_1008FE5E0, 0, 0);
}

uint64_t sub_1008FE5E0()
{
  uint64_t v1 = v0[2];
  v0[5] = sub_100654E30(v0[4]);
  return _swift_task_switch(sub_1008FE650, v1, 0);
}

uint64_t sub_1008FE650()
{
  sub_1008FBD38(v0[3], v0[5]);
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t type metadata accessor for AccessoryDelegateTrampoline()
{
  return self;
}

void *sub_1008FE8E4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = sub_10000588C(&qword_101651BD8);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for MACAddress();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *((unsigned char *)a1 + *(int *)(v8 + 64)) = *((unsigned char *)a2 + *(int *)(v8 + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      uint64_t v18 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
      *((unsigned char *)a1 + v18[12]) = *((unsigned char *)a2 + v18[12]);
      uint64_t v19 = v18[16];
      unint64_t v20 = (char *)a1 + v19;
      int v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for MACAddress();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      *((unsigned char *)a1 + v18[20]) = *((unsigned char *)a2 + v18[20]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1008FEC6C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
LABEL_10:
    return v6(v8, v7);
  }
  if (result == 1)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
    uint64_t v4 = *(int *)(sub_10000588C(&qword_101651BD8) + 48);
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = *(int *)(sub_10000588C((uint64_t *)&unk_101651BC8) + 64);
  }
  uint64_t v10 = a1 + v4;
  uint64_t v11 = type metadata accessor for MACAddress();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v8 = v10;
    uint64_t v7 = v11;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1008FEE08(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = sub_10000588C(&qword_101651BD8);
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    uint64_t v10 = type metadata accessor for MACAddress();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *(unsigned char *)(a2 + *(int *)(v6 + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    uint64_t v15 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
    *(unsigned char *)(a1 + v15[12]) = *(unsigned char *)(a2 + v15[12]);
    uint64_t v16 = v15[16];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    uint64_t v19 = type metadata accessor for MACAddress();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(unsigned char *)(a1 + v15[20]) = *(unsigned char *)(a2 + v15[20]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1008FF140(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1008FF488(a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = sub_10000588C(&qword_101651BD8);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (const void *)(a2 + v7);
      uint64_t v10 = type metadata accessor for MACAddress();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *(unsigned char *)(a2 + *(int *)(v6 + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      uint64_t v15 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
      *(unsigned char *)(a1 + v15[12]) = *(unsigned char *)(a2 + v15[12]);
      uint64_t v16 = v15[16];
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (const void *)(a2 + v16);
      uint64_t v19 = type metadata accessor for MACAddress();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(unsigned char *)(a1 + v15[20]) = *(unsigned char *)(a2 + v15[20]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1008FF488(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryConnectionService.Event();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AccessoryConnectionService.Event()
{
  uint64_t result = qword_101651C50;
  if (!qword_101651C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1008FF530(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = sub_10000588C(&qword_101651BD8);
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    uint64_t v10 = type metadata accessor for MACAddress();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *(unsigned char *)(a2 + *(int *)(v6 + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
    uint64_t v15 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
    *(unsigned char *)(a1 + v15[12]) = *(unsigned char *)(a2 + v15[12]);
    uint64_t v16 = v15[16];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    uint64_t v19 = type metadata accessor for MACAddress();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_10000588C((uint64_t *)&unk_1016477E0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(unsigned char *)(a1 + v15[20]) = *(unsigned char *)(a2 + v15[20]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1008FF868(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1008FF488(a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = sub_10000588C(&qword_101651BD8);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (const void *)(a2 + v7);
      uint64_t v10 = type metadata accessor for MACAddress();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *(unsigned char *)(a2 + *(int *)(v6 + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      uint64_t v15 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
      *(unsigned char *)(a1 + v15[12]) = *(unsigned char *)(a2 + v15[12]);
      uint64_t v16 = v15[16];
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (const void *)(a2 + v16);
      uint64_t v19 = type metadata accessor for MACAddress();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_10000588C((uint64_t *)&unk_1016477E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(unsigned char *)(a1 + v15[20]) = *(unsigned char *)(a2 + v15[20]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_1008FFBB0()
{
  uint64_t v0 = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(v0 - 8) + 64;
    uint64_t v6 = v2;
    uint64_t v7 = &unk_10136D988;
    sub_1004DE7D8();
    if (v4 <= 0x3F)
    {
      uint64_t v8 = *(void *)(v3 - 8) + 64;
      uint64_t v9 = &unk_10136D9A0;
      swift_getTupleTypeLayout();
      uint64_t v11 = &v10;
      swift_getTupleTypeLayout3();
      uint64_t v12 = &v5;
      uint64_t v13 = v2;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AccessoryConnectionService.AuthStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008FFD98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConnectionService.AuthStatus()
{
  return &type metadata for AccessoryConnectionService.AuthStatus;
}

unsigned char *storeEnumTagSinglePayload for AccessoryConnectionService.ConnectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1008FFE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConnectionService.ConnectionType()
{
  return &type metadata for AccessoryConnectionService.ConnectionType;
}

unint64_t sub_1008FFED8()
{
  unint64_t result = qword_101651C90;
  if (!qword_101651C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651C90);
  }
  return result;
}

unint64_t sub_1008FFF30()
{
  unint64_t result = qword_101651C98;
  if (!qword_101651C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651C98);
  }
  return result;
}

uint64_t sub_1008FFF84(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1009009B8((unint64_t *)&unk_101651CA8, a2, (void (*)(uint64_t))type metadata accessor for AccessoryConnectionService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1008FFFDC(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_10001D074(a1 + 32, (uint64_t)&v46, (uint64_t *)&unk_101651D00);
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  sub_100173E4C(v48, v43);
  uint64_t v9 = (void *)*a3;
  unint64_t v11 = sub_100723FF4(v7, v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_100E8147C();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v7;
    v21[1] = v8;
    sub_100173E4C(v43, (_OWORD *)(v20[7] + 32 * v11));
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 80; ; i += 48)
    {
      sub_10001D074(i, (uint64_t)&v46, (uint64_t *)&unk_101651D00);
      uint64_t v27 = v46;
      uint64_t v28 = v47;
      uint64_t v44 = v46;
      uint64_t v45 = v47;
      sub_100173E4C(v48, v43);
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = sub_100723FF4(v27, v28);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_100E6C814(v34, 1);
        unint64_t v30 = sub_100723FF4(v27, v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      unint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      char v38 = (uint64_t *)(v37[6] + 16 * v30);
      *char v38 = v27;
      v38[1] = v28;
      sub_100173E4C(v43, (_OWORD *)(v37[7] + 32 * v30));
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v37[2] = v40;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100E6C814(v14, a2 & 1);
  uint64_t v16 = sub_100723FF4(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v19 = swift_allocError();
    swift_willThrow();
    uint64_t v49 = v19;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x8000000101408560;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1009003B0(uint64_t a1, void (*a2)(_OWORD *__return_ptr, unsigned char *, unsigned char *))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v27 = _swiftEmptyArrayStorage;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    sub_100173F4C(*(void *)(a1 + 48) + 40 * i, (uint64_t)v25);
    sub_10012F428(*(void *)(a1 + 56) + 32 * i, (uint64_t)v26);
    a2(v24, v25, v26);
    sub_10001DAB4((uint64_t)v25, (uint64_t *)&unk_101651D10);
    if (*((void *)&v24[0] + 1))
    {
      long long v21 = v24[0];
      long long v22 = v24[1];
      long long v23 = v24[2];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100A705C4(0, v27[2] + 1, 1, v27);
        uint64_t v27 = (void *)result;
      }
      unint64_t v17 = v27[2];
      unint64_t v16 = v27[3];
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)sub_100A705C4((void *)(v16 > 1), v17 + 1, 1, v27);
        unint64_t v18 = v17 + 1;
        uint64_t v27 = (void *)result;
      }
      uint64_t v19 = v27;
      v27[2] = v18;
      uint64_t v20 = &v19[6 * v17];
      v20[3] = v22;
      v20[4] = v23;
      v20[2] = v21;
      if (v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101644350);
      if (v7) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v8) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_29;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v27;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10090062C(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 9;
      break;
    default:
      if (a1 == 0xFFFF) {
        uint64_t result = 10;
      }
      else {
        uint64_t result = 11;
      }
      break;
  }
  return result;
}

uint64_t sub_1009006E8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1009007D0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *unint64_t v7 = v1;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_100033F68;
  _OWORD v7[2] = v4;
  return _swift_task_switch(sub_1008FE3AC, 0, 0);
}

uint64_t sub_1009008EC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1008FE5E0, 0, 0);
}

uint64_t sub_1009009A0()
{
  return sub_100901EEC();
}

uint64_t sub_1009009B8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_100900A00@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1008FD0AC(a1, a2, a3);
}

uint64_t sub_100900A08()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100900AD4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  uint64_t v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_1008FDD8C, 0, 0);
}

uint64_t sub_100900BBC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1008FDFA8, v3, 0);
}

uint64_t sub_100900C68()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100900D60()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v0 + 16);
  char v6 = *(unsigned char *)(v0 + v4);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  uint64_t v9 = *(void *)(v0 + (((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *(void *)uint64_t v10 = v1;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v9;
  *(unsigned char *)(v10 + 64) = v6;
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 8) = sub_10001D2E4;
  return _swift_task_switch(sub_1008FD670, 0, 0);
}

uint64_t sub_100900E9C()
{
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(unsigned char *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return _swift_task_switch(sub_1008FD8AC, 0, 0);
}

uint64_t sub_100900F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v110 = a2;
  uint64_t v111 = a1;
  uint64_t v4 = sub_10000588C(&qword_10163CBC0);
  __chkstk_darwin(v4 - 8);
  unint64_t v107 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v98 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v97 - v11;
  __chkstk_darwin(v10);
  uint64_t v106 = (char *)&v97 - v13;
  uint64_t v104 = type metadata accessor for AccessoryConnectionService.Event();
  __chkstk_darwin(v104);
  uint64_t v112 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MACAddress();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  long long v22 = (char *)&v97 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v97 - v23;
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v105 = (uint64_t)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v97 - v29;
  __chkstk_darwin(v28);
  uint64_t v113 = (char *)&v97 - v31;
  id v114 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v115 = v32;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a3 + 16) && (unint64_t v33 = sub_1007241B8((uint64_t)&v116), (v34 & 1) != 0))
  {
    sub_10012F428(*(void *)(a3 + 56) + 32 * v33, (uint64_t)&v118);
  }
  else
  {
    long long v118 = 0u;
    long long v119 = 0u;
  }
  sub_1004268DC((uint64_t)&v116);
  unint64_t v101 = v22;
  unint64_t v100 = v19;
  uint64_t v99 = v12;
  if (!*((void *)&v119 + 1))
  {
    uint64_t v35 = v6;
    sub_10001DAB4((uint64_t)&v118, (uint64_t *)&unk_101651CE0);
LABEL_12:
    unsigned int v37 = 0;
    goto LABEL_13;
  }
  sub_10000588C(&qword_101651CF0);
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  uint64_t v35 = v6;
  if (!swift_dynamicCast()) {
    goto LABEL_12;
  }
  id v36 = v114;
  unint64_t v116 = 0;
  char v117 = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  if (v117) {
    goto LABEL_12;
  }
  unsigned int v37 = v116;
  if ((v116 & 0x8000000000000000) != 0 || HIDWORD(v116))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100901ECCLL);
  }
LABEL_13:
  id v114 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v115 = v38;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a3 + 16) && (unint64_t v39 = sub_1007241B8((uint64_t)&v116), (v40 & 1) != 0))
  {
    sub_10012F428(*(void *)(a3 + 56) + 32 * v39, (uint64_t)&v118);
  }
  else
  {
    long long v118 = 0u;
    long long v119 = 0u;
  }
  sub_1004268DC((uint64_t)&v116);
  if (!*((void *)&v119 + 1))
  {
    Swift::String v42 = (uint64_t *)&unk_101651CE0;
    char v43 = (char *)&v118;
    goto LABEL_22;
  }
  sub_10000588C(&qword_101651CF0);
  sub_10001D4B0(0, &qword_101651CF8);
  if (!swift_dynamicCast())
  {
LABEL_23:
    uint64_t v44 = 1;
    goto LABEL_24;
  }
  id v41 = v114;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  MACAddress.init(data:type:)();

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v30, 1, v15) == 1)
  {
    Swift::String v42 = (uint64_t *)&unk_1016477E0;
    char v43 = v30;
LABEL_22:
    sub_10001DAB4((uint64_t)v43, v42);
    goto LABEL_23;
  }
  unint64_t v88 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v88(v24, v30, v15);
  v88(v113, v24, v15);
  uint64_t v44 = 0;
LABEL_24:
  uint64_t v102 = v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v113, v44, 1, v15);
  if (v37 >= 4) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v37;
  }
  uint64_t v46 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
  uint64_t v47 = v46[12];
  uint64_t v48 = v111;
  uint64_t v49 = v112;
  uint64_t v50 = (uint64_t)&v112[v46[16]];
  uint64_t v108 = v7;
  uint64_t v109 = v15;
  uint64_t v51 = v46[20];
  char v52 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v52(v112, v111, v35);
  char v53 = v110;
  v49[v47] = v110;
  uint64_t v54 = (uint64_t)v113;
  sub_10001D074((uint64_t)v113, v50, (uint64_t *)&unk_1016477E0);
  v49[v51] = v45;
  uint64_t v55 = v109;
  uint64_t v56 = v35;
  swift_storeEnumTagMultiPayload();
  uint64_t v57 = (uint64_t)v106;
  uint64_t v58 = v56;
  uint64_t v104 = v7 + 16;
  uint64_t v103 = v52;
  v52(v106, v48, v56);
  uint64_t v59 = sub_10000588C(&qword_101660EA0);
  uint64_t v60 = (uint64_t)v107;
  uint64_t v61 = (uint64_t)&v107[*(int *)(v59 + 64)];
  unsigned char *v107 = v53;
  uint64_t v62 = v102;
  uint64_t v97 = v45;
  *(unsigned char *)(v60 + 1) = v45;
  sub_10001D074(v54, v61, (uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v60, 0, 1, v59);
  swift_beginAccess();
  sub_10015F374(v60, v57);
  swift_endAccess();
  uint64_t v63 = v105;
  sub_10001D074(v54, v105, (uint64_t *)&unk_1016477E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v55) == 1)
  {
    sub_10001DAB4(v63, (uint64_t *)&unk_1016477E0);
    if (qword_101636DE8 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_100010324(v64, (uint64_t)qword_10170E5F8);
    unint64_t v65 = v98;
    v103(v98, v111, v58);
    char v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = 0x6E776F6E6B6E752ELL;
      uint64_t v69 = swift_slowAlloc();
      unint64_t v116 = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446722;
      sub_1009009B8((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v118 = sub_1008FA0F0(v70, v71, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v58);
      *(_WORD *)(v69 + 12) = 1024;
      LODWORD(v118) = dword_10136DB5C[(char)v110];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v69 + 18) = 2082;
      unint64_t v72 = 0xE800000000000000;
      switch((char)v97)
      {
        case 1:
          unint64_t v72 = 0xE700000000000000;
          uint64_t v68 = 0x64656C6961662ELL;
          break;
        case 2:
          unint64_t v72 = 0xE700000000000000;
          uint64_t v68 = 0x6465737361702ELL;
          break;
        case 3:
          uint64_t v68 = 0x74756F656D69742ELL;
          break;
        default:
          break;
      }
      *(void *)&long long v118 = sub_1008FA0F0(v68, v72, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Accessory attached: %{public}s type: %u authStatus: %{public}s macAddress: nil)", (uint8_t *)v69, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v58);
    }
  }
  else
  {
    uint64_t v73 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v101, v63, v55);
    if (qword_101636DE8 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    sub_100010324(v74, (uint64_t)qword_10170E5F8);
    uint64_t v75 = v99;
    v103(v99, v111, v58);
    char v76 = v100;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v100, v73, v55);
    uint64_t v77 = Logger.logObject.getter();
    uint64_t v78 = v55;
    os_log_type_t v79 = static os_log_type_t.default.getter();
    BOOL v80 = os_log_type_enabled(v77, v79);
    uint64_t v81 = v108;
    if (v80)
    {
      uint64_t v82 = swift_slowAlloc();
      uint64_t v111 = swift_slowAlloc();
      unint64_t v116 = v111;
      *(_DWORD *)uint64_t v82 = 136446978;
      sub_1009009B8((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v118 = sub_1008FA0F0(v83, v84, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v75, v58);
      *(_WORD *)(v82 + 12) = 1024;
      LODWORD(v118) = dword_10136DB5C[(char)v110];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 18) = 2082;
      unint64_t v85 = 0xE800000000000000;
      uint64_t v86 = 0x6E776F6E6B6E752ELL;
      switch((char)v97)
      {
        case 1:
          unint64_t v85 = 0xE700000000000000;
          uint64_t v86 = 0x64656C6961662ELL;
          break;
        case 2:
          unint64_t v85 = 0xE700000000000000;
          uint64_t v86 = 0x6465737361702ELL;
          break;
        case 3:
          uint64_t v86 = 0x74756F656D69742ELL;
          break;
        default:
          break;
      }
      *(void *)&long long v118 = sub_1008FA0F0(v86, v85, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 28) = 2082;
      sub_1009009B8((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      unint64_t v89 = v100;
      uint64_t v90 = v109;
      uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v118 = sub_1008FA0F0(v91, v92, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v93 = *(void (**)(char *, uint64_t))(v62 + 8);
      v93(v89, v90);
      _os_log_impl((void *)&_mh_execute_header, v77, v79, "Accessory attached: %{public}s type: %u authStatus: %{public}s macAddress: %{public}s", (uint8_t *)v82, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v93(v101, v90);
    }
    else
    {

      uint64_t v87 = *(void (**)(char *, uint64_t))(v62 + 8);
      v87(v76, v78);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v75, v58);
      v87(v73, v78);
    }
  }
  uint64_t v94 = type metadata accessor for Transaction();
  __chkstk_darwin(v94);
  uint64_t v95 = (uint64_t)v112;
  static Transaction.named<A>(_:with:)();
  sub_10001DAB4((uint64_t)v113, (uint64_t *)&unk_1016477E0);
  return sub_1008FF488(v95);
}

uint64_t sub_100901EEC()
{
  return AsyncStreamProvider.yield(value:transaction:)();
}

uint64_t *sub_100901F20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_1000361E0(*v13, v15);
    *uint64_t v12 = v14;
    v12[1] = v15;
  }
  return v4;
}

uint64_t sub_10090201C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_10001CFB8(v7, v8);
}

void *sub_1009020A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  return a1;
}

void *sub_100902150(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_10001CFB8(v15, v16);
  return a1;
}

void *sub_100902204(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10090229C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void *)((char *)a1 + v10);
  unint64_t v12 = *(void *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_10001CFB8(v11, v12);
  return a1;
}

uint64_t sub_100902340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100902354);
}

uint64_t sub_100902354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
    if (((4 * v12) & 0xC) != 0) {
      return 16 - ((4 * v12) & 0xC | (v12 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10090242C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100902440);
}

uint64_t sub_100902440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v13 = (void *)(a1 + *(int *)(a4 + 24));
    *uint64_t v13 = 0;
    v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV2()
{
  uint64_t result = qword_101651DC8;
  if (!qword_101651DC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10090255C()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100902600(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101651E20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100902D88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FamilyCryptoKeysV2();
    LOBYTE(v12) = 1;
    type metadata accessor for DateInterval();
    sub_100902E9C(&qword_101651E28);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_10043C654();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009027EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101651E08);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FamilyCryptoKeysV2();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_100902D88();
  uint64_t v11 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v26 = a1;
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  LOBYTE(v27) = 0;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = v10;
  *uint64_t v10 = v15;
  LOBYTE(v27) = 1;
  sub_100902E9C(&qword_101651E18);
  unint64_t v16 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v20;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v20 + *(int *)(v8 + 20), v16, v14);
  char v28 = 2;
  sub_10043C600();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v25);
  *(_OWORD *)(v17 + *(int *)(v8 + 24)) = v27;
  sub_100902DDC(v17, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return sub_100902E40(v17);
}

uint64_t sub_100902B54(char *a1, char *a2)
{
  return sub_10071D828(*a1, *a2);
}

Swift::Int sub_100902B60()
{
  return Hasher._finalize()();
}

uint64_t sub_100902BBC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100902BFC()
{
  return Hasher._finalize()();
}

unint64_t sub_100902C54@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1009030EC(*a1);
  *a2 = result;
  return result;
}

void sub_100902C84(void *a1@<X8>)
{
  *a1 = qword_10136DD60[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100902CA0()
{
  return qword_10136DD60[*v0];
}

unint64_t sub_100902CB8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1009030EC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100902CE0(uint64_t a1)
{
  unint64_t v2 = sub_100902D88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100902D1C(uint64_t a1)
{
  unint64_t v2 = sub_100902D88();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100902D58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009027EC(a1, a2);
}

uint64_t sub_100902D70(void *a1)
{
  return sub_100902600(a1);
}

unint64_t sub_100902D88()
{
  unint64_t result = qword_101651E10;
  if (!qword_101651E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651E10);
  }
  return result;
}

uint64_t sub_100902DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FamilyCryptoKeysV2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100902E40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FamilyCryptoKeysV2();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100902E9C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DateInterval();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FamilyCryptoKeysV2.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100902FACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV2.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV2.CodingKeys;
}

unint64_t sub_100902FE8()
{
  unint64_t result = qword_101651E30;
  if (!qword_101651E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651E30);
  }
  return result;
}

unint64_t sub_100903040()
{
  unint64_t result = qword_101651E38;
  if (!qword_101651E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651E38);
  }
  return result;
}

unint64_t sub_100903098()
{
  unint64_t result = qword_101651E40;
  if (!qword_101651E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651E40);
  }
  return result;
}

unint64_t sub_1009030EC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3680, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100903138(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_101651F20);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100904F74();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_10000588C(&qword_10163BD60);
  sub_100904FC8((unint64_t *)&qword_101651F28);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100903304(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_101651F60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1009058F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[1] = a2;
    char v11 = 1;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_1003BBD08((unint64_t *)&qword_10163F7E0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009034C0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101651EF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100904B48();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_100904B9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for NFCTapRequestContent();
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_100904BE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100903720()
{
  if (*v0) {
    return 2036625250;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100903758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100904C38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100903780(uint64_t a1)
{
  unint64_t v2 = sub_100904F74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009037BC(uint64_t a1)
{
  unint64_t v2 = sub_100904F74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009037F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100904D18(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100903828(void *a1)
{
  return sub_100903138(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100903848()
{
  if (*v0) {
    return 7562345;
  }
  else {
    return 0x7461447472617473;
  }
}

uint64_t sub_100903880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009053E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009038A8(uint64_t a1)
{
  unint64_t v2 = sub_1009058F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009038E4(uint64_t a1)
{
  unint64_t v2 = sub_1009058F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100903920@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1009054D4(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_100903950(void *a1)
{
  return sub_100903304(a1, *(void *)(v1 + 8));
}

uint64_t sub_100903970()
{
  uint64_t result = 0x646975756162;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1684628325;
      break;
    case 2:
      uint64_t result = 0x644970696863;
      break;
    case 3:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 4:
      uint64_t result = 0x6269726373627573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100903A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1009056D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100903A3C(uint64_t a1)
{
  unint64_t v2 = sub_100904B48();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100903A78(uint64_t a1)
{
  unint64_t v2 = sub_100904B48();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100903AB4(void *a1)
{
  return sub_1009034C0(a1);
}

id sub_100903ACC()
{
  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v1 = result;
  id v2 = (id)MobileGestalt_copy_productType_obj();

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = (void *)0xE000000000000000;
  }
  id result = (id)MobileGestalt_get_current_device();
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v6 = result;
  id v7 = (id)MobileGestalt_copy_productVersion_obj();

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = (void *)0xE000000000000000;
  }
  id v11 = [self processInfo];
  id v12 = [v11 processName];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14._countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v3;
  v17._object = v5;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 47;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v8;
  v19._object = v10;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return (id)v13;
}

void sub_100903C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v64 = a7;
  uint64_t v65 = a8;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v59 = a2;
  uint64_t v10 = (int *)type metadata accessor for NFCTapRequestContent();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  Swift::String v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  Swift::String v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v67 = v20;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v22 = v67;
  swift_bridgeObjectRelease();
  id v23 = [self currentDevice];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v66 = a1;
    id v25 = [v23 serverFriendlyDescription:v13];

    if (v25)
    {
      uint64_t v58 = a9;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      char v29 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v22;
      sub_10016C0FC(v26, v28, 0xD000000000000011, 0x80000001013F64E0, v29);
      uint64_t v30 = v67;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v31 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      uint64_t v67 = v31;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v34 = v33;
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v30;
      sub_10016C0FC(v32, v34, 0xD000000000000015, 0x80000001013F6500, v35);
      uint64_t v36 = v67;
      swift_bridgeObjectRelease();
      uint64_t v67 = 1;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = v38;
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v36;
      sub_10016C0FC(v37, v39, 0xD000000000000013, 0x80000001013F6520, v40);
      uint64_t v41 = v67;
      swift_bridgeObjectRelease();
      id v42 = sub_100903ACC();
      uint64_t v44 = v43;
      char v45 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v41;
      sub_10016C0FC((uint64_t)v42, v44, 0x6567412D72657355, 0xEA0000000000746ELL, v45);
      swift_bridgeObjectRelease();
      uint64_t v46 = type metadata accessor for UUID();
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v48 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v15, v66, v46);
      uint64_t v49 = &v15[v10[5]];
      uint64_t v50 = v60;
      *(void *)uint64_t v49 = v59;
      *((void *)v49 + 1) = v50;
      uint64_t v51 = &v15[v10[6]];
      uint64_t v52 = v62;
      *(void *)uint64_t v51 = v61;
      *((void *)v51 + 1) = v52;
      char v53 = &v15[v10[7]];
      uint64_t v54 = v64;
      *(void *)char v53 = v63;
      *((void *)v53 + 1) = v54;
      uint64_t v55 = &v15[v10[8]];
      uint64_t v56 = v58;
      *(void *)uint64_t v55 = v65;
      *((void *)v55 + 1) = v56;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_100904B9C(&qword_101651E48, (void (*)(uint64_t))type metadata accessor for NFCTapRequestContent);
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
      sub_10090434C((uint64_t)v15);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for NFCTapRequestContent()
{
  uint64_t result = qword_101651EA8;
  if (!qword_101651EA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1009042E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NFCTapRequestContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10090434C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NFCTapRequestContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1009043A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    Swift::String v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (uint64_t *)((char *)a1 + v17);
    uint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1009044CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100904574(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  uint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100904648(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100904768(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100904800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  void *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1009048E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009048FC);
}

uint64_t sub_1009048FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1009049C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009049D4);
}

uint64_t sub_1009049D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100904A94()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequest()
{
  return &type metadata for NFCTapRequest;
}

unint64_t sub_100904B48()
{
  unint64_t result = qword_101651EF8;
  if (!qword_101651EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651EF8);
  }
  return result;
}

uint64_t sub_100904B9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100904BE4()
{
  unint64_t result = qword_101651F00;
  if (!qword_101651F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F00);
  }
  return result;
}

uint64_t sub_100904C38(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010140C200
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100904D18(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101651F08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100904F74();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10163BD60);
    char v14 = 0;
    sub_100904FC8(&qword_101651F18);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_100037AA0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v9, v10);
  }
  return v7;
}

unint64_t sub_100904F74()
{
  unint64_t result = qword_101651F10;
  if (!qword_101651F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F10);
  }
  return result;
}

uint64_t sub_100904FC8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163BD60);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequest.CodingKeys()
{
  return &type metadata for NFCTapRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NFCTapRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10090510CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequestContent.CodingKeys()
{
  return &type metadata for NFCTapRequestContent.CodingKeys;
}

void *assignWithCopy for NFCTapKeyConnectivityInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NFCTapKeyConnectivityInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NFCTapKeyConnectivityInfo()
{
  return &type metadata for NFCTapKeyConnectivityInfo;
}

unint64_t sub_1009051D8()
{
  unint64_t result = qword_101651F30;
  if (!qword_101651F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F30);
  }
  return result;
}

unint64_t sub_100905230()
{
  unint64_t result = qword_101651F38;
  if (!qword_101651F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F38);
  }
  return result;
}

unint64_t sub_100905288()
{
  unint64_t result = qword_101651F40;
  if (!qword_101651F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F40);
  }
  return result;
}

unint64_t sub_1009052E0()
{
  unint64_t result = qword_101651F48;
  if (!qword_101651F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F48);
  }
  return result;
}

unint64_t sub_100905338()
{
  unint64_t result = qword_101651F50;
  if (!qword_101651F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F50);
  }
  return result;
}

unint64_t sub_100905390()
{
  unint64_t result = qword_101651F58;
  if (!qword_101651F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F58);
  }
  return result;
}

uint64_t sub_1009053E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1009054D4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101651F70);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1009058F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    char v10 = 1;
    sub_1003BBD08((unint64_t *)&qword_101642B08, (void (*)(void))sub_100037AA0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1009056D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646975756162 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6269726373627573 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_1009058F8()
{
  unint64_t result = qword_101651F68;
  if (!qword_101651F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F68);
  }
  return result;
}

unsigned char *_s12searchpartyd13NFCTapRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100905A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapKeyConnectivityInfo.CodingKeys()
{
  return &type metadata for NFCTapKeyConnectivityInfo.CodingKeys;
}

unint64_t sub_100905A54()
{
  unint64_t result = qword_101651F78;
  if (!qword_101651F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F78);
  }
  return result;
}

unint64_t sub_100905AAC()
{
  unint64_t result = qword_101651F80;
  if (!qword_101651F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F80);
  }
  return result;
}

unint64_t sub_100905B04()
{
  unint64_t result = qword_101651F88;
  if (!qword_101651F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101651F88);
  }
  return result;
}

uint64_t sub_100905B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 17;
  uint64_t v5 = &byte_10159FD48;
  while (2)
  {
    unsigned int v7 = *v5++;
    uint64_t v6 = v7;
    unint64_t v8 = 0x80000001013F2D90;
    unint64_t v9 = 0xD000000000000012;
    switch(v7)
    {
      case 1u:
        goto LABEL_30;
      case 2u:
        unint64_t v8 = 0xEB0000000070756FLL;
        if (a1 != 0x72476E6F63616542) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 3u:
        uint64_t v11 = 0x526572616853;
        goto LABEL_14;
      case 4u:
        uint64_t v12 = "ice/spd/fetchDevices";
        goto LABEL_27;
      case 5u:
        unint64_t v9 = 0xD000000000000015;
        uint64_t v12 = "BeaconEstimatedLocation";
        goto LABEL_27;
      case 6u:
        unint64_t v9 = 0xD000000000000017;
        uint64_t v12 = "KeyAlignmentRecord";
        goto LABEL_27;
      case 7u:
        uint64_t v11 = 0x52687361654CLL;
LABEL_14:
        unint64_t v8 = 0xEB0000000064726FLL;
        if ((v11 & 0xFFFFFFFFFFFFLL | 0x6365000000000000) != a1) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 8u:
        unint64_t v8 = 0xEC0000006E6F6974;
        if (a1 != 0x61636F4C65666153) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 9u:
        unint64_t v8 = 0xEE0064726F636552;
        if (a1 != 0x65646F4D74736F4CLL) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 0xAu:
        uint64_t v12 = "OwnedDeviceKeyRecord";
        goto LABEL_27;
      case 0xBu:
        unint64_t v9 = 0xD000000000000014;
        uint64_t v12 = "OwnerSharingCircle";
        goto LABEL_27;
      case 0xCu:
        unint64_t v8 = 0xEE00747375725472;
        if (a1 != 0x65655072656E774FLL) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 0xDu:
        unint64_t v8 = 0xEF74737572547265;
        if (a1 != 0x65507265626D654DLL) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 0xEu:
        uint64_t v12 = "MemberSharingCircle";
LABEL_27:
        unint64_t v8 = (unint64_t)v12 | 0x8000000000000000;
        if (v9 != a1) {
          goto LABEL_32;
        }
        goto LABEL_31;
      case 0xFu:
        unint64_t v9 = 0xD000000000000013;
        unint64_t v8 = 0x800000010140C220;
LABEL_30:
        if (v9 == a1) {
          goto LABEL_31;
        }
        goto LABEL_32;
      case 0x10u:
        unint64_t v8 = 0x80000001013F7E30;
        if (a1 != 0xD000000000000013) {
          goto LABEL_32;
        }
        goto LABEL_31;
      default:
        if (qword_1016370A8 != -1) {
          swift_once();
        }
        uint64_t v10 = qword_10170ECB0;
        unint64_t v8 = *(void *)algn_10170ECB8;
        swift_bridgeObjectRetain();
        if (v10 != a1) {
          goto LABEL_32;
        }
LABEL_31:
        if (v8 == a2)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
LABEL_32:
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v13) {
          return v6;
        }
        if (--v2) {
          continue;
        }
        return 17;
    }
  }
}

uint64_t sub_100905ED0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170F760;
      break;
    case 2:
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170DF88;
      break;
    case 3:
      if (qword_101636878 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170D758;
      break;
    case 4:
      if (qword_1016370E8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170ED10;
      break;
    case 5:
      if (qword_101636B38 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170DF58;
      break;
    case 6:
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170EB70;
      break;
    case 7:
      if (qword_101637620 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170F7B0;
      break;
    case 8:
      if (qword_1016371B8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170EEB8;
      break;
    case 9:
      if (qword_101637130 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170ED90;
      break;
    case 10:
      if (qword_101636870 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170D740;
      break;
    case 11:
      if (qword_1016374B0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170F308;
      break;
    case 12:
      if (qword_101636958 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170DAB8;
      break;
    case 13:
      if (qword_101637160 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170EE20;
      break;
    case 14:
      if (qword_1016370F0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170ED28;
      break;
    case 15:
      if (qword_101636A48 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170DD78;
      break;
    case 16:
      if (qword_1016370C8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170ECE0;
      break;
    default:
      if (qword_1016370B0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = v3;
      uint64_t v5 = qword_10170ECC0;
      break;
  }
  uint64_t v6 = sub_100010324(v3, (uint64_t)v5);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v7(a2, v6, v4);
}

uint64_t sub_100906460(uint64_t a1, uint64_t a2)
{
  v2[36] = a1;
  v2[37] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[41] = v4;
  v2[42] = *(void *)(v4 - 8);
  v2[43] = swift_task_alloc();
  return _swift_task_switch(sub_10090657C, 0, 0);
}

void sub_10090657C()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 328);
  unint64_t v9 = *(_OWORD **)(v0 + 288);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  *(void *)(v0 + 272) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  unint64_t v20 = v14;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 280) = 1;
  uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v23 = v22;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v21, v23, 0xD000000000000013, 0x80000001013F6520, v24);
  unint64_t v25 = v20;
  uint64_t v26 = swift_bridgeObjectRelease();
  uint64_t v27 = sub_100BCABFC(v26);
  uint64_t v29 = v28;
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
  *(void *)(v0 + 352) = v25;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 360) = JSONEncoder.init()();
  *(_OWORD *)(v0 + 16) = *v9;
  long long v31 = v9[4];
  long long v33 = v9[1];
  long long v32 = v9[2];
  *(_OWORD *)(v0 + 64) = v9[3];
  *(_OWORD *)(v0 + 80) = v31;
  *(_OWORD *)(v0 + 32) = v33;
  *(_OWORD *)(v0 + 48) = v32;
  sub_1009076E4();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 368) = v34;
  *(void *)(v0 + 376) = v35;
  sub_1000361E0(v34, v35);
  uint64_t v37 = (void (__cdecl *)())((char *)&dword_10165AB30 + dword_10165AB30);
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_100906A60;
  v37();
}

uint64_t sub_100906A60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 392) = a1;
  *(void *)(v3 + 400) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100906B60, 0, 0);
}

uint64_t sub_100906B60()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  uint64_t v4 = v0[46];
  unint64_t v3 = v0[47];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[38];
  v0[32] = v2;
  v0[33] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[33];
  v0[51] = v0[32];
  v0[52] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[53] = v9;
  v0[54] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB28 + dword_10165AB28);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[55] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100906CE0;
  uint64_t v13 = v0[37];
  return v15(v9, v11, v13);
}

uint64_t sub_100906CE0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 448) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10090727C;
  }
  else
  {
    uint64_t v6 = v4[53];
    unint64_t v7 = v4[54];
    v4[57] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_100906E0C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100906E0C()
{
  char v45 = v0;
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  unint64_t v3 = (unsigned char *)v0[44];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v44 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v44);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v0[51];
  unint64_t v6 = v0[52];
  char v40 = v0;
  uint64_t v8 = v44;
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
LABEL_31:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  uint64_t v41 = v8 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8[32];
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *((void *)v8 + 8);
  int64_t v42 = (unint64_t)(63 - v10) >> 6;
  uint64_t v43 = v8;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v8 = &type metadata for String;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }
    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v42) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)&v41[8 * v24];
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v42) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)&v41[8 * v12];
      if (!v25)
      {
        int64_t v12 = v24 + 2;
        if (v24 + 2 >= v42) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v41[8 * v12];
        if (!v25) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_10:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*((void *)v43 + 6) + v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v19 = (uint64_t *)(*((void *)v43 + 7) + v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v22 + 32) = v17;
    *(void *)(v22 + 40) = v18;
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v23;
    *(void *)(v22 + 64) = v23;
    *(void *)(v22 + 72) = v20;
    *(void *)(v22 + 80) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v26 = v24 + 3;
  if (v26 < v42)
  {
    unint64_t v25 = *(void *)&v41[8 * v26];
    if (!v25)
    {
      while (1)
      {
        int64_t v12 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_30;
        }
        if (v12 >= v42) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v41[8 * v12];
        ++v26;
        if (v25) {
          goto LABEL_25;
        }
      }
    }
    int64_t v12 = v26;
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v28 = v40[46];
  unint64_t v27 = v40[47];
  uint64_t v29 = (_OWORD *)v40[36];
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  *((_OWORD *)v40 + 11) = *v29;
  long long v31 = v29[4];
  long long v33 = v29[1];
  long long v32 = v29[2];
  *((_OWORD *)v40 + 14) = v29[3];
  *((_OWORD *)v40 + 15) = v31;
  *((_OWORD *)v40 + 12) = v33;
  *((_OWORD *)v40 + 13) = v32;
  uint64_t v34 = String.init<A>(describing:)();
  uint64_t v36 = v35;
  *(void *)(v30 + 56) = &type metadata for String;
  *(void *)(v30 + 64) = sub_10000B4CC();
  *(void *)(v30 + 32) = v34;
  *(void *)(v30 + 40) = v36;
  os_log(_:dso:log:_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v28, v27);
  swift_release();
  uint64_t v38 = v40[46];
  uint64_t v37 = v40[47];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v40[1];
  return v39(v43, v38, v37);
}

uint64_t sub_10090727C()
{
  uint64_t v1 = v0[51];
  unint64_t v2 = v0[52];
  sub_10001CFB8(v0[53], v0[54]);
  sub_10001CFB8(v1, v2);
  static os_log_type_t.error.getter();
  uint64_t v3 = (uint64_t)&qword_101637000;
  if (qword_101637308 != -1) {
LABEL_29:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  swift_errorRelease();
  uint64_t v35 = v0;
  uint64_t v4 = v0[44];
  static os_log_type_t.debug.getter();
  if (*(void *)(v3 + 776) != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v36 = v4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(v4 + 64);
  int64_t v37 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_8;
    }
    int64_t v18 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v37) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v36 + 8 * v18);
    ++v3;
    if (!v19)
    {
      uint64_t v3 = v18 + 1;
      if (v18 + 1 >= v37) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v36 + 8 * v3);
      if (!v19)
      {
        uint64_t v3 = v18 + 2;
        if (v18 + 2 >= v37) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v3);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v19 - 1) & v19;
    unint64_t v9 = __clz(__rbit64(v19)) + (v3 << 6);
LABEL_8:
    uint64_t v10 = 16 * v9;
    unint64_t v11 = (uint64_t *)(*(void *)(v4 + 48) + v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    unint64_t v14 = (void *)(*(void *)(v4 + 56) + v10);
    uint64_t v0 = (void *)*v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v16 + 32) = v12;
    *(void *)(v16 + 40) = v13;
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v17;
    *(void *)(v16 + 64) = v17;
    *(void *)(v16 + 72) = v0;
    *(void *)(v16 + 80) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v18 + 3;
  if (v20 < v37)
  {
    unint64_t v19 = *(void *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        uint64_t v3 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_28;
        }
        if (v3 >= v37) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v36 + 8 * v3);
        ++v20;
        if (v19) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v3 = v20;
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v22 = v35[46];
  unint64_t v21 = v35[47];
  unint64_t v23 = (_OWORD *)v35[36];
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_101342130;
  *((_OWORD *)v35 + 11) = *v23;
  long long v25 = v23[4];
  long long v27 = v23[1];
  long long v26 = v23[2];
  *((_OWORD *)v35 + 14) = v23[3];
  *((_OWORD *)v35 + 15) = v25;
  *((_OWORD *)v35 + 12) = v27;
  *((_OWORD *)v35 + 13) = v26;
  uint64_t v28 = String.init<A>(describing:)();
  uint64_t v30 = v29;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_10000B4CC();
  *(void *)(v24 + 32) = v28;
  *(void *)(v24 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v22, v21);
  swift_release();
  uint64_t v32 = v35[46];
  uint64_t v31 = v35[47];
  swift_task_dealloc();
  swift_task_dealloc();
  long long v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35[1];
  return v33(v4, v32, v31);
}

unint64_t sub_1009076E4()
{
  unint64_t result = qword_101651F98;
  if (!qword_101651F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101651F98);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairRequest()
{
  return &type metadata for AirPodsUnpairRequest;
}

uint64_t sub_100907748@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v86 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 advertisement];
  id v10 = [v9 address];

  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_1004353E8(v11, v13, &v87);
  uint64_t v83 = a3;
  unint64_t v84 = (int *)v6;
  int v82 = a2;
  unint64_t v14 = v88;
  uint64_t v85 = v87;
  id v15 = [a1 advertisement];
  id v16 = [v15 address];

  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  id v20 = [a1 advertisement];
  id v21 = [v20 advertisementData];

  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  uint64_t v87 = v17;
  unint64_t v88 = v19;
  sub_1000361E0(v17, v19);
  sub_1000361E0(v22, v24);
  sub_100A42CBC(v22, v24);
  sub_10001CFB8(v22, v24);
  sub_10001CFB8(v22, v24);
  sub_10001CFB8(v17, v19);
  uint64_t v26 = v87;
  unint64_t v25 = v88;
  sub_1000361E0(v87, v88);
  uint64_t v79 = v26;
  unint64_t v80 = v25;
  sub_100434E0C(v26, v25, &v87);
  unint64_t v81 = v14;
  uint64_t v28 = v87;
  uint64_t v27 = v88;
  *((void *)v8 + 2) = v87;
  *((void *)v8 + 3) = v27;
  sub_1001A1790(v28, v27);
  id v29 = [a1 advertisement];
  LOBYTE(v17) = [v29 status];

  v8[32] = v17;
  id v30 = [a1 advertisement];
  id v31 = [v30 reserved];

  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v34 = v33;

  __int16 v35 = sub_10115B26C(v32, v34);
  sub_10001CFB8(v32, v34);
  if ((v35 & 0x100) != 0) {
    char v36 = 0;
  }
  else {
    char v36 = v35;
  }
  v8[33] = v36;
  id v37 = [a1 advertisement];
  id v38 = [v37 reserved];

  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v41 = v40;

  int64_t v42 = v84;
  switch(v41 >> 62)
  {
    case 1uLL:
      sub_10001CFB8(v39, v41);
      LODWORD(v43) = HIDWORD(v39) - v39;
      if (__OFSUB__(HIDWORD(v39), v39)) {
        goto LABEL_22;
      }
      uint64_t v43 = (int)v43;
LABEL_9:
      if (v43 < 2
        || (id v46 = [a1 advertisement],
            unsigned int v47 = [v46 status],
            v46,
            ((v47 >> 4) & 3) - 1 > 2))
      {
LABEL_13:
        char v53 = 0;
        char v54 = 1;
      }
      else
      {
        id v48 = [a1 advertisement];
        id v49 = [v48 reserved];

        uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v52 = v51;

        char v53 = Data.subscript.getter();
        sub_10001CFB8(v50, v52);
        char v54 = 0;
      }
      v8[34] = v53;
      v8[35] = v54;
      id v55 = [a1 advertisement];
      uint64_t v56 = (uint64_t)[v55 rssi];

      uint64_t v57 = v85;
      if (v56 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
        goto LABEL_21;
      }
      if (v56 > 0x7FFFFFFF)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x100908004);
      }
      *((_DWORD *)v8 + 9) = v56;
      id v58 = [a1 advertisement];
      id v59 = [v58 scanDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      id v60 = [a1 advertisement];
      LOBYTE(v58) = [v60 isPosh];

      v8[v42[14]] = (char)v58;
      id v61 = [a1 location];
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = &v8[v42[12]];
        [v61 latitude];
        uint64_t v65 = v64;
        [v62 longitude];
        uint64_t v67 = v66;
        [v62 horizontalAccuracy];
        uint64_t v69 = v68;
        id v70 = [v62 timestamp];
        uint64_t v71 = type metadata accessor for ObservedAdvertisement.Location(0);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1001A1AD8(v28, v27);
        sub_10001CFB8(v79, v80);
        sub_10001CFB8(v57, v81);

        *(void *)uint64_t v63 = v65;
        *((void *)v63 + 1) = v67;
        *((void *)v63 + 2) = v69;
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v63, 0, 1, v71);
      }
      else
      {

        sub_1001A1AD8(v28, v27);
        sub_10001CFB8(v79, v80);
        sub_10001CFB8(v57, v81);
        unint64_t v72 = &v8[v42[12]];
        uint64_t v73 = type metadata accessor for ObservedAdvertisement.Location(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 1, 1, v73);
      }
      *(void *)unint64_t v8 = 0;
      v8[8] = 1;
      v8[9] = v82;
      uint64_t v74 = &v8[v42[13]];
      uint64_t v75 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 1, 1, v75);
      uint64_t v76 = v83;
      sub_10092048C((uint64_t)v8, v83, type metadata accessor for ObservedAdvertisement);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v86 + 56))(v76, 0, 1, v42);
    case 2uLL:
      uint64_t v45 = *(void *)(v39 + 16);
      uint64_t v44 = *(void *)(v39 + 24);
      sub_10001CFB8(v39, v41);
      uint64_t v43 = v44 - v45;
      if (!__OFSUB__(v44, v45)) {
        goto LABEL_9;
      }
      goto LABEL_23;
    case 3uLL:
      sub_10001CFB8(v39, v41);
      goto LABEL_13;
    default:
      sub_10001CFB8(v39, v41);
      uint64_t v43 = BYTE6(v41);
      goto LABEL_9;
  }
}

uint64_t sub_100908014()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E628);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering leech scanner.", v8, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  static Transaction.asyncTask(name:block:)();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  id v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  v10[3] = 0;
  v10[4] = v1;
  swift_retain();
  sub_1000212B0((uint64_t)v4, (uint64_t)&unk_101651FD8, (uint64_t)v10);
  swift_release();
  return sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
}

uint64_t sub_100908218()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_1009082D8, 0, 0);
}

uint64_t sub_1009082D8()
{
  if (**(unsigned char **)(v0 + 160))
  {
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1(0);
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100908464;
      return v4();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100908464(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100908564, 0, 0);
}

uint64_t sub_100908564()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 200);
    return _swift_task_switch(sub_100908714, v2, 0);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E628);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Leech scanner cannot update. Missing BeaconKeyService.", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *os_log_type_t v7 = 0xD000000000000010;
    v7[1] = 0x800000010140C340;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8(0);
  }
}

uint64_t sub_100908714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3[25] + 128);
  if (v4)
  {
    v3[26] = sub_1009FDE84((uint64_t)v4);
    v3[27] = 0;
    uint64_t v4 = sub_1009087AC;
    a2 = 0;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v4, a2, a3);
}

uint64_t sub_1009087AC()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[21];
    uint64_t v3 = v0[22];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    uint64_t v7 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = v0[23];
      sub_1009204F8(v5, v8, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      unsigned int v9 = *(unsigned __int8 *)(v8 + *(int *)(v4 + 28)) - 1;
      uint64_t v10 = v0[23];
      if (v9 < 2) {
        break;
      }
      uint64_t My = type metadata accessor for Feature.FindMy();
      v0[15] = My;
      v0[16] = sub_10091E59C((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v12 = sub_10001D958(v0 + 12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(My - 8) + 104))(v12, v6, My);
      LOBYTE(My) = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
      sub_100920560(v10, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      if (My) {
        goto LABEL_9;
      }
      v5 += v7;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v13 = 0;
        goto LABEL_10;
      }
    }
    sub_100920560(v0[23], (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
LABEL_9:
    swift_bridgeObjectRelease_n();
    uint64_t v13 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
  }
LABEL_10:
  swift_release();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_1009089C4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100908A34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E628);
  sub_100010324(v0, (uint64_t)qword_10170E628);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100908AB8()
{
  *(void *)(v0 + 256) = sub_10000588C(&qword_101639058);
  *(void *)(v0 + 264) = swift_task_alloc();
  return _swift_task_switch(sub_100908B4C, 0, 0);
}

uint64_t sub_100908B4C()
{
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = sub_100010324(v1, (uint64_t)qword_10170E628);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, ">> Update leech scanner state.", v4, 2u);
    swift_slowDealloc();
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100908D48;
    return v7();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100908D48(uint64_t a1)
{
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100908E48, 0, 0);
}

uint64_t sub_100908E48()
{
  uint64_t v1 = *(void *)(v0 + 288);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100908FF4;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Leech scanner cannot update. Missing BeaconKeyService.", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_100908FF4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1009090F4, 0, 0);
}

uint64_t sub_1009090F4()
{
  uint64_t v1 = v0[38];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    uint64_t v2 = v0[38];
    swift_retain();
    return _swift_task_switch(sub_100909658, v2, 0);
  }
  else
  {
    if (qword_101637188 != -1) {
      swift_once();
    }
    sub_100ECF824(0xD000000000000019, 0x800000010140C360, (void *)qword_10170EE68);
    if (v4)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = v3;
      if (v3 < 0) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134217984;
        v0[31] = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      v0[30] = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v11, 0xCu);
      swift_slowDealloc();
    }

    NSString v12 = String._bridgeToObjectiveC()();
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v13 = v12;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.setValue(value:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    swift_release();

    swift_release();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "<< Update leech scanner state.", v16, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100909658()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = sub_10091E59C((unint64_t *)&qword_1016394B0, (void (*)(uint64_t))type metadata accessor for FinderStateObserver);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[39] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100909768;
  uint64_t v4 = v0[38];
  uint64_t v6 = v0[32];
  uint64_t v5 = v0[33];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, v4, v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033DD4, v1, v6);
}

uint64_t sub_100909768()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100909880, 0, 0);
}

uint64_t sub_100909880()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_101639058);
    if (qword_101637188 != -1) {
      swift_once();
    }
    sub_100ECF824(0xD000000000000019, 0x800000010140C360, (void *)qword_10170EE68);
    if (v4)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = v3;
      if (v3 < 0) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134217984;
        v0[31] = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v13 = 134217984;
      v0[30] = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v13, 0xCu);
      swift_slowDealloc();
    }

    NSString v14 = String._bridgeToObjectiveC()();
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v15 = v14;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.setValue(value:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    swift_release();

    swift_release();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "<< Update leech scanner state.", v18, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[40] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100909E4C;
    return sub_100908218();
  }
}

uint64_t sub_100909E4C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10090A500;
  }
  else
  {
    *(unsigned char *)(v4 + 336) = a1 & 1;
    uint64_t v5 = sub_100909F78;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100909F78()
{
  uint64_t v27 = v0;
  char v1 = *(unsigned char *)(v0 + 336);
  sub_100920560(*(void *)(v0 + 264), type metadata accessor for FinderStateInfo);
  uint64_t v2 = *(void *)(v0 + 328);
  if (qword_101637188 != -1) {
    swift_once();
  }
  sub_100ECF824(0xD000000000000019, 0x800000010140C360, (void *)qword_10170EE68);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = v3;
    if (v3 < 0) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_13;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v0 + 248) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
    goto LABEL_10;
  }
  if (v1)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v9))
    {
      uint64_t v5 = 1;
      goto LABEL_13;
    }
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v9, "Enabling leech scanner.", v10, 2u);
    uint64_t v5 = 1;
LABEL_10:
    swift_slowDealloc();
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v5 = 0;
LABEL_14:
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v13 = 134217984;
    *(void *)(v0 + 240) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v13, 0xCu);
    swift_slowDealloc();
  }

  NSString v14 = String._bridgeToObjectiveC()();
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v15 = v14;
  DarwinNotificationHelper.init(notificationName:rateLimit:)();
  dispatch thunk of DarwinNotificationHelper.setValue(value:)();
  if (v2)
  {
    swift_release();

    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136446210;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      *(void *)(v0 + 232) = sub_1008FA0F0(v19, v20, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    swift_release();

    swift_release();
  }
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "<< Update leech scanner state.", v23, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_task_dealloc();
  unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10090A500()
{
  id v13 = v0;
  uint64_t v1 = v0[33];
  swift_release();
  sub_100920560(v1, type metadata accessor for FinderStateInfo);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)char v4 = 136446210;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[29] = sub_1008FA0F0(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "<< Update leech scanner state.", v9, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_task_dealloc();
  os_log_type_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10090A784()
{
  uint64_t v1 = sub_10000588C(&qword_101651FB0);
  v0[16] = v1;
  v0[17] = *(void *)(v1 - 8);
  v0[18] = swift_task_alloc();
  uint64_t v2 = sub_10000588C(&qword_101651FB8);
  v0[19] = v2;
  v0[20] = *(void *)(v2 - 8);
  v0[21] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_101651FC0);
  v0[22] = v3;
  v0[23] = *(void *)(v3 - 8);
  v0[24] = swift_task_alloc();
  return _swift_task_switch(sub_10090A904, 0, 0);
}

uint64_t sub_10090A904()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10090AA40;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10090AA40(uint64_t a1)
{
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090AB40, 0, 0);
}

uint64_t sub_10090AB40()
{
  uint64_t v1 = v0[26];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    v0[27] = sub_100010324(v2, (uint64_t)qword_10170E628);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Key service updates registered to advertisement cache observation storing.", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v9 = v0[18];
    uint64_t v8 = v0[19];
    uint64_t v11 = v0[16];
    uint64_t v10 = v0[17];

    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v11);
    AsyncStream.init(_:bufferingPolicy:_:)();
    AsyncStream.makeAsyncIterator()();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[28] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10090AE6C;
    uint64_t v13 = v0[22];
    return AsyncStream.Iterator.next(isolation:)(v0 + 15, 0, 0, v13);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170E628);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Advertisement cache observation storing cannot register. Missing BeaconKeyService.", v17, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10090AE6C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10090AF68, 0, 0);
}

uint64_t sub_10090AF68()
{
  if (v0[15])
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Key service updated. Updating leech scanner.", v3, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    os_log_type_t v4 = (void *)swift_task_alloc();
    v0[28] = v4;
    *os_log_type_t v4 = v0;
    v4[1] = sub_10090AE6C;
    uint64_t v5 = v0[22];
    return AsyncStream.Iterator.next(isolation:)(v0 + 15, 0, 0, v5);
  }
  else
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10090B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  v4[16] = v5;
  v4[17] = *(void *)(v5 + 64);
  v4[18] = swift_task_alloc();
  sub_10000588C(&qword_101651FE0);
  v4[19] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101651FE8);
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101651FF0);
  v4[23] = v7;
  v4[24] = *(void *)(v7 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_101651FF8);
  v4[26] = v8;
  v4[27] = *(void *)(v8 - 8);
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_10090B35C, 0, 0);
}

uint64_t sub_10090B35C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639370 + dword_101639370);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10090B498;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10090B498(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090B598, 0, 0);
}

uint64_t sub_10090B598()
{
  uint64_t v1 = v0[30];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170E628);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Leech scanner registered for stream.", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[24];
    uint64_t v6 = v0[25];
    uint64_t v9 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v10 = v0[20];
    uint64_t v11 = v0[21];

    v0[31] = sub_10000588C(&qword_10163CE48);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v9, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v10);
    AsyncStream.init(_:bufferingPolicy:_:)();
    AsyncStream.makeAsyncIterator()();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[32] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10090B8DC;
    uint64_t v13 = v0[26];
    uint64_t v14 = v0[19];
    return AsyncStream.Iterator.next(isolation:)(v14, 0, 0, v13);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E628);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Leech scanner cannot register. Missing LeechScanningService.", v18, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_10090B8DC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10090B9D8, 0, 0);
}

uint64_t sub_10090B9D8()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[16];
    swift_release();
    uint64_t v8 = v2 + *(int *)(v1 + 48);
    type metadata accessor for Transaction();
    sub_10092048C(v8, v5, type metadata accessor for DiscoveredObject);
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v6;
    sub_10092048C(v5, v10 + v9, type metadata accessor for DiscoveredObject);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[32] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10090B8DC;
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[19];
    return AsyncStream.Iterator.next(isolation:)(v13, 0, 0, v12);
  }
}

uint64_t sub_10090BC30(uint64_t a1, uint64_t a2)
{
  v2[19] = a1;
  v2[20] = a2;
  type metadata accessor for ObservedAdvertisement(0);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = type metadata accessor for DiscoveredObject(0);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2[30] = v3;
  v2[31] = *(void *)(v3 - 8);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  sub_10000588C(&qword_101657910);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  return _swift_task_switch(sub_10090BE28, 0, 0);
}

uint64_t sub_10090BE28()
{
  uint64_t v1 = (uint64_t *)(v0[20] + *(int *)(v0[26] + 36));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_10090BEE4;
  uint64_t v5 = v0[40];
  return sub_10090E01C(v5, v3, v2);
}

uint64_t sub_10090BEE4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10090BFE0, 0, 0);
}

uint64_t sub_10090BFE0()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  sub_10001D074(*(void *)(v0 + 320), v1, &qword_101657910);
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(void *)(v0 + 336) = v4;
  *(void *)(v0 + 344) = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = *(void *)(v0 + 312);
  if (v5 == 1)
  {
    sub_10001DAB4(v6, &qword_101657910);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 240);
    sub_10001D074(*(void *)(v0 + 320), v8, &qword_101657910);
    int v10 = v7(v8, 1, v9);
    uint64_t v11 = *(void *)(v0 + 304);
    if (v10 == 1)
    {
      sub_10001DAB4(v11, &qword_101657910);
      if (qword_101636E00 != -1) {
        swift_once();
      }
      uint64_t v12 = *(void *)(v0 + 224);
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170E628);
      sub_1009204F8(v13, v12, type metadata accessor for DiscoveredObject);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = *(void *)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 224);
      if (v17)
      {
        uint64_t v86 = *(void *)(v0 + 320);
        uint64_t v20 = *(void *)(v0 + 208);
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        os_log_t loga = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446210;
        uint64_t v88 = (uint64_t)loga;
        os_log_type_t v22 = (uint64_t *)(v19 + *(int *)(v20 + 36));
        uint64_t v24 = *v22;
        uint64_t v23 = v22[1];
        sub_1001A1790(*v22, v23);
        uint64_t v25 = sub_10026383C(v24, v23);
        unint64_t v27 = v26;
        sub_1001A1AD8(v24, v23);
        *(void *)(v0 + 48) = sub_1008FA0F0(v25, v27, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v19, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "\"Leech did not reconcile advertisement %{public}s)!", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v28 = v86;
      }
      else
      {

        sub_100920560(v19, type metadata accessor for DiscoveredObject);
        uint64_t v28 = v18;
      }
      sub_10001DAB4(v28, &qword_101657910);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v59 = *(uint64_t (**)(void))(v0 + 8);
      return v59();
    }
    else
    {
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v33 = *(void *)(v0 + 280);
      uint64_t v34 = *(void *)(v0 + 216);
      uint64_t v35 = *(void *)(v0 + 200);
      uint64_t v36 = *(void *)(v0 + 160);
      sub_10092048C(v11, v33, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1009204F8(v36, v34, type metadata accessor for DiscoveredObject);
      sub_1009204F8(v33, v32, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_10090FF08(v34, v32, 2, v35);
      if (qword_101636E00 != -1) {
        swift_once();
      }
      uint64_t v37 = *(void *)(v0 + 280);
      uint64_t v38 = *(void *)(v0 + 264);
      uint64_t v87 = *(void *)(v0 + 256);
      uint64_t v40 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 200);
      uint64_t v42 = *(void *)(v0 + 176);
      uint64_t v41 = *(void *)(v0 + 184);
      uint64_t v43 = *(void *)(v0 + 168);
      uint64_t v44 = type metadata accessor for Logger();
      *(void *)(v0 + 360) = sub_100010324(v44, (uint64_t)qword_10170E628);
      sub_1009204F8(v39, v40, type metadata accessor for ObservedAdvertisement);
      sub_1009204F8(v39, v41, type metadata accessor for ObservedAdvertisement);
      sub_1009204F8(v39, v42, type metadata accessor for ObservedAdvertisement);
      sub_1009204F8(v39, v43, type metadata accessor for ObservedAdvertisement);
      sub_1009204F8(v37, v38, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1009204F8(v37, v87, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v45, v46))
      {
        os_log_type_t v83 = v46;
        log = v45;
        uint64_t v48 = *(void *)(v0 + 184);
        uint64_t v47 = *(void *)(v0 + 192);
        uint64_t v82 = *(void *)(v0 + 176);
        uint64_t v49 = swift_slowAlloc();
        uint64_t v88 = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 141559811;
        *(void *)(v0 + 64) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 12) = 2081;
        uint64_t v50 = *(void *)(v47 + 16);
        uint64_t v51 = *(void *)(v47 + 24);
        sub_1001A1790(v50, v51);
        uint64_t v52 = sub_10026383C(v50, v51);
        unint64_t v54 = v53;
        sub_1001A1AD8(v50, v51);
        *(void *)(v0 + 72) = sub_1008FA0F0(v52, v54, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v47, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v49 + 22) = 2082;
        sub_1000D07F4(*(unsigned char *)(v48 + 32) & 0xB);
        uint64_t v55 = sub_1000D0108();
        *(void *)(v0 + 80) = sub_1008FA0F0(v55, v56, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v48, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v49 + 32) = 2082;
        if (*(unsigned char *)(v82 + 35))
        {
          unint64_t v57 = 0xE400000000000000;
          uint64_t v58 = 1701736302;
        }
        else
        {
          *(unsigned char *)(v0 + 384) = *(unsigned char *)(*(void *)(v0 + 176) + 34);
          sub_10006145C();
          uint64_t v65 = FixedWidthInteger.data.getter();
          unint64_t v67 = v66;
          uint64_t v58 = Data.hexString.getter();
          unint64_t v57 = v68;
          sub_10001CFB8(v65, v67);
        }
        uint64_t v69 = *(void *)(v0 + 256);
        uint64_t v70 = *(void *)(v0 + 264);
        uint64_t v71 = *(void *)(v0 + 240);
        uint64_t v73 = *(void *)(v0 + 168);
        uint64_t v72 = *(void *)(v0 + 176);
        *(void *)(v0 + 88) = sub_1008FA0F0(v58, v57, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v72, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v49 + 42) = 2082;
        uint64_t v74 = sub_1000D0310(*(unsigned __int8 *)(v73 + 32));
        *(void *)(v0 + 96) = sub_1008FA0F0(v74, v75, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v73, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v49 + 52) = 2080;
        sub_10001CD44((void *)(v70 + *(int *)(v71 + 20)), *(void *)(v70 + *(int *)(v71 + 20) + 24));
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 104) = sub_1008FA0F0(v76, v77, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v70, type metadata accessor for BeaconKeyManager.IndexInformation);
        *(_WORD *)(v49 + 62) = 2160;
        *(void *)(v0 + 112) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 72) = 2081;
        type metadata accessor for UUID();
        sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 120) = sub_1008FA0F0(v78, v79, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100920560(v69, type metadata accessor for BeaconKeyManager.IndexInformation);
        _os_log_impl((void *)&_mh_execute_header, log, v83, "\"Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %s, beacon: %{private,mask.hash}s.", (uint8_t *)v49, 0x52u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v60 = *(void *)(v0 + 256);
        uint64_t v61 = *(void *)(v0 + 264);
        uint64_t v62 = *(void *)(v0 + 184);
        uint64_t v64 = *(void *)(v0 + 168);
        uint64_t v63 = *(void *)(v0 + 176);
        sub_100920560(*(void *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
        sub_100920560(v62, type metadata accessor for ObservedAdvertisement);
        sub_100920560(v63, type metadata accessor for ObservedAdvertisement);
        sub_100920560(v64, type metadata accessor for ObservedAdvertisement);
        sub_100920560(v61, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_100920560(v60, type metadata accessor for BeaconKeyManager.IndexInformation);
      }
      unint64_t v80 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v80;
      *unint64_t v80 = v0;
      v80[1] = sub_10090DA2C;
      uint64_t v81 = *(void *)(v0 + 200);
      return sub_1009102EC(v81);
    }
  }
  else
  {
    sub_10092048C(v6, *(void *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
    id v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v29;
    *id v29 = v0;
    v29[1] = sub_10090CB44;
    uint64_t v30 = *(void *)(v0 + 296);
    return sub_10090F6A0(v30);
  }
}

uint64_t sub_10090CB44(char a1)
{
  *(unsigned char *)(*(void *)v1 + 385) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090CC44, 0, 0);
}

uint64_t sub_10090CC44()
{
  uint64_t v105 = v0;
  if ((*(unsigned char *)(v0 + 385) & 1) == 0)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v23 = *(void *)(v0 + 288);
    uint64_t v24 = *(void *)(v0 + 296);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 160);
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170E628);
    sub_1009204F8(v24, v23, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1009204F8(v26, v25, type metadata accessor for DiscoveredObject);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void *)(v0 + 320);
    uint64_t v32 = *(void *)(v0 + 288);
    uint64_t v33 = *(void *)(v0 + 296);
    uint64_t v34 = *(void *)(v0 + 232);
    if (v30)
    {
      os_log_t logb = *(os_log_t *)(v0 + 320);
      uint64_t v35 = *(void *)(v0 + 208);
      uint64_t v36 = swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 141558531;
      *(void *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2081;
      uint64_t v97 = v33;
      type metadata accessor for UUID();
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 144) = sub_1008FA0F0(v37, v38, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v32, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v36 + 22) = 2082;
      uint64_t v39 = (uint64_t *)(v34 + *(int *)(v35 + 36));
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      sub_1001A1790(*v39, v41);
      uint64_t v42 = sub_10026383C(v40, v41);
      unint64_t v44 = v43;
      sub_1001A1AD8(v40, v41);
      *(void *)(v0 + 128) = sub_1008FA0F0(v42, v44, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v34, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Leech Ignoring unsupported beacon %{private,mask.hash}s advertisement %{public}s!", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100920560(v97, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v22 = (uint64_t)logb;
    }
    else
    {

      sub_100920560(v34, type metadata accessor for DiscoveredObject);
      sub_100920560(v32, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100920560(v33, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v22 = v31;
    }
    goto LABEL_18;
  }
  sub_100920560(*(void *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 240);
  sub_10001D074(*(void *)(v0 + 320), v2, &qword_101657910);
  int v4 = v1(v2, 1, v3);
  uint64_t v5 = *(void *)(v0 + 304);
  if (v4 == 1)
  {
    sub_10001DAB4(v5, &qword_101657910);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E628);
    sub_1009204F8(v7, v6, type metadata accessor for DiscoveredObject);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 320);
    uint64_t v13 = *(void *)(v0 + 224);
    if (v11)
    {
      uint64_t v103 = *(void *)(v0 + 320);
      uint64_t v14 = *(void *)(v0 + 208);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      os_log_t loga = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      uint64_t v104 = (uint64_t)loga;
      os_log_type_t v16 = (uint64_t *)(v13 + *(int *)(v14 + 36));
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      sub_1001A1790(*v16, v17);
      uint64_t v19 = sub_10026383C(v18, v17);
      unint64_t v21 = v20;
      sub_1001A1AD8(v18, v17);
      *(void *)(v0 + 48) = sub_1008FA0F0(v19, v21, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v13, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "\"Leech did not reconcile advertisement %{public}s)!", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v22 = v103;
    }
    else
    {

      sub_100920560(v13, type metadata accessor for DiscoveredObject);
      uint64_t v22 = v12;
    }
LABEL_18:
    sub_10001DAB4(v22, &qword_101657910);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v72 = *(uint64_t (**)(void))(v0 + 8);
    return v72();
  }
  uint64_t v45 = *(void *)(v0 + 272);
  uint64_t v46 = *(void *)(v0 + 280);
  uint64_t v47 = *(void *)(v0 + 216);
  uint64_t v48 = *(void *)(v0 + 200);
  uint64_t v49 = *(void *)(v0 + 160);
  sub_10092048C(v5, v46, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1009204F8(v49, v47, type metadata accessor for DiscoveredObject);
  sub_1009204F8(v46, v45, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10090FF08(v47, v45, 2, v48);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v50 = *(void *)(v0 + 280);
  uint64_t v51 = *(void *)(v0 + 264);
  os_log_t logc = *(os_log_t *)(v0 + 256);
  uint64_t v53 = *(void *)(v0 + 192);
  uint64_t v52 = *(void *)(v0 + 200);
  uint64_t v55 = *(void *)(v0 + 176);
  uint64_t v54 = *(void *)(v0 + 184);
  uint64_t v56 = *(void *)(v0 + 168);
  uint64_t v57 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = sub_100010324(v57, (uint64_t)qword_10170E628);
  sub_1009204F8(v52, v53, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v52, v54, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v52, v55, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v52, v56, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v50, v51, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1009204F8(v50, (uint64_t)logc, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v58, v59))
  {
    os_log_type_t v98 = v59;
    log = v58;
    uint64_t v60 = *(void *)(v0 + 184);
    uint64_t v61 = *(void *)(v0 + 192);
    uint64_t v95 = *(void *)(v0 + 176);
    uint64_t v62 = swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 141559811;
    *(void *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 12) = 2081;
    uint64_t v63 = *(void *)(v61 + 16);
    uint64_t v64 = *(void *)(v61 + 24);
    sub_1001A1790(v63, v64);
    uint64_t v65 = sub_10026383C(v63, v64);
    unint64_t v67 = v66;
    sub_1001A1AD8(v63, v64);
    *(void *)(v0 + 72) = sub_1008FA0F0(v65, v67, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v61, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v62 + 22) = 2082;
    sub_1000D07F4(*(unsigned char *)(v60 + 32) & 0xB);
    uint64_t v68 = sub_1000D0108();
    *(void *)(v0 + 80) = sub_1008FA0F0(v68, v69, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v60, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v62 + 32) = 2082;
    if (*(unsigned char *)(v95 + 35))
    {
      unint64_t v70 = 0xE400000000000000;
      uint64_t v71 = 1701736302;
    }
    else
    {
      *(unsigned char *)(v0 + 384) = *(unsigned char *)(*(void *)(v0 + 176) + 34);
      sub_10006145C();
      uint64_t v79 = FixedWidthInteger.data.getter();
      unint64_t v81 = v80;
      uint64_t v71 = Data.hexString.getter();
      unint64_t v70 = v82;
      sub_10001CFB8(v79, v81);
    }
    uint64_t v83 = *(void *)(v0 + 264);
    uint64_t v96 = *(void *)(v0 + 256);
    uint64_t v84 = *(void *)(v0 + 240);
    uint64_t v86 = *(void *)(v0 + 168);
    uint64_t v85 = *(void *)(v0 + 176);
    *(void *)(v0 + 88) = sub_1008FA0F0(v71, v70, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v85, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v62 + 42) = 2082;
    uint64_t v87 = sub_1000D0310(*(unsigned __int8 *)(v86 + 32));
    *(void *)(v0 + 96) = sub_1008FA0F0(v87, v88, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v86, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v62 + 52) = 2080;
    sub_10001CD44((void *)(v83 + *(int *)(v84 + 20)), *(void *)(v83 + *(int *)(v84 + 20) + 24));
    uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 104) = sub_1008FA0F0(v89, v90, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v83, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v62 + 62) = 2160;
    *(void *)(v0 + 112) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 72) = 2081;
    type metadata accessor for UUID();
    sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 120) = sub_1008FA0F0(v91, v92, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v96, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, log, v98, "\"Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %s, beacon: %{private,mask.hash}s.", (uint8_t *)v62, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v74 = *(void *)(v0 + 256);
    uint64_t v75 = *(void *)(v0 + 264);
    uint64_t v76 = *(void *)(v0 + 184);
    uint64_t v78 = *(void *)(v0 + 168);
    uint64_t v77 = *(void *)(v0 + 176);
    sub_100920560(*(void *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
    sub_100920560(v76, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v77, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v75, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100920560(v74, type metadata accessor for BeaconKeyManager.IndexInformation);
  }
  uint64_t v93 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v93;
  void *v93 = v0;
  v93[1] = sub_10090DA2C;
  uint64_t v94 = *(void *)(v0 + 200);
  return sub_1009102EC(v94);
}

uint64_t sub_10090DA2C()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10090DCCC;
  }
  else {
    uint64_t v2 = sub_10090DB40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10090DB40()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[35];
  sub_100920560(v0[25], type metadata accessor for ObservedAdvertisement);
  sub_100920560(v2, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10001DAB4(v1, &qword_101657910);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10090DCCC()
{
  os_log_type_t v16 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[40];
    uint64_t v12 = v0[25];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[7] = sub_1008FA0F0(v4, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Leech cannot save observedAdvertisement. error: %{public}s.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_100920560(v12, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v6 = v14;
  }
  else
  {
    uint64_t v7 = v0[40];
    uint64_t v8 = v0[35];
    uint64_t v9 = v0[25];

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100920560(v9, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v6 = v7;
  }
  sub_10001DAB4(v6, &qword_101657910);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10090E01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[32] = v5;
  v4[33] = *(void *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = sub_10000588C(&qword_101657910);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_10090E130, v3, 0);
}

uint64_t sub_10090E130()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10090E26C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10090E26C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090E384, v2, 0);
}

uint64_t sub_10090E384()
{
  uint64_t v1 = *(void *)(v0 + 320);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      os_log_type_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 328) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10090E5C8;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E628);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cannot reconcile: missing BeaconKeyService.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 264);

    (*(void (**)(void, uint64_t, uint64_t, void))(v8 + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 256));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  return result;
}

uint64_t sub_10090E5C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090E6E0, v2, 0);
}

uint64_t sub_10090E6E0()
{
  uint64_t v1 = v0[42];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  uint64_t v2 = swift_allocObject();
  v0[43] = v2;
  *(void *)(v2 + 16) = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[44] = v3;
  uint64_t v4 = sub_10000588C(&qword_101652070);
  *uint64_t v3 = v0;
  v3[1] = sub_10090E7E4;
  return unsafeBlocking<A>(_:)(v0 + 25, sub_10091E594, v2, v4);
}

uint64_t sub_10090E7E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 248);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10090E910, v1, 0);
}

uint64_t sub_10090E910()
{
  v0[45] = v0[25];
  uint64_t v1 = v0[40];
  swift_retain();
  return _swift_task_switch(sub_10090E984, v1, 0);
}

uint64_t sub_10090E984(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 320) + 136);
  *(void *)(v3 + 368) = v4;
  if (v4)
  {
    a1 = sub_10090E9B0;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, v4, a3);
}

uint64_t sub_10090E9B0()
{
  uint64_t v1 = v0[46];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  sub_10000588C((uint64_t *)&unk_101665470);
  sub_10091E59C(&qword_101652078, (void (*)(uint64_t))type metadata accessor for BeaconKeyServiceBuilder);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  void v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[48] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10090EB00;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 26);
}

uint64_t sub_10090EB00()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 368);
  return _swift_task_switch(sub_10090EC34, v2, 0);
}

uint64_t sub_10090EC34()
{
  uint64_t v1 = v0[31];
  v0[49] = v0[26];
  return _swift_task_switch(sub_10090EC58, v1, 0);
}

uint64_t sub_10090EC58()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[33];
  if (*(void *)(v1 + 16))
  {
    sub_1009204F8(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v0[38], type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v0[38], 1, 1, v3);
  }
  v0[50] = v5;
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[38];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[33];
  swift_bridgeObjectRelease();
  sub_10001D074(v7, v6, &qword_101657910);
  os_log_type_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v0[51] = v10;
  v0[52] = (v9 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v10(v6, 1, v8) == 1)
  {
    sub_10001DAB4(v0[37], &qword_101657910);
    return _swift_task_switch(sub_10090EE9C, 0, 0);
  }
  else
  {
    sub_10001DAB4(v0[38], &qword_101657910);
    swift_release();
    swift_release();
    uint64_t v11 = v0[37];
    uint64_t v12 = v0[34];
    uint64_t v13 = v0[28];
    swift_release_n();
    sub_10092048C(v11, v12, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10092048C(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    ((void (*)(void, void, uint64_t, void))v0[50])(v0[28], 0, 1, v0[32]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10090EE9C()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = (void *)swift_allocObject();
  if ((v3 & 0x2000000000000000) != 0)
  {
    v0[53] = v4;
    void v4[2] = v1;
    v4[3] = v2;
    v4[4] = v3 & 0xDFFFFFFFFFFFFFFFLL;
    sub_1001A1790(v2, v3);
    swift_retain();
    sub_1001A1790(v2, v3);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[54] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10090F054;
    uint64_t v7 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v8 = sub_10091E5F8;
  }
  else
  {
    v0[55] = v4;
    void v4[2] = v1;
    v4[3] = v2;
    v4[4] = v3;
    sub_1001A1790(v2, v3);
    swift_retain();
    sub_1001A1790(v2, v3);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[56] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10090F1E4;
    uint64_t v7 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v8 = sub_10091E5E8;
  }
  return unsafeBlocking<A>(_:)(v6, v8, v4, v7);
}

uint64_t sub_10090F054()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10090F16C, 0, 0);
}

uint64_t sub_10090F16C()
{
  uint64_t v1 = v0[31];
  sub_1001A1AD8(v0[29], v0[30]);
  swift_release();
  return _swift_task_switch(sub_10090F2FC, v1, 0);
}

uint64_t sub_10090F1E4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1009207B0, 0, 0);
}

uint64_t sub_10090F2FC()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0 + 408))(v1, 1, *(void *)(v0 + 256)) == 1)
  {
    sub_10001DAB4(v1, &qword_101657910);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E628);
    sub_1001A1790(v2, v3);
    sub_1001A1790(v2, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 240);
    if (v7)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      sub_1001A1790(v10, v9);
      uint64_t v12 = sub_10026383C(v10, v9);
      unint64_t v14 = v13;
      sub_1001A1AD8(v10, v9);
      *(void *)(v0 + 216) = sub_1008FA0F0(v12, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A1AD8(v10, v9);
      sub_1001A1AD8(v10, v9);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "\"AdvertisementCacheService did not reconcile advertisement %{public}s!", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {

      swift_release();
      swift_release();
      sub_1001A1AD8(v10, v9);
      sub_1001A1AD8(v10, v9);
      swift_release();
    }
    sub_10001DAB4(v8, &qword_101657910);
    uint64_t v18 = 1;
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 304), &qword_101657910);
    swift_release();
    uint64_t v15 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v17 = *(void *)(v0 + 224);
    swift_release();
    swift_release();
    sub_10092048C(v15, v16, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10092048C(v16, v17, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v18 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 400))(*(void *)(v0 + 224), v18, 1, *(void *)(v0 + 256));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_10090F6A0(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_10090F760, v1, 0);
}

uint64_t sub_10090F760()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10090F8B0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10090F8B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10090F9C8, v2, 0);
}

uint64_t sub_10090F9C8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    return _swift_task_switch(sub_10090FB34, v2, 0);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E628);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to get key service.", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    BOOL v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7(0);
  }
}

uint64_t sub_10090FB34(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[23] + 128);
  if (v4)
  {
    unsigned char v3[24] = sub_1009FEF74(v3[17], v4);
    v3[25] = 0;
    uint64_t v4 = v3[18];
    a1 = sub_10090FBD0;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, v4, a3);
}

uint64_t sub_10090FBD0()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v3(v2 != 0);
}

uint64_t sub_10090FC50()
{
  uint64_t v18 = v0;
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[20];
  uint64_t v9 = v0[21];
  uint64_t v11 = v0[19];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to determine beacon info %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_errorRelease();

  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_10090FF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v15 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = 1;
  *(unsigned char *)(a4 + 9) = a3;
  uint64_t v17 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v18 = (uint64_t *)(a1 + v17[9]);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v38 = v19;
  *(void *)(a4 + 16) = v20;
  *(void *)(a4 + 24) = v19;
  *(unsigned char *)(a4 + 32) = *(unsigned char *)(a1 + v17[11]);
  *(unsigned char *)(a4 + 33) = *(unsigned char *)(a1 + v17[12]);
  uint64_t v21 = (char *)(a1 + v17[13]);
  char v22 = *v21;
  LOBYTE(v21) = v21[1];
  *(unsigned char *)(a4 + 34) = v22;
  *(unsigned char *)(a4 + 35) = (_BYTE)v21;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)(a1 + v17[15]);
  uint64_t v23 = a1 + v17[7];
  uint64_t v24 = (int *)type metadata accessor for ObservedAdvertisement(0);
  uint64_t v25 = a4 + v24[11];
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v23, v26);
  *(unsigned char *)(a4 + v24[14]) = 0;
  uint64_t v27 = a4 + v24[12];
  uint64_t v28 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  sub_1009204F8(a2, (uint64_t)v14, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = (uint64_t)v39;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v39, v14, v29);
  uint64_t v31 = &v14[*(int *)(v12 + 28)];
  uint64_t v32 = *((void *)v31 + 3);
  uint64_t v33 = *((void *)v31 + 4);
  sub_10001CD44(v31, v32);
  sub_1001A1790(v20, v38);
  char v34 = sub_100EB7B8C(v32, v33);
  uint64_t v35 = v41;
  *(unsigned char *)(v30 + *(int *)(v41 + 20)) = v34;
  sub_10001CD44(v31, *((void *)v31 + 3));
  dispatch thunk of RawRepresentable.rawValue.getter();
  sub_100920560((uint64_t)v14, type metadata accessor for BeaconKeyManager.IndexInformation);
  *(void *)(v30 + *(int *)(v35 + 24)) = v43;
  uint64_t v36 = v40;
  sub_10092048C(v30, v40, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100920560(a2, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100920560(a1, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v36, 0, 1, v35);
  return sub_10001D608(v36, a4 + v24[13], &qword_10164E760);
}

uint64_t sub_1009102EC(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  unsigned char v2[24] = v5;
  v2[25] = *(void *)(v5 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v2[30] = v6;
  v2[31] = *(void *)(v6 - 8);
  v2[32] = swift_task_alloc();
  return _swift_task_switch(sub_1009104E8, v1, 0);
}

uint64_t sub_1009104E8()
{
  ContinuousClock.init()();
  ContinuousClock.now.getter();
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10091065C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10091065C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100910774, v2, 0);
}

uint64_t sub_100910774()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[34])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[35] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1009109B4;
    uint64_t v3 = v0[16];
    return sub_101104F18(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    sub_100010324(v0[21], (uint64_t)qword_10170E628);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[25];
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v11 = v0[31];
    uint64_t v10 = v0[32];
    uint64_t v12 = v0[30];
    (*(void (**)(void, void))(v8 + 8))(v0[29], v0[24]);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1009109B4()
{
  uint64_t v2 = (void *)*v1;
  v2[36] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    return _swift_task_switch(sub_100911210, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[37] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100910B24;
    uint64_t v5 = v2[16];
    return sub_1009141EC(v5);
  }
}

uint64_t sub_100910B24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_100910C34, v1, 0);
}

uint64_t sub_100910C34()
{
  uint64_t v42 = v0;
  ContinuousClock.now.getter();
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];
  uint64_t v8 = v0[22];
  uint64_t v7 = v0[23];
  uint64_t v9 = v0[21];
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170E628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11(v3, v2, v5);
  v11(v4, v1, v5);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = v0[26];
  uint64_t v15 = v0[27];
  uint64_t v18 = v0[24];
  uint64_t v17 = v0[25];
  uint64_t v20 = v0[22];
  uint64_t v19 = v0[23];
  uint64_t v21 = v0[21];
  if (v14)
  {
    os_log_type_t type = v13;
    log = v12;
    uint64_t v23 = v0[19];
    uint64_t v22 = v0[20];
    uint64_t v36 = v0[18];
    uint64_t v40 = v0[23];
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    buf = v24;
    *(_DWORD *)uint64_t v24 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_10091E59C(&qword_101653DE0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v35 = v16;
    uint64_t v25 = static Duration.description<A>(_:_:units:)();
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v36);
    v0[15] = sub_1008FA0F0(v25, v27, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(void, void))(v17 + 8);
    uint64_t v29 = v17 + 8;
    uint64_t v28 = v30;
    v30(v15, v18);
    v30(v35, v18);
    _os_log_impl((void *)&_mh_execute_header, log, type, "insert(observedAdvertisement:): %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v40, v21);
  }
  else
  {
    uint64_t v31 = *(void (**)(void, void))(v17 + 8);
    uint64_t v29 = v17 + 8;
    uint64_t v28 = v31;
    v31(v0[27], v0[24]);
    v31(v16, v18);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  v0[38] = v29;
  v0[39] = v28;
  uint64_t v32 = (void *)swift_task_alloc();
  v0[40] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_100910FDC;
  uint64_t v33 = v0[17];
  v32[25] = v33;
  return _swift_task_switch(sub_100919BD8, v33, 0);
}

uint64_t sub_100910FDC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_1009110EC, v1, 0);
}

uint64_t sub_1009110EC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[24];
  swift_release();
  v1(v2, v3);
  uint64_t v5 = v0[31];
  uint64_t v4 = v0[32];
  uint64_t v6 = v0[30];
  ((void (*)(void, void))v0[39])(v0[29], v0[24]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100911210()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[24];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100911318(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BeaconStatus(0);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = *(void *)(v5 + 64);
  v2[23] = swift_task_alloc();
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  v2[26] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v2[27] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MACAddress();
  v2[28] = v6;
  v2[29] = *(void *)(v6 - 8);
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_100911530, v1, 0);
}

uint64_t sub_100911530()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 248) = v2;
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v0 + 256) = v3;
  if ((v3 & 0x2000000000000000) != 0)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E628);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Not a wild advertisement - ignoring wild mode association record update.", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    sub_1001A1790(v2, v3);
    uint64_t v4 = qword_1016375E8;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v12 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1009117D0;
      return v12();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1009117D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1009118E8, v2, 0);
}

uint64_t sub_1009118E8()
{
  uint64_t v20 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[34])
  {
    uint64_t v3 = v0[31];
    unint64_t v2 = v0[32];
    uint64_t v4 = v0[28];
    uint64_t v5 = v0[29];
    uint64_t v6 = v0[27];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1000361E0(v3, v2);
    uint64_t v7 = static MACAddress.length.getter();
    sub_100435A9C(v7, v3, v2, &v19);
    MACAddress.init(data:type:)();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(void, void, void))(v0[29] + 32))(v0[30], v0[27], v0[28]);
      os_log_type_t v9 = (void *)swift_task_alloc();
      v0[35] = v9;
      *os_log_type_t v9 = v0;
      v9[1] = sub_100911B60;
      uint64_t v10 = v0[30];
      return sub_100E60074(v10);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170E628);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = v0[31];
    uint64_t v15 = v0[32];
    if (v14)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No BeaconStoreActor available!", v17, 2u);
      swift_slowDealloc();
    }
    sub_1001A1AD8(v16, v15);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  return result;
}

uint64_t sub_100911B60(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240);
  uint64_t v3 = *(void *)(*(void *)v1 + 232);
  uint64_t v4 = *(void *)(*(void *)v1 + 224);
  uint64_t v5 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_100911CD4, v5, 0);
}

uint64_t sub_100911CD4()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 296) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(int **)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = *(unsigned char **)(v0 + 120);
    uint64_t v7 = *(int *)(type metadata accessor for ObservedAdvertisement(0) + 44);
    *(_DWORD *)(v0 + 352) = v7;
    int v8 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 356) = v8;
    *(void *)(v0 + 304) = *(void *)(v3 + 72);
    *(void *)(v0 + 312) = 0;
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = v1 + ((v8 + 32) & ~(unint64_t)v8);
    BOOL v14 = &v6[v7];
    sub_1009204F8(v13, v9, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v9, v12);
    sub_100920560(v9, type metadata accessor for WildModeAssociationRecord);
    char v15 = v6[32];
    uint64_t v16 = v10 + v4[6];
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v14, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10, v11, v12);
    *(unsigned char *)(v10 + v4[5]) = v15;
    *(_OWORD *)(v10 + v4[7]) = xmmword_1013540A0;
    *(unsigned char *)(v10 + v4[8]) = 1;
    *(void *)(v10 + v4[9]) = 0;
    *(unsigned char *)(v0 + 360) = v6[9];
    *(unsigned char *)(v0 + 361) = v6[34];
    *(unsigned char *)(v0 + 362) = v6[35];
    uint64_t v18 = *(void *)(v0 + 272);
    return _swift_task_switch(sub_100911F50, v18, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1001A1AD8(*(void *)(v0 + 248), *(void *)(v0 + 256));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_100911F50()
{
  char v1 = *(unsigned char *)(v0 + 362);
  __int16 v2 = *(_WORD *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  *(void *)(v0 + 320) = *(void *)(v3 + 136);
  sub_1009204F8(v4, v5, type metadata accessor for BeaconStatus);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 + v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 328) = v10;
  *(void *)(v10 + 16) = v3;
  sub_10092048C(v5, v10 + v8, type metadata accessor for BeaconStatus);
  uint64_t v11 = v10 + v9;
  *(_WORD *)uint64_t v11 = v2;
  *(unsigned char *)(v11 + 2) = v1;
  swift_retain();
  return _swift_task_switch(sub_100912068, 0, 0);
}

uint64_t sub_100912068()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v2;
  v3[3] = sub_1009204F4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100912170;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7348, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100912170()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 272);
  return _swift_task_switch(sub_1009122C0, v2, 0);
}

uint64_t sub_1009122C0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100920560(*(void *)(v0 + 192), type metadata accessor for BeaconStatus);
  return _swift_task_switch(sub_100912340, v1, 0);
}

uint64_t sub_100912340()
{
  uint64_t v1 = *(void *)(v0 + 312) + 1;
  if (v1 == *(void *)(v0 + 296))
  {
    swift_bridgeObjectRelease();
    sub_1001A1AD8(*(void *)(v0 + 248), *(void *)(v0 + 256));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 312) = v1;
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(int **)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(unsigned char **)(v0 + 120);
    uint64_t v11 = &v10[*(int *)(v0 + 352)];
    sub_1009204F8(*(void *)(v0 + 288)+ ((*(unsigned __int8 *)(v0 + 356) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 356))+ *(void *)(v0 + 304) * v1, v4, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v4, v8);
    sub_100920560(v4, type metadata accessor for WildModeAssociationRecord);
    char v12 = v10[32];
    uint64_t v13 = v5 + v7[6];
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v11, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v5, v6, v8);
    *(unsigned char *)(v5 + v7[5]) = v12;
    *(_OWORD *)(v5 + v7[7]) = xmmword_1013540A0;
    *(unsigned char *)(v5 + v7[8]) = 1;
    *(void *)(v5 + v7[9]) = 0;
    *(unsigned char *)(v0 + 360) = v10[9];
    *(unsigned char *)(v0 + 361) = v10[34];
    *(unsigned char *)(v0 + 362) = v10[35];
    uint64_t v15 = *(void *)(v0 + 272);
    return _swift_task_switch(sub_100911F50, v15, 0);
  }
}

uint64_t sub_1009125A8(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for BeaconStatus(0);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = *(void *)(v4 + 64);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[22] = v5;
  v2[23] = *(void *)(v5 - 8);
  unsigned char v2[24] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v2[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[26] = v6;
  v2[27] = *(void *)(v6 - 8);
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_100912768, v1, 0);
}

uint64_t sub_100912768()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0);
  *(void *)(v0 + 232) = v5;
  sub_10001D074(v4 + *(int *)(v5 + 52), v3, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 200), &qword_10164E760);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E628);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring status update for advertisement without beaconInformation.", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    sub_10092048C(*(void *)(v0 + 200), *(void *)(v0 + 224), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v12 = qword_1016375E8;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v14 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_100912A60;
      return v14();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100912A60(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100912B78, v2, 0);
}

uint64_t sub_100912B78()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 176);
    os_log_type_t v8 = *(int **)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v10(v4, v2, v7);
    uint64_t v24 = *(unsigned __int8 *)(v2 + *(int *)(v3 + 20));
    uint64_t v25 = *(void *)(v2 + *(int *)(v3 + 24));
    LOBYTE(v3) = (*(void *)(v9 + 24) & 0x2000000000000000) == 0;
    v10(v6, v4, v7);
    LOBYTE(v7) = *(unsigned char *)(v9 + 32);
    uint64_t v11 = v9 + *(int *)(v23 + 44);
    uint64_t v12 = v6 + v8[6];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v11, v13);
    *(unsigned char *)(v6 + v8[5]) = v7;
    uint64_t v14 = (void *)(v6 + v8[7]);
    *uint64_t v14 = v24;
    v14[1] = v25;
    *(unsigned char *)(v6 + v8[8]) = v3;
    *(void *)(v6 + v8[9]) = 0;
    *(unsigned char *)(v0 + 288) = *(unsigned char *)(v9 + 9);
    *(unsigned char *)(v0 + 289) = *(unsigned char *)(v9 + 34);
    *(unsigned char *)(v0 + 290) = *(unsigned char *)(v9 + 35);
    uint64_t v15 = *(void *)(v0 + 248);
    return _swift_task_switch(sub_100912E54, v15, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E628);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No BeaconStoreActor available!", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 224);

    sub_100920560(v20, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

uint64_t sub_100912E54()
{
  char v1 = *(unsigned char *)(v0 + 290);
  __int16 v2 = *(_WORD *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  *(void *)(v0 + 256) = *(void *)(v3 + 136);
  sub_1009204F8(v4, v5, type metadata accessor for BeaconStatus);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 + v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 264) = v10;
  *(void *)(v10 + 16) = v3;
  sub_10092048C(v5, v10 + v8, type metadata accessor for BeaconStatus);
  uint64_t v11 = v10 + v9;
  *(_WORD *)uint64_t v11 = v2;
  *(unsigned char *)(v11 + 2) = v1;
  swift_retain();
  return _swift_task_switch(sub_100912F6C, 0, 0);
}

uint64_t sub_100912F6C()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  v3[2] = v2;
  v3[3] = sub_1009204F4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100913074;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D74C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100913074()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 248);
  return _swift_task_switch(sub_1009131C4, v2, 0);
}

uint64_t sub_1009131C4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100920560(*(void *)(v0 + 168), type metadata accessor for BeaconStatus);
  return _swift_task_switch(sub_100913244, v1, 0);
}

uint64_t sub_100913244()
{
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[22];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100920560(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10091331C(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for KeyGenerationBeaconInfo();
  v2[30] = v3;
  v2[31] = *(void *)(v3 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[33] = v4;
  v2[34] = *(void *)(v4 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  return _swift_task_switch(sub_100913448, v1, 0);
}

uint64_t sub_100913448()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100913584;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100913584(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091369C, v2, 0);
}

uint64_t sub_10091369C()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[38];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[38];
    return _swift_task_switch(sub_10091390C, v2, 0);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E628);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      v0[20] = sub_1008FA0F0(0xD000000000000025, 0x800000010140C3D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Missing BeaconKeyService.", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000010;
    v7[1] = 0x800000010140C340;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8(0);
  }
}

uint64_t sub_10091390C(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[38] + 128);
  if (v4)
  {
    v3[39] = sub_1009FEF74(v3[28], v4);
    v3[40] = 0;
    uint64_t v4 = v3[29];
    a1 = sub_1009139A8;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, v4, a3);
}

uint64_t sub_1009139A8()
{
  uint64_t v46 = v0;
  unint64_t v1 = v0[39];
  *(void *)unint64_t v44 = *(void *)(v1 + 16);
  if (*(void *)v44)
  {
    if (qword_101636E00 != -1) {
LABEL_24:
    }
      swift_once();
    uint64_t v2 = v0[36];
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[34];
    uint64_t v5 = v0[28];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E628);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[36];
    uint64_t v12 = v0[33];
    uint64_t v11 = v0[34];
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315907;
      v0[21] = sub_1008FA0F0(0xD000000000000025, 0x800000010140C3D0, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2048;
      v0[22] = *(void *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2160;
      v0[23] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 32) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[24] = sub_1008FA0F0(v14, v15, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Found [%ld] beacon infos  for %{private,mask.hash}s", (uint8_t *)v13, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }

    uint64_t v31 = v0[30];
    uint64_t v30 = v0[31];
    unint64_t v1 = v0[39] + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    uint64_t v32 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    swift_bridgeObjectRetain();
    uint64_t v33 = 0;
    while (1)
    {
      uint64_t v34 = v33 + 1;
      if (__OFADD__(v33, 1))
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v35 = v0[32];
      sub_1009204F8(v1 + *(void *)(v30 + 72) * v33, v35, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      uint64_t v36 = v0[32];
      if (*(unsigned __int8 *)(v35 + *(int *)(v31 + 28)) - 1 < 2) {
        break;
      }
      uint64_t My = type metadata accessor for Feature.FindMy();
      v0[15] = My;
      v0[16] = sub_10091E59C((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v38 = sub_10001D958(v0 + 12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(My - 8) + 104))(v38, v32, My);
      char v39 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
      sub_100920560(v36, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
      if ((v39 & 1) == 0)
      {
        ++v33;
        if (v34 != *(void *)v44) {
          continue;
        }
      }
      goto LABEL_17;
    }
    sub_100920560(v0[32], (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    char v39 = 1;
LABEL_17:
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v41 = v39 & 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v16 = v0[28];
    uint64_t v18 = v0[34];
    uint64_t v17 = v0[35];
    uint64_t v19 = v0[33];
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E628);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16, v19);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v25 = v0[34];
    uint64_t v24 = v0[35];
    uint64_t v26 = v0[33];
    if (v23)
    {
      uint64_t v27 = swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315651;
      v0[25] = sub_1008FA0F0(0xD000000000000025, 0x800000010140C3D0, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2160;
      v0[26] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[27] = sub_1008FA0F0(v28, v29, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Missing beacon info for %{private,mask.hash}s!", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v25 + 8))(v0[35], v0[33]);
    }

    sub_1001DF300();
    swift_allocError();
    *uint64_t v42 = 4;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v41 = 0;
  }
  return v40(v41);
}

uint64_t sub_100914160()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1009141EC(uint64_t a1)
{
  v2[54] = a1;
  v2[55] = v1;
  uint64_t v3 = type metadata accessor for ObservedAdvertisement(0);
  v2[56] = v3;
  v2[57] = *(void *)(v3 - 8);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[63] = v4;
  v2[64] = *(void *)(v4 - 8);
  v2[65] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[66] = v5;
  v2[67] = *(void *)(v5 - 8);
  v2[68] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v2[69] = v6;
  v2[70] = *(void *)(v6 - 8);
  v2[71] = swift_task_alloc();
  v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v2[80] = type metadata accessor for BeaconIdentifier();
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v2[83] = v7;
  v2[84] = *(void *)(v7 - 8);
  v2[85] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v2[86] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[87] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[88] = v9;
  v2[89] = *(void *)(v9 + 64);
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  v2[92] = swift_task_alloc();
  v2[93] = swift_task_alloc();
  return _swift_task_switch(sub_1009145D8, v1, 0);
}

uint64_t sub_1009145D8()
{
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  sub_10001D074(*(void *)(v0 + 432) + *(int *)(*(void *)(v0 + 448) + 52), v3, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 688), &qword_10164E760);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    sub_10092048C(*(void *)(v0 + 688), *(void *)(v0 + 744), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v6 = qword_1016375E8;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v8 = (uint64_t (*)(void))((char *)&dword_101639138 + dword_101639138);
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 752) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_10091493C;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10091493C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(void *)(*(void *)v1 + 760) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100914A54, v2, 0);
}

uint64_t sub_100914A54()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[95])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[96] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100914D74;
    uint64_t v3 = v0[93];
    return sub_10091331C(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    sub_100010324(v0[66], (uint64_t)qword_10170E628);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[93];
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v9, 2u);
      swift_slowDealloc();
    }

    sub_100920560(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100914D74(char a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 440);
  if (v1)
  {
    swift_errorRelease();
    BOOL v7 = sub_1009180F0;
  }
  else
  {
    *(unsigned char *)(v5 + 921) = a1 & 1;
    BOOL v7 = sub_100914EBC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100914EBC()
{
  uint64_t v96 = v0;
  *(unsigned char *)(v0 + 922) = *(unsigned char *)(v0 + 921);
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 440);
  uid_t v5 = getuid();
  sub_100DC5FC0(v5);
  uint64_t v6 = v2 + *(int *)(v3 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v0 + 776) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, v1, v7);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(void *)(v0 + 784) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  uint64_t v9 = (uint64_t *)(v4 + v8);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 656);
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1007245E4(v11);
    uint64_t v13 = *(void *)(v0 + 632);
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 456);
    if (v16)
    {
      sub_1009204F8(*(void *)(v10 + 56) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 632), type metadata accessor for ObservedAdvertisement);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(v13, 0, 1, v14);
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(*(void *)(v0 + 632), 1, 1, v14);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 456) + 56);
    v17(*(void *)(v0 + 632), 1, 1, *(void *)(v0 + 448));
  }
  *(void *)(v0 + 792) = v17;
  uint64_t v18 = *(void *)(v0 + 624);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v20 = *(void *)(v0 + 456);
  sub_10001D074(*(void *)(v0 + 632), v18, &qword_10163EB60);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  *(void *)(v0 + 800) = v21;
  *(void *)(v0 + 808) = (v20 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  LODWORD(v19) = v21(v18, 1, v19);
  sub_10001DAB4(v18, &qword_10163EB60);
  if (v19 == 1)
  {
    ContinuousClock.now.getter();
    os_log_type_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 816) = v22;
    void *v22 = v0;
    v22[1] = sub_100915DF8;
    uint64_t v23 = *(void *)(v0 + 656);
    uint64_t v24 = *(void *)(v0 + 616);
    return sub_1011048AC(v24, v23);
  }
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (qword_101636E00 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "insert(observedAdvertisement:) Using cached lastAdvertisement", v29, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v0 + 922) == 1)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 736);
    sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
    sub_1009204F8(v30, v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 736);
      uint64_t v35 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 424) = sub_1008FA0F0(v36, v37, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v34, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100920560(*(void *)(v0 + 736), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v46 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_100916EF8;
    uint64_t v47 = *(void *)(v0 + 632);
    uint64_t v48 = *(void *)(v0 + 432);
    return sub_10091A334(v47, v48);
  }
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v38 = *(void *)(v0 + 744);
  uint64_t v39 = *(void *)(v0 + 728);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v38, v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = *(void *)(v0 + 728);
    uint64_t v43 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 141558275;
    *(void *)(v0 + 400) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2081;
    sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 408) = sub_1008FA0F0(v44, v45, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v42, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 728), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v49 = *(void *)(*(void *)(v0 + 440) + *(void *)(v0 + 784));
  if (!*(void *)(v49 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 792))(*(void *)(v0 + 608), 1, 1, *(void *)(v0 + 448));
LABEL_35:
    uint64_t v57 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v58 = *(void *)(v0 + 656);
    uint64_t v59 = *(void *)(v0 + 648);
    uint64_t v60 = *(void *)(v0 + 600);
    uint64_t v61 = *(void *)(v0 + 448);
    uint64_t v62 = *(void *)(v0 + 432);
    sub_10001DAB4(*(void *)(v0 + 608), &qword_10163EB60);
    sub_1009204F8(v58, v59, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v62, v60, type metadata accessor for ObservedAdvertisement);
    v57(v60, 0, 1, v61);
    swift_beginAccess();
    sub_10015DD7C(v60, v59);
    swift_endAccess();
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v63;
    void *v63 = v0;
    uint64_t v64 = sub_100917248;
LABEL_36:
    v63[1] = v64;
    uint64_t v65 = *(void *)(v0 + 432);
    return sub_10091AEDC(v65);
  }
  uint64_t v50 = *(void *)(v0 + 656);
  swift_bridgeObjectRetain();
  unint64_t v51 = sub_1007245E4(v50);
  if (v52)
  {
    sub_1009204F8(*(void *)(v49 + 56) + *(void *)(*(void *)(v0 + 456) + 72) * v51, *(void *)(v0 + 608), type metadata accessor for ObservedAdvertisement);
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = 1;
  }
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
  uint64_t v55 = *(void *)(v0 + 608);
  uint64_t v56 = *(void *)(v0 + 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 792))(v55, v53, 1, v56);
  swift_bridgeObjectRelease();
  if (v54(v55, 1, v56) == 1) {
    goto LABEL_35;
  }
  sub_10092048C(*(void *)(v0 + 608), *(void *)(v0 + 496), type metadata accessor for ObservedAdvertisement);
  type metadata accessor for Date();
  sub_10091E59C((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v87 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v88 = *(void *)(v0 + 648);
    uint64_t v89 = *(void *)(v0 + 600);
    uint64_t v90 = *(void *)(v0 + 448);
    uint64_t v91 = *(void *)(v0 + 432);
    sub_1009204F8(*(void *)(v0 + 656), v88, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v91, v89, type metadata accessor for ObservedAdvertisement);
    v87(v89, 0, 1, v90);
    swift_beginAccess();
    sub_10015DD7C(v89, v88);
    swift_endAccess();
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v63;
    void *v63 = v0;
    uint64_t v64 = sub_100917030;
    goto LABEL_36;
  }
  uint64_t v93 = (long long *)(v0 + 176);
  if (*((void *)p_ivar_base_size + 448) != -1) {
    swift_once();
  }
  uint64_t v66 = *(void *)(v0 + 488);
  uint64_t v67 = *(void *)(v0 + 496);
  uint64_t v69 = *(void *)(v0 + 472);
  uint64_t v68 = *(void *)(v0 + 480);
  uint64_t v70 = *(void *)(v0 + 464);
  uint64_t v71 = *(void *)(v0 + 432);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v71, v66, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v67, v68, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v71, v69, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v67, v70, type metadata accessor for ObservedAdvertisement);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  BOOL v74 = os_log_type_enabled(v72, v73);
  uint64_t v75 = *(void *)(v0 + 488);
  uint64_t v76 = *(void *)(v0 + 496);
  uint64_t v77 = *(void *)(v0 + 472);
  uint64_t v78 = *(void *)(v0 + 480);
  uint64_t v79 = *(void *)(v0 + 464);
  if (v74)
  {
    uint64_t v80 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v80 = 136315906;
    uint64_t v81 = sub_1002016B0();
    *(void *)(v0 + 368) = sub_1008FA0F0(v81, v82, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v75, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v80 + 12) = 2080;
    uint64_t v83 = sub_1002016B0();
    *(void *)(v0 + 352) = sub_1008FA0F0(v83, v84, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v80 + 22) = 2048;
    uint64_t v85 = Date.epoch.getter();
    sub_100920560(v77, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 384) = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v80 + 32) = 2048;
    uint64_t v86 = Date.epoch.getter();
    sub_100920560(v79, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 392) = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v80, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 464), type metadata accessor for ObservedAdvertisement);
    sub_100920560(v77, type metadata accessor for ObservedAdvertisement);

    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v75, type metadata accessor for ObservedAdvertisement);
  }
  sub_100920560(v76, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v93, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0(v93, v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v94 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    unint64_t v92 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v92;
    *unint64_t v92 = v0;
    v92[1] = sub_100917444;
    return v94();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100915DF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 824) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 440);
  if (v0) {
    uint64_t v4 = sub_100919028;
  }
  else {
    uint64_t v4 = sub_100915F24;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100915F24()
{
  uint64_t v107 = v0;
  uint64_t v1 = *(void *)(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 616);
  sub_10001DAB4(v1, &qword_10163EB60);
  sub_10001D608(v2, v1, &qword_10163EB60);
  ContinuousClock.now.getter();
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 568);
  uint64_t v7 = *(void *)(v0 + 560);
  uint64_t v8 = *(void *)(v0 + 552);
  uint64_t v9 = *(void *)(v0 + 544);
  uint64_t v10 = *(void *)(v0 + 536);
  uint64_t v11 = *(void *)(v0 + 528);
  uint64_t v12 = sub_100010324(v11, (uint64_t)qword_10170E628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13(v5, v3, v8);
  v13(v6, v4, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v14, type);
  uint64_t v16 = *(void *)(v0 + 592);
  uint64_t v103 = *(void *)(v0 + 584);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 560);
  uint64_t v20 = *(void *)(v0 + 552);
  uint64_t v21 = *(void *)(v0 + 544);
  uint64_t v22 = *(void *)(v0 + 536);
  uint64_t v23 = *(void *)(v0 + 528);
  if (v15)
  {
    *(void *)unint64_t v100 = *(void *)(v0 + 528);
    os_log_t v101 = *(os_log_t *)(v0 + 544);
    uint64_t v24 = *(void *)(v0 + 520);
    uint64_t v25 = *(void *)(v0 + 512);
    uint64_t v97 = *(void *)(v0 + 504);
    log = v14;
    uint64_t v96 = *(void *)(v0 + 576);
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    buf = v26;
    *(_DWORD *)uint64_t v26 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_10091E59C(&qword_101653DE0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v27 = v18;
    uint64_t v28 = static Duration.description<A>(_:_:units:)();
    unint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v97);
    *(void *)(v0 + 376) = sub_1008FA0F0(v28, v30, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(v96, v20);
    v31(v27, v20);
    _os_log_impl((void *)&_mh_execute_header, log, type, "insert(observedAdvertisement:) fetch: %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(os_log_t, os_log_type_t *))(v22 + 8))(v101, *(os_log_type_t **)v100);
    v31(v103, v20);
  }
  else
  {

    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(v17, v20);
    v31(v18, v20);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v31(v103, v20);
  }
  v31(v16, v20);
  if (*(unsigned char *)(v0 + 922) == 1)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v32 = *(void *)(v0 + 744);
    uint64_t v33 = *(void *)(v0 + 736);
    sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
    sub_1009204F8(v32, v33, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = *(void *)(v0 + 736);
      uint64_t v37 = swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 141558275;
      *(void *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 424) = sub_1008FA0F0(v38, v39, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v36, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100920560(*(void *)(v0 + 736), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v48;
    *uint64_t v48 = v0;
    v48[1] = sub_100916EF8;
    uint64_t v49 = *(void *)(v0 + 632);
    uint64_t v50 = *(void *)(v0 + 432);
    return sub_10091A334(v49, v50);
  }
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v40 = *(void *)(v0 + 744);
  uint64_t v41 = *(void *)(v0 + 728);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v40, v41, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = *(void *)(v0 + 728);
    uint64_t v45 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 141558275;
    *(void *)(v0 + 400) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2081;
    sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 408) = sub_1008FA0F0(v46, v47, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v44, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 728), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v52 = *(void *)(*(void *)(v0 + 440) + *(void *)(v0 + 784));
  if (!*(void *)(v52 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 792))(*(void *)(v0 + 608), 1, 1, *(void *)(v0 + 448));
LABEL_26:
    uint64_t v60 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v61 = *(void *)(v0 + 656);
    uint64_t v62 = *(void *)(v0 + 648);
    uint64_t v63 = *(void *)(v0 + 600);
    uint64_t v64 = *(void *)(v0 + 448);
    uint64_t v65 = *(void *)(v0 + 432);
    sub_10001DAB4(*(void *)(v0 + 608), &qword_10163EB60);
    sub_1009204F8(v61, v62, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v65, v63, type metadata accessor for ObservedAdvertisement);
    v60(v63, 0, 1, v64);
    swift_beginAccess();
    sub_10015DD7C(v63, v62);
    swift_endAccess();
    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v66;
    *uint64_t v66 = v0;
    uint64_t v67 = sub_100917248;
LABEL_27:
    v66[1] = v67;
    uint64_t v68 = *(void *)(v0 + 432);
    return sub_10091AEDC(v68);
  }
  uint64_t v53 = *(void *)(v0 + 656);
  swift_bridgeObjectRetain();
  unint64_t v54 = sub_1007245E4(v53);
  if (v55)
  {
    sub_1009204F8(*(void *)(v52 + 56) + *(void *)(*(void *)(v0 + 456) + 72) * v54, *(void *)(v0 + 608), type metadata accessor for ObservedAdvertisement);
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v56 = 1;
  }
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
  uint64_t v58 = *(void *)(v0 + 608);
  uint64_t v59 = *(void *)(v0 + 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 792))(v58, v56, 1, v59);
  swift_bridgeObjectRelease();
  if (v57(v58, 1, v59) == 1) {
    goto LABEL_26;
  }
  sub_10092048C(*(void *)(v0 + 608), *(void *)(v0 + 496), type metadata accessor for ObservedAdvertisement);
  type metadata accessor for Date();
  sub_10091E59C((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v90 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v91 = *(void *)(v0 + 648);
    uint64_t v92 = *(void *)(v0 + 600);
    uint64_t v93 = *(void *)(v0 + 448);
    uint64_t v94 = *(void *)(v0 + 432);
    sub_1009204F8(*(void *)(v0 + 656), v91, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v94, v92, type metadata accessor for ObservedAdvertisement);
    v90(v92, 0, 1, v93);
    swift_beginAccess();
    sub_10015DD7C(v92, v91);
    swift_endAccess();
    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v66;
    *uint64_t v66 = v0;
    uint64_t v67 = sub_100917030;
    goto LABEL_27;
  }
  uint64_t v104 = (long long *)(v0 + 176);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v69 = *(void *)(v0 + 488);
  uint64_t v70 = *(void *)(v0 + 496);
  uint64_t v72 = *(void *)(v0 + 472);
  uint64_t v71 = *(void *)(v0 + 480);
  uint64_t v73 = *(void *)(v0 + 464);
  uint64_t v74 = *(void *)(v0 + 432);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v74, v69, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v70, v71, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v74, v72, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v70, v73, type metadata accessor for ObservedAdvertisement);
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.debug.getter();
  BOOL v77 = os_log_type_enabled(v75, v76);
  uint64_t v78 = *(void *)(v0 + 488);
  uint64_t v79 = *(void *)(v0 + 496);
  uint64_t v81 = *(void *)(v0 + 472);
  uint64_t v80 = *(void *)(v0 + 480);
  uint64_t v82 = *(void *)(v0 + 464);
  if (v77)
  {
    uint64_t v83 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v83 = 136315906;
    uint64_t v84 = sub_1002016B0();
    *(void *)(v0 + 368) = sub_1008FA0F0(v84, v85, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v83 + 12) = 2080;
    uint64_t v86 = sub_1002016B0();
    *(void *)(v0 + 352) = sub_1008FA0F0(v86, v87, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v80, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v83 + 22) = 2048;
    uint64_t v88 = Date.epoch.getter();
    sub_100920560(v81, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 384) = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v83 + 32) = 2048;
    uint64_t v89 = Date.epoch.getter();
    sub_100920560(v82, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 392) = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v83, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 464), type metadata accessor for ObservedAdvertisement);
    sub_100920560(v81, type metadata accessor for ObservedAdvertisement);

    sub_100920560(v80, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
  }
  sub_100920560(v79, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0(v104, v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v105 = (uint64_t (*)(void))((char *)&dword_101639108 + dword_101639108);
    uint64_t v95 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v95;
    *uint64_t v95 = v0;
    v95[1] = sub_100917444;
    return v105();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100916EF8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 440);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100919404;
  }
  else
  {
    uint64_t v4 = sub_1009207B4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100917030()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440);
  swift_task_dealloc();
  return _swift_task_switch(sub_100917140, v1, 0);
}

uint64_t sub_100917140()
{
  sub_100920560(*(void *)(v0 + 496), type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639108 + dword_101639108);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100917444;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100917248()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440);
  swift_task_dealloc();
  return _swift_task_switch(sub_100917358, v1, 0);
}

uint64_t sub_100917358()
{
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639108 + dword_101639108);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100917444;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100917444(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(void *)(*(void *)v1 + 864) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091755C, v2, 0);
}

uint64_t sub_10091755C()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[93];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[88];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
  sub_1009204F8(v2, v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  v0[109] = v6;
  *(void *)(v6 + 16) = v1;
  sub_10092048C(v3, v6 + v5, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[110] = v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v7 = v0;
  v7[1] = sub_1009176C4;
  return unsafeBlocking<A>(_:)(v0 + 115, sub_10091E0AC, v6, v8);
}

uint64_t sub_1009176C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1009177F0, v1, 0);
}

uint64_t sub_1009177F0()
{
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
    sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 888) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1009178DC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009178DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(void *)(*(void *)v1 + 896) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1009179F4, v2, 0);
}

uint64_t sub_1009179F4()
{
  uint64_t v1 = v0[112];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[112];
    swift_retain();
    return _swift_task_switch(sub_100917C94, v2, 0);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = v0[93];
    uint64_t v4 = v0[85];
    uint64_t v5 = v0[84];
    uint64_t v6 = v0[83];
    uint64_t v7 = v0[82];
    sub_10001DAB4(v0[79], &qword_10163EB60);
    sub_100920560(v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_100920560(v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100917C94()
{
  uint64_t v1 = *(void *)(v0[112] + 200);
  v0[113] = v1;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101652048 + dword_101652048);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[114] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100917D5C;
  uint64_t v3 = v0[93];
  return v5(v3, v1);
}

uint64_t sub_100917D5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440);
  swift_task_dealloc();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100917EAC, v1, 0);
}

uint64_t sub_100917EAC()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0[93];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  uint64_t v5 = v0[82];
  sub_10001DAB4(v0[79], &qword_10163EB60);
  sub_100920560(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100920560(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1009180F0()
{
  uint64_t v96 = v0;
  *(unsigned char *)(v0 + 922) = 0;
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 440);
  uid_t v5 = getuid();
  sub_100DC5FC0(v5);
  uint64_t v6 = v2 + *(int *)(v3 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v0 + 776) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, v1, v7);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(void *)(v0 + 784) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  uint64_t v9 = (uint64_t *)(v4 + v8);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 656);
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1007245E4(v11);
    uint64_t v13 = *(void *)(v0 + 632);
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 456);
    if (v16)
    {
      sub_1009204F8(*(void *)(v10 + 56) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 632), type metadata accessor for ObservedAdvertisement);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(v13, 0, 1, v14);
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(*(void *)(v0 + 632), 1, 1, v14);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 456) + 56);
    v17(*(void *)(v0 + 632), 1, 1, *(void *)(v0 + 448));
  }
  *(void *)(v0 + 792) = v17;
  uint64_t v18 = *(void *)(v0 + 624);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v20 = *(void *)(v0 + 456);
  sub_10001D074(*(void *)(v0 + 632), v18, &qword_10163EB60);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  *(void *)(v0 + 800) = v21;
  *(void *)(v0 + 808) = (v20 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  LODWORD(v19) = v21(v18, 1, v19);
  sub_10001DAB4(v18, &qword_10163EB60);
  if (v19 == 1)
  {
    ContinuousClock.now.getter();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 816) = v22;
    void *v22 = v0;
    v22[1] = sub_100915DF8;
    uint64_t v23 = *(void *)(v0 + 656);
    uint64_t v24 = *(void *)(v0 + 616);
    return sub_1011048AC(v24, v23);
  }
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (qword_101636E00 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "insert(observedAdvertisement:) Using cached lastAdvertisement", v29, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v0 + 922) == 1)
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 736);
    sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
    sub_1009204F8(v30, v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 736);
      uint64_t v35 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 424) = sub_1008FA0F0(v36, v37, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v34, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100920560(*(void *)(v0 + 736), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v46 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_100916EF8;
    uint64_t v47 = *(void *)(v0 + 632);
    uint64_t v48 = *(void *)(v0 + 432);
    return sub_10091A334(v47, v48);
  }
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v38 = *(void *)(v0 + 744);
  uint64_t v39 = *(void *)(v0 + 728);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v38, v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = *(void *)(v0 + 728);
    uint64_t v43 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 141558275;
    *(void *)(v0 + 400) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2081;
    sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 408) = sub_1008FA0F0(v44, v45, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v42, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 728), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v49 = *(void *)(*(void *)(v0 + 440) + *(void *)(v0 + 784));
  if (!*(void *)(v49 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 792))(*(void *)(v0 + 608), 1, 1, *(void *)(v0 + 448));
LABEL_35:
    uint64_t v57 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v58 = *(void *)(v0 + 656);
    uint64_t v59 = *(void *)(v0 + 648);
    uint64_t v60 = *(void *)(v0 + 600);
    uint64_t v61 = *(void *)(v0 + 448);
    uint64_t v62 = *(void *)(v0 + 432);
    sub_10001DAB4(*(void *)(v0 + 608), &qword_10163EB60);
    sub_1009204F8(v58, v59, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v62, v60, type metadata accessor for ObservedAdvertisement);
    v57(v60, 0, 1, v61);
    swift_beginAccess();
    sub_10015DD7C(v60, v59);
    swift_endAccess();
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v63;
    void *v63 = v0;
    uint64_t v64 = sub_100917248;
LABEL_36:
    v63[1] = v64;
    uint64_t v65 = *(void *)(v0 + 432);
    return sub_10091AEDC(v65);
  }
  uint64_t v50 = *(void *)(v0 + 656);
  swift_bridgeObjectRetain();
  unint64_t v51 = sub_1007245E4(v50);
  if (v52)
  {
    sub_1009204F8(*(void *)(v49 + 56) + *(void *)(*(void *)(v0 + 456) + 72) * v51, *(void *)(v0 + 608), type metadata accessor for ObservedAdvertisement);
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = 1;
  }
  unint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
  uint64_t v55 = *(void *)(v0 + 608);
  uint64_t v56 = *(void *)(v0 + 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 792))(v55, v53, 1, v56);
  swift_bridgeObjectRelease();
  if (v54(v55, 1, v56) == 1) {
    goto LABEL_35;
  }
  sub_10092048C(*(void *)(v0 + 608), *(void *)(v0 + 496), type metadata accessor for ObservedAdvertisement);
  type metadata accessor for Date();
  sub_10091E59C((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    unint64_t v87 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v88 = *(void *)(v0 + 648);
    uint64_t v89 = *(void *)(v0 + 600);
    uint64_t v90 = *(void *)(v0 + 448);
    uint64_t v91 = *(void *)(v0 + 432);
    sub_1009204F8(*(void *)(v0 + 656), v88, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v91, v89, type metadata accessor for ObservedAdvertisement);
    v87(v89, 0, 1, v90);
    swift_beginAccess();
    sub_10015DD7C(v89, v88);
    swift_endAccess();
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v63;
    void *v63 = v0;
    uint64_t v64 = sub_100917030;
    goto LABEL_36;
  }
  uint64_t v93 = (long long *)(v0 + 176);
  if (*((void *)p_ivar_base_size + 448) != -1) {
    swift_once();
  }
  uint64_t v66 = *(void *)(v0 + 488);
  uint64_t v67 = *(void *)(v0 + 496);
  uint64_t v69 = *(void *)(v0 + 472);
  uint64_t v68 = *(void *)(v0 + 480);
  uint64_t v70 = *(void *)(v0 + 464);
  uint64_t v71 = *(void *)(v0 + 432);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v71, v66, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v67, v68, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v71, v69, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v67, v70, type metadata accessor for ObservedAdvertisement);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  BOOL v74 = os_log_type_enabled(v72, v73);
  uint64_t v75 = *(void *)(v0 + 488);
  uint64_t v76 = *(void *)(v0 + 496);
  uint64_t v77 = *(void *)(v0 + 472);
  uint64_t v78 = *(void *)(v0 + 480);
  uint64_t v79 = *(void *)(v0 + 464);
  if (v74)
  {
    uint64_t v80 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v80 = 136315906;
    uint64_t v81 = sub_1002016B0();
    *(void *)(v0 + 368) = sub_1008FA0F0(v81, v82, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v75, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v80 + 12) = 2080;
    uint64_t v83 = sub_1002016B0();
    *(void *)(v0 + 352) = sub_1008FA0F0(v83, v84, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v80 + 22) = 2048;
    uint64_t v85 = Date.epoch.getter();
    sub_100920560(v77, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 384) = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v80 + 32) = 2048;
    uint64_t v86 = Date.epoch.getter();
    sub_100920560(v79, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 392) = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v80, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 464), type metadata accessor for ObservedAdvertisement);
    sub_100920560(v77, type metadata accessor for ObservedAdvertisement);

    sub_100920560(v78, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v75, type metadata accessor for ObservedAdvertisement);
  }
  sub_100920560(v76, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v93, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0(v93, v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v94 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    uint64_t v92 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v92;
    *uint64_t v92 = v0;
    v92[1] = sub_100917444;
    return v94();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100919028()
{
  (*(void (**)(void, void))(v0[70] + 8))(v0[74], v0[69]);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  sub_100010324(v0[66], (uint64_t)qword_10170E628);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[45] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Could not get latest advertisement: %@.", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[93];
  uint64_t v7 = v0[85];
  uint64_t v8 = v0[84];
  uint64_t v9 = v0[83];
  uint64_t v10 = v0[82];
  uint64_t v11 = v0[79];
  swift_errorRelease();
  sub_10001DAB4(v11, &qword_10163EB60);
  sub_100920560(v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_100920560(v6, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100919404()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 440) + *(void *)(v0 + 784));
  if (!*(void *)(v1 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 792))(*(void *)(v0 + 608), 1, 1, *(void *)(v0 + 448));
LABEL_7:
    uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v10 = *(void *)(v0 + 656);
    uint64_t v11 = *(void *)(v0 + 648);
    uint64_t v12 = *(void *)(v0 + 600);
    uint64_t v13 = *(void *)(v0 + 448);
    uint64_t v14 = *(void *)(v0 + 432);
    sub_10001DAB4(*(void *)(v0 + 608), &qword_10163EB60);
    sub_1009204F8(v10, v11, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v14, v12, type metadata accessor for ObservedAdvertisement);
    v9(v12, 0, 1, v13);
    swift_beginAccess();
    sub_10015DD7C(v12, v11);
    swift_endAccess();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v15;
    *uint64_t v15 = v0;
    char v16 = sub_100917248;
LABEL_8:
    v15[1] = v16;
    uint64_t v17 = *(void *)(v0 + 432);
    return sub_10091AEDC(v17);
  }
  uint64_t v2 = *(void *)(v0 + 656);
  swift_bridgeObjectRetain();
  unint64_t v3 = sub_1007245E4(v2);
  if (v4)
  {
    sub_1009204F8(*(void *)(v1 + 56) + *(void *)(*(void *)(v0 + 456) + 72) * v3, *(void *)(v0 + 608), type metadata accessor for ObservedAdvertisement);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 800);
  uint64_t v7 = *(void *)(v0 + 608);
  uint64_t v8 = *(void *)(v0 + 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 792))(v7, v5, 1, v8);
  swift_bridgeObjectRelease();
  if (v6(v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  sub_10092048C(*(void *)(v0 + 608), *(void *)(v0 + 496), type metadata accessor for ObservedAdvertisement);
  type metadata accessor for Date();
  sub_10091E59C((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 792);
    uint64_t v41 = *(void *)(v0 + 648);
    uint64_t v42 = *(void *)(v0 + 600);
    uint64_t v43 = *(void *)(v0 + 448);
    uint64_t v44 = *(void *)(v0 + 432);
    sub_1009204F8(*(void *)(v0 + 656), v41, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_1009204F8(v44, v42, type metadata accessor for ObservedAdvertisement);
    v40(v42, 0, 1, v43);
    swift_beginAccess();
    sub_10015DD7C(v42, v41);
    swift_endAccess();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v15;
    *uint64_t v15 = v0;
    char v16 = sub_100917030;
    goto LABEL_8;
  }
  uint64_t v47 = (long long *)(v0 + 176);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v0 + 488);
  uint64_t v20 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v21 = *(void *)(v0 + 480);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 432);
  sub_100010324(*(void *)(v0 + 528), (uint64_t)qword_10170E628);
  sub_1009204F8(v24, v19, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v20, v21, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v24, v22, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v20, v23, type metadata accessor for ObservedAdvertisement);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void *)(v0 + 488);
  uint64_t v29 = *(void *)(v0 + 496);
  uint64_t v30 = *(void *)(v0 + 472);
  uint64_t v31 = *(void *)(v0 + 480);
  uint64_t v32 = *(void *)(v0 + 464);
  if (v27)
  {
    log = v25;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315906;
    uint64_t v34 = sub_1002016B0();
    *(void *)(v0 + 368) = sub_1008FA0F0(v34, v35, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v28, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v36 = sub_1002016B0();
    *(void *)(v0 + 352) = sub_1008FA0F0(v36, v37, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100920560(v31, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v33 + 22) = 2048;
    uint64_t v38 = Date.epoch.getter();
    sub_100920560(v30, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 384) = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 32) = 2048;
    uint64_t v39 = Date.epoch.getter();
    sub_100920560(v32, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 392) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v26, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v33, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100920560(*(void *)(v0 + 464), type metadata accessor for ObservedAdvertisement);
    sub_100920560(v30, type metadata accessor for ObservedAdvertisement);

    sub_100920560(v31, type metadata accessor for ObservedAdvertisement);
    sub_100920560(v28, type metadata accessor for ObservedAdvertisement);
  }
  sub_100920560(v29, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v47, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0(v47, v0 + 216);
    sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v48 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    unint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v45;
    *unint64_t v45 = v0;
    v45[1] = sub_100917444;
    return v48();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100919BB8()
{
  *(void *)(v1 + 200) = v0;
  return _swift_task_switch(sub_100919BD8, v0, 0);
}

uint64_t sub_100919BD8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    char v4 = (uint64_t (__cdecl *)())((char *)&dword_1016393F8 + dword_1016393F8);
    unint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *unint64_t v3 = v0;
    v3[1] = sub_100919D28;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100919D28(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100919E40, v2, 0);
}

uint64_t sub_100919E40()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 216))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100919FA8;
    return sub_1000214A4();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v5 = (uint64_t (*)(void))((char *)&dword_1016393E0 + dword_1016393E0);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10091A1AC;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100919FA8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  return _swift_task_switch(sub_10091A0B8, v1, 0);
}

uint64_t sub_10091A0B8()
{
  swift_release();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_1016393E0 + dword_1016393E0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10091A1AC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10091A1AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091A2C4, v2, 0);
}

uint64_t sub_10091A2C4()
{
  uint64_t v1 = *(void *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  if (v1) {
    swift_release();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10091A334(uint64_t a1, uint64_t a2)
{
  v3[6] = a1;
  v3[7] = a2;
  uint64_t v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0);
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_10091A4F4, v2, 0);
}

uint64_t sub_10091A4F4()
{
  uint64_t v76 = v0;
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  sub_10001D074(v0[6], v3, &qword_10163EB60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10001DAB4(v0[13], &qword_10163EB60);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[7];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E858);
    sub_1009204F8(v5, v4, type metadata accessor for ObservedAdvertisement);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[16];
    if (v9)
    {
      uint64_t v11 = v0[14];
      uint64_t v12 = v0[11];
      uint64_t v13 = swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      sub_10001D074(v10 + *(int *)(v11 + 52), v12, &qword_10164E760);
      uint64_t v14 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v12, 1, v14);
      uint64_t v16 = v0[11];
      if (v15 == 1)
      {
        uint64_t v17 = 0x6E776F6E6B6E55;
        sub_10001DAB4(v0[11], &qword_10164E760);
        unint64_t v18 = 0xE700000000000000;
      }
      else
      {
        uint64_t v32 = v0[9];
        uint64_t v31 = v0[10];
        uint64_t v33 = v0[8];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v16, v33);
        sub_100920560(v16, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        uint64_t v17 = UUID.uuidString.getter();
        unint64_t v18 = v34;
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      }
      uint64_t v35 = v0[16];
      v0[3] = sub_1008FA0F0(v17, v18, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v35, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "First time we get an advertisement for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100920560(v0[16], type metadata accessor for ObservedAdvertisement);
    }

    uint64_t v36 = (void *)SPManagedCBPeripheralChangedNotification;
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v37 = v36;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
LABEL_31:
    swift_release();
    goto LABEL_32;
  }
  uint64_t v19 = v0[20];
  uint64_t v20 = v0[7];
  sub_10092048C(v0[13], v19, type metadata accessor for ObservedAdvertisement);
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = *(void *)(v19 + 24);
  uint64_t v23 = *(void *)(v20 + 16);
  uint64_t v24 = *(void *)(v20 + 24);
  if ((v22 & 0x2000000000000000) == 0)
  {
    if ((v24 & 0x2000000000000000) == 0)
    {
      sub_1001A1790(v21, v22);
      sub_1001A1790(v23, v24);
      uint64_t v25 = v21;
      unint64_t v26 = v22;
      uint64_t v27 = v23;
      unint64_t v28 = v24;
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v29 = v0[18];
    uint64_t v30 = v0[7];
    sub_1009204F8(v0[20], v0[19], type metadata accessor for ObservedAdvertisement);
    sub_1009204F8(v30, v29, type metadata accessor for ObservedAdvertisement);
LABEL_21:
    uint64_t v48 = v0[19];
    sub_100920560(v0[18], type metadata accessor for ObservedAdvertisement);
    sub_100920560(v48, type metadata accessor for ObservedAdvertisement);
    goto LABEL_22;
  }
  if ((v24 & 0x2000000000000000) == 0) {
    goto LABEL_12;
  }
  sub_1001A1790(v21, v22);
  sub_1001A1790(v23, v24);
  uint64_t v25 = v21;
  unint64_t v26 = v22 & 0xDFFFFFFFFFFFFFFFLL;
  uint64_t v27 = v23;
  unint64_t v28 = v24 & 0xDFFFFFFFFFFFFFFFLL;
LABEL_17:
  char v74 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v25, v26, v27, v28);
  uint64_t v39 = v0[19];
  uint64_t v38 = v0[20];
  uint64_t v40 = v0[18];
  uint64_t v41 = v0[7];
  sub_1001A1AD8(v23, v24);
  sub_1001A1AD8(v21, v22);
  sub_1009204F8(v38, v39, type metadata accessor for ObservedAdvertisement);
  sub_1009204F8(v41, v40, type metadata accessor for ObservedAdvertisement);
  if ((v74 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v43 = v0[18];
  uint64_t v42 = v0[19];
  int v44 = *(unsigned __int8 *)(v42 + 34);
  char v45 = *(unsigned char *)(v42 + 35);
  sub_100920560(v42, type metadata accessor for ObservedAdvertisement);
  int v46 = *(unsigned __int8 *)(v43 + 34);
  char v47 = *(unsigned char *)(v43 + 35);
  sub_100920560(v43, type metadata accessor for ObservedAdvertisement);
  if ((v45 & 1) == 0)
  {
    if (v44 == v46) {
      char v73 = v47;
    }
    else {
      char v73 = 1;
    }
    if ((v73 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_22:
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v49 = v0[20];
    uint64_t v50 = v0[17];
    uint64_t v51 = type metadata accessor for Logger();
    sub_100010324(v51, (uint64_t)qword_10170E858);
    sub_1009204F8(v49, v50, type metadata accessor for ObservedAdvertisement);
    char v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v55 = v0[17];
    if (v54)
    {
      uint64_t v56 = v0[14];
      uint64_t v57 = v0[12];
      uint64_t v58 = swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 141558275;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 12) = 2081;
      sub_10001D074(v55 + *(int *)(v56 + 52), v57, &qword_10164E760);
      uint64_t v59 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v57, 1, v59);
      uint64_t v61 = v0[12];
      if (v60 == 1)
      {
        uint64_t v62 = 0x6E776F6E6B6E55;
        sub_10001DAB4(v0[12], &qword_10164E760);
        unint64_t v63 = 0xE700000000000000;
      }
      else
      {
        uint64_t v64 = v0[9];
        uint64_t v65 = v0[10];
        uint64_t v66 = v0[8];
        (*(void (**)(uint64_t, void, uint64_t))(v64 + 16))(v65, v0[12], v66);
        sub_100920560(v61, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        uint64_t v62 = UUID.uuidString.getter();
        unint64_t v63 = v67;
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
      }
      uint64_t v68 = v0[17];
      v0[5] = sub_1008FA0F0(v62, v63, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v68, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Change detected in reconciled advt for %{private,mask.hash}s. Posting SPManagedCBPeripheralChanged.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100920560(v0[17], type metadata accessor for ObservedAdvertisement);
    }

    uint64_t v69 = (void *)SPManagedCBPeripheralChangedNotification;
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v70 = v69;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    sub_100920560(v0[20], type metadata accessor for ObservedAdvertisement);
    goto LABEL_31;
  }
  if ((v47 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_39:
  sub_100920560(v0[20], type metadata accessor for ObservedAdvertisement);
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v71 = (uint64_t (*)(void))v0[1];
  return v71();
}

uint64_t sub_10091AEDC(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[33] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[34] = v4;
  v2[35] = *(void *)(v4 + 64);
  v2[36] = swift_task_alloc();
  v2[37] = sub_10000588C(&qword_10163B9F0);
  v2[38] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  v2[39] = v5;
  v2[40] = *(void *)(v5 - 8);
  v2[41] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v2[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[43] = v6;
  v2[44] = *(void *)(v6 - 8);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  return _swift_task_switch(sub_10091B0DC, v1, 0);
}

uint64_t sub_10091B0DC()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0);
  *(void *)(v0 + 384) = v5;
  sub_10001D074(v4 + *(int *)(v5 + 52), v3, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 336), &qword_10164E760);
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D9B0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      BOOL v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Not updating key sync metadata for unreconciled advertisement.", v9, 2u);
      swift_slowDealloc();
    }

LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 248);
    sub_10092048C(*(void *)(v0 + 336), *(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    switch((*(unsigned __int8 *)(v10 + 32) >> 4) & 3)
    {
      case 1:
      case 2:
      case 3:
        uint64_t v11 = *(unsigned char **)(v0 + 248);
        if ((v11[31] & 0x20) != 0)
        {
          uint64_t v23 = *(void *)(*(void *)(v0 + 376) + *(int *)(*(void *)(v0 + 344) + 24));
          uint64_t v24 = (uint64_t)&v11[*(int *)(v5 + 44)];
          uint64_t v25 = (void *)swift_task_alloc();
          *(void *)(v0 + 392) = v25;
          *uint64_t v25 = v0;
          v25[1] = sub_10091B79C;
          uint64_t v26 = *(void *)(v0 + 376);
          uint64_t result = sub_10091CFB4(v23, v24, v26);
        }
        else
        {
          *(unsigned char *)(v0 + 473) = v11[34];
          if (v11[35])
          {
            if (qword_1016368F8 != -1) {
              swift_once();
            }
            uint64_t v13 = *(void *)(v0 + 368);
            uint64_t v12 = *(void *)(v0 + 376);
            uint64_t v14 = type metadata accessor for Logger();
            sub_100010324(v14, (uint64_t)qword_10170D9B0);
            sub_1009204F8(v12, v13, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            int v15 = Logger.logObject.getter();
            os_log_type_t v16 = static os_log_type_t.info.getter();
            BOOL v17 = os_log_type_enabled(v15, v16);
            uint64_t v18 = *(void *)(v0 + 368);
            uint64_t v19 = *(void *)(v0 + 376);
            if (v17)
            {
              uint64_t v20 = swift_slowAlloc();
              uint64_t v36 = swift_slowAlloc();
              *(_DWORD *)uint64_t v20 = 141558275;
              *(void *)(v0 + 208) = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v20 + 12) = 2081;
              sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v0 + 200) = sub_1008FA0F0(v21, v22, &v36);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100920560(v18, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
              _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to update key sync metadata - no hint provided for wild advertisement for %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_100920560(v18, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            }
            uint64_t v28 = v19;
            goto LABEL_24;
          }
          uint64_t v28 = *(void *)(v0 + 376);
          uint64_t v29 = *(void *)(v0 + 344);
          if (*(unsigned char *)(v28 + *(int *)(v29 + 20)))
          {
            if (*(unsigned char *)(v28 + *(int *)(v29 + 20)) != 1) {
              goto LABEL_24;
            }
            uint64_t v30 = *(void *)(v28 + *(int *)(v29 + 24));
            *(void *)(v0 + 120) = &type metadata for SecondaryIndex;
            unint64_t v31 = sub_1001A15EC();
          }
          else
          {
            uint64_t v30 = *(void *)(v28 + *(int *)(v29 + 24));
            *(void *)(v0 + 120) = &type metadata for PrimaryWildIndex;
            unint64_t v31 = sub_1001A1694();
          }
          *(void *)(v0 + 128) = v31;
          *(void *)(v0 + 96) = v30;
          uint64_t v33 = qword_1016375E8;
          swift_retain();
          if (v33 != -1) {
            swift_once();
          }
          swift_beginAccess();
          sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
          if (!*(void *)(v0 + 80))
          {
            __break(1u);
            JUMPOUT(0x10091B78CLL);
          }
          sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
          swift_release();
          sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
          uint64_t v35 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
          unint64_t v34 = (void *)swift_task_alloc();
          *(void *)(v0 + 408) = v34;
          *unint64_t v34 = v0;
          v34[1] = sub_10091B994;
          uint64_t result = v35();
        }
        break;
      default:
        uint64_t v28 = *(void *)(v0 + 376);
LABEL_24:
        sub_100920560(v28, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_10091B79C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_10091C4FC;
  }
  else {
    uint64_t v4 = sub_10091B8C8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10091B8C8()
{
  sub_100920560(*(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10091B994(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091BAAC, v2, 0);
}

uint64_t sub_10091BAAC()
{
  uint64_t v1 = v0[52];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[52];
    return _swift_task_switch(sub_10091BC8C, v2, 0);
  }
  else
  {
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D9B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to get BeaconStoreActor!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[47];

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
    sub_100920560(v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10091BC8C()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[34];
  v0[53] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  v0[54] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + v6, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_10091BD80, 0, 0);
}

uint64_t sub_10091BD80()
{
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[55] = v3;
  v3[2] = v2;
  v3[3] = sub_10001D828;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[56] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10091BE84;
  uint64_t v6 = v0[37];
  uint64_t v5 = v0[38];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_10091BE84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10091BFD4, v1, 0);
}

uint64_t sub_10091BFD4()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, &qword_10163B9F0);
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D9B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Not updating key sync metadata for unreconciled advertisement.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 376);

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
    sub_100920560(v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 248);
    sub_10092048C(v2, v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v13 = v12 + *(int *)(v10 + 44);
    *(void *)(v0 + 40) = v1;
    *(void *)(v0 + 48) = sub_10091E59C(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = sub_10001D958((uint64_t *)(v0 + 16));
    sub_1009204F8(v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    int v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v15;
    *int v15 = v0;
    v15[1] = sub_10091C2D0;
    char v16 = *(unsigned char *)(v0 + 473);
    return sub_1010EE3D0(v0 + 96, v16, v13, v0 + 16);
  }
}

uint64_t sub_10091C2D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 256);
    uint64_t v4 = sub_10091C940;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_10091C3F8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10091C3F8()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[41];
  swift_release();
  sub_100920560(v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  sub_100920560(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10091C4FC()
{
  uint64_t v18 = v0;
  *(void *)(v0 + 216) = *(void *)(v0 + 400);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 472) == 1)
  {
    sub_100920560(*(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 376);
    uint64_t v2 = *(void *)(v0 + 360);
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D9B0);
    sub_1009204F8(v1, v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 360);
    if (v6)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138543875;
      uint64_t v17 = v16;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 224) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v9 + 12) = 2160;
      *(void *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 22) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_1008FA0F0(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to update key sync metadata %{public}@ for %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      sub_100920560(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100920560(v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10091C940()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 328);
  swift_release();
  sub_100920560(v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *(void *)(v0 + 216) = *(void *)(v0 + 464);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 472) == 1)
  {
    sub_100920560(*(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 376);
    uint64_t v3 = *(void *)(v0 + 360);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D9B0);
    sub_1009204F8(v2, v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 376);
    uint64_t v9 = *(void *)(v0 + 360);
    if (v7)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543875;
      uint64_t v18 = v17;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 224) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v10 + 12) = 2160;
      *(void *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_1008FA0F0(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v9, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to update key sync metadata %{public}@ for %{private,mask.hash}s.", (uint8_t *)v10, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      sub_100920560(v9, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100920560(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_10091CDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  uint64_t result = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
    unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    int v15 = (char *)swift_allocObject();
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 4) = a1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    swift_retain();
    sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101652060, (uint64_t)v15);
    uint64_t result = swift_release();
  }
  *a3 = a1 == 0;
  return result;
}

uint64_t sub_10091CFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  v4[19] = type metadata accessor for KeySyncMetadata();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_10091D04C, v3, 0);
}

uint64_t sub_10091D04C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10091D188;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10091D188(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091D2A0, v2, 0);
}

uint64_t sub_10091D2A0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[22])
  {
    uint64_t v3 = (int *)v0[19];
    uint64_t v2 = v0[20];
    uint64_t v5 = v0[16];
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[15];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v2, v4, v7);
    uint64_t v8 = (void *)(v2 + v3[6]);
    void v8[3] = &type metadata for PrimaryIndex;
    void v8[4] = sub_1001A1640();
    *uint64_t v8 = v6;
    uint64_t v9 = v2 + v3[7];
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v5, v10);
    *(unsigned char *)(v2 + v3[5]) = 1;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[23] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10091D508;
    uint64_t v12 = v0[20];
    return sub_101104A5C(v12);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170D9B0);
    int v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No ObservationStoreService available.", v17, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10091D508()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = sub_10091D6C0;
  }
  else {
    uint64_t v4 = sub_10091D634;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10091D634()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  sub_100920560(v1, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10091D6C0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  sub_100920560(v1, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10091D74C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    type metadata accessor for BeaconKeyManager(0);
    uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v3 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_10091D7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    __chkstk_darwin(a1);
    sub_10000588C((uint64_t *)&unk_101665470);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v3 = *(void *)(v10 + 16);
    uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = v5;
    if (v3)
    {
      sub_1009204F8(v10 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2, type metadata accessor for BeaconKeyManager.IndexInformation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v4);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    return v8(a2, 1, 1, v7);
  }
}

uint64_t sub_10091D98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1) {
    return sub_1012E41F8(a2);
  }
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a2, 1, 1, v4);
}

uint64_t sub_10091DA18(uint64_t a1)
{
  return sub_1009CE96C(a1, v1);
}

uint64_t sub_10091DA20()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10091DA60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_10090B148(a1, v4, v5, v6);
}

uint64_t sub_10091DB14(uint64_t a1)
{
  return sub_10017A064(a1, v1);
}

uint64_t sub_10091DB1C()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v5 + 8), v6);
  }
  uint64_t v7 = v3 + v4;
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_1001A1AD8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[14]), *(void *)(v5 + v1[14] + 8));

  return _swift_deallocObject(v0, v7, v2 | 7);
}

uint64_t sub_10091DC8C()
{
  uint64_t v2 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_10090BC30(v3, v4);
}

uint64_t sub_10091DD60(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v2[13] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[14] = v5;
  v2[15] = *(void *)(v5 + 64);
  v2[16] = swift_task_alloc();
  v2[5] = type metadata accessor for MemberCircleRevokeManager();
  void v2[6] = &off_101607480;
  v2[2] = a2;
  swift_retain();
  return _swift_task_switch(sub_10091DE50, 0, 0);
}

uint64_t sub_10091DE50()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, *(void *)(v0 + 96), v3);
  sub_10001D010(v0 + 16, v0 + 56);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v5, v1, v3);
  sub_10001CEB0((long long *)(v0 + 56), v7 + v6);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10091DFCC()
{
  uint64_t v1 = *(void *)(type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10091E0AC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10091CDC4(v4, v5, a1);
}

uint64_t sub_10091E120()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_10091E1C4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10001D2E4;
  return sub_10034AE6C(v4, v5);
}

uint64_t sub_10091E2C0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10091E394(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001D2E4;
  return sub_10065F3A4(a1, v5, v6, v7, v8);
}

uint64_t sub_10091E490()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10091E55C()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10091E594@<X0>(void *a1@<X8>)
{
  return sub_10091D74C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10091E59C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10091E5E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10091D98C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10091E5F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10091D7E0(*(void *)(v1 + 16), a1);
}

uint64_t sub_10091E604@<X0>(void *a1@<X8>)
{
  return sub_1012E389C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10091E624(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  sub_10000588C(&qword_10163CF50);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for ObservedAdvertisement(0);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2[27] = v4;
  v2[28] = *(void *)(v4 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  sub_10000588C(&qword_101657910);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[37] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10091E884;
  return sub_100911318(a1);
}

uint64_t sub_10091E884()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  return _swift_task_switch(sub_10091E994, v1, 0);
}

uint64_t sub_10091E994()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10091EA44;
  uint64_t v5 = v0[34];
  return sub_10090E01C(v5, v3, v2);
}

uint64_t sub_10091EA44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  return _swift_task_switch(sub_10091EB54, v1, 0);
}

uint64_t sub_10091EB54()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  sub_10001D074(v0[34], v1, &qword_101657910);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[33];
  if (v4 == 1)
  {
    uint64_t v6 = v0[15];
    sub_10001DAB4(v5, &qword_101657910);
    if ((*(unsigned char *)(v6 + 31) & 0x20) != 0
      || (uint64_t v7 = v0[17],
          sub_10001D074(v0[15] + *(int *)(v0[19] + 48), v7, &qword_10163CF50),
          uint64_t v8 = type metadata accessor for ObservedAdvertisement.Location(0),
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8),
          sub_10001DAB4(v7, &qword_10163CF50),
          v9 == 1))
    {
      sub_10001DAB4(v0[34], &qword_101657910);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = (uint64_t (*)(void))v0[1];
      return v10();
    }
    else
    {
      uint64_t v14 = v0[36];
      uint64_t v15 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
      uint64_t v16 = v0[36];
      uint64_t v18 = (int *)v0[19];
      uint64_t v17 = v0[20];
      uint64_t v19 = v0[15];
      char v20 = *(unsigned char *)(v19 + 9);
      uint64_t v21 = *(void *)(v19 + 16);
      uint64_t v22 = *(void *)(v19 + 24);
      __int16 v32 = *(_WORD *)(v19 + 32);
      char v31 = *(unsigned char *)(v19 + 34);
      char v30 = *(unsigned char *)(v19 + 35);
      int v29 = *(_DWORD *)(v19 + 36);
      uint64_t v23 = v18[11];
      uint64_t v24 = v19 + v23;
      uint64_t v25 = v17 + v23;
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v24, v26);
      LOBYTE(v24) = *(unsigned char *)(v19 + v18[14]);
      sub_10001D074(v19 + v18[12], v17 + v18[12], &qword_10163CF50);
      sub_10001D074(v16, v17 + v18[13], &qword_10164E760);
      *(void *)uint64_t v17 = 0;
      *(unsigned char *)(v17 + 8) = 1;
      *(unsigned char *)(v17 + 9) = v20;
      *(void *)(v17 + 16) = v21;
      *(void *)(v17 + 24) = v22;
      *(_WORD *)(v17 + 32) = v32;
      *(unsigned char *)(v17 + 34) = v31;
      *(unsigned char *)(v17 + 35) = v30;
      *(_DWORD *)(v17 + 36) = v29;
      *(unsigned char *)(v17 + v18[14]) = v24;
      sub_1001A1790(v21, v22);
      uint64_t v27 = (void *)swift_task_alloc();
      v0[40] = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_10091FF00;
      uint64_t v28 = v0[20];
      return sub_1009125A8(v28);
    }
  }
  else
  {
    sub_10092048C(v5, v0[32], type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[39] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10091EFD8;
    uint64_t v13 = v0[32];
    return sub_10090F6A0(v13);
  }
}

uint64_t sub_10091EFD8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(unsigned char *)(*(void *)v1 + 349) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10091F0F0, v2, 0);
}

uint64_t sub_10091F0F0()
{
  uint64_t v103 = v0;
  if (*(unsigned char *)(v0 + 349) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 280);
    uint64_t v1 = *(void *)(v0 + 288);
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v92 = *(void *)(v0 + 216);
    uint64_t v4 = (void *)(v3 + *(int *)(v92 + 20));
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    sub_10001CD44(v4, v5);
    LOBYTE(v5) = sub_100EB7B8C(v5, v6);
    sub_10001CD44(v4, v4[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v94 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(v2, v3);
    uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    *(unsigned char *)(v2 + *(int *)(v8 + 20)) = v5;
    *(void *)(v2 + *(int *)(v8 + 24)) = v7;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v2, 0, 1, v8);
    sub_10001D608(v2, v1, &qword_10164E760);
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v96 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v99 = *(void *)(v0 + 176);
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E628);
    sub_1009204F8(v9, v12, type metadata accessor for ObservedAdvertisement);
    sub_1009204F8(v9, v13, type metadata accessor for ObservedAdvertisement);
    sub_1009204F8(v9, v15, type metadata accessor for ObservedAdvertisement);
    sub_1009204F8(v9, v14, type metadata accessor for ObservedAdvertisement);
    sub_1009204F8(v10, v11, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1009204F8(v10, v96, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1009204F8(v9, v99, type metadata accessor for ObservedAdvertisement);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v91 = v18;
      uint64_t v97 = v17;
      uint64_t v19 = *(void *)(v0 + 200);
      uint64_t v20 = *(void *)(v0 + 208);
      uint64_t v89 = *(void *)(v0 + 192);
      uint64_t v21 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141560067;
      *(void *)(v0 + 56) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v23 = *(void *)(v20 + 24);
      sub_1001A1790(v22, v23);
      uint64_t v24 = sub_10026383C(v22, v23);
      unint64_t v26 = v25;
      sub_1001A1AD8(v22, v23);
      *(void *)(v0 + 64) = sub_1008FA0F0(v24, v26, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v20, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v21 + 22) = 2082;
      sub_1000D07F4(*(unsigned char *)(v19 + 32) & 0xB);
      uint64_t v27 = sub_1000D0108();
      *(void *)(v0 + 72) = sub_1008FA0F0(v27, v28, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v19, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v21 + 32) = 2082;
      if (*(unsigned char *)(v89 + 35))
      {
        unint64_t v29 = 0xE400000000000000;
        uint64_t v30 = 1701736302;
      }
      else
      {
        *(unsigned char *)(v0 + 348) = *(unsigned char *)(*(void *)(v0 + 192) + 34);
        sub_10006145C();
        uint64_t v59 = FixedWidthInteger.data.getter();
        unint64_t v61 = v60;
        uint64_t v30 = Data.hexString.getter();
        unint64_t v29 = v62;
        sub_10001CFB8(v59, v61);
      }
      uint64_t v63 = *(void *)(v0 + 248);
      uint64_t v64 = *(void *)(v0 + 184);
      uint64_t v65 = *(void *)(v0 + 192);
      uint64_t v88 = *(void *)(v0 + 152);
      uint64_t v90 = *(void *)(v0 + 176);
      uint64_t v86 = *(void *)(v0 + 240);
      uint64_t v87 = *(void *)(v0 + 144);
      *(void *)(v0 + 80) = sub_1008FA0F0(v30, v29, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v65, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v21 + 42) = 2082;
      uint64_t v66 = sub_1000D0310(*(unsigned __int8 *)(v64 + 32));
      *(void *)(v0 + 88) = sub_1008FA0F0(v66, v67, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v64, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v21 + 52) = 2082;
      sub_10001CD44((void *)(v63 + *(int *)(v92 + 20)), *(void *)(v63 + *(int *)(v92 + 20) + 24));
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 96) = sub_1008FA0F0(v68, v69, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v63, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v21 + 62) = 2160;
      *(void *)(v0 + 104) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 72) = 2081;
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 112) = sub_1008FA0F0(v70, v71, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v86, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v21 + 82) = 1024;
      sub_10001D074(v90 + *(int *)(v88 + 48), v87, &qword_10163CF50);
      uint64_t v72 = type metadata accessor for ObservedAdvertisement.Location(0);
      LODWORD(v65) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 48))(v87, 1, v72) != 1;
      sub_10001DAB4(v87, &qword_10163CF50);
      sub_100920560(v90, type metadata accessor for ObservedAdvertisement);
      *(_DWORD *)(v0 + 344) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v97, v91, "\"Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %{public}s, beacon: %{private,mask.hash}s,\nhasLocation: %{BOOL}d.", (uint8_t *)v21, 0x58u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v51 = *(void *)(v0 + 240);
      uint64_t v52 = *(void *)(v0 + 248);
      uint64_t v54 = *(void *)(v0 + 200);
      uint64_t v53 = *(void *)(v0 + 208);
      uint64_t v56 = *(void *)(v0 + 184);
      uint64_t v55 = *(void *)(v0 + 192);
      sub_100920560(*(void *)(v0 + 176), type metadata accessor for ObservedAdvertisement);
      sub_100920560(v53, type metadata accessor for ObservedAdvertisement);
      sub_100920560(v54, type metadata accessor for ObservedAdvertisement);
      sub_100920560(v55, type metadata accessor for ObservedAdvertisement);
      sub_100920560(v56, type metadata accessor for ObservedAdvertisement);
      sub_100920560(v52, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100920560(v51, type metadata accessor for BeaconKeyManager.IndexInformation);
    }
    sub_100920560(*(void *)(v0 + 256), type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v73 = *(void *)(v0 + 288);
    uint64_t v75 = *(int **)(v0 + 152);
    uint64_t v74 = *(void *)(v0 + 160);
    uint64_t v76 = *(void *)(v0 + 120);
    char v77 = *(unsigned char *)(v76 + 9);
    uint64_t v79 = *(void *)(v76 + 16);
    uint64_t v78 = *(void *)(v76 + 24);
    __int16 v101 = *(_WORD *)(v76 + 32);
    char v98 = *(unsigned char *)(v76 + 34);
    char v95 = *(unsigned char *)(v76 + 35);
    int v93 = *(_DWORD *)(v76 + 36);
    uint64_t v80 = v75[11];
    uint64_t v81 = v76 + v80;
    uint64_t v82 = v74 + v80;
    uint64_t v83 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(v82, v81, v83);
    LOBYTE(v81) = *(unsigned char *)(v76 + v75[14]);
    sub_10001D074(v76 + v75[12], v74 + v75[12], &qword_10163CF50);
    sub_10001D074(v73, v74 + v75[13], &qword_10164E760);
    *(void *)uint64_t v74 = 0;
    *(unsigned char *)(v74 + 8) = 1;
    *(unsigned char *)(v74 + 9) = v77;
    *(void *)(v74 + 16) = v79;
    *(void *)(v74 + 24) = v78;
    *(_WORD *)(v74 + 32) = v101;
    *(unsigned char *)(v74 + 34) = v98;
    *(unsigned char *)(v74 + 35) = v95;
    *(_DWORD *)(v74 + 36) = v93;
    *(unsigned char *)(v74 + v75[14]) = v81;
    sub_1001A1790(v79, v78);
    unint64_t v84 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v84;
    *unint64_t v84 = v0;
    v84[1] = sub_10091FF00;
    uint64_t v85 = *(void *)(v0 + 160);
    return sub_1009125A8(v85);
  }
  else
  {
    if (qword_101636E00 != -1) {
      swift_once();
    }
    uint64_t v31 = *(void *)(v0 + 256);
    uint64_t v32 = *(void *)(v0 + 232);
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v34 = *(void *)(v0 + 120);
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E628);
    sub_1009204F8(v31, v32, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1009204F8(v34, v33, type metadata accessor for ObservedAdvertisement);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 272);
    uint64_t v40 = *(void *)(v0 + 232);
    uint64_t v41 = *(void *)(v0 + 168);
    if (v38)
    {
      uint64_t v100 = *(void *)(v0 + 272);
      uint64_t v42 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 141558787;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10091E59C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v43, v44, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v40, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v42 + 22) = 2160;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 32) = 2081;
      uint64_t v45 = *(void *)(v41 + 16);
      uint64_t v46 = *(void *)(v41 + 24);
      sub_1001A1790(v45, v46);
      uint64_t v47 = sub_10026383C(v45, v46);
      unint64_t v49 = v48;
      sub_1001A1AD8(v45, v46);
      *(void *)(v0 + 40) = sub_1008FA0F0(v47, v49, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100920560(v41, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Ignoring unsupported beacon %{private,mask.hash}s,\nadvertisement %{private,mask.hash}s!", (uint8_t *)v42, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v50 = v100;
    }
    else
    {

      sub_100920560(v41, type metadata accessor for ObservedAdvertisement);
      sub_100920560(v40, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v50 = v39;
    }
    sub_10001DAB4(v50, &qword_101657910);
    sub_100920560(*(void *)(v0 + 256), type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
}

uint64_t sub_10091FF00()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 328) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100920058;
  uint64_t v4 = *(void *)(v1 + 160);
  return sub_1009102EC(v4);
}

uint64_t sub_100920058()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = sub_100920308;
  }
  else {
    uint64_t v4 = sub_100920184;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100920184()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[34];
  sub_100920560(v0[20], type metadata accessor for ObservedAdvertisement);
  sub_10001DAB4(v2, &qword_101657910);
  sub_10001DAB4(v1, &qword_10164E760);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100920308()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[34];
  sub_100920560(v0[20], type metadata accessor for ObservedAdvertisement);
  sub_10001DAB4(v2, &qword_101657910);
  sub_10001DAB4(v1, &qword_10164E760);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10092048C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1009204F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100920560(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1009205C4()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconStatus(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(*(void *)v1 + 64) + v3 + 3;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[8];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100920700()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconStatus(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + *(void *)(v1 + 64) + v2);

  return sub_100E604DC(v3, v0 + v2, v4);
}

uint64_t sub_1009207B8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100920848(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100920900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100920950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1009209A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1009209F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100920A40(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_100920B9C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100920DB4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t _s11MaterializeVMa()
{
  return sub_1000103A0();
}

void *sub_100920DF4()
{
  return &protocol witness table for Never;
}

uint64_t sub_100920E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  unsigned int v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v17[2] = *(void *)(v8 + 16);
  _OWORD v17[3] = v10;
  v17[4] = v9;
  v17[5] = v11;
  uint64_t v12 = _s11MaterializeV5InnerVMa();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v15 = (char *)v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  sub_100920FCC((uint64_t)v7, a3, (uint64_t)v15);
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100920FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return CombineIdentifier.init()();
}

uint64_t sub_100921064(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101652198);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void sub_100921274(void *a1@<X8>)
{
  a1[3] = &type metadata for String;
  *a1 = 0x6C6169726574614DLL;
  a1[1] = 0xEB00000000657A69;
}

uint64_t sub_1009212A4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of Subscriber.receive(subscription:)(a1, *(void *)(a2 + 24), *(void *)(a2 + 40));
}

uint64_t sub_1009212B4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = dispatch thunk of Subscriber.receive(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_100921454(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v12, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v6, v9, AssociatedTypeWitness);
    swift_storeEnumTagMultiPayload();
    dispatch thunk of Subscriber.receive(_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  char v17 = 1;
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t sub_1009217AC()
{
  return 0x6C6169726574614DLL;
}

uint64_t sub_1009217D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100921844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100920E00(a1, a4, a2);
}

uint64_t _s11MaterializeV5InnerVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100921870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_100921878()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CombineIdentifier();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100921944(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(v8 - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = v8;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_100921AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_100921B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_100921C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_100921CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_100921D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_100921E04(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void sub_100922084(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for CombineIdentifier() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x100922384);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t sub_1009223AC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1009223C8()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_1009223E8(void *a1@<X0>, uint64_t a2@<X8>)
{
  [a1 overflowFlag];
  sub_10000D64C();
  uint64_t v5 = FixedWidthInteger.data.getter();
  sub_100435A9C(1, v5, v6, &v47);
  uint64_t v7 = v47;
  unint64_t v8 = v48;
  char v9 = sub_1010F4954(v47, v48);
  sub_10001CFB8(v7, v8);
  if (v2)
  {

    return;
  }
  char v10 = sub_1010F43B4(6u, v9);
  uint64_t v11 = 765;
  if (sub_1010F43B4(1u, v9)) {
    uint64_t v12 = 765;
  }
  else {
    uint64_t v12 = 0;
  }
  if (sub_1010F43B4(3u, v9)) {
    uint64_t v13 = 765;
  }
  else {
    uint64_t v13 = 0;
  }
  if ((sub_1010F43B4(2u, v9) & 1) == 0) {
    uint64_t v11 = 0;
  }
  char v14 = sub_1010F43B4(5u, v9);
  char v46 = sub_1010F43B4(0, v9);
  char v45 = sub_1010F43B4(4u, v9);
  char v44 = sub_1010F43B4(7u, v9);
  unint64_t v15 = (unint64_t)[a1 crashCount];
  if ((v15 & 0x8000000000000000) != 0 || v15 >= 0x10000) {
    goto LABEL_79;
  }
  if (v10) {
    int v16 = 255;
  }
  else {
    int v16 = 0;
  }
  int v17 = v16 + (unsigned __int16)v15;
  if ((v17 & 0x10000) != 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  [a1 multiTime];
  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v18 <= -1.0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  BOOL v19 = __CFADD__((unint64_t)v18, v12);
  unint64_t v20 = (unint64_t)v18 + v12;
  if (v19)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  [a1 nearOwnerTime];
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v21 <= -1.0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v21 >= 1.84467441e19)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  BOOL v19 = __CFADD__((unint64_t)v21, v13);
  unint64_t v22 = (unint64_t)v21 + v13;
  if (v19)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  [a1 wildTime];
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v23 <= -1.0)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v23 >= 1.84467441e19)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  BOOL v19 = __CFADD__((unint64_t)v23, v11);
  unint64_t v24 = (unint64_t)v23 + v11;
  if (v19)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v25 = (unint64_t)[a1 soundCount];
  if ((v25 & 0x8000000000000000) != 0 || HIDWORD(v25)) {
    goto LABEL_79;
  }
  if (v14) {
    int v26 = 510;
  }
  else {
    int v26 = 0;
  }
  int v27 = v25 + v26;
  if (__CFADD__(v25, v26)) {
    goto LABEL_69;
  }
  [a1 soundTime];
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v28 <= -1.0)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (v28 >= 4294967300.0)
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v42 = v20;
  unint64_t v43 = v24;
  unsigned int v29 = v28;
  if (v46) {
    int v30 = 510;
  }
  else {
    int v30 = 0;
  }
  unsigned int v31 = v29 + v30;
  if (__CFADD__(v29, v30)) {
    goto LABEL_73;
  }
  int v32 = v27;
  unint64_t v33 = (unint64_t)[a1 rangingCount];
  if ((v33 & 0x8000000000000000) != 0 || HIDWORD(v33)) {
    goto LABEL_79;
  }
  unint64_t v34 = v22;
  if (v45) {
    int v35 = 510;
  }
  else {
    int v35 = 0;
  }
  int v36 = v33 + v35;
  if (__CFADD__(v33, v35)) {
    goto LABEL_74;
  }
  [a1 rangingTime];
  double v38 = v37;

  if ((~*(void *)&v38 & 0x7FF0000000000000) == 0)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v38 <= -1.0)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v38 < 4294967300.0)
  {
    unsigned int v39 = v38;
    if (v44) {
      int v40 = 510;
    }
    else {
      int v40 = 0;
    }
    BOOL v19 = __CFADD__(v39, v40);
    unsigned int v41 = v39 + v40;
    if (!v19)
    {
      *(_OWORD *)a2 = xmmword_101347BB0;
      *(unsigned char *)(a2 + 16) = v9;
      *(_WORD *)(a2 + 18) = v17;
      *(void *)(a2 + 24) = v42;
      *(void *)(a2 + 32) = v34;
      *(void *)(a2 + 40) = v43;
      *(_DWORD *)(a2 + 48) = v32;
      *(_DWORD *)(a2 + 52) = v31;
      *(_DWORD *)(a2 + 56) = v36;
      *(_DWORD *)(a2 + 60) = v41;
      *(unsigned char *)(a2 + 64) = 2;
      return;
    }
    goto LABEL_78;
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for AccessoryProductDataResponsePayload()
{
  return &type metadata for AccessoryProductDataResponsePayload;
}

uint64_t sub_1009228AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10092295C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_1009228D8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100922908();
  unint64_t result = sub_100574020();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100922908()
{
  unint64_t result = qword_1016521A0;
  if (!qword_1016521A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016521A0);
  }
  return result;
}

uint64_t sub_10092295C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = v14;
  sub_1000BD078((uint64_t)v12, v13);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000361E0(v4, v5);
    uint64_t v8 = sub_1002AB228(v6, v7);
    if (v9 >> 60 != 15)
    {
      uint64_t v3 = v8;
      sub_10001CFB8(v6, v7);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v3;
    }
    uint64_t v3 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 104))(v10, enum case for BinaryEncodingError.encodingError(_:), v3);
    swift_willThrow();
    sub_10001CFB8(v6, v7);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_100922AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v72 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v71 = (char *)&v65 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v65 - v14;
  __chkstk_darwin(v13);
  int v17 = (char *)&v65 - v16;
  unint64_t v18 = sub_1002A3600();
  uint64_t v19 = sub_100276AE8(v18);
  swift_bridgeObjectRelease();
  sub_1002A1124(v19, v6);
  swift_bridgeObjectRelease();
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  if (v20 == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    unint64_t v69 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v69(v17, v6, v7);
    Date.addingTimeInterval(_:)();
    char v21 = static Date.< infix(_:_:)();
    unint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v15, v7);
    if (v21)
    {
      uint64_t v67 = type metadata accessor for Transaction();
      uint64_t v68 = v22;
      double v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v23(v15, a1, v7);
      v23(v71, (uint64_t)v17, v7);
      uint64_t v24 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v25 = (v24 + 25) & ~v24;
      uint64_t v66 = (v9 + v24 + v25) & ~v24;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v70;
      char v27 = v74;
      *(unsigned char *)(v26 + 24) = v74;
      uint64_t v28 = v26 + v25;
      unsigned int v29 = (void (*)(uint64_t, char *, uint64_t))v69;
      v69((char *)v28, v15, v7);
      uint64_t v30 = v73;
      v29(v26 + v66, v71, v7);
      LOBYTE(a2) = v27;
      a1 = v30;
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
      v68(v17, v7);
    }
    else
    {
      v22(v17, v7);
      LOBYTE(a2) = v74;
    }
  }
  unint64_t v31 = 0xE900000000000069;
  int v32 = v72;
  uint64_t v33 = 0x4669577265776F70;
  switch((char)a2)
  {
    case 1:
      uint64_t v33 = 0x6C65437265776F70;
      unint64_t v31 = 0xE90000000000006CLL;
      break;
    case 2:
      uint64_t v33 = 0x5779726574746162;
      uint64_t v34 = 6899305;
      goto LABEL_10;
    case 3:
      uint64_t v33 = 0x4379726574746162;
      uint64_t v34 = 7105637;
LABEL_10:
      unint64_t v31 = v34 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  unint64_t v35 = sub_1002A3600();
  if (*(void *)(v35 + 16) && (uint64_t v36 = sub_100723FF4(v33, v31), (v37 & 1) != 0))
  {
    double v38 = *(void **)(*(void *)(v35 + 56) + 8 * v36);
    swift_bridgeObjectRetain();
  }
  else
  {
    double v38 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v32, a1, v7);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v38 = (void *)sub_100A6E900(0, v38[2] + 1, 1, (unint64_t)v38);
  }
  unint64_t v40 = v38[2];
  unint64_t v39 = v38[3];
  if (v40 >= v39 >> 1) {
    double v38 = (void *)sub_100A6E900(v39 > 1, v40 + 1, 1, (unint64_t)v38);
  }
  void v38[2] = v40 + 1;
  unsigned int v41 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  unint64_t v42 = (unint64_t)v38
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v40;
  uint64_t v72 = (char *)v7;
  v41(v42, v32, v7);
  unint64_t v43 = 0xE900000000000069;
  uint64_t v44 = 0x4669577265776F70;
  switch((char)a2)
  {
    case 1:
      uint64_t v44 = 0x6C65437265776F70;
      unint64_t v43 = 0xE90000000000006CLL;
      break;
    case 2:
      uint64_t v44 = 0x5779726574746162;
      uint64_t v45 = 6899305;
      goto LABEL_23;
    case 3:
      uint64_t v44 = 0x4379726574746162;
      uint64_t v45 = 7105637;
LABEL_23:
      unint64_t v43 = v45 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  swift_bridgeObjectRetain();
  unint64_t v46 = sub_1002A3600();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v75 = v46;
  sub_10016D030((uint64_t)v38, v44, v43, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v48 = self;
  id v49 = [v48 standardUserDefaults];
  sub_10000588C(&qword_101652330);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v51 = String._bridgeToObjectiveC()();
  [v49 setObject:isa forKey:v51];

  sub_1002A3600();
  id v52 = [v48 standardUserDefaults];
  Class v53 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v54 = String._bridgeToObjectiveC()();
  [v52 setObject:v53 forKey:v54];

  static os_log_type_t.default.getter();
  if (qword_1016372B0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_101347500;
  uint64_t v56 = 0x4669577265776F70;
  uint64_t v57 = (void *)v55;
  unint64_t v58 = 0xE900000000000069;
  switch((char)v74)
  {
    case 1:
      uint64_t v56 = 0x6C65437265776F70;
      unint64_t v58 = 0xE90000000000006CLL;
      break;
    case 2:
      uint64_t v56 = 0x5779726574746162;
      uint64_t v59 = 6899305;
      goto LABEL_30;
    case 3:
      uint64_t v56 = 0x4379726574746162;
      uint64_t v59 = 7105637;
LABEL_30:
      unint64_t v58 = v59 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  *(void *)(v55 + 56) = &type metadata for String;
  unint64_t v60 = sub_10000B4CC();
  v57[8] = v60;
  v57[4] = v56;
  v57[5] = v58;
  sub_10092CB24((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
  v57[12] = &type metadata for String;
  v57[13] = v60;
  v57[9] = v61;
  v57[10] = v62;
  uint64_t v63 = v38[2];
  swift_bridgeObjectRelease();
  v57[17] = &type metadata for Int;
  v57[18] = &protocol witness table for Int;
  v57[14] = v63;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009233D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(unsigned char *)(v4 + 64) = a2;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1009233FC, 0, 0);
}

uint64_t sub_1009233FC()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 40) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000033;
  *((void *)v1 + 16) = 0x800000010140C840;
  swift_retain();
  return _swift_task_switch(sub_100923558, v1, 0);
}

uint64_t sub_100923558()
{
  sub_1011A5B08(*(void *)(v0 + 40), *(void *)(v0 + 16));
  swift_release();
  return _swift_task_switch(sub_1009235F4, 0, 0);
}

uint64_t sub_1009235F4()
{
  type metadata accessor for AnalyticsPublisher();
  v0[6] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  void *v1 = v0;
  v1[1] = sub_1009236A8;
  uint64_t v2 = v0[5];
  return sub_101196838(v2);
}

uint64_t sub_1009236A8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1009237C0, 0, 0);
}

uint64_t sub_1009237C0()
{
  sub_1002A3600();
  swift_bridgeObjectRelease();
  id v1 = [self standardUserDefaults];
  sub_10000588C(&qword_101652330);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setObject:isa forKey:v3];

  static os_log_type_t.default.getter();
  if (qword_1016372B0 != -1) {
    swift_once();
  }
  unint64_t v4 = 0xE900000000000069;
  uint64_t v5 = *(unsigned __int8 *)(v0 + 64);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10134BF90;
  uint64_t v7 = 0x4669577265776F70;
  uint64_t v8 = (void *)v6;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE90000000000006CLL;
      uint64_t v7 = 0x6C65437265776F70;
      break;
    case 2:
      unint64_t v4 = 0xEB00000000694669;
      uint64_t v7 = 0x5779726574746162;
      break;
    case 3:
      unint64_t v4 = 0xEB000000006C6C65;
      uint64_t v7 = 0x4379726574746162;
      break;
    default:
      break;
  }
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  v8[8] = v9;
  void v8[4] = v7;
  void v8[5] = v4;
  type metadata accessor for Date();
  sub_10092CB24((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  v8[12] = &type metadata for String;
  v8[13] = v9;
  v8[9] = v10;
  v8[10] = v11;
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  v8[17] = &type metadata for String;
  v8[18] = v9;
  v8[14] = v12;
  v8[15] = v13;
  sub_1002A3600();
  uint64_t v14 = Dictionary.description.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  v8[22] = &type metadata for String;
  v8[23] = v9;
  v8[19] = v14;
  v8[20] = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  int v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100923AEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E640);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E640);
  if (qword_101637640 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F800);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100923BB4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return _swift_task_switch(sub_100923BFC, v1, 0);
}

uint64_t sub_100923BFC()
{
  if (qword_101636E08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E640);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received publish event trigger.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[3];

  uint64_t v9 = sub_10092CB24(&qword_1016522D0, v8, (void (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  void v10[2] = v5;
  v10[3] = v7;
  v10[4] = v6;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  uint64_t v12 = sub_10000588C(&qword_101652300);
  *uint64_t v11 = v0;
  v11[1] = sub_100923DFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v5, v9, 0xD000000000000018, 0x800000010140C7C0, sub_10092C6F8, v10, v12);
}

uint64_t sub_100923DFC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    unint64_t v4 = sub_100923F24;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_task_dealloc();
    unint64_t v4 = sub_100770C28;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100923F24()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100923F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a4;
  uint64_t v7 = sub_10000588C(&qword_101652308);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v16 = sub_10092CB24(&qword_1016522D0, v15, (void (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = v16;
  *((void *)v19 + 4) = a2;
  *((void *)v19 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v17], v10, v7);
  *(void *)&v19[v18] = v22;
  swift_retain();
  swift_retain_n();
  sub_1008F5E44((uint64_t)v13, (uint64_t)&unk_101652318, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_1009241CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  uint64_t v9 = sub_10000588C(&qword_101652308);
  v7[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[11] = v10;
  v7[12] = *(void *)(v10 + 64);
  v7[13] = swift_task_alloc();
  return _swift_task_switch(sub_1009242A0, a4, 0);
}

uint64_t sub_1009242A0()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[6];
  uint64_t v5 = v0[7];
  v0[2] = 0x6873696C627550;
  uint64_t v7 = v0[8];
  uint64_t v13 = v0[9];
  v0[3] = 0xE700000000000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  v0[14] = v10;
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(void *)(v10 + v9) = v13;
  uint64_t v14 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
      + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[15] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100924458;
  return ((uint64_t (*)(void *, void *, uint64_t, uint64_t (*)(), void))v14)(v0 + 2, &unk_101652328, v10, sub_10092BD7C, 0);
}

uint64_t sub_100924458()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    return _swift_task_switch(sub_1009245E4, v4, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_1009245E4()
{
  if (qword_101636E08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E640);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Throttled publish event threw error: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[16];

  v0[4] = v7;
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1009247F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v3[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_1009248EC, 0, 0);
}

uint64_t sub_1009248EC()
{
  if (qword_101636E08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[15] = sub_100010324(v1, (uint64_t)qword_10170E640);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Publish event is executing.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v8 = v0[11];
  uint64_t v7 = v0[12];

  type metadata accessor for FindMyNetworkPublishDateProvider();
  v0[16] = swift_allocObject();
  swift_defaultActor_initialize();
  static Date.trustedNow.getter(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
  sub_10092C2E4(v8);
  unint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  *unint64_t v9 = v0;
  v9[1] = sub_100924AD0;
  uint64_t v10 = v0[8];
  v9[16] = v10;
  return _swift_task_switch(sub_100929DE0, v10, 0);
}

uint64_t sub_100924AD0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100925580, 0, 0);
  }
  else
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 152) = v3;
    *os_log_type_t v3 = v2;
    v3[1] = sub_100924C3C;
    return sub_100928B48();
  }
}

uint64_t sub_100924C3C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100925628;
  }
  else {
    uint64_t v4 = sub_100924D50;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100924D50()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    v0[7] = *(void *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Publish found %ld observations to publish.", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[22] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100924EB0;
  uint64_t v6 = v0[20];
  return sub_100925D88(v6);
}

uint64_t sub_100924EB0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1009256D0;
  }
  else {
    uint64_t v4 = sub_100924FC4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100924FC4()
{
  uint64_t v1 = v0[9];
  if (v1)
  {
    swift_retain();
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[25] = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10092526C;
    uint64_t v3 = v0[20];
    return sub_10092A630(v1, v3, 0);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[20];
    if (v7)
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 134217984;
      uint64_t v10 = *(void *)(v8 + 16);
      swift_bridgeObjectRelease();
      v0[6] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Published %ld observations to Find My network.", v9, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v11 = (void *)v0[23];
    uint64_t v13 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v14 = v0[12];
    uint64_t v15 = sub_1011585AC((uint64_t)&off_1015A5728);
    uint64_t v16 = sub_10092BE88();
    char v17 = sub_100DC6050(v16, v15);
    swift_bridgeObjectRelease();
    char v18 = sub_100031010();
    if (v18) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = 3;
    }
    if (v17) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = (v18 & 1) == 0;
    }
    sub_100922AC8(v12, v20);
    v0[5] = v11;
    id v21 = v11;
    sub_10000588C(&qword_101652308);
    CheckedContinuation.resume(returning:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(uint64_t))v0[1];
    return v22(1);
  }
}

uint64_t sub_10092526C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100925368, 0, 0);
}

uint64_t sub_100925368()
{
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    uint64_t v5 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Published %ld observations to Find My network.", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v6 = (void *)v0[23];
  uint64_t v8 = v0[13];
  uint64_t v7 = v0[14];
  uint64_t v9 = v0[12];
  uint64_t v10 = sub_1011585AC((uint64_t)&off_1015A5728);
  uint64_t v11 = sub_10092BE88();
  char v12 = sub_100DC6050(v11, v10);
  swift_bridgeObjectRelease();
  char v13 = sub_100031010();
  if (v13) {
    unsigned int v14 = 2;
  }
  else {
    unsigned int v14 = 3;
  }
  if (v12) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = (v13 & 1) == 0;
  }
  sub_100922AC8(v7, v15);
  v0[5] = v6;
  id v16 = v6;
  sub_10000588C(&qword_101652308);
  CheckedContinuation.resume(returning:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  char v17 = (uint64_t (*)(uint64_t))v0[1];
  return v17(1);
}

uint64_t sub_100925580()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_100925628()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1009256D0()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[24];
  if (v1)
  {
    swift_retain();
    swift_errorRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[26] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1009259E8;
    uint64_t v4 = v0[20];
    return sub_10092A630(v1, v4, v2);
  }
  else
  {
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[20];
    if (v8)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134218242;
      uint64_t v12 = *(void *)(v9 + 16);
      swift_bridgeObjectRelease();
      v0[3] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2114;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v0[4] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to publish %ld observations to Find My network. %{public}@.", (uint8_t *)v10, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v14 = v0[24];
    uint64_t v16 = v0[13];
    uint64_t v15 = v0[14];
    uint64_t v17 = v0[12];

    v0[2] = v14;
    swift_errorRetain();
    sub_10000588C(&qword_101652308);
    CheckedContinuation.resume(throwing:)();
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    char v18 = (uint64_t (*)(uint64_t))v0[1];
    return v18(1);
  }
}

uint64_t sub_1009259E8()
{
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_100925B00, 0, 0);
}

uint64_t sub_100925B00()
{
  swift_release();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = v1;
    uint64_t v3 = v0[20];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218242;
    uint64_t v6 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v7;
    uint64_t v1 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v2, "Failed to publish %ld observations to Find My network. %{public}@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[24];
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];

  v0[2] = v8;
  swift_errorRetain();
  sub_10000588C(&qword_101652308);
  CheckedContinuation.resume(throwing:)();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(1);
}

uint64_t sub_100925D88(uint64_t a1)
{
  v2[33] = a1;
  v2[34] = v1;
  sub_10000588C(&qword_101638CF0);
  v2[35] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[36] = v3;
  v2[37] = *(void *)(v3 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  v2[39] = v4;
  v2[40] = *(void *)(v4 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101649E20);
  v2[43] = swift_task_alloc();
  v2[44] = type metadata accessor for SubmitEndpoint();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  return _swift_task_switch(sub_100925F54, v1, 0);
}

uint64_t sub_100925F54()
{
  if (*(void *)(v0[33] + 16))
  {
    uint64_t v1 = *(void *)(v0[34] + 128);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101670690 + dword_101670690);
    swift_bridgeObjectRetain();
    swift_retain();
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[47] = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_100926178;
    uint64_t v3 = v0[33];
    return v10(v3, v1);
  }
  else
  {
    if (qword_101636E08 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E640);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observations to publish.", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9(0);
  }
}

uint64_t sub_100926178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[48] = a1;
  v5[49] = a2;
  v5[50] = a3;
  swift_task_dealloc();
  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v5[34];
    return _swift_task_switch(sub_10092631C, v8, 0);
  }
}

uint64_t sub_10092631C()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v5 = v0[45];
  uint64_t v4 = (uint64_t *)v0[46];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  type metadata accessor for AnonymousCrowdSourceNetworkURLComponents();
  swift_allocObject();
  *uint64_t v4 = sub_1001E3CA8();
  uint64_t v8 = (char *)v4 + *(int *)(v7 + 20);
  uint64_t v9 = enum case for FMNAccountType.none(_:);
  uint64_t v10 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v8, v9, v10);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v11 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v13 = swift_allocObject();
  sub_10092C588((uint64_t)v4, v5, (uint64_t (*)(void))type metadata accessor for SubmitEndpoint);
  v0[51] = sub_1004A6CE8(v5, v12, v13);
  sub_10092C5F0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SubmitEndpoint);
  v0[5] = &type metadata for SubmitUploadv2;
  v0[6] = sub_10092C650();
  v0[2] = v3;
  v0[3] = v2;
  v0[4] = v1;
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v1);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[52] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100926558;
  uint64_t v15 = v0[42];
  return sub_100487CFC(v15, (uint64_t)(v0 + 2));
}