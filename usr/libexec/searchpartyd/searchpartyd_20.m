void sub_100DF2E60(unint64_t a1)
{
  sub_100DF30C8(a1, (uint64_t *)&unk_10165F0B0, (unint64_t *)&unk_10164DC30);
}

void *sub_100DF2E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C((uint64_t *)&unk_10165F0A0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_100DF30AC(unint64_t a1)
{
}

void sub_100DF30C8(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_10000588C(a2);
      v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10001D4B0(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10001D4B0(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

Swift::Int sub_100DF342C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C((uint64_t *)&unk_10165F210);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_100DF3570(uint64_t a1)
{
  return sub_100DF357C(a1, &qword_10165F1E8);
}

Swift::Int sub_100DF357C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000588C(a2);
    uint64_t v4 = static _SetStorage.allocate(capacity:)();
    uint64_t v5 = 0;
    uint64_t v6 = v4 + 56;
    uint64_t v7 = a1 + 32;
    while (1)
    {
      Swift::UInt v8 = *(unsigned __int8 *)(v7 + v5);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v8);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      uint64_t v15 = *(void *)(v4 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == v8) {
          goto LABEL_3;
        }
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v15 + v11) == v8) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v6 + 8 * v12) = v14 | v13;
      *(unsigned char *)(v15 + v11) = v8;
      uint64_t v17 = *(void *)(v4 + 16);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(void *)(v4 + 16) = v19;
LABEL_3:
      if (++v5 == v2) {
        return v4;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_100DF36BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C(&qword_10165F158);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      uint64_t v7 = *(char *)(v6 + v4);
      Hasher.init(_seed:)();
      Swift::UInt v8 = qword_10137E8A0[v7];
      Hasher._combine(_:)(v8);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      uint64_t v15 = *(void *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (qword_10137E8A0[*(char *)(v15 + v11)] == v8) {
          goto LABEL_3;
        }
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          if (qword_10137E8A0[*(char *)(v15 + v11)] == v8) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(unsigned char *)(v15 + v11) = v7;
      uint64_t v17 = *(void *)(v3 + 16);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100DF3818(uint64_t a1)
{
  return a1;
}

uint64_t sub_100DF3884(uint64_t a1)
{
  return a1;
}

uint64_t sub_100DF38F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DF3958(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100DF39B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DF3A20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponsePayload(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DF3B34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponsePayload()
{
  return &type metadata for VerifyFindMyNetworkIdResponsePayload;
}

uint64_t sub_100DF3B6C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  Bool.intValue.getter();
  sub_10000D64C();
  uint64_t v1 = FixedWidthInteger.data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

uint64_t sub_100DF3C4C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100DF3D1C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

unint64_t sub_100DF3C7C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DF3CAC();
  unint64_t result = sub_1005FCFFC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100DF3CAC()
{
  unint64_t result = qword_10165F290;
  if (!qword_10165F290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F290);
  }
  return result;
}

uint64_t sub_100DF3D00(void *a1)
{
  return sub_100DF3B6C(a1);
}

uint64_t sub_100DF3D1C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  char v3 = sub_1000BD078((uint64_t)v9, v10);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000362FC();
    DataProtocol.intValue.getter();
    sub_10000D64C();
    char v3 = FixedWidthInteger.BOOLValue.getter();
    sub_10001CFB8(v6, v7);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3 & 1;
}

uint64_t *sub_100DF3E1C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100DF3F50(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100DF4004(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100DF40E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

char *sub_100DF41E4(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t *sub_100DF42B8(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *((unsigned char *)a1 + a3[7]) = a2[a3[7]];
  *(uint64_t *)((char *)a1 + v13) = *(void *)&a2[v13];
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = a2[a3[9]];
  return a1;
}

uint64_t sub_100DF43A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DF43B4);
}

uint64_t sub_100DF43B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100DF4478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DF448C);
}

uint64_t sub_100DF448C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for OwnerSharingCircle()
{
  uint64_t result = qword_10165F2F8;
  if (!qword_10165F2F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100DF4598()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100DF4654()
{
  return sub_100DFA5B8((unint64_t *)&unk_10165F340, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
}

void sub_100DF469C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  v67 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v59[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v59[-v7];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v59[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v59[-v14];
  if (CKRecord.recordType.getter() == 0xD000000000000012 && v16 == 0x800000010137E960)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      sub_100DF8E50();
      swift_allocError();
      *uint64_t v27 = 0;
      goto LABEL_13;
    }
  }
  v66 = v13;
  v69 = v15;
  id v18 = [a1 recordID];
  id v19 = [v18 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  if (v20(v8, 1, v9) == 1)
  {
    sub_100270E18((uint64_t)v8);
    sub_100DF8E50();
    swift_allocError();
    *id v21 = 1;
LABEL_13:
    swift_willThrow();

    return;
  }
  char v22 = v69;
  v63 = *(void (**)(char *, unsigned char *, uint64_t))(v10 + 32);
  uint64_t v64 = v10 + 32;
  v63(v69, v8, v9);
  id v23 = [a1 encryptedValues];
  NSString v24 = String._bridgeToObjectiveC()();
  id v65 = v23;
  id v25 = [v23 objectForKeyedSubscript:v24];

  if (!v25 || (unint64_t v72 = (unint64_t)v25, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    sub_100DF8E50();
    swift_allocError();
    *uint64_t v26 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v22, v9);
    return;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (v20(v6, 1, v9) == 1)
  {
    sub_100270E18((uint64_t)v6);
    goto LABEL_11;
  }
  v63(v66, v6, v9);
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = v65;
  id v30 = [v65 objectForKeyedSubscript:v28];

  if (!v30 || (v70 = (uint64_t)v30, (swift_dynamicCast() & 1) == 0) || (char v31 = v72, v72 > 3))
  {
    sub_100DF8E50();
    swift_allocError();
    *uint64_t v39 = 3;
    swift_willThrow();
    goto LABEL_22;
  }
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v29 objectForKeyedSubscript:v32];

  unint64_t v34 = v66;
  if (!v33 || (unint64_t v72 = (unint64_t)v33, (swift_dynamicCast() & 1) == 0))
  {
    sub_100DF8E50();
    swift_allocError();
    *char v41 = 4;
    swift_willThrow();
    swift_unknownObjectRelease();

    id v40 = *(void (**)(char *, uint64_t))(v10 + 8);
    v40(v34, v9);
    goto LABEL_23;
  }
  uint64_t v35 = v70;
  unint64_t v62 = v71;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10000588C(&qword_10165F368);
  sub_100DF9978();
  uint64_t v36 = v35;
  unint64_t v37 = v62;
  uint64_t v38 = v68;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v38)
  {
    swift_release();
    sub_10001CFB8(v36, v37);
LABEL_22:
    swift_unknownObjectRelease();

    id v40 = *(void (**)(char *, uint64_t))(v10 + 8);
    v40(v66, v9);
LABEL_23:
    v40(v69, v9);
    return;
  }
  uint64_t v68 = v36;
  swift_release();
  uint64_t v42 = v70;
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v65 objectForKeyedSubscript:v43];

  if (!v44
    || (uint64_t v61 = v42, v70 = (uint64_t)v44, (swift_dynamicCast() & 1) == 0)
    || (int v45 = _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(v72), v45 == 6))
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = v66;
    unint64_t v47 = v62;
    uint64_t v48 = v68;
    sub_100DF8E50();
    swift_allocError();
    unsigned char *v49 = 5;
    swift_willThrow();
    sub_10001CFB8(v48, v47);
    swift_unknownObjectRelease();

    id v40 = *(void (**)(char *, uint64_t))(v10 + 8);
    v40(v46, v9);
    goto LABEL_23;
  }
  int v60 = v45;
  id v51 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v51];
  [v51 finishEncoding];
  id v52 = [v51 encodedData];
  uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  sub_10001CFB8(v68, v62);
  swift_unknownObjectRelease();
  v56 = v67;
  uint64_t *v67 = v53;
  v56[1] = v55;
  v57 = (int *)type metadata accessor for OwnerSharingCircle();
  v58 = v63;
  v63((char *)v56 + v57[5], v69, v9);
  v58((char *)v56 + v57[6], v66, v9);
  *(uint64_t *)((char *)v56 + v57[8]) = v61;
  *((unsigned char *)v56 + v57[7]) = v31;
  *((unsigned char *)v56 + v57[9]) = v60;
}

uint64_t sub_100DF4F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = sub_10000588C(&qword_10165F478);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (unsigned __int8 *)&v47 - v14;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v53 = v8;
  uint64_t v55 = a2;
  int64_t v56 = 0;
  uint64_t v50 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v57 = v58 + 16;
  id v51 = (void (**)(char *, unsigned __int8 *, uint64_t))(v58 + 32);
  id v52 = (void (**)(char *, uint64_t))(v58 + 8);
  uint64_t v48 = v17;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  int64_t v47 = v49 - 1;
  char v22 = &qword_10165F480;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v56 << 6);
      id v25 = v53;
LABEL_8:
      char v26 = *(unsigned char *)(*(void *)(v50 + 48) + v24);
      uint64_t v27 = v58;
      unint64_t v28 = *(void *)(v50 + 56) + *(void *)(v58 + 72) * v24;
      uint64_t v29 = sub_10000588C(v22);
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v27 + 16))(&v12[*(int *)(v29 + 48)], v28, v4);
      *uint64_t v12 = v26;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 0, 1, v29);
      uint64_t v30 = v55;
      goto LABEL_27;
    }
    int64_t v31 = v56 + 1;
    id v25 = v53;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v30 = v55;
    if (v31 < v49)
    {
      unint64_t v32 = *(void *)(v48 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v56 + 2;
      ++v56;
      if (v31 + 1 < v49)
      {
        unint64_t v32 = *(void *)(v48 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v56 = v31 + 1;
        if (v31 + 2 < v49)
        {
          unint64_t v32 = *(void *)(v48 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          int64_t v33 = v31 + 3;
          int64_t v56 = v31 + 2;
          if (v31 + 3 < v49) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v34 = sub_10000588C(v22);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 1, 1, v34);
    unint64_t v21 = 0;
LABEL_27:
    sub_10001D608((uint64_t)v12, (uint64_t)v15, &qword_10165F478);
    uint64_t v35 = sub_10000588C(v22);
    int v36 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v15, 1, v35);
    BOOL v37 = v36 == 1;
    if (v36 == 1) {
      return v37;
    }
    uint64_t v38 = &v15[*(int *)(v35 + 48)];
    unsigned __int8 v39 = *v15;
    (*v51)(v25, v38, v4);
    unint64_t v40 = sub_100723FB0(v39);
    if ((v41 & 1) == 0)
    {
      (*v52)(v25, v4);
      return 0;
    }
    uint64_t v42 = v58;
    NSString v43 = v22;
    id v44 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v54, *(void *)(v30 + 56) + *(void *)(v58 + 72) * v40, v4);
    sub_100DFA5B8(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v46(v44, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v25, v4);
    char v22 = v43;
    if ((v45 & 1) == 0) {
      return v37;
    }
  }
  unint64_t v32 = *(void *)(v48 + 8 * v33);
  if (v32)
  {
LABEL_15:
    int64_t v31 = v33;
LABEL_12:
    unint64_t v21 = (v32 - 1) & v32;
    unint64_t v24 = __clz(__rbit64(v32)) + (v31 << 6);
    int64_t v56 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v49)
    {
      int64_t v56 = v47;
      goto LABEL_26;
    }
    unint64_t v32 = *(void *)(v48 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100DF5444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureSupportMatrix();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v53 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v46 - v9);
  uint64_t v11 = sub_10000588C(&qword_10165F420);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v46 - v16;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v50 = a1;
  int64_t v51 = 0;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  int64_t v47 = v49 - 1;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v51 << 6);
LABEL_8:
      uint64_t v24 = *(void *)(a1 + 56);
      char v25 = *(unsigned char *)(*(void *)(a1 + 48) + v23);
      uint64_t v26 = v24 + *(void *)(v53 + 72) * v23;
      uint64_t v27 = sub_10000588C(&qword_10165F428);
      sub_100DF9C74(v26, (uint64_t)&v14[*(int *)(v27 + 48)], (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
      *uint64_t v14 = v25;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 0, 1, v27);
      goto LABEL_27;
    }
    int64_t v28 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v28 < v49)
    {
      unint64_t v29 = *(void *)(v48 + 8 * v28);
      if (v29) {
        goto LABEL_12;
      }
      int64_t v30 = v51 + 2;
      ++v51;
      if (v28 + 1 < v49)
      {
        unint64_t v29 = *(void *)(v48 + 8 * v30);
        if (v29) {
          goto LABEL_15;
        }
        int64_t v51 = v28 + 1;
        if (v28 + 2 < v49)
        {
          unint64_t v29 = *(void *)(v48 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          int64_t v30 = v28 + 3;
          int64_t v51 = v28 + 2;
          if (v28 + 3 < v49) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v31 = sub_10000588C(&qword_10165F428);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
    unint64_t v21 = 0;
LABEL_27:
    sub_10001D608((uint64_t)v14, (uint64_t)v17, &qword_10165F420);
    uint64_t v32 = sub_10000588C(&qword_10165F428);
    int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v17, 1, v32);
    BOOL v34 = v33 == 1;
    if (v33 == 1) {
      return v34;
    }
    uint64_t v35 = (uint64_t)&v17[*(int *)(v32 + 48)];
    char v36 = *v17;
    sub_100DF9CDC(v35, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
    unint64_t v37 = sub_100724020(v36);
    if ((v38 & 1) == 0) {
      goto LABEL_46;
    }
    sub_100DF9C74(*(void *)(a2 + 56) + *(void *)(v53 + 72) * v37, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
    if (*(unsigned __int8 *)v8 != *(unsigned __int8 *)v10 || (sub_100DF5BC8(v8[1], v10[1]) & 1) == 0)
    {
LABEL_45:
      sub_100DF9D44((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
LABEL_46:
      sub_100DF9D44((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
      return 0;
    }
    uint64_t v39 = v10[2];
    if (v8[2])
    {
      if (!v39) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain();
      uint64_t v40 = swift_bridgeObjectRetain();
      char v41 = sub_100DF5BC8(v40, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0) {
        goto LABEL_45;
      }
    }
    else if (v39)
    {
      goto LABEL_45;
    }
    if ((sub_100DF5D60(v8[3], v10[3]) & 1) == 0) {
      goto LABEL_45;
    }
    uint64_t v42 = v10[4];
    if (v8[4])
    {
      if (!v42) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain();
      uint64_t v43 = swift_bridgeObjectRetain();
      char v44 = sub_100DF5D60(v43, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0) {
        goto LABEL_45;
      }
    }
    else if (v42)
    {
      goto LABEL_45;
    }
    sub_1008BB900();
    sub_100940314();
    char v45 = static CustomCodableKeyDictionary<>.== infix(_:_:)();
    sub_100DF9D44((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
    uint64_t result = sub_100DF9D44((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
    a1 = v50;
    if ((v45 & 1) == 0) {
      return v34;
    }
  }
  unint64_t v29 = *(void *)(v48 + 8 * v30);
  if (v29)
  {
LABEL_15:
    int64_t v28 = v30;
LABEL_12:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v23 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v51 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v49)
    {
      int64_t v51 = v47;
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v48 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_12;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_100DF5A28(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    double v18 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_100723FF4(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100DF5BC8(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_100723FF4(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100DF5D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemVersionNumber();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = sub_10000588C(&qword_10165F440);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  int64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v58 = (int64_t *)((char *)&v51 - v14);
  uint64_t v54 = a1;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v16 = a1 + 64;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  int64_t v60 = 0;
  uint64_t v61 = v62 + 16;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v62 + 32);
  int64_t v56 = (void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v52 = v16;
  int64_t v53 = (unint64_t)(v18 + 63) >> 6;
  int64_t v51 = v53 - 1;
  uint64_t v57 = a2;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v22 = v21 | (v60 << 6);
      unint64_t v23 = v58;
LABEL_8:
      uint64_t v24 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v22);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v62;
      unint64_t v28 = *(void *)(v54 + 56) + *(void *)(v62 + 72) * v22;
      uint64_t v29 = sub_10000588C(&qword_10165F448);
      (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(&v12[*(int *)(v29 + 48)], v28, v4);
      *(void *)int64_t v12 = v25;
      *((void *)v12 + 1) = v26;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 0, 1, v29);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    int64_t v30 = v60 + 1;
    unint64_t v23 = v58;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v30 < v53)
    {
      unint64_t v31 = *(void *)(v52 + 8 * v30);
      if (v31) {
        goto LABEL_12;
      }
      int64_t v32 = v60 + 2;
      ++v60;
      if (v30 + 1 < v53)
      {
        unint64_t v31 = *(void *)(v52 + 8 * v32);
        if (v31) {
          goto LABEL_15;
        }
        int64_t v60 = v30 + 1;
        if (v30 + 2 < v53)
        {
          unint64_t v31 = *(void *)(v52 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          int64_t v32 = v30 + 3;
          int64_t v60 = v30 + 2;
          if (v30 + 3 < v53) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v33 = sub_10000588C(&qword_10165F448);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v12, 1, 1, v33);
    unint64_t v20 = 0;
LABEL_27:
    sub_10001D608((uint64_t)v12, (uint64_t)v23, &qword_10165F440);
    uint64_t v34 = sub_10000588C(&qword_10165F448);
    int v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v23, 1, v34);
    BOOL v36 = v35 == 1;
    if (v35 == 1) {
      return v36;
    }
    unint64_t v37 = (char *)v23 + *(int *)(v34 + 48);
    uint64_t v38 = *v23;
    uint64_t v39 = v23[1];
    (*v55)(v8, v37, v4);
    uint64_t v40 = v38;
    uint64_t v41 = v57;
    uint64_t v42 = v8;
    uint64_t v43 = sub_100723FF4(v40, v39);
    char v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      (*v56)(v42, v4);
      return 0;
    }
    uint64_t v46 = v12;
    uint64_t v47 = v62;
    uint64_t v48 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v59, *(void *)(v41 + 56) + *(void *)(v62 + 72) * v43, v4);
    sub_100DFA5B8(&qword_101648A60, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v47 + 8);
    int64_t v12 = v46;
    v50(v48, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v42, v4);
    unint64_t v8 = v42;
    if ((v49 & 1) == 0) {
      return v36;
    }
  }
  unint64_t v31 = *(void *)(v52 + 8 * v32);
  if (v31)
  {
LABEL_15:
    int64_t v30 = v32;
LABEL_12:
    unint64_t v20 = (v31 - 1) & v31;
    unint64_t v22 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v60 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v53)
    {
      int64_t v60 = v51;
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v52 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100DF62C0(uint64_t a1, uint64_t a2)
{
  return sub_100DF62E8(a1, a2, (uint64_t *)&unk_10165F400, &qword_10164F3F8);
}

uint64_t sub_100DF62D4(uint64_t a1, uint64_t a2)
{
  return sub_100DF62E8(a1, a2, &qword_10164B630, &qword_10165F390);
}

uint64_t sub_100DF62E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v46 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a3;
  uint64_t v9 = sub_10000588C(a3);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  int64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v39 - v14;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v48 = 0;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v20 = (uint64_t)v46;
  char v44 = (void (**)(uint64_t, char *, uint64_t))(v45 + 32);
  uint64_t v42 = v45 + 16;
  uint64_t v43 = (uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
  int64_t v41 = (unint64_t)(v17 + 63) >> 6;
  int64_t v39 = v41 - 1;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v48 << 6);
LABEL_8:
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v12, *(void *)(a1 + 48) + *(void *)(v45 + 72) * v22, v51);
      char v23 = *(unsigned char *)(*(void *)(a1 + 56) + v22);
      uint64_t v24 = sub_10000588C(a4);
      v12[*(int *)(v24 + 48)] = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v12, 0, 1, v24);
      goto LABEL_27;
    }
    int64_t v25 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v25 < v41)
    {
      unint64_t v26 = *(void *)(v40 + 8 * v25);
      if (v26) {
        goto LABEL_12;
      }
      int64_t v27 = v48 + 2;
      ++v48;
      if (v25 + 1 < v41)
      {
        unint64_t v26 = *(void *)(v40 + 8 * v27);
        if (v26) {
          goto LABEL_15;
        }
        int64_t v48 = v25 + 1;
        if (v25 + 2 < v41)
        {
          unint64_t v26 = *(void *)(v40 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_12;
          }
          int64_t v27 = v25 + 3;
          int64_t v48 = v25 + 2;
          if (v25 + 3 < v41) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v28 = sub_10000588C(a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v12, 1, 1, v28);
    unint64_t v19 = 0;
LABEL_27:
    sub_10001D608((uint64_t)v12, (uint64_t)v15, v47);
    uint64_t v29 = sub_10000588C(a4);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v15, 1, v29);
    BOOL v49 = v30 == 1;
    if (v30 != 1)
    {
      unint64_t v31 = a4;
      uint64_t v32 = *(int *)(v29 + 48);
      uint64_t v33 = v51;
      (*v44)(v20, v15, v51);
      uint64_t v34 = v15;
      int v35 = v15[v32];
      unint64_t v36 = sub_1007240CC(v20);
      int v50 = v37;
      uint64_t result = (*v43)(v20, v33);
      if (v50)
      {
        BOOL v38 = *(unsigned __int8 *)(*(void *)(a2 + 56) + v36) == v35;
        a4 = v31;
        uint64_t v15 = v34;
        if (v38) {
          continue;
        }
      }
    }
    return v49;
  }
  unint64_t v26 = *(void *)(v40 + 8 * v27);
  if (v26)
  {
LABEL_15:
    int64_t v25 = v27;
LABEL_12:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v22 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v48 = v25;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v41)
    {
      int64_t v48 = v39;
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v40 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_12;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100DF6750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  uint64_t v59 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v52 - v15);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v57 = v5;
  uint64_t v58 = v9;
  int64_t v60 = 0;
  uint64_t v56 = a1;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v18 = a1 + 64;
  uint64_t v17 = v19;
  uint64_t v20 = 1 << *(unsigned char *)(v18 - 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v17;
  uint64_t v54 = v18;
  int64_t v55 = (unint64_t)(v20 + 63) >> 6;
  int64_t v53 = v55 - 1;
  char v23 = (uint64_t *)&unk_1016477D0;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      uint64_t v25 = (v22 - 1) & v22;
      unint64_t v26 = v24 | (v60 << 6);
LABEL_8:
      uint64_t v27 = *(void *)(v56 + 56);
      uint64_t v28 = (uint64_t *)(*(void *)(v56 + 48) + 16 * v26);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      *unint64_t v13 = *v28;
      v13[1] = v30;
      uint64_t v31 = v27 + *(void *)(v5 + 72) * v26;
      uint64_t v32 = sub_10000588C(v23);
      sub_100DF9C74(v31, (uint64_t)v13 + *(int *)(v32 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 0, 1, v32);
      sub_1000361E0(v29, v30);
      goto LABEL_30;
    }
    int64_t v33 = v60 + 1;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v33 < v55)
    {
      unint64_t v34 = *(void *)(v54 + 8 * v33);
      if (v34) {
        goto LABEL_12;
      }
      int64_t v35 = v60 + 2;
      ++v60;
      if (v33 + 1 < v55)
      {
        unint64_t v34 = *(void *)(v54 + 8 * v35);
        if (v34) {
          goto LABEL_15;
        }
        int64_t v60 = v33 + 1;
        if (v33 + 2 < v55)
        {
          unint64_t v34 = *(void *)(v54 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          int64_t v60 = v33 + 2;
          if (v33 + 3 < v55)
          {
            unint64_t v34 = *(void *)(v54 + 8 * (v33 + 3));
            if (v34)
            {
              v33 += 3;
              goto LABEL_12;
            }
            int64_t v35 = v33 + 4;
            int64_t v60 = v33 + 3;
            if (v33 + 4 < v55) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v36 = sub_10000588C(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v13, 1, 1, v36);
    uint64_t v25 = 0;
LABEL_30:
    sub_10001D608((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_10165F410);
    uint64_t v37 = sub_10000588C(v23);
    int v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v16, 1, v37);
    BOOL v61 = v38 == 1;
    if (v38 == 1) {
      return v61;
    }
    unint64_t v39 = v25;
    uint64_t v40 = v23;
    uint64_t v41 = (uint64_t)v16 + *(int *)(v37 + 48);
    uint64_t v42 = *v16;
    unint64_t v43 = v16[1];
    char v44 = v16;
    uint64_t v45 = (uint64_t)v58;
    sub_100DF9CDC(v41, (uint64_t)v58, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v46 = sub_1007241A0(v42, v43);
    char v48 = v47;
    sub_10001CFB8(v42, v43);
    if ((v48 & 1) == 0)
    {
      sub_100DF9D44(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
      return 0;
    }
    uint64_t v5 = v57;
    uint64_t v49 = *(void *)(a2 + 56) + *(void *)(v57 + 72) * v46;
    uint64_t v50 = v59;
    sub_100DF9C74(v49, v59, type metadata accessor for OwnedBeaconGroup.PairingState);
    char v51 = sub_1004D4594(v50, v45);
    sub_100DF9D44(v50, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = sub_100DF9D44(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
    char v23 = v40;
    uint64_t v16 = v44;
    unint64_t v22 = v39;
    if ((v51 & 1) == 0) {
      return v61;
    }
  }
  unint64_t v34 = *(void *)(v54 + 8 * v35);
  if (v34)
  {
LABEL_15:
    int64_t v33 = v35;
LABEL_12:
    uint64_t v25 = (v34 - 1) & v34;
    unint64_t v26 = __clz(__rbit64(v34)) + (v33 << 6);
    int64_t v60 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v33 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v33 >= v55)
    {
      int64_t v60 = v53;
      goto LABEL_29;
    }
    unint64_t v34 = *(void *)(v54 + 8 * v33);
    ++v35;
    if (v34) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100DF6C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v64 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v49 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v13 = sub_10000588C(&qword_10165AB38);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v49 - v18;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v53 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v60 = 0;
  id v65 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v66 = v5 + 16;
  int64_t v54 = (unint64_t)(v21 + 63) >> 6;
  int64_t v55 = (char *)&v49 - v18;
  int64_t v50 = v54 - 1;
  uint64_t v51 = v5;
  uint64_t v52 = a2;
  uint64_t v57 = v12;
  uint64_t v58 = a1;
  uint64_t v56 = v16;
  if (!v23) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v61 = (v23 - 1) & v23;
  unint64_t v24 = __clz(__rbit64(v23)) | (v60 << 6);
  while (2)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v16, *(void *)(a1 + 48) + *(void *)(v5 + 72) * v24, v4);
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = sub_10000588C((uint64_t *)&unk_10165F450);
    *(void *)&v16[*(int *)(v26 + 48)] = *(void *)(v25 + 8 * v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001D608((uint64_t)v16, (uint64_t)v19, &qword_10165AB38);
      uint64_t v31 = sub_10000588C((uint64_t *)&unk_10165F450);
      uint64_t v32 = 1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v19, 1, v31) == 1) {
        return v32;
      }
      uint64_t v33 = *(int *)(v31 + 48);
      (*v59)(v12, v19, v4);
      uint64_t v34 = *(void *)&v19[v33];
      unint64_t v35 = sub_1007240CC((uint64_t)v12);
      char v37 = v36;
      int v38 = *v65;
      (*v65)(v12, v4);
      if ((v37 & 1) == 0
        || (uint64_t v39 = *(void *)(*(void *)(a2 + 56) + 8 * v35), v40 = *(void *)(v39 + 16), v40 != *(void *)(v34 + 16)))
      {
LABEL_44:
        swift_bridgeObjectRelease();
        return 0;
      }
      if (!v40 || v39 == v34)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v16 = v56;
        uint64_t v12 = v57;
        uint64_t v19 = v55;
        a1 = v58;
        unint64_t v23 = v61;
        if (v61) {
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v41 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v62 = *(void *)(v5 + 72);
        uint64_t v63 = v39;
        uint64_t v42 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v40; ++i)
        {
          uint64_t result = v42(v10, v63 + v41, v4);
          if (i >= *(void *)(v34 + 16))
          {
            __break(1u);
            goto LABEL_48;
          }
          uint64_t v44 = v4;
          uint64_t v45 = v10;
          uint64_t v46 = v64;
          v42(v64, v34 + v41, v44);
          sub_100DFA5B8((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          char v48 = v46;
          uint64_t v10 = v45;
          uint64_t v4 = v44;
          v38(v48, v44);
          v38(v10, v44);
          if ((v47 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
          v41 += v62;
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = v51;
        a2 = v52;
        uint64_t v12 = v57;
        a1 = v58;
        uint64_t v19 = v55;
        uint64_t v16 = v56;
        unint64_t v23 = v61;
        if (v61) {
          goto LABEL_6;
        }
      }
LABEL_8:
      int64_t v27 = v60 + 1;
      if (__OFADD__(v60, 1))
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (v27 < v54)
      {
        unint64_t v28 = *(void *)(v53 + 8 * v27);
        if (v28) {
          goto LABEL_11;
        }
        int64_t v29 = v60 + 2;
        ++v60;
        if (v27 + 1 < v54)
        {
          unint64_t v28 = *(void *)(v53 + 8 * v29);
          if (v28) {
            goto LABEL_14;
          }
          int64_t v60 = v27 + 1;
          if (v27 + 2 < v54)
          {
            unint64_t v28 = *(void *)(v53 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_11;
            }
            int64_t v60 = v27 + 2;
            if (v27 + 3 < v54)
            {
              unint64_t v28 = *(void *)(v53 + 8 * (v27 + 3));
              if (v28)
              {
                v27 += 3;
                goto LABEL_11;
              }
              int64_t v29 = v27 + 4;
              int64_t v60 = v27 + 3;
              if (v27 + 4 < v54) {
                break;
              }
            }
          }
        }
      }
LABEL_28:
      uint64_t v30 = sub_10000588C((uint64_t *)&unk_10165F450);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v16, 1, 1, v30);
      uint64_t v61 = 0;
    }
    unint64_t v28 = *(void *)(v53 + 8 * v29);
    if (v28)
    {
LABEL_14:
      int64_t v27 = v29;
LABEL_11:
      int64_t v60 = v27;
      uint64_t v61 = (v28 - 1) & v28;
      unint64_t v24 = __clz(__rbit64(v28)) + (v27 << 6);
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v54)
    {
      int64_t v60 = v50;
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v53 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_100DF72BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v65 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  int64_t v60 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10165F460);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v48 - v16;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v57 = a2;
  int64_t v61 = 0;
  uint64_t v52 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v49 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v50 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v51 = v58 + 16;
  uint64_t v63 = v5 + 16;
  int64_t v55 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v58 + 32);
  uint64_t v53 = (void (**)(char *, uint64_t))(v5 + 8);
  int64_t v54 = (void (**)(uint64_t, uint64_t))(v58 + 8);
  int64_t v48 = v50 - 1;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      uint64_t v23 = (v21 - 1) & v21;
      unint64_t v24 = v22 | (v61 << 6);
LABEL_8:
      uint64_t v25 = v52;
      (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v14, *(void *)(v52 + 48) + *(void *)(v58 + 72) * v24, v65);
      unint64_t v26 = *(void *)(v25 + 56) + *(void *)(v5 + 72) * v24;
      uint64_t v27 = sub_10000588C((uint64_t *)&unk_10165F468);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v27 + 48)], v26, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 0, 1, v27);
      goto LABEL_30;
    }
    int64_t v28 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v28 < v50)
    {
      unint64_t v29 = *(void *)(v49 + 8 * v28);
      if (v29) {
        goto LABEL_12;
      }
      int64_t v30 = v61 + 2;
      ++v61;
      if (v28 + 1 < v50)
      {
        unint64_t v29 = *(void *)(v49 + 8 * v30);
        if (v29) {
          goto LABEL_15;
        }
        int64_t v61 = v28 + 1;
        if (v28 + 2 < v50)
        {
          unint64_t v29 = *(void *)(v49 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          int64_t v61 = v28 + 2;
          if (v28 + 3 < v50)
          {
            unint64_t v29 = *(void *)(v49 + 8 * (v28 + 3));
            if (v29)
            {
              v28 += 3;
              goto LABEL_12;
            }
            int64_t v30 = v28 + 4;
            int64_t v61 = v28 + 3;
            if (v28 + 4 < v50) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v31 = sub_10000588C((uint64_t *)&unk_10165F468);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
    uint64_t v23 = 0;
LABEL_30:
    sub_10001D608((uint64_t)v14, (uint64_t)v17, &qword_10165F460);
    uint64_t v32 = sub_10000588C((uint64_t *)&unk_10165F468);
    int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v17, 1, v32);
    BOOL v62 = v33 == 1;
    if (v33 == 1) {
      return v62;
    }
    unint64_t v64 = v23;
    uint64_t v34 = v14;
    uint64_t v35 = v5;
    char v36 = &v17[*(int *)(v32 + 48)];
    uint64_t v37 = (uint64_t)v60;
    int v38 = v17;
    uint64_t v39 = v65;
    (*v56)(v60, v17, v65);
    (*v55)(v9, v36, v4);
    uint64_t v40 = v57;
    unint64_t v41 = sub_1007240CC(v37);
    char v43 = v42;
    (*v54)(v37, v39);
    if ((v43 & 1) == 0)
    {
      (*v53)(v9, v4);
      return 0;
    }
    uint64_t v5 = v35;
    unint64_t v44 = *(void *)(v40 + 56) + *(void *)(v35 + 72) * v41;
    uint64_t v45 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v59, v44, v4);
    sub_100DFA5B8(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v47 = *(void (**)(char *, uint64_t))(v35 + 8);
    v47(v45, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v9, v4);
    uint64_t v14 = v34;
    uint64_t v17 = v38;
    unint64_t v21 = v64;
    if ((v46 & 1) == 0) {
      return v62;
    }
  }
  unint64_t v29 = *(void *)(v49 + 8 * v30);
  if (v29)
  {
LABEL_15:
    int64_t v28 = v30;
LABEL_12:
    uint64_t v23 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v61 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v50)
    {
      int64_t v61 = v48;
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v49 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_100DF7924(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x737265626D656DLL;
      break;
    case 5:
      unint64_t result = 0x6E61747065636361;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100DF79F8()
{
  unint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = (int *)type metadata accessor for OwnerSharingCircle();
  type metadata accessor for UUID();
  sub_100DFA5B8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[7]));
  uint64_t v5 = *(uint64_t *)((char *)v1 + v4[8]);
  swift_bridgeObjectRetain();
  sub_100DF9434(v7, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[9]));
  return Hasher._finalize()();
}

void sub_100DF7B38(void *a1@<X8>)
{
  *a1 = &off_1015A5AC0;
}

uint64_t sub_100DF7B48()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100DF7BA8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100DF7BF8()
{
  unint64_t result = 0xD000000000000018;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x726168536D657469;
      break;
    case 3:
      unint64_t result = 0x65746167656C6564;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100DF7CAC()
{
  return sub_100DF7924(*v0);
}

uint64_t sub_100DF7CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100DFA2C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100DF7CDC(uint64_t a1)
{
  unint64_t v2 = sub_100DF9B78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DF7D18(uint64_t a1)
{
  unint64_t v2 = sub_100DF9B78();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100DF7D5C(long long *a1, int *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  unint64_t v7 = v4[1];
  sub_1000361E0(v6, v7);
  Data.hash(into:)();
  sub_10001CFB8(v6, v7);
  type metadata accessor for UUID();
  sub_100DFA5B8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[7]));
  uint64_t v8 = *(uint64_t *)((char *)v4 + a2[8]);
  swift_bridgeObjectRetain();
  sub_100DF9434(a1, v8);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[9]));
}

Swift::Int sub_100DF7E7C(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  uint64_t v5 = *v2;
  unint64_t v6 = v4[1];
  sub_1000361E0(v5, v6);
  Data.hash(into:)();
  sub_10001CFB8(v5, v6);
  type metadata accessor for UUID();
  sub_100DFA5B8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[7]));
  uint64_t v7 = *(uint64_t *)((char *)v4 + a2[8]);
  swift_bridgeObjectRetain();
  sub_100DF9434(v9, v7);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[9]));
  return Hasher._finalize()();
}

uint64_t sub_100DF7FB0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170ED28);
  sub_100010324(v0, (uint64_t)qword_10170ED28);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100DF80CC(id *a1)
{
  id v1 = *a1;
  [*a1 encryptedValues];
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  id v3 = v1;
  id v4 = [v3 description:1, 2];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for OwnerSharingCircle();
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_10165F368);
  sub_100DF9A78();
  uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  swift_getObjectType();
  swift_release();
  swift_bridgeObjectRelease();
  UUID.uuidString.getter();
  CKRecordKeyValueSetting.subscript.setter();
  sub_1000361E0(v8, v10);
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_10001CFB8(v8, v10);
}

uint64_t sub_100DF84AC(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10165F3D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100DF9B78();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    unint64_t v9 = (int *)type metadata accessor for OwnerSharingCircle();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_100DFA5B8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *((unsigned char *)v3 + v9[7]);
    char v12 = 3;
    sub_100DF9C20();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)((char *)v3 + v9[8]);
    char v12 = 4;
    sub_10000588C(&qword_10165F368);
    sub_100DF9A78();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *((unsigned char *)v3 + v9[9]);
    char v12 = 5;
    sub_1002C512C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100DF8798@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v31 - 8);
  uint64_t v3 = __chkstk_darwin(v31);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v32 = sub_10000588C(&qword_10165F3B0);
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v10);
  char v12 = (_OWORD *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  int v33 = a1;
  sub_10001CD44(a1, v13);
  sub_100DF9B78();
  uint64_t v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  }
  uint64_t v34 = v7;
  uint64_t v27 = v5;
  uint64_t v15 = v10;
  uint64_t v16 = v31;
  char v36 = 0;
  sub_100037AA0();
  uint64_t v17 = v9;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v12;
  *char v12 = v35;
  LOBYTE(v35) = 1;
  sub_100DFA5B8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v19 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v26 = (int *)v15;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v20(v18 + *(int *)(v15 + 20), v19, v16);
  LOBYTE(v35) = 2;
  unint64_t v21 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v16;
  uint64_t v23 = v26;
  v20(v18 + v26[6], v21, v22);
  char v36 = 3;
  sub_100DF9BCC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v18 + v23[7]) = v35;
  sub_10000588C(&qword_10165F368);
  char v36 = 4;
  sub_100DF9978();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v18 + v23[8]) = v35;
  char v36 = 5;
  sub_1002C5018();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v32);
  *(unsigned char *)(v18 + v23[9]) = v35;
  sub_100DF9C74(v18, v28, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return sub_100DF9D44(v18, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100DF8D44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100DF8798(a1, a2);
}

uint64_t sub_100DF8D5C(void *a1)
{
  return sub_100DF84AC(a1);
}

uint64_t sub_100DF8D74(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DFA5B8(&qword_101660770, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
  uint64_t result = sub_100DFA5B8(&qword_10165F350, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100DF8DF8(uint64_t a1)
{
  uint64_t result = sub_100DFA5B8(&qword_10165E820, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100DF8E50()
{
  unint64_t result = qword_10165F358;
  if (!qword_10165F358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F358);
  }
  return result;
}

void sub_100DF8EA4(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10165F478);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v38 = a2 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v42 = v5 + 16;
  uint64_t v43 = v5;
  uint64_t v45 = (void (**)(char *, uint64_t))(v5 + 8);
  char v46 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  int64_t v37 = v39 - 1;
  uint64_t v44 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v18 = 0;
  int64_t v47 = 0;
  uint64_t v40 = v4;
  unint64_t v41 = v7;
  while (1)
  {
    if (v17)
    {
      Swift::UInt v19 = v18;
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v47 << 6);
LABEL_6:
      uint64_t v22 = v43;
      char v23 = *(unsigned char *)(*(void *)(v44 + 48) + v21);
      unint64_t v24 = *(void *)(v44 + 56) + *(void *)(v43 + 72) * v21;
      uint64_t v25 = sub_10000588C(&qword_10165F480);
      unint64_t v26 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v22 + 16);
      uint64_t v4 = v40;
      v26(&v11[*(int *)(v25 + 48)], v24, v40);
      *uint64_t v11 = v23;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v11, 0, 1, v25);
      Swift::UInt v18 = v19;
      uint64_t v7 = v41;
      goto LABEL_23;
    }
    int64_t v27 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      JUMPOUT(0x100DF9414);
    }
    if (v27 < v39)
    {
      unint64_t v28 = *(void *)(v38 + 8 * v27);
      if (v28) {
        goto LABEL_10;
      }
      int64_t v29 = v47 + 2;
      ++v47;
      if (v27 + 1 < v39)
      {
        unint64_t v28 = *(void *)(v38 + 8 * v29);
        if (v28)
        {
          ++v27;
LABEL_10:
          Swift::UInt v19 = v18;
          unint64_t v17 = (v28 - 1) & v28;
          unint64_t v21 = __clz(__rbit64(v28)) + (v27 << 6);
          int64_t v47 = v27;
          goto LABEL_6;
        }
        int64_t v30 = v27 + 2;
        int64_t v47 = v27 + 1;
        if (v27 + 2 < v39)
        {
          unint64_t v28 = *(void *)(v38 + 8 * v30);
          if (v28)
          {
            v27 += 2;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v27 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_27;
            }
            if (v27 >= v39) {
              break;
            }
            unint64_t v28 = *(void *)(v38 + 8 * v27);
            ++v30;
            if (v28) {
              goto LABEL_10;
            }
          }
          int64_t v47 = v37;
        }
      }
    }
    uint64_t v31 = sub_10000588C(&qword_10165F480);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 1, 1, v31);
    unint64_t v17 = 0;
LABEL_23:
    sub_10001D608((uint64_t)v11, (uint64_t)v13, &qword_10165F478);
    uint64_t v32 = sub_10000588C(&qword_10165F480);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v13, 1, v32) == 1) {
      break;
    }
    (*v46)(v7, &v13[*(int *)(v32 + 48)], v4);
    uint64_t v33 = *((void *)a1 + 8);
    long long v34 = a1[1];
    long long v48 = *a1;
    long long v49 = v34;
    long long v35 = a1[3];
    long long v50 = a1[2];
    long long v51 = v35;
    uint64_t v52 = v33;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100DFA5B8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*v45)(v7, v4);
    v18 ^= Hasher._finalize()();
  }
  swift_release();
  Hasher._combine(_:)(v18);
}

void sub_100DF9434(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164B630);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v37 = a2 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v39 = v5 + 16;
  uint64_t v40 = v5;
  uint64_t v41 = a2;
  uint64_t v42 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  Swift::UInt v18 = (void (**)(char *, uint64_t))(v5 + 8);
  int64_t v38 = (unint64_t)(v15 + 63) >> 6;
  int64_t v36 = v38 - 1;
  swift_bridgeObjectRetain();
  Swift::UInt v19 = 0;
  int64_t v43 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v43 << 6);
LABEL_5:
  uint64_t v22 = v41;
  (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v11, *(void *)(v41 + 48) + *(void *)(v40 + 72) * v21, v4);
  char v23 = *(unsigned char *)(*(void *)(v22 + 56) + v21);
  uint64_t v24 = sub_10000588C(&qword_10165F390);
  v11[*(int *)(v24 + 48)] = v23;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 0, 1, v24);
  while (1)
  {
    sub_10001D608((uint64_t)v11, (uint64_t)v13, &qword_10164B630);
    uint64_t v30 = sub_10000588C(&qword_10165F390);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v13, 1, v30) == 1)
    {
      swift_release();
      Hasher._combine(_:)(v19);
      return;
    }
    uint64_t v31 = *(int *)(v30 + 48);
    (*v42)(v7, v13, v4);
    Swift::UInt v32 = v13[v31];
    uint64_t v33 = *((void *)a1 + 8);
    long long v34 = a1[1];
    long long v44 = *a1;
    long long v45 = v34;
    long long v35 = a1[3];
    long long v46 = a1[2];
    long long v47 = v35;
    uint64_t v48 = v33;
    sub_100DFA5B8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*v18)(v7, v4);
    Hasher._combine(_:)(v32);
    v19 ^= Hasher._finalize()();
    if (v17) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v25 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 < v38)
    {
      unint64_t v26 = *(void *)(v37 + 8 * v25);
      if (v26) {
        goto LABEL_9;
      }
      int64_t v27 = v43 + 2;
      ++v43;
      if (v25 + 1 < v38)
      {
        unint64_t v26 = *(void *)(v37 + 8 * v27);
        if (v26)
        {
          ++v25;
LABEL_9:
          unint64_t v17 = (v26 - 1) & v26;
          unint64_t v21 = __clz(__rbit64(v26)) + (v25 << 6);
          int64_t v43 = v25;
          goto LABEL_5;
        }
        int64_t v28 = v25 + 2;
        int64_t v43 = v25 + 1;
        if (v25 + 2 < v38) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v29 = sub_10000588C(&qword_10165F390);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v11, 1, 1, v29);
    unint64_t v17 = 0;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v28);
  if (v26)
  {
    v25 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v25 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v25 >= v38)
    {
      int64_t v43 = v36;
      goto LABEL_21;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v28;
    if (v26) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
}

BOOL sub_100DF98B0(uint64_t a1, uint64_t a2)
{
  if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0&& (uint64_t v4 = (int *)type metadata accessor for OwnerSharingCircle(), (static UUID.== infix(_:_:)())&& (static UUID.== infix(_:_:)() & 1) != 0&& *(unsigned __int8 *)(a1 + v4[7]) == *(unsigned __int8 *)(a2 + v4[7])&& (sub_100DF62E8(*(void *)(a1 + v4[8]), *(void *)(a2 + v4[8]), &qword_10164B630, &qword_10165F390))
  {
    return *(unsigned __int8 *)(a1 + v4[9]) == *(unsigned __int8 *)(a2 + v4[9]);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_100DF9978()
{
  unint64_t result = qword_10165F370;
  if (!qword_10165F370)
  {
    sub_10000592C(&qword_10165F368);
    sub_100DFA5B8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100DF9A24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F370);
  }
  return result;
}

unint64_t sub_100DF9A24()
{
  unint64_t result = qword_10165F380;
  if (!qword_10165F380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F380);
  }
  return result;
}

unint64_t sub_100DF9A78()
{
  unint64_t result = qword_10165F398;
  if (!qword_10165F398)
  {
    sub_10000592C(&qword_10165F368);
    sub_100DFA5B8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100DF9B24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F398);
  }
  return result;
}

unint64_t sub_100DF9B24()
{
  unint64_t result = qword_10165F3A8;
  if (!qword_10165F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F3A8);
  }
  return result;
}

unint64_t sub_100DF9B78()
{
  unint64_t result = qword_10165F3B8;
  if (!qword_10165F3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F3B8);
  }
  return result;
}

unint64_t sub_100DF9BCC()
{
  unint64_t result = qword_10165F3C8;
  if (!qword_10165F3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F3C8);
  }
  return result;
}

unint64_t sub_100DF9C20()
{
  unint64_t result = qword_10165F3E8;
  if (!qword_10165F3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F3E8);
  }
  return result;
}

uint64_t sub_100DF9C74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DF9CDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DF9D44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for OwnerSharingCircle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    void *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DF9E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharingCircle.CodingKeys()
{
  return &type metadata for OwnerSharingCircle.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for OwnerSharingCircle.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DF9F74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharingCircle.ConversionError()
{
  return &type metadata for OwnerSharingCircle.ConversionError;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DFA078);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleType()
{
  return &type metadata for SharingCircleType;
}

unint64_t sub_100DFA0B4()
{
  unint64_t result = qword_10165F488;
  if (!qword_10165F488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F488);
  }
  return result;
}

unint64_t sub_100DFA10C()
{
  unint64_t result = qword_10165F490;
  if (!qword_10165F490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F490);
  }
  return result;
}

unint64_t sub_100DFA164()
{
  unint64_t result = qword_10165F498;
  if (!qword_10165F498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F498);
  }
  return result;
}

unint64_t sub_100DFA1BC()
{
  unint64_t result = qword_10165F4A0;
  if (!qword_10165F4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F4A0);
  }
  return result;
}

unint64_t sub_100DFA214()
{
  unint64_t result = qword_10165F4A8;
  if (!qword_10165F4A8)
  {
    sub_10000592C(&qword_10165F4B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F4A8);
  }
  return result;
}

unint64_t sub_100DFA274()
{
  unint64_t result = qword_10165F4B8;
  if (!qword_10165F4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F4B8);
  }
  return result;
}

uint64_t sub_100DFA2C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001014183C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E61747065636361 && a2 == 0xEF65746174536563)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_100DFA564()
{
  unint64_t result = qword_10165F4C0;
  if (!qword_10165F4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F4C0);
  }
  return result;
}

uint64_t sub_100DFA5B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100DFA600()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v5 = *(void **)(v0 + 16);
  *unsigned int v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_101637490 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170F2E0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "invalidate", v10, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100DFA7B4(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v7 = *(NSObject **)(v3 + 48);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a1;
  v8[5] = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100E033CC;
  *(void *)(v9 + 24) = v8;
  v14[4] = sub_1003B7AE0;
  v14[5] = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1000A70B0;
  v14[3] = &unk_1015F42E8;
  uint64_t v10 = _Block_copy(v14);
  swift_retain();
  id v11 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFA990()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170ED40);
  sub_100010324(v0, (uint64_t)qword_10170ED40);
  return Logger.init(subsystem:category:)();
}

Swift::Int sub_100DFAA14()
{
  return Hasher._finalize()();
}

uint64_t sub_100DFAA6C()
{
  return String.hash(into:)();
}

Swift::Int sub_100DFAA88()
{
  return Hasher._finalize()();
}

uint64_t sub_100DFAADC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4F60, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100DFAB30(void *a1@<X8>)
{
  *a1 = 0xD000000000000030;
  a1[1] = 0x80000001013F1000;
}

uint64_t sub_100DFAB50()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170ED58);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170ED58);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170ED40);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100DFAC18()
{
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = *(id *)(v0 + 64);
  }
  else
  {
    Swift::Int v3 = (objc_class *)type metadata accessor for AccessoryDiscoveryTrampoline();
    unsigned int v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v5 = [super init];
    id v6 = *(void **)(v0 + 64);
    *(void *)(v0 + 64) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_100DFACB4(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 16) = 0xD000000000000019;
  *(void *)(v2 + 24) = 0x800000010137EE40;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_100E034B4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v2 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  *(void *)(v2 + 56) = XPCSessionManager.init(name:)();
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  uint64_t v9 = v13;
  *(void *)(v2 + 32) = v12;
  *(void *)(v2 + 40) = v9;
  return v2;
}

uint64_t sub_100DFAF84()
{
  uint64_t v1 = *(NSObject **)(v0 + 48);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_100DFC3B4;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_100132424;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000A70B0;
  v5[3] = &unk_1015F4018;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFB0B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MachServiceName();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(a1 + 48);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  sub_100DFAC18();
  if (qword_101637108 != -1) {
LABEL_5:
  }
    swift_once();
  Swift::UInt v18 = (void *)qword_10165F4D0;
  Swift::UInt v19 = self;
  id v20 = v18;
  id v21 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL___SPAccessoryDiscoveryXPCClientProtocol];
  swift_retain_n();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_100DFB454(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED40);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(NSObject **)(v2 + 48);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100E00C74;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  v18[3] = &unk_1015F4180;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFB718(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED40);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(NSObject **)(v2 + 48);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100E036D8;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  v18[3] = &unk_1015F4090;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

id sub_100DFB9DC()
{
  id result = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPAccessoryDiscoveryXPCProtocol];
  qword_10165F4D0 = (uint64_t)result;
  return result;
}

uint64_t sub_100DFBA2C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (void *)v2[6];
  *os_log_type_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = v2[9];
  if (!v11) {
    return result;
  }
  uint64_t v12 = *(NSObject **)(v11 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100E008F8;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015F4108;
  id v15 = _Block_copy(aBlock);
  swift_retain_n();
  id v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_1005E6BFC();
    swift_release();
    v2[9] = 0;
    swift_release();
    v2[10] = 0;
  }
  return swift_release();
}

uint64_t sub_100DFBCF0(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 72))
  {
    type metadata accessor for AccessoryDiscoverySession();
    swift_allocObject();
    uint64_t v4 = sub_1005E6580();
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170ED40);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v15 = v14;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F5C0);
      sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
      v9._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 8250;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 62;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Created new AccessoryDiscoverySession: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    *(void *)(a1 + 72) = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100FD0F90(a2);
  swift_release_n();
  return swift_release();
}

uint64_t sub_100DFBFE4(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 88))
  {
    type metadata accessor for LocalFindableAccessoryDiscoverySession();
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = sub_100F36EDC(v4);
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170ED40);
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      Swift::String v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)Swift::String v9 = 136315138;
      uint64_t v16 = v15;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F5C0);
      sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
      v10._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 8250;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 62;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Created new LocalFindableAccessoryDiscoverySession: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    *(void *)(a1 + 88) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100FD0F90(a2);
  swift_release_n();
  return swift_release();
}

uint64_t sub_100DFC2D8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100DFC338()
{
  sub_100DFC2D8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryDiscoveryService()
{
  return self;
}

uint64_t sub_100DFC390()
{
  return sub_100DFAF84();
}

uint64_t sub_100DFC3B4()
{
  return sub_100DFB0B8(v0);
}

uint64_t sub_100DFC3BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100DFC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100DFC3DC()
{
  return swift_release();
}

uint64_t sub_100DFC3F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100DFC404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return _swift_task_switch(sub_100DFC424, 0, 0);
}

uint64_t sub_100DFC424()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100DFC558;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFC558(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DFC658, 0, 0);
}

uint64_t sub_100DFC658()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[17])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10047464C;
    uint64_t v3 = v0[15];
    return sub_100D662F4(v3, 2, 0x1000000000000000);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100DFC738(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v69 = a4;
  uint64_t v76 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v75 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v73 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v70 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_10165F6A0);
  unsafeFromAsyncTask<A>(_:)();
  id v17 = aBlock;
  if (aBlock)
  {
    uint64_t v66 = a3;
    uint64_t v67 = v8;
    id v18 = [a3 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v19);
    *(&v64 - 2) = v16;
    *(&v64 - 1) = v17;
    uint64_t v68 = v17;
    sub_10000588C(&qword_10165F6B0);
    Lock.callAsFunction<A>(_:)();
    id v20 = aBlock;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v20)
    {
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      uint64_t v22 = qword_10170F060;
      if (os_log_type_enabled((os_log_t)qword_10170F060, v21))
      {
        uint64_t v23 = v20;
        uint64_t v24 = swift_slowAlloc();
        uint64_t v65 = v9;
        int64_t v25 = (uint8_t *)v24;
        unint64_t v64 = (void *)swift_slowAlloc();
        *(_DWORD *)int64_t v25 = 138412290;
        aBlock = v23;
        unint64_t v26 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v64 = v20;

        _os_log_impl((void *)&_mh_execute_header, v22, v21, "TRACE: Create AccessoryPairingSession for %@", v25, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v9 = v65;
        swift_slowDealloc();
      }
      uint64_t v27 = v69;
      uint64_t v28 = *(void *)(v69 + 32);
      uint64_t v29 = *(void *)(v69 + 40);
      type metadata accessor for AccessoryPairingSession();
      swift_allocObject();
      uint64_t v30 = v20;
      swift_retain();
      swift_retain();
      uint64_t v31 = sub_100A75FB0(v28, v29, v30);
      if (v31)
      {
        Swift::UInt v32 = (void **)v31;
        static os_log_type_t.default.getter();
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_101342130;
        aBlock = v32;
        swift_retain();
        uint64_t v34 = String.init<A>(describing:)();
        uint64_t v36 = v35;
        *(void *)(v33 + 56) = &type metadata for String;
        *(void *)(v33 + 64) = sub_10000B4CC();
        *(void *)(v33 + 32) = v34;
        *(void *)(v33 + 40) = v36;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        *(void *)(v27 + 80) = v32;
        swift_retain();
        swift_release();
        sub_100A76740(v66, v76, a2);
      }
      else
      {
        static os_log_type_t.error.getter();
        os_log(_:dso:log:_:_:)();
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        uint64_t v56 = v70;
        uint64_t v55 = v71;
        uint64_t v57 = v72;
        (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for DispatchQoS.QoSClass.default(_:), v72);
        uint64_t v69 = static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
        uint64_t v58 = swift_allocObject();
        *(void *)(v58 + 16) = v76;
        *(void *)(v58 + 24) = a2;
        v82 = sub_100E03680;
        uint64_t v83 = v58;
        aBlock = _NSConcreteStackBlock;
        uint64_t v79 = 1107296256;
        v80 = sub_1004B5480;
        v81 = &unk_1015F43D8;
        uint64_t v59 = _Block_copy(&aBlock);
        swift_retain();
        int64_t v60 = v73;
        static DispatchQoS.unspecified.getter();
        v77 = _swiftEmptyArrayStorage;
        sub_100E034B4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        int64_t v61 = v75;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        BOOL v62 = (void *)v69;
        OS_dispatch_queue.async(group:qos:flags:execute:)();

        _Block_release(v59);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v61, v6);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v60, v67);
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101637308 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v48 = v70;
      uint64_t v47 = v71;
      uint64_t v49 = v72;
      (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for DispatchQoS.QoSClass.default(_:), v72);
      long long v50 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = v76;
      *(void *)(v51 + 24) = a2;
      v82 = sub_100E0343C;
      uint64_t v83 = v51;
      aBlock = _NSConcreteStackBlock;
      uint64_t v79 = 1107296256;
      v80 = sub_1004B5480;
      v81 = &unk_1015F4388;
      uint64_t v52 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v53 = v73;
      static DispatchQoS.unspecified.getter();
      v77 = _swiftEmptyArrayStorage;
      sub_100E034B4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      int64_t v54 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();

      _Block_release(v52);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v6);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v53, v67);
    }
  }
  else
  {
    uint64_t v37 = v9;
    sub_100061234();
    swift_allocError();
    *(void *)uint64_t v38 = 15;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(unsigned char *)(v38 + 40) = 11;
    swift_willThrow();
    swift_errorRelease();
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v40 = v70;
    uint64_t v39 = v71;
    uint64_t v41 = v72;
    (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for DispatchQoS.QoSClass.default(_:), v72);
    uint64_t v42 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v76;
    *(void *)(v43 + 24) = a2;
    v82 = sub_100E03680;
    uint64_t v83 = v43;
    aBlock = _NSConcreteStackBlock;
    uint64_t v79 = 1107296256;
    v80 = sub_1004B5480;
    v81 = &unk_1015F4338;
    long long v44 = _Block_copy(&aBlock);
    swift_retain();
    long long v45 = v73;
    static DispatchQoS.unspecified.getter();
    v77 = _swiftEmptyArrayStorage;
    sub_100E034B4((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    long long v46 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v46, v6);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v45, v8);
  }
  return swift_release();
}

void sub_100DFD43C(void (*a1)())
{
  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100E034B4(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

uint64_t sub_100DFD4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[26] = v5;
  v4[27] = *(void *)(v5 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[30] = v6;
  v4[31] = *(void *)(v6 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_100DFD63C, 0, 0);
}

uint64_t sub_100DFD63C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100DFD770;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFD770(uint64_t a1)
{
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DFD870, 0, 0);
}

uint64_t sub_100DFD870()
{
  uint64_t v38 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[35])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v9 = swift_allocError();
    *uint64_t v10 = 0xD000000000000014;
    v10[1] = 0x8000000101403410;
    swift_willThrow();
LABEL_16:
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_10170F060;
    if (os_log_type_enabled((os_log_t)qword_10170F060, v27))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138543362;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      v0[18] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v27, "Pairing status related error %{public}@", v29, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    Swift::UInt v32 = (void (*)(id, uint64_t))v0[23];
    id v33 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:0 lostModeInfo:0];
    swift_errorRetain();
    v32(v33, v9);
    swift_errorRelease();

    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  uint64_t v2 = (void *)v0[22];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  id v3 = [v2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v3) = [v2 checkSerialNumber];
  unsigned __int8 v4 = [v2 verifyFMNID];
  unsigned int v5 = [v2 verifyWithServer];
  if ((v3 & 1) == 0) {
    goto LABEL_10;
  }
  if (v4)
  {
    if (v5)
    {
      (*(void (**)(void, void, void))(v0[31] + 16))(v0[32], v0[33], v0[30]);
      type metadata accessor for Peripheral();
      Identifier.init(_:)();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[39] = v6;
      void *v6 = v0;
      v6[1] = sub_100DFE1D0;
      uint64_t v7 = v0[28];
      return sub_100D8B7CC(v7);
    }
    goto LABEL_10;
  }
  if (v5)
  {
LABEL_10:
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)v0[22];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170ED40);
    id v13 = v11;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    id v17 = (void *)v0[22];
    if (v16)
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)id v18 = 136446210;
      id v19 = v17;
      id v20 = [v19 description];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      v0[20] = sub_1008FA0F0(v21, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Invalid request %{public}s!", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v24 = v0[33];
    uint64_t v25 = v0[30];
    uint64_t v26 = v0[31];
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v0[19] = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v9 = v0[21];
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(v0[31] + 16))(v0[32], v0[33], v0[30]);
  type metadata accessor for Peripheral();
  Identifier.init(_:)();
  uint64_t v35 = (void *)swift_task_alloc();
  v0[36] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100DFDF48;
  uint64_t v36 = v0[29];
  return sub_100D844B8(v36);
}

uint64_t sub_100DFDF48(uint64_t a1)
{
  unsigned __int8 v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 216);
  v4[37] = v1;
  swift_task_dealloc();
  uint64_t v6 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v4[29];
  uint64_t v8 = v4[26];
  if (v1)
  {
    (*v6)(v7, v8);
    uint64_t v9 = sub_100DFEBB0;
  }
  else
  {
    v4[38] = a1;
    (*v6)(v7, v8);
    uint64_t v9 = sub_100DFE0D4;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100DFE0D4()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  unsigned __int8 v4 = (void (*)(id, void))v0[23];
  id v5 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:v0[38] lostModeInfo:0];
  v4(v5, 0);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100DFE1D0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  unsigned __int8 v4 = (void *)*v2;
  v4[40] = a1;
  v4[41] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[27] + 8))(v3[28], v3[26]);
  if (v1) {
    id v5 = sub_100DFEE0C;
  }
  else {
    id v5 = sub_100DFE340;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100DFE340()
{
  if (*(void *)(v0 + 320) == 3 && [*(id *)(v0 + 176) wantsLostModeInfo])
  {
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    *(void *)(v0 + 336) = Strong;
    if (Strong)
    {
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100DFE664;
      uint64_t v3 = *(void *)(v0 + 264);
      return sub_100E02430(v3);
    }
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 248);
    id v13 = *(void (**)(id, void))(v0 + 184);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    id v14 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:3 lostModeInfo:0];
    id v11 = v14;
    v13(v14, 0);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 320);
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 248);
    uint64_t v9 = *(void (**)(id, void))(v0 + 184);
    os_log(_:dso:log:_:_:)();
    id v10 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:v5 lostModeInfo:0];
    id v11 = v10;
    v9(v10, 0);
  }
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100DFE664(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    unsigned __int8 v4 = sub_100DFE954;
  }
  else {
    unsigned __int8 v4 = sub_100DFE7A0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100DFE7A0()
{
  uint64_t v1 = (void *)v0[44];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v5 = (void (*)(id, void))v0[23];
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v1)
  {
    id v6 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:3 lostModeInfo:v1];
    id v7 = v6;
    v5(v6, 0);
    swift_release();
  }
  else
  {
    id v8 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:3 lostModeInfo:0];
    id v7 = v8;
    v5(v8, 0);
    swift_release();
    uint64_t v1 = v7;
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100DFE954()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[45];
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  id v6 = qword_10170F060;
  if (os_log_type_enabled((os_log_t)qword_10170F060, v5))
  {
    swift_errorRetain();
    swift_errorRetain();
    id v7 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Pairing status related error %{public}@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  id v10 = (void (*)(id, uint64_t))v0[23];
  id v11 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:0 lostModeInfo:0];
  swift_errorRetain();
  v10(v11, v4);
  swift_errorRelease();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100DFEBB0()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[37];
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  id v6 = qword_10170F060;
  if (os_log_type_enabled((os_log_t)qword_10170F060, v5))
  {
    swift_errorRetain();
    swift_errorRetain();
    id v7 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Pairing status related error %{public}@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  id v10 = (void (*)(id, uint64_t))v0[23];
  id v11 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:0 lostModeInfo:0];
  swift_errorRetain();
  v10(v11, v4);
  swift_errorRelease();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100DFEE0C()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[41];
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  id v6 = qword_10170F060;
  if (os_log_type_enabled((os_log_t)qword_10170F060, v5))
  {
    swift_errorRetain();
    swift_errorRetain();
    id v7 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Pairing status related error %{public}@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  id v10 = (void (*)(id, uint64_t))v0[23];
  id v11 = [objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult) initWithPairingStatus:0 lostModeInfo:0];
  swift_errorRetain();
  v10(v11, v4);
  swift_errorRelease();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100DFF068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v3[24] = v5;
  v3[25] = *(void *)(v5 - 8);
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_100DFF18C, 0, 0);
}

uint64_t sub_100DFF18C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100DFF2C0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DFF2C0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DFF3C0, 0, 0);
}

uint64_t sub_100DFF3C0()
{
  id v20 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[28])
  {
    uint64_t v3 = v0[22];
    uint64_t v2 = v0[23];
    uint64_t v4 = v0[21];
    uint64_t v5 = v0[18];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    id v6 = (void *)swift_task_alloc();
    v0[29] = v6;
    void *v6 = v0;
    v6[1] = sub_100DFF77C;
    uint64_t v7 = v0[26];
    return sub_100D7EA88(v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v9 = swift_allocError();
    *id v10 = 0xD000000000000014;
    v10[1] = 0x8000000101403410;
    swift_willThrow();
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170ED40);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      v0[15] = sub_1008FA0F0(0xD000000000000039, 0x8000000101418700, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2114;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s failed with %{public}@!", (uint8_t *)v14, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    id v17 = (void (*)(uint64_t, void))v0[19];
    swift_errorRetain();
    v17(v9, 0);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    id v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_100DFF77C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[30] = a1;
  v4[31] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[25] + 8))(v3[26], v3[24]);
  if (v1) {
    uint64_t v5 = sub_100DFFAD8;
  }
  else {
    uint64_t v5 = sub_100DFF8EC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100DFF8EC()
{
  uint64_t v9 = v0;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170ED40);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 136) = sub_1008FA0F0(0xD000000000000039, 0x8000000101418700, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s completed successfully!", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 240);
  (*(void (**)(void, void *))(v0 + 152))(0, v5);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100DFFAD8()
{
  uint64_t v12 = v0;
  swift_release();
  uint64_t v1 = v0[31];
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED40);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[15] = sub_1008FA0F0(0xD000000000000039, 0x8000000101418700, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s failed with %{public}@!", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void (*)(uint64_t, void))v0[19];
  swift_errorRetain();
  v8(v1, 0);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_100DFFD84(void *a1, void *a2)
{
}

void sub_100DFFDBC(void *a1, void *a2)
{
}

void sub_100DFFDF4(void *a1, void *a2)
{
}

void sub_100DFFE2C(void *a1, void *a2)
{
}

void sub_100DFFE64(void *a1, void *a2)
{
}

void sub_100DFFE9C(void *a1, void *a2)
{
}

void sub_100DFFED4(void *a1, void *a2)
{
}

void sub_100DFFF0C(void *a1, void *a2)
{
}

void sub_100DFFF44(void *a1, void *a2, uint64_t *a3, unint64_t *a4, void (*a5)(uint64_t), uint64_t *a6, unint64_t *a7)
{
  uint64_t v13 = a1 + 4;
  swift_beginAccess();
  id v14 = a2;
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_100E00958(v15, (uint64_t)v14, a3, a4);
  swift_bridgeObjectRelease();

  if (v16)
  {
    if ((*v13 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    a5(v16);
    swift_endAccess();
    swift_release();
    (*(void (**)(uint64_t))(*a1 + 200))(v16);
    uint64_t v31 = a1[4];
    if ((v31 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = *(void *)(v31 + 16);
    }
    long long v50 = a6;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446722;
      sub_10000588C(v50);
      sub_100062734(a7, v50);
      v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 8250;
      v38._object = (void *)0xE200000000000000;
      String.append(_:)(v38);
      v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 62;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      sub_1008FA0F0(60, 0xE100000000000000, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2048;
      if ((a1[4] & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v32) {
        goto LABEL_25;
      }
    }
    else
    {

      swift_release_n();
      if (v32)
      {
LABEL_25:
        swift_release();
        return;
      }
    }
    swift_retain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      sub_10000588C(v50);
      sub_100062734(a7, v50);
      v44._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 8250;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
      v46._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 62;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      sub_1008FA0F0(60, 0xE100000000000000, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s: Final session removed", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v48 = swift_release();
    }
    (*(void (**)(uint64_t))(*a1 + 192))(v48);
    sub_100DFA600();
    goto LABEL_25;
  }
  if (qword_101637490 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F2E0);
  swift_retain_n();
  id v18 = v14;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v49 = (void *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446722;
    sub_10000588C(a6);
    sub_100062734(a7, a6);
    v22._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 8250;
    v23._object = (void *)0xE200000000000000;
    String.append(_:)(v23);
    v24._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 62;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_release();
    sub_1008FA0F0(60, 0xE100000000000000, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2112;
    id v26 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v49 = v18;

    *(_WORD *)(v21 + 22) = 2080;
    v27._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 8250;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 62;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    swift_release();
    sub_1008FA0F0(60, 0xE100000000000000, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s: Attempting to remove unknown connection: %@ from %s", (uint8_t *)v21, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

void sub_100E008F8()
{
  sub_100DFFF44(*(void **)(v0 + 16), *(void **)(v0 + 24), &qword_10163D250, (unint64_t *)&qword_101649B80, (void (*)(uint64_t))sub_1011293A8, (uint64_t *)&unk_10165F5C0, &qword_101666870);
}

uint64_t sub_100E00948()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E00958(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C(a3);
    sub_100062734(a4, a3);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v26 = v28;
    uint64_t v8 = v29;
    uint64_t v9 = v30;
    unint64_t v10 = v31;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    uint64_t v9 = 0;
  }
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    swift_unknownObjectRetain();
    sub_10000588C(a3);
    swift_dynamicCast();
    uint64_t v15 = v32;
    swift_unknownObjectRelease();
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    if (v32)
    {
      do
      {
        sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
        Swift::String v22 = (void *)XPCSession.connection.getter();
        char v23 = static NSObject.== infix(_:_:)();

        if (v23) {
          break;
        }
        uint64_t result = swift_release();
        uint64_t v9 = v16;
        unint64_t v10 = v17;
        if (v4 < 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v10)
        {
          uint64_t v17 = (v10 - 1) & v10;
          unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
          uint64_t v16 = v9;
        }
        else
        {
          int64_t v19 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            return result;
          }
          if (v19 >= v25) {
            goto LABEL_33;
          }
          unint64_t v20 = *(void *)(v26 + 8 * v19);
          uint64_t v16 = v9 + 1;
          if (!v20)
          {
            uint64_t v16 = v9 + 2;
            if (v9 + 2 >= v25) {
              goto LABEL_33;
            }
            unint64_t v20 = *(void *)(v26 + 8 * v16);
            if (!v20)
            {
              uint64_t v16 = v9 + 3;
              if (v9 + 3 >= v25) {
                goto LABEL_33;
              }
              unint64_t v20 = *(void *)(v26 + 8 * v16);
              if (!v20)
              {
                uint64_t v16 = v9 + 4;
                if (v9 + 4 >= v25) {
                  goto LABEL_33;
                }
                unint64_t v20 = *(void *)(v26 + 8 * v16);
                if (!v20)
                {
                  uint64_t v16 = v9 + 5;
                  if (v9 + 5 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = *(void *)(v26 + 8 * v16);
                  if (!v20)
                  {
                    uint64_t v21 = v9 + 6;
                    while (v25 != v21)
                    {
                      unint64_t v20 = *(void *)(v26 + 8 * v21++);
                      if (v20)
                      {
                        uint64_t v16 = v21 - 1;
                        goto LABEL_28;
                      }
                    }
                    goto LABEL_33;
                  }
                }
              }
            }
          }
LABEL_28:
          uint64_t v17 = (v20 - 1) & v20;
          unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
        }
        uint64_t v15 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
        swift_retain();
      }
      while (v15);
    }
  }
  else
  {
LABEL_33:
    uint64_t v15 = 0;
  }
  sub_100132C20();
  return v15;
}

uint64_t sub_100E00C74()
{
  return sub_100DFBA2C(*(void **)(v0 + 24));
}

uint64_t sub_100E00C9C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100E00CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10165F6B8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170ED40);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccessoryDiscoveryService.start", v11, 2u);
    swift_slowDealloc();
  }

  id v12 = [self currentConnection];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v25 = v5;
    uint64_t v14 = *(NSObject **)(a1 + 48);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    *(void *)(v15 + 24) = v13;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_100E0345C;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1003B7AE0;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A70B0;
    aBlock[3] = &unk_1015F4450;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v18 = v13;
    swift_release();
    dispatch_sync(v14, v17);
    _Block_release(v17);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v14)
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 72);
      if (v19)
      {
        if (*(void *)(v19 + 72))
        {
          swift_retain();
        }
        else
        {
          swift_retain();
          aBlock[0] = sub_101322EC0();
          sub_10000588C(&qword_10165F6C0);
          sub_100062734(&qword_10165F6C8, &qword_10165F6C0);
          sub_100E034B4(&qword_10165F6D0, type metadata accessor for CBManagerState);
          Publisher<>.removeDuplicates()();
          swift_release();
          swift_allocObject();
          swift_weakInit();
          sub_100062734(&qword_10165F6D8, &qword_10165F6B8);
          uint64_t v24 = Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v4);
          *(void *)(v19 + 72) = v24;
          swift_release();
        }
        sub_1005E8F04();
        (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);

        swift_release();
      }
      else
      {
        type metadata accessor for SPAccessoryDiscoverySessionError(0);
        uint64_t v27 = 2;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        Swift::String v22 = (void *)aBlock[0];
        char v23 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v23);
      }
    }
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    uint64_t v27 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v20 = (void *)aBlock[0];
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v21);
  }
}

void sub_100E0124C(uint64_t a1, uint64_t a2)
{
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED40);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AccessoryDiscoveryService.stopAccessoryDiscovery", v7, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(a1 + 72))
  {
    swift_retain();
    sub_1005E6BFC();
    (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);
    swift_release();
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v8);
  }
}

void sub_100E0142C(uint64_t a1, uint64_t a2)
{
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED40);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AccessoryDiscoveryService.startLocalFindableAccessoryDiscovery", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = [self currentConnection];
  if (!v8)
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    uint64_t v18 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v15);

LABEL_11:
    return;
  }
  uint64_t v9 = v8;
  os_log_type_t v10 = *(NSObject **)(a1 + 48);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v9;
  id v12 = (void *)swift_allocObject();
  v12[2] = sub_100E0336C;
  v12[3] = v11;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015F4270;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v14 = v9;
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v10 & 1) == 0)
  {
    if (*(void *)(a1 + 88))
    {
      swift_retain();
      sub_1001A2DE4();
      (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);

      swift_release();
      return;
    }
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    uint64_t v18 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v16 = aBlock[0];
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v15);

    goto LABEL_11;
  }
  __break(1u);
}

void sub_100E017E0(uint64_t a1, uint64_t a2)
{
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED40);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AccessoryDiscoveryService.stopLocalFindableAccessoryDiscovery", v7, 2u);
    swift_slowDealloc();
  }

  if (qword_101637100 != -1) {
    swift_once();
  }
  sub_100010324(v4, (uint64_t)qword_10170ED58);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "TRACE: stopLocalFindableAccessoryDiscovery() ", v10, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(a1 + 88))
  {
    uint64_t v11 = qword_1016368E0;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    sub_100010324(v4, (uint64_t)qword_10170D800);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "TRACE: stopScanning()", v14, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);
    swift_release();
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v15);
  }
}

uint64_t sub_100E01B20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170ED40);
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccessoryDiscoveryService.disableFindMyPairing", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v14 + v13, (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1008F5E44((uint64_t)v7, (uint64_t)&unk_10165F698, v14);
  return swift_release();
}

void sub_100E01DA0(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  _Block_copy(a4);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (*(void *)(a3 + 80))
  {
    swift_retain();
    sub_100A7963C(a1, a2, (uint64_t)sub_1001DFD28, v8);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v9 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v9);
    swift_release();
  }
}

void sub_100E01F84(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (*(void *)(a2 + 80))
  {
    swift_retain();
    sub_100A7B0CC(a1, (uint64_t)sub_1001DF814, v6);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E034B4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v7);
    swift_release();
  }
}

uint64_t sub_100E0215C(void *a1)
{
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED40);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "shouldAccept: %@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10041EB78();
  char v9 = NSXPCConnection.hasEntitlement<A>(_:)();
  if ((v9 & 1) == 0)
  {
    os_log_type_t v10 = v3;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 138412290;
      uint64_t v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v10;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing entitlement: %@", v13, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v11 = v10;
    }
  }
  return v9 & 1;
}

uint64_t sub_100E02430(uint64_t a1)
{
  v1[17] = a1;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[18] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v1[22] = v3;
  v1[23] = *(void *)(v3 - 8);
  v1[24] = swift_task_alloc();
  v1[25] = type metadata accessor for LostModeAlertInfo();
  v1[26] = swift_task_alloc();
  return _swift_task_switch(sub_100E025B0, 0, 0);
}

uint64_t sub_100E025B0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639180 + dword_101639180);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E026E4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E026E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E027E4, 0, 0);
}

uint64_t sub_100E027E4()
{
  uint64_t v19 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[28])
  {
    uint64_t v3 = v0[20];
    uint64_t v2 = v0[21];
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[29] = v6;
    void *v6 = v0;
    v6[1] = sub_100E02BAC;
    uint64_t v7 = v0[26];
    uint64_t v8 = v0[24];
    return sub_10102909C(v7, v8);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *os_log_type_t v10 = 0xD000000000000025;
    v10[1] = 0x8000000101417C70;
    swift_willThrow();
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170ED40);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      v0[15] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418680, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2114;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s failed with lost mode related error %{public}@!", (uint8_t *)v14, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17(0);
  }
}

uint64_t sub_100E02BAC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[23] + 8))(v2[24], v2[22]);
  if (v0) {
    uint64_t v3 = sub_100E02E70;
  }
  else {
    uint64_t v3 = sub_100E02D14;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100E02D14()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[18];
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(v1 + 20));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(v1 + 24));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
  id v11 = objc_allocWithZone((Class)SPLostModeInfo);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = sub_100B23CB8(0, 0, v5, v6, v8, v9, v3);
  swift_release();
  sub_100E03124(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(id))v0[1];
  return v13(v12);
}

uint64_t sub_100E02E70()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170ED40);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[15] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418680, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failed with lost mode related error %{public}@!", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_100E03124(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeAlertInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100E03180()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E031B8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100E03284()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  v4[15] = v3;
  return _swift_task_switch(sub_100DFC424, 0, 0);
}

uint64_t sub_100E0336C()
{
  return sub_100DFBFE4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100E03374()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E03384()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100E033CC()
{
  return sub_100DFC738(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100E033D8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E033E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100E03420(void *a1@<X8>)
{
  sub_101323FE0(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_100E0343C()
{
  sub_100DFD43C(*(void (**)())(v0 + 16));
}

uint64_t sub_100E0345C()
{
  return sub_100DFBCF0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100E03464()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E03474()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_100E034AC(void *result)
{
  return sub_1005E71B0(result);
}

uint64_t sub_100E034B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryDiscoveryEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100E03598);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryDiscoveryEntitlement()
{
  return &type metadata for AccessoryDiscoveryEntitlement;
}

unint64_t sub_100E035D4()
{
  unint64_t result = qword_10165F6F8;
  if (!qword_10165F6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F6F8);
  }
  return result;
}

unint64_t sub_100E0362C()
{
  unint64_t result = qword_10165F700;
  if (!qword_10165F700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F700);
  }
  return result;
}

uint64_t sub_100E036DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100E036F0);
}

uint64_t sub_100E036F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100E037A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100E037B4);
}

void *sub_100E037B4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    void *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FetchEndpoint()
{
  uint64_t result = qword_10165F768;
  if (!qword_10165F768) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100E038A8()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x68637465662FLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

void *sub_100E039A8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1000B6ED0(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    unint64_t v16 = v1 & 0xC000000000000001;
    unint64_t v5 = v1;
    while (v2 != v4)
    {
      if (v16) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      id v7 = v6;
      id v8 = [v7 request];
      id v9 = [v8 identifier];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1000B6ED0(v13 > 1, v14 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      unint64_t v1 = v5;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100E03B54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170ED70);
  sub_100010324(v0, (uint64_t)qword_10170ED70);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100E03BD8()
{
  type metadata accessor for UserNotificationPublisher();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  qword_10170ED88 = result;
  return result;
}

uint64_t sub_100E03C10(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, BOOL))
{
  if (!a1)
  {
    if (qword_101637110 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170ED70);
    sub_10001D010(a2, (uint64_t)v22);
    id v7 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      sub_10001D010((uint64_t)v22, (uint64_t)v20);
      sub_10000588C(&qword_1016556A0);
      uint64_t v17 = String.init<A>(describing:)();
      v20[0] = sub_1008FA0F0(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v7, v15, "Successfuly posted user notification for notification: %s", v16, 0xCu);
LABEL_10:
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a3) {
        return sub_100A324D8(a1, a1 != 0);
      }
      goto LABEL_13;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);

    if (!a3) {
      return sub_100A324D8(a1, a1 != 0);
    }
LABEL_13:
    a3(a1, a1 != 0);
    return sub_100A324D8(a1, a1 != 0);
  }
  swift_errorRetain();
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170ED70);
  sub_10001D010(a2, (uint64_t)v22);
  swift_errorRetain();
  swift_errorRetain();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_10001D010((uint64_t)v22, (uint64_t)v20);
    sub_10000588C(&qword_1016556A0);
    uint64_t v10 = String.init<A>(describing:)();
    v20[0] = sub_1008FA0F0(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    *(_WORD *)(v9 + 12) = 2080;
    v20[0] = a1;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v12 = String.init<A>(describing:)();
    v20[0] = sub_1008FA0F0(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to post user notification for notification: %s due to error: %s", (uint8_t *)v9, 0x16u);
    goto LABEL_10;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  swift_errorRelease();
  swift_errorRelease();

  if (a3) {
    goto LABEL_13;
  }
  return sub_100A324D8(a1, a1 != 0);
}

void sub_100E04010(unint64_t a1, uint64_t a2, void *a3)
{
  v7[2] = a2;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000A5040(sub_100E06018, v7, a1);
  sub_100E039A8((unint64_t)v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a3 removeDeliveredNotificationsWithIdentifiers:isa];
}

uint64_t sub_100E040BC(unsigned __int8 a1)
{
  int v1 = a1;
  switch(a1 >> 5)
  {
    case 2:
      uint64_t result = 0xD00000000000002BLL;
      switch(v1)
      {
        case 'A':
          uint64_t result = 0xD000000000000030;
          break;
        case 'B':
          uint64_t result = 0xD000000000000024;
          break;
        case 'C':
          uint64_t result = 0xD00000000000001BLL;
          break;
        default:
          return result;
      }
      break;
    case 3:
      uint64_t result = 0xD000000000000025;
      switch(v1)
      {
        case 'a':
          uint64_t result = 0xD00000000000003ELL;
          break;
        case 'b':
        case 'c':
          uint64_t result = 0xD00000000000003FLL;
          break;
        default:
          return result;
      }
      break;
    case 4:
      uint64_t result = 0xD00000000000002FLL;
      switch(v1)
      {
        case 129:
          uint64_t result = 0xD000000000000033;
          break;
        case 130:
          uint64_t result = 0xD000000000000032;
          break;
        case 131:
          uint64_t result = 0xD000000000000038;
          break;
        default:
          return result;
      }
      break;
    case 5:
      unint64_t v3 = 0xD000000000000036;
      if (a1 == 161) {
        unint64_t v3 = 0xD000000000000040;
      }
      if (a1 == 160) {
        uint64_t result = 0xD00000000000003FLL;
      }
      else {
        uint64_t result = v3;
      }
      break;
    default:
      uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
  }
  return result;
}

uint64_t sub_100E04354(id *a1, void *a2)
{
  return sub_100E04370(a1, a2) & 1;
}

uint64_t sub_100E04370(id *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v33[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = *a1;
  id v8 = [v32 request];
  id v9 = [v8 identifier];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  uint64_t v14 = a2[3];
  uint64_t v13 = a2[4];
  sub_10001CD44(a2, v14);
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 == v15 && v12 == v17)
  {
    swift_bridgeObjectRelease_n();
    sub_10001D010((uint64_t)a2, (uint64_t)v33);
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001D010((uint64_t)a2, (uint64_t)v33);
    char v20 = 0;
    if ((v19 & 1) == 0) {
      goto LABEL_13;
    }
  }
  id v21 = [v32 request];
  id v22 = [v21 content];

  id v23 = [v22 categoryIdentifier];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  uint64_t v27 = v34;
  uint64_t v28 = v35;
  sub_10001CD44(v33, v34);
  unsigned __int8 v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  if (v24 == sub_100E040BC(v29) && v26 == v30) {
    char v20 = 1;
  }
  else {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return v20 & 1;
}

uint64_t sub_100E04650(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, BOOL))
{
  if (!a1)
  {
    if (qword_101637110 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170ED70);
    sub_10001D010(a2, (uint64_t)v26);
    sub_10001D010(a3, (uint64_t)v25);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      sub_10001D010((uint64_t)v26, (uint64_t)v23);
      sub_10000588C(&qword_1016556A0);
      uint64_t v18 = String.init<A>(describing:)();
      v23[0] = sub_1008FA0F0(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
      *(_WORD *)(v10 + 12) = 2080;
      sub_10001D010((uint64_t)v25, (uint64_t)v23);
      uint64_t v20 = String.init<A>(describing:)();
      v23[0] = sub_1008FA0F0(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
      uint64_t v15 = "Successfuly updated user notification %s with %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v15, (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a4) {
        return sub_100A324D8(a1, a1 != 0);
      }
      goto LABEL_13;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);

    if (!a4) {
      return sub_100A324D8(a1, a1 != 0);
    }
LABEL_13:
    a4(a1, a1 != 0);
    return sub_100A324D8(a1, a1 != 0);
  }
  swift_errorRetain();
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170ED70);
  sub_10001D010(a3, (uint64_t)v26);
  swift_errorRetain();
  swift_errorRetain();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_10001D010((uint64_t)v26, (uint64_t)v25);
    sub_10000588C(&qword_1016556A0);
    uint64_t v11 = String.init<A>(describing:)();
    v25[0] = sub_1008FA0F0(v11, v12, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
    *(_WORD *)(v10 + 12) = 2080;
    v25[0] = a1;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v13 = String.init<A>(describing:)();
    v25[0] = sub_1008FA0F0(v13, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v15 = "Failed to update notification for notification: %s due to error: %s";
    goto LABEL_10;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  swift_errorRelease();
  swift_errorRelease();

  if (a4) {
    goto LABEL_13;
  }
  return sub_100A324D8(a1, a1 != 0);
}

uint64_t sub_100E04A98()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserNotificationPublisher()
{
  return self;
}

BOOL sub_100E04AF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100E04B6C(*a1, *a2);
}

uint64_t sub_100E04B00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

BOOL sub_100E04B6C(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1 >> 5)
  {
    case 1:
      if ((a2 & 0xE0) != 0x20) {
        goto LABEL_41;
      }
      BOOL result = ((a2 ^ a1) & 0x1F) == 0;
      break;
    case 2:
      switch(a1)
      {
        case 'A':
          if (a2 != 65) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 'B':
          if (a2 != 66) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 'C':
          if (a2 != 67) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        default:
          if (a2 != 64) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
      }
      break;
    case 3:
      switch(a1)
      {
        case 'a':
          if (a2 != 97) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 'b':
          if (a2 != 98) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 'c':
          if (a2 != 99) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        default:
          if (a2 != 96) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
      }
      break;
    case 4:
      switch(a1)
      {
        case 0x81u:
          if (a2 != 129) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 0x82u:
          if (a2 != 130) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        case 0x83u:
          if (a2 != 131) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
        default:
          if (a2 != 128) {
            goto LABEL_41;
          }
          BOOL result = 1;
          break;
      }
      break;
    case 5:
      if (a1 == 160)
      {
        if (a2 != 160) {
          goto LABEL_41;
        }
        BOOL result = 1;
      }
      else if (a1 == 161)
      {
        if (a2 != 161) {
          goto LABEL_41;
        }
        BOOL result = 1;
      }
      else
      {
        if (a2 != 162) {
          goto LABEL_41;
        }
        BOOL result = 1;
      }
      break;
    default:
      if (a2 > 0x1Fu) {
LABEL_41:
      }
        BOOL result = 0;
      else {
        BOOL result = a1 == a2;
      }
      break;
  }
  return result;
}

id sub_100E04D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101649E40);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  os_log_type_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 - 8);
  __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  id v13 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  (*(void (**)(uint64_t, uint64_t))(a3 + 96))(a2, a3);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    uint64_t v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  }
  [v13 setDefaultActionURL:v17];

  id v19 = [self defaultSound];
  [v13 setSound:v19];

  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  unsigned __int8 v21 = v20(a2, a3);
  sub_100E040BC(v21);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setCategoryIdentifier:v22];

  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setTitle:v23];

  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setBody:v24];

  if (v20(a2, a3) == 67) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = 2;
  }
  [v13 setInterruptionLevel:v25];
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  char v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v36 = &type metadata for Bool;
  LOBYTE(v35) = v27 & 1;
  sub_100173E4C(&v35, v34);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = v26;
  sub_10016C700(v34, 0xD000000000000023, 0x8000000101418C10, isUniquelyReferenced_nonNull_native);
  uint64_t v29 = v33;
  swift_bridgeObjectRelease();
  sub_100653C34(v29);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setUserInfo:isa];

  [v13 setShouldIgnoreDoNotDisturb:((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) & 1)];
  [v13 setShouldUseRequestIdentifierForDismissalSync:((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3) & 1)];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a2);
  return v13;
}

uint64_t sub_100E0525C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[3] = a4;
  v61[4] = a5;
  uint64_t v14 = sub_10001D958(v61);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v14, a1, a4);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 72))(a4, a5))
  {
    uint64_t v53 = a2;
    uint64_t v54 = a3;
    (*(void (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
    id v15 = objc_allocWithZone((Class)UNUserNotificationCenter);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v52 = [v15 initWithBundleIdentifier:v16];

    id v17 = sub_100E04D84((uint64_t)v14, a4, a5);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5)) {
      uint64_t v18 = 15;
    }
    else {
      uint64_t v18 = 7;
    }
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(a5 + 16);
    v48(a4, a5);
    UUID.uuidString.getter();
    id v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v51 = v10;
    uint64_t v50 = v11 + 8;
    uint64_t v49 = v19;
    v19(v13, v10);
    id v20 = v17;
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = v20;
    swift_bridgeObjectRelease();
    id v23 = [self requestWithIdentifier:v21 content:v20 trigger:0 destinations:v18];

    if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a4, a5) & 1) == 0)
    {
      if (qword_101637110 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170ED70);
      sub_10001D010((uint64_t)v61, (uint64_t)aBlock);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        id v47 = v23;
        Swift::String v46 = v22;
        uint64_t v28 = (uint8_t *)v27;
        *(void *)&v59[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        Swift::String v45 = v28 + 4;
        sub_10001CD44(aBlock, (uint64_t)v56);
        v48(a4, a5);
        sub_10028B80C();
        uint64_t v29 = v51;
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v32 = v31;
        v49(v13, v29);
        uint64_t v60 = sub_1008FA0F0(v30, v32, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        NSString v22 = v46;
        id v23 = v47;
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
      }
    }
    sub_10001D010((uint64_t)v61, (uint64_t)v59);
    uint64_t v39 = swift_allocObject();
    sub_10001CEB0(v59, v39 + 16);
    uint64_t v41 = v53;
    uint64_t v40 = v54;
    *(void *)(v39 + 56) = v53;
    *(void *)(v39 + 64) = v40;
    uint64_t v57 = sub_1002F6720;
    uint64_t v58 = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100769474;
    uint64_t v56 = &unk_1015F4558;
    os_log_type_t v42 = _Block_copy(aBlock);
    sub_1000BD0E8(v41);
    swift_release();
    id v43 = v52;
    [v52 addNotificationRequest:v23 withCompletionHandler:v42];

    _Block_release(v42);
  }
  else
  {
    if (qword_101637110 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10170ED70);
    sub_10001D010((uint64_t)v61, (uint64_t)aBlock);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      sub_10001D010((uint64_t)aBlock, (uint64_t)v59);
      sub_10000588C(&qword_1016556A0);
      uint64_t v37 = String.init<A>(describing:)();
      *(void *)&v59[0] = sub_1008FA0F0(v37, v38, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Refusing to post disabled notification: %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v61);
}

void *sub_100E059C4(unsigned __int8 a1)
{
  id v2 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithBundleIdentifier:v3];

  id v5 = [v4 deliveredNotifications];
  sub_100E05FD8();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_45;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    JUMPOUT(0x100E05F90);
  }
  id v28 = v4;
  uint64_t v8 = 0;
  unsigned int v9 = a1;
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v11 = v10;
    id v12 = [v10 request];
    id v13 = [v12 content];

    id v14 = [v13 categoryIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    switch(v9 >> 5)
    {
      case 2u:
        uint64_t v18 = 0xD00000000000002BLL;
        unint64_t v19 = 0x8000000101418BE0;
        switch(v9)
        {
          case 'A':
            uint64_t v18 = 0xD000000000000030;
            id v20 = "com.apple.findmy.lowbattery";
            goto LABEL_36;
          case 'B':
            uint64_t v18 = 0xD000000000000024;
            id v20 = "kingUserNotificationDelegate";
            goto LABEL_36;
          case 'C':
            uint64_t v18 = 0xD00000000000001BLL;
            id v20 = ".localnotifywhenfound";
            goto LABEL_36;
          default:
            goto LABEL_37;
        }
      case 3u:
        uint64_t v18 = 0xD000000000000025;
        unint64_t v19 = 0x8000000101418B50;
        switch(v9)
        {
          case 'a':
            uint64_t v18 = 0xD00000000000003ELL;
            id v20 = "consharing.sharerequestreceived";
            goto LABEL_36;
          case 'b':
            uint64_t v24 = "consharing.sharingcircleupdated";
            goto LABEL_33;
          case 'c':
            uint64_t v24 = ".searchparty.updatelitelocation";
LABEL_33:
            unint64_t v19 = (unint64_t)v24 | 0x8000000000000000;
            uint64_t v18 = 0xD00000000000003FLL;
            break;
          default:
            goto LABEL_37;
        }
        break;
      case 4u:
        uint64_t v18 = 0xD00000000000002FLL;
        unint64_t v19 = 0x8000000101418A60;
        switch(v9)
        {
          case 0x81u:
            uint64_t v18 = 0xD000000000000033;
            id v20 = "egatedsharing.stop";
            goto LABEL_36;
          case 0x82u:
            uint64_t v18 = 0xD000000000000032;
            id v20 = "egatedsharing.expiration";
            goto LABEL_36;
          case 0x83u:
            uint64_t v18 = 0xD000000000000038;
            id v20 = "egatedsharing.reunitedwithowner";
LABEL_36:
            unint64_t v19 = (unint64_t)v20 | 0x8000000000000000;
            break;
          default:
            goto LABEL_37;
        }
        break;
      case 5u:
        unint64_t v21 = 0xD000000000000036;
        if (v9 == 161) {
          unint64_t v21 = 0xD000000000000040;
        }
        unint64_t v22 = 0x8000000101418910;
        if (v9 != 161) {
          unint64_t v22 = 0x80000001014188D0;
        }
        if (v9 == 160) {
          uint64_t v18 = 0xD00000000000003FLL;
        }
        else {
          uint64_t v18 = v21;
        }
        if (v9 == 160) {
          unint64_t v19 = 0x8000000101418960;
        }
        else {
          unint64_t v19 = v22;
        }
        break;
      default:
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v23;
        break;
    }
LABEL_37:
    if (v15 == v18 && v17 == v19)
    {
      swift_bridgeObjectRelease_n();
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_7;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_6;
    }

LABEL_7:
    ++v8;
  }
  while (v7 != v8);
  swift_bridgeObjectRelease();
  id v4 = v28;
LABEL_46:

  return _swiftEmptyArrayStorage;
}

unint64_t sub_100E05FD8()
{
  unint64_t result = qword_101669330;
  if (!qword_101669330)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101669330);
  }
  return result;
}

uint64_t sub_100E06018(id *a1)
{
  return sub_100E04370(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100E06038()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100E06080(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100E06090()
{
  return swift_release();
}

void sub_100E06098(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unsigned int v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10001CD44(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  id v12 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithBundleIdentifier:v13];

  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  uint64_t v17 = sub_10001CD44(a2, v15);
  id v18 = sub_100E04D84((uint64_t)v17, v15, v16);
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  sub_10001CD44(a1, v20);
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10001D010((uint64_t)a1, (uint64_t)v30);
  sub_10001D010((uint64_t)a2, (uint64_t)v29);
  uint64_t v22 = swift_allocObject();
  sub_10001CEB0(v30, v22 + 16);
  sub_10001CEB0(v29, v22 + 56);
  uint64_t v24 = v26;
  uint64_t v23 = v27;
  *(void *)(v22 + 96) = v26;
  *(void *)(v22 + 104) = v23;
  aBlock[4] = sub_100E063EC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100769474;
  void aBlock[3] = &unk_1015F45A8;
  uint64_t v25 = _Block_copy(aBlock);
  sub_1000BD0E8(v24);
  swift_release();
  [v14 replaceContentForRequestWithIdentifier:v21 replacementContent:v18 completionHandler:v25];
  _Block_release(v25);
}

uint64_t sub_100E0639C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (*(void *)(v0 + 96)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100E063EC(uint64_t a1)
{
  return sub_100E04650(a1, v1 + 16, v1 + 56, *(void (**)(uint64_t, BOOL))(v1 + 96));
}

unint64_t destroy for UserNotificationPublisher.Error(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_errorRelease();
  }
  return result;
}

void *_s12searchpartyd25UserNotificationPublisherC5ErrorOwCP_0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((int)v4 - 1 < 0) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for UserNotificationPublisher.Error(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  else {
    uint64_t v4 = *a1;
  }
  int v5 = v4 - 1;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v3 = *a2;
  }
  int v7 = v3 - 1;
  if (v5 < 0)
  {
    if (v7 < 0)
    {
      swift_errorRetain();
      *a1 = v6;
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      *a1 = *a2;
    }
  }
  else
  {
    if (v7 < 0) {
      swift_errorRetain();
    }
    *a1 = v6;
  }
  return a1;
}

unint64_t *assignWithTake for UserNotificationPublisher.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  int v4 = -1;
  if (v3 < 0xFFFFFFFF) {
    int v4 = v3;
  }
  unint64_t v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_errorRelease();
      return a1;
    }
    swift_errorRelease();
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotificationPublisher.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100E065C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_100E065E8(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2) {
LABEL_5:
  }
    void *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationPublisher.Error()
{
  return &type metadata for UserNotificationPublisher.Error;
}

unsigned char *storeEnumTagSinglePayload for UserNotificationDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E066ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationDestination()
{
  return &type metadata for UserNotificationDestination;
}

unint64_t sub_100E06728()
{
  unint64_t result = qword_10165F898;
  if (!qword_10165F898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F898);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UserNotificationCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x3B) {
    goto LABEL_17;
  }
  if (a2 + 197 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 197) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 197;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 197;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 197;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 5) & 0xFFFFFFC7 | (8 * ((*a1 >> 2) & 7))) ^ 0x3F;
  if (v6 >= 0x3A) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for UserNotificationCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 197 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 197) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x3B) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x3A)
  {
    unsigned int v6 = ((a2 - 59) >> 8) + 1;
    void *result = a2 - 59;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E068F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = 4 * (((-a2 >> 3) & 7) - 8 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_100E0691C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x3F) {
    return v1 >> 5;
  }
  else {
    return (v1 & 3 | (4 * (v1 >> 5))) - 6;
  }
}

unsigned char *sub_100E0693C(unsigned char *result)
{
  *result &= 0x1Fu;
  return result;
}

unsigned char *sub_100E0694C(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    void *result = *result & 3 | (32 * a2);
  }
  else {
    void *result = ((a2 - 2) & 3 | (32 * ((a2 - 2) >> 2))) + 64;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationCategory()
{
  return &type metadata for UserNotificationCategory;
}

unint64_t sub_100E06998(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_1000361E0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_1000361E0(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v12 = *(void *)(a2 + 48);
    sub_1000361E0(v11, v12);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v13 = a3[9];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    uint64_t v18 = a3[11];
    *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    uint64_t v21 = type metadata accessor for CachedHistoricalLocation(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10000588C(&qword_10163EB38);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v17((uint64_t)v19 + *(int *)(v21 + 28), (uint64_t)v20 + *(int *)(v21 + 28), v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  }
  return a1;
}

uint64_t type metadata accessor for CachedHistoricalLocation(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165F9B0);
}

uint64_t sub_100E06BE4(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_100E06D04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_10000588C(&qword_10163EB38);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
    v16((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100E06EE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_1000361E0(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_10001CFB8(v12, v13);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_1000361E0(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_10001CFB8(v16, v17);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v33 - 8);
  unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 24);
  ((void (*)(uint64_t, uint64_t))v32)(v19, v20);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v21 = a3[11];
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = *((void *)v23 + 1);
      *((void *)v22 + 2) = *((void *)v23 + 2);
      v32(&v22[*(int *)(v24 + 28)], &v23[*(int *)(v24 + 28)], v33);
      goto LABEL_7;
    }
    sub_100E07178((uint64_t)v22);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    uint64_t v29 = sub_10000588C(&qword_10163EB38);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  *((void *)v22 + 2) = *((void *)v23 + 2);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(&v22[*(int *)(v24 + 28)], &v23[*(int *)(v24 + 28)], v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100E07178(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedHistoricalLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100E071D4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  unint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000588C(&qword_10163EB38);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100E07384(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v8, v9);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001CFB8(v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v27 - 8);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  ((void (*)(uint64_t, uint64_t))v26)(v13, v14);
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((void *)v16 + 2) = *((void *)v17 + 2);
      v26(&v16[*(int *)(v18 + 28)], &v17[*(int *)(v18 + 28)], v27);
      goto LABEL_7;
    }
    sub_100E07178((uint64_t)v16);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = sub_10000588C(&qword_10163EB38);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((void *)v16 + 2) = *((void *)v17 + 2);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v16[*(int *)(v18 + 28)], &v17[*(int *)(v18 + 28)], v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100E075E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100E075FC);
}

uint64_t sub_100E075FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[9];
LABEL_5:
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_10000588C(&qword_10163EB38);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[11];
    goto LABEL_5;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + a3[12]);
  if (v13 >= 2) {
    int v14 = ((v13 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v14 = -2;
  }
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100E0772C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100E07740);
}

uint64_t sub_100E07740(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
  }
  else
  {
    uint64_t result = sub_10000588C(&qword_10163EB38);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(unsigned char *)(a1 + a4[12]) = a2 + 2;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[11];
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for BeaconPayload(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10165F8F8);
}

void sub_100E07870()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100E07974();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100E07974()
{
  if (!qword_10165F908)
  {
    type metadata accessor for CachedHistoricalLocation(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10165F908);
    }
  }
}

uint64_t sub_100E079CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100E079E0);
}

uint64_t sub_100E079E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_100E07A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100E07A64);
}

uint64_t sub_100E07A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_100E07AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100E07B70(v2 + *(int *)(a1 + 44), a2);
}

unint64_t sub_100E07AF0(uint64_t a1)
{
  unint64_t result = sub_100E07B18();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100E07B18()
{
  unint64_t result = qword_10165F9F0;
  if (!qword_10165F9F0)
  {
    type metadata accessor for CachedHistoricalLocation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165F9F0);
  }
  return result;
}

uint64_t sub_100E07B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163EB38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_100E07BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedHistoricalLocation(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (double *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000588C(&qword_10165F9F8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163EB38);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  int v14 = (double *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v30 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)return 0;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0)return 0; {
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56))
  }
    return 0;
  uint64_t v31 = (int *)type metadata accessor for BeaconPayload(0);
  if ((static Date.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v31[10]) != *(unsigned __int8 *)(a2 + v31[10]))
  {
    return 0;
  }
  sub_100E07B70(a1 + v31[11], (uint64_t)v19);
  sub_100E07B70(a2 + v31[11], (uint64_t)v17);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100E07B70((uint64_t)v19, (uint64_t)v10);
  uint64_t v30 = v20;
  sub_100E07B70((uint64_t)v17, v20);
  int v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_10163EB38);
    sub_10001DAB4((uint64_t)v19, &qword_10163EB38);
    if (v21(v30, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_10163EB38);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  sub_100E07B70((uint64_t)v10, (uint64_t)v14);
  if (v21(v30, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_10163EB38);
    sub_10001DAB4((uint64_t)v19, &qword_10163EB38);
    sub_100E07178((uint64_t)v14);
LABEL_16:
    uint64_t v25 = &qword_10165F9F8;
    uint64_t v26 = (uint64_t)v10;
LABEL_23:
    sub_10001DAB4(v26, v25);
    return 0;
  }
  sub_100E08034(v30, (uint64_t)v7);
  if (*v14 != *v7 || v14[1] != v7[1] || v14[2] != v7[2])
  {
    sub_100E07178((uint64_t)v7);
    sub_10001DAB4((uint64_t)v17, &qword_10163EB38);
    sub_10001DAB4((uint64_t)v19, &qword_10163EB38);
    sub_100E07178((uint64_t)v14);
    uint64_t v26 = (uint64_t)v10;
    uint64_t v25 = &qword_10163EB38;
    goto LABEL_23;
  }
  char v27 = static Date.== infix(_:_:)();
  sub_100E07178((uint64_t)v7);
  sub_10001DAB4((uint64_t)v17, &qword_10163EB38);
  sub_10001DAB4((uint64_t)v19, &qword_10163EB38);
  sub_100E07178((uint64_t)v14);
  sub_10001DAB4((uint64_t)v10, &qword_10163EB38);
  if ((v27 & 1) == 0) {
    return 0;
  }
LABEL_11:
  uint64_t v22 = v31[12];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 2)
  {
    BOOL v29 = (v23 & 1) == 0;
    return v24 != 2 && ((v29 ^ v24) & 1) != 0;
  }
  return v24 == 2;
}

uint64_t sub_100E08034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedHistoricalLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100E08098(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  type metadata accessor for CachedHistoricalLocation(0);

  return static Date.== infix(_:_:)();
}

uint64_t sub_100E08120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100E081B8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a1;
  uint64_t v30 = sub_10000588C(&qword_101639618);
  uint64_t v5 = __chkstk_darwin(v30);
  uint64_t v29 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v26 - v7);
  uint64_t v9 = *(void *)(a3 + 64);
  uint64_t v27 = a3 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v28 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v32 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(v32 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    sub_100E4C5CC(v17 + *(void *)(*(void *)(v21 - 8) + 72) * v16, (uint64_t)v8 + *(int *)(v30 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *uint64_t v8 = v20;
    v8[1] = v19;
    uint64_t v22 = v29;
    sub_10001D608((uint64_t)v8, v29, &qword_101639618);
    sub_1000361E0(v20, v19);
    v31(v22);
    uint64_t result = sub_10001DAB4(v22, &qword_101639618);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v14);
  if (v24)
  {
LABEL_19:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v14 << 6);
    goto LABEL_5;
  }
  int64_t v25 = v14 + 1;
  if (v14 + 1 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v14 + 2;
  if (v14 + 2 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v14 + 3;
  if (v14 + 3 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v14 + 4;
  if (v14 + 4 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
LABEL_18:
    int64_t v14 = v25;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100E08474(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v24 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v29 = v6 + 16;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v28 = v6 + 48;
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v26 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v31 + 48) + *(void *)(v6 + 72) * i, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v27(v8);
    if (v3)
    {
      (*v26)(v8, v5);
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v26)(v8, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v25) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v25) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v25) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v25) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v25)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_30;
            }
            if (v17 >= v25) {
              goto LABEL_27;
            }
            unint64_t v21 = *(void *)(v24 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_27:
      (*v30)(v11, 1, 1, v5);
      return swift_release();
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100E08804(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v21 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_5:
    uint64_t v14 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v13);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    v20[0] = v15;
    v20[1] = v16;
    sub_1000361E0(v15, v16);
    a1(v20);
    uint64_t result = sub_10001CFB8(v15, v16);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v11);
  if (v18)
  {
LABEL_19:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_5;
  }
  int64_t v19 = v11 + 1;
  if (v11 + 1 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 2;
  if (v11 + 2 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 3;
  if (v11 + 3 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 4;
  if (v11 + 4 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_18:
    int64_t v11 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v21) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v6 + 8 * v11);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100E089C4(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v26 = sub_10000588C(&qword_101649680);
  uint64_t v5 = __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v24 = a3 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (v13)
  {
    unint64_t v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v17 = v16 | (v15 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(a3 + 48);
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v9, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v19);
    *(void *)&v9[*(int *)(v26 + 48)] = *(void *)(*(void *)(a3 + 56) + 8 * v17);
    sub_10001D608((uint64_t)v9, (uint64_t)v7, &qword_101649680);
    swift_bridgeObjectRetain();
    v27(v7);
    uint64_t result = sub_10001DAB4((uint64_t)v7, &qword_101649680);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v15 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v15);
  if (v21)
  {
LABEL_19:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
    goto LABEL_5;
  }
  int64_t v22 = v15 + 1;
  if (v15 + 1 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v15 + 2;
  if (v15 + 2 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v15 + 3;
  if (v15 + 3 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v15 + 4;
  if (v15 + 4 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
LABEL_18:
    int64_t v15 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v15 >= v25) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v24 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100E08C70(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v34 - 8);
  uint64_t v4 = __chkstk_darwin(v34);
  uint64_t v33 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v32 = (char *)v29 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v29[0] = v1;
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_1000B6ED0(0, v7, 0);
  uint64_t result = sub_10115FE18(a1);
  uint64_t v10 = result;
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  uint64_t v30 = a1;
  uint64_t v31 = a1 + 56;
  long long v29[2] = v3 + 32;
  v29[3] = v3 + 16;
  v29[4] = v3;
  v29[1] = v3 + 8;
  int64_t v15 = v33;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v31 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_16;
    }
    unint64_t v16 = v32;
    uint64_t v17 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v32, *(void *)(a1 + 48) + *(void *)(v3 + 72) * v10, v34);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v15, v16, v17);
    uint64_t v18 = MACAddress.dataRepresentation.getter();
    unint64_t v20 = v19;
    uint64_t v21 = Data.hexString.getter();
    uint64_t v35 = v22;
    uint64_t v36 = v21;
    sub_10001CFB8(v18, v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v17);
    uint64_t v8 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B6ED0(0, v8[2] + 1, 1);
      uint64_t v8 = v37;
    }
    unint64_t v24 = v8[2];
    unint64_t v23 = v8[3];
    if (v24 >= v23 >> 1)
    {
      sub_1000B6ED0(v23 > 1, v24 + 1, 1);
      uint64_t v8 = v37;
    }
    v8[2] = v24 + 1;
    int64_t v25 = &v8[2 * v24];
    uint64_t v26 = v35;
    v25[4] = v36;
    void v25[5] = v26;
    a1 = v30;
    uint64_t result = sub_10052CB9C(v10, v12, v14 & 1, v30);
    uint64_t v10 = result;
    uint64_t v12 = v27;
    char v14 = v28 & 1;
    if (!--v7)
    {
      sub_1001A1CB8(result, v27, v28 & 1);
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_100E08F54(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v3 = a1;
    Swift::String v44 = _swiftEmptyArrayStorage;
    sub_1000B765C(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v5 = sub_101158190(v3);
    uint64_t v6 = 0;
    uint64_t v7 = v3 + 64;
    char v8 = *(unsigned char *)(v3 + 32);
    uint64_t v34 = v3 + 80;
    int64_t v35 = v1;
    int v36 = v4;
    uint64_t v37 = v3 + 64;
    while (1)
    {
      if (v5 < 0 || v5 >= 1 << v8)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        JUMPOUT(0x100E092C8);
      }
      unint64_t v11 = (unint64_t)v5 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_39;
      }
      if (*(_DWORD *)(v3 + 36) != v4) {
        goto LABEL_40;
      }
      uint64_t v38 = v6 + 1;
      uint64_t v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v5);
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      *(void *)&long long v43 = *v12;
      *((void *)&v43 + 1) = v14;
      uint64_t v15 = 0;
      switch(v14 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v13), v13)) {
            goto LABEL_46;
          }
          uint64_t v15 = HIDWORD(v13) - (int)v13;
LABEL_15:
          sub_1000361E0(v13, v14);
          sub_1000361E0(v13, v14);
LABEL_16:
          uint64_t v18 = v3;
          uint64_t v19 = 20 - v15;
          if (__OFSUB__(20, v15)) {
            goto LABEL_41;
          }
          uint64_t v39 = v2;
          if (v19)
          {
            if (v19 <= 14)
            {
              if (v19 < 0) {
                goto LABEL_45;
              }
              uint64_t v21 = 0;
              unint64_t v22 = (unint64_t)(20 - v15) << 48;
            }
            else
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              uint64_t v20 = __DataStorage.init(length:)();
              if ((unint64_t)v19 >= 0x7FFFFFFF)
              {
                type metadata accessor for Data.RangeReference();
                uint64_t v21 = swift_allocObject();
                *(void *)(v21 + 16) = 0;
                *(void *)(v21 + 24) = v19;
                unint64_t v22 = v20 | 0x8000000000000000;
              }
              else
              {
                uint64_t v21 = v19 << 32;
                unint64_t v22 = v20 | 0x4000000000000000;
              }
            }
          }
          else
          {
            uint64_t v21 = 0;
            unint64_t v22 = 0xC000000000000000;
          }
          uint64_t v41 = v21;
          unint64_t v42 = v22;
          sub_10072AD40(&v41, 0);
          uint64_t v24 = v41;
          unint64_t v23 = v42;
          Data.append(_:)();
          sub_10001CFB8(v24, v23);
          sub_10001CFB8(v13, v14);
          long long v25 = v43;
          uint64_t v2 = v39;
          Swift::String v44 = v39;
          unint64_t v27 = v39[2];
          unint64_t v26 = v39[3];
          if (v27 >= v26 >> 1)
          {
            long long v40 = v43;
            sub_1000B765C(v26 > 1, v27 + 1, 1);
            long long v25 = v40;
            uint64_t v2 = v44;
          }
          v2[2] = v27 + 1;
          *(_OWORD *)&v2[2 * v27 + 4] = v25;
          char v8 = *(unsigned char *)(v18 + 32);
          unint64_t v9 = 1 << v8;
          if (v5 >= 1 << v8) {
            goto LABEL_42;
          }
          uint64_t v7 = v37;
          uint64_t v28 = *(void *)(v37 + 8 * v11);
          if ((v28 & (1 << v5)) == 0) {
            goto LABEL_43;
          }
          uint64_t v3 = v18;
          int v4 = v36;
          if (*(_DWORD *)(v18 + 36) != v36) {
            goto LABEL_44;
          }
          unint64_t v29 = v28 & (-2 << (v5 & 0x3F));
          if (v29)
          {
            unint64_t v9 = __clz(__rbit64(v29)) | v5 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v30 = v11 + 1;
            unint64_t v31 = (v9 + 63) >> 6;
            if (v11 + 1 < v31)
            {
              unint64_t v32 = *(void *)(v37 + 8 * v30);
              int64_t v10 = v35;
              uint64_t v6 = v38;
              if (v32)
              {
LABEL_36:
                unint64_t v9 = __clz(__rbit64(v32)) + (v30 << 6);
              }
              else
              {
                while (v31 - 2 != v11)
                {
                  unint64_t v32 = *(void *)(v34 + 8 * v11++);
                  if (v32)
                  {
                    unint64_t v30 = v11 + 1;
                    goto LABEL_36;
                  }
                }
              }
              goto LABEL_5;
            }
          }
          int64_t v10 = v35;
          uint64_t v6 = v38;
LABEL_5:
          uint64_t v5 = v9;
          if (v6 == v10) {
            return v2;
          }
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v13 + 16);
          uint64_t v16 = *(void *)(v13 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_15;
          }
          goto LABEL_47;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v15 = BYTE6(v14);
          goto LABEL_16;
      }
    }
  }
  return v2;
}

Swift::Int sub_100E092D8(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B736B0(v3);
  }
  int v4 = (void *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100E43690(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100E09380(uint64_t a1)
{
  uint64_t v29 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v3 = __chkstk_darwin(v29);
  uint64_t v28 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v30 = (uint64_t)&v27 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  unint64_t v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  swift_retain();
  uint64_t v15 = v14;
  sub_100B3110C(a1, v1, v13, v15);
  swift_release();

  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  OS_dispatch_group.wait(timeout:)();
  v16(v12, v6);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170E9E8);
    uint64_t v18 = v30;
    sub_100E4C5CC(a1, v30, type metadata accessor for OwnedBeaconGroup);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_100E4C5CC(v18, v28, type metadata accessor for OwnedBeaconGroup);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v31 = sub_1008FA0F0(v22, v23, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4C634(v18, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Timed out removing %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100E4C634(v18, type metadata accessor for OwnedBeaconGroup);
    }

    sub_10009FD9C();
    uint64_t v24 = swift_allocError();
    *long long v25 = 16;
    swift_release();
  }
  else
  {

    swift_beginAccess();
    uint64_t v24 = *(void *)(v13 + 16);
    swift_errorRetain();
    swift_release();
  }
  return v24;
}

BOOL sub_100E097C8(char *a1, char *a2)
{
  return qword_10137F480[*a1] == qword_10137F480[*a2];
}

Swift::Int sub_100E097EC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10137F480[v1]);
  return Hasher._finalize()();
}

void sub_100E0983C()
{
  Hasher._combine(_:)(qword_10137F480[*v0]);
}

Swift::Int sub_100E09874()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10137F480[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100E098C0@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100E47520(*a1);
  *a2 = result;
  return result;
}

void sub_100E098EC(void *a1@<X8>)
{
  *a1 = qword_10137F480[*v1];
}

uint64_t sub_100E09904(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100E4C810();
  unint64_t v5 = sub_10000D64C();

  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_100E0995C(uint64_t a1)
{
  return sub_1001368D0(a1, qword_10165FA00);
}

uint64_t sub_100E09968(uint64_t a1)
{
  return sub_1001368D0(a1, qword_10165FA18);
}

uint64_t sub_100E09974@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(unsigned char *)(result + 168) & 1) != 0 || (uint64_t result = QueueSynchronizer.conditionalSync<A>(_:)(), (v5))
  {
    char v3 = 1;
  }
  else
  {
    uint64_t result = QueueSynchronizer.conditionalSync<A>(_:)();
    char v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100E09A14@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(result + 216))
  {
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t result = swift_release();
    char v3 = v4;
  }
  else
  {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void *sub_100E09AA8()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v1 - 8);
  char v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)v37 - v8;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v0 + 16);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    id v16 = [self standardUserDefaults];
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v16 objectForKey:v17];

    if (v18)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v47, 0, sizeof(v47));
    }
    sub_10001D608((uint64_t)v47, (uint64_t)v48, (uint64_t *)&unk_101644360);
    if (v48[3])
    {
      sub_10000588C(&qword_101654A30);
      if (swift_dynamicCast())
      {
        uint64_t v19 = v46;
        uint64_t v20 = *(void *)(v46 + 16);
        if (v20)
        {
          unint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
          long long v43 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
          Swift::String v44 = (void (**)(char *, char *, uint64_t))(v40 + 32);
          swift_bridgeObjectRetain();
          unint64_t v41 = sub_1000336D4();
          uint64_t v21 = 0;
          v37[1] = v19;
          uint64_t v22 = (uint64_t *)(v19 + 40);
          Swift::String v45 = _swiftEmptyArrayStorage;
          uint64_t v38 = v7;
          do
          {
            uint64_t v23 = *v22;
            v48[0] = *(v22 - 1);
            v48[1] = v23;
            swift_bridgeObjectRetain_n();
            Data.init<A>(hexString:)();
            if (v24 >> 60 == 15)
            {
              uint64_t v34 = 1;
            }
            else
            {
              MACAddress.init(dataRepresentation:)();
              uint64_t v34 = 0;
            }
            (*v43)(v3, v34, 1, v4);
            swift_bridgeObjectRelease();
            if ((*v42)(v3, 1, v4) == 1)
            {
              sub_10001DAB4((uint64_t)v3, (uint64_t *)&unk_1016477E0);
            }
            else
            {
              uint64_t v25 = v21;
              unint64_t v26 = *v44;
              uint64_t v27 = v39;
              (*v44)(v39, v3, v4);
              uint64_t v28 = v4;
              v26(v7, v27, v4);
              unint64_t v29 = (unint64_t)v45;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v29 = sub_100A723C0(0, *(void *)(v29 + 16) + 1, 1, v29);
              }
              unint64_t v31 = *(void *)(v29 + 16);
              unint64_t v30 = *(void *)(v29 + 24);
              if (v31 >= v30 >> 1) {
                Swift::String v45 = (void *)sub_100A723C0(v30 > 1, v31 + 1, 1, v29);
              }
              else {
                Swift::String v45 = (void *)v29;
              }
              uint64_t v4 = v28;
              uint64_t v21 = v25;
              unint64_t v32 = v45;
              v45[2] = v31 + 1;
              unint64_t v33 = (unint64_t)v32
                  + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
                  + *(void *)(v40 + 72) * v31;
              uint64_t v7 = v38;
              v26((char *)v33, v38, v4);
            }
            v22 += 2;
            --v20;
          }
          while (v20);
          swift_bridgeObjectRelease();
          int v36 = v45;
        }
        else
        {
          int v36 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease();
        uint64_t v35 = sub_10115A3A4((uint64_t)v36);
        swift_bridgeObjectRelease();
        return (void *)v35;
      }
    }
    else
    {
      sub_10001DAB4((uint64_t)v48, (uint64_t *)&unk_101644360);
    }
    return &_swiftEmptySetSingleton;
  }
  __break(1u);
  return result;
}

void sub_100E09FF8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + 16);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v9 = [self standardUserDefaults];
    sub_100E08C70(a1);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    [v9 setObject:isa forKey:v11];
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100E0A1A8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  id v8 = *(void (**)(void *, uint64_t))(v2 + 8);
  unint64_t v7 = v2 + 8;
  v8(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once();
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      *(void *)&v23[0] = v4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)&v23[0] = sub_1008FA0F0(v16, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to retrieve pairing tokens due to %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v18 = sub_10093099C((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease();
    goto LABEL_14;
  }
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 objectForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10001D608((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_101644360);
  if (v24[3])
  {
    if (swift_dynamicCast())
    {
      uint64_t v1 = v21;
      unint64_t v7 = v22;
      sub_1000361E0(v21, v22);
      type metadata accessor for MACAddress();
      sub_100E484C4(&qword_10163E568, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100E484C4(&qword_1016477B0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100E484C4((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100037AA0();
      sub_100037BB4();
      unint64_t v18 = Dictionary<>.init(dataRepresentation:)();
LABEL_14:
      sub_10001CFB8(v1, v7);
      return v18;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101644360);
  }
  return sub_10093099C((uint64_t)_swiftEmptyArrayStorage);
}

void sub_100E0A670()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v7 = [self standardUserDefaults];
    type metadata accessor for MACAddress();
    sub_100E484C4(&qword_10163E568, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100E484C4(&qword_1016477B0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100E484C4((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100037AA0();
    sub_100037BB4();
    uint64_t v8 = Dictionary<>.dataRepresentation.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v8, v10);
    NSString v12 = String._bridgeToObjectiveC()();
    [v7 setObject:isa forKey:v12];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100E0A8F0()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(43);
  type metadata accessor for AirPodsPairingManager();
  sub_100E484C4(&qword_101660038, v2, (void (*)(uint64_t))type metadata accessor for AirPodsPairingManager);
  uint64_t v3 = CustomStringConvertible.typeDescription.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v3;
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000101418FF0;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  if (*(unsigned char *)(v1 + 72)) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + 72)) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x6568706972657020;
  v10._object = (void *)0xED0000203A6C6172;
  String.append(_:)(v10);
  id v11 = *(id *)(v1 + 64);
  id v12 = [v11 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);

  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_100E0AAB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  int v36 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  uint64_t v37 = a3;
  uint64_t v38 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8);
  uint64_t v35 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter();
  unint64_t v41 = _swiftEmptyArrayStorage;
  sub_100E484C4((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v5 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v5 + 88) = &_swiftEmptySetSingleton;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  sub_10000588C(&qword_101660040);
  swift_allocObject();
  *(void *)(v5 + 120) = PassthroughSubject.init()();
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 152) = 0xF000000000000000;
  *(void *)(v5 + 160) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v5 + 168) = 0;
  *(void *)(v5 + 200) = &type metadata for AirpodsPairingSpec1_0;
  *(void *)(v5 + 208) = sub_100E4AC2C();
  *(void *)(v5 + 216) = 0;
  *(unsigned char *)(v5 + 224) = 0;
  *(void *)(v5 + 232) = 0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F068);
  Swift::String v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "AirPodsPairingManager.init", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = v39;
  *(void *)(v6 + 32) = v38;
  *(void *)(v6 + 40) = v19;
  *(void *)(v6 + 48) = v40;
  type metadata accessor for AccessoryPairingValidator();
  uint64_t v20 = swift_allocObject();
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v21 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v22 = v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
  *(void *)(v20 + 16) = v21;
  *(void *)(v20 + 24) = 0;
  unint64_t v24 = v37;
  *(void *)(v6 + 56) = v20;
  *(void *)(v6 + 64) = v24;
  *(unsigned char *)(v6 + 72) = v36 & 1;
  uint64_t v25 = *(void **)(v6 + 16);
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  unint64_t v26 = v24;
  id v27 = v25;
  *(void *)(v6 + 24) = QueueSynchronizer.init(queue:)();
  id v28 = [*(id *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
  uint64_t v29 = (uint64_t)v35;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v30 = *(void *)(v6 + 56);
  unint64_t v31 = *(void **)(v6 + 16);
  type metadata accessor for AccessoryPairingCoordinator();
  swift_allocObject();
  swift_retain();
  uint64_t v32 = sub_101141B24(v29, v30, v31);
  swift_release();
  swift_release();

  swift_release();
  if (v32)
  {
    *(void *)(v6 + 80) = v32;
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1000A1534(*(void *)(v6 + 128));
    sub_100037A24(*(void *)(v6 + 144), *(void *)(v6 + 152));
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 176);
    swift_release();
    swift_release();
    type metadata accessor for AirPodsPairingManager();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v6;
}

uint64_t sub_100E0B0FC()
{
  uint64_t v1 = v0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirPodsPairingManager.deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v1 + 128));
  sub_100037A24(*(void *)(v1 + 144), *(void *)(v1 + 152));
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 176);
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100E0B274()
{
  sub_100E0B0FC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AirPodsPairingManager()
{
  return self;
}

uint64_t sub_100E0B2CC@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v58 = a6;
  uint64_t v56 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v56);
  uint64_t v57 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101660040);
  swift_allocObject();
  uint64_t v14 = PassthroughSubject.init()();
  a1[15] = v14;
  swift_retain();
  swift_release();
  uint64_t v54 = a1[3];
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v59[0])
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F068);
    Swift::String v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Existing pairing session in progress!", v18, 2u);
      swift_slowDealloc();
    }

    v59[0] = v14;
    sub_100062734(&qword_101660058, &qword_101660040);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
  }
  else
  {
    uint64_t v48 = a4;
    uint64_t v49 = a5;
    uint64_t v55 = a3;
    uint64_t v51 = v6;
    uint64_t v52 = v13;
    uint64_t v53 = v14;
    type metadata accessor for AnalyticsEvent(0);
    uint64_t v20 = (char *)swift_allocObject();
    swift_defaultActor_initialize();
    *((void *)v20 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    uint64_t v21 = &v20[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v22 = type metadata accessor for DispatchTime();
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    v23(v21, 1, 1, v22);
    v23(&v20[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v22);
    *((void *)v20 + 15) = 0xD00000000000002CLL;
    *((void *)v20 + 16) = 0x80000001013F40E0;
    a1[29] = v20;
    swift_retain();
    swift_release();
    type metadata accessor for Transaction();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v20;
    int v50 = a2;
    *(unsigned char *)(v24 + 24) = a2 & 1;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = sub_100010324(v25, (uint64_t)qword_10170F068);
    uint64_t v27 = v55;
    uint64_t v28 = v57;
    sub_100E4C5CC(v55, v57, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v47 = v26;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 136446210;
      uint64_t v32 = sub_1001E0BAC();
      uint64_t v61 = sub_1008FA0F0(v32, v33, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4C634(v57, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Start pairing AirPods. BluetoothDevice: %{public}s.", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v55;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100E4C634(v28, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }

    uint64_t v34 = a1[8];
    uint64_t v35 = (uint64_t *)(v27 + *(int *)(v56 + 20));
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    sub_100A3B3CC();
    __chkstk_darwin(v38);
    *(&v47 - 4) = v34;
    *(&v47 - 3) = v36;
    *(&v47 - 2) = v37;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    sub_100E1ACFC((uint64_t)v59);
    char v39 = v50;
    if (v60 == 1)
    {
      sub_10001DAB4((uint64_t)v59, &qword_10163C6C0);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        unint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to create pairing coordinator!", v42, 2u);
        swift_slowDealloc();
      }

      v59[0] = v53;
      sub_100062734(&qword_101660058, &qword_101660040);
    }
    else
    {
      swift_release();
      long long v43 = (void *)(*(void *)(a1[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs);
      swift_beginAccess();
      *long long v43 = v48;
      swift_bridgeObjectRetain();
      uint64_t v44 = swift_bridgeObjectRelease();
      __chkstk_darwin(v44);
      *(&v47 - 2) = (uint64_t)a1;
      *((unsigned char *)&v47 - 8) = 1;
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100E13738(v27);
      uint64_t v45 = v49;
      sub_100E1488C(v49, v39 & 1);
      sub_100E13ABC(v45);
      uint64_t v61 = v53;
      sub_100062734(&qword_101660058, &qword_101660040);
    }
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    swift_release();
  }
  uint64_t result = swift_release();
  *uint64_t v58 = v19;
  return result;
}

uint64_t sub_100E0BAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  sub_10000588C(&qword_101660040);
  swift_allocObject();
  *(void *)(a1 + 120) = PassthroughSubject.init()();
  swift_retain();
  swift_release();
  sub_100E4026C(a2, 1, a3, a4);
  sub_100062734(&qword_101660058, &qword_101660040);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  uint64_t result = swift_release();
  *a5 = v10;
  return result;
}

uint64_t sub_100E0BBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v41 = a1;
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v39 = v10;
  uint64_t v40 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (uint8_t **)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v17 = *(void **)(v4 + 16);
  *Swift::String v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    uint64_t v37 = a2;
    uint64_t v38 = a3;
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170F068);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v12, v41, v7);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v35 = v20;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v36 = v4;
    uint64_t v43 = v25;
    *(_DWORD *)uint64_t v24 = 136446210;
    uint64_t v34 = v24 + 4;
    sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_1008FA0F0(v26, v27, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "unpairAirPodsLE with classic MAC address: %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v36;
    swift_slowDealloc();
    uint64_t v20 = v35;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction();
  uint64_t v28 = v40;
  v20(v40, v41, v7);
  unint64_t v29 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v30 = (v39 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v38;
  *(void *)(v31 + 16) = v37;
  *(void *)(v31 + 24) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v31 + v29, v28, v7);
  *(void *)(v31 + v30) = v4;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100E0C01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return _swift_task_switch(sub_100E0C040, 0, 0);
}

uint64_t sub_100E0C040()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E0C17C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E0C17C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E0C27C, 0, 0);
}

uint64_t sub_100E0C27C()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_101671DC0 + dword_101671DC0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E0C434;
    uint64_t v3 = *(void *)(v0 + 152);
    return v10(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F068);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing StandaloneBeaconService!", v8, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(void))(v0 + 136))();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100E0C434()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100E0C5B4;
  }
  else {
    uint64_t v2 = sub_100E0C548;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100E0C548()
{
  uint64_t v1 = swift_release();
  (*(void (**)(uint64_t))(v0 + 136))(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100E0C5B4()
{
  uint64_t v13 = v0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F068);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 184);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)(v0 + 120) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_1008FA0F0(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to remove standalone beacons due to %{public}s.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v9 = swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(uint64_t))(v0 + 136))(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100E0C800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F068);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v27 = a1;
  v13(v11, a1, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = a3;
    os_log_type_t v17 = (uint8_t *)v16;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v24 = v3;
    uint64_t v25 = a2;
    *(_DWORD *)os_log_type_t v17 = 136446210;
    sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1008FA0F0(v18, v19, &v29);
    uint64_t v4 = v24;
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unpairing AirPods with %{public}s.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v26;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v20 = type metadata accessor for Transaction();
  __chkstk_darwin(v20);
  uint64_t v21 = v27;
  *(&v23 - 4) = v4;
  *(&v23 - 3) = v21;
  *(&v23 - 2) = a2;
  *(&v23 - 1) = a3;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100E0CB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  unint64_t v19 = (void *)(v18 + v17);
  uint64_t v20 = v27;
  *unint64_t v19 = v26;
  v19[1] = v20;
  aBlock[4] = sub_100E4B4D8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015F8AC8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v23 = v29;
  uint64_t v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  return swift_release();
}

uint64_t sub_100E0CEF4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v230 = a5;
  uint64_t v229 = a4;
  uint64_t v8 = type metadata accessor for Endianness();
  __chkstk_darwin(v8 - 8);
  v238 = (char *)&v199 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v222);
  v232 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v207 = (uint64_t)&v199 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v211 = *(void *)(v233 - 8);
  uint64_t v13 = __chkstk_darwin(v233);
  v209 = (char *)&v199 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v206 = (uint64_t)&v199 - v15;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  v215 = (char *)&v199 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = type metadata accessor for MACAddress();
  uint64_t v234 = *(void *)(v236 - 8);
  uint64_t v18 = __chkstk_darwin(v236);
  v223 = (char *)&v199 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  v243 = (char *)&v199 - v21;
  uint64_t v217 = v22;
  __chkstk_darwin(v20);
  v214 = (char *)&v199 - v23;
  uint64_t v244 = type metadata accessor for UUID();
  uint64_t v239 = *(void *)(v244 - 8);
  uint64_t v24 = __chkstk_darwin(v244);
  v213 = (char *)&v199 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  v210 = (char *)&v199 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v205 = (char *)&v199 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v228 = (char *)&v199 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v242 = (char *)&v199 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v216 = (char *)&v199 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v240 = (char *)&v199 - v37;
  uint64_t v224 = v38;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v199 - v39;
  uint64_t v41 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v41 - 8);
  uint64_t v43 = (char *)&v199 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v245 = (uint64_t)&v199 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v241 = (uint64_t)&v199 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v220 = (uint64_t)&v199 - v51;
  uint64_t v225 = v52;
  __chkstk_darwin(v50);
  uint64_t v54 = (char *)&v199 - v53;
  uint64_t v55 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v55 - 8);
  uint64_t v57 = (char *)&v199 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = a1;
  Transaction.capture()();
  *(void *)&long long v248 = sub_100E09AA8();
  sub_101127C6C(a3, (uint64_t)v57);
  sub_10001DAB4((uint64_t)v57, (uint64_t *)&unk_1016477E0);
  sub_100E09FF8(v248);
  uint64_t v58 = *(void *)(a2 + 32);
  sub_100AE800C((uint64_t)v43);
  uint64_t v237 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    sub_10001DAB4((uint64_t)v43, &qword_10163BB20);
    return sub_100E0BBA0(a3, v229, v230);
  }
  uint64_t v208 = v58;
  uint64_t v218 = a3;
  uint64_t v235 = a2;
  sub_100E4C130((uint64_t)v43, (uint64_t)v54, type metadata accessor for OwnedBeaconGroup);
  uint64_t v60 = *(int *)(v44 + 24);
  v231 = v54;
  uint64_t v62 = v239 + 16;
  uint64_t v61 = *(void *)(v239 + 16);
  v202 = &v54[v60];
  uint64_t v63 = v244;
  ((void (*)(char *))v61)(v40);
  if (qword_101637310 != -1) {
    goto LABEL_56;
  }
LABEL_4:
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v65 = sub_100010324(v64, (uint64_t)qword_10170F068);
  uint64_t v66 = v234;
  uint64_t v67 = v214;
  uint64_t v68 = v236;
  unint64_t v203 = *(void *)(v234 + 16);
  uint64_t v204 = v234 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v203)(v214, v218, v236);
  uint64_t v69 = v240;
  v221 = v40;
  ((void (*)(char *, char *, uint64_t))v61)(v240, v40, v63);
  uint64_t v212 = v65;
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  int v72 = v71;
  BOOL v73 = os_log_type_enabled(v70, v71);
  uint64_t v227 = v62;
  v226 = (void (*)(char *, char *, uint64_t))v61;
  if (v73)
  {
    uint64_t v74 = swift_slowAlloc();
    *(void *)&long long v248 = swift_slowAlloc();
    *(_DWORD *)uint64_t v74 = 141558787;
    v247[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v74 + 12) = 2081;
    sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    LODWORD(v200) = v72;
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    v247[0] = sub_1008FA0F0(v75, v76, (uint64_t *)&v248);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v201 = *(void (**)(char *, uint64_t))(v234 + 8);
    v201(v67, v236);
    *(_WORD *)(v74 + 22) = 2160;
    v247[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v74 + 32) = 2081;
    v77 = v69;
    v78 = v226;
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
    v247[0] = sub_1008FA0F0(v79, v80, (uint64_t *)&v248);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v81 = v239;
    v240 = *(char **)(v239 + 8);
    ((void (*)(char *, uint64_t))v240)(v77, v244);
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v200, "Unpairing AirPods with MAC %{private,mask.hash}s. GroupId: %{private,mask.hash}s", (uint8_t *)v74, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v63 = v244;
    swift_slowDealloc();
  }
  else
  {
    v201 = *(void (**)(char *, uint64_t))(v66 + 8);
    v201(v67, v68);
    uint64_t v81 = v239;
    v240 = *(char **)(v239 + 8);
    ((void (*)(char *, uint64_t))v240)(v69, v63);

    v78 = (void (*)(char *, char *, uint64_t))v61;
  }
  sub_100E0F15C(v208, (uint64_t)&v248);
  uint64_t v82 = swift_allocObject();
  *(void *)(v82 + 16) = 0;
  uint64_t v83 = (uint64_t *)(v82 + 16);
  v84 = dispatch_group_create();
  dispatch_group_enter(v84);
  uint64_t v85 = *(void *)(v235 + 56);
  uint64_t v86 = (uint64_t)v215;
  v78(v215, v202, v63);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v86, 0, 1, v63);
  v87 = v84;
  uint64_t v88 = (uint64_t)v219;
  swift_retain();
  swift_retain();
  sub_10098B164(v86, &v248, v85, v87, v88, v82);
  v214 = (char *)v82;
  swift_release();

  swift_release();
  sub_100DB2864((uint64_t)&v248);
  sub_10001DAB4(v86, &qword_101638CF0);
  v202 = (char *)v87;
  OS_dispatch_group.wait()();
  type metadata accessor for AnalyticsEvent(0);
  v89 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v89 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  v90 = &v89[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v91 = type metadata accessor for DispatchTime();
  v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56);
  v92(v90, 1, 1, v91);
  v92(&v89[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v91);
  *((void *)v89 + 15) = 0xD00000000000002ELL;
  *((void *)v89 + 16) = 0x8000000101418F30;
  uint64_t v93 = type metadata accessor for Transaction();
  swift_retain();
  v215 = (char *)v93;
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_beginAccess();
  uint64_t v94 = *v83;
  v219 = v89;
  if (v94)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc();
      v247[0] = swift_slowAlloc();
      *(_DWORD *)v97 = 136446210;
      uint64_t v246 = v94;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v98 = String.init<A>(describing:)();
      uint64_t v246 = sub_1008FA0F0(v98, v99, v247);
      uint64_t v100 = (uint64_t)v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Failed to remove pairing lock due to %{public}s", v97, 0xCu);
      swift_arrayDestroy();
      v89 = v219;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v100 = (uint64_t)v231;
    }
    uint64_t v101 = v220;
    sub_100E4C5CC(v100, v220, type metadata accessor for OwnedBeaconGroup);
    unint64_t v102 = (*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80);
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = v89;
    *(void *)(v103 + 24) = v94;
    sub_100E4C130(v101, v103 + v102, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    swift_errorRetain();
    static Transaction.asyncTask(name:block:)();
    swift_errorRelease();
    swift_release();
  }
  v104 = v216;
  v105 = v221;
  uint64_t v106 = v244;
  v226(v216, v221, v244);
  v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = swift_slowAlloc();
    v247[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v109 = 141558275;
    uint64_t v246 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v109 + 12) = 2081;
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v246 = sub_1008FA0F0(v110, v111, v247);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v240)(v104, v106);
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Successfully removed pairing lock for %{private,mask.hash}s", (uint8_t *)v109, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    v105 = v221;
    swift_slowDealloc();
  }
  else
  {
    ((void (*)(char *, uint64_t))v240)(v104, v106);
  }

  uint64_t v112 = v241;
  sub_100E4C5CC((uint64_t)v231, v241, type metadata accessor for OwnedBeaconGroup);
  v113 = v242;
  v114 = v105;
  v115 = v226;
  v226(v242, v114, v106);
  v116 = v243;
  uint64_t v117 = v236;
  v118 = (void (*)(uint64_t, char *, uint64_t))v203;
  ((void (*)(char *, uint64_t, uint64_t))v203)(v243, v218, v236);
  sub_100E4C5CC(v112, v245, type metadata accessor for OwnedBeaconGroup);
  v115(v228, v113, v106);
  v118((uint64_t)v223, v116, v117);
  uint64_t v119 = *(unsigned __int8 *)(v237 + 80);
  uint64_t v120 = (v119 + 24) & ~v119;
  unint64_t v121 = (v225 + v120 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v122 = v239;
  uint64_t v123 = *(unsigned __int8 *)(v239 + 80);
  unint64_t v203 = ~v123;
  uint64_t v124 = (v123 + v121 + 8) & ~v123;
  uint64_t v200 = v119;
  uint64_t v204 = v123;
  uint64_t v125 = v234;
  unint64_t v126 = (v224 + *(unsigned __int8 *)(v234 + 80) + v124) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80);
  uint64_t v199 = v123 | v119;
  unint64_t v127 = (v217 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = v235;
  sub_100E4C130(v241, v128 + v120, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v128 + v121) = v219;
  v129 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 32);
  v129(v128 + v124, v242, v106);
  (*(void (**)(unint64_t, char *, uint64_t))(v125 + 32))(v128 + v126, v243, v117);
  v130 = (void *)(v128 + v127);
  uint64_t v131 = v230;
  void *v130 = v229;
  v130[1] = v131;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v247[3] = My;
  v247[4] = sub_100E484C4((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  v133 = sub_10001D958(v247);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v133, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v247);
  uint64_t v218 = v128;
  uint64_t v217 = v122 + 32;
  v216 = (char *)v129;
  if ((My & 1) == 0) {
    goto LABEL_49;
  }
  uint64_t v134 = v244;
  uint64_t v135 = sub_1004D1434();
  uint64_t v136 = v208;
  swift_retain();
  v137 = sub_100E46CC8(v135, v136);
  swift_release();
  swift_bridgeObjectRelease();
  v138 = (char *)v137[2];
  v139 = (int *)v233;
  uint64_t v140 = v245;
  uint64_t v141 = (uint64_t)v137;
  uint64_t v142 = (uint64_t)v232;
  uint64_t v143 = v235;
  uint64_t v63 = (uint64_t)v209;
  v243 = v138;
  if (!v138)
  {
    uint64_t v198 = 1;
    uint64_t v197 = v207;
    goto LABEL_47;
  }
  v242 = (char *)(v141 + ((*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80)));
  uint64_t v40 = v232 + 8;
  uint64_t v237 = v239 + 8;
  uint64_t v241 = *(void *)(v211 + 72);
  uint64_t v208 = v141;
  swift_bridgeObjectRetain();
  v144 = 0;
  do
  {
    sub_100E4C5CC((uint64_t)&v242[v241 * (void)v144], v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100E4C5CC(v63 + v139[6], v142, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_100E4C634(v142, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        goto LABEL_19;
      }
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v240)(v142, v134);
    uint64_t v146 = sub_1002AAF08(*(void *)(v63 + v139[16]), *(void *)(v63 + v139[17]));
    if (v147 >> 60 != 15)
    {
      uint64_t v62 = v146;
      unint64_t v148 = v147;
      uint64_t v149 = Set.init(minimumCapacity:)();
      uint64_t v61 = 8213;
      uint64_t v150 = static Hasher._hash(seed:_:)();
      uint64_t v151 = -1 << *(unsigned char *)(v149 + 32);
      unint64_t v152 = v150 & ~v151;
      if ((*(void *)(v149 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v152))
      {
        uint64_t v153 = *(void *)(v149 + 48);
        if (*(void *)(v153 + 8 * v152) == 8213) {
          goto LABEL_32;
        }
        uint64_t v154 = ~v151;
        while (1)
        {
          unint64_t v152 = (v152 + 1) & v154;
          if (((*(void *)(v149 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v152) & 1) == 0) {
            break;
          }
          if (*(void *)(v153 + 8 * v152) == 8213) {
            goto LABEL_32;
          }
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v246 = v149;
      sub_100DDF204(8213, v152, isUniquelyReferenced_nonNull_native);
      uint64_t v149 = v246;
      swift_bridgeObjectRelease();
LABEL_32:
      v247[0] = v149;
      sub_100DCA424(&v246, 8216);
      sub_100DCA424(&v246, 8220);
      switch(v148 >> 62)
      {
        case 1uLL:
          LODWORD(v156) = HIDWORD(v62) - v62;
          if (__OFSUB__(HIDWORD(v62), v62)) {
            goto LABEL_58;
          }
          uint64_t v156 = (int)v156;
LABEL_36:
          if (v156 < -1)
          {
            __break(1u);
LABEL_56:
            swift_once();
            goto LABEL_4;
          }
LABEL_37:
          Data.subdata(in:)();
          static Endianness.current.getter();
          sub_100091A80();
          FixedWidthInteger.init(data:ofEndianness:)();
          uint64_t v160 = v247[0];
          if ((v246 & 0x100000000) != 0 || v246 != 76)
          {
            swift_bridgeObjectRelease();
            sub_100037A24(v62, v148);
            uint64_t v134 = v244;
            v139 = (int *)v233;
            uint64_t v142 = (uint64_t)v232;
          }
          else
          {
            swift_bridgeObjectRetain();
            sub_1002AA5D4(v62, v148);
            static Endianness.current.getter();
            FixedWidthInteger.init(data:ofEndianness:)();
            if (BYTE4(v246)) {
              uint64_t v161 = 0;
            }
            else {
              uint64_t v161 = (int)v246;
            }
            BOOL v162 = sub_100DC71B4(v161, v160);
            swift_bridgeObjectRelease_n();
            sub_100037A24(v62, v148);
            uint64_t v134 = v244;
            v139 = (int *)v233;
            uint64_t v142 = (uint64_t)v232;
            if (v162)
            {
              swift_bridgeObjectRelease();
              uint64_t v197 = v207;
              sub_100E4C130(v63, v207, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v198 = 0;
              uint64_t v143 = v235;
              uint64_t v140 = v245;
              goto LABEL_47;
            }
          }
          break;
        case 2uLL:
          uint64_t v158 = *(void *)(v62 + 16);
          uint64_t v157 = *(void *)(v62 + 24);
          BOOL v159 = __OFSUB__(v157, v158);
          uint64_t v156 = v157 - v158;
          if (!v159) {
            goto LABEL_36;
          }
          __break(1u);
LABEL_58:
          __break(1u);
          swift_release();
          swift_errorRelease();
          v201(v223, v236);
          ((void (*)(char *, unint64_t))v240)(v228, v152);
          sub_100E4C634(v245, type metadata accessor for OwnedBeaconGroup);
          __break(1u);
          JUMPOUT(0x100E0F14CLL);
        default:
          goto LABEL_37;
      }
    }
LABEL_19:
    ++v144;
    sub_100E4C634(v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v140 = v245;
  }
  while (v144 != v243);
  swift_bridgeObjectRelease();
  uint64_t v198 = 1;
  uint64_t v143 = v235;
  uint64_t v197 = v207;
LABEL_47:
  uint64_t v163 = v143;
  uint64_t v164 = v211;
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v211 + 56))(v197, v198, 1, v139);
  swift_bridgeObjectRelease();
  int v165 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v164 + 48))(v197, 1, v139);
  v166 = v210;
  if (v165 == 1)
  {
    sub_10001DAB4(v197, &qword_10163B9F0);
LABEL_49:
    uint64_t v167 = v200;
    uint64_t v168 = v245;
    uint64_t v169 = sub_100E120B4(v245);
    char v171 = v170 & 1;
    v172 = v213;
    uint64_t v173 = v244;
    v226(v213, v228, v244);
    uint64_t v174 = v220;
    sub_100E4C5CC(v168, v220, type metadata accessor for OwnedBeaconGroup);
    uint64_t v175 = (v204 + 33) & v203;
    uint64_t v176 = (v224 + v167 + v175) & ~v167;
    uint64_t v177 = swift_allocObject();
    *(void *)(v177 + 16) = v219;
    *(void *)(v177 + 24) = v169;
    *(unsigned char *)(v177 + 32) = v171;
    ((void (*)(uint64_t, char *, uint64_t))v216)(v177 + v175, v172, v173);
    sub_100E4C130(v174, v177 + v176, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_10033093C(v169, v171);
    static Transaction.asyncTask(name:block:)();
    swift_release();
    uint64_t v178 = (uint64_t)v223;
    sub_100E0BBA0((uint64_t)v223, v229, v230);
    sub_100173E88(v169, v171);

    swift_release();
    swift_release();
    v201((char *)v178, v236);
    v179 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v228, v173);
    sub_100E4C634(v168, type metadata accessor for OwnedBeaconGroup);
    v179(v221, v173);
    uint64_t v180 = (uint64_t)v231;
  }
  else
  {
    v201(v223, v236);
    v181 = (void (*)(char *, uint64_t))v240;
    v243 = (char *)(v239 + 8);
    ((void (*)(char *, uint64_t))v240)(v228, v134);
    sub_100E4C634(v140, type metadata accessor for OwnedBeaconGroup);
    uint64_t v182 = v197;
    uint64_t v183 = v206;
    sub_100E4C130(v182, v206, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v184 = v205;
    v185 = v226;
    v226(v205, (char *)(v183 + v139[5]), v134);
    v185(v166, v184, v134);
    v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v188 = swift_slowAlloc();
      uint64_t v245 = swift_slowAlloc();
      uint64_t v246 = 1752392040;
      v247[0] = v245;
      *(_DWORD *)uint64_t v188 = 141558275;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v188 + 12) = 2081;
      uint64_t v189 = v163;
      sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v190 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v246 = sub_1008FA0F0(v190, v191, v247);
      v184 = v205;
      v185 = v226;
      v181 = (void (*)(char *, uint64_t))v240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v181(v210, v134);
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "Sending unpair to managed peripheral %{private,mask.hash}s", (uint8_t *)v188, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v192 = v221;
      v193 = v213;
    }
    else
    {
      v181(v166, v134);

      v192 = v221;
      v193 = v213;
      uint64_t v189 = v163;
    }
    uint64_t v194 = v204;
    unint64_t v195 = v203;
    v185(v193, v184, v134);
    v196 = (void *)swift_allocObject();
    v196[2] = v189;
    v196[3] = sub_100E4B864;
    v196[4] = v218;
    ((void (*)(char *, char *, uint64_t))v216)((char *)v196 + ((v194 + 40) & v195), v193, v134);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();

    swift_release();
    swift_release();
    swift_release();
    v181(v184, v134);
    sub_100E4C634(v206, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v181(v192, v134);
    uint64_t v180 = (uint64_t)v231;
  }
  sub_100E4C634(v180, type metadata accessor for OwnedBeaconGroup);
  return swift_release();
}

id sub_100E0F15C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10036D3E8(v4);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v6 = sub_100E47244(v5, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170F068);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v11, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "unpairDevices: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v15 = result;
    uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

    id result = (id)MobileGestalt_get_current_device();
    if (result)
    {
      uint64_t v17 = result;
      uint64_t chipID = MobileGestalt_get_chipID();

      uint64_t v29 = uniqueChipID;
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v21 = v20;
      uint64_t v29 = chipID;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = v23;
      id v25 = sub_100F2C724();
      uint64_t v27 = v26;
      id result = (id)MACAddress.udid.getter();
      *(void *)a2 = v19;
      *(void *)(a2 + 8) = v21;
      *(void *)(a2 + 16) = v22;
      *(void *)(a2 + 24) = v24;
      *(void *)(a2 + 32) = v25;
      *(void *)(a2 + 40) = v27;
      *(void *)(a2 + 48) = result;
      *(void *)(a2 + 56) = v28;
      *(unsigned char *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = v6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100E0F464(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = a1;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(a2);
}

uint64_t sub_100E0F4E4(uint64_t a1)
{
  v1[5] = a1;
  sub_10000588C(&qword_101639428);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_100E0F58C, a1, 0);
}

uint64_t sub_100E0F58C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  static DispatchTime.now()();
  uint64_t v4 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  sub_10001D608(v2, v1, &qword_101639428);
  uint64_t v5 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_100062604(v1, v5, &qword_101639428);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100E0F6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100E0F6D0, 0, 0);
}

uint64_t sub_100E0F6D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  return _swift_task_switch(sub_100E0F748, v1, 0);
}

uint64_t sub_100E0F748()
{
  sub_10118B228((uint64_t)sub_100E4BF44);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E0F804, 0, 0);
}

uint64_t sub_100E0F804()
{
  type metadata accessor for AnalyticsPublisher();
  v0[6] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E0F8B8;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_100E0F8B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100E0F9C8(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BF90;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6D6F44726F727265;
  *(void *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue();
  Error.domain.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v4;
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x646F43726F727265;
  *(void *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue();
  Error.code.getter();
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  if (*(void *)(*(void *)(a2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) >= 0x100uLL)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
    *(unsigned char *)(inited + 152) = 0;
    return sub_10092E03C(inited);
  }
  return result;
}

uint64_t sub_100E0FB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v21 = a4;
  uint64_t v24 = a3;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v22 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100E120B4(a2);
  char v16 = v15 & 1;
  uint64_t v23 = type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
  sub_100E4C5CC(a2, (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconGroup);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v18 = (v12 + *(unsigned __int8 *)(v22 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v24;
  *(void *)(v19 + 24) = v14;
  *(unsigned char *)(v19 + 32) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v13, v10);
  sub_100E4C130((uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  sub_10033093C(v14, v16);
  static Transaction.asyncTask(name:block:)();
  swift_release();
  sub_100E0BBA0(v26, v27, v28);
  return sub_100173E88(v14, v16);
}

uint64_t sub_100E0FE14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 72) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_100E0FE3C, 0, 0);
}

uint64_t sub_100E0FE3C()
{
  char v1 = *(unsigned char *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = v1 & 1;
  *(_OWORD *)(v4 + 32) = v5;
  return _swift_task_switch(sub_100E0FECC, v2, 0);
}

uint64_t sub_100E0FECC()
{
  sub_10118B228((uint64_t)sub_100E4C120);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E0FF88, 0, 0);
}

uint64_t sub_100E0FF88()
{
  type metadata accessor for AnalyticsPublisher();
  v0[7] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E1003C;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_100E1003C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100E1014C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  if (a2)
  {
    swift_errorRetain();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170F068);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
    sub_10033093C(a1, 1);
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v40 = v27;
      *(_DWORD *)uint64_t v26 = 141558531;
      uint64_t v41 = 1752392040;
      v42[0] = v27;
      LODWORD(v39) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2081;
      sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v38 = v23;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_1008FA0F0(v28, v29, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v26 + 22) = 2082;
      uint64_t v41 = a1;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v41 = sub_1008FA0F0(v30, v31, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100173E88(a1, 1);
      sub_100173E88(a1, 1);
      os_log_t v32 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Remove related records failed for %{private,mask.hash}s. Error %{public}s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      sub_100173E88(a1, 1);
      sub_100173E88(a1, 1);
    }
    sub_10000588C(&qword_10163C5D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10134BF90;
    *(void *)(inited + 32) = 0x6563637553736177;
    *(void *)(inited + 40) = 0xEA00000000007373;
    *(void *)(inited + 48) = 0;
    *(unsigned char *)(inited + 56) = 1;
    *(void *)(inited + 64) = 0x6D6F44726F727265;
    *(void *)(inited + 72) = 0xEB000000006E6961;
    swift_getErrorValue();
    Error.domain.getter();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = v36;
    *(unsigned char *)(inited + 88) = 0;
    *(void *)(inited + 96) = 0x646F43726F727265;
    *(void *)(inited + 104) = 0xE900000000000065;
    swift_getErrorValue();
    Error.code.getter();
    *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
    *(unsigned char *)(inited + 120) = 0;
    strcpy((char *)(inited + 128), "numberOfParts");
    *(_WORD *)(inited + 142) = -4864;
    if (*(void *)(*(void *)(a4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
      *(unsigned char *)(inited + 152) = 0;
      unint64_t v34 = sub_10092E03C(inited);
      sub_100173E88(a1, 1);
      return v34;
    }
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F068);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a3, v8);
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558275;
      uint64_t v41 = 1752392040;
      v42[0] = v19;
      uint64_t v40 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      uint64_t v39 = v18 + 14;
      sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_1008FA0F0(v20, v21, v42);
      a4 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully removed related records for %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }

    sub_10000588C(&qword_10163C5D0);
    uint64_t v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_101347BA0;
    *(void *)(v33 + 32) = 0x6563637553736177;
    *(void *)(v33 + 40) = 0xEA00000000007373;
    *(void *)(v33 + 48) = 1;
    *(unsigned char *)(v33 + 56) = 1;
    strcpy((char *)(v33 + 64), "numberOfParts");
    *(_WORD *)(v33 + 78) = -4864;
    if (*(void *)(*(void *)(a4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(v33 + 80) = UInt8._bridgeToObjectiveC()();
      *(unsigned char *)(v33 + 88) = 0;
      return sub_10092E03C(v33);
    }
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100E10958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[34] = a3;
  v4[35] = a4;
  v4[32] = a1;
  v4[33] = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[36] = v5;
  v4[37] = *(void *)(v5 - 8);
  v4[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v4[39] = v6;
  v4[40] = *(void *)(v6 - 8);
  v4[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[42] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[43] = v8;
  v4[44] = *(void *)(v8 + 64);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  return _swift_task_switch(sub_100E10AEC, 0, 0);
}

uint64_t sub_100E10AEC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 112, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 136))
  {
    sub_10001CEB0((long long *)(v0 + 112), v0 + 152);
    sub_10001CD44((void *)(v0 + 152), *(void *)(v0 + 176));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E10C28;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E10C28(uint64_t a1)
{
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E10D28, 0, 0);
}

uint64_t sub_100E10D28()
{
  uint64_t v1 = (uint64_t)(v0 + 19);
  uint64_t v2 = v0[48];
  if (v2)
  {
    uint64_t v3 = v0[46];
    uint64_t v4 = v0[43];
    uint64_t v5 = v0[42];
    uint64_t v6 = v0[35];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[49] = v7;
    v0[50] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v3, v6, v5);
    unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v9 = swift_allocObject();
    v0[51] = v9;
    *(void *)(v9 + 16) = v2;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v3, v5);
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[52] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100E11190;
    return retry<A>(times:retryDelay:shouldRetry:block:)();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F068);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing OwnerCommandService to send unpair!", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[41];
    uint64_t v16 = v0[38];
    uint64_t v25 = v0[40];
    uint64_t v26 = v0[39];
    uint64_t v17 = v0[36];
    uint64_t v18 = v0[37];
    uint64_t v19 = v0[33];
    uint64_t v20 = v0[34];

    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    v0[12] = sub_1000BFA0C;
    v0[13] = v21;
    v0[8] = _NSConcreteStackBlock;
    v0[9] = 1107296256;
    v0[10] = sub_1004B5480;
    v0[11] = &unk_1015F8BB8;
    uint64_t v22 = _Block_copy(v0 + 8);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[27] = _swiftEmptyArrayStorage;
    sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v26);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

uint64_t sub_100E11190()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100E11504;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100E112AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100E112AC()
{
  uint64_t v1 = v0[41];
  uint64_t v11 = v0[40];
  uint64_t v2 = v0[38];
  uint64_t v12 = v0[39];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[34];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  v0[6] = sub_1000A14F4;
  v0[7] = v7;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015F8C30;
  unint64_t v8 = _Block_copy(v0 + 2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[28] = _swiftEmptyArrayStorage;
  sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100E11504()
{
  unint64_t v31 = v0;
  swift_release();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[49];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[35];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F068);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[45];
  uint64_t v11 = v0[42];
  uint64_t v10 = v0[43];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[29] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[31] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "RX Unpaired %{private,mask.hash}s failed with error %{public}@", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[41];
  os_log_t loga = (os_log_t)v0[40];
  uint64_t v17 = v0[38];
  uint64_t v29 = v0[39];
  uint64_t v18 = v0[36];
  uint64_t v19 = v0[37];
  uint64_t v20 = v0[33];
  uint64_t v21 = v0[34];
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  *(void *)(v22 + 24) = v21;
  v0[6] = sub_1000A14F4;
  v0[7] = v22;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015F8C30;
  uint64_t v23 = _Block_copy(v0 + 2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[28] = _swiftEmptyArrayStorage;
  sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  ((void (*)(uint64_t, uint64_t))loga[1].isa)(v16, v29);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_100E11A3C()
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F068);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RX Unpair failed. Retrying...", v3, 2u);
    swift_slowDealloc();
  }

  return 1;
}

uint64_t sub_100E11B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E11BD8, 0, 0);
}

uint64_t sub_100E11BD8()
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = sub_100010324(v1, (uint64_t)qword_10170F068);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Trying RX Unpair", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100E11D30;
  uint64_t v6 = v0[5];
  return sub_10122D1C4(v6, 0);
}

uint64_t sub_100E11D30()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100E11E7C, 0, 0);
  }
}

uint64_t sub_100E11E7C()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0[7] + 16))(v0[8], v0[5], v0[6]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[7];
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[6];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v0[2] = 1752392040;
    *(_DWORD *)uint64_t v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent RX Unpair to %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  }

  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100E120B4(uint64_t a1)
{
  os_log_type_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v29 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (void *)v2[2];
  *unint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v32 = 0;
  uint64_t v17 = sub_1004D1434();
  __chkstk_darwin(v17);
  *(&v28 - 4) = (uint64_t)v2;
  *(&v28 - 3) = (uint64_t)&v32;
  *(&v28 - 2) = a1;
  *(&v28 - 1) = v4;
  sub_100E08474((void (*)(char *))sub_100E4ACD4, (uint64_t)(&v28 - 6), v17);
  swift_bridgeObjectRelease();
  sub_100AE75E0(a1 + *(int *)(v5 + 24), (uint64_t)v10);
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5);
  sub_10001DAB4((uint64_t)v10, &qword_10163BB20);
  if (v17 == 1) {
    return v32;
  }
  if (qword_101637310 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170F068);
  uint64_t v20 = v29;
  sub_100E4C5CC(a1, v29, type metadata accessor for OwnedBeaconGroup);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558275;
    uint64_t v30 = 1752392040;
    uint64_t v31 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v28 = v23 + 14;
    type metadata accessor for UUID();
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_1008FA0F0(v25, v26, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100E4C634(v20, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Group %{private,mask.hash}s still exists. Need to clean up", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100E4C634(v20, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v18 = sub_100E09380(a1);
  swift_errorRelease();
  return v18;
}

void sub_100E125BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v68 = a1;
  uint64_t v64 = a5;
  uint64_t v61 = a4;
  uint64_t v59 = a3;
  uint64_t v69 = a2;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v60 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v62 = v6;
  uint64_t v63 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  __chkstk_darwin(v7);
  uint64_t v65 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  os_log_type_t v71 = *(char **)(v12 - 8);
  uint64_t v13 = *((void *)v71 + 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v57 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v58 = (uint64_t)&v56 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v56 - v17;
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v19 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v19 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v20 = &v19[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v21 = type metadata accessor for DispatchTime();
  os_log_type_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v22(&v19[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v21);
  uint64_t v23 = v68;
  *((void *)v19 + 15) = 0xD00000000000002ELL;
  *((void *)v19 + 16) = 0x8000000101418F30;
  uint64_t v24 = type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  uint64_t v70 = v19;
  swift_release();
  sub_100ACD178((uint64_t)v11);
  uint64_t v25 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v71 + 6);
  uint64_t v69 = v12;
  if (v25(v11, 1, v12) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_10163B9F0);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170F068);
    uint64_t v27 = v65;
    uint64_t v28 = v66;
    uint64_t v29 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v23, v67);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 141558275;
      uint64_t v72 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      os_log_type_t v71 = (char *)(v32 + 14);
      sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = sub_1008FA0F0(v33, v34, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing beacon record for %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
    }
  }
  else
  {
    uint64_t v68 = v24;
    sub_100E4C130((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v35 = sub_100DBB224((uint64_t)v18, 1, 0);
    uint64_t v36 = v35;
    uint64_t v37 = v59;
    if (!v35)
    {
      uint64_t v36 = *v59;
      swift_errorRetain();
    }
    *uint64_t v37 = v36;
    swift_errorRetain();
    swift_errorRelease();
    uint64_t v38 = v58;
    sub_100E4C5CC((uint64_t)v18, v58, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v39 = v63;
    sub_100E4C5CC(v61, v63, type metadata accessor for OwnedBeaconGroup);
    unint64_t v40 = (v71[80] + 24) & ~(unint64_t)v71[80];
    os_log_type_t v71 = v18;
    unint64_t v41 = (v13 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (*(unsigned __int8 *)(v60 + 80) + v41 + 8) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    unint64_t v43 = (v62 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = v70;
    sub_100E4C130(v38, v44 + v40, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v44 + v41) = v35;
    sub_100E4C130(v39, v44 + v42, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v44 + v43) = v64;
    swift_retain();
    swift_errorRetain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    if (v35)
    {
      uint64_t v45 = (uint64_t)v71;
      swift_errorRetain();
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100010324(v46, (uint64_t)qword_10170F068);
      uint64_t v47 = v57;
      sub_100E4C5CC(v45, v57, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 141558531;
        uint64_t v72 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 12) = 2081;
        sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v72 = sub_1008FA0F0(v51, v52, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634(v47, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        *(_WORD *)(v50 + 22) = 2082;
        uint64_t v72 = v35;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v53 = String.init<A>(describing:)();
        uint64_t v72 = sub_1008FA0F0(v53, v54, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to remove %{private,mask.hash}s due to %{public}s", (uint8_t *)v50, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        swift_errorRelease();
        swift_release();
        uint64_t v55 = (uint64_t)v71;
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        sub_100E4C634(v47, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_errorRelease();
        swift_errorRelease();
        swift_release();
        uint64_t v55 = v45;
      }
      sub_100E4C634(v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      sub_100E4C634((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_release();
    }
  }
}

uint64_t sub_100E1306C(uint64_t a1)
{
  v1[5] = a1;
  sub_10000588C(&qword_101639428);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_100E4CC00, a1, 0);
}

uint64_t sub_100E13114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100E1313C, 0, 0);
}

uint64_t sub_100E1313C()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  return _swift_task_switch(sub_100E131C4, v3, 0);
}

uint64_t sub_100E131C4()
{
  sub_10118B228((uint64_t)sub_100E4B3B8);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E13280, 0, 0);
}

uint64_t sub_100E13280()
{
  type metadata accessor for AnalyticsPublisher();
  v0[8] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E13334;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_100E13334()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100E13444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100D1C588();
  if (a2)
  {
    sub_10000588C(&qword_10163C5D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10134CDE0;
    *(void *)(inited + 32) = 0x6563637553736177;
    *(void *)(inited + 40) = 0xEA00000000007373;
    *(void *)(inited + 48) = 0;
    *(unsigned char *)(inited + 56) = 1;
    *(void *)(inited + 64) = 0x6D6F44726F727265;
    *(void *)(inited + 72) = 0xEB000000006E6961;
    swift_getErrorValue();
    swift_errorRetain();
    Error.domain.getter();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = v6;
    *(unsigned char *)(inited + 88) = 0;
    *(void *)(inited + 96) = 0x646F43726F727265;
    *(void *)(inited + 104) = 0xE900000000000065;
    swift_getErrorValue();
    Error.code.getter();
    *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
    *(unsigned char *)(inited + 120) = 0;
    *(void *)(inited + 128) = 0x626D754E74726170;
    *(void *)(inited + 136) = 0xEA00000000007265;
    *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
    *(unsigned char *)(inited + 152) = 0;
    strcpy((char *)(inited + 160), "numberOfParts");
    *(_WORD *)(inited + 174) = -4864;
    if (*(void *)(*(void *)(a3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) <= 0xFFuLL)
    {
      *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
      *(unsigned char *)(inited + 184) = 0;
      unint64_t v7 = sub_10092E03C(inited);
      swift_errorRelease();
      return v7;
    }
  }
  else
  {
    sub_10000588C(&qword_10163C5D0);
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347500;
    *(void *)(v8 + 32) = 0x6563637553736177;
    *(void *)(v8 + 40) = 0xEA00000000007373;
    *(void *)(v8 + 48) = 1;
    *(unsigned char *)(v8 + 56) = 1;
    *(void *)(v8 + 64) = 0x626D754E74726170;
    *(void *)(v8 + 72) = 0xEA00000000007265;
    *(NSNumber *)(v8 + 80) = UInt8._bridgeToObjectiveC()();
    *(unsigned char *)(v8 + 88) = 0;
    strcpy((char *)(v8 + 96), "numberOfParts");
    *(_WORD *)(v8 + 110) = -4864;
    if (*(void *)(*(void *)(a3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(v8 + 112) = UInt8._bridgeToObjectiveC()();
      *(unsigned char *)(v8 + 120) = 0;
      return sub_10092E03C(v8);
    }
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100E13738(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (uint64_t *)((char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 16);
  *unint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v10 = a1 + *(int *)(type metadata accessor for BluetoothManagerDevice() + 36);
    unint64_t v11 = *(void *)(v10 + 8);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)v10;
      sub_1000361E0(*(void *)v10, *(void *)(v10 + 8));
      if (sub_100DC8590(v12, v11))
      {
        uint64_t v23 = &type metadata for AirpodsPairingSpec1_1;
        unint64_t v24 = sub_100E4AC80();
        sub_100037A24(v12, v11);
        goto LABEL_7;
      }
      sub_100037A24(v12, v11);
    }
    uint64_t v23 = &type metadata for AirpodsPairingSpec1_0;
    unint64_t v24 = sub_100E4AC2C();
LABEL_7:
    sub_10001CEB0(&v22, (uint64_t)v21);
    swift_beginAccess();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 176);
    sub_10001CEB0(v21, v2 + 176);
    swift_endAccess();
    if (qword_101637310 == -1) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  swift_once();
LABEL_8:
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170F068);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_beginAccess();
    sub_10001D010(v2 + 176, (uint64_t)&v22);
    sub_10000588C(&qword_10165FFA0);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)&long long v22 = sub_1008FA0F0(v17, v18, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Using PairingSpec: %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100E13ABC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (void *)v1[2];
  *unint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v11 = type metadata accessor for Transaction();
    __chkstk_darwin(v11);
    *(void *)&v12[-32] = v1;
    *(void *)&v12[-24] = a1;
    *(void *)&v12[-16] = v3;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E13C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a3;
  uint64_t v54 = a1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  unint64_t v42 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000588C(&qword_10165FEF0);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v56 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000588C(&qword_10165FEF8);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v43 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000588C(&qword_10165FF00);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10165FF08);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_10001D010(a2 + 176, (uint64_t)v58);
  uint64_t v11 = v59;
  uint64_t v12 = v60;
  sub_10001CD44(v58, v59);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v13 = __DataStorage.init(length:)();
  uint64_t v62 = 0x3C00000000;
  uint64_t v63 = v13;
  sub_10072AF34((int *)&v62, 0);
  uint64_t v14 = sub_1010E3290(v62, v63 | 0x4000000000000000);
  unint64_t v16 = v15;
  uint64_t v17 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v12 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_10001D958(&v62);
  v17(v14, v16, v11, v12);
  sub_10001CFB8(v14, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
  sub_10001D010((uint64_t)&v62, (uint64_t)v58);
  char v61 = 0;
  unint64_t v18 = (void *)sub_100E1B0F8((uint64_t)v58, v57);
  sub_10001DAB4((uint64_t)v58, &qword_10165FE98);
  v58[0] = v18;
  uint64_t v55 = a2;
  id v66 = *(id *)(a2 + 16);
  id v19 = v66;
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v21 = (uint64_t)v42;
  unint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v41(v42, 1, 1, v20);
  id v22 = v19;
  sub_10000588C(&qword_10165FEA0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_10165FF10, &qword_10165FEA0);
  sub_10027B124();
  uint64_t v23 = v21;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v21, &qword_10163C6C8);

  swift_release();
  if (qword_101637128 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v24, (uint64_t)qword_10165FA18);
  v58[0] = v22;
  v41((char *)v21, 1, 1, v20);
  sub_100062734(&qword_10165FF18, &qword_10165FEF0);
  id v25 = v22;
  uint64_t v26 = v43;
  uint64_t v27 = v45;
  uint64_t v28 = v56;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4(v23, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v27);
  sub_10000588C(&qword_10165FE98);
  sub_100062734(&qword_10165FF20, &qword_10165FEF8);
  uint64_t v29 = v48;
  uint64_t v30 = v47;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v30);
  sub_10000588C(&qword_10165FF28);
  sub_100062734(&qword_10165FF30, &qword_10165FF00);
  sub_100062734(&qword_10165FF38, &qword_10165FF28);
  os_log_type_t v31 = v51;
  uint64_t v32 = v50;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v32);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v55;
  swift_weakInit();
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = v54;
  v35[2] = v33;
  v35[3] = v36;
  v35[4] = v57;
  sub_100062734(&qword_10165FF40, &qword_10165FF08);
  swift_retain();
  swift_retain();
  uint64_t v37 = v53;
  uint64_t v38 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v37);
  *(void *)(v34 + 104) = v38;
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v62);
}

uint64_t sub_100E14524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10001D010(a1, a2);
  *(unsigned char *)(a2 + 41) = 0;
  return result;
}

uint64_t sub_100E14554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v23, &qword_10165FE98);
    if (v23[41])
    {
      sub_10006105C((uint64_t)v23, (uint64_t)v22);
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100010324(v8, (uint64_t)qword_10170F068);
      sub_1000610B8((uint64_t)v22, (uint64_t)v21);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        uint64_t v12 = sub_101321420();
        sub_1008FA0F0(v12, v13, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v21);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to request pairing eligibility data. Error %s", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v21);
      }

      sub_100E18770(a4, 1);
      sub_100061234();
      uint64_t v18 = swift_allocError();
      sub_1000610B8((uint64_t)v22, v19);
      sub_100E41064(v18);
      swift_release();
      sub_100061288((uint64_t)v22);
      return swift_errorRelease();
    }
    else
    {
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F068);
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Requested pairing eligibility data. Waiting for AirPods to respond.", v17, 2u);
        swift_slowDealloc();
      }

      *(void *)(v7 + 104) = 0;
      swift_release();
      swift_release();
      return sub_10001DAB4((uint64_t)v23, &qword_10165FE98);
    }
  }
  return result;
}

uint64_t sub_100E1488C(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_log_type_t v10 = (void *)v2[2];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    *(void *)&v14[-32] = v2;
    *(void *)&v14[-24] = a1;
    v14[-16] = a2 & 1;
    *(void *)&v14[-8] = v5;
    return static Transaction.named<A>(_:with:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E14A50(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v95 = a2;
  int v82 = a4;
  uint64_t v91 = a1;
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v93 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163C738);
  uint64_t v77 = *(void *)(v7 - 8);
  uint64_t v78 = v7;
  __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163C740);
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10165FF48);
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  __chkstk_darwin(v11);
  v84 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10165FF50);
  uint64_t v87 = *(void *)(v13 - 8);
  uint64_t v88 = v13;
  __chkstk_darwin(v13);
  uint64_t v83 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10165FF58);
  uint64_t v89 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10165FF60);
  uint64_t v90 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10165FF68);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101649D00);
  uint64_t v92 = a3;
  uint64_t v25 = v94;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v25)
  {
    swift_errorRelease();
    uint64_t v26 = 0;
    uint64_t v27 = v95;
  }
  else
  {
    uint64_t v70 = v17;
    uint64_t v71 = v15;
    uint64_t v72 = v20;
    uint64_t v69 = v18;
    uint64_t v73 = 0;
    uint64_t v74 = v24;
    uint64_t v75 = v22;
    uint64_t v94 = v21;
    uint64_t v28 = v95;
    id v96 = *(id *)(v95 + 16);
    id v29 = v96;
    uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    uint64_t v33 = (uint64_t)v93;
    uint64_t v67 = v30;
    id v66 = v32;
    uint64_t v65 = v31 + 56;
    ((void (*)(char *, uint64_t, uint64_t))v32)(v93, 1, 1);
    uint64_t v34 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
    unint64_t v35 = sub_10027B124();
    id v63 = v29;
    uint64_t v36 = v76;
    uint64_t v68 = v34;
    unint64_t v64 = v35;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v33, &qword_10163C6C8);

    swift_release();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101639B58);
    sub_10000588C(&qword_10163C628);
    sub_100062734(&qword_10163C778, &qword_10163C738);
    uint64_t v37 = v92;
    uint64_t v62 = &protocol conformance descriptor for Future<A, B>;
    sub_100062734(&qword_10163C780, &qword_10163C628);
    uint64_t v38 = v78;
    uint64_t v39 = v79;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v36, v38);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v28;
    v82 &= 1u;
    *(unsigned char *)(v40 + 24) = v82;
    swift_retain();
    uint64_t v41 = sub_10000588C(&qword_10165FE98);
    sub_100062734(&qword_10163C788, &qword_10163C740);
    unint64_t v42 = v84;
    uint64_t v43 = v81;
    uint64_t v78 = v41;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v39, v43);
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = v28;
    *(void *)(v44 + 24) = v37;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10165FED8);
    sub_10000588C(&qword_10165FEA0);
    sub_100062734(&qword_10165FF70, &qword_10165FF48);
    sub_100062734(&qword_10165FF10, &qword_10165FEA0);
    uint64_t v45 = v83;
    uint64_t v46 = v86;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v42, v46);
    if (qword_101637120 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v47, (uint64_t)qword_10165FA00);
    uint64_t v48 = v63;
    id v97 = v63;
    uint64_t v49 = (uint64_t)v93;
    v66(v93, 1, 1, v67);
    sub_100062734(&qword_10165FF78, &qword_10165FF50);
    id v50 = v48;
    uint64_t v51 = v70;
    uint64_t v52 = v88;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4(v49, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v87 + 8))(v45, v52);
    sub_100062734(&qword_10165FF80, &qword_10165FF58);
    uint64_t v53 = v72;
    uint64_t v54 = v71;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v51, v54);
    sub_10000588C(&qword_10165FF28);
    sub_100062734(&qword_10165FF88, &qword_10165FF60);
    sub_100062734(&qword_10165FF38, &qword_10165FF28);
    uint64_t v55 = v74;
    uint64_t v56 = v69;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v56);
    uint64_t v57 = swift_allocObject();
    uint64_t v27 = v95;
    swift_weakInit();
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v57;
    uint64_t v59 = v92;
    *(void *)(v58 + 24) = v91;
    *(void *)(v58 + 32) = v59;
    *(unsigned char *)(v58 + 40) = v82;
    sub_100062734(&qword_10165FF90, &qword_10165FF68);
    swift_retain();
    swift_retain();
    uint64_t v60 = v94;
    uint64_t v26 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v60);
  }
  *(void *)(v27 + 96) = v26;
  return swift_release();
}

uint64_t sub_100E1566C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_100E156F8(a1, a4, a5 & 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100E156F8(uint64_t a1, uint64_t a2, int a3)
{
  int v210 = a3;
  uint64_t v215 = a2;
  uint64_t v221 = a1;
  uint64_t v195 = *v3;
  uint64_t v209 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v213 = *(void **)(v209 - 8);
  uint64_t v4 = __chkstk_darwin(v209);
  uint64_t v224 = (uint64_t)&v190 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v223 = (uint8_t *)&v190 - v6;
  uint64_t v7 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v190 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v190 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10165FE78);
  __chkstk_darwin(v13 - 8);
  v202 = (uint64_t *)((char *)&v190 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000588C(&qword_10163BB20);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v222 = (char *)&v190 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v208 = (uint64_t)&v190 - v19;
  __chkstk_darwin(v18);
  uint64_t v212 = (uint64_t)&v190 - v20;
  uint64_t v217 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v214 = *(void *)(v217 - 8);
  uint64_t v21 = __chkstk_darwin(v217);
  uint64_t v204 = (uint64_t)&v190 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v200 = (uint64_t)&v190 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v201 = (uint64_t)&v190 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v190 - v27;
  uint64_t v220 = type metadata accessor for MACAddress();
  uint64_t v218 = *(void *)(v220 - 8);
  uint64_t v29 = __chkstk_darwin(v220);
  uint64_t v31 = (char *)&v190 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  v193 = (char *)&v190 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v190 - v35;
  __chkstk_darwin(v34);
  v216 = (char *)&v190 - v37;
  uint64_t v38 = type metadata accessor for DispatchPredicate();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (uint64_t *)((char *)&v190 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v225 = v3;
  unint64_t v42 = (void *)v3[2];
  *uint64_t v41 = v42;
  unsigned int v43 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v44 = *(void (**)(void, void, void))(v39 + 104);
  uint64_t v207 = v39 + 104;
  v219 = (void (*)(void *, void, uint64_t))v44;
  v44(v41, enum case for DispatchPredicate.onQueue(_:), v38);
  id v196 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)();
  uint64_t v45 = *(void (**)(void, void))(v39 + 8);
  uint64_t v197 = v41;
  uint64_t v46 = v41;
  uint64_t v47 = v45;
  uint64_t v199 = v38;
  uint64_t v198 = v39 + 8;
  v45(v46, v38);
  if (v42)
  {
    unsigned int v203 = v43;
    v192 = v36;
    uint64_t v211 = v28;
    v205 = v9;
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v49 = sub_100010324(v48, (uint64_t)qword_10170F068);
  uint64_t v50 = v221;
  sub_10001D074(v221, (uint64_t)&v233, &qword_10165FE98);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v54 = (uint64_t)v222;
  uint64_t v206 = v12;
  unint64_t v191 = v31;
  uint64_t v194 = (uint64_t (*)(void *, uint64_t))v47;
  if (v53)
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    v231[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315138;
    sub_10001D074((uint64_t)&v233, (uint64_t)&v226, &qword_10165FE98);
    sub_10000588C(&qword_10165FE98);
    uint64_t v56 = String.init<A>(describing:)();
    uint64_t v226 = sub_1008FA0F0(v56, v57, v231);
    uint64_t v50 = v221;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v233, &qword_10165FE98);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "handlePublisherUpdate %s", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v54 = (uint64_t)v222;
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4((uint64_t)&v233, &qword_10165FE98);
  }

  uint64_t v58 = v219;
  sub_10001D074(v50, (uint64_t)&v233, &qword_10165FE98);
  if ((v234 & 1) == 0)
  {
    sub_10001CEB0(&v233, (uint64_t)&v226);
    uint64_t v66 = v227;
    uint64_t v67 = v228;
    sub_10001CD44(&v226, v227);
    switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v67 + 320))(v66, v67))
    {
      case 0u:
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v70 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Requested beacon group data.", v70, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v225[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 1;
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v226);
      case 2u:
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v83, v84))
        {
          uint64_t v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v85 = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "Sent initiate pairing.", v85, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v225[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 0;
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v226);
      case 6u:
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v88 = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Sent finalize pairing.", v88, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v225[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 4;
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v226);
      case 8u:
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Sent pairing complete.", v91, 2u);
          swift_slowDealloc();
        }

        char v92 = v210;
        uint64_t v93 = v225;
        sub_100E40AD8(v210 & 1);
        sub_100E34C64();
        uint64_t v94 = v93[10];
        uint64_t v95 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
        int v96 = *(unsigned __int8 *)(v94 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
        uint64_t v97 = *(void *)(v94 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
            + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs;
        swift_beginAccess();
        if (*(void *)(*(void *)v97 + 16))
        {
          uint64_t v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v98, v99))
          {
            uint64_t v100 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v100 = 0;
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Force Re-Pairing next serial number.", v100, 2u);
            swift_slowDealloc();
          }

          uint64_t v101 = v197;
          unint64_t v102 = v196;
          *uint64_t v197 = v196;
          uint64_t v103 = v199;
          v58(v101, v203, v199);
          id v104 = v102;
          LOBYTE(v102) = _dispatchPreconditionTest(_:)();
          v105 = v194;
          v194(v101, v103);
          if (v102)
          {
            uint64_t v106 = type metadata accessor for Transaction();
            __chkstk_darwin(v106);
            uint64_t v107 = v215;
            *(&v190 - 4) = (uint64_t)v225;
            *(&v190 - 3) = v107;
            *((unsigned char *)&v190 - 16) = v92 & 1;
            uint64_t v108 = v195;
            *(&v190 - 1) = v195;
            static Transaction.named<A>(_:with:)();
            *uint64_t v101 = v104;
            v219(v101, v203, v103);
            id v109 = v104;
            char v110 = _dispatchPreconditionTest(_:)();
            uint64_t v111 = v105(v101, v103);
            if (v110)
            {
              __chkstk_darwin(v111);
              uint64_t v112 = v215;
              *(&v190 - 4) = (uint64_t)v225;
              *(&v190 - 3) = v112;
              *(&v190 - 2) = v108;
              static Transaction.named<A>(_:with:)();
              return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v226);
            }
          }
          else
          {
LABEL_121:
            __break(1u);
          }
          __break(1u);
          goto LABEL_123;
        }
        if (v96 == 10)
        {
          v186 = Logger.logObject.getter();
          os_log_type_t v187 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v186, v187))
          {
            uint64_t v188 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v188 = 0;
            _os_log_impl((void *)&_mh_execute_header, v186, v187, "Pairing has been completed for all serial numbers over classic. Need LE pairing", v188, 2u);
            swift_slowDealloc();
          }

          sub_100E18770(v215, 0);
          uint64_t v189 = v216;
          sub_100A3AC74(v216);
          sub_100E4026C((uint64_t)v189, 0, 0, 0xF000000000000000);
          (*(void (**)(char *, uint64_t))(v218 + 8))(v189, v220);
        }
        else if (v96 == 9)
        {
          uint64_t v180 = Logger.logObject.getter();
          os_log_type_t v181 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v180, v181))
          {
            uint64_t v182 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v182 = 0;
            _os_log_impl((void *)&_mh_execute_header, v180, v181, "Pairing has been completed for all serial numbers.", v182, 2u);
            swift_slowDealloc();
          }

LABEL_111:
          sub_100E18770(v215, 1);
        }
        else
        {
          *(unsigned char *)(v94 + v95) = 6;
          sub_100E176B4(v215);
        }
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v226);
      default:
        swift_retain_n();
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v78, v79))
        {
          uint64_t v80 = (uint8_t *)swift_slowAlloc();
          v231[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v80 = 136315138;
          unint64_t v81 = sub_1011418C0(*(unsigned char *)(v225[10]
                                       + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
          uint64_t v230 = sub_1008FA0F0(v81, v82, v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v78, v79, "Invalid pairing state %s!", v80, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        goto LABEL_111;
    }
  }
  sub_10006105C((uint64_t)&v233, (uint64_t)&v226);
  sub_1000610B8((uint64_t)&v226, (uint64_t)v231);
  swift_retain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v230 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136446466;
    uint64_t v62 = sub_101321420();
    uint64_t v229 = sub_1008FA0F0(v62, v63, &v230);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100061288((uint64_t)v231);
    *(_WORD *)(v61 + 12) = 2082;
    unint64_t v64 = sub_1011418C0(*(unsigned char *)(v225[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
    uint64_t v229 = sub_1008FA0F0(v64, v65, &v230);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Pairing error %{public}s. Pairing state: %{public}s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100061288((uint64_t)v231);

    swift_release_n();
  }
  uint64_t v71 = v213;
  Swift::Int v72 = sub_100DF36BC((uint64_t)&off_1015A5B10);
  sub_1000610B8((uint64_t)&v226, (uint64_t)v231);
  if (v232)
  {
    swift_bridgeObjectRelease();
    sub_100061288((uint64_t)v231);
  }
  else
  {
    uint64_t v230 = v231[0];
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast())
    {
      BOOL v73 = sub_100DC8468(v229, v72);
      swift_bridgeObjectRelease();
      if (v73)
      {
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          unint64_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v76 = 0;
          uint64_t v77 = "Need LE pairing. Not sending pairing completion.";
          goto LABEL_90;
        }
LABEL_91:

        goto LABEL_92;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v221 = v49;
  v113 = v216;
  sub_100A3AC74(v216);
  uint64_t v114 = v212;
  sub_100AE800C(v212);
  v115 = *(void **)(v218 + 8);
  v219 = (void (*)(void *, void, uint64_t))(v218 + 8);
  v213 = v115;
  ((void (*)(char *, uint64_t))v115)(v113, v220);
  v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  if (v116(v114, 1, v217) == 1)
  {
    sub_10001DAB4(v114, &qword_10163BB20);
  }
  else
  {
    uint64_t v117 = v114;
    uint64_t v118 = (uint64_t)v211;
    sub_100E4C130(v117, (uint64_t)v211, type metadata accessor for OwnedBeaconGroup);
    if (sub_1004D6B84())
    {
      uint64_t v119 = v201;
      sub_100E4C5CC(v118, v201, type metadata accessor for OwnedBeaconGroup);
      uint64_t v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v122 = (uint8_t *)swift_slowAlloc();
        uint64_t v224 = swift_slowAlloc();
        v231[0] = v224;
        *(_DWORD *)uint64_t v122 = 136446210;
        v223 = v122 + 4;
        type metadata accessor for UUID();
        sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v230 = sub_1008FA0F0(v123, v124, v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634(v119, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Buds pairing failed but we have beacon group %{public}s to start LE pairing. Not sending pairing completion.", v122, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100E4C634(v119, type metadata accessor for OwnedBeaconGroup);
      }

      sub_1004CCF70(v221);
      uint64_t v150 = sub_1004D7118();
      uint64_t v151 = v202;
      sub_10115B750(v150, v202);
      swift_bridgeObjectRelease();
      uint64_t v152 = sub_10000588C(&qword_10165FE80);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v152 - 8) + 48))(v151, 1, v152) == 1)
      {
        sub_10001DAB4((uint64_t)v151, &qword_10165FE78);
        uint64_t v153 = Logger.logObject.getter();
        os_log_type_t v154 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v153, v154))
        {
          v155 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v155 = 0;
          _os_log_impl((void *)&_mh_execute_header, v153, v154, "Missing MAC address to start LE pairing", v155, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        sub_10001CFB8(*v151, v151[1]);
        uint64_t v156 = (char *)v151 + *(int *)(v152 + 48);
        uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v218 + 32);
        uint64_t v158 = v193;
        uint64_t v159 = v220;
        v157(v193, v156, v220);
        uint64_t v160 = (uint64_t)v192;
        v157(v192, v158, v159);
        sub_100E3E24C(v160, 0, v210 & 1);
        ((void (*)(uint64_t, uint64_t))v213)(v160, v159);
      }
      sub_100E4C634(v118, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_92;
    }
    sub_100E4C634(v118, type metadata accessor for OwnedBeaconGroup);
  }
  uint64_t v125 = v225[10];
  if (*(unsigned __int8 *)(v125 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) < 2u) {
    goto LABEL_96;
  }
  unint64_t v126 = v216;
  sub_100A3AC74(v216);
  uint64_t v127 = v208;
  sub_100AE800C(v208);
  ((void (*)(char *, uint64_t))v213)(v126, v220);
  if (v116(v127, 1, v217) != 1)
  {
    uint64_t v129 = v200;
    sub_100E4C130(v127, v200, type metadata accessor for OwnedBeaconGroup);
    char v130 = sub_1004D6B84();
    uint64_t v128 = v209;
    if (v130)
    {
      sub_100E4C634(v129, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_48;
    }
    uint64_t v163 = Logger.logObject.getter();
    os_log_type_t v164 = static os_log_type_t.default.getter();
    BOOL v165 = os_log_type_enabled(v163, v164);
    uint64_t v54 = (uint64_t)v222;
    if (v165)
    {
      v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v163, v164, "Buds pairing failed. LE pairing not needed. Sending pairing completion.", v166, 2u);
      swift_slowDealloc();
    }

    sub_100E4C634(v129, type metadata accessor for OwnedBeaconGroup);
LABEL_96:
    sub_100061234();
    uint64_t v167 = swift_allocError();
    sub_1000610B8((uint64_t)&v226, v168);
    sub_100E41064(v167);
    swift_errorRelease();
    char v162 = 1;
    goto LABEL_97;
  }
  sub_10001DAB4(v127, &qword_10163BB20);
  uint64_t v128 = v209;
LABEL_48:
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v131, v132))
  {
    v133 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v133 = 0;
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "Buds pairing failed but we have beacon group data to start LE pairing. Not sending pairing completion.", v133, 2u);
    swift_slowDealloc();
  }

  uint64_t v134 = *(void *)(*(void *)(v125 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                   + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  uint64_t v135 = v134 + 64;
  uint64_t v136 = 1 << *(unsigned char *)(v134 + 32);
  uint64_t v137 = -1;
  if (v136 < 64) {
    uint64_t v137 = ~(-1 << v136);
  }
  unint64_t v138 = v137 & *(void *)(v134 + 64);
  int64_t v139 = (unint64_t)(v136 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v140 = 0;
  uint64_t v54 = (uint64_t)v222;
  if (!v138) {
    goto LABEL_54;
  }
LABEL_53:
  unint64_t v141 = __clz(__rbit64(v138));
  v138 &= v138 - 1;
  for (unint64_t i = v141 | (v140 << 6); ; unint64_t i = __clz(__rbit64(v144)) + (v140 << 6))
  {
    uint64_t v146 = (uint64_t)v223;
    sub_100E4C5CC(*(void *)(v134 + 56) + v71[9] * i, (uint64_t)v223, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v147 = v146;
    uint64_t v148 = v224;
    sub_100E4C130(v147, v224, type metadata accessor for MultipartAccessoryPairingInfo);
    if (*(unsigned char *)(v148 + *(int *)(v128 + 28)) == 2)
    {
      swift_release();
      uint64_t v149 = (uint64_t)v205;
      sub_100E4C130(v148, (uint64_t)v205, type metadata accessor for MultipartAccessoryPairingInfo);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v71[7])(v149, 0, 1, v128);
      goto LABEL_85;
    }
    sub_100E4C634(v148, type metadata accessor for MultipartAccessoryPairingInfo);
    if (v138) {
      goto LABEL_53;
    }
LABEL_54:
    int64_t v143 = v140 + 1;
    if (__OFADD__(v140, 1))
    {
      __break(1u);
      goto LABEL_121;
    }
    if (v143 >= v139) {
      goto LABEL_84;
    }
    unint64_t v144 = *(void *)(v135 + 8 * v143);
    ++v140;
    if (!v144)
    {
      int64_t v140 = v143 + 1;
      if (v143 + 1 >= v139) {
        goto LABEL_84;
      }
      unint64_t v144 = *(void *)(v135 + 8 * v140);
      if (!v144)
      {
        int64_t v140 = v143 + 2;
        if (v143 + 2 >= v139) {
          goto LABEL_84;
        }
        unint64_t v144 = *(void *)(v135 + 8 * v140);
        if (!v144)
        {
          int64_t v140 = v143 + 3;
          if (v143 + 3 >= v139) {
            goto LABEL_84;
          }
          unint64_t v144 = *(void *)(v135 + 8 * v140);
          if (!v144)
          {
            int64_t v140 = v143 + 4;
            if (v143 + 4 >= v139) {
              goto LABEL_84;
            }
            unint64_t v144 = *(void *)(v135 + 8 * v140);
            if (!v144) {
              break;
            }
          }
        }
      }
    }
LABEL_71:
    unint64_t v138 = (v144 - 1) & v144;
  }
  int64_t v145 = v143 + 5;
  if (v145 < v139)
  {
    unint64_t v144 = *(void *)(v135 + 8 * v145);
    if (!v144)
    {
      while (1)
      {
        int64_t v140 = v145 + 1;
        if (__OFADD__(v145, 1)) {
          break;
        }
        if (v140 >= v139) {
          goto LABEL_84;
        }
        unint64_t v144 = *(void *)(v135 + 8 * v140);
        ++v145;
        if (v144) {
          goto LABEL_71;
        }
      }
LABEL_123:
      __break(1u);
      JUMPOUT(0x100E17690);
    }
    int64_t v140 = v145;
    goto LABEL_71;
  }
LABEL_84:
  swift_release();
  uint64_t v149 = (uint64_t)v205;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v71[7])(v205, 1, 1, v128);
LABEL_85:
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v71[6])(v149, 1, v128) == 1)
  {
    sub_10001DAB4(v149, &qword_101639628);
    uint64_t v161 = (uint64_t)v206;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v218 + 56))(v206, 1, 1, v220);
    goto LABEL_88;
  }
  uint64_t v161 = (uint64_t)v206;
  sub_10001D074(v149 + *(int *)(v128 + 24), (uint64_t)v206, (uint64_t *)&unk_1016477E0);
  sub_100E4C634(v149, type metadata accessor for MultipartAccessoryPairingInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v161, 1, v220) == 1)
  {
LABEL_88:
    sub_10001DAB4(v161, (uint64_t *)&unk_1016477E0);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      unint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v76 = 0;
      uint64_t v77 = "Missing MAC address to start LE pairing";
LABEL_90:
      _os_log_impl((void *)&_mh_execute_header, v74, v75, v77, v76, 2u);
      swift_slowDealloc();
    }
    goto LABEL_91;
  }
  uint64_t v183 = (uint64_t)v191;
  uint64_t v184 = v161;
  uint64_t v185 = v220;
  (*(void (**)(char *, uint64_t, uint64_t))(v218 + 32))(v191, v184, v220);
  sub_100E3E24C(v183, 0, v210 & 1);
  ((void (*)(uint64_t, uint64_t))v213)(v183, v185);
LABEL_92:
  char v162 = 0;
LABEL_97:
  uint64_t v169 = v225;
  sub_100E18770(v215, v162);
  uint64_t v170 = v169[10];
  if (*(unsigned __int8 *)(v170 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) >= 4u)
  {
    char v171 = v216;
    sub_100A3AC74(v216);
    sub_100AE800C(v54);
    (*(void (**)(char *, uint64_t))(v218 + 8))(v171, v220);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v54, 1, v217) == 1)
    {
      sub_100061288((uint64_t)&v226);
      return sub_10001DAB4(v54, &qword_10163BB20);
    }
    uint64_t v173 = v204;
    sub_100E4C130(v54, v204, type metadata accessor for OwnedBeaconGroup);
    uint64_t v174 = (uint64_t *)(*(void *)(v170 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    unint64_t v175 = v174[1];
    if (v175 >> 60 != 15)
    {
      v231[0] = *v174;
      uint64_t v176 = v231[0];
      v231[1] = v175;
      sub_1000361E0(v231[0], v175);
      sub_1000362FC();
      if ((DataProtocol.isNull.getter() & 1) == 0)
      {
        uint64_t v177 = Data.trimmed.getter();
        unint64_t v179 = v178;
        sub_100E39670(v177, v178, v173);
        sub_10001CFB8(v177, v179);
      }
      sub_100037A24(v176, v175);
    }
    sub_100E4C634(v173, type metadata accessor for OwnedBeaconGroup);
  }
  return sub_100061288((uint64_t)&v226);
}

uint64_t sub_100E176B4(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v40 = a1;
  uint64_t v38 = *v1;
  uint64_t v39 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v2 + 16);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170F068);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "continuePairing...", v21, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(*(void *)(v2 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 7;
  sub_100A3AC74(v5);
  sub_100AE800C((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_10163BB20);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Missing beacon group to continue pairing!", v24, 2u);
      swift_slowDealloc();
    }

    return sub_100E18770(v40, 1);
  }
  else
  {
    uint64_t v26 = v37;
    sub_100E4C130((uint64_t)v8, v37, type metadata accessor for OwnedBeaconGroup);
    swift_beginAccess();
    sub_10001D010(v2 + 176, (uint64_t)v41);
    uint64_t v27 = v42;
    uint64_t v28 = v43;
    sub_10001CD44(v41, v42);
    uint64_t v29 = sub_1004D79BC();
    uint64_t v31 = sub_1010E3290(v29, v30);
    unint64_t v33 = v32;
    uint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 64);
    v44[3] = swift_getAssociatedTypeWitness();
    v44[4] = swift_getAssociatedConformanceWitness();
    sub_10001D958(v44);
    v34(v31, v33, v27, v28);
    sub_10001CFB8(v31, v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
    uint64_t v35 = type metadata accessor for Transaction();
    __chkstk_darwin(v35);
    *(&v37 - 4) = v2;
    *(&v37 - 3) = (uint64_t)v44;
    uint64_t v36 = v38;
    *(&v37 - 2) = v40;
    *(&v37 - 1) = v36;
    static Transaction.named<A>(_:with:)();
    sub_100E4C634(v26, type metadata accessor for OwnedBeaconGroup);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
  }
}

uint64_t sub_100E17CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_10165FEF0);
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  BOOL v53 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10165FEF8);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  __chkstk_darwin(v12);
  uint64_t v38 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10165FF00);
  uint64_t v44 = *(void *)(v14 - 8);
  uint64_t v45 = v14;
  __chkstk_darwin(v14);
  uint64_t v43 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10165FF08);
  uint64_t v48 = *(void *)(v16 - 8);
  uint64_t v49 = v16;
  __chkstk_darwin(v16);
  uint64_t v46 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  uint64_t v47 = Transaction.subscriptionCleaner.getter();
  sub_10001D010(a3, (uint64_t)v54);
  char v55 = 0;
  uint64_t v51 = a4;
  uint64_t v18 = (void *)sub_100E1B0F8((uint64_t)v54, a4);
  sub_10001DAB4((uint64_t)v54, &qword_10165FE98);
  v54[0] = v18;
  uint64_t v50 = a2;
  id v56 = *(id *)(a2 + 16);
  id v19 = v56;
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v37(v10, 1, 1, v20);
  id v21 = v19;
  sub_10000588C(&qword_10165FEA0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_10165FF10, &qword_10165FEA0);
  sub_10027B124();
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  swift_release();
  if (qword_101637128 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v22, (uint64_t)qword_10165FA18);
  v54[0] = v21;
  v37(v10, 1, 1, v20);
  sub_100062734(&qword_10165FF18, &qword_10165FEF0);
  id v23 = v21;
  uint64_t v24 = v38;
  uint64_t v25 = v40;
  uint64_t v26 = v53;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v25);
  sub_10000588C(&qword_10165FE98);
  sub_100062734(&qword_10165FF20, &qword_10165FEF8);
  uint64_t v27 = v42;
  uint64_t v28 = v43;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v27);
  sub_10000588C(&qword_10165FF28);
  sub_100062734(&qword_10165FF30, &qword_10165FF00);
  sub_100062734(&qword_10165FF38, &qword_10165FF28);
  uint64_t v29 = v45;
  unint64_t v30 = v46;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v29);
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  unint64_t v32 = (void *)swift_allocObject();
  v32[2] = v31;
  uint64_t v33 = v51;
  uint64_t v32[3] = v52;
  v32[4] = v33;
  v32[5] = v47;
  sub_100062734(&qword_10165FF40, &qword_10165FF08);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v34 = v49;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v34);
  AnyCancellable.store(in:)();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_100E183F4(uint64_t a1)
{
  sub_1000610B8(a1, (uint64_t)v2);
  v2[41] = 1;
  sub_10000588C(&qword_10165FE98);
  return Just.init(_:)();
}

uint64_t sub_100E18448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v22, &qword_10165FE98);
    if (v22[41])
    {
      sub_10006105C((uint64_t)v22, (uint64_t)v21);
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100010324(v7, (uint64_t)qword_10170F068);
      sub_1000610B8((uint64_t)v21, (uint64_t)v20);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        uint64_t v11 = sub_101321420();
        sub_1008FA0F0(v11, v12, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v20);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to request pairing eligibility data on pairing continue. Error %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v20);
      }

      sub_100E18770(a4, 1);
      sub_100061234();
      uint64_t v17 = swift_allocError();
      sub_1000610B8((uint64_t)v21, v18);
      sub_100E41064(v17);
      swift_release();
      sub_100061288((uint64_t)v21);
      return swift_errorRelease();
    }
    else
    {
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170F068);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Requested pairing eligibility data on pairing continue. Waiting for AirPods to respond.", v16, 2u);
        swift_slowDealloc();
      }

      swift_release();
      return sub_10001DAB4((uint64_t)v22, &qword_10165FE98);
    }
  }
  return result;
}

uint64_t sub_100E18770(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (void *)v3[2];
  *os_log_type_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F068);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Clean up.", v15, 2u);
    swift_slowDealloc();
  }

  v3[12] = 0;
  swift_release();
  v3[13] = 0;
  uint64_t v16 = swift_release();
  if (a1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v23 = 12;
    long long v24 = 0u;
    long long v25 = 0u;
    char v26 = 11;
    sub_100A6D128((uint64_t)&v23);
    uint64_t v16 = sub_100061288((uint64_t)&v23);
  }
  __chkstk_darwin(v16);
  *(&v22 - 2) = (uint64_t)v3;
  *((unsigned char *)&v22 - 8) = 0;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v17 = v3[18];
  unint64_t v18 = v3[19];
  *((_OWORD *)v3 + 9) = xmmword_101347BB0;
  uint64_t result = sub_100037A24(v17, v18);
  if (a2)
  {
    uint64_t v23 = v3[8];
    uint64_t v20 = (void *)v23;
    LOBYTE(v24) = 0;
    swift_retain();
    id v21 = v20;
    PassthroughSubject.send(_:)();

    swift_release();
    LOBYTE(v23) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100E18A88()
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  uint64_t v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs);
  swift_beginAccess();
  if (!*(void *)(*v4 + 16)) {
    return 0;
  }
  *(unsigned char *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = 1;
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!*(void *)(*v4 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v0 = *(void *)(v5 + 32);
  unint64_t v2 = *(void *)(v5 + 40);
  swift_retain();
  sub_1000361E0(v0, v2);
  sub_100A29D94(0, 1);
  swift_endAccess();
  swift_release();
  if (qword_101637310 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F068);
  sub_1000361E0(v0, v2);
  sub_1000361E0(v0, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446723;
    sub_1008FA0F0(0xD000000000000011, 0x8000000101418E60, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2081;
    uint64_t v10 = Data.hexString.getter();
    sub_1008FA0F0(v10, v11, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v0, v2);
    sub_10001CFB8(v0, v2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s %{private,mask.hash}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v0, v2);
    sub_10001CFB8(v0, v2);
  }

  return v0;
}

void sub_100E18D84(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  LODWORD(v273) = a2;
  v284 = a3;
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  v265 = (char *)&v258 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MACAddress();
  unint64_t v277 = *(void *)(v6 - 8);
  unint64_t v278 = v6;
  __chkstk_darwin(v6);
  v275 = (char *)&v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB20);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v266 = (uint64_t)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v276 = (uint8_t *)&v258 - v11;
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v279 = *(void *)(v12 - 8);
  unint64_t v280 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  v271 = ((char *)&v258 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v13);
  v270 = ((char *)&v258 - v16);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v258 - v17;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v272 = (unint64_t)&v258 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v267 = (unint64_t)&v258 - v23;
  __chkstk_darwin(v22);
  long long v25 = (char *)&v258 - v24;
  uint64_t v26 = type metadata accessor for AccessoryProductInfo();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v269 = (uint64_t)&v258 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v258 - v30;
  uint64_t v282 = a1;
  uint64_t v283 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess();
  sub_10001D074(v32, (uint64_t)v25, (uint64_t *)&unk_10166BFA0);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  unint64_t v274 = v27 + 48;
  if (v33(v25, 1, v26) == 1)
  {
    uint64_t v34 = v284;
    sub_10001DAB4((uint64_t)v25, (uint64_t *)&unk_10166BFA0);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170F068);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v298.n128_u64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136446210;
      v289.n128_u64[0] = sub_1008FA0F0(0xD000000000000030, 0x8000000101418E20, (uint64_t *)&v298);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%{public}s Missing productInfo!", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)uint64_t v34 = 7;
    *(_OWORD *)((char *)v34 + 8) = 0u;
    *(_OWORD *)((char *)v34 + 24) = 0u;
    *((_WORD *)v34 + 20) = 267;
    return;
  }
  uint64_t v39 = v284;
  v264 = v18;
  sub_100E4C130((uint64_t)v25, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v262 = v26;
  uint64_t v40 = *(int *)(v26 + 92);
  v268 = v31;
  uint64_t v41 = (uint64_t *)&v31[v40];
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  swift_retain();
  sub_100037A38(v42, v43);
  uint64_t v44 = sub_100F81FEC(v42, v43);
  unint64_t v46 = v45;
  sub_100037A24(v42, v43);
  swift_release();
  if (v46 >> 60 == 15)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100010324(v47, (uint64_t)qword_10170F068);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = (uint64_t)v268;
    if (v50)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to generate E1 blob.", v52, 2u);
      swift_slowDealloc();
    }

    sub_100E4C634(v51, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    *uint64_t v39 = 0u;
    v39[1] = 0u;
    *((void *)v39 + 4) = 0;
    *((_WORD *)v39 + 20) = 267;
    return;
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  uint64_t v54 = sub_100010324(v53, (uint64_t)qword_10170F068);
  sub_1000361E0(v44, v46);
  sub_1000361E0(v44, v46);
  uint64_t v263 = v54;
  char v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  BOOL v57 = os_log_type_enabled(v55, v56);
  uint64_t v261 = v44;
  if (v57)
  {
    uint64_t v58 = v33;
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    unint64_t v260 = swift_slowAlloc();
    v298.n128_u64[0] = v260;
    *(_DWORD *)uint64_t v59 = 136315138;
    v259 = v59 + 4;
    sub_1000361E0(v44, v46);
    uint64_t v60 = Data.hexString.getter();
    unint64_t v62 = v61;
    sub_100037A24(v44, v46);
    uint64_t v63 = v60;
    uint64_t v33 = v58;
    uint64_t v39 = v284;
    v289.n128_u64[0] = sub_1008FA0F0(v63, v62, (uint64_t *)&v298);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v44, v46);
    sub_100037A24(v44, v46);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "E1: %s", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v44, v46);
    sub_100037A24(v44, v46);
  }

  uint64_t v64 = v282;
  unint64_t v65 = (uint64_t *)(*(void *)(v282 + v283) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  unint64_t v66 = v65[1];
  if (v66 >> 60 != 15)
  {
    uint64_t v70 = *v65;
    unint64_t v260 = v65[1];
    sub_1000361E0(v70, v66);
    uint64_t v71 = v275;
    sub_100A3AC74(v275);
    Swift::Int v72 = v276;
    sub_100AE800C((uint64_t)v276);
    (*(void (**)(char *, unint64_t))(v277 + 8))(v71, v278);
    int v73 = (*(uint64_t (**)(uint8_t *, uint64_t, unint64_t))(v279 + 48))(v72, 1, v280);
    unint64_t v278 = v46;
    if (v73 == 1)
    {
      sub_10001DAB4((uint64_t)v72, &qword_10163BB20);
      unint64_t v74 = v283;
      uint64_t v75 = *(void *)(v64 + v283) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess();
      uint64_t v76 = v272;
      sub_10001D074(v75, v272, (uint64_t *)&unk_10166BFA0);
      uint64_t v77 = v262;
      if (v33((char *)v76, 1, v262))
      {
        sub_10001DAB4(v76, (uint64_t *)&unk_10166BFA0);
        unint64_t v78 = v260;
      }
      else
      {
        uint64_t v106 = v269;
        sub_100E4C5CC(v76, v269, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        sub_10001DAB4(v76, (uint64_t *)&unk_10166BFA0);
        char v107 = *(unsigned char *)(v106 + *(int *)(v77 + 44));
        sub_100E4C634(v106, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        unint64_t v78 = v260;
        if (v107) {
          goto LABEL_42;
        }
      }
      uint64_t v108 = *(void *)(v64 + v74);
      unint64_t v109 = *(void *)(v108 + 112);
      if (v109 >> 60 == 15
        || (uint64_t v110 = *(void *)(v108 + 104),
            sub_1000361E0(v110, *(void *)(v108 + 112)),
            BOOL v111 = sub_100DC8844(v110, v109),
            uint64_t v112 = v110,
            unint64_t v74 = v283,
            sub_100037A24(v112, v109),
            !v111))
      {
        uint64_t v113 = v70;
        uint64_t v115 = 0;
        unint64_t v114 = 0xF000000000000000;
        goto LABEL_44;
      }
LABEL_42:
      uint64_t v113 = v70;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v114 = __DataStorage.init(length:)() | 0x4000000000000000;
      uint64_t v115 = 0x6000000000;
LABEL_44:
      uint64_t v116 = *(void *)(v64 + v74);
      unint64_t v118 = *(void *)(v116 + 24);
      uint64_t v279 = *(void *)(v116 + 16);
      uint64_t v117 = v279;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v119 = v261;
      unint64_t v120 = v278;
      sub_100037A38(v261, v278);
      sub_100037A38(v113, v78);
      sub_1000361E0(v117, v118);
      sub_100037A38(v115, v114);
      uint64_t v121 = __DataStorage.init(length:)();
      v298.n128_u64[0] = 0x3C00000000;
      v298.n128_u64[1] = v121;
      sub_10072AF34((int *)&v298, 0);
      unint64_t v280 = v114;
      uint64_t v122 = v282;
      sub_100719494(v279, v118, v119, v120, v113, v78, v298.n128_i64[0], v298.n128_u64[1] | 0x4000000000000000, &v289, v115, v114);
      swift_retain_n();
      uint64_t v123 = Logger.logObject.getter();
      os_log_type_t v124 = static os_log_type_t.default.getter();
      int v125 = v124;
      if (os_log_type_enabled(v123, v124))
      {
        uint64_t v126 = v122;
        LODWORD(v279) = v125;
        uint64_t v127 = swift_slowAlloc();
        uint64_t v128 = swift_slowAlloc();
        unint64_t v277 = v128;
        *(_DWORD *)uint64_t v127 = 136315138;
        v298.n128_u64[0] = v128;
        v275 = (char *)(v127 + 4);
        v276 = (uint8_t *)v127;
        uint64_t v129 = *(void *)(v126 + v283);
        uint64_t v130 = v115;
        unint64_t v131 = v78;
        uint64_t v132 = v113;
        uint64_t v134 = *(void *)(v129 + 16);
        unint64_t v133 = *(void *)(v129 + 24);
        sub_1000361E0(v134, v133);
        uint64_t v135 = Data.hexString.getter();
        unint64_t v137 = v136;
        uint64_t v138 = v134;
        unint64_t v78 = v131;
        uint64_t v115 = v130;
        unint64_t v139 = v133;
        uint64_t v113 = v132;
        sub_10001CFB8(v138, v139);
        v288[0] = sub_1008FA0F0(v135, v137, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v279, "sessionNonce: %s", v276, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      unint64_t v140 = v280;
      sub_100037A38(v115, v280);
      sub_100037A38(v115, v140);
      unint64_t v141 = Logger.logObject.getter();
      os_log_type_t v142 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v141, v142))
      {
        v259 = (uint8_t *)v113;
        int64_t v143 = (uint8_t *)swift_slowAlloc();
        v298.n128_u64[0] = swift_slowAlloc();
        *(_DWORD *)int64_t v143 = 136315138;
        if (v140 >> 60 == 15)
        {
          uint64_t v144 = 0;
          unint64_t v145 = 0xE000000000000000;
        }
        else
        {
          sub_1000361E0(v115, v140);
          uint64_t v144 = Data.hexString.getter();
          unint64_t v145 = v157;
          sub_100037A24(v115, v140);
        }
        v288[0] = sub_1008FA0F0(v144, v145, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v115, v140);
        sub_100037A24(v115, v140);
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "companionSessionNonce: %s", v143, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100037A24((uint64_t)v259, v260);

        sub_100037A24(v261, v278);
        uint64_t v146 = v115;
        unint64_t v147 = v140;
      }
      else
      {
        sub_100037A24(v113, v78);

        sub_100037A24(v115, v140);
        sub_100037A24(v115, v140);
        sub_100037A24(v115, v140);
        uint64_t v146 = v261;
        unint64_t v147 = v278;
      }
      sub_100037A24(v146, v147);
      goto LABEL_57;
    }
    unint64_t v277 = (unint64_t)v33;
    uint64_t v79 = (uint64_t)v264;
    sub_100E4C130((uint64_t)v72, (uint64_t)v264, type metadata accessor for OwnedBeaconGroup);
    if (v273)
    {
      uint64_t v80 = v270;
      sub_100E4C5CC(v79, (uint64_t)v270, type metadata accessor for OwnedBeaconGroup);
      unint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.default.getter();
      BOOL v83 = os_log_type_enabled(v81, v82);
      uint64_t v84 = v70;
      unint64_t v85 = v260;
      if (v83)
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        v259 = (uint8_t *)v70;
        v298.n128_u64[0] = v87;
        *(_DWORD *)uint64_t v86 = 136315138;
        uint64_t v88 = sub_1004D6904();
        v289.n128_u64[0] = sub_1008FA0F0(v88, v89, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
        os_log_type_t v90 = "Retry pairing for %s";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v81, v82, v90, v86, 0xCu);
        swift_arrayDestroy();
        uint64_t v84 = (uint64_t)v259;
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v80 = v271;
      sub_100E4C5CC(v79, (uint64_t)v271, type metadata accessor for OwnedBeaconGroup);
      unint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.default.getter();
      BOOL v91 = os_log_type_enabled(v81, v82);
      uint64_t v84 = v70;
      unint64_t v85 = v260;
      if (v91)
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        uint64_t v92 = swift_slowAlloc();
        v259 = (uint8_t *)v70;
        v298.n128_u64[0] = v92;
        *(_DWORD *)uint64_t v86 = 136315138;
        uint64_t v93 = sub_1004D6904();
        v289.n128_u64[0] = sub_1008FA0F0(v93, v94, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
        os_log_type_t v90 = "Pairing already completed for %s. Will proceed with pairing as usual and let server decide if clean up is needed.";
        goto LABEL_30;
      }
    }
    sub_100E4C634((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
LABEL_32:

    uint64_t v95 = (uint64_t)v268;
    unint64_t v96 = v278;
    unint64_t v97 = v283;
    uint64_t v98 = (unint64_t *)(*(void *)(v282 + v283)
                             + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    unint64_t v99 = v98[1];
    if (v99 >> 60 == 15)
    {
LABEL_35:
      unint64_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v102, v103))
      {
        id v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v104 = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "Missing accessorySerialNumber to generate init pairing.", v104, 2u);
        swift_slowDealloc();
      }
      sub_100037A24(v84, v85);

LABEL_38:
      sub_100037A24(v261, v96);
      sub_100E4C634((uint64_t)v264, type metadata accessor for OwnedBeaconGroup);
      sub_100E4C634(v95, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      v105 = v284;
      _OWORD *v284 = 0u;
      v105[1] = 0u;
      *((void *)v105 + 4) = 0;
      *((_WORD *)v105 + 20) = 267;
      return;
    }
    v298.n128_u64[0] = *v98;
    uint64_t v100 = (uint8_t *)v298.n128_u64[0];
    v298.n128_u64[1] = v99;
    sub_1000361E0(v298.n128_i64[0], v99);
    unint64_t v101 = sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_100037A24((uint64_t)v100, v99);
      goto LABEL_35;
    }
    unint64_t v273 = v101;
    v275 = (char *)v99;
    v276 = v100;
    uint64_t v148 = Data.trimmed.getter();
    unint64_t v150 = v149;
    uint64_t v151 = sub_1004CF630(v148, v149);
    if ((v151 & 0x100) != 0)
    {
      v166 = Logger.logObject.getter();
      os_log_type_t v167 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v166, v167))
      {
        uint64_t v168 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v168 = 0;
        _os_log_impl((void *)&_mh_execute_header, v166, v167, "Missing accessoryPartId!", v168, 2u);
        unint64_t v85 = v260;
        swift_slowDealloc();
      }
      sub_10001CFB8(v148, v150);
      sub_100037A24(v84, v85);

      sub_100037A24((uint64_t)v276, (unint64_t)v275);
      goto LABEL_38;
    }
    unint64_t v152 = v151;
    unint64_t v272 = v150;
    uint64_t v153 = v282;
    uint64_t v154 = *(void *)(v282 + v97) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess();
    uint64_t v155 = v267;
    sub_10001D074(v154, v267, (uint64_t *)&unk_10166BFA0);
    uint64_t v156 = v262;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v277)(v155, 1, v262))
    {
      sub_10001DAB4(v155, (uint64_t *)&unk_10166BFA0);
    }
    else
    {
      uint64_t v169 = v269;
      sub_100E4C5CC(v155, v269, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      sub_10001DAB4(v155, (uint64_t *)&unk_10166BFA0);
      char v170 = *(unsigned char *)(v169 + *(int *)(v156 + 44));
      sub_100E4C634(v169, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      if (v170) {
        goto LABEL_65;
      }
    }
    uint64_t v171 = *(void *)(v153 + v283);
    unint64_t v172 = *(void *)(v171 + 112);
    if (v172 >> 60 == 15
      || (uint64_t v173 = *(void *)(v171 + 104),
          sub_1000361E0(v173, *(void *)(v171 + 112)),
          BOOL v174 = sub_100DC8844(v173, v172),
          uint64_t v153 = v282,
          sub_100037A24(v173, v172),
          !v174))
    {
      uint64_t v175 = v153;
      uint64_t v279 = 0xF000000000000000;
      unint64_t v280 = 0;
LABEL_67:
      uint64_t v179 = sub_100E18A88();
      unint64_t v181 = v283;
      v259 = (uint8_t *)v84;
      v271 = v148;
      if (v180 >> 60 != 15)
      {
        uint64_t v182 = v179;
        unint64_t v183 = v180;
        v298.n128_u64[0] = v179;
        v298.n128_u64[1] = v180;
        sub_1000361E0(v179, v180);
        if (DataProtocol.isNull.getter())
        {
          sub_100037A24(v182, v183);
        }
        else
        {
          uint64_t v184 = Data.trimmed.getter();
          unint64_t v186 = v185;
          sub_100037A24(v182, v183);
          uint64_t v187 = sub_1004D8D2C(v184, v186);
          if (v188 >> 60 != 15)
          {
            uint64_t v234 = v187;
            unint64_t v235 = v188;
            sub_1000361E0(v184, v186);
            sub_100037A38(v234, v235);
            sub_100037A38(v182, v183);
            unint64_t v273 = v186;
            sub_1000361E0(v184, v186);
            sub_100037A38(v234, v235);
            uint64_t v236 = Logger.logObject.getter();
            int v237 = static os_log_type_t.default.getter();
            v270 = v236;
            if (os_log_type_enabled(v236, (os_log_type_t)v237))
            {
              LODWORD(v269) = v237;
              unint64_t v267 = v235;
              unint64_t v277 = v182;
              unint64_t v274 = v183;
              uint64_t v238 = swift_slowAlloc();
              v298.n128_u64[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v238 = 141558531;
              v289.n128_u64[0] = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v238 + 12) = 2081;
              sub_1000361E0(v184, v273);
              static String.Encoding.utf8.getter();
              uint64_t v239 = String.init(data:encoding:)();
              if (v240)
              {
                uint64_t v241 = v239;
                unint64_t v242 = v240;
                uint64_t v243 = v184;
                unint64_t v244 = v273;
              }
              else
              {
                unint64_t v246 = v273;
                uint64_t v241 = Data.hexString.getter();
                unint64_t v242 = v247;
                uint64_t v243 = v184;
                unint64_t v244 = v246;
              }
              sub_10001CFB8(v243, v244);
              v289.n128_u64[0] = sub_1008FA0F0(v241, v242, (uint64_t *)&v298);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              unint64_t v248 = v273;
              sub_10001CFB8(v184, v273);
              sub_10001CFB8(v184, v248);
              *(_WORD *)(v238 + 22) = 2082;
              unint64_t v249 = v267;
              uint64_t v250 = Data.hexString.getter();
              v289.n128_u64[0] = sub_1008FA0F0(v250, v251, (uint64_t *)&v298);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100037A24(v234, v249);
              sub_100037A24(v234, v249);
              v252 = v270;
              _os_log_impl((void *)&_mh_execute_header, v270, (os_log_type_t)v269, "Force pairing %{private,mask.hash}s with\nexisting sessionNonce: %{public}s", (uint8_t *)v238, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_10001CFB8(v184, v248);
              uint64_t v182 = v277;
              unint64_t v183 = v274;
              sub_100037A24(v277, v274);
              unint64_t v235 = v249;
              uint64_t v189 = (uint64_t)v259;
              unint64_t v190 = v260;
            }
            else
            {
              uint64_t v189 = v84;
              unint64_t v190 = v85;
              sub_100037A24(v182, v183);
              unint64_t v245 = v273;
              sub_10001CFB8(v184, v273);
              sub_10001CFB8(v184, v245);
              sub_10001CFB8(v184, v245);
              sub_100037A24(v234, v235);
              sub_100037A24(v234, v235);
            }
            unint64_t v253 = v283;
            uint64_t v175 = v282;
            uint64_t v254 = *(void *)(v282 + v283);
            uint64_t v255 = *(void *)(v254 + 16);
            unint64_t v256 = *(void *)(v254 + 24);
            *(void *)(v254 + 16) = v234;
            *(void *)(v254 + 24) = v235;
            unint64_t v181 = v253;
            sub_10001CFB8(v255, v256);
            goto LABEL_74;
          }
          sub_10001CFB8(v184, v186);
          uint64_t v175 = v282;
          unint64_t v181 = v283;
        }
        sub_100037A24(v182, v183);
      }
      uint64_t v189 = v84;
      unint64_t v190 = v85;
      uint64_t v182 = sub_1004D79BC();
      unint64_t v183 = v191;
LABEL_74:
      uint64_t v192 = *(void *)(v175 + v181);
      uint64_t v194 = *(void *)(v192 + 16);
      unint64_t v277 = *(void *)(v192 + 24);
      unint64_t v193 = v277;
      unint64_t v195 = v261;
      unint64_t v196 = v278;
      sub_100037A38(v261, v278);
      unint64_t v197 = v189;
      uint64_t v198 = v189;
      unint64_t v199 = v190;
      sub_100037A38(v198, v190);
      sub_1000361E0(v194, v193);
      sub_1000361E0(v182, v183);
      unint64_t v200 = v280;
      unint64_t v201 = v183;
      unint64_t v202 = v279;
      sub_100037A38(v280, v279);
      uint64_t v257 = v200;
      uint64_t v203 = v197;
      unint64_t v204 = v194;
      unint64_t v205 = v277;
      unint64_t v277 = v182;
      uint64_t v206 = v282;
      unint64_t v274 = v201;
      sub_100719494(v204, v205, v195, v196, v197, v199, v182, v201, &v289, v257, v202);
      swift_retain_n();
      uint64_t v207 = Logger.logObject.getter();
      os_log_type_t v208 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v207, v208))
      {
        uint64_t v209 = (uint8_t *)swift_slowAlloc();
        uint64_t v210 = swift_slowAlloc();
        unint64_t v273 = v210;
        *(_DWORD *)uint64_t v209 = 136446210;
        v298.n128_u64[0] = v210;
        v270 = (v209 + 4);
        uint64_t v211 = *(void *)(v206 + v283);
        unint64_t v212 = v199;
        uint64_t v214 = *(void *)(v211 + 16);
        unint64_t v213 = *(void *)(v211 + 24);
        sub_1000361E0(v214, v213);
        uint64_t v215 = Data.hexString.getter();
        unint64_t v217 = v216;
        uint64_t v218 = v214;
        unint64_t v219 = v212;
        sub_10001CFB8(v218, v213);
        v288[0] = sub_1008FA0F0(v215, v217, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v203 = (uint64_t)v259;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v207, v208, "sessionNonce: %{public}s", v209, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v220 = (uint64_t)v268;
        uint64_t v221 = v276;
      }
      else
      {

        swift_release_n();
        uint64_t v220 = (uint64_t)v268;
        uint64_t v221 = v276;
        unint64_t v219 = v199;
      }
      unint64_t v223 = v279;
      uint64_t v222 = v280;
      sub_100037A38(v280, v279);
      sub_100037A38(v222, v223);
      uint64_t v224 = Logger.logObject.getter();
      os_log_type_t v225 = static os_log_type_t.default.getter();
      BOOL v226 = os_log_type_enabled(v224, v225);
      uint64_t v227 = v277;
      if (!v226)
      {
        sub_10001CFB8((uint64_t)v271, v272);
        sub_100037A24(v203, v219);

        uint64_t v232 = v280;
        sub_100037A24(v280, v223);
        sub_100037A24(v232, v223);
        sub_100037A24((uint64_t)v221, (unint64_t)v275);
        sub_100037A24(v261, v278);
        sub_10001CFB8(v227, v274);
        sub_100037A24(v232, v223);
        sub_100E4C634((uint64_t)v264, type metadata accessor for OwnedBeaconGroup);
        uint64_t v158 = v220;
        goto LABEL_58;
      }
      uint64_t v228 = (uint8_t *)swift_slowAlloc();
      v298.n128_u64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v228 = 136446210;
      if (v223 >> 60 == 15)
      {
        uint64_t v229 = 0;
        uint64_t v230 = v280;
        unint64_t v231 = 0xE000000000000000;
      }
      else
      {
        uint64_t v230 = v280;
        sub_1000361E0(v280, v223);
        uint64_t v229 = Data.hexString.getter();
        unint64_t v231 = v233;
        sub_100037A24(v230, v223);
      }
      v288[0] = sub_1008FA0F0(v229, v231, (uint64_t *)&v298);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v230, v223);
      sub_100037A24(v230, v223);
      _os_log_impl((void *)&_mh_execute_header, v224, v225, "companionSessionNonce: %{public}s", v228, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8((uint64_t)v271, v272);
      sub_100037A24((uint64_t)v259, v260);

      sub_100037A24((uint64_t)v276, (unint64_t)v275);
      sub_100037A24(v261, v278);
      sub_10001CFB8(v277, v274);
      sub_100037A24(v230, v223);
      sub_100E4C634((uint64_t)v264, type metadata accessor for OwnedBeaconGroup);
LABEL_57:
      uint64_t v158 = (uint64_t)v268;
LABEL_58:
      sub_100E4C634(v158, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      uint64_t v282 = v296;
      uint64_t v283 = v297;
      uint64_t v279 = v294;
      unint64_t v280 = v295;
      unint64_t v277 = v293;
      unint64_t v278 = v292;
      unint64_t v159 = v291;
      v276 = v290;
      __n128 v160 = v289;
      __n128 v298 = v289;
      v299 = v290;
      unint64_t v300 = v291;
      unint64_t v301 = v292;
      unint64_t v302 = v293;
      uint64_t v303 = v294;
      unint64_t v304 = v295;
      uint64_t v161 = v281 + 176;
      uint64_t v305 = v296;
      unint64_t v306 = v297;
      swift_beginAccess();
      sub_10001D010(v161, (uint64_t)v285);
      uint64_t v162 = v286;
      uint64_t v163 = v287;
      sub_10001CD44(v285, v286);
      os_log_type_t v164 = *(void (**)(__n128 *, uint64_t, uint64_t))(v163 + 40);
      v288[3] = swift_getAssociatedTypeWitness();
      v288[4] = swift_getAssociatedConformanceWitness();
      sub_10001D958(v288);
      v164(&v298, v162, v163);
      sub_10001CFB8(v160.n128_i64[0], v160.n128_u64[1]);
      sub_10001CFB8((uint64_t)v276, v159);
      sub_10001CFB8(v278, v277);
      sub_10001CFB8(v279, v280);
      sub_100037A24(v282, v283);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v285);
      BOOL v165 = v284;
      sub_10001D010((uint64_t)v288, (uint64_t)v284);
      *((unsigned char *)v165 + 41) = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v288);
      return;
    }
LABEL_65:
    uint64_t v175 = v153;
    uint64_t v176 = v266;
    sub_100E4C5CC((uint64_t)v264, v266, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v279 + 56))(v176, 0, 1, v280);
    uint64_t v177 = sub_101144344(v176, v152);
    uint64_t v279 = v178;
    unint64_t v280 = v177;
    sub_10001DAB4(v176, &qword_10163BB20);
    goto LABEL_67;
  }
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    os_log_type_t v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v69 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Missing FindMyNetworkId to generate init pairing.", v69, 2u);
    swift_slowDealloc();
  }

  sub_100037A24(v261, v46);
  sub_100E4C634((uint64_t)v268, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  *uint64_t v39 = 0u;
  v39[1] = 0u;
  *((void *)v39 + 4) = 0;
  *((_WORD *)v39 + 20) = 267;
}

void sub_100E1ACFC(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint8_t **)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = sub_100F87378();
  if (v11 >> 60 == 15)
  {
    if (qword_101637310 == -1)
    {
LABEL_4:
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170F068);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to generate FindMyNetworkId.", v15, 2u);
        swift_slowDealloc();
      }

      *(void *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 40) = 267;
      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v16 = v10;
  unint64_t v17 = v11;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170F068);
  sub_1000361E0(v16, v17);
  sub_1000361E0(v16, v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = v2;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v30 = v22 + 4;
    sub_1000361E0(v16, v17);
    uint64_t v23 = Data.hexString.getter();
    unint64_t v25 = v24;
    sub_100037A24(v16, v17);
    uint64_t v32 = sub_1008FA0F0(v23, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v16, v17);
    sub_100037A24(v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "findMyNetworkId: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v31;
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v16, v17);
    sub_100037A24(v16, v17);
  }

  uint64_t v26 = *(void *)(v2 + 80);
  uint64_t v27 = (uint64_t *)(*(void *)(v26 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  *uint64_t v27 = v16;
  v27[1] = v17;
  sub_100037A24(v28, v29);
  *(void *)a1 = v26;
  *(unsigned char *)(a1 + 41) = 0;
  swift_retain();
}

uint64_t sub_100E1B0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (uint64_t *)((char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *id v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  sub_10001D074(a1, (uint64_t)v26, &qword_10165FE98);
  if (v27)
  {
    sub_10006105C((uint64_t)v26, (uint64_t)v25);
    sub_1000610B8((uint64_t)v25, (uint64_t)v24);
    uint64_t v12 = swift_allocObject();
    sub_10006105C((uint64_t)v24, v12 + 16);
    sub_10000588C(&qword_10165FEA0);
    swift_allocObject();
    uint64_t v13 = Future.init(_:)();
    sub_100061288((uint64_t)v25);
    return v13;
  }
  sub_10001CEB0(v26, (uint64_t)v25);
  if (qword_101637310 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F068);
  sub_10001D010((uint64_t)v25, (uint64_t)v24);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136446210;
    sub_10001D010((uint64_t)v24, (uint64_t)v22);
    sub_10000588C(&qword_10165FED8);
    uint64_t v18 = String.init<A>(describing:)();
    v22[0] = sub_1008FA0F0(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  }

  uint64_t v13 = sub_100E3B890((uint64_t)v25, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  return v13;
}

#error "100E1B468: too big function (funcsize=0)"

void sub_100E3172C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)v31 - v10;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v17, &qword_101641650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100E4C130((uint64_t)v17, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170F068);
    sub_100E4C5CC((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      unint64_t v22 = sub_1011CE8B8();
      v31[3] = sub_1008FA0F0(v22, v23, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4C634((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to validate accessory due to %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100E4C634((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    }
    sub_100E4C634((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  }
  else
  {
    uint64_t v24 = *(void *)v17;
    uint64_t v25 = *(void *)(*(void *)(a3 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    uint64_t v26 = *(void *)(*(void *)v17 + 16);
    uint64_t v27 = type metadata accessor for AccessoryProductInfo();
    uint64_t v28 = *(void *)(v27 - 8);
    if (v26)
    {
      sub_100E4C5CC(v24+ ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80)), (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v14, v29, 1, v27);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v30 = v25 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess();
    sub_100062604((uint64_t)v14, v30, (uint64_t *)&unk_10166BFA0);
    swift_endAccess();
    swift_release();
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100E31B80(uint64_t a1)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for AccessoryProductInfo() + 92) + 8) >> 60 == 15) {
    return 0;
  }
  else {
    return Data.hexString.getter();
  }
}

uint64_t sub_100E31BD4(uint64_t a1)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for AccessoryProductInfo() + 96) + 8) >> 60 == 15) {
    return 0;
  }
  else {
    return Data.hexString.getter();
  }
}

uint64_t sub_100E31C28(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  sub_1000361E0(v2, v3);
  uint64_t v4 = Data.hexString.getter();
  sub_10001CFB8(v2, v3);
  return v4;
}

uint64_t sub_100E31C98()
{
  unint64_t v23 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)unint64_t v22 = *(_OWORD *)(v0 + 16);
  sub_1000362FC();
  uint64_t v1 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    v22[0] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Number of beacons: %{public}ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if (v1 < 2) {
    return (uint64_t)v23;
  }
  uint64_t v6 = Data.chunked(into:)();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = (long long *)(v6 + 32);
    do
    {
      long long v9 = *v8++;
      *(_OWORD *)unint64_t v22 = v9;
      sub_100E41F5C();
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v23[2];
  id v11 = Logger.logObject.getter();
  if (v10 == v1 - 1)
  {
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_10000588C((uint64_t *)&unk_1016477E0);
      sub_100061B8C();
      uint64_t v14 = Dictionary.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_1008FA0F0(v14, v16, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "serialNumbersAndMacAddressesMap: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    return (uint64_t)v23;
  }
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 134349056;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v18, "Unexpected number of other serial numbers: %{public}ld", v19, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v20 = type metadata accessor for BinaryEncodingError();
  sub_100E484C4((unint64_t *)&qword_101639620, 255, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for BinaryEncodingError.encodingError(_:), v20);
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100E3211C()
{
  uint64_t v2 = (uint64_t *)v0;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v90 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  unint64_t v99 = (uint8_t *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10165FEE0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v96 = (uint64_t *)((char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v95 = (uint64_t *)((char *)&v82 - v8);
  uint64_t v9 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v93 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v100 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v94 = (char *)&v82 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v82 - v15;
  __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v82 - v17;
  uint64_t v19 = *(void *)(v0 + 32);
  uint64_t v20 = *(void **)(v0 + 40);
  v101[0] = v19;
  v101[1] = (uint64_t)v20;
  sub_1000361E0(v19, (unint64_t)v20);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_10001CFB8(v19, (unint64_t)v20);
    if (qword_101637310 != -1) {
LABEL_52:
    }
      swift_once();
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170F068);
    sub_100E4985C(v2, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    sub_100E4985C(v2, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      v101[0] = v100;
      *(_DWORD *)uint64_t v24 = 136315138;
      unint64_t v99 = v24 + 4;
      sub_1000361E0(v19, (unint64_t)v20);
      uint64_t v25 = v2;
      uint64_t v26 = Data.description.getter();
      unint64_t v28 = v27;
      sub_10001CFB8(v19, (unint64_t)v20);
      v101[4] = sub_1008FA0F0(v26, v28, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4985C(v25, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_100E4985C(v25, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid serial number %s!", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100E4985C(v2, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_100E4985C(v2, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    }

    uint64_t v40 = type metadata accessor for BinaryEncodingError();
    sub_100E484C4((unint64_t *)&qword_101639620, 255, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v40 - 8) + 104))(v41, enum case for BinaryEncodingError.encodingError(_:), v40);
    swift_willThrow();
    return (uint64_t)v20;
  }
  uint64_t v29 = Data.trimmed.getter();
  unint64_t v31 = v30;
  uint64_t v32 = v19;
  uint64_t v33 = v29;
  sub_10001CFB8(v32, (unint64_t)v20);
  unint64_t v98 = v1;
  int v34 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v35 = &v18[*(int *)(v9 + 24)];
  uint64_t v36 = type metadata accessor for MACAddress();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  BOOL v91 = v34;
  *os_log_type_t v18 = v34;
  v18[1] = 0;
  v18[*(int *)(v9 + 28)] = 1;
  sub_100E4C130((uint64_t)v18, (uint64_t)v16, type metadata accessor for MultipartAccessoryPairingInfo);
  sub_1000361E0(v33, v31);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v101[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_10016BCD8((uint64_t)v16, v33, v31, isUniquelyReferenced_nonNull_native);
  uint64_t v20 = (void *)v101[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v33, v31);
  unint64_t v38 = v98;
  uint64_t v39 = sub_100E31C98();
  unint64_t v86 = v38;
  if (v38)
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v33, v31);
    return (uint64_t)v20;
  }
  uint64_t v84 = v33;
  unint64_t v85 = v31;
  uint64_t v92 = v9;
  int64_t v97 = 0;
  uint64_t v89 = v39;
  uint64_t v44 = *(void *)(v39 + 64);
  uint64_t v42 = v39 + 64;
  uint64_t v43 = v44;
  uint64_t v45 = 1 << *(unsigned char *)(v42 - 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v43;
  BOOL v91 = !v91;
  uint64_t v87 = v42;
  int64_t v88 = (unint64_t)(v45 + 63) >> 6;
  int64_t v83 = v88 - 1;
  uint64_t v2 = &qword_10165FEE8;
  while (1)
  {
    uint64_t v19 = (uint64_t)v96;
    if (v47)
    {
      unint64_t v48 = __clz(__rbit64(v47));
      uint64_t v49 = (v47 - 1) & v47;
      unint64_t v50 = v48 | (v97 << 6);
LABEL_16:
      uint64_t v51 = *(void *)(v89 + 56);
      uint64_t v52 = (uint64_t *)(*(void *)(v89 + 48) + 16 * v50);
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      *unint64_t v96 = *v52;
      *(void *)(v19 + 8) = v54;
      uint64_t v55 = v51 + *(void *)(v90 + 72) * v50;
      uint64_t v56 = sub_10000588C(&qword_10165FEE8);
      sub_10001D074(v55, v19 + *(int *)(v56 + 48), (uint64_t *)&unk_1016477E0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v19, 0, 1, v56);
      sub_1000361E0(v53, v54);
      goto LABEL_35;
    }
    int64_t v57 = v97 + 1;
    if (__OFADD__(v97, 1)) {
      goto LABEL_51;
    }
    if (v57 < v88)
    {
      unint64_t v58 = *(void *)(v87 + 8 * v57);
      if (v58) {
        goto LABEL_20;
      }
      int64_t v59 = v97 + 2;
      ++v97;
      if (v57 + 1 < v88)
      {
        unint64_t v58 = *(void *)(v87 + 8 * v59);
        if (v58) {
          goto LABEL_23;
        }
        int64_t v97 = v57 + 1;
        if (v57 + 2 < v88)
        {
          unint64_t v58 = *(void *)(v87 + 8 * (v57 + 2));
          if (v58)
          {
            v57 += 2;
            goto LABEL_20;
          }
          int64_t v59 = v57 + 3;
          int64_t v97 = v57 + 2;
          if (v57 + 3 < v88) {
            break;
          }
        }
      }
    }
LABEL_34:
    uint64_t v60 = sub_10000588C(&qword_10165FEE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v19, 1, 1, v60);
    uint64_t v49 = 0;
LABEL_35:
    unint64_t v61 = v95;
    sub_10001D608(v19, (uint64_t)v95, &qword_10165FEE0);
    uint64_t v62 = sub_10000588C(&qword_10165FEE8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v61, 1, v62) == 1)
    {
      swift_release();
      sub_10001CFB8(v84, v85);
      return (uint64_t)v20;
    }
    unint64_t v98 = v49;
    uint64_t v63 = *v61;
    uint64_t v19 = v61[1];
    uint64_t v64 = (uint64_t)v61 + *(int *)(v62 + 48);
    uint64_t v65 = (uint64_t)v99;
    sub_10001D608(v64, (uint64_t)v99, (uint64_t *)&unk_1016477E0);
    uint64_t v66 = v92;
    uint64_t v67 = v94;
    sub_10001D074(v65, (uint64_t)&v94[*(int *)(v92 + 24)], (uint64_t *)&unk_1016477E0);
    unsigned char *v67 = v91;
    v67[1] = 0;
    v67[*(int *)(v66 + 28)] = 1;
    sub_100E4C130((uint64_t)v67, v100, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_1000361E0(v63, v19);
    int v68 = swift_isUniquelyReferenced_nonNull_native();
    v101[0] = (uint64_t)v20;
    unint64_t v70 = sub_1007241A0(v63, v19);
    uint64_t v71 = v20[2];
    BOOL v72 = (v69 & 1) == 0;
    uint64_t v73 = v71 + v72;
    if (__OFADD__(v71, v72))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    char v74 = v69;
    if (v20[3] >= v73)
    {
      if (v68)
      {
        uint64_t v20 = (void *)v101[0];
        if (v69) {
          goto LABEL_12;
        }
      }
      else
      {
        sub_100E7E760();
        uint64_t v20 = (void *)v101[0];
        if (v74) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      sub_100E65958(v73, v68);
      uint64_t v75 = sub_1007241A0(v63, v19);
      if ((v74 & 1) != (v76 & 1)) {
        goto LABEL_54;
      }
      unint64_t v70 = v75;
      uint64_t v20 = (void *)v101[0];
      if (v74)
      {
LABEL_12:
        sub_100E4A82C(v100, v20[7] + *(void *)(v93 + 72) * v70, type metadata accessor for MultipartAccessoryPairingInfo);
        goto LABEL_13;
      }
    }
    v20[(v70 >> 6) + 8] |= 1 << v70;
    uint64_t v77 = (uint64_t *)(v20[6] + 16 * v70);
    uint64_t *v77 = v63;
    v77[1] = v19;
    sub_100E4C130(v100, v20[7] + *(void *)(v93 + 72) * v70, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v78 = v20[2];
    BOOL v79 = __OFADD__(v78, 1);
    uint64_t v80 = v78 + 1;
    if (v79) {
      goto LABEL_50;
    }
    void v20[2] = v80;
    sub_1000361E0(v63, v19);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_10001CFB8(v63, v19);
    sub_10001CFB8(v63, v19);
    sub_10001DAB4((uint64_t)v99, (uint64_t *)&unk_1016477E0);
    unint64_t v47 = v98;
  }
  unint64_t v58 = *(void *)(v87 + 8 * v59);
  if (v58)
  {
LABEL_23:
    int64_t v57 = v59;
LABEL_20:
    uint64_t v49 = (v58 - 1) & v58;
    unint64_t v50 = __clz(__rbit64(v58)) + (v57 << 6);
    int64_t v97 = v57;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v57 = v59 + 1;
    if (__OFADD__(v59, 1)) {
      break;
    }
    if (v57 >= v88)
    {
      int64_t v97 = v83;
      goto LABEL_34;
    }
    unint64_t v58 = *(void *)(v87 + 8 * v57);
    ++v59;
    if (v58) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100E32C00()
{
  uint64_t v25 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(v0 + 16);
  sub_1000362FC();
  uint64_t v1 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    v24[0] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Number of beacons: %{public}ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if (v1 < 2) {
    return (uint64_t)v25;
  }
  uint64_t v6 = static MACAddress.length.getter();
  BOOL v7 = __OFADD__(v6, 20);
  uint64_t result = v6 + 20;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = Data.chunked(into:)();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = (long long *)(v9 + 32);
      do
      {
        long long v12 = *v11++;
        *(_OWORD *)uint64_t v24 = v12;
        sub_100E41A04(v24, (uint64_t)&v25);
        --v10;
      }
      while (v10);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v25[2];
    uint64_t v14 = Logger.logObject.getter();
    if (v13 == v1 - 1)
    {
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc();
        v24[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v16 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_10000588C((uint64_t *)&unk_1016477E0);
        sub_100061B8C();
        uint64_t v17 = Dictionary.description.getter();
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        sub_1008FA0F0(v17, v19, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "serialNumbersAndMacAddressesMap: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_beginAccess();
      return (uint64_t)v25;
    }
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134349056;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v20, "Unexpected number of other serial numbers: %{public}ld", v21, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v22 = type metadata accessor for BinaryEncodingError();
    sub_100E484C4((unint64_t *)&qword_101639620, 255, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 104))(v23, enum case for BinaryEncodingError.encodingError(_:), v22);
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100E33098()
{
  uint64_t v17 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)unint64_t v16 = *(_OWORD *)(v0 + 16);
  sub_1000362FC();
  uint64_t v1 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    v16[0] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Number of beacons: %{public}ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if (v1 < 2) {
    return v17;
  }
  uint64_t v6 = Data.chunked(into:)();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = (long long *)(v6 + 32);
    do
    {
      long long v9 = *v8++;
      *(_OWORD *)unint64_t v16 = v9;
      sub_100E415D0(v16, (uint64_t *)&v17);
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  uint64_t result = v17;
  if (v17[2] != v1 - 1)
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134349056;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unexpected number of other serial numbers: %{public}ld", v13, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v14 = type metadata accessor for BinaryEncodingError();
    sub_100E484C4((unint64_t *)&qword_101639620, 255, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v15, enum case for BinaryEncodingError.encodingError(_:), v14);
    swift_willThrow();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100E333B8(uint64_t a1)
{
  sub_10001D010(a1, (uint64_t)v2);
  sub_10000588C(&qword_10165FED8);
  return String.init<A>(describing:)();
}

void sub_100E333F4(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v67 = a1;
  uint64_t v3 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t, int64_t))((char *)&v60
                                                                       - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  long long v9 = (char *)&v60 - v8;
  uint64_t v10 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v10 - 8);
  os_log_type_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v13 - 8);
  uint64_t v64 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MACAddress();
  uint64_t v65 = *(void (***)(uint64_t, uint64_t, uint64_t, int64_t))(v15 - 8);
  int64_t v66 = v15;
  __chkstk_darwin(v15);
  uint64_t v63 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  os_log_type_t v20 = (uint64_t *)((char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v2 + 16);
  *os_log_type_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0) {
    goto LABEL_54;
  }
  uint64_t v62 = v2;
  uint64_t v23 = *(char **)(v2 + 80);
  uint64_t v60 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  unint64_t v61 = v23;
  uint64_t v24 = *(void *)(*(void *)&v23[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo]
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  uint64_t v25 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v24 + 64);
  int64_t v29 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  uint64_t v2 = 0;
  if (!v28) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v30 = __clz(__rbit64(v28));
  v28 &= v28 - 1;
  for (unint64_t i = v30 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v33)) + (v2 << 6))
  {
    sub_100E4C5CC(*(void *)(v24 + 56) + *(void *)(v4 + 72) * i, (uint64_t)v9, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_100E4C130((uint64_t)v9, (uint64_t)v7, type metadata accessor for MultipartAccessoryPairingInfo);
    if (*((unsigned char *)v7 + *(int *)(v3 + 28)) == 2)
    {
      swift_release();
      sub_100E4C130((uint64_t)v7, (uint64_t)v12, type metadata accessor for MultipartAccessoryPairingInfo);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
      goto LABEL_29;
    }
    sub_100E4C634((uint64_t)v7, type metadata accessor for MultipartAccessoryPairingInfo);
    if (v28) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v32 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v32 >= v29) {
      goto LABEL_28;
    }
    unint64_t v33 = *(void *)(v25 + 8 * v32);
    ++v2;
    if (!v33)
    {
      uint64_t v2 = v32 + 1;
      if (v32 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v33 = *(void *)(v25 + 8 * v2);
      if (!v33)
      {
        uint64_t v2 = v32 + 2;
        if (v32 + 2 >= v29) {
          goto LABEL_28;
        }
        unint64_t v33 = *(void *)(v25 + 8 * v2);
        if (!v33)
        {
          uint64_t v2 = v32 + 3;
          if (v32 + 3 >= v29) {
            goto LABEL_28;
          }
          unint64_t v33 = *(void *)(v25 + 8 * v2);
          if (!v33)
          {
            uint64_t v2 = v32 + 4;
            if (v32 + 4 >= v29) {
              goto LABEL_28;
            }
            unint64_t v33 = *(void *)(v25 + 8 * v2);
            if (!v33)
            {
              int64_t v34 = v32 + 5;
              if (v34 < v29)
              {
                unint64_t v33 = *(void *)(v25 + 8 * v34);
                if (v33)
                {
                  uint64_t v2 = v34;
                  goto LABEL_23;
                }
                while (1)
                {
                  uint64_t v2 = v34 + 1;
                  if (__OFADD__(v34, 1)) {
                    break;
                  }
                  if (v2 >= v29) {
                    goto LABEL_28;
                  }
                  unint64_t v33 = *(void *)(v25 + 8 * v2);
                  ++v34;
                  if (v33) {
                    goto LABEL_23;
                  }
                }
                __break(1u);
LABEL_57:
                swift_once();
LABEL_39:
                uint64_t v42 = type metadata accessor for Logger();
                sub_100010324(v42, (uint64_t)qword_10170F068);
                uint64_t v43 = Logger.logObject.getter();
                os_log_type_t v44 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v43, v44))
                {
                  uint64_t v45 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v45 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v43, v44, "Standalone: Skipping BA pairing over classic and proceed with LE Pairing", v45, 2u);
                  swift_slowDealloc();
                }

                sub_100E4869C();
                uint64_t v46 = swift_allocError();
                *unint64_t v47 = 4;
                v68[0] = v46;
                char v69 = 0;
                sub_10006105C((uint64_t)v68, (uint64_t)v70);
                uint64_t v48 = *(void *)&v12[v24];
                uint64_t v49 = *(void *)(v48 + 16);
                unint64_t v50 = *(void *)(v48 + 24);
                sub_1000361E0(v49, v50);
                sub_100E477C0((uint64_t)v9);
                sub_10001CFB8(v49, v50);
                goto LABEL_52;
              }
LABEL_28:
              swift_release();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
LABEL_29:
              swift_bridgeObjectRelease();
              int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3);
              int64_t v29 = v66;
              uint64_t v2 = v67;
              uint64_t v7 = v65;
              if (v35 == 1)
              {
                sub_10001DAB4((uint64_t)v12, &qword_101639628);
                uint64_t v36 = v64;
                v7[7](v64, 1, 1, v29);
              }
              else
              {
                uint64_t v37 = (uint64_t)&v12[*(int *)(v3 + 24)];
                uint64_t v36 = v64;
                sub_10001D074(v37, v64, (uint64_t *)&unk_1016477E0);
                sub_100E4C634((uint64_t)v12, type metadata accessor for MultipartAccessoryPairingInfo);
                if (((unsigned int (*)(uint64_t, uint64_t, int64_t))v7[6])(v36, 1, v29) != 1)
                {
                  long long v9 = v63;
                  ((void (*)(char *, uint64_t, int64_t))v7[4])(v63, v36, v29);
                  uint64_t v24 = v60;
                  os_log_type_t v12 = v61;
                  *(unsigned char *)(*(void *)&v61[v60] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic) = 1;
                  if (*(unsigned char *)(v62 + 72) == 1)
                  {
                    if (qword_101637310 != -1) {
                      goto LABEL_57;
                    }
                    goto LABEL_39;
                  }
                  if (qword_101637310 != -1) {
                    swift_once();
                  }
                  uint64_t v51 = type metadata accessor for Logger();
                  sub_100010324(v51, (uint64_t)qword_10170F068);
                  uint64_t v52 = Logger.logObject.getter();
                  os_log_type_t v53 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v52, v53))
                  {
                    unint64_t v54 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)unint64_t v54 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Skipping classic pairing and start LE pairing", v54, 2u);
                    swift_slowDealloc();
                  }

                  QueueSynchronizer.conditionalSync<A>(_:)();
                  if (v68[0] & 1) != 0 || (QueueSynchronizer.conditionalSync<A>(_:)(), (v68[0]))
                  {
                    uint64_t v55 = Logger.logObject.getter();
                    os_log_type_t v56 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v55, v56))
                    {
                      int64_t v57 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)int64_t v57 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v55, v56, "LE Pairing is in progress!", v57, 2u);
                      swift_slowDealloc();
                    }

                    ((void (*)(char *, int64_t))v7[1])(v9, v29);
                    goto LABEL_36;
                  }
                  sub_100E4869C();
                  uint64_t v58 = swift_allocError();
                  unsigned char *v59 = 5;
                  v68[0] = v58;
                  char v69 = 0;
                  sub_10006105C((uint64_t)v68, (uint64_t)v70);
                  sub_100E3E24C((uint64_t)v9, 0, 0);
LABEL_52:
                  ((void (*)(char *, int64_t))v7[1])(v9, v29);
                  sub_10006105C((uint64_t)v70, v2);
                  *(unsigned char *)(v2 + 41) = 1;
                  return;
                }
              }
              sub_10001DAB4(v36, (uint64_t *)&unk_1016477E0);
              if (qword_101637310 != -1) {
                goto LABEL_55;
              }
              goto LABEL_33;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v28 = (v33 - 1) & v33;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  swift_once();
LABEL_33:
  uint64_t v38 = type metadata accessor for Logger();
  sub_100010324(v38, (uint64_t)qword_10170F068);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing MAC address to start LE pairing", v41, 2u);
    swift_slowDealloc();
  }

LABEL_36:
  *(void *)uint64_t v2 = 7;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_WORD *)(v2 + 40) = 267;
}

void sub_100E33E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v88 = a2;
  uint64_t v89 = a3;
  uint64_t v90 = a1;
  uint64_t v5 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v91 = v5;
  uint64_t v92 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v93 - 8);
  uint64_t v10 = __chkstk_darwin(v93);
  os_log_type_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v77 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v77 - v17;
  __chkstk_darwin(v16);
  unint64_t v94 = (char *)&v77 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void **)(v4 + 16);
  *(void *)uint64_t v23 = v24;
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_7;
  }
  id v26 = [self sharedInstance];
  unsigned int v27 = [v26 isInternalBuild];

  if (!v27) {
    return;
  }
  unint64_t v28 = v94;
  uint64_t v84 = *(void *)(v4 + 64);
  sub_100A3AC74(v94);
  uint64_t v23 = *(char **)(v9 + 16);
  int64_t v29 = v28;
  uint64_t v30 = v93;
  ((void (*)(char *, char *, uint64_t))v23)(v15, v29, v93);
  *(void *)&long long v96 = sub_100E09AA8();
  unint64_t v31 = v15;
  uint64_t v15 = (char *)v30;
  LOBYTE(v30) = sub_100DCF650((uint64_t)v18, v31);
  int64_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v87 = v9 + 8;
  unint64_t v86 = v32;
  v32(v18, (uint64_t)v15);
  sub_100E09FF8(v96);
  if (v30)
  {
    unsigned int v85 = enum case for LocalizationUtility.Table.default(_:);
    uint64_t v33 = v92;
    uint64_t v34 = v92 + 104;
    uint64_t v78 = *(void (**)(char *))(v92 + 104);
    uint64_t v35 = v91;
    v78(v8);
    int64_t v83 = (void (*)(char *, uint64_t))static LocalizationUtility.localizedString(key:table:)();
    uint64_t v80 = v36;
    uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
    v37(v8, v35);
    uint64_t v77 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_101342130;
    *(void *)&long long v96 = v90;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    unint64_t v42 = sub_10000B4CC();
    *(void *)(v38 + 64) = v42;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    uint64_t v82 = String.init(format:_:)();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v90 = v34;
    uint64_t v45 = v78;
    ((void (*)(char *, void, uint64_t))v78)(v8, v85, v35);
    uint64_t v79 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v80 = v46;
    uint64_t v92 = v33 + 8;
    int64_t v83 = v37;
    v37(v8, v35);
    uint64_t v47 = swift_allocObject();
    uint64_t v48 = (void *)v47;
    *(_OWORD *)(v47 + 16) = xmmword_101347500;
    unint64_t v49 = *(void *)(v84 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
    uint64_t v81 = v44;
    if (v49)
    {
      uint64_t v50 = *(void *)(v84 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      unint64_t v51 = v49;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v42;
      uint64_t v52 = v88;
      uint64_t v53 = v89;
      unint64_t v54 = v45;
LABEL_16:
      v48[4] = v50;
      void v48[5] = v51;
      *(void *)&long long v96 = v52;
      swift_bridgeObjectRetain();
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      v48[12] = &type metadata for String;
      v48[13] = v42;
      v48[9] = v66;
      v48[10] = v67;
      *(void *)&long long v96 = v53;
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      v48[17] = &type metadata for String;
      v48[18] = v42;
      v48[14] = v68;
      v48[15] = v69;
      uint64_t v70 = String.init(format:_:)();
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      uint64_t v73 = v91;
      ((void (*)(char *, void, uint64_t))v54)(v8, v85, v91);
      uint64_t v74 = static LocalizationUtility.localizedString(key:table:)();
      uint64_t v76 = v75;
      v83(v8, v73);
      *(void *)&long long v96 = v82;
      *((void *)&v96 + 1) = v81;
      uint64_t v97 = v70;
      uint64_t v98 = v72;
      uint64_t v99 = v74;
      uint64_t v100 = v76;
      type metadata accessor for SBAlertHelper();
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      swift_allocObject();
      sub_1010DA238(&v96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000BD0E8(0);
      sub_1000BD0E8(0);
      sub_1010DAEEC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1000A1534(0);
      sub_1000A1534(0);
      v86(v94, v93);
      return;
    }
    id v63 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v84
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "name"));
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v65;

      v48[7] = &type metadata for String;
      v48[8] = v42;
      uint64_t v52 = v88;
      uint64_t v53 = v89;
      unint64_t v54 = v45;
      if (v51) {
        goto LABEL_16;
      }
    }
    else
    {
      v48[7] = &type metadata for String;
      v48[8] = v42;
      uint64_t v52 = v88;
      uint64_t v53 = v89;
      unint64_t v54 = v45;
    }
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    goto LABEL_16;
  }
  if (qword_101637310 != -1) {
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v55 = type metadata accessor for Logger();
  sub_100010324(v55, (uint64_t)qword_10170F068);
  os_log_type_t v56 = v94;
  ((void (*)(char *, char *, char *))v23)(v12, v94, v15);
  int64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    int64_t v59 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v96 = swift_slowAlloc();
    *(_DWORD *)int64_t v59 = 136446210;
    sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v95 = sub_1008FA0F0(v60, v61, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = (void (*)(char *, char *))v86;
    v86(v12, (uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Limit reached alert has already been shown for %{public}s.", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v62 = (void (*)(char *, char *))v86;
    v86(v12, (uint64_t)v15);
  }
  v62(v56, v15);
}

uint64_t sub_100E347B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v35 = a1;
  uint64_t v5 = sub_10000588C(&qword_101653370);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AirPodsPairingLockCheckResponse();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v33 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v3 + 16);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    uint64_t v31 = v8;
    uint64_t v34 = a2;
    uint64_t v20 = swift_allocBox();
    uint64_t v22 = v21;
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v37 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100E484C4(&qword_101638770, 255, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v22 = v36;
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = dispatch_group_create();
    dispatch_group_enter(v23);
    uint64_t v32 = v3;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v23;
    swift_retain();
    id v25 = v23;
    sub_10097EF98(v35, sub_100E48C4C, v24);
    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess();
    sub_10001D074((uint64_t)v22, (uint64_t)v7, &qword_101653370);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v37 = *v7;
      id v26 = (void *)v37;
      sub_100E484C4(&qword_1016381E8, 255, type metadata accessor for SPPairingSessionError);
      swift_willThrowTypedImpl();
    }
    else
    {
      uint64_t v27 = v33;
      sub_100E4C130((uint64_t)v7, v33, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);

      sub_100E4C130(v27, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
      uint64_t v28 = *(void *)(*(void *)(v32 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      uint64_t v29 = *(void *)&v12[*(int *)(v31 + 48)];
      swift_retain();
      sub_100E4C634((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
      *(void *)(v28 + 32) = v29;
      swift_release();
    }
    sub_10001D074((uint64_t)v22, v34, &qword_101653370);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100E34BF8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  sub_100156D3C(a1, v5, &qword_101653370);
  dispatch_group_leave(a3);
}

void sub_100E34C64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_retain();
  sub_100A3AC74(v5);
  unint64_t v6 = sub_100E0A1A8();
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100724804((uint64_t)v5), (v8 & 1) != 0))
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v7);
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    sub_1000361E0(*v9, v11);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xF000000000000000;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100F84D60(v10, v11, (uint64_t)v18);
  swift_release();
  sub_100037A24(v10, v11);
  sub_10001D608((uint64_t)v18, (uint64_t)v19, &qword_10165FEC0);
  if (sub_10005F324((uint64_t)v19) == 1)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F068);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to generate ack data!", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    v20[10] = v19[10];
    v20[11] = v19[11];
    v20[12] = v19[12];
    v20[6] = v19[6];
    v20[7] = v19[7];
    v20[8] = v19[8];
    v20[9] = v19[9];
    void v20[2] = v19[2];
    uint64_t v20[3] = v19[3];
    v20[4] = v19[4];
    void v20[5] = v19[5];
    v20[0] = v19[0];
    v20[1] = v19[1];
    uint64_t v16 = type metadata accessor for Transaction();
    __chkstk_darwin(v16);
    *(void *)&v17[-16] = v1;
    *(void *)&v17[-8] = v20;
    static Transaction.named<A>(_:with:)();
    sub_100E489E4((uint64_t)v18);
  }
}

uint64_t sub_100E34F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = a1;
  swift_retain();
  swift_retain();
  sub_1009840D0(a3, (uint64_t)sub_100E48BA0, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_100E35034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v52 = *(uint8_t **)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AirPodsPairingLockAckResponse();
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = sub_10000588C(&qword_101653368);
  __chkstk_darwin(v17);
  uint64_t v19 = (void **)((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v46 = v5;
    uint64_t v47 = a3;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v19, &qword_101653368);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = *v19;
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170F068);
      uint64_t v24 = v22;
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v53 = v24;
        aBlock[0] = v28;
        *(_DWORD *)uint64_t v27 = 136446210;
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v29 = v24;
        uint64_t v30 = String.init<A>(describing:)();
        uint64_t v53 = (void *)sub_1008FA0F0(v30, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ack register failed with error - %{public}s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v38 = v47;
      uint64_t v39 = (void *)swift_allocObject();
      v39[2] = v38;
      v39[3] = v21;
      v39[4] = v24;
      aBlock[4] = (uint64_t)sub_100E48BF0;
      aBlock[5] = (uint64_t)v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1004B5480;
      void aBlock[3] = (uint64_t)&unk_1015F4A40;
      uint64_t v40 = _Block_copy(aBlock);
      uint64_t v41 = v24;
      swift_retain();
      swift_retain();
      unint64_t v42 = v48;
      static DispatchQoS.unspecified.getter();
      uint64_t v53 = _swiftEmptyArrayStorage;
      sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v43 = v50;
      uint64_t v44 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);

      (*((void (**)(char *, uint64_t))v52 + 1))(v43, v44);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v51);
      swift_release();
      return swift_release();
    }
    else
    {
      sub_100E4C130((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100010324(v32, (uint64_t)qword_10170F068);
      sub_100E4C5CC((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        uint64_t v52 = v35 + 4;
        sub_100E4C5CC((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
        uint64_t v36 = String.init<A>(describing:)();
        uint64_t v53 = (void *)sub_1008FA0F0(v36, v37, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Ack register was success. %{public}s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        sub_100E4C634((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
        swift_release();
      }
      return sub_100E4C634((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckResponse);
    }
  }
  return result;
}

void sub_100E35804(uint64_t a1@<X8>)
{
  uint64_t v233 = a1;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v211 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v223 = (char *)&v211 - v6;
  uint64_t v225 = type metadata accessor for AirPodsPairingLockCheckResponse();
  uint64_t v7 = __chkstk_darwin(v225);
  uint64_t v224 = (uint64_t)&v211 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v228 = (uint64_t)&v211 - v9;
  uint64_t v226 = sub_10000588C(&qword_101653370);
  __chkstk_darwin(v226);
  uint64_t v227 = (id *)((char *)&v211 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v245 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v237 = *(void *)(v245 - 8);
  uint64_t v11 = __chkstk_darwin(v245);
  uint64_t v13 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v244 = (char *)&v211 - v14;
  uint64_t v243 = sub_10000588C(&qword_101639618);
  uint64_t v15 = __chkstk_darwin(v243);
  unint64_t v242 = (_OWORD *)((char *)&v211 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v241 = (_OWORD *)((char *)&v211 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v240 = (uint64_t *)((char *)&v211 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v239 = (uint64_t *)((char *)&v211 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v254 = (uint64_t *)((char *)&v211 - v24);
  __chkstk_darwin(v23);
  uint64_t v238 = (uint64_t *)((char *)&v211 - v25);
  uint64_t v26 = type metadata accessor for MACAddress();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v229 = v26;
  uint64_t v230 = v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v211 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v211 - v32;
  __chkstk_darwin(v31);
  unint64_t v253 = (char *)&v211 - v34;
  uint64_t v35 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v35 - 8);
  uint64_t v249 = (uint64_t)&v211 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for HashAlgorithm();
  uint64_t v251 = *(void *)(v37 - 8);
  v252 = (_WORD *)v37;
  __chkstk_darwin(v37);
  unint64_t v250 = (unint64_t)&v211 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchPredicate();
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unint64_t v42 = (uint64_t *)((char *)&v211 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = *(void **)(v1 + 16);
  *unint64_t v42 = v43;
  (*(void (**)(void *, void, uint64_t))(v40 + 104))(v42, enum case for DispatchPredicate.onQueue(_:), v39);
  id v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v40 + 8))(v42, v39);
  if ((v43 & 1) == 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  uint64_t v222 = v5;
  uint64_t v45 = *(void *)(v1 + 80);
  uint64_t v46 = (uint64_t *)(*(void *)(v45 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  unint64_t v47 = v46[1];
  if (v47 >> 60 == 15)
  {
    if (qword_101637310 == -1)
    {
LABEL_4:
      uint64_t v48 = type metadata accessor for Logger();
      sub_100010324(v48, (uint64_t)qword_10170F068);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = v233;
      if (v51)
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Missing C1 from accessory!", v53, 2u);
        swift_slowDealloc();
      }

      unint64_t v54 = 0xD00000000000001ALL;
      uint64_t v55 = "Missing C1 from accessory!";
LABEL_13:
      *(void *)uint64_t v52 = v54;
      *(void *)(v52 + 8) = (unint64_t)(v55 - 32) | 0x8000000000000000;
      *(_WORD *)(v52 + 40) = 265;
      return;
    }
LABEL_89:
    swift_once();
    goto LABEL_4;
  }
  unint64_t v235 = v13;
  uint64_t v236 = v33;
  uint64_t v219 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v220 = v45;
  uint64_t v218 = v30;
  uint64_t v56 = *v46;
  uint64_t v221 = v1;
  swift_beginAccess();
  sub_10001D010(v1 + 176, (uint64_t)v263);
  uint64_t v57 = v263[3];
  uint64_t v58 = v263[4];
  sub_10001CD44(v263, v263[3]);
  int64_t v59 = *(void (**)(long long *, char *, uint64_t, unint64_t, uint64_t, uint64_t))(v58 + 72);
  sub_1000361E0(v56, v47);
  sub_1000361E0(v56, v47);
  unint64_t v60 = v47;
  v59(v264, (char *)&v264[2] + 8, v56, v47, v57, v58);
  sub_100037A24(v56, v47);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v263);
  if (!*((void *)&v264[1] + 1))
  {
    sub_10001DAB4((uint64_t)v264, &qword_101639BB8);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100010324(v61, (uint64_t)qword_10170F068);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v52 = v233;
    if (v64)
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "collaborativeKeyC2 generation error.", v65, 2u);
      swift_slowDealloc();
    }

    sub_100037A24(v56, v60);
    unint64_t v54 = 0xD000000000000026;
    uint64_t v55 = "Unable to generate collaborativeKeyC2!";
    goto LABEL_13;
  }
  uint64_t v212 = v56;
  unint64_t v213 = v47;
  sub_10001CEB0(v264, (uint64_t)v259);
  sub_10001CEB0((long long *)((char *)&v264[2] + 8), (uint64_t)v258);
  uint64_t v66 = v220;
  uint64_t v67 = *(void *)(v220 + v219);
  sub_10001D010((uint64_t)v259, (uint64_t)v264);
  sub_10001D608((uint64_t)v264, (uint64_t)v263, &qword_101639BC0);
  uint64_t v68 = v67 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess();
  swift_retain();
  sub_100062604((uint64_t)v263, v68, &qword_101639BC0);
  swift_endAccess();
  swift_release();
  sub_10001D010((uint64_t)v258, (uint64_t)v264);
  sub_10001D608((uint64_t)v264, (uint64_t)v263, &qword_101639A40);
  uint64_t v69 = v66 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess();
  sub_100062604((uint64_t)v263, v69, &qword_101639A40);
  swift_endAccess();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  uint64_t v71 = sub_100010324(v70, (uint64_t)qword_10170F068);
  sub_10001D010((uint64_t)v259, (uint64_t)v264);
  uint64_t v211 = v71;
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  BOOL v74 = os_log_type_enabled(v72, v73);
  uint64_t v75 = v236;
  if (v74)
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v248 = swift_slowAlloc();
    v263[0] = v248;
    *(_DWORD *)uint64_t v76 = 136315138;
    uint64_t v247 = (uint64_t)(v76 + 4);
    uint64_t v77 = *((void *)&v264[1] + 1);
    uint64_t v78 = *(void *)&v264[2];
    sub_10001CD44(v264, *((uint64_t *)&v264[1] + 1));
    uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v78 + 8) + 8) + 40))(v77);
    unint64_t v81 = v80;
    uint64_t v82 = Data.hexString.getter();
    unint64_t v84 = v83;
    sub_10001CFB8(v79, v81);
    v262[0] = sub_1008FA0F0(v82, v84, v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v264);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "C2: %s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v264);
  }

  uint64_t v85 = v249;
  uint64_t v86 = v260;
  uint64_t v87 = v261;
  sub_10001CD44(v259, v260);
  uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v87 + 8) + 8) + 40))(v86);
  unint64_t v90 = v89;
  unint64_t v92 = v250;
  uint64_t v91 = v251;
  uint64_t v93 = v252;
  (*(void (**)(unint64_t, void, _WORD *))(v251 + 104))(v250, enum case for HashAlgorithm.sha256(_:), v252);
  uint64_t v216 = Data.hash(algorithm:)();
  unint64_t v217 = v94;
  sub_10001CFB8(v88, v90);
  (*(void (**)(unint64_t, _WORD *))(v91 + 8))(v92, v93);
  uint64_t v95 = v253;
  uint64_t v214 = *(void *)(v221 + 64);
  sub_100A3AC74(v253);
  sub_100AE800C(v85);
  long long v96 = *(void (**)(char *, uint64_t))(v230 + 8);
  v230 += 8;
  uint64_t v215 = v96;
  v96(v95, v229);
  uint64_t v97 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 48))(v85, 1, v97) == 1)
  {
    sub_10001DAB4(v85, &qword_10163BB20);
    uint64_t v98 = *(void *)(*(void *)(v220 + v219)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    uint64_t v99 = *(void *)(v98 + 64);
    uint64_t v231 = v98 + 64;
    uint64_t v100 = 1 << *(unsigned char *)(v98 + 32);
    uint64_t v101 = -1;
    if (v100 < 64) {
      uint64_t v101 = ~(-1 << v100);
    }
    unint64_t v102 = v101 & v99;
    int64_t v232 = (unint64_t)(v100 + 63) >> 6;
    uint64_t v234 = v98;
    swift_bridgeObjectRetain_n();
    uint64_t v103 = 0;
    id v104 = (char *)_swiftEmptyDictionarySingleton;
    while (1)
    {
      unint64_t v253 = v104;
      if (v102)
      {
        uint64_t v247 = (v102 - 1) & v102;
        uint64_t v248 = v103;
        unint64_t v105 = __clz(__rbit64(v102)) | (v103 << 6);
      }
      else
      {
        int64_t v106 = v103 + 1;
        if (__OFADD__(v103, 1)) {
          goto LABEL_87;
        }
        if (v106 >= v232)
        {
LABEL_54:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        unint64_t v107 = *(void *)(v231 + 8 * v106);
        int64_t v108 = v103 + 1;
        if (!v107)
        {
          int64_t v108 = v103 + 2;
          if (v103 + 2 >= v232) {
            goto LABEL_54;
          }
          unint64_t v107 = *(void *)(v231 + 8 * v108);
          if (!v107)
          {
            int64_t v108 = v103 + 3;
            if (v103 + 3 >= v232) {
              goto LABEL_54;
            }
            unint64_t v107 = *(void *)(v231 + 8 * v108);
            if (!v107)
            {
              int64_t v108 = v103 + 4;
              if (v103 + 4 >= v232) {
                goto LABEL_54;
              }
              unint64_t v107 = *(void *)(v231 + 8 * v108);
              if (!v107)
              {
                uint64_t v109 = v103 + 5;
                if (v103 + 5 >= v232) {
                  goto LABEL_54;
                }
                unint64_t v107 = *(void *)(v231 + 8 * v109);
                if (!v107)
                {
                  while (1)
                  {
                    int64_t v108 = v109 + 1;
                    if (__OFADD__(v109, 1)) {
                      break;
                    }
                    if (v108 >= v232) {
                      goto LABEL_54;
                    }
                    unint64_t v107 = *(void *)(v231 + 8 * v108);
                    ++v109;
                    if (v107) {
                      goto LABEL_43;
                    }
                  }
                  __break(1u);
LABEL_91:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return;
                }
                int64_t v108 = v103 + 5;
              }
            }
          }
        }
LABEL_43:
        uint64_t v247 = (v107 - 1) & v107;
        uint64_t v248 = v108;
        unint64_t v105 = __clz(__rbit64(v107)) + (v108 << 6);
      }
      uint64_t v110 = *(void *)(v234 + 56);
      BOOL v111 = (uint64_t *)(*(void *)(v234 + 48) + 16 * v105);
      unint64_t v112 = v111[1];
      uint64_t v249 = *v111;
      uint64_t v113 = v249;
      unint64_t v250 = v112;
      unint64_t v114 = (int *)(type metadata accessor for MultipartAccessoryPairingInfo(0) - 8);
      uint64_t v115 = v110 + *(void *)(*(void *)v114 + 72) * v105;
      uint64_t v116 = v243;
      uint64_t v117 = v238;
      sub_100E4C5CC(v115, (uint64_t)v238 + *(int *)(v243 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
      *uint64_t v117 = v113;
      v117[1] = v112;
      uint64_t v118 = (uint64_t)v117;
      unint64_t v119 = v254;
      sub_10001D608(v118, (uint64_t)v254, &qword_101639618);
      uint64_t v120 = *(int *)(v116 + 48);
      uint64_t v121 = v239;
      uint64_t v122 = (uint64_t)v239 + v120;
      uint64_t v123 = (uint64_t)v119 + v120;
      uint64_t v124 = *v119;
      unint64_t v125 = v119[1];
      *uint64_t v239 = *v119;
      v121[1] = v125;
      uint64_t v246 = (uint64_t)v121 + v120;
      sub_100E4C5CC((uint64_t)v119 + v120, v122, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v126 = sub_10000588C((uint64_t *)&unk_101647810);
      uint64_t v127 = (uint64_t)v244;
      uint64_t v128 = &v244[*(int *)(v126 + 48)];
      uint64_t v251 = v124;
      v252 = v128;
      uint64_t v129 = *(int *)(v116 + 48);
      uint64_t v130 = v240;
      uint64_t v131 = (uint64_t)v240 + v129;
      uint64_t *v240 = v124;
      v130[1] = v125;
      sub_100E4C5CC(v123, (uint64_t)v130 + v129, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_10001D074(v131 + v114[8], v127, (uint64_t *)&unk_1016477E0);
      sub_1000361E0(v249, v250);
      sub_1000361E0(v124, v125);
      sub_100E4C634(v131, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v132 = *(int *)(v116 + 48);
      unint64_t v133 = v241;
      uint64_t v134 = (unsigned __int8 *)v241 + v132;
      *uint64_t v241 = *(_OWORD *)v119;
      sub_100E4C5CC(v123, (uint64_t)v133 + v132, type metadata accessor for MultipartAccessoryPairingInfo);
      LODWORD(v250) = *v134;
      sub_100E4C634((uint64_t)v134, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v135 = *(int *)(v116 + 48);
      unint64_t v136 = v242;
      uint64_t v137 = (uint64_t)v242 + v135;
      _OWORD *v242 = *(_OWORD *)v119;
      sub_100E4C5CC(v123, (uint64_t)v136 + v135, type metadata accessor for MultipartAccessoryPairingInfo);
      LOBYTE(v114) = *(unsigned char *)(v137 + v114[9]);
      sub_100E4C634(v137, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v138 = v252;
      _WORD *v252 = v250;
      *((unsigned char *)v138 + 2) = (_BYTE)v114;
      swift_storeEnumTagMultiPayload();
      uint64_t v139 = v127;
      uint64_t v140 = v251;
      uint64_t v141 = (uint64_t)v235;
      sub_100E4C130(v139, (uint64_t)v235, type metadata accessor for OwnedBeaconGroup.PairingState);
      os_log_type_t v142 = v253;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v264[0] = v142;
      unint64_t v145 = sub_1007241A0(v140, v125);
      uint64_t v146 = *((void *)v142 + 2);
      BOOL v147 = (v144 & 1) == 0;
      uint64_t v148 = v146 + v147;
      if (__OFADD__(v146, v147)) {
        break;
      }
      char v149 = v144;
      if (*((void *)v142 + 3) >= v148)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E7EDD8();
        }
      }
      else
      {
        sub_100E663C4(v148, isUniquelyReferenced_nonNull_native);
        uint64_t v150 = sub_1007241A0(v140, v125);
        if ((v149 & 1) != (v151 & 1)) {
          goto LABEL_91;
        }
        unint64_t v145 = v150;
      }
      uint64_t v75 = v236;
      id v104 = *(char **)&v264[0];
      if (v149)
      {
        sub_100E4A82C(v141, *(void *)(*(void *)&v264[0] + 56) + *(void *)(v237 + 72) * v145, type metadata accessor for OwnedBeaconGroup.PairingState);
      }
      else
      {
        *(void *)(*(void *)&v264[0] + 8 * (v145 >> 6) + 64) |= 1 << v145;
        unint64_t v152 = (uint64_t *)(*((void *)v104 + 6) + 16 * v145);
        *unint64_t v152 = v140;
        v152[1] = v125;
        sub_100E4C130(v141, *((void *)v104 + 7) + *(void *)(v237 + 72) * v145, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v153 = *((void *)v104 + 2);
        BOOL v154 = __OFADD__(v153, 1);
        uint64_t v155 = v153 + 1;
        if (v154) {
          goto LABEL_86;
        }
        *((void *)v104 + 2) = v155;
        sub_1000361E0(v140, v125);
      }
      swift_bridgeObjectRelease();
      sub_10001CFB8(v140, v125);
      sub_100E4C634(v246, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_10001DAB4((uint64_t)v254, &qword_101639618);
      unint64_t v102 = v247;
      uint64_t v103 = v248;
    }
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  id v104 = *(char **)(v85 + *(int *)(v97 + 40));
  swift_bridgeObjectRetain();
  sub_100E4C634(v85, type metadata accessor for OwnedBeaconGroup);
LABEL_55:
  swift_retain();
  sub_100A3AC74(v75);
  unint64_t v156 = sub_100E0A1A8();
  if (*(void *)(v156 + 16) && (unint64_t v157 = sub_100724804((uint64_t)v75), (v158 & 1) != 0))
  {
    unint64_t v159 = (uint64_t *)(*(void *)(v156 + 56) + 16 * v157);
    uint64_t v160 = *v159;
    unint64_t v161 = v159[1];
    sub_1000361E0(*v159, v161);
  }
  else
  {
    uint64_t v160 = 0;
    unint64_t v161 = 0xF000000000000000;
  }
  swift_bridgeObjectRelease();
  v215(v75, v229);
  sub_100F85054(v216, v217, v160, v161, (uint64_t)v104, (uint64_t)v262);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100037A24(v160, v161);
  sub_10001D608((uint64_t)v262, (uint64_t)v263, &qword_10165FEB0);
  if (sub_1000616F4((uint64_t)v263) == 1)
  {
    uint64_t v162 = Logger.logObject.getter();
    os_log_type_t v163 = static os_log_type_t.error.getter();
    BOOL v164 = os_log_type_enabled(v162, v163);
    uint64_t v165 = v233;
    if (v164)
    {
      v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Unable to create pairing check data.", v166, 2u);
      swift_slowDealloc();
    }

    sub_100037A24(v212, v213);
    sub_10001CFB8(v216, v217);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v258);
    unint64_t v167 = 0xD00000000000001ALL;
    uint64_t v168 = "Invalid E2 from accessory!";
LABEL_63:
    *(void *)uint64_t v165 = v167;
    *(void *)(v165 + 8) = (unint64_t)(v168 - 32) | 0x8000000000000000;
    __int16 v169 = 265;
    goto LABEL_64;
  }
  memcpy(v264, v263, 0x140uLL);
  char v170 = v227;
  sub_100E347B0((uint64_t *)v264, (uint64_t)v227);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v178 = (uint64_t)v170;
    uint64_t v179 = v228;
    sub_100E4C130(v178, v228, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
    uint64_t v180 = v224;
    sub_100E4C5CC(v179, v224, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
    unint64_t v181 = Logger.logObject.getter();
    os_log_type_t v182 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v181, v182))
    {
      unint64_t v183 = (uint8_t *)swift_slowAlloc();
      *(void *)&v257[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v183 = 136446210;
      if (*(void *)(v180 + *(int *)(v225 + 44) + 8) >> 60 == 15)
      {
        uint64_t v184 = 0;
        unint64_t v185 = 0xE000000000000000;
      }
      else
      {
        uint64_t v184 = Data.hexString.getter();
        unint64_t v185 = v187;
      }
      *(void *)&long long v255 = sub_1008FA0F0(v184, v185, (uint64_t *)v257);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4C634(v224, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v181, v182, "Received SeedS and S3 from server. Pairing token: %{public}s", v183, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v179 = v228;
    }
    else
    {
      sub_100E4C634(v180, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
    }
    uint64_t v188 = *(void *)(v220 + v219);
    uint64_t v189 = v225;
    uint64_t v190 = v179;
    uint64_t v191 = v179 + *(int *)(v225 + 36);
    uint64_t v192 = type metadata accessor for UUID();
    uint64_t v193 = *(void *)(v192 - 8);
    uint64_t v194 = (uint64_t)v223;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v223, v191, v192);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v193 + 56))(v194, 0, 1, v192);
    uint64_t v195 = (uint64_t)v222;
    sub_10001D608(v194, (uint64_t)v222, &qword_101638CF0);
    uint64_t v196 = v188 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess();
    swift_retain();
    sub_100062604(v195, v196, &qword_101638CF0);
    swift_endAccess();
    swift_release();
    unint64_t v197 = v218;
    sub_100A3AC74(v218);
    uint64_t v198 = (uint64_t *)(v190 + *(int *)(v189 + 44));
    uint64_t v199 = *v198;
    unint64_t v200 = v198[1];
    sub_100037A38(*v198, v200);
    unint64_t v201 = sub_100E0A1A8();
    *(void *)&long long v255 = v201;
    if (v200 >> 60 == 15)
    {
      double v202 = sub_1001654A4((uint64_t)v197, v257);
      ((void (*)(char *, uint64_t, double))v215)(v197, v229, v202);
      sub_100037A24(*(uint64_t *)&v257[0], *((unint64_t *)&v257[0] + 1));
    }
    else
    {
      unint64_t v203 = v201;
      char v204 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v257[0] = v203;
      sub_10017182C(v199, v200, (uint64_t)v197, v204);
      *(void *)&long long v255 = *(void *)&v257[0];
      swift_bridgeObjectRelease();
      v215(v197, v229);
    }
    uint64_t v165 = v233;
    sub_100E0A670();
    uint64_t v205 = v260;
    uint64_t v206 = v261;
    sub_10001CD44(v259, v260);
    uint64_t v207 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v206 + 8) + 8) + 40))(v205);
    unint64_t v209 = v208;
    uint64_t v210 = v228;
    sub_100E37A8C(v228, v207, v208, (uint64_t)&v255);
    sub_10001CFB8(v207, v209);
    if (v256)
    {
      sub_100037A24(v212, v213);
      sub_10001CFB8(v216, v217);
      sub_100E48768((uint64_t)v262);
      sub_100E4C634(v210, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v258);
      sub_10001CEB0(&v255, (uint64_t)v257);
      sub_10001CEB0(v257, v165);
      *(unsigned char *)(v165 + 41) = 0;
      goto LABEL_65;
    }
    sub_10001DAB4((uint64_t)&v255, &qword_10165FEB8);
    sub_100037A24(v212, v213);
    sub_10001CFB8(v216, v217);
    sub_100E48768((uint64_t)v262);
    sub_100E4C634(v210, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v258);
    unint64_t v167 = 0xD000000000000019;
    uint64_t v168 = "Invalid token from server";
    goto LABEL_63;
  }
  id v171 = *v170;
  unint64_t v172 = Logger.logObject.getter();
  os_log_type_t v173 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v172, v173))
  {
    BOOL v174 = (uint8_t *)swift_slowAlloc();
    *(void *)&v257[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v174 = 136446210;
    *(void *)&long long v255 = v171;
    type metadata accessor for SPPairingSessionError(0);
    id v175 = v171;
    uint64_t v176 = String.init<A>(describing:)();
    *(void *)&long long v255 = sub_1008FA0F0(v176, v177, (uint64_t *)v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v172, v173, "Pairing lock check failed. Error %{public}s", v174, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v165 = v233;
  id v186 = v171;
  sub_100E41064((uint64_t)v186);

  *(void *)&long long v255 = v186;
  type metadata accessor for SPPairingSessionError(0);
  sub_100E484C4(&qword_101638770, 255, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.code.getter();
  if (*(void *)&v257[0] == 18)
  {
    sub_100E37258(v220, v165);
    sub_100037A24(v212, v213);
    sub_10001CFB8(v216, v217);
    sub_100E48768((uint64_t)v262);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v258);
    goto LABEL_65;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v258);
  sub_100037A24(v212, v213);
  sub_10001CFB8(v216, v217);
  sub_100E48768((uint64_t)v262);
  *(void *)uint64_t v165 = v186;
  __int16 v169 = 256;
LABEL_64:
  *(_WORD *)(v165 + 40) = v169;
LABEL_65:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v259);
}

double sub_100E37258@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v64 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (void *)v3[2];
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v63 = v6;
  uint64_t v16 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v17 = (uint64_t *)(*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15)
  {
    v66[0] = *v17;
    uint64_t v19 = v66[0];
    v66[1] = v18;
    sub_1000361E0(v66[0], v18);
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_100037A24(v19, v18);
      goto LABEL_5;
    }
    uint64_t v62 = a1;
    uint64_t v59 = v7;
    uint64_t v25 = Data.trimmed.getter();
    unint64_t v27 = v26;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = sub_100010324(v28, (uint64_t)qword_10170F068);
    sub_1000361E0(v25, v27);
    sub_1000361E0(v25, v27);
    uint64_t v56 = v29;
    uint64_t v30 = Logger.logObject.getter();
    int v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
    uint64_t v60 = v25;
    uint64_t v57 = v19;
    if (v32)
    {
      int v55 = v31;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v66[0] = v54;
      uint64_t v34 = v33;
      *(_DWORD *)uint64_t v33 = 136315138;
      sub_1000361E0(v25, v27);
      static String.Encoding.utf8.getter();
      uint64_t v35 = String.init(data:encoding:)();
      os_log_t v58 = v30;
      if (!v36) {
        uint64_t v35 = Data.hexString.getter();
      }
      uint64_t v37 = v35;
      unint64_t v38 = v36;
      sub_10001CFB8(v25, v27);
      uint64_t v65 = sub_1008FA0F0(v37, v38, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v25, v27);
      sub_10001CFB8(v25, v27);
      uint64_t v30 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v55, "Accessory serial number: %s.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v25, v27);
      sub_10001CFB8(v25, v27);
    }

    unint64_t v61 = v27;
    uint64_t v39 = *(void *)(*(void *)(v62 + v16)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    uint64_t v40 = v3[4];
    uint64_t v41 = v3[8];
    uint64_t v42 = *(void *)(v41 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
    os_log_t v58 = v40;
    if (v42)
    {
      uint64_t v43 = *(void *)(v41 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      swift_bridgeObjectRetain();
      uint64_t v44 = v42;
    }
    else
    {
      uint64_t v45 = *(void **)(v41 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
      swift_bridgeObjectRetain();
      id v46 = [v45 name];
      if (!v46)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0xE000000000000000;
        goto LABEL_22;
      }
      unint64_t v47 = v46;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v48;
    }
    swift_bridgeObjectRetain();
LABEL_22:
    uint64_t v49 = v64;
    sub_100A3AC74(v64);
    uint64_t v50 = *(void *)(v62 + v16);
    swift_retain();
    uint64_t v52 = v60;
    unint64_t v51 = v61;
    sub_100BF0A30(v60, v61, v43, v44, (uint64_t)v49, v39, v50);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v63);
    sub_100037A24(v57, v18);
    sub_10001CFB8(v52, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_9;
  }
LABEL_5:
  if (qword_101637310 != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170F068);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Invalid serial number.", v23, 2u);
    swift_slowDealloc();
  }

LABEL_9:
  *(void *)a2 = 8;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_WORD *)(a2 + 40) = 267;
  return result;
}

double sub_100E37A8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v135 = a2;
  uint64_t v130 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))type metadata accessor for MACAddress();
  uint64_t v129 = *((void *)v130 - 1);
  __chkstk_darwin(v130);
  uint64_t v127 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v9 - 8);
  uint64_t v128 = (uint64_t)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v11 - 8);
  uint64_t v133 = (uint64_t)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v126 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AccessoryProductInfo();
  unint64_t v137 = *(void *)(v14 - 8);
  uint64_t v138 = v14;
  __chkstk_darwin(v14);
  uint64_t v134 = (uint64_t)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v16 - 8);
  unint64_t v18 = (unint64_t)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for String.Encoding();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for AirPodsPairingLockCheckResponse();
  static String.Encoding.utf8.getter();
  unint64_t v23 = String.data(using:allowLossyConversion:)();
  unint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (v25 >> 60 == 15)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170F068);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to decode masked apple ID", v29, 2u);
      swift_slowDealloc();
    }

LABEL_7:
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return result;
  }
  uint64_t v122 = a3;
  unint64_t v136 = v4;
  uint64_t v124 = (uint64_t *)a4;
  unint64_t v146 = v23;
  unint64_t v147 = v25;
  unint64_t v32 = *(void *)(a1 + 64);
  unint64_t v31 = *(void *)(a1 + 72);
  unint64_t v144 = v32;
  unint64_t v145 = v31;
  uint64_t v33 = 0;
  switch(v25 >> 62)
  {
    case 1uLL:
      LODWORD(v33) = HIDWORD(v23) - v23;
      if (!__OFSUB__(HIDWORD(v23), v23))
      {
        uint64_t v33 = (int)v33;
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_64;
    case 2uLL:
      uint64_t v35 = *(void *)(v23 + 16);
      uint64_t v34 = *(void *)(v23 + 24);
      BOOL v36 = __OFSUB__(v34, v35);
      uint64_t v33 = v34 - v35;
      if (!v36) {
        goto LABEL_13;
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v33 = BYTE6(v25);
LABEL_13:
      uint64_t v37 = 60 - v33;
      if (__OFSUB__(60, v33))
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v123 = a1;
      uint64_t v19 = v31 >> 62;
      sub_1000361E0(v32, v31);
      uint64_t v140 = sub_10085E9A4(v37);
      unint64_t v141 = v38;
      sub_10072AD40(&v140, 0);
      a4 = v140;
      unint64_t v39 = v141;
      Data.append(_:)();
      sub_10001CFB8(a4, v39);
      uint64_t v40 = 0;
      switch(v31 >> 62)
      {
        case 1uLL:
          LODWORD(v40) = HIDWORD(v32) - v32;
          if (__OFSUB__(HIDWORD(v32), v32)) {
            goto LABEL_65;
          }
          uint64_t v40 = (int)v40;
          break;
        case 2uLL:
          uint64_t v42 = *(void *)(v32 + 16);
          uint64_t v41 = *(void *)(v32 + 24);
          BOOL v36 = __OFSUB__(v41, v42);
          uint64_t v40 = v41 - v42;
          if (v36) {
            goto LABEL_66;
          }
          break;
        case 3uLL:
          break;
        default:
          uint64_t v40 = BYTE6(v31);
          break;
      }
      if (__OFSUB__(100, v40)) {
        goto LABEL_61;
      }
      uint64_t v140 = sub_10085E9A4(100 - v40);
      unint64_t v141 = v43;
      sub_10072AD40(&v140, 0);
      uint64_t v44 = v140;
      unint64_t v45 = v141;
      Data.append(_:)();
      sub_10001CFB8(v44, v45);
      uint64_t v46 = v136[10];
      uint64_t v47 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      uint64_t v48 = *(void *)(v46 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
          + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess();
      sub_10001D074(v48, v18, (uint64_t *)&unk_10166BFA0);
      uint64_t v49 = v138;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v137 + 48))(v18, 1, v138))
      {
        sub_10001DAB4(v18, (uint64_t *)&unk_10166BFA0);
      }
      else
      {
        uint64_t v50 = v134;
        sub_100E4C5CC(v18, v134, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        sub_10001DAB4(v18, (uint64_t *)&unk_10166BFA0);
        char v51 = *(unsigned char *)(v50 + *(int *)(v49 + 44));
        sub_100E4C634(v50, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        if (v51) {
          goto LABEL_25;
        }
      }
      uint64_t v52 = *(void *)(v46 + v47);
      unint64_t v53 = *(void *)(v52 + 112);
      if (v53 >> 60 == 15
        || (uint64_t v54 = *(void *)(v52 + 104),
            sub_1000361E0(v54, *(void *)(v52 + 112)),
            BOOL v55 = sub_100DC8844(v54, v53),
            sub_100037A24(v54, v53),
            !v55))
      {
        uint64_t v19 = 0;
        a1 = 0;
        unint64_t v18 = 0xF000000000000000;
        unint64_t v32 = 0xF000000000000000;
        goto LABEL_33;
      }
LABEL_25:
      uint64_t v56 = (uint64_t *)(*(void *)(v46 + v47)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      unint64_t v23 = v56[1];
      if (v23 >> 60 != 15)
      {
        uint64_t v140 = *v56;
        unint64_t v18 = v140;
        unint64_t v141 = v23;
        sub_1000361E0(v140, v23);
        sub_1000362FC();
        if (DataProtocol.isNull.getter())
        {
          sub_100037A24(v18, v23);
          goto LABEL_28;
        }
        uint64_t v19 = Data.trimmed.getter();
        a1 = v96;
        uint64_t v97 = *(void *)(*(void *)(v46 + v47)
                        + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
        if (!*(void *)(v97 + 16))
        {
          uint64_t v100 = v133;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v133, 1, 1, v132);
          a4 = (uint64_t)v124;
LABEL_55:
          sub_10001DAB4(v100, &qword_101639628);
          if (qword_101637310 != -1) {
LABEL_67:
          }
            swift_once();
          uint64_t v106 = type metadata accessor for Logger();
          sub_100010324(v106, (uint64_t)qword_10170F068);
          unint64_t v107 = Logger.logObject.getter();
          os_log_type_t v108 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v107, v108))
          {
            uint64_t v109 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v109 = 0;
            _os_log_impl((void *)&_mh_execute_header, v107, v108, "Missing partId info in finalizePairingPayload!", v109, 2u);
            swift_slowDealloc();
          }

          sub_10001CFB8(v19, a1);
          sub_100037A24(v18, v23);
          sub_10001CFB8(v144, v145);
          sub_10001CFB8(v146, v147);
          goto LABEL_7;
        }
        swift_bridgeObjectRetain();
        uint64_t v98 = v19;
        uint64_t v99 = sub_1007241A0(v19, a1);
        a4 = (uint64_t)v124;
        uint64_t v100 = v133;
        uint64_t v101 = v131;
        if (v102)
        {
          sub_100E4C5CC(*(void *)(v97 + 56) + *(void *)(v131 + 72) * v99, v133, type metadata accessor for MultipartAccessoryPairingInfo);
          uint64_t v103 = 0;
        }
        else
        {
          uint64_t v103 = 1;
        }
        uint64_t v104 = v132;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v100, v103, 1, v132);
        swift_bridgeObjectRelease();
        int v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v100, 1, v104);
        uint64_t v19 = v98;
        if (v105 == 1) {
          goto LABEL_55;
        }
        uint64_t v138 = v98;
        uint64_t v110 = v126;
        sub_100E4C130(v100, (uint64_t)v126, type metadata accessor for MultipartAccessoryPairingInfo);
        uint64_t v140 = *(void *)(v123 + *(int *)(v125 + 48));
        sub_100061D24();
        uint64_t v111 = FixedWidthInteger.data.getter();
        unint64_t v137 = a1;
        a1 = v111;
        unint64_t v32 = v112;
        uint64_t v113 = v127;
        sub_100A3AC74(v127);
        uint64_t v114 = v128;
        sub_100AE800C(v128);
        (*(void (**)(char *, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t)))(v129 + 8))(v113, v130);
        uint64_t v115 = sub_10114503C(v114, *v110);
        unint64_t v117 = v116;
        sub_10001CFB8(v138, v137);
        uint64_t v118 = v18;
        unint64_t v18 = v117;
        sub_100037A24(v118, v23);
        sub_10001DAB4(v114, &qword_10163BB20);
        uint64_t v119 = (uint64_t)v110;
        uint64_t v19 = v115;
        sub_100E4C634(v119, type metadata accessor for MultipartAccessoryPairingInfo);
LABEL_33:
        if (qword_101637310 == -1)
        {
LABEL_34:
          uint64_t v65 = type metadata accessor for Logger();
          sub_100010324(v65, (uint64_t)qword_10170F068);
          sub_100037A38(a1, v32);
          sub_100037A38(a1, v32);
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          BOOL v68 = os_log_type_enabled(v66, v67);
          uint64_t v133 = v32;
          unint64_t v137 = v18;
          uint64_t v138 = v19;
          if (v68)
          {
            uint64_t v69 = (uint8_t *)swift_slowAlloc();
            uint64_t v140 = swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = 136446210;
            if (v32 >> 60 == 15)
            {
              uint64_t v70 = 0;
              unint64_t v71 = 0xE000000000000000;
            }
            else
            {
              sub_1000361E0(a1, v32);
              uint64_t v70 = Data.hexString.getter();
              unint64_t v71 = v72;
              sub_100037A24(a1, v32);
            }
            v139[0] = sub_1008FA0F0(v70, v71, &v140);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100037A24(a1, v32);
            sub_100037A24(a1, v32);
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "pairingEpoch: %{public}s", v69, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v18 = v137;
            uint64_t v19 = v138;
          }
          else
          {
            sub_100037A24(a1, v32);
            sub_100037A24(a1, v32);
          }
          sub_100037A38(v19, v18);
          sub_100037A38(v19, v18);
          os_log_type_t v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.default.getter();
          BOOL v75 = os_log_type_enabled(v73, v74);
          uint64_t v134 = a1;
          if (v75)
          {
            uint64_t v76 = (uint8_t *)swift_slowAlloc();
            uint64_t v140 = swift_slowAlloc();
            *(_DWORD *)uint64_t v76 = 136446210;
            if (v18 >> 60 == 15)
            {
              uint64_t v77 = 0;
              unint64_t v78 = 0xE000000000000000;
            }
            else
            {
              sub_1000361E0(v19, v18);
              uint64_t v77 = Data.hexString.getter();
              unint64_t v78 = v79;
              sub_100037A24(v19, v18);
            }
            v139[0] = sub_1008FA0F0(v77, v78, &v140);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100037A24(v19, v18);
            sub_100037A24(v19, v18);
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "companionPairingEpochs: %{public}s", v76, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100037A24(v19, v18);
            sub_100037A24(v19, v18);
          }

          uint64_t v80 = (uint64_t)(v136 + 22);
          swift_beginAccess();
          sub_10001D010(v80, (uint64_t)&v140);
          uint64_t v81 = v142;
          uint64_t v82 = v143;
          unint64_t v136 = sub_10001CD44(&v140, v142);
          uint64_t v83 = *(void *)(v123 + 56);
          uint64_t v132 = *(void *)(v123 + 48);
          uint64_t v131 = v83;
          uint64_t v84 = v146;
          unint64_t v85 = v147;
          uint64_t v86 = v144;
          unint64_t v87 = v145;
          uint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v82 + 48);
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          unint64_t v89 = v124;
          v124[3] = AssociatedTypeWitness;
          v89[4] = swift_getAssociatedConformanceWitness();
          sub_10001D958(v89);
          uint64_t v90 = v84;
          sub_1000361E0(v84, v85);
          sub_1000361E0(v86, v87);
          uint64_t v120 = v81;
          uint64_t v121 = v82;
          unint64_t v91 = v137;
          uint64_t v92 = v138;
          unint64_t v93 = v133;
          uint64_t v94 = v134;
          v130(v135, v122, v132, v131, v90, v85, v86, v87, v134, v133, v138, v137, v120, v121);
          sub_10001CFB8(v86, v87);
          sub_10001CFB8(v90, v85);
          sub_100037A24(v92, v91);
          sub_100037A24(v94, v93);
          sub_10001CFB8(v86, v87);
          sub_10001CFB8(v90, v85);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v140);
          return result;
        }
LABEL_62:
        swift_once();
        goto LABEL_34;
      }
LABEL_28:
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100010324(v57, (uint64_t)qword_10170F068);
      swift_retain_n();
      os_log_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        v139[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 141558275;
        uint64_t v140 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v60 + 12) = 2081;
        unint64_t v61 = (uint64_t *)(*(void *)(v46 + v47)
                        + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        unint64_t v62 = v61[1];
        uint64_t v140 = *v61;
        unint64_t v141 = v62;
        sub_100037A38(v140, v62);
        sub_10000588C(&qword_101669360);
        uint64_t v63 = String.init<A>(describing:)();
        uint64_t v140 = sub_1008FA0F0(v63, v64, v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Invalid serial number %{private,mask.hash}s!", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_10001CFB8(v144, v145);
      sub_10001CFB8(v146, v147);
      uint64_t v95 = v124;
      v124[4] = 0;
      double result = 0.0;
      *(_OWORD *)uint64_t v95 = 0u;
      *((_OWORD *)v95 + 1) = 0u;
      return result;
  }
}

uint64_t sub_100E38C48@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v79 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v13 - 8);
  uint64_t v78 = v2;
  uint64_t v14 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v80 = *(void *)(v2 + 80);
  uint64_t v15 = (uint64_t *)(*(void *)(v80 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v76 = a1;
  uint64_t v77 = v7;
  v83[0] = *v15;
  uint64_t v17 = v83[0];
  v83[1] = v16;
  sub_1000361E0(v83[0], v16);
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v69 = v10;
    uint64_t v74 = v4;
    uint64_t v72 = v17;
    uint64_t v25 = Data.trimmed.getter();
    unint64_t v27 = v26;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v73 = v5;
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = sub_100010324(v28, (uint64_t)qword_10170F068);
    sub_1000361E0(v25, v27);
    sub_1000361E0(v25, v27);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    BOOL v75 = v12;
    uint64_t v70 = v25;
    unint64_t v71 = v27;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 141558275;
      uint64_t v82 = 1752392040;
      v83[0] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      static String.Encoding.utf8.getter();
      uint64_t v35 = String.init(data:encoding:)();
      uint64_t v68 = v29;
      if (!v36) {
        uint64_t v35 = Data.hexString.getter();
      }
      uint64_t v82 = sub_1008FA0F0(v35, v36, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v25, v27);
      sub_10001CFB8(v25, v27);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v12 = v75;
    }
    else
    {
      sub_10001CFB8(v25, v27);
      sub_10001CFB8(v25, v27);
    }
    uint64_t v37 = *(void *)(*(void *)(v80 + v14)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    swift_bridgeObjectRetain_n();
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      v83[0] = v67;
      *(_DWORD *)uint64_t v40 = 136315394;
      type metadata accessor for MultipartAccessoryPairingInfo(0);
      sub_100061B8C();
      swift_bridgeObjectRetain();
      uint64_t v41 = Dictionary.description.getter();
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v82 = sub_1008FA0F0(v41, v43, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2048;
      uint64_t v44 = *(void *)(v37 + 16);
      swift_bridgeObjectRelease();
      uint64_t v82 = v44;
      uint64_t v12 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "All serials: %s. Count %ld", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v45 = *(void *)(v80 + v14);
    uint64_t v46 = *(void *)(v78 + 32);
    uint64_t v47 = *(void *)(v78 + 64);
    uint64_t v48 = *(void *)(v47 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
    if (v48)
    {
      uint64_t v49 = *(void *)(v47 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      swift_retain();
      uint64_t v50 = v48;
    }
    else
    {
      char v51 = *(void **)(v47 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
      swift_retain();
      id v52 = [v51 name];
      if (!v52)
      {
        uint64_t v49 = 0;
        uint64_t v50 = 0xE000000000000000;
        goto LABEL_25;
      }
      unint64_t v53 = v52;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v54;
    }
    swift_bridgeObjectRetain();
LABEL_25:
    BOOL v55 = v77;
    sub_100A3AC74(v77);
    sub_100BF17A8((uint64_t)v12, v79, v76, v45, v49, v50, (unint64_t)v55, v37);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v74);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v56 = (void **)(*(void *)(v80 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess();
    uint64_t v57 = *v56;
    if (*v56)
    {
      os_log_t v58 = &v12[*(int *)(v69 + 20)];
      uint64_t v59 = type metadata accessor for Transaction();
      __chkstk_darwin(v59);
      *((unsigned char *)&v66 - 32) = 0;
      *(&v66 - 3) = (uint64_t)v57;
      *(&v66 - 2) = (uint64_t)v58;
      *(&v66 - 1) = v46;
      id v60 = v57;
      static Transaction.named<A>(_:with:)();
      sub_100037A24(v72, v16);
      sub_10001CFB8(v70, v71);
    }
    else
    {
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unable to retrieve current location from CL for pairing", v63, 2u);
        swift_slowDealloc();

        sub_10001CFB8(v70, v71);
        sub_100037A24(v72, v16);
      }
      else
      {
        sub_100037A24(v72, v16);
        sub_10001CFB8(v70, v71);
      }
    }
    uint64_t v64 = sub_10000588C(&qword_101660FF0);
    uint64_t v65 = (uint64_t)v81 + *(int *)(v64 + 48);
    sub_100E4C130((uint64_t)v12, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100E4C130(v79, v65, type metadata accessor for OwnedBeaconGroup);
    sub_10000588C(&qword_101661000);
    return swift_storeEnumTagMultiPayload();
  }
  sub_100037A24(v17, v16);
LABEL_4:
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170F068);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Invalid serial number.", v21, 2u);
    swift_slowDealloc();
  }

  sub_100E4869C();
  uint64_t v22 = swift_allocError();
  *unint64_t v23 = 1;
  uint64_t *v81 = v22;
  sub_10000588C(&qword_101661000);
  return swift_storeEnumTagMultiPayload();
}

void sub_100E39670(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v6 - 8);
  uint64_t v75 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v69 - v13;
  __chkstk_darwin(v12);
  uint64_t v73 = (uint64_t)&v69 - v15;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v77 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v76 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v20 - 8);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170F068);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v79 = v22;
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v81 = v8;
  uint64_t v72 = v14;
  if (v25)
  {
    uint64_t v70 = a3;
    unint64_t v71 = v11;
    uint64_t v80 = v18;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 141558275;
    uint64_t v82 = 1752392040;
    uint64_t v83 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2081;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v28 = String.init(data:encoding:)();
    if (!v29) {
      uint64_t v28 = Data.hexString.getter();
    }
    uint64_t v30 = v28;
    unint64_t v31 = v29;
    sub_10001CFB8(a1, a2);
    uint64_t v82 = sub_1008FA0F0(v30, v31, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Clean up pending pairing for %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v18 = v80;
    uint64_t v8 = v81;
    a3 = v70;
    uint64_t v11 = v71;
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
  }
  uint64_t v32 = swift_allocBox();
  sub_100E4C5CC(a3, v33, type metadata accessor for OwnedBeaconGroup);
  if (sub_1004D0AD8(a1, a2))
  {
    uint64_t v34 = dispatch_group_create();
    dispatch_group_enter(v34);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v34;
    swift_retain();
    unint64_t v36 = v34;
    uint64_t v37 = a3;
    unint64_t v38 = v36;
    sub_101072EAC(v37, 0, (void (*)(uint64_t))sub_1001560D8, v32, (void (*)(uint64_t (*)(uint64_t)))sub_100E48728, (void (*)(uint64_t (*)(uint64_t)))v35);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v39 = v77;
    sub_1004D1078(a1, a2, v77);
    uint64_t v40 = v78;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v39, 1, v18) == 1)
    {

      uint64_t v41 = &qword_101638CF0;
LABEL_16:
      sub_10001DAB4(v39, v41);
LABEL_17:
      swift_release();
      return;
    }
    uint64_t v51 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v76, v39, v18);
    uint64_t v39 = v75;
    sub_100AE75E0(v51, v75);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v39, 1, v8) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v51, v18);

      uint64_t v41 = &qword_10163BB20;
      goto LABEL_16;
    }
    uint64_t v52 = v73;
    sub_100E4C130(v39, v73, type metadata accessor for OwnedBeaconGroup);
    uint64_t v53 = sub_100E09380(v52);
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = (uint64_t)v72;
      sub_100E4C5CC(v52, (uint64_t)v72, type metadata accessor for OwnedBeaconGroup);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v79 = v32;
        uint64_t v59 = v58;
        uint64_t v60 = swift_slowAlloc();
        uint64_t v77 = v60;
        *(_DWORD *)uint64_t v59 = 141558531;
        uint64_t v82 = 1752392040;
        uint64_t v83 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 12) = 2081;
        sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v82 = sub_1008FA0F0(v61, v62, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634(v55, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v59 + 22) = 2082;
        uint64_t v82 = v54;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v80 = v18;
        uint64_t v63 = String.init<A>(describing:)();
        uint64_t v82 = sub_1008FA0F0(v63, v64, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to delete pending record %{private,mask.hash}s due to %{public}s", (uint8_t *)v59, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        sub_100E4C634(v73, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v80);
        swift_release();
        return;
      }

      swift_errorRelease();
      swift_errorRelease();
      sub_100E4C634(v55, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease();

      uint64_t v68 = v52;
    }
    else
    {

      uint64_t v68 = v52;
    }
    sub_100E4C634(v68, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v76, v18);
    goto LABEL_17;
  }
  sub_100E4C5CC(a3, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v79 = v32;
    uint64_t v80 = v18;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 141558531;
    uint64_t v82 = 1752392040;
    uint64_t v83 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2081;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v46 = String.init(data:encoding:)();
    if (v47)
    {
      uint64_t v48 = v46;
      unint64_t v49 = v47;
      uint64_t v50 = (uint64_t)v11;
    }
    else
    {
      uint64_t v50 = (uint64_t)v11;
      uint64_t v48 = Data.hexString.getter();
      unint64_t v49 = v65;
    }
    sub_10001CFB8(a1, a2);
    uint64_t v82 = sub_1008FA0F0(v48, v49, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    *(_WORD *)(v44 + 22) = 2080;
    sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = sub_1008FA0F0(v66, v67, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100E4C634(v50, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unable to unpair %{private,mask.hash}s from %s!", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    sub_100E4C634((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }
  swift_release();
}

void sub_100E3A288(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v12, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v31 = v13;
      uint64_t v32 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v31 = sub_1008FA0F0(v19, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to modify existing group. Error %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100E4C130((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170F068);
    sub_100E4C5CC((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v30 = a2;
      *(_DWORD *)uint64_t v25 = 141558275;
      uint64_t v31 = 1752392040;
      uint64_t v32 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2081;
      uint64_t v29 = v25 + 14;
      type metadata accessor for UUID();
      sub_100E484C4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_1008FA0F0(v27, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100E4C634((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      a2 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100E4C634((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    }

    sub_1004CCF70(v22);
    sub_100E4C634((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100E3A7C4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F068);
  sub_1000361E0(a1, a2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    os_log_type_t v16 = v15;
    uint64_t v17 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x100E3AAC8);
        }
        uint64_t v17 = (int)v17;
LABEL_10:
        v24[1] = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10001CFB8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "didNotify data length %ld", v16, 0xCu);
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v17 = BYTE6(a2);
        goto LABEL_10;
    }
  }
  else
  {
    sub_10001CFB8(a1, a2);
  }

  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v21;
  v22[3] = a1;
  uint64_t v22[4] = a2;
  sub_10000588C(&qword_10163C628);
  swift_allocObject();
  sub_1000361E0(a1, a2);
  return Future.init(_:)();
}

uint64_t sub_100E3AAD8(void (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v101 = a2;
  char v102 = a1;
  uint64_t v7 = type metadata accessor for BinaryDecodingError();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for BinaryDecoder();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v92 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163C630);
  __chkstk_darwin(v12 - 8);
  uint64_t v99 = (void (*)(char *, uint64_t))((char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Bit();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v93 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v100 = (char *)&v86 - v18;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v110 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    LOBYTE(v111) = 11;
    char v112 = 1;
    v102(&v108);
    return sub_10001DAB4((uint64_t)&v108, &qword_10163C638);
  }
  BOOL v20 = (void *)Strong;
  uint64_t v95 = v15;
  uint64_t v98 = v14;
  uint64_t v96 = v10;
  uint64_t v89 = v8;
  uint64_t v21 = *(void *)(Strong + 144);
  unint64_t v22 = v20[19];
  if (v22 >> 60 == 15) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v21;
  }
  unint64_t v24 = 0xC000000000000000;
  if (v22 >> 60 != 15) {
    unint64_t v24 = v20[19];
  }
  uint64_t v106 = v23;
  unint64_t v107 = v24;
  sub_100037A38(v21, v22);
  sub_1000361E0(a4, a5);
  sub_100EFD6B8(1, a4, a5, (uint64_t *)&v108);
  long long v25 = v108;
  Data.append(_:)();
  sub_10001CFB8(v25, *((unint64_t *)&v25 + 1));
  uint64_t v26 = v106;
  unint64_t v27 = v107;
  uint64_t v28 = v20[18];
  unint64_t v29 = v20[19];
  v20[18] = v106;
  v20[19] = v27;
  sub_1000361E0(v26, v27);
  sub_100037A24(v28, v29);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v94 = sub_100010324(v30, (uint64_t)qword_10170F068);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v97 = v7;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    unint64_t v87 = a5;
    uint64_t v35 = (uint8_t *)v34;
    *(void *)&long long v108 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v86 = v35 + 4;
    swift_beginAccess();
    unint64_t v36 = v20;
    uint64_t v37 = v106;
    unint64_t v38 = v107;
    sub_1000361E0(v106, v107);
    uint64_t v39 = Data.description.getter();
    uint64_t v88 = a4;
    unint64_t v41 = v40;
    unint64_t v42 = v38;
    BOOL v20 = v36;
    sub_10001CFB8(v37, v42);
    v103[0] = sub_1008FA0F0(v39, v41, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v88;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "localReadBuffer %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v87;
    swift_slowDealloc();
  }

  os_log_type_t v43 = v96;
  uint64_t v44 = v98;
  uint64_t v45 = v100;
  uint64_t v46 = (uint64_t)v99;
  sub_1000361E0(a4, a5);
  __int16 v47 = sub_10115B26C(a4, a5);
  sub_10001CFB8(a4, a5);
  uint64_t v48 = v95;
  if ((v47 & 0x100) != 0) {
    goto LABEL_18;
  }
  LOBYTE(v108) = v47;
  sub_10006145C();
  uint64_t v49 = FixedWidthInteger.bits()();
  if (*(void *)(v49 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v48 + 16))(v46, v49 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), v44);
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v50 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, v50, 1, v44);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v44) == 1)
  {
    sub_10001DAB4(v46, &qword_10163C630);
LABEL_18:
    sub_100E4869C();
    uint64_t v51 = swift_allocError();
    *uint64_t v52 = 2;
    swift_willThrow();
    sub_10001CFB8(v106, v107);
    goto LABEL_19;
  }
  uint64_t v88 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v45, v46, v44);
  uint64_t v58 = v93;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v93, enum case for Bit.one(_:), v44);
  sub_100E484C4((unint64_t *)&qword_10163B220, 255, (void (*)(uint64_t))&type metadata accessor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v59 = v108;
  int v60 = LOBYTE(v103[0]);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v48 + 8);
  v61(v58, v44);
  if (v59 == v60)
  {
    uint64_t v99 = v61;
    unint64_t v62 = v92;
    BinaryDecoder.init()();
    swift_beginAccess();
    sub_10001CD44(v20 + 22, v20[25]);
    uint64_t v63 = sub_1010E3820();
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    swift_beginAccess();
    uint64_t v65 = v106;
    unint64_t v66 = v107;
    uint64_t v104 = v63;
    uint64_t v105 = AssociatedConformanceWitness;
    sub_10001D958(v103);
    sub_1000361E0(v65, v66);
    BinaryDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v65, v66);
    uint64_t v79 = v20[18];
    unint64_t v80 = v20[19];
    *((_OWORD *)v20 + 9) = xmmword_101347BB0;
    sub_100037A24(v79, v80);
    uint64_t v81 = v104;
    uint64_t v82 = v105;
    uint64_t v83 = sub_10001CD44(v103, v104);
    *((void *)&v109 + 1) = v81;
    uint64_t v110 = *(void *)(v82 + 8);
    uint64_t v111 = *(void *)(v82 + 16);
    uint64_t v84 = sub_10001D958((uint64_t *)&v108);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v81 - 8) + 16))(v84, v83, v81);
    char v112 = 0;
    v102(&v108);
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v62, v91);
    v99(v100, v98);
    sub_10001DAB4((uint64_t)&v108, &qword_10163C638);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v103);
    return sub_10001CFB8(v106, v107);
  }
  sub_100E484C4((unint64_t *)&qword_101639630, 255, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
  uint64_t v77 = v97;
  uint64_t v51 = swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(v89 + 104))(v78, enum case for BinaryDecodingError.insufficientData(_:), v77);
  swift_willThrow();
  v61(v45, v44);
  sub_10001CFB8(v106, v107);
  a4 = v88;
LABEL_19:
  *(void *)&long long v108 = v51;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v53 = v97;
  if (!swift_dynamicCast())
  {
LABEL_26:
    swift_errorRelease();
    sub_1000361E0(a4, a5);
    sub_1000361E0(a4, a5);
    unint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = (char *)swift_slowAlloc();
      *(void *)&long long v108 = v100;
      *(_DWORD *)uint64_t v69 = 136446210;
      uint64_t v99 = (void (*)(char *, uint64_t))(v69 + 4);
      sub_1000361E0(a4, a5);
      uint64_t v70 = v20;
      uint64_t v71 = Data.description.getter();
      unint64_t v73 = v72;
      sub_10001CFB8(a4, a5);
      uint64_t v74 = v71;
      BOOL v20 = v70;
      v103[0] = sub_1008FA0F0(v74, v73, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to decode data %{public}s", v69, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(a4, a5);
      sub_10001CFB8(a4, a5);
    }

    uint64_t v75 = v20[18];
    unint64_t v76 = v20[19];
    *((_OWORD *)v20 + 9) = xmmword_101347BB0;
    sub_100037A24(v75, v76);
    *(void *)&long long v108 = v51;
    LOBYTE(v111) = 10;
    char v112 = 1;
    swift_errorRetain();
    v102(&v108);
    swift_release();
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)&v108, &qword_10163C638);
  }
  uint64_t v54 = v89;
  if ((*(unsigned int (**)(char *, uint64_t))(v89 + 88))(v43, v53) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v53);
    goto LABEL_26;
  }
  swift_errorRelease();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "insufficientData. Keep reading...", v57, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return swift_errorRelease();
}

uint64_t sub_100E3B890(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    sub_10001D010(a1, (uint64_t)v15);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    sub_10001CEB0(v15, v13 + 24);
    *(void *)(v13 + 64) = a2;
    sub_10000588C(&qword_10165FEA0);
    swift_allocObject();
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E3BA4C(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for BinaryEncoder();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v51 = 0;
    memset(v50, 0, sizeof(v50));
    __int16 v52 = 267;
    a1(v50);
    return sub_10001DAB4((uint64_t)v50, &qword_10165FE98);
  }
  uint64_t v14 = Strong;
  uint64_t v46 = a5;
  uint64_t v15 = *(void *)(Strong + 128);
  *(void *)(Strong + 128) = a1;
  *(void *)(Strong + 136) = a2;
  swift_retain();
  sub_1000A1534(v15);
  BinaryEncoder.init()();
  sub_10001CD44(a4, a4[3]);
  uint64_t v16 = 0;
  uint64_t v17 = BinaryEncoder.encode<A>(_:)();
  unint64_t v43 = v19;
  uint64_t v44 = v17;
  __chkstk_darwin(v17);
  *(&v39 - 2) = (uint64_t)v20;
  id v21 = v20;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();

  uint64_t v22 = *(void *)&v50[0];
  if (__OFSUB__(*(void *)&v50[0], 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v45 = v10;
  uint64_t v16 = Data.chunked(into:)();
  if (qword_101637310 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for Logger();
  sub_100010324(v23, (uint64_t)qword_10170F068);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  int v26 = v25;
  unint64_t v27 = v24;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v28 = swift_slowAlloc();
    int v41 = v26;
    uint64_t v29 = v28;
    uint64_t v40 = swift_slowAlloc();
    *(void *)&v50[0] = v40;
    *(_DWORD *)uint64_t v29 = 136315906;
    __int16 v47 = v12;
    swift_bridgeObjectRetain();
    uint64_t v30 = Array.description.getter();
    uint64_t v42 = v9;
    uint64_t v31 = v30;
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v49 = sub_1008FA0F0(v31, v33, (uint64_t *)v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    uint64_t v49 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 22) = 2048;
    swift_beginAccess();
    uint64_t v34 = *(void *)(*(void *)(v14 + 160) + 16);
    swift_release();
    uint64_t v48 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v29 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v48 = sub_1008FA0F0(v35, v37, (uint64_t *)v50);
    uint64_t v9 = v42;
    uint64_t v12 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v41, "Enqueuing %s. MTU %ld. Current queue [%ld] %s", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  unint64_t v38 = sub_1001554FC(v16);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_100442E40((uint64_t)v38);
  swift_endAccess();
  sub_100E3C1A0(v46, (uint64_t)a4);
  sub_10001CFB8(v44, v43);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v12, v9);
}

uint64_t sub_100E3C1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v76 = ((char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v11 = ((char *)&v68 - v10);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = (void *)v3[2];
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v18 = v3 + 20;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v3[20] + 16))
  {
    swift_beginAccess();
    uint64_t v20 = *v18;
    if (*(void *)(*v18 + 16))
    {
      unint64_t v72 = v11;
      uint64_t v74 = v7;
      uint64_t v75 = v6;
      unint64_t v21 = *(void *)(v20 + 40);
      uint64_t v78 = *(void *)(v20 + 32);
      unint64_t v77 = v21;
      sub_1000361E0(v78, v21);
      sub_100A29D94(0, 1);
      swift_endAccess();
      if (qword_101637310 == -1) {
        goto LABEL_5;
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
LABEL_5:
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = sub_100010324(v22, (uint64_t)qword_10170F068);
    uint64_t v24 = v78;
    unint64_t v25 = v77;
    sub_1000361E0(v78, v77);
    swift_retain();
    sub_1000361E0(v24, v25);
    swift_retain();
    uint64_t v73 = v23;
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v70 = a2;
    if (v28)
    {
      uint64_t v29 = a1;
      uint64_t v30 = swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      uint64_t v31 = v78;
      unint64_t v32 = v77;
      uint64_t v33 = Data.hexString.getter();
      v81[0] = sub_1008FA0F0(v33, v34, v84);
      uint64_t v71 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v31, v32);
      sub_10001CFB8(v31, v32);
      *(_WORD *)(v30 + 12) = 2082;
      swift_retain();
      uint64_t v35 = sub_100A6DA6C();
      unint64_t v37 = v36;
      swift_release();
      v81[0] = sub_1008FA0F0(v35, v37, v84);
      uint64_t v3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v39 = v78;
      unint64_t v40 = v77;
      sub_10001CFB8(v78, v77);
      sub_10001CFB8(v39, v40);

      swift_release_n();
      uint64_t v29 = a1;
    }
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(void *)(v41 + 48) = 0;
    *(_WORD *)(v41 + 56) = 267;
    uint64_t v42 = dispatch_group_create();
    dispatch_group_enter(v42);
    uint64_t v69 = v29;
    v84[0] = sub_100A6C94C(v78, v77);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v41;
    *(void *)(v43 + 24) = v42;
    uint64_t v71 = (void *)v41;
    swift_retain();
    uint64_t v44 = v42;
    sub_10000588C(&qword_10163C5E8);
    sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    uint64_t v45 = v76;
    static DispatchTime.now()();
    uint64_t v46 = v72;
    + infix(_:_:)();
    __int16 v47 = *(void (**)(NSObject *, uint64_t))(v74 + 8);
    uint64_t v48 = v75;
    v47(v45, v75);
    uint64_t v49 = v44;
    OS_dispatch_group.wait(timeout:)();
    v47(v46, v48);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        __int16 v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)__int16 v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Timed out waiting for writeFuture", v52, 2u);
        swift_slowDealloc();
      }
    }
    swift_beginAccess();
    sub_10001D074(v41 + 16, (uint64_t)v84, &qword_10163C5F8);
    if (v85)
    {
      unint64_t v76 = v44;
      sub_10006105C((uint64_t)v84, (uint64_t)v83);
      sub_1000610B8((uint64_t)v83, (uint64_t)v81);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136446210;
        uint64_t v56 = sub_101321420();
        uint64_t v79 = sub_1008FA0F0(v56, v57, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v81);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "writeFuture error: %{public}s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v81);
      }

      int v60 = v76;
      uint64_t v65 = (void (*)(uint64_t *))v3[16];
      if (v65)
      {
        sub_100061234();
        uint64_t v66 = swift_allocError();
        sub_1000610B8((uint64_t)v83, v67);
        v81[0] = v66;
        __int16 v82 = 256;
        swift_retain();
        v65(v81);
        sub_1000A1534((uint64_t)v65);

        sub_10001CFB8(v78, v77);
        sub_10001DAB4((uint64_t)v81, &qword_10165FE98);
        sub_100061288((uint64_t)v83);
        return swift_release();
      }
      sub_100061288((uint64_t)v83);
    }
    else
    {
      swift_retain_n();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      int v60 = v49;
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v61 = swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 134218242;
        v83[0] = *(void *)(v3[20] + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 12) = 2080;
        unint64_t v76 = (v61 + 14);
        swift_bridgeObjectRetain();
        uint64_t v62 = Array.description.getter();
        unint64_t v64 = v63;
        swift_bridgeObjectRelease();
        v83[0] = sub_1008FA0F0(v62, v64, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_100E3C1A0(v69, v70);
    }

    sub_10001CFB8(v78, v77);
    return swift_release();
  }
  unint64_t v38 = (void (*)(uint64_t *))v3[16];
  if (v38)
  {
    sub_10001D010(a2, (uint64_t)v84);
    char v85 = 0;
    swift_retain();
    v38(v84);
    sub_1000A1534((uint64_t)v38);
    return sub_10001DAB4((uint64_t)v84, &qword_10165FE98);
  }
  return result;
}

uint64_t sub_100E3CC84()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F068);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Creating new AirPodsLEPairingManager.", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 40);
  int v14 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v15 = *(void *)(*(void *)(*(void *)(v1 + 80)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  type metadata accessor for AirPodsLEPairingManager();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100136920(v12, v13, v14, v15);
  *(void *)(v1 + 216) = v16;
  swift_retain();
  swift_release();
  return v16;
}

uint64_t sub_100E3CED4(uint64_t a1, uint64_t a2)
{
  v2[30] = a1;
  v2[31] = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[32] = v3;
  v2[33] = *(void *)(v3 - 8);
  v2[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  v2[35] = v4;
  v2[36] = *(void *)(v4 - 8);
  v2[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MACAddress();
  v2[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[39] = v6;
  unsigned char v2[40] = *(void *)(v6 + 64);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  return _swift_task_switch(sub_100E3D064, 0, 0);
}

uint64_t sub_100E3D064()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 344) = Strong;
  if (Strong)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 128))
    {
      sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
      sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
      uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100E3D228;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  return result;
}

uint64_t sub_100E3D228(uint64_t a1)
{
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E3D328, 0, 0);
}

uint64_t sub_100E3D328()
{
  uint64_t v1 = *(void *)(v0 + 360);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 64);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 360);
    return _swift_task_switch(sub_100E3D4CC, v2, 0);
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F068);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing StandaloneBeaconService!", v6, 2u);
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100E3D4CC()
{
  sub_100FBE520(v0[31], *(void *)(v0[45] + 128));
  v0[46] = 0;
  v0[47] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return _swift_task_switch(sub_100E3D574, 0, 0);
}

uint64_t sub_100E3D574()
{
  os_log_type_t v27 = v0;
  uint64_t v1 = v0[47];
  if (*(void *)(v1 + 16))
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[41];
    uint64_t v3 = v0[38];
    uint64_t v4 = v0[39];
    uint64_t v5 = v0[31];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F068);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    swift_retain();
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[41];
    uint64_t v12 = v0[38];
    uint64_t v11 = v0[39];
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218242;
      v0[26] = *(void *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v13 + 12) = 2082;
      sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[27] = sub_1008FA0F0(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found %ld beacons matching %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }

    swift_retain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      type metadata accessor for StandaloneBeacon();
      swift_retain();
      uint64_t v21 = Array.description.getter();
      unint64_t v23 = v22;
      swift_release();
      v0[25] = sub_1008FA0F0(v21, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Existing standalone beacons: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n();
    }

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    swift_release();
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[48] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100E3DA88;
    uint64_t v17 = v0[43];
    return unsafeBlocking<A>(_:)(v0 + 49, sub_100E48D40, v17, &type metadata for Bool);
  }
}

uint64_t sub_100E3DA88()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100E3DBA0, 0, 0);
}

uint64_t sub_100E3DBA0()
{
  if (v0[49])
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170DE38);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirPods Pairing in progress. Not pairing.", v4, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  else
  {
    uint64_t v6 = v0[42];
    uint64_t v5 = v0[43];
    uint64_t v7 = v0[39];
    uint64_t v8 = v0[38];
    uint64_t v18 = v0[36];
    uint64_t v9 = v0[34];
    uint64_t v19 = v0[35];
    uint64_t v10 = v0[32];
    uint64_t v17 = v0[33];
    uint64_t v16 = v0[37];
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 16))(v6, v0[31], v8);
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v5;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v12 + v11, v6, v8);
    v0[6] = sub_100E48D60;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015F4AE0;
    uint64_t v13 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[29] = _swiftEmptyArrayStorage;
    sub_100E484C4((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100E3DF44()
{
  uint64_t v12 = v0;
  swift_release();
  swift_release();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F068);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[46];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[28] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    v0[24] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to startStandaloneLEPairing due to %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100E3E1A8@<X0>(char *a1@<X8>)
{
  uint64_t result = QueueSynchronizer.conditionalSync<A>(_:)();
  if (v5)
  {
    char v3 = 1;
  }
  else
  {
    uint64_t result = QueueSynchronizer.conditionalSync<A>(_:)();
    char v3 = v4;
  }
  *a1 = v3;
  return result;
}

void sub_100E3E24C(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = v3;
  int v87 = a3;
  int v88 = a2;
  uint64_t v95 = a1;
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v89 = (char *)v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101659598);
  unint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  __chkstk_darwin(v7);
  uint64_t v90 = (char *)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v85 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v93 = (char *)v85 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v94 = (char *)v85 - v20;
  __chkstk_darwin(v19);
  uint64_t v96 = (char *)v85 - v21;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v25 = (void *)((char *)v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = *(void **)(v4 + 16);
  *unint64_t v25 = v26;
  (*(void (**)(void *, void, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  id v86 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v27 = *(void *)(*(void *)(v4 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  unint64_t v28 = *(void *)(v27 + 112);
  if (v28 >> 60 == 15)
  {
    char v29 = 1;
  }
  else
  {
    uint64_t v30 = *(void *)(v27 + 104);
    sub_1000361E0(v30, *(void *)(v27 + 112));
    BOOL v31 = sub_100DC8590(v30, v28);
    sub_100037A24(v30, v28);
    char v29 = !v31;
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  v98[3] = My;
  v98[4] = sub_100E484C4((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v33 = sub_10001D958(v98);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v33, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v98);
  if ((My & 1) != 0 && (v29 & 1) == 0)
  {
    if (qword_101637310 == -1)
    {
LABEL_8:
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170F068);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Starting AirPods LE pairing using FindMyBluetooth", v37, 2u);
        swift_slowDealloc();
      }

      unint64_t v38 = v96;
      sub_100A3AC74(v96);
      unint64_t v39 = sub_100E0A1A8();
      if (*(void *)(v39 + 16) && (unint64_t v40 = sub_100724804((uint64_t)v38), (v41 & 1) != 0))
      {
        uint64_t v42 = (uint64_t *)(*(void *)(v39 + 56) + 16 * v40);
        uint64_t v43 = *v42;
        unint64_t v91 = v42[1];
        uint64_t v92 = v43;
        sub_1000361E0(v43, v91);
      }
      else
      {
        unint64_t v91 = 0xF000000000000000;
        uint64_t v92 = 0;
      }
      swift_bridgeObjectRelease();
      uint64_t v90 = (char *)type metadata accessor for Transaction();
      uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      uint64_t v56 = v94;
      v55(v94, v95, v9);
      unint64_t v57 = v93;
      v55(v93, (uint64_t)v96, v9);
      uint64_t v58 = *(unsigned __int8 *)(v10 + 80);
      uint64_t v59 = (v58 + 24) & ~v58;
      uint64_t v60 = (v11 + v58 + v59) & ~v58;
      unint64_t v61 = (v11 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = v4;
      uint64_t v63 = v9;
      unint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
      v64(v62 + v59, v56, v63);
      v64(v62 + v60, v57, v63);
      uint64_t v65 = (uint64_t *)(v62 + v61);
      unint64_t v67 = v91;
      uint64_t v66 = v92;
      *uint64_t v65 = v92;
      v65[1] = v67;
      swift_retain();
      sub_100037A38(v66, v67);
      static Transaction.asyncTask(name:block:)();
      swift_release();
      sub_100037A24(v66, v67);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v96, v63);
      return;
    }
LABEL_27:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v44 = sub_100E3CC84();
  if (v44)
  {
    uint64_t v45 = (char *)v44;
    sub_100A3AC74(v16);
    sub_100A3AC74(v13);
    unint64_t v46 = sub_100E0A1A8();
    uint64_t v47 = *(void *)(v46 + 16);
    v85[1] = v4;
    uint64_t v96 = v45;
    uint64_t v48 = v10;
    if (v47 && (unint64_t v49 = sub_100724804((uint64_t)v13), (v50 & 1) != 0))
    {
      uint64_t v51 = v9;
      __int16 v52 = (uint64_t *)(*(void *)(v46 + 56) + 16 * v49);
      uint64_t v54 = *v52;
      unint64_t v53 = v52[1];
      sub_1000361E0(*v52, v53);
    }
    else
    {
      uint64_t v51 = v9;
      uint64_t v54 = 0;
      unint64_t v53 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v69 = v51;
    v68((char *)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v51);
    uint64_t v70 = sub_1001371F8();
    sub_100037A24(v54, v53);
    v68(v16, v51);
    v98[0] = v70;
    uint64_t v71 = v86;
    id v97 = v86;
    uint64_t v72 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v73 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v89, 1, 1, v72);
    id v74 = v71;
    sub_10000588C(&qword_101648908);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101648910, &qword_101648908);
    sub_10027B124();
    uint64_t v75 = v90;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v73, &qword_10163C6C8);

    swift_release();
    uint64_t v76 = swift_allocObject();
    swift_weakInit();
    unint64_t v77 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v94, v95, v69);
    unint64_t v78 = (*(unsigned __int8 *)(v48 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = v76;
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v79 + v78, v77, v69);
    sub_100062734(&qword_1016595B8, &qword_101659598);
    uint64_t v80 = v92;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v75, v80);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    sub_100010324(v81, (uint64_t)qword_10170F068);
    __int16 v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Unable to create pairing manager to start LE pairing!", v84, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100E3EC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[26] = a4;
  v5[27] = a5;
  unsigned char v5[24] = a2;
  v5[25] = a3;
  v5[23] = a1;
  return _swift_task_switch(sub_100E3ECA0, 0, 0);
}

uint64_t sub_100E3ECA0()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E3ED60;
  uint64_t v2 = *(void *)(v0 + 184);
  return unsafeBlocking<A>(_:)(v1, sub_100E483C4, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100E3ED60()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100E3EE78, 0, 0);
}

uint64_t sub_100E3EE78()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639300 + dword_101639300);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E3EFB4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100E3EFB4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E3F0B4, 0, 0);
}

uint64_t sub_100E3F0B4()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[30])
  {
    uint64_t v2 = v0[23];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    char v3 = *(unsigned char *)(v2 + 72);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[31] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100E3F488;
    uint64_t v5 = v0[26];
    uint64_t v6 = v0[27];
    uint64_t v8 = v0[24];
    uint64_t v7 = v0[25];
    return sub_10003AA54(v8, v7, v5, v6, v3, 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v10 = v0 + 22;
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F068);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to get AirPodsLEPairingService", v14, 2u);
    swift_slowDealloc();
  }

  sub_10001CEC8();
  uint64_t v15 = swift_allocError();
  *uint64_t v16 = 0xD000000000000017;
  v16[1] = 0x8000000101418D40;
  swift_willThrow();
  v0[34] = v15;
  v0[19] = v15;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    if (*v10 == 0x800000000000000ELL)
    {
      swift_errorRelease();
      if (qword_101637310 != -1) {
        swift_once();
      }
      sub_100010324(v11, (uint64_t)qword_10170F068);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Existing pairing session in progress!", v19, 2u);
        swift_slowDealloc();
      }

      swift_errorRelease();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
    sub_100060090(*v10);
  }
  swift_errorRelease();
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc();
  v0[35] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100E3F8F4;
  uint64_t v22 = v0[23];
  return unsafeBlocking<A>(_:)(v21, sub_100E48430, v22, (char *)&type metadata for () + 8);
}

uint64_t sub_100E3F488()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100E3FCE4;
  }
  else {
    uint64_t v2 = sub_100E3F59C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100E3F59C()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100E3F65C;
  uint64_t v2 = *(void *)(v0 + 184);
  return unsafeBlocking<A>(_:)(v1, sub_100E48448, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100E3F65C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100E3F774, 0, 0);
}

uint64_t sub_100E3F774()
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F068);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Pairing has been completed for all serial numbers.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 184);

  uint64_t v6 = *(void **)(v5 + 64);
  char v7 = *(unsigned char *)(*(void *)(*(void *)(v5 + 80)
                            + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
  *(void *)(v0 + 120) = v6;
  *(unsigned char *)(v0 + 128) = v7;
  swift_retain();
  id v8 = v6;
  PassthroughSubject.send(_:)();
  swift_release();
  swift_release();

  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100E3F8F4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100E3FA0C, 0, 0);
}

uint64_t sub_100E3FA0C()
{
  uint64_t v13 = v0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F068);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 160) = sub_1008FA0F0(0xD00000000000003ELL, 0x8000000101418D60, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 168) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = *(void *)(v0 + 184);
  id v8 = *(void **)(v7 + 64);
  LOBYTE(v7) = *(unsigned char *)(*(void *)(*(void *)(v7 + 80)
                                    + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                        + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
  *(void *)(v0 + 136) = v8;
  *(unsigned char *)(v0 + 144) = v7;
  swift_retain();
  id v9 = v8;
  PassthroughSubject.send(_:)();
  swift_release();
  swift_errorRelease();

  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100E3FCE4()
{
  swift_release();
  uint64_t v1 = v0[32];
  v0[19] = v1;
  uint64_t v2 = v0 + 22;
  v0[34] = v1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    if (*v2 == 0x800000000000000ELL)
    {
      swift_errorRelease();
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100010324(v3, (uint64_t)qword_10170F068);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Existing pairing session in progress!", v6, 2u);
        swift_slowDealloc();
      }

      swift_errorRelease();
      uint64_t v7 = (uint64_t (*)(void))v0[1];
      return v7();
    }
    sub_100060090(*v2);
  }
  swift_errorRelease();
  swift_retain();
  id v9 = (void *)swift_task_alloc();
  v0[35] = v9;
  *id v9 = v0;
  v9[1] = sub_100E3F8F4;
  uint64_t v10 = v0[23];
  return unsafeBlocking<A>(_:)(v9, sub_100E48430, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_100E3FF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v9 = (void *)result;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170F068);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      uint64_t v21 = 1752392040;
      uint64_t v22 = (void *)v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      v20[1] = v13 + 14;
      sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v21 = sub_1008FA0F0(v15, v16, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "LE Pairing completed for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    char v18 = *(unsigned char *)(*(void *)(v9[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                   + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
    uint64_t v22 = (void *)v9[8];
    uint64_t v17 = v22;
    char v23 = v18;
    swift_retain();
    id v19 = v17;
    PassthroughSubject.send(_:)();

    swift_release();
    v9[27] = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100E4026C(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v63 = a4;
  uint64_t v57 = a3;
  int v60 = a2;
  uint64_t v66 = a1;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v62 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10165FE78);
  __chkstk_darwin(v8 - 8);
  uint64_t v56 = (uint64_t *)((char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v61 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v58 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v17 - 8);
  id v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v64 = (uint64_t)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t **)((char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = *(void **)(v5 + 16);
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if (v27)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v65 = sub_100010324(v29, (uint64_t)qword_10170F068);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting LE pairing", v32, 2u);
    swift_slowDealloc();
  }

  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v68 & 1) != 0 || (QueueSynchronizer.conditionalSync<A>(_:)(), (v67))
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    sub_100010324(v29, (uint64_t)qword_10170DE38);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v33, v34)) {
      goto LABEL_12;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    os_log_type_t v36 = "LE Pairing in progress. Not pairing.";
    goto LABEL_11;
  }
  sub_100AE800C((uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_10001DAB4((uint64_t)v19, &qword_10163BB20);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34)) {
      goto LABEL_12;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    os_log_type_t v36 = "Missing beacon group to start LE pairing!";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
    swift_slowDealloc();
LABEL_12:

    return;
  }
  uint64_t v37 = (uint64_t)v19;
  uint64_t v38 = v64;
  sub_100E4C130(v37, v64, type metadata accessor for OwnedBeaconGroup);
  unint64_t v39 = v63;
  unint64_t v40 = v63 >> 60;
  if (v63 >> 60 == 15)
  {
    uint64_t v44 = sub_1004D7118();
    uint64_t v45 = v56;
    sub_10115B750(v44, v56);
    swift_bridgeObjectRelease();
    uint64_t v46 = sub_10000588C(&qword_10165FE80);
    int v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46);
    uint64_t v43 = (uint64_t)v61;
    uint64_t v42 = v62;
    if (v47 == 1)
    {
      sub_10001DAB4((uint64_t)v45, &qword_10165FE78);
      uint64_t v48 = 1;
      uint64_t v49 = (uint64_t)v58;
    }
    else
    {
      sub_10001CFB8(*v45, v45[1]);
      char v50 = (char *)v45 + *(int *)(v46 + 48);
      uint64_t v49 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v58, v50, v6);
      uint64_t v48 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v49, v48, 1, v6);
    sub_10001D608(v49, (uint64_t)v16, (uint64_t *)&unk_1016477E0);
  }
  else
  {
    uint64_t v41 = v57;
    sub_1000361E0(v57, v63);
    sub_1004D1A54(v41, v39, (uint64_t)v16);
    sub_100037A24(v41, v39);
    uint64_t v43 = (uint64_t)v61;
    uint64_t v42 = v62;
  }
  sub_10001D074((uint64_t)v16, v43, (uint64_t *)&unk_1016477E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v6) == 1)
  {
    sub_10001DAB4(v43, (uint64_t *)&unk_1016477E0);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Invalid state. No MAC address to start LE pairing", v53, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    BOOL v54 = v40 < 0xF;
    uint64_t v55 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v59, v43, v6);
    sub_100E3E24C(v55, v54, v60 & 1);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v55, v6);
  }
  sub_10001DAB4((uint64_t)v16, (uint64_t *)&unk_1016477E0);
  sub_100E4C634(v38, type metadata accessor for OwnedBeaconGroup);
}

void sub_100E40AD8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (void *)v2[2];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F068);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "pairingCompleteAnalyticsEvent", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = v2[29];
  if (v15)
  {
    uint64_t v16 = *(void *)(v2[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v15;
    v17[3] = v16;
    v17[4] = v4;
    swift_retain_n();
    swift_retain_n();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    type metadata accessor for AnalyticsEvent(0);
    uint64_t v18 = (char *)swift_allocObject();
    swift_defaultActor_initialize();
    *((void *)v18 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    id v19 = &v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v20 = type metadata accessor for DispatchTime();
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
    v21(v19, 1, 1, v20);
    v21(&v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v20);
    *((void *)v18 + 15) = 0xD00000000000002CLL;
    *((void *)v18 + 16) = 0x80000001013F40E0;
    v2[29] = v18;
    swift_retain();
    swift_release();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v18;
    *(unsigned char *)(v22 + 24) = a1 & 1;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No analytics event!", v25, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100E40F40(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100E40F60, 0, 0);
}

uint64_t sub_100E40F60()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return _swift_task_switch(sub_100E40FCC, v1, 0);
}

uint64_t sub_100E40FCC()
{
  sub_1011B64B0(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  return _swift_task_switch(sub_100153DA4, 0, 0);
}

void sub_100E41064(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (void *)v2[2];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F068);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = v4;
    uint64_t v26 = a1;
    uint64_t v27 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v26 = sub_1008FA0F0(v16, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "pairingFailureAnalyticsEvent %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v25;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v18 = v2[29];
  if (v18)
  {
    uint64_t v19 = *(void *)(v2[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction();
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v18;
    uint64_t v20[3] = v19;
    v20[4] = a1;
    void v20[5] = v4;
    swift_retain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    v2[29] = 0;
    swift_release();
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No analytics event!", v23, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100E41470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100E41494, 0, 0);
}

uint64_t sub_100E41494()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  swift_errorRetain();
  return _swift_task_switch(sub_100E41508, v1, 0);
}

uint64_t sub_100E41508()
{
  sub_1011B64F0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_errorRelease();
  swift_release();
  return _swift_task_switch(sub_100154A10, 0, 0);
}

uint64_t sub_100E415AC()
{
  return sub_100E0A8F0();
}

void sub_100E415D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = Data.subdata(in:)();
  unint64_t v7 = v6;
  uint64_t v27 = v5;
  unint64_t v28 = v6;
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v15 = Data.trimmed.getter();
    unint64_t v17 = v16;
    switch(v4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v3), v3))
        {
          __break(1u);
LABEL_17:
          __break(1u);
        }
        else
        {
          uint64_t v18 = HIDWORD(v3) - (int)v3;
LABEL_12:
          if (v18 >= 20)
          {
            uint64_t v21 = Data.subdata(in:)();
            unint64_t v23 = v22;
            uint64_t v27 = v21;
            unint64_t v28 = v22;
            sub_1000361E0(v15, v17);
            unint64_t v24 = DataProtocol.intValue.getter();
            if ((v24 & 0x8000000000000000) == 0)
            {
              char v25 = v24;
              if (v24 < 0x100)
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v27 = *a2;
                *a2 = 0x8000000000000000;
                sub_1001719E4(v25, v15, v17, isUniquelyReferenced_nonNull_native);
                *a2 = v27;
                swift_bridgeObjectRelease();
                sub_10001CFB8(v15, v17);
                sub_10001CFB8(v5, v7);
                sub_10001CFB8(v15, v17);
                sub_10001CFB8(v21, v23);
                return;
              }
            }
LABEL_19:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x100E419F4);
          }
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      case 2uLL:
        uint64_t v20 = *(void *)(v3 + 16);
        uint64_t v19 = *(void *)(v3 + 24);
        uint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_12;
        }
        goto LABEL_17;
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v18 = BYTE6(v4);
        goto LABEL_12;
    }
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F068);
  sub_1000361E0(v5, v7);
  sub_1000361E0(v5, v7);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558275;
    uint64_t v29 = 1752392040;
    uint64_t v27 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v13 = Data.hexString.getter();
    uint64_t v29 = sub_1008FA0F0(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v5, v7);
    sub_10001CFB8(v5, v7);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001CFB8(v5, v7);
  }
  else
  {
    sub_10001CFB8(v5, v7);
    sub_10001CFB8(v5, v7);
    sub_10001CFB8(v5, v7);
  }
}

void sub_100E41A04(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_101639C18);
  __chkstk_darwin(v5 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  uint64_t v15 = Data.subdata(in:)();
  unint64_t v17 = v16;
  v46[0] = v15;
  v46[1] = v16;
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v25 = Data.trimmed.getter();
    unint64_t v27 = v26;
    switch(v14 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v13), v13))
        {
          __break(1u);
LABEL_20:
          __break(1u);
        }
        else
        {
          uint64_t v28 = HIDWORD(v13) - (int)v13;
LABEL_12:
          if (v28 >= 20)
          {
            unint64_t v39 = v27;
            uint64_t v40 = v25;
            uint64_t v41 = a2;
            uint64_t v42 = v2;
            uint64_t v31 = Data.subdata(in:)();
            unint64_t v33 = v32;
            sub_1000361E0(v31, v32);
            MACAddress.init(data:type:)();
            sub_10001D074((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_1016477E0);
            uint64_t v34 = type metadata accessor for MACAddress();
            uint64_t v35 = *(void *)(v34 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1, v34) == 1)
            {
              sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016477E0);
            }
            else
            {
              char v36 = MACAddress.isNull.getter();
              (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v34);
              if ((v36 & 1) == 0)
              {
                uint64_t v37 = v43;
                sub_10001D074((uint64_t)v12, v43, (uint64_t *)&unk_1016477E0);
                goto LABEL_18;
              }
            }
            uint64_t v37 = v43;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v43, 1, 1, v34);
LABEL_18:
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v37, 0, 1, v45);
            sub_10015D3F8(v37, v40, v39);
            sub_10001CFB8(v31, v33);
            sub_10001CFB8(v15, v17);
            sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_1016477E0);
            return;
          }
        }
LABEL_21:
        __break(1u);
        JUMPOUT(0x100E41F4CLL);
      case 2uLL:
        uint64_t v30 = *(void *)(v13 + 16);
        uint64_t v29 = *(void *)(v13 + 24);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_12;
        }
        goto LABEL_20;
      case 3uLL:
        goto LABEL_21;
      default:
        uint64_t v28 = BYTE6(v14);
        goto LABEL_12;
    }
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170F068);
  sub_1000361E0(v15, v17);
  sub_1000361E0(v15, v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v42 = v2;
    v46[0] = v22;
    *(_DWORD *)uint64_t v21 = 141558275;
    uint64_t v47 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v23 = Data.hexString.getter();
    uint64_t v47 = sub_1008FA0F0(v23, v24, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v15, v17);
    sub_10001CFB8(v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001CFB8(v15, v17);
  }
  else
  {
    sub_10001CFB8(v15, v17);
    sub_10001CFB8(v15, v17);
    sub_10001CFB8(v15, v17);
  }
}

void sub_100E41F5C()
{
  uint64_t v0 = sub_10000588C(&qword_101639C18);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = Data.subdata(in:)();
  unint64_t v5 = v4;
  v19[0] = v3;
  v19[1] = v4;
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F068);
    sub_1000361E0(v3, v5);
    sub_1000361E0(v3, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)uint64_t v9 = 141558275;
      uint64_t v20 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v10 = Data.hexString.getter();
      uint64_t v20 = sub_1008FA0F0(v10, v11, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v3, v5);
    }
    else
    {
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
    }
  }
  else
  {
    uint64_t v12 = Data.trimmed.getter();
    unint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v2, 1, 1, v15);
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_1016477E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v2, 0, 1, v16);
    sub_1000361E0(v12, v14);
    sub_10015D3F8((uint64_t)v2, v12, v14);
    sub_10001CFB8(v3, v5);
    sub_10001CFB8(v12, v14);
  }
}

uint64_t sub_100E422D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v179 = a2;
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  unint64_t v177 = (char *)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v172 = (uint64_t)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v174 = (uint64_t)&v171 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v181 = v10;
  uint64_t v182 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v176 = (char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v178 = (char *)&v171 - v14;
  uint64_t v15 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v175 = (uint64_t)&v171 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v173 = (uint64_t)&v171 - v26;
  __chkstk_darwin(v25);
  uint64_t v180 = (uint64_t)&v171 - v27;
  uint64_t v29 = *a1;
  unint64_t v28 = a1[1];
  unint64_t v183 = sub_100ACD578(v29, v28);
  swift_bridgeObjectRetain();
  sub_100E092D8(&v183);
  if (v2) {
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  if (v183[2])
  {
    sub_100E4C5CC((uint64_t)v183 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)), (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v20, &qword_10163B9F0);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170F068);
    sub_1000361E0(v29, v28);
    sub_1000361E0(v29, v28);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v171 = 0;
      uint64_t v33 = swift_slowAlloc();
      unint64_t v183 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 141558275;
      uint64_t v185 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_1000361E0(v29, v28);
      static String.Encoding.utf8.getter();
      uint64_t v34 = String.init(data:encoding:)();
      if (!v35) {
        uint64_t v34 = Data.hexString.getter();
      }
      uint64_t v36 = v34;
      unint64_t v37 = v35;
      sub_10001CFB8(v29, v28);
      uint64_t v185 = sub_1008FA0F0(v36, v37, (uint64_t *)&v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v29, v28);
      sub_10001CFB8(v29, v28);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing beacon record for %{private,mask.hash}s.", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v29, v28);
      sub_10001CFB8(v29, v28);
    }
    unint64_t v61 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    uint64_t v62 = v179;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v182 + 56))((char *)v179 + v61[7], 1, 1, v181);
    *(_OWORD *)uint64_t v62 = xmmword_101347BB0;
    *((_OWORD *)v62 + 1) = xmmword_101347BB0;
    v62[4] = v29;
    v62[5] = v28;
    unint64_t v63 = (uint64_t *)((char *)v62 + v61[8]);
    *unint64_t v63 = 0;
    v63[1] = 0;
    uint64_t v64 = (uint64_t *)((char *)v62 + v61[9]);
    *uint64_t v64 = 0;
    v64[1] = 0;
    (*(void (**)(uint64_t *, void, uint64_t, int *))(*((void *)v61 - 1) + 56))(v62, 0, 1, v61);
    return sub_1000361E0(v29, v28);
  }
  uint64_t v38 = v180;
  sub_100E4C130((uint64_t)v20, v180, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100E4C5CC(v38 + *(int *)(v21 + 24), (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v66 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    char v67 = &v17[v66[12]];
    uint64_t v69 = *(void **)v67;
    uint64_t v68 = *((void *)v67 + 1);
    uint64_t v70 = &v17[v66[16]];
    uint64_t v71 = *(void **)v70;
    uint64_t v72 = *((void *)v70 + 1);
    uint64_t v73 = &v17[v66[20]];
    uint64_t v75 = *(void **)v73;
    uint64_t v74 = *((void *)v73 + 1);
    uint64_t v76 = v176;
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v176, v17, v181);
    unint64_t v183 = v71;
    uint64_t v184 = v72;
    sub_1000336D4();
    uint64_t v77 = Data.init<A>(hexString:)();
    if (v78 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v93 = v77;
      unint64_t v94 = v78;
      unint64_t v183 = v69;
      uint64_t v184 = v68;
      uint64_t v95 = Data.init<A>(hexString:)();
      if (v96 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v101 = v95;
        unint64_t v102 = v96;
        unint64_t v183 = v75;
        uint64_t v184 = v74;
        uint64_t v103 = Data.init<A>(hexString:)();
        if (v104 >> 60 != 15)
        {
          uint64_t v125 = v104;
          uint64_t v178 = (char *)v103;
          uint64_t v171 = 0;
          uint64_t v127 = v181;
          uint64_t v126 = v182;
          uint64_t v128 = v172;
          (*(void (**)(uint64_t, char *, uint64_t))(v182 + 16))(v172, v76, v181);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v128, 0, 1, v127);
          uint64_t v129 = sub_100D1B318();
          if (v130 >> 60 == 15)
          {
            unint64_t v177 = 0;
            uint64_t v175 = 0;
          }
          else
          {
            uint64_t v145 = v129;
            unint64_t v146 = v130;
            uint64_t v147 = sub_1002AA5D4(v129, v130);
            unint64_t v149 = v148;
            sub_100037A24(v145, v146);
            unint64_t v177 = (char *)Data.hexString.getter();
            uint64_t v175 = v150;
            uint64_t v151 = v147;
            uint64_t v76 = v176;
            sub_10001CFB8(v151, v149);
          }
          uint64_t v152 = sub_100D1B318();
          if (v153 >> 60 == 15)
          {
            uint64_t v154 = 0;
            uint64_t v155 = 0;
          }
          else
          {
            unint64_t v156 = v153;
            uint64_t v157 = v152;
            switch(v153 >> 62)
            {
              case 1uLL:
                LODWORD(v158) = HIDWORD(v152) - v152;
                if (__OFSUB__(HIDWORD(v152), v152)) {
                  goto LABEL_70;
                }
                uint64_t v158 = (int)v158;
LABEL_63:
                if (v158 < -1) {
                  goto LABEL_69;
                }
LABEL_64:
                uint64_t v161 = Data.subdata(in:)();
                unint64_t v163 = v162;
                sub_100037A24(v157, v156);
                uint64_t v154 = Data.hexString.getter();
                uint64_t v155 = v164;
                sub_10001CFB8(v161, v163);
                uint64_t v76 = v176;
                break;
              case 2uLL:
                uint64_t v160 = *(void *)(v152 + 16);
                uint64_t v159 = *(void *)(v152 + 24);
                BOOL v134 = __OFSUB__(v159, v160);
                uint64_t v158 = v159 - v160;
                if (!v134) {
                  goto LABEL_63;
                }
                goto LABEL_71;
              default:
                goto LABEL_64;
            }
          }
          (*(void (**)(char *, uint64_t))(v182 + 8))(v76, v181);
          sub_100E4C634(v180, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v165 = v178;
          v166 = v179;
          *uint64_t v179 = v93;
          v166[1] = v94;
          v166[2] = v101;
          v166[3] = v102;
          v166[4] = (uint64_t)v165;
          v166[5] = v125;
          unint64_t v167 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
          sub_10001D608(v172, (uint64_t)v166 + v167[7], &qword_101638CF0);
          uint64_t v168 = (uint64_t *)((char *)v166 + v167[8]);
          uint64_t v169 = v175;
          *uint64_t v168 = v177;
          v168[1] = v169;
          char v170 = (uint64_t *)((char *)v166 + v167[9]);
          *char v170 = v154;
          v170[1] = v155;
          return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v167 - 1) + 56))(v166, 0, 1, v167);
        }
        sub_100037A24(v101, v102);
      }
      sub_100037A24(v93, v94);
    }
    (*(void (**)(char *, uint64_t))(v182 + 8))(v76, v181);
    sub_100E4C634(v180, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v105 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v179, 1, 1, v105);
  }
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v171 = 0;
    uint64_t v40 = (int *)sub_10000588C(&qword_1016555E0);
    uint64_t v41 = &v17[v40[12]];
    uint64_t v42 = *(void **)v41;
    uint64_t v43 = *((void *)v41 + 1);
    uint64_t v44 = &v17[v40[16]];
    uint64_t v46 = *(void **)v44;
    uint64_t v45 = *((void *)v44 + 1);
    uint64_t v47 = &v17[v40[20]];
    uint64_t v48 = *(void **)v47;
    uint64_t v49 = *((void *)v47 + 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v178, v17, v181);
    unint64_t v183 = v48;
    uint64_t v184 = v49;
    sub_1000336D4();
    uint64_t v50 = Data.init<A>(hexString:)();
    if (v51 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100010324(v52, (uint64_t)qword_10170F068);
      uint64_t v53 = v180;
      uint64_t v54 = v173;
      sub_100E4C5CC(v180, v173, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        unint64_t v183 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 141558275;
        uint64_t v185 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2081;
        uint64_t v58 = sub_101110C7C();
        uint64_t v185 = sub_1008FA0F0(v58, v59, (uint64_t *)&v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100E4C634(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid serialNumber for %{private,mask.hash}s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v182 + 8))(v178, v181);
        uint64_t v60 = v180;
      }
      else
      {

        sub_100E4C634(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v178, v181);
        uint64_t v60 = v53;
      }
      sub_100E4C634(v60, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v99 = v179;
      uint64_t v100 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
    }
    uint64_t v87 = v50;
    uint64_t v88 = v51;
    if (v45)
    {
      unint64_t v183 = v46;
      uint64_t v184 = v45;
      uint64_t v89 = Data.init<A>(hexString:)();
      uint64_t v176 = v90;
      unint64_t v177 = (char *)v89;
      uint64_t v91 = v180;
      if (v43)
      {
LABEL_29:
        unint64_t v183 = v42;
        uint64_t v184 = v43;
        uint64_t v175 = Data.init<A>(hexString:)();
        uint64_t v173 = v92;
LABEL_42:
        uint64_t v106 = v181;
        uint64_t v107 = v182;
        uint64_t v108 = v174;
        (*(void (**)(uint64_t, char *, uint64_t))(v182 + 16))(v174, v178, v181);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v108, 0, 1, v106);
        uint64_t v109 = sub_100D1B318();
        if (v110 >> 60 == 15)
        {
          uint64_t v111 = 0;
          uint64_t v112 = 0;
        }
        else
        {
          uint64_t v113 = v109;
          unint64_t v114 = v110;
          uint64_t v115 = sub_1002AA5D4(v109, v110);
          unint64_t v117 = v116;
          sub_100037A24(v113, v114);
          uint64_t v111 = Data.hexString.getter();
          uint64_t v112 = v118;
          uint64_t v91 = v180;
          sub_10001CFB8(v115, v117);
        }
        uint64_t v119 = sub_100D1B318();
        if (v120 >> 60 == 15)
        {
          uint64_t v121 = 0;
          uint64_t v122 = 0;
LABEL_55:
          (*(void (**)(char *, uint64_t))(v182 + 8))(v178, v181);
          sub_100E4C634(v91, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v139 = v179;
          uint64_t v140 = v176;
          *uint64_t v179 = (uint64_t)v177;
          v139[1] = (uint64_t)v140;
          uint64_t v141 = v173;
          v139[2] = v175;
          uint64_t v139[3] = v141;
          v139[4] = v87;
          v139[5] = v88;
          uint64_t v142 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
          sub_10001D608(v174, (uint64_t)v139 + v142[7], &qword_101638CF0);
          uint64_t v143 = (uint64_t *)((char *)v139 + v142[8]);
          *uint64_t v143 = v111;
          v143[1] = v112;
          unint64_t v144 = (uint64_t *)((char *)v139 + v142[9]);
          uint64_t *v144 = v121;
          v144[1] = v122;
          return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v142 - 1) + 56))(v139, 0, 1, v142);
        }
        unint64_t v123 = v120;
        uint64_t v124 = v119;
        switch(v120 >> 62)
        {
          case 1uLL:
            LODWORD(v131) = HIDWORD(v119) - v119;
            if (__OFSUB__(HIDWORD(v119), v119)) {
              goto LABEL_67;
            }
            uint64_t v131 = (int)v131;
LABEL_53:
            if (v131 >= -1)
            {
LABEL_54:
              uint64_t v135 = Data.subdata(in:)();
              unint64_t v137 = v136;
              sub_100037A24(v124, v123);
              uint64_t v121 = Data.hexString.getter();
              uint64_t v122 = v138;
              sub_10001CFB8(v135, v137);
              uint64_t v91 = v180;
              goto LABEL_55;
            }
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            break;
          case 2uLL:
            uint64_t v133 = *(void *)(v119 + 16);
            uint64_t v132 = *(void *)(v119 + 24);
            BOOL v134 = __OFSUB__(v132, v133);
            uint64_t v131 = v132 - v133;
            if (!v134) {
              goto LABEL_53;
            }
            goto LABEL_68;
          default:
            goto LABEL_54;
        }
LABEL_72:
        swift_release();
        __break(1u);
        JUMPOUT(0x100E435A0);
      }
    }
    else
    {
      uint64_t v176 = (char *)0xF000000000000000;
      unint64_t v177 = 0;
      uint64_t v91 = v180;
      if (v43) {
        goto LABEL_29;
      }
    }
    uint64_t v175 = 0;
    uint64_t v173 = 0xF000000000000000;
    goto LABEL_42;
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v79 = type metadata accessor for Logger();
  sub_100010324(v79, (uint64_t)qword_10170F068);
  uint64_t v80 = v175;
  sub_100E4C5CC(v38, v175, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = swift_slowAlloc();
    uint64_t v182 = swift_slowAlloc();
    unint64_t v183 = (void *)v182;
    *(_DWORD *)uint64_t v83 = 141558275;
    uint64_t v185 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v83 + 12) = 2081;
    uint64_t v171 = 0;
    uint64_t v84 = sub_101110C7C();
    uint64_t v185 = sub_1008FA0F0(v84, v85, (uint64_t *)&v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100E4C634(v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Invalid beacon %{private,mask.hash}s", (uint8_t *)v83, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v86 = v180;
  }
  else
  {

    sub_100E4C634(v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v86 = v38;
  }
  sub_100E4C634(v86, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  id v97 = v179;
  uint64_t v98 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v97, 1, 1, v98);
  return sub_100E4C634((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
}

uint64_t sub_100E435C0()
{
  return sub_100E4ABB8((void (*)(void))&_swift_errorRelease, 48);
}

uint64_t sub_100E435DC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_100E41494, 0, 0);
}

Swift::Int sub_100E43690(void **a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v287 = (char *)&v266 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v266 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v266 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v266 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v273 = (char *)&v266 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v272 = (char *)&v266 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v280 = (uint64_t)&v266 - v19;
  __chkstk_darwin(v18);
  uint64_t v278 = (uint64_t)&v266 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v266 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23);
  v310 = (char *)&v266 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v277 = (char *)&v266 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v283 = (char *)&v266 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v268 = (uint64_t)&v266 - v33;
  __chkstk_darwin(v32);
  uint64_t v271 = (uint64_t)&v266 - v34;
  uint64_t v292 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v285 = *(void *)(v292 - 8);
  uint64_t v35 = __chkstk_darwin(v292);
  uint64_t v276 = (uint64_t)&v266 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v305 = (uint64_t)&v266 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v313 = (uint64_t)&v266 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v309 = (uint64_t *)((char *)&v266 - v42);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v286 = (uint64_t)&v266 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v282 = (uint64_t)&v266 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (uint64_t *)((char *)&v266 - v48);
  __chkstk_darwin(v47);
  v270 = (uint64_t *)((char *)&v266 - v50);
  v311 = a1;
  Swift::Int v51 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if (v51 < 0) {
      goto LABEL_229;
    }
    if (v51) {
      return sub_100E457A4(0, v51, 1, v311);
    }
    return result;
  }
  if (v51 >= 0) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = v51 + 1;
  }
  if (v51 < -1)
  {
LABEL_238:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100E45764);
  }
  unint64_t v291 = v7;
  unint64_t v297 = v13;
  Swift::Int v274 = result;
  if (v51 < 2)
  {
    uint64_t v57 = _swiftEmptyArrayStorage;
    v284 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80));
    if (v51 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      unint64_t v59 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_194;
    }
    unint64_t v267 = v49;
    uint64_t v269 = _swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v267 = v49;
    uint64_t v54 = v53 >> 1;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v55 + 16) = v54;
    unint64_t v56 = (*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80);
    uint64_t v269 = (void *)v55;
    v284 = (char *)(v55 + v56);
  }
  Swift::Int v58 = 0;
  uint64_t v303 = (void (**)(uint64_t, uint64_t))(v22 + 8);
  v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  unint64_t v293 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v288 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  unint64_t v59 = (char *)_swiftEmptyArrayStorage;
  long long v290 = xmmword_101342130;
  unint64_t v295 = v10;
  uint64_t v298 = v21;
  v299 = v25;
LABEL_16:
  Swift::Int v61 = v58;
  Swift::Int v62 = v58 + 1;
  uint64_t v279 = v59;
  Swift::Int v281 = v58;
  if (v58 + 1 >= v51)
  {
    uint64_t v130 = (uint64_t)v297;
    Swift::Int v131 = v274;
    goto LABEL_82;
  }
  Swift::Int v63 = v51;
  uint64_t v64 = (char *)*v311;
  Swift::Int v65 = *(void *)(v285 + 72);
  Swift::Int v304 = v58 + 1;
  uint64_t v66 = v270;
  Swift::Int v67 = v58;
  sub_100E4C5CC((uint64_t)&v64[v65 * v62], (uint64_t)v270, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  __n128 v289 = v64;
  Swift::Int v308 = v65;
  uint64_t v68 = (uint64_t)&v64[v65 * v67];
  uint64_t v69 = v267;
  sub_100E4C5CC(v68, (uint64_t)v267, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v71 = v294;
  sub_100B23648(v66, v271);
  if (v71)
  {
    __break(1u);
    goto LABEL_238;
  }
  uint64_t v73 = v268;
  sub_100B23648(v69, v268);
  uint64_t v294 = 0;
  Swift::Int v51 = v63;
  uint64_t v74 = v271;
  uint64_t v307 = Date.compare(_:)();
  uint64_t v75 = *v303;
  (*v303)(v73, v21);
  unint64_t v306 = v75;
  v75(v74, v21);
  sub_100E4C634((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100E4C634((uint64_t)v270, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  Swift::Int v61 = v281;
  Swift::Int v62 = v281 + 2;
  if (v281 + 2 >= v51) {
    goto LABEL_68;
  }
  uint64_t v302 = v308 * v304;
  uint64_t v76 = v289;
  Swift::Int v301 = v308 * v62;
  while (2)
  {
    Swift::Int v304 = v62;
    uint64_t v77 = v282;
    sub_100E4C5CC((uint64_t)&v76[v301], v282, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100E4C5CC((uint64_t)&v76[v302], v286, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v79 = *(void *)v77;
    unint64_t v80 = *(void *)(v77 + 8);
    uint64_t v81 = v78;
    switch(v80 >> 62)
    {
      case 1uLL:
        if ((int)v79 != v79 >> 32) {
          goto LABEL_26;
        }
        goto LABEL_36;
      case 2uLL:
        if (*(void *)(v79 + 16) == *(void *)(v79 + 24)) {
          goto LABEL_36;
        }
LABEL_26:
        sub_1000361E0(*(void *)v77, *(void *)(v77 + 8));
        goto LABEL_27;
      case 3uLL:
        goto LABEL_22;
      default:
        if ((v80 & 0xFF000000000000) == 0)
        {
LABEL_22:
          sub_10001CFB8(*(void *)v77, *(void *)(v77 + 8));
LABEL_36:
          uint64_t v99 = *v312;
          uint64_t v100 = v278;
          (*v312)(v278, 1, 1, v21);
LABEL_37:
          uint64_t v101 = v280;
          Date.init()();
          sub_10001DAB4(v100, (uint64_t *)&unk_10163AC90);
          break;
        }
LABEL_27:
        id v82 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v79, v80);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v84 = [v82 initForReadingFromData:isa error:&v314];

        unint64_t v85 = v81;
        if (v84)
        {
          id v86 = v314;
          sub_10001CFB8(v79, v80);
          [v84 _enableStrictSecureDecodingMode];
          id v87 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v84];
          if (v87)
          {
            uint64_t v88 = v87;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            unint64_t v96 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            uint64_t v88 = 0;
          }
        }
        else
        {
          id v89 = v314;
          uint64_t v90 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v79, v80);
          LODWORD(v296) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v91 = swift_allocObject();
          *(_OWORD *)(v91 + 16) = v290;
          id v314 = v90;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v94 = v93;
          *(void *)(v91 + 56) = &type metadata for String;
          *(void *)(v91 + 64) = sub_10000B4CC();
          *(void *)(v91 + 32) = v92;
          *(void *)(v91 + 40) = v94;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          uint64_t v95 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v88 = 0;
          uint64_t v294 = 0;
        }
        uint64_t v21 = v298;
        sub_10001CFB8(v79, v80);
        if (!v88)
        {
          uint64_t v81 = v85;
          goto LABEL_36;
        }
        id v97 = [v88 creationDate];

        uint64_t v81 = v85;
        if (v97)
        {
          uint64_t v98 = v272;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = *v312;
          (*v312)((uint64_t)v98, 0, 1, v21);
        }
        else
        {
          uint64_t v99 = *v312;
          uint64_t v98 = v272;
          (*v312)((uint64_t)v272, 1, 1, v21);
        }
        uint64_t v119 = (uint64_t)v98;
        uint64_t v100 = v278;
        sub_10001D608(v119, v278, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v100, 1, v21) == 1) {
          goto LABEL_37;
        }
        (*v288)(v283, v100, v21);
        uint64_t v101 = v280;
        break;
    }
    uint64_t v103 = *(void *)v286;
    unint64_t v104 = *(void *)(v286 + 8);
    uint64_t v105 = v102;
    switch(v104 >> 62)
    {
      case 1uLL:
        if ((int)v103 != v103 >> 32) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 2uLL:
        if (*(void *)(v103 + 16) == *(void *)(v103 + 24)) {
          goto LABEL_42;
        }
LABEL_44:
        sub_1000361E0(*(void *)v286, *(void *)(v286 + 8));
        goto LABEL_45;
      case 3uLL:
        goto LABEL_40;
      default:
        if ((v104 & 0xFF000000000000) == 0)
        {
LABEL_40:
          sub_10001CFB8(*(void *)v286, *(void *)(v286 + 8));
LABEL_42:
          unint64_t v59 = v279;
          goto LABEL_57;
        }
LABEL_45:
        unint64_t v300 = v105;
        id v106 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v103, v104);
        Class v107 = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v108 = [v106 initForReadingFromData:v107 error:&v314];

        if (v108)
        {
          id v109 = v314;
          sub_10001CFB8(v103, v104);
          [v108 _enableStrictSecureDecodingMode];
          id v110 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v108];
          if (v110)
          {
            uint64_t v111 = v110;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            unint64_t v120 = (void *)static OS_os_log.default.getter();
            uint64_t v101 = v280;
            os_log(_:dso:log:_:_:)();

            uint64_t v111 = 0;
          }
        }
        else
        {
          id v112 = v314;
          uint64_t v113 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v103, v104);
          LODWORD(v294) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v114 = swift_allocObject();
          *(_OWORD *)(v114 + 16) = v290;
          id v314 = v113;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v115 = String.init<A>(describing:)();
          uint64_t v117 = v116;
          *(void *)(v114 + 56) = &type metadata for String;
          *(void *)(v114 + 64) = sub_10000B4CC();
          *(void *)(v114 + 32) = v115;
          *(void *)(v114 + 40) = v117;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          uint64_t v118 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v101 = v280;
          uint64_t v111 = 0;
          uint64_t v294 = 0;
        }
        sub_10001CFB8(v103, v104);
        uint64_t v21 = v298;
        if (!v111)
        {
          unint64_t v59 = v279;
          uint64_t v105 = v300;
LABEL_57:
          v99(v101, 1, 1, v21);
LABEL_58:
          uint64_t v124 = v277;
          Date.init()();
          sub_10001DAB4(v101, (uint64_t *)&unk_10163AC90);
          goto LABEL_59;
        }
        id v121 = [v111 creationDate];

        unint64_t v59 = v279;
        if (v121)
        {
          uint64_t v122 = v273;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = 1;
          uint64_t v122 = v273;
        }
        uint64_t v105 = v300;
        v99((uint64_t)v122, v123, 1, v21);
        uint64_t v129 = (uint64_t)v122;
        uint64_t v101 = v280;
        sub_10001D608(v129, v280, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v101, 1, v21) == 1) {
          goto LABEL_58;
        }
        uint64_t v124 = v277;
        (*v288)(v277, v101, v21);
LABEL_59:
        BOOL v125 = v307 == 1;
        uint64_t v126 = v283;
        uint64_t v127 = Date.compare(_:)();
        uint64_t v128 = v306;
        v306((uint64_t)v124, v21);
        v128((uint64_t)v126, v21);
        sub_100E4C634(v286, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100E4C634(v282, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((v125 ^ (v127 != 1)))
        {
          Swift::Int v62 = v304 + 1;
          v76 += v308;
          uint64_t v10 = v295;
          if (v51 == v304 + 1)
          {
            Swift::Int v62 = v51;
            goto LABEL_67;
          }
          continue;
        }
        uint64_t v10 = v295;
        Swift::Int v62 = v304;
LABEL_67:
        Swift::Int v61 = v281;
LABEL_68:
        uint64_t v130 = (uint64_t)v297;
        Swift::Int v131 = v274;
        if (v307 == 1)
        {
          if (v62 < v61) {
            goto LABEL_230;
          }
          if (v61 < v62)
          {
            uint64_t v132 = 0;
            uint64_t v133 = v308 * (v62 - 1);
            Swift::Int v134 = v62 * v308;
            Swift::Int v135 = v61;
            uint64_t v136 = v61 * v308;
            Swift::Int v275 = v51;
            do
            {
              if (v135 != v62 + v132 - 1)
              {
                uint64_t v138 = v289;
                if (!v289) {
                  goto LABEL_235;
                }
                uint64_t v139 = &v289[v136];
                uint64_t v307 = (uint64_t)&v289[v133];
                sub_100E4C130((uint64_t)&v289[v136], v276, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                if (v136 < v133 || v139 >= &v138[v134])
                {
                  uint64_t v137 = v307;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v137 = v307;
                  if (v136 != v133) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_100E4C130(v276, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                Swift::Int v131 = v274;
                Swift::Int v51 = v275;
              }
              ++v135;
              --v132;
              v133 -= v308;
              v134 -= v308;
              v136 += v308;
            }
            while (v135 < v62 + v132);
            uint64_t v10 = v295;
            uint64_t v130 = (uint64_t)v297;
            unint64_t v59 = v279;
            Swift::Int v61 = v281;
          }
        }
LABEL_82:
        if (v62 < v51)
        {
          if (__OFSUB__(v62, v61)) {
            goto LABEL_228;
          }
          if (v62 - v61 >= v131)
          {
LABEL_143:
            Swift::Int v61 = v281;
          }
          else
          {
            Swift::Int v61 = v281;
            if (__OFADD__(v281, v131)) {
              goto LABEL_231;
            }
            if (v281 + v131 >= v51) {
              Swift::Int v140 = v51;
            }
            else {
              Swift::Int v140 = v281 + v131;
            }
            if (v140 < v281)
            {
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
            }
            if (v62 != v140)
            {
              uint64_t v141 = *(void **)(v285 + 72);
              uint64_t v142 = (void)v141 * (v62 - 1);
              unint64_t v300 = v141;
              Swift::Int v143 = v62 * (void)v141;
              Swift::Int v275 = v140;
              while (1)
              {
                uint64_t v145 = 0;
                Swift::Int v146 = v281;
                Swift::Int v304 = v62;
                Swift::Int v301 = v143;
                uint64_t v302 = v142;
                while (2)
                {
                  Swift::Int v308 = v146;
                  uint64_t v147 = *v311;
                  uint64_t v307 = v143 + v145;
                  uint64_t v148 = (uint64_t)v147 + v143 + v145;
                  unint64_t v149 = v309;
                  sub_100E4C5CC(v148, (uint64_t)v309, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  unint64_t v306 = (void (*)(uint64_t, uint64_t))(v142 + v145);
                  sub_100E4C5CC((uint64_t)v147 + v142 + v145, v313, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  uint64_t v151 = *v149;
                  unint64_t v152 = v149[1];
                  unint64_t v153 = v150;
                  switch(v152 >> 62)
                  {
                    case 1uLL:
                      if ((int)v151 != v151 >> 32) {
                        goto LABEL_102;
                      }
                      goto LABEL_112;
                    case 2uLL:
                      if (*(void *)(v151 + 16) == *(void *)(v151 + 24)) {
                        goto LABEL_112;
                      }
LABEL_102:
                      sub_1000361E0(v151, v152);
                      goto LABEL_103;
                    case 3uLL:
                      goto LABEL_98;
                    default:
                      if ((v152 & 0xFF000000000000) == 0)
                      {
LABEL_98:
                        sub_10001CFB8(v151, v152);
LABEL_112:
                        uint64_t v173 = *v312;
                        (*v312)(v130, 1, 1, v21);
LABEL_113:
                        Date.init()();
                        sub_10001DAB4(v130, (uint64_t *)&unk_10163AC90);
                        break;
                      }
LABEL_103:
                      id v155 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v151, v152);
                      Class v156 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v157 = [v155 initForReadingFromData:v156 error:&v314];

                      if (v157)
                      {
                        id v158 = v314;
                        sub_10001CFB8(v151, v152);
                        [v157 _enableStrictSecureDecodingMode];
                        id v159 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v157];
                        if (v159)
                        {
                          uint64_t v160 = v159;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          char v170 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          uint64_t v160 = 0;
                        }
                      }
                      else
                      {
                        id v161 = v314;
                        unint64_t v162 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v151, v152);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v163 = swift_allocObject();
                        uint64_t v296 = v154;
                        uint64_t v164 = v153;
                        uint64_t v165 = (void *)v163;
                        *(_OWORD *)(v163 + 16) = v290;
                        id v314 = v162;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v166 = String.init<A>(describing:)();
                        uint64_t v168 = v167;
                        v165[7] = &type metadata for String;
                        v165[8] = sub_10000B4CC();
                        v165[4] = v166;
                        v165[5] = v168;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v169 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        unint64_t v153 = v164;
                        uint64_t v154 = v296;
                        swift_bridgeObjectRelease();

                        uint64_t v160 = 0;
                        uint64_t v294 = 0;
                      }
                      uint64_t v10 = v295;
                      sub_10001CFB8(v151, v152);
                      uint64_t v171 = (uint64_t)v291;
                      uint64_t v21 = v298;
                      if (!v160)
                      {
                        uint64_t v130 = (uint64_t)v297;
                        goto LABEL_112;
                      }
                      id v172 = [v160 creationDate];

                      if (v172)
                      {
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v173 = *v312;
                        (*v312)(v171, 0, 1, v21);
                      }
                      else
                      {
                        uint64_t v173 = *v312;
                        (*v312)(v171, 1, 1, v21);
                      }
                      uint64_t v193 = v171;
                      uint64_t v130 = (uint64_t)v297;
                      sub_10001D608(v193, (uint64_t)v297, (uint64_t *)&unk_10163AC90);
                      if ((*v293)(v130, 1, v21) == 1) {
                        goto LABEL_113;
                      }
                      (*v288)(v310, v130, v21);
                      break;
                  }
                  uint64_t v175 = *(void *)v313;
                  unint64_t v176 = *(void *)(v313 + 8);
                  unint64_t v177 = v174;
                  switch(v176 >> 62)
                  {
                    case 1uLL:
                      if ((int)v175 != v175 >> 32) {
                        goto LABEL_120;
                      }
                      goto LABEL_133;
                    case 2uLL:
                      if (*(void *)(v175 + 16) == *(void *)(v175 + 24)) {
                        goto LABEL_133;
                      }
LABEL_120:
                      sub_1000361E0(*(void *)v313, *(void *)(v313 + 8));
                      goto LABEL_121;
                    case 3uLL:
                      goto LABEL_116;
                    default:
                      if ((v176 & 0xFF000000000000) == 0)
                      {
LABEL_116:
                        sub_10001CFB8(*(void *)v313, *(void *)(v313 + 8));
                        goto LABEL_133;
                      }
LABEL_121:
                      uint64_t v296 = v177;
                      id v179 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v175, v176);
                      Class v180 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v181 = [v179 initForReadingFromData:v180 error:&v314];

                      if (v181)
                      {
                        id v182 = v314;
                        sub_10001CFB8(v175, v176);
                        [v181 _enableStrictSecureDecodingMode];
                        id v183 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v181];
                        if (v183)
                        {
                          uint64_t v184 = v183;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          uint64_t v194 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          uint64_t v184 = 0;
                        }
                      }
                      else
                      {
                        id v185 = v314;
                        id v186 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v175, v176);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v187 = swift_allocObject();
                        __n128 v289 = v178;
                        uint64_t v188 = (void *)v187;
                        *(_OWORD *)(v187 + 16) = v290;
                        id v314 = v186;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v189 = String.init<A>(describing:)();
                        uint64_t v191 = v190;
                        v188[7] = &type metadata for String;
                        v188[8] = sub_10000B4CC();
                        v188[4] = v189;
                        v188[5] = v191;
                        uint64_t v10 = v295;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v192 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        uint64_t v178 = v289;
                        swift_bridgeObjectRelease();

                        uint64_t v184 = 0;
                        uint64_t v294 = 0;
                      }
                      sub_10001CFB8(v175, v176);
                      uint64_t v130 = (uint64_t)v297;
                      uint64_t v21 = v298;
                      if (!v184)
                      {
                        unint64_t v177 = v296;
LABEL_133:
                        v173((uint64_t)v10, 1, 1, v21);
                        uint64_t v198 = v299;
LABEL_134:
                        Date.init()();
                        uint64_t v199 = v10;
                        sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
                        goto LABEL_135;
                      }
                      id v195 = [v184 creationDate];

                      if (v195)
                      {
                        uint64_t v196 = (uint64_t)v287;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v197 = 0;
                      }
                      else
                      {
                        uint64_t v197 = 1;
                        uint64_t v196 = (uint64_t)v287;
                      }
                      uint64_t v198 = v299;
                      v173(v196, v197, 1, v21);
                      sub_10001D608(v196, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
                      if ((*v293)((uint64_t)v10, 1, v21) == 1)
                      {
                        unint64_t v177 = v296;
                        goto LABEL_134;
                      }
                      uint64_t v199 = v10;
                      (*v288)(v198, (uint64_t)v10, v21);
                      unint64_t v177 = v296;
LABEL_135:
                      unint64_t v200 = v310;
                      uint64_t v201 = Date.compare(_:)();
                      double v202 = *v303;
                      (*v303)((uint64_t)v198, v21);
                      v202((uint64_t)v200, v21);
                      sub_100E4C634(v313, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                      sub_100E4C634((uint64_t)v309, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                      if (v201 == 1)
                      {
                        unint64_t v203 = *v311;
                        Swift::Int v143 = v301;
                        uint64_t v142 = v302;
                        if (!*v311) {
                          goto LABEL_233;
                        }
                        uint64_t v204 = (uint64_t)v203 + v302 + v145;
                        sub_100E4C130((uint64_t)v203 + v301 + v145, v305, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                        uint64_t v10 = v199;
                        swift_arrayInitWithTakeFrontToBack();
                        sub_100E4C130(v305, v204, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                        v145 -= (uint64_t)v300;
                        Swift::Int v146 = v308 + 1;
                        Swift::Int v144 = v304;
                        if (v304 == v308 + 1) {
                          goto LABEL_93;
                        }
                        continue;
                      }
                      Swift::Int v144 = v304;
                      uint64_t v10 = v199;
                      Swift::Int v143 = v301;
                      uint64_t v142 = v302;
LABEL_93:
                      Swift::Int v62 = v144 + 1;
                      v142 += (uint64_t)v300;
                      v143 += (Swift::Int)v300;
                      if (v62 == v275)
                      {
                        Swift::Int v62 = v275;
                        unint64_t v59 = v279;
                        goto LABEL_143;
                      }
                      break;
                  }
                  break;
                }
              }
            }
          }
        }
        if (v62 < v61) {
          goto LABEL_223;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v304 = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v59 = sub_100B729CC(0, *((void *)v59 + 2) + 1, 1, v59);
        }
        unint64_t v207 = *((void *)v59 + 2);
        unint64_t v206 = *((void *)v59 + 3);
        unint64_t v60 = v207 + 1;
        if (v207 >= v206 >> 1) {
          unint64_t v59 = sub_100B729CC((char *)(v206 > 1), v207 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v60;
        uint64_t v208 = v59 + 32;
        unint64_t v209 = &v59[16 * v207 + 32];
        Swift::Int v210 = v304;
        *(void *)unint64_t v209 = v281;
        *((void *)v209 + 1) = v210;
        if (v207)
        {
          while (2)
          {
            unint64_t v211 = v60 - 1;
            if (v60 >= 4)
            {
              uint64_t v216 = &v208[16 * v60];
              uint64_t v217 = *((void *)v216 - 8);
              uint64_t v218 = *((void *)v216 - 7);
              BOOL v222 = __OFSUB__(v218, v217);
              uint64_t v219 = v218 - v217;
              if (v222) {
                goto LABEL_212;
              }
              uint64_t v221 = *((void *)v216 - 6);
              uint64_t v220 = *((void *)v216 - 5);
              BOOL v222 = __OFSUB__(v220, v221);
              uint64_t v214 = v220 - v221;
              char v215 = v222;
              if (v222) {
                goto LABEL_213;
              }
              unint64_t v223 = v60 - 2;
              uint64_t v224 = &v208[16 * v60 - 32];
              uint64_t v226 = *(void *)v224;
              uint64_t v225 = *((void *)v224 + 1);
              BOOL v222 = __OFSUB__(v225, v226);
              uint64_t v227 = v225 - v226;
              if (v222) {
                goto LABEL_215;
              }
              BOOL v222 = __OFADD__(v214, v227);
              uint64_t v228 = v214 + v227;
              if (v222) {
                goto LABEL_218;
              }
              if (v228 >= v219)
              {
                uint64_t v246 = &v208[16 * v211];
                uint64_t v248 = *(void *)v246;
                uint64_t v247 = *((void *)v246 + 1);
                BOOL v222 = __OFSUB__(v247, v248);
                uint64_t v249 = v247 - v248;
                if (v222) {
                  goto LABEL_222;
                }
                BOOL v239 = v214 < v249;
              }
              else
              {
LABEL_163:
                if (v215) {
                  goto LABEL_214;
                }
                unint64_t v223 = v60 - 2;
                uint64_t v229 = &v208[16 * v60 - 32];
                uint64_t v231 = *(void *)v229;
                uint64_t v230 = *((void *)v229 + 1);
                BOOL v232 = __OFSUB__(v230, v231);
                uint64_t v233 = v230 - v231;
                char v234 = v232;
                if (v232) {
                  goto LABEL_217;
                }
                unint64_t v235 = &v208[16 * v211];
                uint64_t v237 = *(void *)v235;
                uint64_t v236 = *((void *)v235 + 1);
                BOOL v222 = __OFSUB__(v236, v237);
                uint64_t v238 = v236 - v237;
                if (v222) {
                  goto LABEL_220;
                }
                if (__OFADD__(v233, v238)) {
                  goto LABEL_221;
                }
                if (v233 + v238 < v214) {
                  goto LABEL_175;
                }
                BOOL v239 = v214 < v238;
              }
              if (v239) {
                unint64_t v211 = v223;
              }
            }
            else
            {
              if (v60 == 3)
              {
                uint64_t v213 = *((void *)v59 + 4);
                uint64_t v212 = *((void *)v59 + 5);
                BOOL v222 = __OFSUB__(v212, v213);
                uint64_t v214 = v212 - v213;
                char v215 = v222;
                goto LABEL_163;
              }
              uint64_t v240 = *((void *)v59 + 4);
              uint64_t v241 = *((void *)v59 + 5);
              BOOL v222 = __OFSUB__(v241, v240);
              uint64_t v233 = v241 - v240;
              char v234 = v222;
LABEL_175:
              if (v234) {
                goto LABEL_216;
              }
              unint64_t v242 = &v208[16 * v211];
              uint64_t v244 = *(void *)v242;
              uint64_t v243 = *((void *)v242 + 1);
              BOOL v222 = __OFSUB__(v243, v244);
              uint64_t v245 = v243 - v244;
              if (v222) {
                goto LABEL_219;
              }
              if (v245 < v233) {
                goto LABEL_15;
              }
            }
            unint64_t v250 = v211 - 1;
            if (v211 - 1 >= v60)
            {
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
              goto LABEL_232;
            }
            if (!*v311) {
              goto LABEL_234;
            }
            uint64_t v251 = v59;
            v252 = &v208[16 * v250];
            uint64_t v253 = *(void *)v252;
            uint64_t v254 = &v208[16 * v211];
            uint64_t v255 = *((void *)v254 + 1);
            uint64_t v256 = v294;
            sub_100E464D0((unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v252, (unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v254, (unint64_t)*v311 + *(void *)(v285 + 72) * v255, v284);
            uint64_t v294 = v256;
            if (v256)
            {
LABEL_191:
              swift_bridgeObjectRelease();
              v269[2] = 0;
              return swift_bridgeObjectRelease();
            }
            if (v255 < v253) {
              goto LABEL_209;
            }
            if (v211 > *((void *)v251 + 2)) {
              goto LABEL_210;
            }
            *(void *)v252 = v253;
            *(void *)&v208[16 * v250 + 8] = v255;
            unint64_t v257 = *((void *)v251 + 2);
            if (v211 >= v257) {
              goto LABEL_211;
            }
            unint64_t v59 = v251;
            unint64_t v60 = v257 - 1;
            memmove(&v208[16 * v211], v254 + 16, 16 * (v257 - 1 - v211));
            *((void *)v251 + 2) = v257 - 1;
            BOOL v239 = v257 > 2;
            uint64_t v10 = v295;
            if (!v239) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v60 = 1;
LABEL_15:
        Swift::Int v51 = (Swift::Int)v311[1];
        Swift::Int v58 = v304;
        if (v304 < v51) {
          goto LABEL_16;
        }
        uint64_t v57 = v269;
LABEL_194:
        uint64_t v258 = v294;
        uint64_t v259 = v285;
        if (v60 >= 2)
        {
          uint64_t v260 = *v311;
          uint64_t v269 = v57;
          do
          {
            unint64_t v261 = v60 - 2;
            if (v60 < 2) {
              goto LABEL_224;
            }
            if (!v260) {
              goto LABEL_236;
            }
            uint64_t v262 = *(void *)&v59[16 * v261 + 32];
            uint64_t v263 = *(void *)&v59[16 * v60 + 24];
            sub_100E464D0((unint64_t)v260 + *(void *)(v259 + 72) * v262, (unint64_t)v260 + *(void *)(v259 + 72) * *(void *)&v59[16 * v60 + 16], (unint64_t)v260 + *(void *)(v259 + 72) * v263, v284);
            if (v258) {
              goto LABEL_191;
            }
            if (v263 < v262) {
              goto LABEL_225;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v59 = sub_100B73584((uint64_t)v59);
            }
            if (v261 >= *((void *)v59 + 2)) {
              goto LABEL_226;
            }
            v264 = &v59[16 * v261 + 32];
            *(void *)v264 = v262;
            *((void *)v264 + 1) = v263;
            unint64_t v265 = *((void *)v59 + 2);
            if (v60 > v265) {
              goto LABEL_227;
            }
            memmove(&v59[16 * v60 + 16], &v59[16 * v60 + 32], 16 * (v265 - v60));
            *((void *)v59 + 2) = v265 - 1;
            unint64_t v60 = v265 - 1;
            uint64_t v57 = v269;
          }
          while (v265 > 2);
        }
        swift_bridgeObjectRelease();
        v57[2] = 0;
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100E457A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v96 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v94 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v94 - v15;
  __chkstk_darwin(v14);
  id v109 = (char *)&v94 - v17;
  uint64_t v113 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v113 - 8);
  uint64_t v19 = __chkstk_darwin(v113);
  uint64_t v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v121 = (char *)&v94 - v22;
  uint64_t v102 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v23 = __chkstk_darwin(v102);
  uint64_t v114 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v94 - v26;
  uint64_t result = __chkstk_darwin(v25);
  unint64_t v120 = (uint64_t *)((char *)&v94 - v30);
  uint64_t v95 = a2;
  if (a3 != a2)
  {
    uint64_t v98 = v13;
    uint64_t v99 = v10;
    uint64_t v119 = (void **)(v18 + 56);
    uint64_t v103 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    uint64_t v31 = *(void *)(v29 + 72);
    id v97 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    id v106 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v110 = v31;
    uint64_t v122 = v31 * a3;
    uint64_t v123 = v31 * (a3 - 1);
    long long v100 = xmmword_101342130;
    unint64_t v104 = a4;
    uint64_t v32 = v113;
    id v112 = v27;
    Class v107 = v21;
    id v108 = v16;
    while (1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v96;
      uint64_t v111 = a3;
      while (2)
      {
        uint64_t v115 = v35;
        uint64_t v36 = *a4;
        uint64_t v117 = v122 + v34;
        uint64_t v37 = v120;
        sub_100E4C5CC(v122 + v34 + v36, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v116 = v123 + v34;
        sub_100E4C5CC(v123 + v34 + v36, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        switch(v39 >> 62)
        {
          case 1uLL:
            if ((int)v38 == v38 >> 32) {
              goto LABEL_17;
            }
            goto LABEL_12;
          case 2uLL:
            if (*(void *)(v38 + 16) == *(void *)(v38 + 24)) {
              goto LABEL_17;
            }
LABEL_12:
            sub_1000361E0(v38, v39);
            goto LABEL_13;
          case 3uLL:
            goto LABEL_10;
          default:
            if ((v39 & 0xFF000000000000) == 0)
            {
LABEL_10:
              sub_10001CFB8(v38, v39);
LABEL_17:
              uint64_t v47 = (uint64_t)v109;
LABEL_24:
              Swift::Int v61 = *v119;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v119)(v47, 1, 1, v32);
LABEL_25:
              Date.init()();
              sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
              break;
            }
LABEL_13:
            id v41 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v38, v39);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v43 = [v41 initForReadingFromData:isa error:&v124];

            if (v43)
            {
              id v44 = v124;
              sub_10001CFB8(v38, v39);
              [v43 _enableStrictSecureDecodingMode];
              id v45 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v43];
              if (v45)
              {
                uint64_t v46 = v45;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                uint64_t v55 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v46 = 0;
              }
            }
            else
            {
              id v48 = v124;
              uint64_t v49 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v38, v39);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v50 = swift_allocObject();
              *(_OWORD *)(v50 + 16) = v100;
              id v124 = v49;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v51 = String.init<A>(describing:)();
              uint64_t v53 = v52;
              *(void *)(v50 + 56) = &type metadata for String;
              *(void *)(v50 + 64) = sub_10000B4CC();
              *(void *)(v50 + 32) = v51;
              *(void *)(v50 + 40) = v53;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v54 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              uint64_t v27 = v112;
              swift_bridgeObjectRelease();

              uint64_t v46 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v38, v39);
            if (!v46)
            {
              a4 = v104;
              uint64_t v47 = (uint64_t)v109;
              uint64_t v32 = v113;
              goto LABEL_24;
            }
            id v56 = [v46 creationDate];

            a4 = v104;
            uint64_t v47 = (uint64_t)v109;
            if (v56)
            {
              uint64_t v57 = (uint64_t)v98;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              Swift::Int v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v59 = v57;
              uint64_t v60 = 0;
            }
            else
            {
              Swift::Int v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v57 = (uint64_t)v98;
              uint64_t v59 = (uint64_t)v98;
              uint64_t v60 = 1;
            }
            uint64_t v32 = v113;
            id v84 = v58;
            v58(v59, v60, 1, v113);
            sub_10001D608(v57, v47, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v47, 1, v32) == 1)
            {
              Swift::Int v61 = v84;
              goto LABEL_25;
            }
            (*v97)(v121, v47, v32);
            Swift::Int v61 = v84;
            break;
        }
        uint64_t v63 = *(void *)v27;
        unint64_t v64 = *((void *)v27 + 1);
        Swift::Int v65 = v62;
        switch(v64 >> 62)
        {
          case 1uLL:
            if ((int)v63 == v63 >> 32) {
              goto LABEL_35;
            }
            goto LABEL_30;
          case 2uLL:
            if (*(void *)(v63 + 16) == *(void *)(v63 + 24))
            {
LABEL_35:
              uint64_t v66 = a4;
LABEL_36:
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              goto LABEL_47;
            }
LABEL_30:
            sub_1000361E0(*(void *)v27, *((void *)v27 + 1));
LABEL_31:
            uint64_t v105 = v65;
            uint64_t v118 = v61;
            uint64_t v66 = a4;
            id v68 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v63, v64);
            Class v69 = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v70 = [v68 initForReadingFromData:v69 error:&v124];

            if (v70)
            {
              id v71 = v124;
              sub_10001CFB8(v63, v64);
              [v70 _enableStrictSecureDecodingMode];
              id v72 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v70];
              if (v72)
              {
                uint64_t v73 = v72;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                unint64_t v85 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v73 = 0;
              }
            }
            else
            {
              id v76 = v124;
              uint64_t v77 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v63, v64);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v78 = swift_allocObject();
              *(_OWORD *)(v78 + 16) = v100;
              id v124 = v77;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v79 = String.init<A>(describing:)();
              unint64_t v80 = v67;
              uint64_t v82 = v81;
              *(void *)(v78 + 56) = &type metadata for String;
              *(void *)(v78 + 64) = sub_10000B4CC();
              *(void *)(v78 + 32) = v79;
              *(void *)(v78 + 40) = v82;
              Swift::Int v67 = v80;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v83 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              uint64_t v66 = v104;
              swift_bridgeObjectRelease();

              uint64_t v73 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v63, v64);
            Swift::Int v61 = v118;
            if (!v73)
            {
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              uint64_t v32 = v113;
              Swift::Int v65 = v105;
LABEL_47:
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v61)(v74, 1, 1, v32);
LABEL_48:
              Date.init()();
              sub_10001DAB4(v74, (uint64_t *)&unk_10163AC90);
              goto LABEL_49;
            }
            id v86 = [v73 creationDate];

            uint64_t v75 = v107;
            uint64_t v74 = (uint64_t)v108;
            if (v86)
            {
              uint64_t v87 = (uint64_t)v99;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = 0;
            }
            else
            {
              uint64_t v88 = 1;
              uint64_t v87 = (uint64_t)v99;
            }
            Swift::Int v65 = v105;
            uint64_t v32 = v113;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v87, v88, 1, v113);
            sub_10001D608(v87, v74, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v74, 1, v32) == 1) {
              goto LABEL_48;
            }
            (*v97)(v75, v74, v32);
LABEL_49:
            id v89 = v121;
            uint64_t v90 = Date.compare(_:)();
            uint64_t v91 = *v106;
            (*v106)(v75, v32);
            v91(v89, v32);
            uint64_t v27 = v112;
            sub_100E4C634((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t result = sub_100E4C634((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            if (v90 == 1)
            {
              uint64_t v92 = *v66;
              if (!*v66) {
                __break(1u);
              }
              a4 = v66;
              uint64_t v93 = v92 + v123 + v34;
              sub_100E4C130(v92 + v122 + v34, v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_100E4C130(v114, v93, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v33 = v111;
              v34 -= v110;
              uint64_t v35 = v115 + 1;
              uint64_t v32 = v113;
              if (v111 == v115 + 1) {
                goto LABEL_5;
              }
              continue;
            }
            a4 = v66;
            uint64_t v33 = v111;
LABEL_5:
            a3 = v33 + 1;
            v123 += v110;
            v122 += v110;
            if (a3 == v95) {
              return result;
            }
            break;
          case 3uLL:
            goto LABEL_28;
          default:
            if ((v64 & 0xFF000000000000) != 0) {
              goto LABEL_31;
            }
LABEL_28:
            uint64_t v66 = a4;
            sub_10001CFB8(*(void *)v27, *((void *)v27 + 1));
            goto LABEL_36;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_100E464D0(unint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v84 - 8);
  uint64_t v11 = __chkstk_darwin(v84);
  uint64_t v77 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v83 = (unint64_t)&v72 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v80 = (unint64_t)&v72 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v79 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v19 = __chkstk_darwin(v79);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v82 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (uint64_t *)((char *)&v72 - v23);
  __chkstk_darwin(v22);
  uint64_t v81 = (uint64_t *)((char *)&v72 - v26);
  uint64_t v85 = *(void *)(v27 + 72);
  if (!v85)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v28 = a2;
  if (a2 - a1 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_66;
  }
  int64_t v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_67;
  }
  uint64_t v30 = (uint64_t)(a2 - a1) / v85;
  uint64_t v88 = (char *)a1;
  uint64_t v87 = a4;
  uint64_t v31 = v29 / v85;
  if (v30 >= v29 / v85)
  {
    id v76 = v25;
    if (v31 < 0) {
      goto LABEL_70;
    }
    uint64_t v35 = v31 * v85;
    if ((unint64_t)a4 < v28 || v28 + v35 <= (unint64_t)a4)
    {
      unint64_t v36 = v28;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (a4 == (char *)v28) {
        goto LABEL_43;
      }
      unint64_t v36 = v28;
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v28 = v36;
LABEL_43:
    unint64_t v52 = (unint64_t)&a4[v35];
    unint64_t v86 = (unint64_t)&a4[v35];
    uint64_t v88 = (char *)v28;
    if (v35 >= 1 && a1 < v28)
    {
      uint64_t v54 = -v85;
      unint64_t v73 = a1;
      uint64_t v74 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      uint64_t v55 = v76;
      unint64_t v75 = (unint64_t)a4;
      uint64_t v78 = -v85;
      while (1)
      {
        id v56 = v82;
        unint64_t v57 = v28;
        sub_100E4C5CC(v52 + v54, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v85 = v57;
        unint64_t v58 = v57 + v54;
        sub_100E4C5CC(v58, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B23648(v56, v83);
        if (v5) {
          goto LABEL_69;
        }
        uint64_t v60 = v77;
        sub_100B23648(v55, v77);
        uint64_t v81 = 0;
        uint64_t v61 = (uint64_t)v55;
        uint64_t v54 = v78;
        unint64_t v80 = a3 + v78;
        unint64_t v62 = v83;
        uint64_t v63 = Date.compare(_:)();
        unint64_t v64 = *v74;
        uint64_t v65 = v60;
        unint64_t v66 = a3;
        uint64_t v67 = v84;
        (*v74)(v65, v84);
        v64(v62, v67);
        sub_100E4C634(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100E4C634((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (v63 == 1)
        {
          a3 = v80;
          if (v66 < v85 || v80 >= v85)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
          }
          else
          {
            BOOL v68 = v66 == v85;
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
            if (!v68) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v88 += v54;
        }
        else
        {
          unint64_t v70 = v86;
          v86 += v54;
          a3 = v80;
          if (v66 < v70 || v80 >= v70)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v58 = v85;
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
          }
          else
          {
            uint64_t v5 = (uint64_t)v81;
            uint64_t v55 = v76;
            if (v66 != v70) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v58 = v85;
            unint64_t v69 = v75;
          }
        }
        unint64_t v52 = v86;
        if (v86 > v69)
        {
          unint64_t v28 = v58;
          if (v58 > v73) {
            continue;
          }
        }
        goto LABEL_64;
      }
    }
    goto LABEL_64;
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v32 = v10;
    unint64_t v33 = a2;
    uint64_t v34 = v30 * v85;
    if ((unint64_t)a4 < a1 || a1 + v34 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != (char *)a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v83 = (unint64_t)&a4[v34];
    unint64_t v86 = (unint64_t)&a4[v34];
    BOOL v37 = v34 < 1 || v33 >= a3;
    if (!v37)
    {
      uint64_t v38 = v33;
      uint64_t v82 = v24;
      unint64_t v39 = (void (**)(unint64_t, uint64_t))(v32 + 8);
      while (1)
      {
        unint64_t v40 = v38;
        id v41 = v81;
        sub_100E4C5CC(v38, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100E4C5CC((uint64_t)a4, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B23648(v41, (uint64_t)v18);
        if (v5) {
          goto LABEL_68;
        }
        unint64_t v42 = a3;
        unint64_t v44 = v80;
        sub_100B23648(v24, v80);
        uint64_t v5 = 0;
        uint64_t v45 = Date.compare(_:)();
        uint64_t v46 = *v39;
        unint64_t v47 = v44;
        uint64_t v48 = v84;
        (*v39)(v47, v84);
        v46((unint64_t)v18, v48);
        sub_100E4C634((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100E4C634((uint64_t)v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v49 = (unint64_t)v88;
        if (v45 == 1)
        {
          unint64_t v50 = v40 + v85;
          if ((unint64_t)v88 < v40 || (unint64_t)v88 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 == (char *)v40)
          {
            unint64_t v49 = v40;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v51 = (unint64_t)&v87[v85];
          if (v88 < v87 || (unint64_t)v88 >= v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 != v87)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v87 = (char *)v51;
          unint64_t v50 = v40;
        }
        uint64_t v88 = (char *)(v49 + v85);
        a4 = v87;
        if ((unint64_t)v87 < v83)
        {
          uint64_t v38 = v50;
          BOOL v37 = v50 >= v42;
          a3 = v42;
          if (!v37) {
            continue;
          }
        }
        break;
      }
    }
LABEL_64:
    sub_100B72D38((unint64_t *)&v88, (unint64_t *)&v87, (uint64_t *)&v86);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100E46CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  unint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  unint64_t v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  id v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      BOOL v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_100E4C130((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100E4C130(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        BOOL v37 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        id v41 = v35;
      }
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_100E4C130(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_100E47244(uint64_t a1, uint64_t a2)
{
  v25[3] = a2;
  uint64_t v4 = sub_10000588C(&qword_1016427F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  uint64_t v7 = __chkstk_darwin(v24);
  uint64_t v23 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v22 = v9;
  uint64_t v13 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  uint64_t v21 = a1;
  uint64_t v14 = (unint64_t *)(a1 + 40);
  uint64_t v15 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v16 = *(v14 - 1);
    unint64_t v17 = *v14;
    v25[0] = v16;
    v25[1] = v17;
    sub_1000361E0(v16, v17);
    sub_100E422D8(v25, v6);
    if (v2)
    {
      sub_10001CFB8(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    sub_10001CFB8(v16, v17);
    if ((*v13)(v6, 1, v24) == 1)
    {
      sub_10001DAB4((uint64_t)v6, &qword_1016427F8);
    }
    else
    {
      sub_100E4C130((uint64_t)v6, (uint64_t)v11, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      sub_100E4C130((uint64_t)v11, v23, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = (void *)sub_100A70304(0, v15[2] + 1, 1, (unint64_t)v15);
      }
      unint64_t v19 = v15[2];
      unint64_t v18 = v15[3];
      if (v19 >= v18 >> 1) {
        uint64_t v15 = (void *)sub_100A70304(v18 > 1, v19 + 1, 1, (unint64_t)v15);
      }
      long long v15[2] = v19 + 1;
      sub_100E4C130(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v19, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
    }
    v14 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100E47520(unint64_t a1)
{
  if (a1 >= 7) {
    return 7;
  }
  else {
    return (0x3010504060200uLL >> (8 * a1));
  }
}

uint64_t sub_100E47548()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - v5;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v7 = sub_1010AAFA8(v12[1]);
  swift_bridgeObjectRelease();
  if ((unsigned __int128)(v7 * (__int128)60) >> 64 == (60 * v7) >> 63)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    Date.timeIntervalSinceReferenceDate.getter();
    Date.init(timeIntervalSinceReferenceDate:)();
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    unint64_t v8 = Duration.milliseconds.getter();
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = v8;
      if (!HIDWORD(v8))
      {
        uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
        v10(v4, v0);
        v10(v6, v0);
        return v9;
      }
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100E477C0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MACAddress();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v6;
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)v30 - v8;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = v1;
  uint64_t v13 = *(void **)(v1 + 16);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    uint64_t v33 = v7;
    if (qword_101637310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170F068);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  unint64_t v18 = v34;
  uint64_t v32 = a1;
  v17(v34, a1, v3);
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    unint64_t v31 = v17;
    uint64_t v38 = v22;
    *(_DWORD *)uint64_t v21 = 136446210;
    v30[1] = v21 + 4;
    sub_100E484C4((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_1008FA0F0(v23, v24, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "startStandaloneLEPairing for %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    unint64_t v17 = v31;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
  }

  type metadata accessor for Transaction();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  int64_t v26 = v33;
  v17(v33, v32, v3);
  unint64_t v27 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v28 + v27, v26, v3);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return swift_release();
}

unint64_t sub_100E47C50()
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 1;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x626D754E74726170;
  *(void *)(inited + 72) = 0xEA00000000007265;
  *(NSNumber *)(inited + 80) = UInt8._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "numberOfParts");
  *(_WORD *)(inited + 110) = -4864;
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  return sub_10092E03C(inited);
}

unint64_t sub_100E47D5C()
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134CDE0;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6D6F44726F727265;
  *(void *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue();
  Error.domain.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v1;
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x646F43726F727265;
  *(void *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue();
  Error.code.getter();
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x626D754E74726170;
  *(void *)(inited + 168) = 0xEA00000000007265;
  *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 184) = 0;
  return sub_10092E03C(inited);
}

uint64_t sub_100E47F18()
{
  return sub_100567B24(40);
}

uint64_t sub_100E47F20()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100E40F60, 0, 0);
}

uint64_t sub_100E47FCC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_10013911C(v2, v3);
}

uint64_t sub_100E48068@<X0>(unsigned char *a1@<X8>)
{
  return sub_100E09A14(v1, a1);
}

void sub_100E48084(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 224);
}

uint64_t sub_100E48090@<X0>(unsigned char *a1@<X8>)
{
  return sub_10013A6B4(v1, a1);
}

uint64_t sub_100E480AC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E480E4()
{
  return sub_100E4BF64((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E480FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E3FF18(a1, v4, v5);
}

uint64_t sub_100E48170()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  unint64_t v9 = *(void *)(v0 + v7 + 8);
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + v7), v9);
  }

  return _swift_deallocObject(v0, v7 + 16, v3 | 7);
}

uint64_t sub_100E48284()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v4;
  uint64_t v9 = v0 + v6;
  uint64_t v10 = (uint64_t *)(v0 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v13;
  *uint64_t v13 = v1;
  v13[1] = sub_10001D2E4;
  v13[26] = v11;
  v13[27] = v12;
  v13[24] = v8;
  v13[25] = v9;
  v13[23] = v7;
  return _swift_task_switch(sub_100E3ECA0, 0, 0);
}

uint64_t sub_100E483C4()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_100E48430()
{
  return sub_100E48460();
}

uint64_t sub_100E48448()
{
  return sub_100E48460();
}

uint64_t sub_100E48460()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

void sub_100E484B4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 224) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100E484C4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100E4850C()
{
  if (*(unsigned char *)(v0 + 57) == 1)
  {
    uint64_t v1 = (id *)(v0 + 16);
    switch(*(unsigned char *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        goto LABEL_8;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
        break;
      case 2:

        goto LABEL_8;
      case 3:

        break;
      case 4:
      case 5:
      case 6:
        swift_release();
        break;
      case 8:
        swift_release();
LABEL_8:
        swift_errorRelease();
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  return _swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100E485F8()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100E48640(void (*a1)(_OWORD *), uint64_t a2)
{
  return sub_100E3BA4C(a1, a2, v2[2], v2 + 3, v2[8]);
}

uint64_t sub_100E48650()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100E48690(void (*a1)(long long *), uint64_t a2)
{
  return sub_100E3AAD8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t sub_100E4869C()
{
  unint64_t result = qword_10165FEA8;
  if (!qword_10165FEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165FEA8);
  }
  return result;
}

uint64_t sub_100E486F0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100E48728(uint64_t a1)
{
  sub_100E3A288(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100E48730()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E48768(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  sub_100E487F4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((unint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312));
  return a1;
}

uint64_t sub_100E487F4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40)
{
  if (a22)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_100037A24(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a14, a15);
    sub_10001CFB8(a16, a17);
    sub_10001CFB8(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a25, a26);
    sub_10001CFB8(a27, a28);
    sub_10001CFB8(a29, a30);
    sub_10001CFB8(a31, a32);
    sub_10001CFB8(a33, a34);
    sub_100037A24(a35, a36);
    swift_bridgeObjectRelease();
    return sub_100037A24(a39, a40);
  }
  return result;
}

uint64_t sub_100E489C8(uint64_t a1)
{
  return sub_100E34F70(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100E489E4(uint64_t a1)
{
  sub_100E48A50(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200));
  return a1;
}

void sub_100E48A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_100037A24(a21, a22);
    swift_bridgeObjectRelease();
    sub_100037A24(a25, a26);
  }
}

uint64_t sub_100E48B98()
{
  return sub_100567B24(32);
}

uint64_t sub_100E48BA0(uint64_t a1)
{
  return sub_100E35034(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100E48BA8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100E48BF0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Transaction.capture()();
  sub_100E41064(v1);
}

uint64_t sub_100E48C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100E48C40()
{
  return swift_release();
}

void sub_100E48C4C(uint64_t a1)
{
  sub_100E34BF8(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100E48C54()
{
  return sub_100E4BF64((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E48C6C()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[1] = sub_100033F68;
  return sub_100E3CED4(v3, v4);
}

uint64_t sub_100E48D40@<X0>(char *a1@<X8>)
{
  return sub_100E3E1A8(a1);
}

uint64_t sub_100E48D48()
{
  return sub_100E4BF64((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

void sub_100E48D60()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  sub_100E3E24C(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), 0, 0);
}

uint64_t sub_100E48DCC()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100E48E04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48E14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48E24()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100E48E5C()
{
  return sub_100E333B8(v0 + 16);
}

uint64_t sub_100E48E64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48E74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48E84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48E94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48EA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48EB8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48EC8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48ED8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48EE8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48EF8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F30()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E48F90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100E48FA4(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_100E49014()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49024()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49034()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49044()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49054()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49068()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49078()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4908C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4909C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E490AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E490BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E490D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E490E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E490F0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49100()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49110()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49124()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49134()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49148()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49158()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4916C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4917C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49190()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E491A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E491B4()
{
  return Data.hexString.getter();
}

uint64_t sub_100E491BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E491CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E491E0()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 200), *(void *)(v0 + 208));

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_100E49270()
{
  return *(unsigned __int8 *)(v0 + 192);
}

uint64_t sub_100E49278()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49288()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49298()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E492A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E492B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E492C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100E492D8(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[21];
  uint64_t v24 = a1[20];
  uint64_t v26 = a1[23];
  uint64_t v25 = a1[24];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  return a1;
}

uint64_t sub_100E49434()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49444()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49454()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49464()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49474()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49484()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49494()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E494A4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E494B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E494C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E494D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E494E8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E494F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49508()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4951C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4952C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49540()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49550()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49564()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49574()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49588()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49598()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E495FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4960C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E4961C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E4962C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E4963C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4964C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4965C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4966C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4967C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4968C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E496A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E496B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E496C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E496D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E496E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E496F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49704()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49718()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49728()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4973C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4974C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49760()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49770()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49784()
{
  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t sub_100E4978C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4979C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E497AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E497E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E4981C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4982C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4983C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4984C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100E4985C(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[22];
  uint64_t v24 = a1[21];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  return a1;
}

uint64_t sub_100E49998()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E499D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E499E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E499F0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49A00()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49A10()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E49A20()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A30()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49A94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49AA8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49AB8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49ACC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49ADC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49AEC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49AFC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B30()
{
  return sub_100054BBC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100E49B50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49B98()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BA8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BB8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BC8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BD8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BE8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49BFC()
{
  sub_100E49DF8((uint64_t *)(v0 + 16), (void (*)(uint64_t, uint64_t))sub_1000361E0);
  return String.init<A>(describing:)();
}

uint64_t sub_100E49C64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49C74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49C88()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49C98()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49CAC@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 32);
  *a1 = v3;
  return sub_100061E54((uint64_t)&v3);
}

uint64_t sub_100E49CDC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49CEC()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100E49D00(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 48);
}

uint64_t sub_100E49D0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D30()
{
  return Data.hexString.getter();
}

uint64_t sub_100E49D38()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D48()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D5C()
{
  return Data.hexString.getter();
}

uint64_t sub_100E49D64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49D88()
{
  return Data.hexString.getter();
}

uint64_t sub_100E49D90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49DA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49DB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100E49DF0(uint64_t a1)
{
  sub_100E3172C(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *sub_100E49DF8(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  return a1;
}

uint64_t sub_100E49EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryProductInfo() - 8);
  return sub_100E4C5CC(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100E49F1C()
{
  return sub_10012AF08(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100E49F24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49F34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49F48()
{
  return sub_100E4A4AC(sub_100E31B80);
}

uint64_t sub_100E49F60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49F70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E49F84()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v23 = (v3 + 16) & ~v3;
  uint64_t v4 = v0 + v23;
  uint64_t v5 = v0 + v23 + v2[5];
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v23 + v2[16];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = v4 + v2[17];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v4 + v2[20];
  uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v12 + *(int *)(v13 + 40);
    if (!v10(v14, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
    }
    uint64_t v15 = v12 + *(int *)(v13 + 44);
    if (!v10(v15, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v0;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = (uint64_t *)(v4 + v2[23]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v4 + v2[24]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v20(v4 + v2[25], v8);
  v20(v4 + v2[26], v8);
  v20(v4 + v2[27], v8);
  v20(v4 + v2[28], v8);
  v20(v4 + v2[29], v8);
  v20(v4 + v2[30], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20(v4 + v2[37], v8);
  v20(v4 + v2[38], v8);
  v20(v4 + v2[39], v8);
  v20(v4 + v2[40], v8);
  v20(v4 + v2[41], v8);
  v20(v4 + v2[42], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v23 + v22, v3 | 7);
}

uint64_t sub_100E4A494()
{
  return sub_100E4A4AC(sub_100E31BD4);
}

uint64_t sub_100E4A4AC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryProductInfo() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_100E4A520()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A530()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A540()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E4A578()
{
  return sub_10012ACE8(*(void (**)(void *__return_ptr, uint64_t))(v0 + 16));
}

uint64_t sub_100E4A580()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A590()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A5A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E4A5B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A5C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A5D0()
{
  return sub_100E31C28(v0);
}

uint64_t sub_100E4A5D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A5E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A5F8()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 16), v1);
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E4A640()
{
  if (*(void *)(v0 + 24) >> 60 == 15) {
    return 0;
  }
  else {
    return Data.hexString.getter();
  }
}

uint64_t sub_100E4A67C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A68C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100E4A69C(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v12 = a1[9];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v5, v6);
  sub_10001CFB8(v7, v8);
  a2(v9, v10);
  a3(v11, v12);
  return a1;
}

uint64_t sub_100E4A74C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10001CFB8(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_10001CFB8(*(void *)(v0 + 88), *(void *)(v0 + 96));

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100E4A7A4@<X0>(_OWORD *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = v3;
  return sub_100061E54((uint64_t)&v3);
}

uint64_t sub_100E4A7D4()
{
  return sub_10012B3E4(*(void (**)(void *__return_ptr))(v0 + 16));
}

uint64_t sub_100E4A7DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A7EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A7FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100E4A80C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A81C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100E4A82C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100E4A894()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100E4A970(void (*a1)(unsigned char *))
{
  sub_1000610B8(v1 + 16, (uint64_t)v4);
  v4[41] = 1;
  a1(v4);
  return sub_10001DAB4((uint64_t)v4, &qword_10165FE98);
}

void sub_100E4A9D8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 168) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100E4A9E8(uint64_t a1)
{
  return sub_100E17CA0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E4AA08()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100E4AA58(uint64_t a1)
{
  return sub_100E18448(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E4AA64(uint64_t a1)
{
  return sub_100E14A50(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_100E4AA88(uint64_t a1)
{
  return sub_100E13C74(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100E4AAA8()
{
  return sub_100E4ABB8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_100E4AAC4(uint64_t a1)
{
  return sub_100E14554(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E4AAD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100E3A7C4(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100E4AB00()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100E4AB38(uint64_t a1)
{
  return sub_100E1B468(a1, *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100E4AB64()
{
  return sub_100567B24(32);
}

uint64_t sub_100E4AB6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100E1B0F8(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_100E4AB9C()
{
  return sub_100E4ABB8((void (*)(void))&_swift_release, 41);
}

uint64_t sub_100E4ABB8(void (*a1)(void), uint64_t a2)
{
  swift_release();
  swift_release();
  a1(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100E4AC1C(uint64_t a1)
{
  return sub_100E1566C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
}

unint64_t sub_100E4AC2C()
{
  unint64_t result = qword_10165FF98;
  if (!qword_10165FF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165FF98);
  }
  return result;
}

unint64_t sub_100E4AC80()
{
  unint64_t result = qword_10165FFA8;
  if (!qword_10165FFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165FFA8);
  }
  return result;
}

void sub_100E4ACD4(uint64_t a1)
{
  sub_100E125BC(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100E4ACF4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100E1306C(v0);
}

uint64_t sub_100E4AD84()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v25 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v23 = *(void *)(*(void *)(v3 - 8) + 64);
  swift_release();
  uint64_t v26 = (v2 + 24) & ~v2;
  uint64_t v27 = v0;
  uint64_t v4 = v0 + v26;
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = v0 + v26 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v26 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v10 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v10 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v10;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  uint64_t v12 = v4 + v1[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v14 = (uint64_t *)(v4 + v1[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (void (*)(unint64_t, uint64_t))v8;
  unint64_t v17 = (uint64_t *)(v4 + v1[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_10001CFB8(*v17, v18);
  }
  unint64_t v19 = (((v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + v24 + 8) & ~v24;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  sub_10001CFB8(*(void *)(v27 + v19), *(void *)(v27 + v19 + 8));
  v16(v27 + v19 + *(int *)(v3 + 24), v6);
  unint64_t v20 = v27 + v19 + *(int *)(v3 + 28);
  uint64_t v21 = type metadata accessor for MACAddress();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v27, ((v23 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v24 | 7);
}

uint64_t sub_100E4B224()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = v0 + v6;
  uint64_t v11 = *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[5] = v10;
  v12[6] = v11;
  v12[3] = v9;
  v12[4] = v8;
  v12[1] = sub_100033F68;
  uint64_t v12[2] = v7;
  return _swift_task_switch(sub_100E1313C, 0, 0);
}

unint64_t sub_100E4B3B8()
{
  return sub_100E13444(v0[2], v0[3], v0[4]);
}

uint64_t sub_100E4B3C4(uint64_t a1)
{
  return sub_100E0CB28(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100E4B3E4()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100E4B4D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(char **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return sub_100E0CEF4(v3, v4, v5, v7, v8);
}

uint64_t sub_100E4B56C()
{
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100E0F4E4(v0);
}

uint64_t sub_100E4B5FC()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v18 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v14 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = (v18 + v5 + 8) & ~v5;
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (v16 + v6 + v9) & ~v9;
  uint64_t v19 = v2 | v5 | v9 | 7;
  unint64_t v17 = ((*(void *)(v8 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v10 = v0 + v3;
  sub_10001CFB8(*(void *)v10, *(void *)(v10 + 8));
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(v10 + v1[8], v14);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v10 + v1[9], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v11(v0 + v16, v14);
  v12(v0 + v15, v7);
  swift_release();

  return _swift_deallocObject(v0, v17, v19);
}

uint64_t sub_100E4B864()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + v3);
  uint64_t v11 = v0 + v8;
  uint64_t v12 = (uint64_t *)(v0 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];

  return sub_100E0FB88(v9, v0 + v2, v10, v0 + v5, v11, v13, v14);
}

uint64_t sub_100E4B9DC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  unint64_t v6 = v3 + v4 + v5;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  char v9 = *(unsigned char *)(v0 + 32);
  uint64_t v10 = v0 + v3;
  uint64_t v11 = v0 + (v6 & ~v5);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = v11;
  *(unsigned char *)(v12 + 72) = v9;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v8;
  *(void *)(v12 + 8) = sub_100033F68;
  return _swift_task_switch(sub_100E0FE3C, 0, 0);
}

uint64_t sub_100E4BB3C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100E4BC10()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_100E10958(v3, v4, v5, v6);
}

uint64_t sub_100E4BCF8()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_errorRelease();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100E4BE58()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100033F68;
  *(void *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  return _swift_task_switch(sub_100E0F6D0, 0, 0);
}

unint64_t sub_100E4BF44()
{
  return sub_100E0F9C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100E4BF4C()
{
  return sub_100E4BF64((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E4BF64(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100E4C038(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_100E11B18(a1, v5, v6);
}

unint64_t sub_100E4C120()
{
  return sub_100E1014C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100E4C130(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100E4C19C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 33) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_release();
  sub_100173E88(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  uint64_t v11 = v0 + v4;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  uint64_t v13 = v0 + v8;
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  v12(v13 + v6[8], v1);
  uint64_t v14 = v13 + v6[9];
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100E4C35C()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100E4C444()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100033F68;
  *(void *)(v4 + 152) = v3;
  *(_OWORD *)(v4 + 136) = v5;
  return _swift_task_switch(sub_100E0C040, 0, 0);
}

uint64_t sub_100E4C530()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_10013911C(v2, v3);
}

uint64_t sub_100E4C5CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100E4C634(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100E4C694()
{
  return sub_100A3B998(v0[2], v0[3], v0[4]);
}

unsigned char *storeEnumTagSinglePayload for AirPodsPairingManager.AirPodsPairingManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E4C780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingManager.AirPodsPairingManagerError()
{
  return &type metadata for AirPodsPairingManager.AirPodsPairingManagerError;
}

unint64_t sub_100E4C7BC()
{
  unint64_t result = qword_101660060;
  if (!qword_101660060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660060);
  }
  return result;
}

unint64_t sub_100E4C810()
{
  unint64_t result = qword_101660068;
  if (!qword_101660068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660068);
  }
  return result;
}

uint64_t sub_100E4C868(uint64_t a1)
{
  return sub_100E4AA64(a1);
}

void sub_100E4C89C(unsigned char *a1@<X8>)
{
}

void sub_100E4CBB4()
{
}

void sub_100E4CBCC()
{
}

uint64_t sub_100E4CBE4(uint64_t a1)
{
  return sub_100E4AA88(a1);
}

ValueMetadata *type metadata accessor for AccessoryKeyrollIndicationPayload()
{
  return &type metadata for AccessoryKeyrollIndicationPayload;
}

unint64_t sub_100E4CC14(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100E4CC44();
  unint64_t result = sub_1002A5964();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100E4CC44()
{
  unint64_t result = qword_101660070;
  if (!qword_101660070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660070);
  }
  return result;
}

unint64_t sub_100E4CC98(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int8x16_t v5 = (int8x16_t)vdupq_n_s64(v2);
      unsigned int v6 = (uint64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v8 = v5;
      do
      {
        int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, v6[-1]), v5, (int8x16_t)v6[-1]);
        int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, *v6), v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, (uint64x2_t)v8), v5, v8);
      unint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      unint64_t v2 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v9.u64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (unint64_t *)(a1 + 8 * v4 + 32);
    do
    {
      unint64_t v14 = *v12++;
      unint64_t v13 = v14;
      if (v2 <= v14) {
        unint64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_100E4CD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = v8;
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    sub_100E8DE8C(a1 + v12, (uint64_t)&v18 - v9, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    swift_bridgeObjectRetain();
    uint64_t v13 = v11 - 1;
    if (v11 != 1)
    {
      uint64_t v16 = *(void *)(v19 + 72);
      uint64_t v17 = a1 + v16 + v12;
      do
      {
        sub_100E8DE8C(v17, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if (static Date.< infix(_:_:)())
        {
          sub_100E8DD7C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_100E8E4D4((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        }
        else
        {
          sub_100E8DD7C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        }
        v17 += v16;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    sub_100E8E4D4((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v4);
  }
  else
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    return v15(a2, 1, 1, v4);
  }
}

uint64_t sub_100E4CFC0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v9, 1, 1, v10);
    goto LABEL_5;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v37 = v11 + 16;
  v36(v9, a1 + v18, v10);
  uint64_t v31 = a1;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v38(v9, 0, 1, v10);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v35 = v11 + 48;
  if (v34(v9, 1, v10) == 1)
  {
    uint64_t v19 = v38;
LABEL_5:
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10163AC90);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(a2, 1, 1, v10);
  }
  unint64_t v30 = a2;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v33(v16, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v21 = v17 - 1;
  if (v21)
  {
    uint64_t v23 = *(void *)(v11 + 72);
    uint64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v23;
    unint64_t v25 = v31 + v23 + v18;
    uint64_t v26 = v33;
    while (1)
    {
      v36(v7, v25, v10);
      v38(v7, 0, 1, v10);
      if (v34(v7, 1, v10) == 1) {
        break;
      }
      v26(v14, v7, v10);
      sub_100E8DE34((unint64_t *)&qword_1016605E0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v28 = *v24;
      if (v27)
      {
        v28(v16, v10);
        v26(v16, v14, v10);
      }
      else
      {
        v28(v14, v10);
      }
      v25 += v32;
      if (!--v21) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v38(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
  uint64_t v22 = v30;
  v33(v30, v16, v10);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v38)(v22, 0, 1, v10);
}

uint64_t sub_100E4D3E8(uint64_t result)
{
  uint64_t v1 = result + 64;
  char v2 = *(unsigned char *)(result + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(result + 64);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v17 = *(void *)(result + 72);
    if (v17)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v17 = *(void *)(result + 80);
      if (v17)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v17 = *(void *)(result + 88);
        if (v17)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v17 = *(void *)(result + 96);
          if (v17)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v17 = *(void *)(result + 104);
            if (!v17) {
              goto LABEL_43;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  uint64_t v10 = *(void *)(result + 56);
  unint64_t result = *(void *)(v10 + 8 * v7);
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_7:
    uint64_t v13 = *(void *)(v10 + 8 * v12);
    if (result <= v13) {
      unint64_t result = v13;
    }
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v14);
  ++v6;
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 1;
  if (v14 + 1 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 2;
  if (v14 + 2 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 3;
  if (v14 + 3 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v9) {
      return result;
    }
    unint64_t v15 = *(void *)(v1 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_43:
  uint64_t v18 = 0;
  uint64_t v19 = 6;
  if (v9 > 6) {
    uint64_t v19 = v9;
  }
  uint64_t v20 = v19 - 6;
  while (v20 != v18)
  {
    unint64_t v17 = *(void *)(result + 112 + 8 * v18++);
    if (v17)
    {
      uint64_t v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_100E4D5E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = v8;
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    sub_100E8DE8C(a1 + v12, (uint64_t)&v18 - v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    swift_bridgeObjectRetain();
    uint64_t v13 = v11 - 1;
    if (v11 != 1)
    {
      uint64_t v16 = *(void *)(v19 + 72);
      uint64_t v17 = a1 + v16 + v12;
      do
      {
        sub_100E8DE8C(v17, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (static Date.< infix(_:_:)())
        {
          sub_100E8DD7C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          sub_100E8E4D4((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        else
        {
          sub_100E8DD7C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        v17 += v16;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    sub_100E8E4D4((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v4);
  }
  else
  {
    unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    return v15(a2, 1, 1, v4);
  }
}

uint64_t sub_100E4D854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for MACAddress();
  v8[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[11] = v10;
  v8[12] = *(void *)(v10 + 64);
  v8[13] = swift_task_alloc();
  return _swift_task_switch(sub_100E4D928, v7, 0);
}

uint64_t sub_100E4D928()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v13 = v0[4];
  uint64_t v6 = v0[2];
  unint64_t v5 = v0[3];
  v0[14] = *(void *)(v3 + 136);
  (*(void (**)(void))(v2 + 16))();
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v8 = (v1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (char *)swift_allocObject();
  v0[15] = v9;
  *((void *)v9 + 2) = v3;
  *((void *)v9 + 3) = v6;
  *((void *)v9 + 4) = v5;
  *((void *)v9 + 5) = v13;
  *((void *)v9 + 6) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v9[v7], v12, v11);
  *(void *)&v9[v8] = v14;
  *(void *)&v9[(v8 + 15) & 0xFFFFFFFFFFFFFFF8] = v15;
  swift_retain();
  sub_1000361E0(v6, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return _swift_task_switch(sub_100E4DA88, 0, 0);
}

uint64_t sub_100E4DA88()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8DFFC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E4DB90;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8E0A8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100E4DB90()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100E4DD24;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = sub_100E4DCC0;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100E4DCC0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E4DD24()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E4DD90, v1, 0);
}

uint64_t sub_100E4DD90()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E4DE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  long long v9[4] = a3;
  v9[2] = a1;
  uint64_t v10 = type metadata accessor for MACAddress();
  v9[11] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[12] = v11;
  v9[13] = *(void *)(v11 + 64);
  v9[14] = swift_task_alloc();
  v9[15] = sub_10000588C(&qword_101660FF0);
  v9[16] = swift_task_alloc();
  return _swift_task_switch(sub_100E4DF0C, v8, 0);
}

uint64_t sub_100E4DF0C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v17 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v15 = v0[14];
  uint64_t v16 = v0[6];
  uint64_t v7 = v0[4];
  v0[17] = *(void *)(v4 + 136);
  (*(void (**)(void))(v3 + 16))();
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  v0[18] = v10;
  *(void *)(v10 + 16) = v4;
  long long v12 = *(_OWORD *)(v7 + 48);
  long long v11 = *(_OWORD *)(v7 + 64);
  long long v13 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v10 + 56) = v13;
  *(_OWORD *)(v10 + 72) = v12;
  *(_OWORD *)(v10 + 88) = v11;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)v7;
  *(void *)(v10 + 104) = v6;
  *(void *)(v10 + 112) = v16;
  *(void *)(v10 + 120) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v8, v15, v2);
  *(void *)(v10 + v9) = v17;
  swift_retain();
  sub_100E8E3F8((uint64_t *)v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100E4E07C, 0, 0);
}

uint64_t sub_100E4E07C()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8E300;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E4E180;
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8E488, v3, v6);
}

uint64_t sub_100E4E180()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100E4E374;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = sub_100E4E2B0;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100E4E2B0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[16] + *(int *)(v0[15] + 48);
  sub_100E8E4D4(v0[16], v0[2], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100E8E4D4(v2, v1, type metadata accessor for OwnedBeaconGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100E4E374()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E4E3E0, v1, 0);
}

uint64_t sub_100E4E3E0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E4E45C@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v46 = a1;
  uint64_t v42 = a3;
  uint64_t v55 = sub_10000588C(&qword_101661010);
  uint64_t v6 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v45 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v53 - 8);
  uint64_t v9 = __chkstk_darwin(v53);
  unint64_t v52 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v50 = (char *)&v42 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163B8A0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v43 = a2 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v54 = v8;
  uint64_t v48 = v8 + 32;
  uint64_t v49 = v8 + 16;
  id v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v57 = a2;
  uint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v51 = v14;
  uint64_t v21 = v50;
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v60 = v4;
  uint64_t v58 = (v18 - 1) & v18;
  int64_t v59 = v20;
  for (unint64_t i = __clz(__rbit64(v18)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v26 << 6))
  {
    uint64_t v29 = v57;
    uint64_t v30 = v54;
    unint64_t v31 = *(void *)(v54 + 72) * i;
    uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
    v32(v21, *(void *)(v57 + 48) + v31, v23);
    v32(v22, *(void *)(v29 + 56) + v31, v23);
    uint64_t v33 = v55;
    uint64_t v14 = v51;
    uint64_t v34 = &v51[*(int *)(v55 + 48)];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v51, v21, v23);
    v35(v34, v22, v23);
    uint64_t v36 = *v56;
    (*v56)(v14, 0, 1, v33);
    if ((*v47)(v14, 1, v33) == 1)
    {
      swift_release();
      uint64_t v40 = v55;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v42, 1, 1, v40);
    }
    uint64_t v37 = v45;
    sub_10001D608((uint64_t)v14, v45, &qword_101661010);
    uint64_t v38 = v60;
    char v39 = v46(v37);
    uint64_t v4 = v38;
    if (v38)
    {
      sub_10001DAB4(v37, &qword_101661010);
      return swift_release();
    }
    if (v39)
    {
      swift_release();
      uint64_t v41 = v42;
      sub_10001D608(v37, v42, &qword_101661010);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v36)(v41, 0, 1, v55);
    }
    uint64_t result = sub_10001DAB4(v37, &qword_101661010);
    unint64_t v18 = v58;
    int64_t v20 = v59;
    if (v58) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v25 = __OFADD__(v20, 1);
    int64_t v26 = v20 + 1;
    if (v25) {
      break;
    }
    if (v26 >= v44) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v26);
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v44) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v28);
      if (v27) {
        goto LABEL_16;
      }
      int64_t v28 = v26 + 2;
      if (v26 + 2 >= v44) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v28);
      if (v27) {
        goto LABEL_16;
      }
      int64_t v28 = v26 + 3;
      if (v26 + 3 >= v44) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v28);
      if (v27)
      {
LABEL_16:
        int64_t v26 = v28;
        goto LABEL_17;
      }
      int64_t v28 = v26 + 4;
      if (v26 + 4 < v44)
      {
        unint64_t v27 = *(void *)(v43 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            int64_t v26 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_33;
            }
            if (v26 >= v44) {
              goto LABEL_30;
            }
            unint64_t v27 = *(void *)(v43 + 8 * v26);
            ++v28;
            if (v27) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_30:
      uint64_t v40 = v55;
      uint64_t v36 = *v56;
      (*v56)(v14, 1, 1, v55);
      swift_release();
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v42, 1, 1, v40);
    }
LABEL_17:
    uint64_t v60 = v4;
    uint64_t v58 = (v27 - 1) & v27;
    int64_t v59 = v26;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100E4E988(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_100E4EA40(a1, a2, a3, (void (*)(void))type metadata accessor for Service, &qword_101660848, (void (*)(uint64_t))type metadata accessor for Service);
}

uint64_t sub_100E4E9E4(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_100E4EA40(a1, a2, a3, (void (*)(void))type metadata accessor for Characteristic, &qword_101655B60, (void (*)(uint64_t))type metadata accessor for Characteristic);
}

uint64_t sub_100E4EA40(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v7 = v6;
  uint64_t v8 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    a4(0);
    sub_100E8DE34(a5, 255, a6);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v8 = v32;
    uint64_t v31 = v33;
    uint64_t v14 = v34;
    int64_t v15 = v35;
    unint64_t v16 = v36;
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v18 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v16 = v20 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v14 = v18;
    int64_t v15 = 0;
  }
  int64_t v30 = (unint64_t)(v14 + 64) >> 6;
  if ((v8 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    a4(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v21 = v37;
    swift_unknownObjectRelease();
    int64_t v22 = v15;
    uint64_t v23 = v16;
    while (v21)
    {
      uint64_t v37 = v21;
      char v27 = a1(&v37);
      if (v7)
      {
        swift_release();
LABEL_36:
        sub_100132C20();
        return v21;
      }
      if (v27) {
        goto LABEL_36;
      }
      uint64_t result = swift_release();
      int64_t v15 = v22;
      unint64_t v16 = v23;
      if (v8 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v16)
      {
        uint64_t v23 = (v16 - 1) & v16;
        unint64_t v24 = __clz(__rbit64(v16)) | (v15 << 6);
        int64_t v22 = v15;
      }
      else
      {
        int64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          return result;
        }
        if (v22 >= v30) {
          break;
        }
        unint64_t v25 = *(void *)(v31 + 8 * v22);
        if (!v25)
        {
          int64_t v26 = v15 + 2;
          if (v15 + 2 >= v30) {
            break;
          }
          unint64_t v25 = *(void *)(v31 + 8 * v26);
          if (v25) {
            goto LABEL_22;
          }
          int64_t v26 = v15 + 3;
          if (v15 + 3 >= v30) {
            break;
          }
          unint64_t v25 = *(void *)(v31 + 8 * v26);
          if (v25) {
            goto LABEL_22;
          }
          int64_t v26 = v15 + 4;
          if (v15 + 4 >= v30) {
            break;
          }
          unint64_t v25 = *(void *)(v31 + 8 * v26);
          if (v25)
          {
LABEL_22:
            int64_t v22 = v26;
          }
          else
          {
            int64_t v22 = v15 + 5;
            if (v15 + 5 >= v30) {
              break;
            }
            unint64_t v25 = *(void *)(v31 + 8 * v22);
            if (!v25)
            {
              int64_t v28 = v15 + 6;
              while (v30 != v28)
              {
                unint64_t v25 = *(void *)(v31 + 8 * v28++);
                if (v25)
                {
                  int64_t v22 = v28 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v23 = (v25 - 1) & v25;
        unint64_t v24 = __clz(__rbit64(v25)) + (v22 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v8 + 48) + 8 * v24);
      swift_retain();
    }
  }
  sub_100132C20();
  return 0;
}

uint64_t sub_100E4ED78@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12)
  {
    uint64_t v19 = v9;
    uint64_t v20 = a3;
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100E8DE8C(v13, (uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
      char v15 = a1(v11);
      if (v3)
      {
        sub_100E8DD7C((uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
        return swift_bridgeObjectRelease();
      }
      if (v15) {
        break;
      }
      sub_100E8DD7C((uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = 1;
        a3 = v20;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    a3 = v20;
    sub_100E8E4D4((uint64_t)v11, v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v16 = 0;
LABEL_10:
    uint64_t v9 = v19;
  }
  else
  {
    uint64_t v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a3, v16, 1, v9);
}

uint64_t sub_100E4EF6C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v28 = type metadata accessor for BeaconStatus(0);
  uint64_t v6 = *(void *)(v28 - 8);
  uint64_t v7 = __chkstk_darwin(v28);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_100E8DE8C(*(void *)(a2 + 48) + *(void *)(v6 + 72) * i, (uint64_t)v11, type metadata accessor for BeaconStatus);
    sub_100E8E4D4((uint64_t)v11, (uint64_t)v9, type metadata accessor for BeaconStatus);
    char v23 = a1(v9);
    if (v3)
    {
      sub_100E8DD7C((uint64_t)v9, type metadata accessor for BeaconStatus);
      return swift_release();
    }
    if (v23)
    {
      swift_release();
      uint64_t v24 = v29;
      sub_100E8E4D4((uint64_t)v9, v29, type metadata accessor for BeaconStatus);
      uint64_t v25 = 0;
      uint64_t v26 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
    uint64_t result = sub_100E8DD7C((uint64_t)v9, type metadata accessor for BeaconStatus);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v30 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v31)
      {
        unint64_t v21 = *(void *)(v30 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_31;
            }
            if (v17 >= v31) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v30 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      uint64_t v26 = v28;
      uint64_t v24 = v29;
      swift_release();
      uint64_t v25 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100E4F2AC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * i);
    uint64_t v20 = v18;
    swift_bridgeObjectRetain();
    char v19 = a1(&v20);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v18;
    }
    if (v19)
    {
      swift_release();
      return v18;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        int64_t v12 = v17;
        goto LABEL_17;
      }
      int64_t v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            int64_t v12 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              goto LABEL_31;
            }
            if (v12 >= v10) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v12);
            ++v17;
            if (v16) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release();
      return 0;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_100E4F46C(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v70 = a2;
  unint64_t v69 = a1;
  uint64_t v60 = a3;
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  uint64_t v61 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v73 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v7 - 8);
  uint64_t v95 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for URL();
  uint64_t v90 = *(char **)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v79 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v10 - 8);
  int64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DirectorySequence();
  uint64_t v85 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_101660590);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v78 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v89 = (uint64_t)&v60 - v19;
  uint64_t v81 = sub_10000588C(&qword_10164B2B0);
  BOOL v68 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 - 8);
  uint64_t v20 = __chkstk_darwin(v81);
  uint64_t v84 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v83 = (uint64_t)&v60 - v22;
  uint64_t v23 = sub_10000588C(&qword_101653CB0);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v92 = *(char **)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v82 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v28 - 8);
  uint64_t v71 = (uint64_t)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C(&qword_1016496E0);
  __chkstk_darwin(v30 - 8);
  uint64_t v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (uint64_t)v25;
  uint64_t v34 = v92;
  sub_10001D074(v94, (uint64_t)v32, &qword_1016496E0);
  uint64_t v74 = v32;
  sub_10001D074((uint64_t)v32, v33, &qword_101653CB0);
  int64_t v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v34 + 6);
  uint64_t v67 = v34 + 48;
  unint64_t v66 = v35;
  if (v35(v33, 1, v26) == 1)
  {
LABEL_2:
    sub_10001DAB4(v33, &qword_101653CB0);
    unint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
    v36(v71, 1, 1, v5);
LABEL_3:
    sub_10001DAB4((uint64_t)v74, &qword_1016496E0);
    v36(v60, 1, 1, v5);
    return;
  }
  uint64_t v93 = (char **)(v85 + 6);
  uint64_t v91 = (char **)(v85 + 4);
  uint64_t v77 = (void (**)(char *, uint64_t, uint64_t))(v90 + 32);
  unint64_t v86 = (void (**)(char *, uint64_t))(v85 + 1);
  uint64_t v87 = (unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
  unint64_t v75 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 7);
  id v76 = (void (**)(uint64_t, uint64_t))(v90 + 8);
  unint64_t v80 = v68 + 7;
  uint64_t v85 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 6);
  BOOL v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
  unint64_t v62 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  unint64_t v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  uint64_t v37 = v89;
  uint64_t v65 = v5;
  uint64_t v63 = v33;
  uint64_t v72 = v26;
  while (1)
  {
    uint64_t v94 = v4;
    uint64_t v38 = v33;
    char v39 = v82;
    sub_10001D608(v38, (uint64_t)v82, (uint64_t *)&unk_101653C80);
    uint64_t v40 = (uint64_t)&v39[*(int *)(v26 + 40)];
    sub_10001D074(v40, (uint64_t)v12, (uint64_t *)&unk_101653C90);
    uint64_t v92 = *v93;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v12, 1, v13) != 1) {
      break;
    }
    uint64_t v41 = v81;
LABEL_15:
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_101653C90);
    (*v80)(v37, 1, 1, v41);
LABEL_16:
    uint64_t v4 = v94;
    sub_10001DAB4((uint64_t)v82, (uint64_t *)&unk_101653C80);
    sub_10001DAB4(v37, (uint64_t *)&unk_101660590);
    uint64_t v54 = (uint64_t)v74;
    sub_10001DAB4((uint64_t)v74, &qword_101653CB0);
    (*v62)(v54, 1, 1, v72);
    unint64_t v36 = *v68;
    uint64_t v55 = v71;
    uint64_t v5 = v65;
    (*v68)(v71, 1, 1, v65);
LABEL_17:
    if ((*v64)(v55, 1, v5) == 1) {
      goto LABEL_3;
    }
    uint64_t v56 = v55;
    uint64_t v57 = v73;
    sub_100E8E4D4(v56, v73, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    char v58 = v69(v57);
    if (v4)
    {
      sub_100E8DD7C(v73, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4((uint64_t)v74, &qword_1016496E0);
      return;
    }
    if (v58)
    {
      sub_10001DAB4((uint64_t)v74, &qword_1016496E0);
      uint64_t v59 = v60;
      sub_100E8E4D4(v73, v60, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v36(v59, 0, 1, v5);
      return;
    }
    sub_100E8DD7C(v73, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v33 = v63;
    sub_10001D074((uint64_t)v74, v63, &qword_101653CB0);
    uint64_t v26 = v72;
    if (v66(v33, 1, v72) == 1) {
      goto LABEL_2;
    }
  }
  uint64_t v90 = *v91;
  uint64_t v41 = v81;
  while (1)
  {
    ((void (*)(char *, char *, uint64_t))v90)(v15, v12, v13);
    DirectorySequence.next()();
    uint64_t v42 = (uint64_t)v95;
    uint64_t v43 = v88;
    if ((*v87)(v95, 1, v88) == 1)
    {
      (*v86)(v15, v13);
      sub_10001DAB4(v42, &qword_101649E40);
      sub_10001DAB4(v40, (uint64_t *)&unk_101653C90);
      (*v75)(v40, 1, 1, v13);
      uint64_t v37 = v89;
      (*v80)(v89, 1, 1, v41);
      goto LABEL_12;
    }
    uint64_t v44 = (uint64_t)v78;
    uint64_t v45 = v12;
    uint64_t v46 = v15;
    uint64_t v47 = (uint64_t)v79;
    (*v77)(v79, v42, v43);
    uint64_t v49 = v94;
    sub_100E558A8(v47, v82, (uint64_t *)&unk_10163B7C0, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t *)&unk_101653C80, &qword_101659D38, (uint64_t)sub_100E649B4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, v44, &qword_10164B2B0);
    uint64_t v94 = v49;
    if (v49) {
      break;
    }
    (*v86)(v46, v13);
    uint64_t v50 = v47;
    unint64_t v15 = v46;
    (*v76)(v50, v43);
    uint64_t v37 = v89;
    sub_10001D608(v44, v89, (uint64_t *)&unk_101660590);
    int64_t v12 = v45;
    uint64_t v41 = v81;
LABEL_12:
    if ((*v85)(v37, 1, v41) == 1) {
      goto LABEL_16;
    }
    uint64_t v51 = v83;
    sub_10001D608(v37, v83, &qword_10164B2B0);
    uint64_t v52 = v51;
    uint64_t v53 = v84;
    sub_10001D608(v52, v84, &qword_10164B2B0);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10001DAB4((uint64_t)v82, (uint64_t *)&unk_101653C80);
      uint64_t v55 = v71;
      sub_100E8E4D4(v53, v71, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      unint64_t v36 = *v68;
      uint64_t v5 = v65;
      (*v68)(v55, 0, 1, v65);
      uint64_t v4 = v94;
      goto LABEL_17;
    }
    sub_10001DAB4(v53, &qword_10164B2B0);
    sub_10001D074(v40, (uint64_t)v12, (uint64_t *)&unk_101653C90);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v12, 1, v13) == 1) {
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_100E500E0(uint64_t (*a1)(void *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    unint64_t v27 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v5 = ~v8;
    unint64_t v27 = a3 + 64;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a3 + 64);
    unint64_t v7 = a3;
  }
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  int64_t v26 = (unint64_t)(v5 + 64) >> 6;
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v12 = __CocoaDictionary.Iterator.next()();
  if (!v12) {
    goto LABEL_36;
  }
  uint64_t v14 = v13;
  uint64_t v30 = v12;
  sub_10001D4B0(0, (unint64_t *)&qword_1016608B0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v15 = (id)v29[0];
  swift_unknownObjectRelease();
  uint64_t v30 = v14;
  sub_10001D4B0(0, &qword_10163BA40);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v16 = (id)v29[0];
  swift_unknownObjectRelease();
  int64_t v17 = v11;
  uint64_t v18 = v6;
  if (!v15) {
    goto LABEL_36;
  }
  while (1)
  {
    v29[0] = v15;
    v29[1] = v16;
    char v24 = a1(v29);
    if (v4)
    {

      sub_100132C20();
      return;
    }
    if (v24) {
      goto LABEL_36;
    }

    int64_t v11 = v17;
    unint64_t v6 = v18;
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v6) {
      break;
    }
    uint64_t v18 = (v6 - 1) & v6;
    unint64_t v19 = __clz(__rbit64(v6)) | (v11 << 6);
    int64_t v17 = v11;
LABEL_24:
    uint64_t v22 = 8 * v19;
    uint64_t v23 = *(void **)(*(void *)(v7 + 56) + v22);
    id v15 = *(id *)(*(void *)(v7 + 48) + v22);
    id v16 = v23;
    if (!v15) {
      goto LABEL_36;
    }
  }
  int64_t v17 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    return;
  }
  if (v17 >= v26) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v17);
  if (v20)
  {
LABEL_23:
    uint64_t v18 = (v20 - 1) & v20;
    unint64_t v19 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_24;
  }
  int64_t v21 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v21);
  if (v20) {
    goto LABEL_22;
  }
  int64_t v21 = v11 + 3;
  if (v11 + 3 >= v26) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v21);
  if (v20) {
    goto LABEL_22;
  }
  int64_t v21 = v11 + 4;
  if (v11 + 4 >= v26) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v21);
  if (v20)
  {
LABEL_22:
    int64_t v17 = v21;
    goto LABEL_23;
  }
  int64_t v17 = v11 + 5;
  if (v11 + 5 >= v26) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v17);
  if (v20) {
    goto LABEL_23;
  }
  int64_t v25 = v11 + 6;
  while (v26 != v25)
  {
    unint64_t v20 = *(void *)(v27 + 8 * v25++);
    if (v20)
    {
      int64_t v17 = v25 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  sub_100132C20();
}

uint64_t sub_100E5044C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_1015F9960, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9978, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101653D50, (void (*)(void))sub_100E8DABC, (uint64_t *)&unk_101660D78);
}

uint64_t sub_100E504F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t)&unk_1015F8E98, (uint64_t)sub_100E7FB1C, a5, (void **)sub_100132424, (uint64_t)&unk_1015F8EB0, (uint64_t)sub_100E7FB4C, (uint64_t *)&unk_10163B7C0, (void (*)(void))sub_100E8A60C, (uint64_t *)&unk_1016605D0);
}

uint64_t sub_100E50594@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_1015F8FD8, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F8FF0, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101638D10, (void (*)(void))sub_100E8AAA8, &qword_101660778);
}

uint64_t sub_100E50638@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1015F8F88, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F8FA0, (uint64_t)sub_100E8E6DC, &qword_10163BBB0, (void (*)(void))sub_100E8A940, (uint64_t *)&unk_101660710);
}

uint64_t sub_100E506DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1015F95F0, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9608, (uint64_t)sub_100E8E6DC, &qword_10163BB20, (void (*)(void))sub_100E8D2B0, (uint64_t *)&unk_101660C20);
}

uint64_t sub_100E50780@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_1015F9870, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9888, (uint64_t)sub_100E8E6DC, &qword_1016593C8, (void (*)(void))sub_100E8D894, (uint64_t *)&unk_101660D20);
}

uint64_t sub_100E50824@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t)&unk_1015F97D0, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F97E8, (uint64_t)sub_100E8E6DC, &qword_10163BB70, (void (*)(void))sub_100E8D724, (uint64_t *)&unk_101660CE0);
}

uint64_t sub_100E508C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t)&unk_1015F9028, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9040, (uint64_t)sub_100E8E6DC, &qword_1016426B0, (void (*)(void))sub_100E8B44C, &qword_1016609F0);
}

uint64_t sub_100E5096C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1015F98C0, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F98D8, (uint64_t)sub_100E8E6DC, &qword_10163BB80, (void (*)(void))sub_100E8D94C, (uint64_t *)&unk_101660D40);
}

uint64_t sub_100E50A10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t)&unk_1015F95A0, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F95B8, (uint64_t)sub_100E8E6DC, &qword_101660BF0, (void (*)(void))sub_100E8D1F8, &qword_101660C08);
}

uint64_t sub_100E50AB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t)&unk_1015F9910, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9928, (uint64_t)sub_100E8E6DC, &qword_101653F20, (void (*)(void))sub_100E8DA04, &qword_101660D60);
}

uint64_t sub_100E50B58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t)&unk_1015F9820, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9838, (uint64_t)sub_100E8E6DC, &qword_10164B290, (void (*)(void))sub_100E8D7DC, (uint64_t *)&unk_101660D00);
}

uint64_t sub_100E50BFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_1015F9640, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9658, (uint64_t)sub_100E8E6DC, &qword_1016511E0, (void (*)(void))sub_100E8D368, (uint64_t *)&unk_101660C40);
}

uint64_t sub_100E50CA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_1015F8F38, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F8F50, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101638D50, (void (*)(void))sub_100E8A888, (uint64_t *)&unk_1016606D0);
}

uint64_t sub_100E50D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v90 = a5;
  uint64_t v92 = a4;
  unint64_t v95 = a3;
  uint64_t v94 = a2;
  uint64_t v93 = a1;
  uint64_t v98 = a6;
  uint64_t v88 = type metadata accessor for CryptoError();
  unint64_t v91 = *(void *)(v88 - 8);
  uint64_t v6 = __chkstk_darwin(v88);
  unint64_t v86 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v89 = (char *)&v81 - v9;
  __chkstk_darwin(v8);
  uint64_t v87 = (char *)&v81 - v10;
  uint64_t v97 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v97 - 8);
  uint64_t v12 = __chkstk_darwin(v97);
  uint64_t v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v96 = (char *)&v81 - v15;
  uint64_t v16 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v81 - v21;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v16);
  sub_100E8DE34((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v23 = aBlock;
  uint64_t v24 = v105;
  int64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, v16);
  v25(v22, v16);
  if (v23 == v24)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100D0D0F8(&aBlock);
    return sub_10001D608((uint64_t)&aBlock, v98, &qword_101660F30);
  }
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v96;
  URL.appendingPathExtension(_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v30 = v11 + 8;
  uint64_t v29 = v31;
  uint64_t v32 = v97;
  v31(v14, v97);
  uint64_t v33 = v99;
  uint64_t v34 = Data.init(contentsOf:options:)();
  if (v33)
  {
    swift_errorRelease();
    v29(v28, v32);
    sub_100D0D0F8(&aBlock);
    return sub_10001D608((uint64_t)&aBlock, v98, &qword_101660F30);
  }
  uint64_t v94 = v34;
  unint64_t v95 = v35;
  uint64_t v84 = v29;
  uint64_t v85 = v30;
  char v36 = static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v37 = swift_allocObject();
  long long v81 = xmmword_101342130;
  *(_OWORD *)(v37 + 16) = xmmword_101342130;
  sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v38 = v28;
  uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v41 = v40;
  *(void *)(v37 + 56) = &type metadata for String;
  unint64_t v83 = sub_10000B4CC();
  *(void *)(v37 + 64) = v83;
  *(void *)(v37 + 32) = v39;
  *(void *)(v37 + 40) = v41;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t isEscapingClosureAtFileLocation = v93;
  uint64_t v43 = (void *)(v93 + 72);
  swift_beginAccess();
  unint64_t v44 = v90;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v105 = *(void *)(isEscapingClosureAtFileLocation + 72);
  uint64_t v46 = v105;
  *(void *)(isEscapingClosureAtFileLocation + 72) = 0x8000000000000000;
  unint64_t v48 = sub_100723FF4(v92, v44);
  uint64_t v49 = *(void *)(v46 + 16);
  BOOL v50 = (v47 & 1) == 0;
  uint64_t v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
    __break(1u);
    goto LABEL_34;
  }
  char v36 = v47;
  if (*(void *)(v46 + 24) >= v51)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_37;
    }
    while (1)
    {
LABEL_14:
      uint64_t v54 = v38;
      *uint64_t v43 = v46;
      swift_bridgeObjectRelease();
      uint64_t v55 = (void *)*v43;
      if ((v36 & 1) == 0)
      {
        v55[(v48 >> 6) + 8] |= 1 << v48;
        uint64_t v56 = (void *)(v55[6] + 16 * v48);
        void *v56 = v92;
        v56[1] = v44;
        *(void *)(v55[7] + 8 * v48) = 0;
        uint64_t v57 = v55[2];
        swift_bridgeObjectRetain();
        if (__OFADD__(v57, 1))
        {
          __break(1u);
LABEL_39:
          swift_once();
LABEL_23:
          uint64_t v69 = type metadata accessor for Logger();
          sub_100010324(v69, (uint64_t)qword_10170E9E8);
          swift_bridgeObjectRetain();
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          goto LABEL_27;
        }
        v55[2] = v57 + 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v58 = v55[7];
      uint64_t v59 = *(void *)(v58 + 8 * v48);
      BOOL v60 = __OFADD__(v59, 1);
      uint64_t v61 = v59 + 1;
      if (v60)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      *(void *)(v58 + 8 * v48) = v61;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void *)(isEscapingClosureAtFileLocation + 64);
      BOOL v60 = __OFADD__(v62, 1);
      uint64_t v63 = v62 + 1;
      if (v60) {
        goto LABEL_35;
      }
      *(void *)(isEscapingClosureAtFileLocation + 64) = v63;
      unint64_t v48 = v91;
      if (__ROR8__(0x1CAC083126E978D5 * v63 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v99 = sub_100B6BC28();
        unint64_t v44 = v64;
        uint64_t v65 = swift_bridgeObjectRetain();
        uint64_t v66 = sub_100E4D3E8(v65);
        char v68 = v67;
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0 && v66 >= 10001)
        {
          if (qword_101636F50 == -1) {
            goto LABEL_23;
          }
          goto LABEL_39;
        }
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_100010324(v72, (uint64_t)qword_10170E9E8);
        swift_bridgeObjectRetain();
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.info.getter();
LABEL_27:
        os_log_type_t v73 = v71;
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v74 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v74 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v105 = sub_1008FA0F0(v99, v44, (uint64_t *)&aBlock);
          uint64_t v54 = v38;
          unint64_t v48 = v91;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v70, v73, "readStatistics:\n%{public}s", v74, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t isEscapingClosureAtFileLocation = v93;
      }
      unint64_t v44 = *(void *)(isEscapingClosureAtFileLocation + 24);
      unint64_t v75 = *(NSObject **)(v44 + 72);
      uint64_t v76 = swift_allocObject();
      char v36 = v76;
      *(void *)(v76 + 16) = sub_100E7FB1C;
      *(void *)(v76 + 24) = v44;
      uint64_t v103 = sub_1003B7AE0;
      uint64_t v104 = v76;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v101 = sub_1000A70B0;
      uint64_t v102 = &unk_1015F9A40;
      uint64_t v43 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v75, v43);
      _Block_release(v43);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t v77 = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        __chkstk_darwin(v77);
        uint64_t v78 = v94;
        *((void *)&v81 - 4) = v44;
        *((void *)&v81 - 3) = v78;
        *((void *)&v81 - 2) = v95;
        OS_dispatch_queue.sync<A>(execute:)();
        long long v79 = aBlock;
        sub_100E55080();
        v84(v54, v97);
        sub_10001CFB8(v79, *((unint64_t *)&v79 + 1));
        return sub_10001CFB8(v94, v95);
      }
LABEL_36:
      __break(1u);
LABEL_37:
      sub_100E7F96C();
      uint64_t v46 = v105;
    }
  }
  sub_100E68000(v51, isUniquelyReferenced_nonNull_native);
  uint64_t v46 = v105;
  uint64_t v52 = sub_100723FF4(v92, v44);
  if ((v36 & 1) == (v53 & 1))
  {
    unint64_t v48 = v52;
    goto LABEL_14;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100E51DC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_1015F9730, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9748, (uint64_t)sub_100E8E6DC, &qword_10164A380, (void (*)(void))sub_100E8D5B4, (uint64_t *)&unk_101660CA0);
}

uint64_t sub_100E51E64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_1015F9690, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F96A8, (uint64_t)sub_100E8E6DC, &qword_10164A370, (void (*)(void))sub_100E8D420, (uint64_t *)&unk_101660C60);
}

uint64_t sub_100E51F08@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(char *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v119 = a6;
  uint64_t v112 = a5;
  uint64_t v113 = a1;
  uint64_t v114 = a4;
  uint64_t v115 = a2;
  unint64_t v116 = a3;
  uint64_t v109 = type metadata accessor for CryptoError();
  uint64_t v111 = *(void *)(v109 - 8);
  uint64_t v6 = __chkstk_darwin(v109);
  Class v107 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v110 = (char *)&v103 - v9;
  __chkstk_darwin(v8);
  id v108 = (char *)&v103 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v117 = v11;
  uint64_t v118 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v103 - v16;
  uint64_t v18 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v103 - v23;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v18);
  sub_100E8DE34((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v25 = aBlock;
  uint64_t v26 = v127;
  unint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v22, v18);
  v27(v24, v18);
  if (v25 == v26)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    goto LABEL_7;
  }
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  uint64_t v30 = v117;
  uint64_t v31 = v118 + 8;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v118 + 8);
  v32(v15, v117);
  uint64_t v33 = v120;
  uint64_t v34 = Data.init(contentsOf:options:)();
  if (v33)
  {
    swift_errorRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v17, v30);
LABEL_7:
    uint64_t v36 = v119;
    goto LABEL_8;
  }
  uint64_t v120 = 0;
  uint64_t v115 = v34;
  unint64_t v116 = v35;
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  unint64_t v37 = qword_10170EFB8;
  uint64_t v104 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v38 = swift_allocObject();
  long long v103 = xmmword_101342130;
  *(_OWORD *)(v38 + 16) = xmmword_101342130;
  sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
  id v106 = v17;
  uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v41 = v40;
  *(void *)(v38 + 56) = &type metadata for String;
  unint64_t v105 = sub_10000B4CC();
  *(void *)(v38 + 64) = v105;
  *(void *)(v38 + 32) = v39;
  *(void *)(v38 + 40) = v41;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v42 = v113;
  uint64_t v43 = v113 + 72;
  swift_beginAccess();
  uint64_t v44 = v112;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v127 = v42[9];
  uint64_t v46 = v127;
  v42[9] = 0x8000000000000000;
  unint64_t v48 = sub_100723FF4((uint64_t)v114, v44);
  uint64_t v49 = *(void *)(v46 + 16);
  BOOL v50 = (v47 & 1) == 0;
  uint64_t v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v37 = v47;
  if (*(void *)(v46 + 24) >= v51)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_46;
    }
    while (1)
    {
LABEL_16:
      *uint64_t v43 = v46;
      swift_bridgeObjectRelease();
      uint64_t v54 = (void *)*v43;
      if ((v37 & 1) == 0)
      {
        v54[(v48 >> 6) + 8] |= 1 << v48;
        uint64_t v55 = (void (**)(char *, uint64_t))(v54[6] + 16 * v48);
        *uint64_t v55 = v114;
        v55[1] = (void (*)(char *, uint64_t))v44;
        *(void *)(v54[7] + 8 * v48) = 0;
        uint64_t v56 = v54[2];
        swift_bridgeObjectRetain();
        if (__OFADD__(v56, 1))
        {
          __break(1u);
LABEL_48:
          swift_once();
LABEL_25:
          uint64_t v68 = type metadata accessor for Logger();
          sub_100010324(v68, (uint64_t)qword_10170E9E8);
          swift_bridgeObjectRetain();
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          goto LABEL_29;
        }
        v54[2] = v56 + 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v57 = v54[7];
      uint64_t v58 = *(void *)(v57 + 8 * v48);
      BOOL v59 = __OFADD__(v58, 1);
      uint64_t v60 = v58 + 1;
      if (v59)
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      *(void *)(v57 + 8 * v48) = v60;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = v42[8];
      BOOL v59 = __OFADD__(v61, 1);
      uint64_t v62 = v61 + 1;
      if (v59) {
        goto LABEL_44;
      }
      v42[8] = v62;
      if (__ROR8__(0x1CAC083126E978D5 * v62 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v44 = sub_100B6BC28();
        unint64_t v37 = v63;
        uint64_t v64 = swift_bridgeObjectRetain();
        uint64_t v65 = sub_100E4D3E8(v64);
        char v67 = v66;
        swift_bridgeObjectRelease();
        if ((v67 & 1) == 0 && v65 >= 10001)
        {
          if (qword_101636F50 == -1) {
            goto LABEL_25;
          }
          goto LABEL_48;
        }
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v71 = type metadata accessor for Logger();
        sub_100010324(v71, (uint64_t)qword_10170E9E8);
        swift_bridgeObjectRetain();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.info.getter();
LABEL_29:
        os_log_type_t v72 = v70;
        if (os_log_type_enabled(v69, v70))
        {
          os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          uint64_t v74 = v44;
          uint64_t v44 = v31;
          *(_DWORD *)os_log_type_t v73 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v127 = sub_1008FA0F0(v74, v37, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v69, v72, "readStatistics:\n%{public}s", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v42 = v113;
      }
      uint64_t v118 = v31;
      uint64_t v114 = v32;
      unint64_t v48 = v42[3];
      unint64_t v75 = *(NSObject **)(v48 + 72);
      uint64_t v43 = (void *)swift_allocObject();
      v43[2] = sub_100E7FB1C;
      v43[3] = v48;
      BOOL v125 = sub_1003B7AE0;
      uint64_t v126 = v43;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v122 = 1107296256;
      uint64_t v123 = sub_1000A70B0;
      id v124 = &unk_1015F96F8;
      unint64_t v37 = (unint64_t)_Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v75, (dispatch_block_t)v37);
      _Block_release((const void *)v37);
      LOBYTE(v75) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t v76 = swift_release();
      if ((v75 & 1) == 0)
      {
        __chkstk_darwin(v76);
        uint64_t v77 = v115;
        *((void *)&v103 - 4) = v48;
        *((void *)&v103 - 3) = v77;
        *((void *)&v103 - 2) = v116;
        uint64_t v78 = v120;
        OS_dispatch_queue.sync<A>(execute:)();
        unint64_t v80 = v110;
        uint64_t v79 = v111;
        if (!v78)
        {
          uint64_t v93 = aBlock;
          unint64_t v94 = v122;
          sub_100E55244();
          uint64_t v96 = v117;
          uint64_t v97 = v106;
          v114(v97, v96);
          sub_10001CFB8(v93, v94);
          return sub_10001CFB8(v115, v116);
        }
        uint64_t v120 = 0;
        uint64_t aBlock = v78;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        long long v81 = v108;
        uint64_t v82 = v109;
        if (swift_dynamicCast())
        {
          swift_errorRelease();
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v80, v81, v82);
          static os_log_type_t.error.getter();
          uint64_t v83 = swift_allocObject();
          *(_OWORD *)(v83 + 16) = v103;
          uint64_t v113 = *(char **)(v79 + 16);
          ((void (*)(char *, char *, uint64_t))v113)(v107, v80, v82);
          uint64_t v84 = String.init<A>(describing:)();
          unint64_t v85 = v105;
          *(void *)(v83 + 56) = &type metadata for String;
          *(void *)(v83 + 64) = v85;
          *(void *)(v83 + 32) = v84;
          *(void *)(v83 + 40) = v86;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v87 = v42[4];
          uint64_t v88 = v117;
          uint64_t v89 = v82;
          unint64_t v90 = v106;
          if (v87)
          {
            sub_100E8DE34((unint64_t *)&qword_1016605B0, 255, (void (*)(uint64_t))&type metadata accessor for CryptoError);
            uint64_t v91 = swift_allocError();
            ((void (*)(uint64_t, char *, uint64_t))v113)(v92, v80, v89);
            swift_retain();
            sub_10105E700(v91);
            sub_10001CFB8(v115, v116);
            swift_release();
            (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v89);
            v114(v90, v88);
            swift_errorRelease();
          }
          else
          {
            sub_10001CFB8(v115, v116);
            (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v89);
            v114(v90, v88);
          }
          uint64_t v102 = (_OWORD *)v119;
          *(void *)(v119 + 80) = 0;
          v102[3] = 0u;
          v102[4] = 0u;
          v102[1] = 0u;
          v102[2] = 0u;
          *uint64_t v102 = 0u;
          return swift_errorRelease();
        }
        swift_errorRelease();
        static os_log_type_t.error.getter();
        uint64_t v98 = swift_allocObject();
        *(_OWORD *)(v98 + 16) = v103;
        uint64_t aBlock = v78;
        swift_errorRetain();
        uint64_t v99 = String.init<A>(describing:)();
        unint64_t v100 = v105;
        *(void *)(v98 + 56) = &type metadata for String;
        *(void *)(v98 + 64) = v100;
        *(void *)(v98 + 32) = v99;
        *(void *)(v98 + 40) = v101;
        os_log(_:dso:log:_:_:)();
        sub_10001CFB8(v115, v116);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v114)(v106, v117);
        uint64_t v36 = v119;
LABEL_8:
        *(void *)(v36 + 80) = 0;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)(v36 + 64) = 0u;
        *(_OWORD *)(v36 + 16) = 0u;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)uint64_t v36 = 0u;
        return result;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      sub_100E7F96C();
      uint64_t v46 = v127;
    }
  }
  sub_100E68000(v51, isUniquelyReferenced_nonNull_native);
  uint64_t v46 = v127;
  uint64_t v52 = sub_100723FF4((uint64_t)v114, v44);
  if ((v37 & 1) == (v53 & 1))
  {
    unint64_t v48 = v52;
    goto LABEL_16;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100E52DA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1015F9550, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9568, (uint64_t)sub_100E8E6DC, &qword_101660BB0, (void (*)(void))sub_100E8D098, &qword_101660BC8);
}

uint64_t sub_100E52E4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E52EF0(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1015F9780, (uint64_t)sub_100E7FB1C, a5, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9798, (uint64_t)sub_100E8E6DC, &qword_10164B2D0, (void (*)(void))sub_100E8D66C, (uint64_t *)&unk_101660CC0);
}

uint64_t sub_100E52EF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void **a3@<X3>, uint8_t *a4@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, void **a9, uint64_t a10, uint64_t a11, uint64_t *a12, void (*a13)(void), uint64_t *a14)
{
  uint64_t v95 = a6;
  uint64_t v96 = a7;
  uint64_t v104 = a5;
  uint64_t v105 = a8;
  uint64_t v97 = a4;
  uint64_t v98 = a3;
  unint64_t v99 = a2;
  unint64_t v100 = a1;
  uint64_t v92 = type metadata accessor for CryptoError();
  uint64_t v94 = *(void *)(v92 - 8);
  uint64_t v14 = __chkstk_darwin(v92);
  unint64_t v90 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v93 = (char *)&v86 - v17;
  __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v86 - v18;
  uint64_t v19 = type metadata accessor for URL();
  unint64_t v20 = *(void *)(v19 - 8);
  uint64_t v101 = v19;
  unint64_t v102 = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  long long v103 = (char *)&v86 - v24;
  uint64_t v25 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v86 - v30;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v29, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v25);
  sub_100E8DE34((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v32 = aBlock;
  uint64_t v33 = (void **)isa;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v34(v29, v25);
  v34(v31, v25);
  if (v32 == v33)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v35 = v104(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v105, 1, 1, v35);
  }
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = v103;
  URL.appendingPathExtension(_:)();
  uint64_t v39 = v101;
  unint64_t v40 = v102 + 8;
  uint64_t v41 = *(void ***)(v102 + 8);
  ((void (*)(char *, uint64_t))v41)(v23, v101);
  uint64_t v42 = v106;
  uint64_t v43 = Data.init(contentsOf:options:)();
  if (v42)
  {
    swift_errorRelease();
    ((void (*)(char *, uint64_t))v41)(v38, v39);
    uint64_t v45 = v104(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v105, 1, 1, v45);
  }
  uint64_t v89 = v43;
  unint64_t v99 = v44;
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v87 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v46 = swift_allocObject();
  long long v86 = xmmword_101342130;
  *(_OWORD *)(v46 + 16) = xmmword_101342130;
  sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v49 = v48;
  *(void *)(v46 + 56) = &type metadata for String;
  unint64_t v88 = sub_10000B4CC();
  *(void *)(v46 + 64) = v88;
  *(void *)(v46 + 32) = v47;
  *(void *)(v46 + 40) = v49;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  BOOL v50 = v100;
  p_uint64_t isa = &v100[9].isa;
  swift_beginAccess();
  uint64_t v52 = (void **)v97;
  swift_bridgeObjectRetain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t isa = (uint64_t)v50[9].isa;
  uint64_t v54 = isa;
  v50[9].uint64_t isa = (Class)0x8000000000000000;
  unint64_t v56 = sub_100723FF4((uint64_t)v98, (uint64_t)v52);
  uint64_t v57 = *(void *)(v54 + 16);
  BOOL v58 = (v55 & 1) == 0;
  uint64_t v59 = v57 + v58;
  if (__OFADD__(v57, v58))
  {
    __break(1u);
    goto LABEL_33;
  }
  LOBYTE(v50) = v55;
  if (*(void *)(v54 + 24) >= v59)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_36;
    }
    while (1)
    {
LABEL_14:
      *p_uint64_t isa = v54;
      swift_bridgeObjectRelease();
      uint64_t v62 = (void *)*p_isa;
      if ((v50 & 1) == 0)
      {
        v62[(v56 >> 6) + 8] |= 1 << v56;
        unint64_t v63 = (void ***)(v62[6] + 16 * v56);
        *unint64_t v63 = v98;
        v63[1] = v52;
        *(void *)(v62[7] + 8 * v56) = 0;
        uint64_t v64 = v62[2];
        swift_bridgeObjectRetain();
        if (__OFADD__(v64, 1))
        {
          __break(1u);
LABEL_38:
          swift_once();
LABEL_23:
          uint64_t v76 = type metadata accessor for Logger();
          sub_100010324(v76, (uint64_t)qword_10170E9E8);
          swift_bridgeObjectRetain();
          uint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.error.getter();
          goto LABEL_27;
        }
        v62[2] = v64 + 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v65 = v62[7];
      uint64_t v66 = *(void *)(v65 + 8 * v56);
      BOOL v67 = __OFADD__(v66, 1);
      uint64_t v68 = v66 + 1;
      if (v67)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *(void *)(v65 + 8 * v56) = v68;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v56 = (unint64_t)v100;
      Class v69 = v100[8].isa;
      BOOL v67 = __OFADD__(v69, 1);
      os_log_type_t v70 = (Class)((char *)v69 + 1);
      if (v67) {
        goto LABEL_34;
      }
      uint64_t v52 = a9;
      uint64_t isUniquelyReferenced_nonNull_native = a10;
      v100[8].uint64_t isa = v70;
      unint64_t v102 = v40;
      if (__ROR8__(0x1CAC083126E978D5 * (void)v70 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v106 = sub_100B6BC28();
        unint64_t v40 = v71;
        uint64_t v72 = swift_bridgeObjectRetain();
        uint64_t v73 = sub_100E4D3E8(v72);
        char v75 = v74;
        swift_bridgeObjectRelease();
        if ((v75 & 1) == 0 && v73 >= 10001)
        {
          if (qword_101636F50 == -1) {
            goto LABEL_23;
          }
          goto LABEL_38;
        }
        if (qword_101636F50 != -1) {
          swift_once();
        }
        uint64_t v79 = type metadata accessor for Logger();
        sub_100010324(v79, (uint64_t)qword_10170E9E8);
        swift_bridgeObjectRetain();
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.info.getter();
LABEL_27:
        os_log_type_t v80 = v78;
        if (os_log_type_enabled(v77, v78))
        {
          long long v81 = (uint8_t *)swift_slowAlloc();
          uint64_t v98 = (void **)swift_slowAlloc();
          uint64_t aBlock = v98;
          *(_DWORD *)long long v81 = 136446210;
          uint64_t v97 = v81 + 4;
          swift_bridgeObjectRetain();
          uint64_t isa = sub_1008FA0F0(v106, v40, (uint64_t *)&aBlock);
          unint64_t v56 = (unint64_t)v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v77, v80, "readStatistics:\n%{public}s", v81, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      uint64_t v98 = v41;
      unint64_t v56 = *(void *)(v56 + 24);
      BOOL v50 = *(NSObject **)(v56 + 72);
      p_uint64_t isa = (void *)swift_allocObject();
      p_isa[2] = v96;
      p_isa[3] = v56;
      uint64_t v111 = v52;
      uint64_t v112 = p_isa;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v108 = 1107296256;
      uint64_t v109 = sub_1000A70B0;
      uint64_t v110 = isUniquelyReferenced_nonNull_native;
      uint64_t v52 = (void **)_Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v50, v52);
      _Block_release(v52);
      LOBYTE(v50) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v50 & 1) == 0)
      {
        __chkstk_darwin(a11);
        uint64_t v82 = v89;
        *((void *)&v86 - 4) = v56;
        *((void *)&v86 - 3) = v82;
        *((void *)&v86 - 2) = v99;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v83 = (uint64_t)aBlock;
        unint64_t v84 = v108;
        sub_100E54EDC((uint64_t)v100, v83, v84, a12, a13, a14);
        ((void (*)(char *, uint64_t))v98)(v103, v101);
        sub_10001CFB8(v83, v84);
        return sub_10001CFB8(v89, v99);
      }
LABEL_35:
      __break(1u);
LABEL_36:
      sub_100E7F96C();
      uint64_t v54 = isa;
    }
  }
  sub_100E68000(v59, isUniquelyReferenced_nonNull_native);
  uint64_t v54 = isa;
  uint64_t v60 = sub_100723FF4((uint64_t)v98, (uint64_t)v52);
  if ((v50 & 1) == (v61 & 1))
  {
    unint64_t v56 = v60;
    goto LABEL_14;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100E53EAC@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E54078(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t *)&unk_1016607D0, (void (*)(void))sub_100E8ABE0, a5, &qword_1016607F8);
}

uint64_t sub_100E53F08@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E54078(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t *)&unk_10163B890, (void (*)(void))sub_100E8B544, a5, &qword_101660A50);
}

uint64_t sub_100E53F64@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E54078(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, &qword_1016593B8, (void (*)(void))sub_100E8C670, a5, &qword_101660B00);
}

uint64_t sub_100E53FC0@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E54078(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, &qword_10163B9E0, (void (*)(void))sub_100E8D140, a5, &qword_101660BE8);
}

uint64_t sub_100E5401C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100E54078(a1, a2, a3, a4, type metadata accessor for SecureLocationsCachedSharingKey, &qword_101660B90, (void (*)(void))sub_100E8CFE0, a5, &qword_101660BA8);
}

uint64_t sub_100E54078@<X0>(unint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t *a6@<X6>, void (*a7)(void)@<X7>, uint64_t a8@<X8>, uint64_t *a9)
{
  uint64_t v89 = a6;
  unint64_t v90 = a7;
  unint64_t v102 = a5;
  uint64_t v103 = a8;
  uint64_t v97 = (uint64_t *)a4;
  unint64_t v98 = a2;
  uint64_t v95 = a3;
  unint64_t v96 = a1;
  uint64_t v9 = type metadata accessor for CryptoError();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v93 = v9;
  uint64_t v94 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v88 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v92 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  uint64_t v91 = (char *)&v84 - v15;
  uint64_t v16 = type metadata accessor for URL();
  unint64_t v99 = *(void *)(v16 - 8);
  uint64_t v100 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v101 = (char *)&v84 - v20;
  uint64_t v21 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v84 - v26;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v25, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v21);
  sub_100E8DE34((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v28 = v105[0];
  uint64_t v29 = v106;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v25, v21);
  v30(v27, v21);
  if (v28 == v29)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v31 = v102(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v103, 1, 1, v31);
  }
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = v101;
  URL.appendingPathExtension(_:)();
  uint64_t v35 = v100;
  unint64_t v36 = v99 + 8;
  unint64_t v37 = *(void (**)(char *, uint64_t))(v99 + 8);
  v37(v19, v100);
  uint64_t v38 = v104;
  uint64_t v39 = Data.init(contentsOf:options:)();
  if (v38)
  {
    swift_errorRelease();
    v37(v34, v35);
    uint64_t v41 = v102(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v103, 1, 1, v41);
  }
  uint64_t v87 = v39;
  unint64_t v98 = v40;
  static os_log_type_t.debug.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v85 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v42 = swift_allocObject();
  long long v84 = xmmword_101342130;
  *(_OWORD *)(v42 + 16) = xmmword_101342130;
  sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v45 = v44;
  *(void *)(v42 + 56) = &type metadata for String;
  unint64_t v86 = sub_10000B4CC();
  *(void *)(v42 + 64) = v86;
  *(void *)(v42 + 32) = v43;
  *(void *)(v42 + 40) = v45;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v46 = v96;
  uint64_t v47 = (uint64_t *)(v96 + 72);
  swift_beginAccess();
  uint64_t v48 = (uint64_t)v97;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v106 = *(void *)(v46 + 72);
  uint64_t v50 = v106;
  *(void *)(v46 + 72) = 0x8000000000000000;
  unint64_t v52 = sub_100723FF4(v95, v48);
  uint64_t v53 = *(void *)(v50 + 16);
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (__OFADD__(v53, v54))
  {
    __break(1u);
    goto LABEL_32;
  }
  LOBYTE(v46) = v51;
  if (*(void *)(v50 + 24) < v55)
  {
    sub_100E68000(v55, isUniquelyReferenced_nonNull_native);
    uint64_t v50 = v106;
    uint64_t v56 = sub_100723FF4(v95, (uint64_t)v97);
    if ((v46 & 1) == (v57 & 1))
    {
      unint64_t v52 = v56;
      goto LABEL_14;
    }
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_34;
  }
  while (1)
  {
LABEL_14:
    *uint64_t v47 = v50;
    swift_bridgeObjectRelease();
    BOOL v58 = (void *)*v47;
    uint64_t v47 = v97;
    if ((v46 & 1) == 0)
    {
      v58[(v52 >> 6) + 8] |= 1 << v52;
      uint64_t v59 = (void *)(v58[6] + 16 * v52);
      void *v59 = v95;
      v59[1] = v47;
      *(void *)(v58[7] + 8 * v52) = 0;
      uint64_t v60 = v58[2];
      swift_bridgeObjectRetain();
      if (__OFADD__(v60, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      v58[2] = v60 + 1;
    }
    swift_bridgeObjectRetain();
    uint64_t v61 = v58[7];
    uint64_t v62 = *(void *)(v61 + 8 * v52);
    BOOL v63 = __OFADD__(v62, 1);
    uint64_t v64 = v62 + 1;
    if (v63)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(void *)(v61 + 8 * v52) = v64;
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v52 = v96;
    uint64_t v65 = *(void *)(v96 + 64);
    BOOL v63 = __OFADD__(v65, 1);
    uint64_t v66 = v65 + 1;
    if (!v63) {
      break;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    sub_100E7F96C();
    uint64_t v50 = v106;
  }
  *(void *)(v96 + 64) = v66;
  if (__ROR8__(0x1CAC083126E978D5 * v66 + 0x10624DD2F1A9FB8, 3) >= 0x4189374BC6A7EFuLL) {
    goto LABEL_30;
  }
  unint64_t v99 = v36;
  uint64_t v104 = sub_100B6BC28();
  unint64_t v36 = v67;
  uint64_t v68 = swift_bridgeObjectRetain();
  uint64_t v69 = sub_100E4D3E8(v68);
  char v71 = v70;
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0 && v69 >= 10001)
  {
    if (qword_101636F50 == -1)
    {
LABEL_23:
      uint64_t v72 = type metadata accessor for Logger();
      sub_100010324(v72, (uint64_t)qword_10170E9E8);
      swift_bridgeObjectRetain();
      uint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      goto LABEL_27;
    }
LABEL_36:
    swift_once();
    goto LABEL_23;
  }
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for Logger();
  sub_100010324(v75, (uint64_t)qword_10170E9E8);
  swift_bridgeObjectRetain();
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.info.getter();
LABEL_27:
  os_log_type_t v76 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    v105[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1008FA0F0(v104, v36, v105);
    unint64_t v52 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v73, v76, "readStatistics:\n%{public}s", v77, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_30:
  uint64_t v78 = sub_1010EBE40();
  unint64_t v80 = v79;
  uint64_t v82 = v52;
  uint64_t v83 = v81;
  sub_100E54EDC(v82, v78, v80, v89, v90, a9);
  v37(v101, v100);
  sub_10001CFB8(v78, v80);
  return sub_10001CFB8(v87, v98);
}

uint64_t sub_100E54EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void), uint64_t *a6)
{
  sub_10000588C(a4);
  a5();
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v6)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
    sub_10000588C(a6);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v14 = sub_10000B4CC();
    *(void *)(v10 + 64) = v14;
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v15 = String.init<A>(describing:)();
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v14;
    *(void *)(v10 + 72) = v15;
    *(void *)(v10 + 80) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100E55080()
{
  sub_10000588C(&qword_101660F30);
  sub_100E8D4D8(&qword_101660F38, &qword_101660F30, (void (*)(void))sub_1006F3364);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    sub_10000588C(&qword_101660F48);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100E55244()
{
  sub_10000588C(&qword_101659398);
  sub_100E8D4D8(&qword_101660C70, &qword_101659398, (void (*)(void))sub_100E8D550);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    sub_10000588C((uint64_t *)&unk_101660C80);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100E55408()
{
  type metadata accessor for SharedBeaconRecord(0);
  sub_100E8DE34(&qword_101660D70, 255, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    sub_10000588C(&qword_101660D90);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100E555D8()
{
  type metadata accessor for OwnedBeaconRecord();
  sub_100E8DE34(&qword_10165DD20, 255, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
    sub_10000588C(&qword_101660D88);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    unint64_t v6 = sub_10000B4CC();
    *(void *)(v2 + 64) = v6;
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v2 + 96) = &type metadata for String;
    *(void *)(v2 + 104) = v6;
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100E557A8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, &qword_10163B9F0, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, &qword_101660DC0, &qword_101660D88, (uint64_t)sub_100E8DC14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, a3, &qword_1016594B8);
}

uint64_t sub_100E55828@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_101653D50, type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101660DB0, &qword_101660D90, (uint64_t)sub_100E8DB64, type metadata accessor for SharedBeaconRecord, a3, &qword_101659D48);
}

uint64_t sub_100E558A8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void)@<X7>, uint64_t a9@<X8>, uint64_t *a10)
{
  uint64_t v122 = a8;
  uint64_t v130 = a7;
  uint64_t v126 = a5;
  uint64_t v127 = a6;
  uint64_t v137 = (char *)a9;
  uint64_t v132 = a2;
  uint64_t v136 = a10;
  uint64_t v13 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v121 = a3;
  uint64_t v128 = sub_10000588C(a3);
  __chkstk_darwin(v128);
  Swift::Int v131 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a4(0);
  uint64_t v129 = *(void **)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v120 = (uint64_t)&v115 - v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  Swift::Int v134 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v22 - 8);
  uint64_t v135 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v123 = (char *)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v133 = (char *)&v115 - v25;
  uint64_t v139 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v139 - 8);
  uint64_t v27 = __chkstk_darwin(v139);
  id v124 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  BOOL v125 = (char *)&v115 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v115 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  unint64_t v36 = (char *)&v115 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v115 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v115 - v40;
  uint64_t v140 = a1;
  if (URL.pathExtension.getter() == 0xD000000000000010 && v42 == 0x80000001013FB020)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170E9E8);
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    uint64_t v46 = v139;
    v45(v41, v140, v139);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v135 = swift_slowAlloc();
      uint64_t v142 = v135;
      *(_DWORD *)uint64_t v49 = 141558275;
      uint64_t v141 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 12) = 2081;
      Swift::Int v134 = (unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 14);
      sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v141 = sub_1008FA0F0(v50, v51, &v142);
      uint64_t v46 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v46);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Tombstoned file extension. Skipping file %{private,mask.hash}s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v46);
    }

    uint64_t v52 = (uint64_t)v137;
    uint64_t v53 = v140;
    v45(v137, v140, v46);
    uint64_t v54 = v52 + *(int *)(type metadata accessor for BeaconStoreFileRecord() + 20);
    v45((char *)v54, v53, v46);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v54, 0, 1, v46);
LABEL_11:
    uint64_t v55 = sub_10000588C(v136);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v52, 0, 1, v55);
  }
  uint64_t v119 = v15;
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_5;
  }
  if (URL.pathExtension.getter() == 0x64726F636572 && v57 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
    {
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v94 = type metadata accessor for Logger();
      sub_100010324(v94, (uint64_t)qword_10170E9E8);
      uint64_t v95 = v139;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v36, v140, v139);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v96))
      {
        uint64_t v97 = swift_slowAlloc();
        uint64_t v142 = swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 141558275;
        uint64_t v141 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v97 + 12) = 2081;
        uint64_t v140 = v97 + 14;
        sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v141 = sub_1008FA0F0(v98, v99, &v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v95);
        _os_log_impl((void *)&_mh_execute_header, v65, v96, "Invalid extension. Skipping file %{private,mask.hash}s", (uint8_t *)v97, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_34:
        uint64_t v106 = sub_10000588C(v136);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v137, 1, 1, v106);
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v95);
LABEL_33:

      goto LABEL_34;
    }
  }
  URL.deletingPathExtension()();
  URL.lastPathComponent.getter();
  uint64_t v59 = v26 + 8;
  uint64_t v60 = v26;
  uint64_t v118 = *(void (**)(char *, uint64_t))(v26 + 8);
  v118(v39, v139);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v62 = v134;
  uint64_t v61 = v135;
  if (v134[6](v21, 1, v135) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100010324(v63, (uint64_t)qword_10170E9E8);
    uint64_t v64 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v33, v140, v139);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v142 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 141558275;
      uint64_t v140 = v26 + 8;
      uint64_t v141 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v67 + 12) = 2081;
      sub_100E8DE34((unint64_t *)&qword_1016605A0, 255, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v141 = sub_1008FA0F0(v68, v69, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v118(v33, v64);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Invalid file identifier at URL: %{private,mask.hash}s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v118(v33, v64);
    }
    goto LABEL_33;
  }
  char v70 = v133;
  v62[4](v133, (uint64_t)v21, v61);
  uint64_t v116 = *(int *)(sub_10000588C(v126) + 36);
  uint64_t v71 = *(void *)&v132[v116];
  uint64_t v115 = v60;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  uint64_t v126 = (uint64_t *)(v60 + 16);
  uint64_t v117 = v72;
  ((void (*)(char *))v72)(v39);
  swift_retain();
  v73._countAndFlagsBits = 0xD000000000000014;
  v73._object = (void *)0x8000000101402BA0;
  prohibitAsyncContext(functionName:)(v73);
  uint64_t v142 = v17;
  sub_10000588C(v127);
  uint64_t v74 = String.init<A>(describing:)();
  uint64_t v140 = v59;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  __chkstk_darwin(v127);
  *(&v115 - 6) = v71;
  *(&v115 - 5) = (uint64_t)v70;
  *(&v115 - 4) = (uint64_t)v39;
  *(&v115 - 3) = v75;
  *(&v115 - 2) = v77;
  uint64_t v78 = (uint64_t)v131;
  uint64_t v79 = v138;
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v80 = v139;
  long long v81 = v118;
  v118(v39, v139);
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v129 + 6))(v78, 1, v17) == 1)
  {
    uint64_t v138 = v79;
    sub_10001DAB4(v78, v121);
    v117(v39, v132, v80);
    uint64_t v129 = (void *)URL.description.getter();
    unint64_t v83 = v82;
    v81(v39, v80);
    Swift::Int v131 = v39;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    sub_100010324(v84, (uint64_t)qword_10170E9E8);
    uint64_t v85 = v134;
    unint64_t v86 = v123;
    v134[2](v123, (uint64_t)v133, v135);
    swift_bridgeObjectRetain();
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = swift_slowAlloc();
      uint64_t v128 = swift_slowAlloc();
      uint64_t v142 = v128;
      *(_DWORD *)uint64_t v89 = 141558787;
      uint64_t v141 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v89 + 12) = 2081;
      uint64_t v90 = UUID.uuidString.getter();
      uint64_t v141 = sub_1008FA0F0(v90, v91, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v92 = (unsigned int (**)(char *, uint64_t, uint64_t))v85[1];
      uint64_t v130 = (unint64_t)(v85 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      Swift::Int v134 = v92;
      ((void (*)(char *, uint64_t))v92)(v86, v135);
      *(_WORD *)(v89 + 22) = 2160;
      uint64_t v141 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v89 + 32) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v141 = sub_1008FA0F0((uint64_t)v129, v83, &v142);
      uint64_t v80 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Could not read item %{private,mask.hash}s for records at: %{private,mask.hash}s", (uint8_t *)v89, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v93 = v132;
      swift_slowDealloc();
    }
    else
    {
      Class v107 = (unsigned int (**)(char *, uint64_t, uint64_t))v85[1];
      uint64_t v130 = (unint64_t)(v85 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      Swift::Int v134 = v107;
      ((void (*)(char *, uint64_t))v107)(v86, v135);

      swift_bridgeObjectRelease_n();
      uint64_t v93 = v132;
    }
    uint64_t v108 = v125;
    v117(v125, v93, v80);
    swift_retain();
    UUID.uuidString.getter();
    uint64_t v109 = v124;
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    uint64_t v110 = v118;
    v118(v109, v80);
    swift_release();
    v110(v108, v80);
    v117(v108, v93, v80);
    swift_retain();
    uint64_t v111 = v133;
    UUID.uuidString.getter();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    uint64_t v112 = (uint64_t)v119;
    URL.appendingPathExtension(_:)();
    v110(v109, v80);
    swift_release();
    v110(v108, v80);
    ((void (*)(char *, uint64_t))v134)(v111, v135);
    uint64_t v113 = v115;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v80);
    uint64_t v52 = (uint64_t)v137;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v137, v131, v80);
    uint64_t v114 = type metadata accessor for BeaconStoreFileRecord();
    sub_10001D608(v112, v52 + *(int *)(v114 + 20), &qword_101649E40);
    goto LABEL_11;
  }
  ((void (*)(char *, uint64_t))v134[1])(v133, v135);
  uint64_t v100 = v78;
  uint64_t v101 = v120;
  unint64_t v102 = v122;
  sub_100E8E4D4(v100, v120, v122);
  uint64_t v103 = v101;
  uint64_t v104 = (uint64_t)v137;
  sub_100E8E4D4(v103, (uint64_t)v137, v102);
  uint64_t v105 = sub_10000588C(v136);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
}

uint64_t sub_100E56BAC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_10163B7C0, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t *)&unk_101653C80, &qword_101659D38, (uint64_t)sub_100E649B4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, a3, &qword_10164B2B0);
}

uint64_t sub_100E56C2C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_101660670, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, &qword_101660680, &qword_101660688, (uint64_t)sub_100E8A710, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, a3, &qword_1016591F0);
}

uint64_t sub_100E56CAC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_101638D10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, &qword_101645750, &qword_101660760, (uint64_t)sub_100E8A9E8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, a3, &qword_10164B2A0);
}

uint64_t sub_100E56D2C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_1016607D0, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, &qword_101659458, &qword_1016607E0, (uint64_t)sub_100E8AB50, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, a3, &qword_101659D10);
}

uint64_t sub_100E56DAC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, (uint64_t *)&unk_10163B890, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t *)&unk_101660A10, &qword_10163A060, (uint64_t)sub_100E8B4F4, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, a3, (uint64_t *)&unk_101660A30);
}

uint64_t sub_100E56E2C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100E558A8(a1, a2, &qword_1016593B8, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, (uint64_t *)&unk_101660AB0, &qword_10163A068, (uint64_t)sub_100E8C620, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, a3, (uint64_t *)&unk_101660AE0);
}

uint64_t sub_100E56EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a8;
  uint64_t v30 = a4;
  uint64_t v31 = a7;
  v28[1] = a6;
  uint64_t v29 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(a5);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v22 = (v19 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v23 + v21, v20, v17);
  uint64_t v24 = (void *)(v23 + v22);
  uint64_t v25 = v30;
  *uint64_t v24 = v29;
  v24[1] = v25;
  aBlock[4] = v31;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = v33;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v36 = _swiftEmptyArrayStorage;
  sub_100E8DE34((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v34);
  return swift_release();
}

uint64_t sub_100E5724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100E56EAC(a1, a2, a3, a4, (uint64_t *)&unk_101660A80, (uint64_t)&unk_1015F9230, (uint64_t)sub_100E8C0FC, (uint64_t)&unk_1015F9248);
}

uint64_t sub_100E5727C(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  sub_10000588C((uint64_t *)&unk_1016565A0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100E57300(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101660A90);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v20 - v17;
  a2(v16);
  swift_storeEnumTagMultiPayload();
  sub_10001D608((uint64_t)v12, (uint64_t)v15, &qword_101660A90);
  sub_10001D608((uint64_t)v15, (uint64_t)v18, &qword_101660A90);
  sub_10001D074((uint64_t)v18, (uint64_t)v9, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20[0] = *v9;
    sub_10000588C((uint64_t *)&unk_101660A80);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100E8E4D4((uint64_t)v9, (uint64_t)v5, type metadata accessor for WildModeAssociationRecord);
    sub_10000588C((uint64_t *)&unk_101660A80);
    CheckedContinuation.resume(returning:)();
  }
  return sub_10001DAB4((uint64_t)v18, &qword_101660A90);
}

uint64_t sub_100E57544(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v27 = a6;
  uint64_t v28 = a1;
  uint64_t v26 = a4;
  uint64_t v8 = sub_10000588C(a4);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(a5);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v25 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v25 - v22;
  a2(v21);
  swift_storeEnumTagMultiPayload();
  sub_10001D608((uint64_t)v17, (uint64_t)v20, a5);
  sub_10001D608((uint64_t)v20, (uint64_t)v23, a5);
  sub_10001D074((uint64_t)v23, (uint64_t)v14, a5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = *v14;
    sub_10000588C(v27);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10001D608((uint64_t)v14, (uint64_t)v10, v26);
    sub_10000588C(v27);
    CheckedContinuation.resume(returning:)();
  }
  return sub_10001DAB4((uint64_t)v23, a5);
}

uint64_t type metadata accessor for UnsafeSynchronizer()
{
  return self;
}

uint64_t sub_100E57788()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E577A8, v0, 0);
}

uint64_t sub_100E577A8()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E5781C, 0, 0);
}

uint64_t sub_100E5781C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100E57930@<X0>(void *a1@<X8>)
{
  type metadata accessor for BeaconKeyManager(0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  *a1 = v3;
  return result;
}

void *sub_100E579B8(uint64_t a1)
{
  v10[0] = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v1[14] = 0xD000000000000010;
  v1[15] = 0x800000010137F570;
  type metadata accessor for UnsafeSynchronizer();
  uint64_t v8 = swift_allocObject();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_100E8DE34((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v8 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[16] = v10[0];
  v1[17] = v8;
  return v1;
}

uint64_t sub_100E57C6C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100E57C8C, v1, 0);
}

uint64_t sub_100E57C8C()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 128);
  return _swift_task_switch(sub_100E57CB4, 0, 0);
}

uint64_t sub_100E57CB4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E57DAC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100E57DAC()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100313080;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100771174;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100E57EC8(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 56) = a1;
  return _swift_task_switch(sub_100E57EEC, v1, 0);
}

uint64_t sub_100E57EEC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 56);
  *(void *)(v0 + 24) = *(void *)(v1 + 136);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 32) = v3;
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  swift_retain();
  return _swift_task_switch(sub_100E57F88, 0, 0);
}

uint64_t sub_100E57F88()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CFB0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E58090;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7348, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100E58090()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D6A88, v1, 0);
}

uint64_t sub_100E581E0(uint64_t a1, uint64_t a2)
{
  return sub_100A9E7EC(a2);
}

uint64_t sub_100E58208@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AD3988();
  *a1 = result;
  return result;
}

uint64_t sub_100E58234@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AD4584();
  *a1 = result;
  return result;
}

uint64_t sub_100E58260@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v48 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101659458);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)v39 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v43 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v39 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v39 - v17;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016607C0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v45 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v46 = (const void **)((char *)v39 - v22);
  uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101636958 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100010324(v10, (uint64_t)qword_10170DAB8);
  uint64_t v51 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v18, v23, v10);
  v24(v16, (uint64_t)v18, v10);
  uint64_t v40 = &v8[*(int *)(v5 + 40)];
  uint64_t v25 = (uint64_t)v40;
  uint64_t v26 = type metadata accessor for DirectorySequence();
  uint64_t v42 = v5;
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v44 = v18;
  v39[1] = v28 + 56;
  v29(v25, 1, 1, v26);
  v24(v8, (uint64_t)v16, v10);
  *(void *)&v8[*(int *)(v5 + 36)] = v41;
  v24(v43, (uint64_t)v16, v10);
  swift_retain();
  uint64_t v30 = (uint64_t)v48;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v31(v16, v10);
  v29(v30, 0, 1, v27);
  sub_1005E353C(v30, (uint64_t)v40);
  uint64_t v32 = v47;
  sub_10001D608((uint64_t)v8, v47, &qword_101659458);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  uint64_t v34 = (uint64_t)v45;
  uint64_t v35 = v42;
  v33(v45, 1, 1, v42);
  sub_10001DAB4(v34, &qword_101659460);
  sub_10001D608(v32, v34, &qword_101659458);
  v33((char *)v34, 0, 1, v35);
  unint64_t v36 = v46;
  sub_10001D608(v34, (uint64_t)v46, (uint64_t *)&unk_1016607C0);
  v31(v44, v10);
  size_t v37 = sub_100B768CC(v36);
  uint64_t result = sub_10001DAB4((uint64_t)v36, (uint64_t *)&unk_1016607C0);
  size_t *v50 = v37;
  return result;
}

uint64_t sub_100E5872C@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v48 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660A10);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)v39 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v43 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v39 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v39 - v17;
  uint64_t v19 = sub_10000588C(&qword_101659468);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v45 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v46 = (const void **)((char *)v39 - v22);
  uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101637160 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100010324(v10, (uint64_t)qword_10170EE20);
  uint64_t v51 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v18, v23, v10);
  v24(v16, (uint64_t)v18, v10);
  uint64_t v40 = &v8[*(int *)(v5 + 40)];
  uint64_t v25 = (uint64_t)v40;
  uint64_t v26 = type metadata accessor for DirectorySequence();
  uint64_t v42 = v5;
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v44 = v18;
  v39[1] = v28 + 56;
  v29(v25, 1, 1, v26);
  v24(v8, (uint64_t)v16, v10);
  *(void *)&v8[*(int *)(v5 + 36)] = v41;
  v24(v43, (uint64_t)v16, v10);
  swift_retain();
  uint64_t v30 = (uint64_t)v48;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v31(v16, v10);
  v29(v30, 0, 1, v27);
  sub_1005E353C(v30, (uint64_t)v40);
  uint64_t v32 = v47;
  sub_10001D608((uint64_t)v8, v47, (uint64_t *)&unk_101660A10);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  uint64_t v34 = (uint64_t)v45;
  uint64_t v35 = v42;
  v33(v45, 1, 1, v42);
  sub_10001DAB4(v34, (uint64_t *)&unk_101660A20);
  sub_10001D608(v32, v34, (uint64_t *)&unk_101660A10);
  v33((char *)v34, 0, 1, v35);
  unint64_t v36 = v46;
  sub_10001D608(v34, (uint64_t)v46, &qword_101659468);
  v31(v44, v10);
  size_t v37 = sub_100B775E4(v36);
  uint64_t result = sub_10001DAB4((uint64_t)v36, &qword_101659468);
  size_t *v50 = v37;
  return result;
}

uint64_t sub_100E58BF8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E58CC4, v2, 0);
}

uint64_t sub_100E58CC4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E58DB4, 0, 0);
}

uint64_t sub_100E58DB4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CEE0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v5);
}

uint64_t sub_100E58EC8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100B6CAE0(a1, a2);
}

uint64_t sub_100E58EF4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E58FC0, v2, 0);
}

uint64_t sub_100E58FC0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E590B0, 0, 0);
}

uint64_t sub_100E590B0()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163B890);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v5);
}

uint64_t sub_100E591C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100B6CCF0(a1, a2);
}

uint64_t sub_100E591F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AD4A7C();
  *a1 = result;
  return result;
}

uint64_t sub_100E5921C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AD5D50();
  *a1 = result;
  return result;
}

uint64_t sub_100E59248()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E59268, v0, 0);
}

uint64_t sub_100E59268()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E592DC, 0, 0);
}

uint64_t sub_100E592DC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100E593F4@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v48 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101645750);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)v39 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v43 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v39 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v39 - v17;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v45 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v46 = (const void **)((char *)v39 - v22);
  uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100010324(v10, (uint64_t)qword_10170ED28);
  uint64_t v51 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v18, v23, v10);
  v24(v16, (uint64_t)v18, v10);
  uint64_t v40 = &v8[*(int *)(v5 + 40)];
  uint64_t v25 = (uint64_t)v40;
  uint64_t v26 = type metadata accessor for DirectorySequence();
  uint64_t v42 = v5;
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v44 = v18;
  v39[1] = v28 + 56;
  v29(v25, 1, 1, v26);
  v24(v8, (uint64_t)v16, v10);
  *(void *)&v8[*(int *)(v5 + 36)] = v41;
  v24(v43, (uint64_t)v16, v10);
  swift_retain();
  uint64_t v30 = (uint64_t)v48;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v31(v16, v10);
  v29(v30, 0, 1, v27);
  sub_1005E353C(v30, (uint64_t)v40);
  uint64_t v32 = v47;
  sub_10001D608((uint64_t)v8, v47, &qword_101645750);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  uint64_t v34 = (uint64_t)v45;
  uint64_t v35 = v42;
  v33(v45, 1, 1, v42);
  sub_10001DAB4(v34, &qword_101645758);
  sub_10001D608(v32, v34, &qword_101645750);
  v33((char *)v34, 0, 1, v35);
  unint64_t v36 = v46;
  sub_10001D608(v34, (uint64_t)v46, (uint64_t *)&unk_101653CA0);
  v31(v44, v10);
  size_t v37 = sub_100B782FC(v36);
  uint64_t result = sub_10001DAB4((uint64_t)v36, (uint64_t *)&unk_101653CA0);
  size_t *v50 = v37;
  return result;
}

uint64_t sub_100E598C0()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E598E0, v0, 0);
}

uint64_t sub_100E598E0()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E59954, 0, 0);
}

uint64_t sub_100E59954()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_100E59A6C@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v48 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)v39 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v43 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v39 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v39 - v17;
  uint64_t v19 = sub_10000588C(&qword_1016496E0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v45 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v46 = (const void **)((char *)v39 - v22);
  uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100010324(v10, (uint64_t)qword_10170DD78);
  uint64_t v51 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v18, v23, v10);
  v24(v16, (uint64_t)v18, v10);
  uint64_t v40 = &v8[*(int *)(v5 + 40)];
  uint64_t v25 = (uint64_t)v40;
  uint64_t v26 = type metadata accessor for DirectorySequence();
  uint64_t v42 = v5;
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v44 = v18;
  v39[1] = v28 + 56;
  v29(v25, 1, 1, v26);
  v24(v8, (uint64_t)v16, v10);
  *(void *)&v8[*(int *)(v5 + 36)] = v41;
  v24(v43, (uint64_t)v16, v10);
  swift_retain();
  uint64_t v30 = (uint64_t)v48;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v31(v16, v10);
  v29(v30, 0, 1, v27);
  sub_1005E353C(v30, (uint64_t)v40);
  uint64_t v32 = v47;
  sub_10001D608((uint64_t)v8, v47, (uint64_t *)&unk_101653C80);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  uint64_t v34 = (uint64_t)v45;
  uint64_t v35 = v42;
  v33(v45, 1, 1, v42);
  sub_10001DAB4(v34, &qword_101653CB0);
  sub_10001D608(v32, v34, (uint64_t *)&unk_101653C80);
  v33((char *)v34, 0, 1, v35);
  unint64_t v36 = v46;
  sub_10001D608(v34, (uint64_t)v46, &qword_1016496E0);
  v31(v44, v10);
  size_t v37 = sub_100B745D0(v36);
  uint64_t result = sub_10001DAB4((uint64_t)v36, &qword_1016496E0);
  size_t *v50 = v37;
  return result;
}

uint64_t sub_100E59F38(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = *(void *)(v5 + 64);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_100E5A004, v2, 0);
}

uint64_t sub_100E5A004()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];
  v0[10] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  v0[11] = v10;
  *(void *)(v10 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(void *)(v10 + v9) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  return _swift_task_switch(sub_100E5A11C, 0, 0);
}

uint64_t sub_100E5A11C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100132E6C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5A234;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100E5A234()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

void sub_100E5A3A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v52 = a3;
  uint64_t v53 = a2;
  uint64_t v54 = a4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v5 - 8);
  uint64_t v50 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101645750);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)&v41 - v11;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v45 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v47 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v48 = (uint64_t)&v41 - v24;
  uint64_t v43 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_100010324(v12, (uint64_t)qword_10170ED28);
  uint64_t v55 = v13;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26(v20, v25, v12);
  v26(v18, (uint64_t)v20, v12);
  uint64_t v41 = &v10[*(int *)(v7 + 40)];
  uint64_t v27 = (uint64_t)v41;
  uint64_t v28 = type metadata accessor for DirectorySequence();
  uint64_t v46 = v20;
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v44 = v7;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v31(v27, 1, 1, v28);
  v26(v10, (uint64_t)v18, v12);
  *(void *)&v10[*(int *)(v7 + 36)] = v43;
  uint64_t v42 = v12;
  v26(v45, (uint64_t)v18, v12);
  swift_retain();
  uint64_t v32 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v55 + 8);
  v55 += 8;
  v33(v18, v12);
  v31(v32, 0, 1, v29);
  sub_1005E353C(v32, (uint64_t)v41);
  uint64_t v34 = v49;
  sub_10001D608((uint64_t)v10, v49, &qword_101645750);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  uint64_t v36 = (uint64_t)v47;
  uint64_t v37 = v44;
  v35(v47, 1, 1, v44);
  sub_10001DAB4(v36, &qword_101645758);
  sub_10001D608(v34, v36, &qword_101645750);
  v35((char *)v36, 0, 1, v37);
  sub_10001D608(v36, v48, (uint64_t *)&unk_101653CA0);
  uint64_t v38 = ((uint64_t (*)(char *, uint64_t))v33)(v46, v42);
  __chkstk_darwin(v38);
  uint64_t v39 = v53;
  *(&v41 - 2) = (char *)v52;
  *(&v41 - 1) = (char *)v39;
  sub_100658408(sub_10048321C, (uint64_t)(&v41 - 4));
  *uint64_t v54 = v40;
}

uint64_t sub_100E5A8AC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5A978, v2, 0);
}

uint64_t sub_100E5A978()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5AA68, 0, 0);
}

uint64_t sub_100E5AA68()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CCC4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101638D10);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v5);
}

uint64_t sub_100E5AB7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100B6CF00(a1, a2);
}

uint64_t sub_100E5ABA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100B6D110(a1, a2);
}

uint64_t sub_100E5ABD4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5ACA0, v2, 0);
}

uint64_t sub_100E5ACA0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5AD90, 0, 0);
}

uint64_t sub_100E5AD90()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CBF0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v5);
}

uint64_t sub_100E5AEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v51 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)&v40 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = sub_10000588C(&qword_1016496E0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v48 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v49 = (uint64_t)&v40 - v23;
  uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_100010324(v11, (uint64_t)qword_10170DD78);
  uint64_t v45 = v12;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v19, v24, v11);
  v25(v17, (uint64_t)v19, v11);
  uint64_t v42 = &v9[*(int *)(v6 + 40)];
  uint64_t v26 = (uint64_t)v42;
  uint64_t v27 = type metadata accessor for DirectorySequence();
  uint64_t v47 = v19;
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v43 = v6;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v30(v26, 1, 1, v27);
  v25(v9, (uint64_t)v17, v11);
  *(void *)&v9[*(int *)(v6 + 36)] = v41;
  uint64_t v44 = v11;
  v25(v46, (uint64_t)v17, v11);
  swift_retain();
  uint64_t v31 = (uint64_t)v51;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v17, v11);
  v30(v31, 0, 1, v28);
  sub_1005E353C(v31, (uint64_t)v42);
  uint64_t v33 = v50;
  sub_10001D608((uint64_t)v9, v50, (uint64_t *)&unk_101653C80);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
  uint64_t v35 = (uint64_t)v48;
  uint64_t v36 = v43;
  v34(v48, 1, 1, v43);
  sub_10001DAB4(v35, &qword_101653CB0);
  sub_10001D608(v33, v35, (uint64_t *)&unk_101653C80);
  v34((char *)v35, 0, 1, v36);
  uint64_t v37 = v49;
  sub_10001D608(v35, v49, &qword_1016496E0);
  uint64_t v38 = ((uint64_t (*)(char *, uint64_t))v32)(v47, v44);
  __chkstk_darwin(v38);
  *(&v40 - 2) = v53;
  sub_100E4F46C((uint64_t (*)(uint64_t))sub_100E64994, (uint64_t)(&v40 - 4), v54);
  return sub_10001DAB4(v37, &qword_1016496E0);
}

uint64_t sub_100E5B3AC(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5B474, v1, 0);
}

uint64_t sub_100E5B474()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5B564, 0, 0);
}

uint64_t sub_100E5B564()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8CB38;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

void sub_100E5B67C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v49 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v48 = (uint64_t)&v39 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = sub_10000588C(&qword_1016496E0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v46 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v47 = (uint64_t)&v39 - v23;
  uint64_t v42 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_100010324(v11, (uint64_t)qword_10170DD78);
  uint64_t v53 = v12;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v19, v24, v11);
  v25(v17, (uint64_t)v19, v11);
  uint64_t v40 = &v9[*(int *)(v6 + 40)];
  uint64_t v26 = (uint64_t)v40;
  uint64_t v27 = type metadata accessor for DirectorySequence();
  uint64_t v45 = v19;
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v43 = v6;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v30(v26, 1, 1, v27);
  v25(v9, (uint64_t)v17, v11);
  *(void *)&v9[*(int *)(v6 + 36)] = v42;
  uint64_t v41 = v11;
  v25(v44, (uint64_t)v17, v11);
  swift_retain();
  uint64_t v31 = (uint64_t)v49;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  v32(v17, v11);
  v30(v31, 0, 1, v28);
  sub_1005E353C(v31, (uint64_t)v40);
  uint64_t v33 = v48;
  sub_10001D608((uint64_t)v9, v48, (uint64_t *)&unk_101653C80);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
  uint64_t v35 = (uint64_t)v46;
  uint64_t v36 = v43;
  v34(v46, 1, 1, v43);
  sub_10001DAB4(v35, &qword_101653CB0);
  sub_10001D608(v33, v35, (uint64_t *)&unk_101653C80);
  v34((char *)v35, 0, 1, v36);
  sub_10001D608(v35, v47, &qword_1016496E0);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v32)(v45, v41);
  __chkstk_darwin(v37);
  *(&v39 - 2) = v51;
  sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E35A4, (uint64_t)(&v39 - 4));
  *uint64_t v52 = v38;
}

uint64_t sub_100E5BB78(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 168) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = type metadata accessor for MACAddress();
  *(void *)(v7 + 64) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 72) = v9;
  *(void *)(v7 + 80) = *(void *)(v9 + 64);
  *(void *)(v7 + 88) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v7 + 96) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 112) = *(void *)(v11 + 64);
  *(void *)(v7 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100E5BCB0, v6, 0);
}

uint64_t sub_100E5BCB0()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  char v19 = *(unsigned char *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 32);
  uint64_t v21 = *(void *)(v0 + 40);
  *(void *)(v0 + 128) = *(void *)(v8 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v10, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v12 = (v1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + v12 + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 136) = v14;
  *(void *)(v14 + 16) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v14 + v11, v2, v3);
  unint64_t v15 = v14 + v12;
  *(unsigned char *)unint64_t v15 = v19;
  *(void *)(v15 + 8) = v20;
  *(void *)(v15 + 16) = v21;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v14 + v13, v18, v17);
  swift_retain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100E5BE50, 0, 0);
}

uint64_t sub_100E5BE50()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C9B4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BF10);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5BF64;
  uint64_t v6 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8CAAC, v3, v5);
}

uint64_t sub_100E5BF64()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100E5C0D0, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100E5C0D0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E5C13C, v1, 0);
}

uint64_t sub_100E5C13C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E5C1B8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 96) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(v4 + 64);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_100E5C284, v2, 0);
}

uint64_t sub_100E5C284()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  char v5 = *(unsigned char *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 24);
  *(void *)(v0 + 64) = *(void *)(v3 + 136);
  sub_10001D074(v6, v1, &qword_101638CF0);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v7 + v2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 72) = v9;
  *(void *)(v9 + 16) = v3;
  sub_10001D608(v1, v9 + v7, &qword_101638CF0);
  *(unsigned char *)(v9 + v8) = v5;
  swift_retain();
  return _swift_task_switch(sub_100E5C378, 0, 0);
}

uint64_t sub_100E5C378()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  v3[2] = v2;
  v3[3] = sub_100485474;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5C490;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_100E5C490()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

void sub_100E5C604(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  int v52 = a3;
  uint64_t v51 = a2;
  uint64_t v53 = a4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v5 - 8);
  uint64_t v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101645750);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v40 - v11;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v44 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v46 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v47 = (uint64_t)&v40 - v24;
  uint64_t v42 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_100010324(v12, (uint64_t)qword_10170ED28);
  uint64_t v54 = v13;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26(v20, v25, v12);
  v26(v18, (uint64_t)v20, v12);
  uint64_t v40 = &v10[*(int *)(v7 + 40)];
  uint64_t v27 = (uint64_t)v40;
  uint64_t v28 = type metadata accessor for DirectorySequence();
  uint64_t v45 = v20;
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v43 = v7;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v31(v27, 1, 1, v28);
  v26(v10, (uint64_t)v18, v12);
  *(void *)&v10[*(int *)(v7 + 36)] = v42;
  uint64_t v41 = v12;
  v26(v44, (uint64_t)v18, v12);
  swift_retain();
  uint64_t v32 = (uint64_t)v49;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v54 + 8);
  v54 += 8;
  v33(v18, v12);
  v31(v32, 0, 1, v29);
  sub_1005E353C(v32, (uint64_t)v40);
  uint64_t v34 = v48;
  sub_10001D608((uint64_t)v10, v48, &qword_101645750);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
  uint64_t v36 = (uint64_t)v46;
  uint64_t v37 = v43;
  v35(v46, 1, 1, v43);
  sub_10001DAB4(v36, &qword_101645758);
  sub_10001D608(v34, v36, &qword_101645750);
  v35((char *)v36, 0, 1, v37);
  sub_10001D608(v36, v47, (uint64_t *)&unk_101653CA0);
  uint64_t v38 = ((uint64_t (*)(char *, uint64_t))v33)(v45, v41);
  __chkstk_darwin(v38);
  *(&v40 - 2) = (char *)v51;
  *((unsigned char *)&v40 - 8) = v52 & 1;
  sub_100658408(sub_100B5E240, (uint64_t)(&v40 - 4));
  *uint64_t v53 = v39;
}

uint64_t sub_100E5CB14(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5CBDC, v1, 0);
}

uint64_t sub_100E5CBDC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5CCCC, 0, 0);
}

uint64_t sub_100E5CCCC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C608;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AD0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008F914, v3, v5);
}

uint64_t sub_100E5CDE4@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  int v52 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AB0);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v41 - v9;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = sub_10000588C(&qword_101659448);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v45 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v48 = (uint64_t)&v41 - v22;
  uint64_t v44 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  sub_100010324(v10, (uint64_t)qword_10170ECE0);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = v11;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v23(v16, v18, v10);
  uint64_t v24 = (uint64_t)v8;
  uint64_t v41 = &v8[*(int *)(v5 + 40)];
  uint64_t v25 = (uint64_t)v41;
  uint64_t v26 = type metadata accessor for DirectorySequence();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v46 = v18;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v42 = v5;
  v28(v25, 1, 1, v26);
  v23((char *)v24, v16, v10);
  *(void *)(v24 + *(int *)(v5 + 36)) = v44;
  v23(v47, v16, v10);
  swift_retain();
  uint64_t v29 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v31 = v16;
  uint64_t v32 = v10;
  v30(v31, v10);
  v28(v29, 0, 1, v26);
  sub_1005E353C(v29, (uint64_t)v41);
  uint64_t v33 = v49;
  sub_10001D608(v24, v49, (uint64_t *)&unk_101660AB0);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  uint64_t v35 = (uint64_t)v45;
  uint64_t v36 = v42;
  v34(v45, 1, 1, v42);
  sub_10001DAB4(v35, (uint64_t *)&unk_101660AC0);
  sub_10001D608(v33, v35, (uint64_t *)&unk_101660AB0);
  v34((char *)v35, 0, 1, v36);
  uint64_t v37 = v48;
  sub_10001D608(v35, v48, &qword_101659448);
  v30(v46, v32);
  sub_10000588C(&qword_101659450);
  uint64_t v38 = (void *)swift_allocObject();
  sub_10001D608(v37, (uint64_t)v38 + *(void *)(class metadata base offset for _SequenceBox + *v38 + 16), &qword_101659448);
  size_t v39 = sub_100B79014((const void **)((char *)v38
                                    + *(void *)(class metadata base offset for _SequenceBox + *v38 + 16)));
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v38 + *(void *)(class metadata base offset for _SequenceBox + *v38 + 16), &qword_101659448);
  uint64_t result = swift_deallocClassInstance();
  *int v52 = v39;
  return result;
}

uint64_t sub_100E5D3C8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5D490, v1, 0);
}

uint64_t sub_100E5D490()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5D580, 0, 0);
}

uint64_t sub_100E5D580()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C5B0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8C5C8, v3, v5);
}

uint64_t sub_100E5D698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v5 - 8);
  uint64_t v51 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000588C((uint64_t *)&unk_101660AB0);
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v7 = __chkstk_darwin(v54);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)&v40 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v47 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = sub_10000588C(&qword_101659448);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v46 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v49 = (uint64_t)&v40 - v23;
  uint64_t v44 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  sub_100010324(v11, (uint64_t)qword_10170ECE0);
  uint64_t v48 = a2;
  UUID.uuidString.getter();
  uint64_t v45 = v19;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = v12;
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v24(v17, v19, v11);
  uint64_t v25 = v17;
  uint64_t v26 = v54;
  uint64_t v43 = &v9[*(int *)(v54 + 40)];
  uint64_t v27 = (uint64_t)v43;
  uint64_t v28 = type metadata accessor for DirectorySequence();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  v42(v27, 1, 1, v28);
  v24(v9, v25, v11);
  *(void *)&v9[*(int *)(v26 + 36)] = v44;
  v24(v47, v25, v11);
  swift_retain();
  uint64_t v29 = (uint64_t)v51;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v41 + 8);
  v30(v25, v11);
  v42(v29, 0, 1, v28);
  sub_1005E353C(v29, (uint64_t)v43);
  uint64_t v31 = v50;
  sub_10001D608((uint64_t)v9, v50, (uint64_t *)&unk_101660AB0);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
  uint64_t v33 = (uint64_t)v46;
  uint64_t v34 = v54;
  v32(v46, 1, 1, v54);
  sub_10001DAB4(v33, (uint64_t *)&unk_101660AC0);
  sub_10001D608(v31, v33, (uint64_t *)&unk_101660AB0);
  v32((char *)v33, 0, 1, v34);
  uint64_t v35 = v49;
  sub_10001D608(v33, v49, &qword_101659448);
  v30(v45, v11);
  sub_10000588C(&qword_101659450);
  uint64_t v36 = (void *)swift_allocObject();
  uint64_t v37 = sub_10001D608(v35, (uint64_t)v36 + *(void *)(class metadata base offset for _SequenceBox + *v36 + 16), &qword_101659448);
  __chkstk_darwin(v37);
  *(&v40 - 2) = v48;
  uint64_t v38 = sub_100F499D4((void (*)(char *))sub_100E8C5D4, (uint64_t)(&v40 - 4));
  uint64_t result = swift_release();
  *uint64_t v53 = v38;
  return result;
}

void *sub_100E5DC2C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100B6D320();
  *a1 = result;
  return result;
}

uint64_t sub_100E5DC5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100AD75B8(a1, a2);
}

uint64_t sub_100E5DC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  void v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for MemberSharingCircle() - 8);
  v5[7] = v6;
  v5[8] = *(void *)(v6 + 64);
  v5[9] = swift_task_alloc();
  v5[10] = sub_10000588C(&qword_10163BA20);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_100E5DD84, v4, 0);
}

uint64_t sub_100E5DD84()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  v0[12] = *(void *)(v2 + 136);
  sub_100E8DE8C(v4, v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[13] = v6;
  *(void *)(v6 + 16) = v2;
  sub_100E8E4D4(v1, v6 + v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_retain();
  return _swift_task_switch(sub_100E5DE70, 0, 0);
}

uint64_t sub_100E5DE70()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C560;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E5DF74;
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8C58C, v3, v6);
}

uint64_t sub_100E5DF74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100E5E0C4, v1, 0);
}

uint64_t sub_100E5E0C4()
{
  uint64_t v1 = (int *)v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = v2 + v1[12];
  uint64_t v6 = v2 + v1[16];
  uint64_t v7 = *(void *)(v2 + v1[20]);
  uint64_t v8 = *(void *)(v2 + v1[24]);
  sub_100E8E4D4(v2, v0[2], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608(v5, v4, (uint64_t *)&unk_101653D50);
  sub_10001D608(v6, v3, &qword_10163B9E0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v9(v7, v8);
}

size_t sub_100E5E1C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)sub_10000588C(&qword_10163BA20);
  uint64_t v5 = v4[20];
  uint64_t v6 = v4[24];
  size_t result = sub_100AD8DC4(a2, a2 + v4[12], a2 + v4[16], a1);
  *(void *)(a2 + v5) = result;
  *(void *)(a2 + v6) = v8;
  return result;
}

size_t sub_100E5E234@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_10163BA10);
  uint64_t v7 = *(int *)(v6 + 48);
  uint64_t v8 = *(int *)(v6 + 64);
  size_t result = sub_100AD9CD4(a3, a1, a2);
  *(void *)(a3 + v7) = result;
  *(void *)(a3 + v8) = v10;
  return result;
}

void *sub_100E5E2A8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  size_t result = sub_100ADAEDC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100E5E2D8(uint64_t a1, void *a2)
{
  return sub_100ADC0C0(a2);
}

uint64_t sub_100E5E300()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100E5E320, v0, 0);
}

uint64_t sub_100E5E320()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E5E394, 0, 0);
}

uint64_t sub_100E5E394()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  v3[2] = v1;
  v3[3] = sub_100E8C398;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E5E49C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7348, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100E5E49C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D0344, v1, 0);
}

uint64_t sub_100E5E5D0()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_100E5E634()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E5E654, v0, 0);
}

uint64_t sub_100E5E654()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E5E6C8, 0, 0);
}

uint64_t sub_100E5E6C8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_100E8C36C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5E7E0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100E5E7E0()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

char *sub_100E5E92C@<X0>(char **a1@<X8>)
{
  size_t result = sub_100ACF5FC();
  *a1 = result;
  return result;
}

void *sub_100E5E958@<X0>(void *a1@<X8>)
{
  size_t result = sub_100AE4A24();
  *a1 = result;
  return result;
}

uint64_t sub_100E5E984()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E5E9A4, v0, 0);
}

uint64_t sub_100E5E9A4()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E5EA18, 0, 0);
}

uint64_t sub_100E5EA18()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_100E8C340;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008FD4C, v3, v5);
}

char *sub_100E5EB30@<X0>(char **a1@<X8>)
{
  size_t result = sub_100AD0D68();
  *a1 = result;
  return result;
}

uint64_t sub_100E5EB5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100AD2AD4();
  *a1 = result;
  return result;
}

uint64_t sub_100E5EB88(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5EC54, v2, 0);
}

uint64_t sub_100E5EC54()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5ED44, 0, 0);
}

uint64_t sub_100E5ED44()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C2D4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_100E5EE58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100ACCD98(a1, a2);
}

uint64_t sub_100E5EE80@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  swift_retain();
  uint64_t v4 = sub_1006AE11C(a1);
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t sub_100E5EEE0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5EFAC, v2, 0);
}

uint64_t sub_100E5EFAC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5F09C, 0, 0);
}

uint64_t sub_100E5F09C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C20C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v5);
}

uint64_t sub_100E5F1B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100ACD178(a1);
}

uint64_t sub_100E5F1D8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5F2A4, v2, 0);
}

uint64_t sub_100E5F2A4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5F394, 0, 0);
}

uint64_t sub_100E5F394()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C1C8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D50);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F8;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v5);
}

uint64_t sub_100E5F4A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100ACEADC(a1, a2);
}

uint64_t sub_100E5F4D0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_100E63088(a1, (uint64_t (*)(uint64_t))sub_100B6DD88, a2);
}

uint64_t sub_100E5F4E8(uint64_t a1, uint64_t a2)
{
  return sub_100E61324(a1, a2, &qword_10163B9E0);
}

void *sub_100E5F508@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100B6E714();
  *a1 = result;
  return result;
}

uint64_t sub_100E5F538@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016511A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AE9138(a1, (uint64_t)v6);
  uint64_t v7 = sub_10000588C(&qword_1016511B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_1016511A0);
    uint64_t v8 = type metadata accessor for BeaconStatus(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }
  else
  {
    sub_100E8E4D4((uint64_t)v6, a2, type metadata accessor for BeaconStatus);
    uint64_t v10 = type metadata accessor for BeaconStatus(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
  }
}

uint64_t sub_100E5F6B8(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = v3;
  *(unsigned char *)(v4 + 160) = a3;
  *(void *)(v4 + 104) = a1;
  return _swift_task_switch(sub_100E5F6E0, v3, 0);
}

uint64_t sub_100E5F6E0()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  char v3 = *(unsigned char *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 104);
  *(void *)(v0 + 128) = *(void *)(v1 + 136);
  sub_10001D010(v4, v0 + 16);
  sub_10001D010(v2, v0 + 56);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 136) = v5;
  *(void *)(v5 + 16) = v1;
  sub_10001CEB0((long long *)(v0 + 16), v5 + 24);
  sub_10001CEB0((long long *)(v0 + 56), v5 + 64);
  *(unsigned char *)(v5 + 104) = v3;
  swift_retain();
  return _swift_task_switch(sub_100E5F7C8, 0, 0);
}

uint64_t sub_100E5F7C8()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  char v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C164;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  uint64_t v5 = sub_10000588C(&qword_101660A98);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5F8E0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8C1A4, v3, v5);
}

uint64_t sub_100E5F8E0()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  char v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t sub_100E5FA2C()
{
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100E5FAA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100AF03FC(a1, a2);
}

uint64_t sub_100E5FAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100AB6E00(a2, a3, a4);
}

void *sub_100E5FAF8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100ACF0EC();
  *a1 = result;
  return result;
}

void *sub_100E5FB24@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100AE35FC();
  *a1 = result;
  return result;
}

uint64_t sub_100E5FB50(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E5FC1C, v2, 0);
}

uint64_t sub_100E5FC1C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E5FD0C, 0, 0);
}

uint64_t sub_100E5FD0C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8C028;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = type metadata accessor for WildModeAssociationRecord(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E5FE1C;
  uint64_t v6 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8C0A4, v3, v5);
}

uint64_t sub_100E5FE1C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100E5FF70, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100E5FF70()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_100E5FFDC, v1, 0);
}

uint64_t sub_100E5FFDC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E6004C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100ADFD0C(a1, a2);
}

uint64_t sub_100E60074(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for MACAddress();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E6013C, v1, 0);
}

uint64_t sub_100E6013C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E6022C, 0, 0);
}

uint64_t sub_100E6022C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BFA4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_10165B698);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100C108F0, v3, v5);
}

uint64_t sub_100E60344(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(*(void *)(a1 + 128) + 160);
  if (qword_101636940 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v4, (uint64_t)qword_10170DA70);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  __chkstk_darwin(v10);
  *(void *)&v12[-32] = v8;
  *(void *)&v12[-24] = a2;
  *(void *)&v12[-16] = v7;
  OS_dispatch_queue.sync<A>(execute:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100E604DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *(void *)(a1 + 128);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  uint64_t v15 = type metadata accessor for BeaconStatus(0);
  char v16 = *(unsigned char *)(a2 + *(int *)(v15 + 20));
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + *(int *)(v15 + 24), v6);
  type metadata accessor for Transaction();
  uint64_t v19 = v14;
  uint64_t v20 = v13;
  uint64_t v21 = v9;
  uint64_t v22 = a2;
  char v23 = a3;
  char v24 = v16;
  static Transaction.named<A>(_:with:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100E606FC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  uint64_t v6 = *(void *)(sub_10000588C((uint64_t *)&unk_10164E870) - 8);
  v3[9] = v6;
  v3[10] = *(void *)(v6 + 64);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_100E6082C, v2, 0);
}

uint64_t sub_100E6082C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  v0[12] = *(void *)(v6 + 136);
  sub_10001D074(v8, v1, (uint64_t *)&unk_10164E870);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v9, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v2 + *(unsigned __int8 *)(v5 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  v0[13] = v12;
  *(void *)(v12 + 16) = v6;
  sub_10001D608(v1, v12 + v10, (uint64_t *)&unk_10164E870);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v11, v3, v7);
  swift_retain();
  return _swift_task_switch(sub_100E60974, 0, 0);
}

uint64_t sub_100E60974()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BEC0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E60A7C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D74C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100E60A7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100E60BCC, v1, 0);
}

uint64_t sub_100E60BCC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E60C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_10000588C(&qword_101651898);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v6 = *(void *)(v12 + 16);
  if (v6)
  {
    uint64_t v7 = v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v8 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100E8DE8C(v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_100E8DD7C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      v7 += v8;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_100E8E4D4((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v9 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v9 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v9, 1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100E60E24(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 97) = a4;
  *(unsigned char *)(v5 + 96) = a3;
  *(void *)(v5 + 24) = a1;
  return _swift_task_switch(sub_100E60E50, v4, 0);
}

uint64_t sub_100E60E50()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E60EC4, 0, 0);
}

uint64_t sub_100E60EC4()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E60FD8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100E60FD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 72) = *(void *)(v1 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 80) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100E61190;
  char v4 = *(unsigned char *)(v1 + 97);
  uint64_t v5 = *(void *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 24);
  return sub_1006DD214(v7, v5, v6, v4);
}

uint64_t sub_100E61190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 88) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    return _swift_task_switch(sub_100598D44, v10, 0);
  }
  else
  {
    swift_release();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v11(a1, a2, a3);
  }
}

uint64_t sub_100E61304(uint64_t a1, uint64_t a2)
{
  return sub_100E61324(a1, a2, &qword_101638CF0);
}

uint64_t sub_100E61324(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_100E6138C()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_100E61414@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100E634B8(a1, (uint64_t (*)(uint64_t))sub_100B6D358, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(void))type metadata accessor for LostModeRecord, a2);
}

uint64_t sub_100E61454(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 120) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 48) = v6;
  *(void *)(v4 + 56) = *(void *)(v6 + 64);
  *(void *)(v4 + 64) = swift_task_alloc();
  *(void *)(v4 + 72) = sub_10000588C(&qword_10163BB30);
  *(void *)(v4 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_100E61558, v3, 0);
}

uint64_t sub_100E61558()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  char v5 = *(unsigned char *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v0 + 88) = *(void *)(v7 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v8 + v2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 96) = v10;
  *(void *)(v10 + 16) = v7;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(unsigned char *)(v10 + v9) = v5;
  swift_retain();
  return _swift_task_switch(sub_100E61660, 0, 0);
}

uint64_t sub_100E61660()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  v3[2] = v2;
  v3[3] = sub_1002F708C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E61764;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8BD58, v3, v6);
}

uint64_t sub_100E61764()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100E618B4, v1, 0);
}

uint64_t sub_100E618B4()
{
  uint64_t v1 = (unsigned __int8 *)v0[10];
  uint64_t v2 = *v1;
  sub_10001D608((uint64_t)&v1[*(int *)(v0[9] + 48)], v0[2], (uint64_t *)&unk_10163AC90);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_100E6194C@<X0>(uint64_t a1@<X1>, char a2@<W2>, unsigned char *a3@<X8>)
{
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(a1, 0, 0, &v10);
  uint64_t v7 = (uint64_t)&a3[*(int *)(sub_10000588C(&qword_10163BB30) + 48)];
  char v8 = sub_100AF7A38(v7, a1, v10, a2 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100E61A44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100AE75E0(a1, a2);
}

uint64_t sub_100E61A6C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for MACAddress();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E61B38, v2, 0);
}

uint64_t sub_100E61B38()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E61C28, 0, 0);
}

uint64_t sub_100E61C28()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BC5C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163BB20);
  *uint64_t v4 = v0;
  v4[1] = sub_100E61D3C;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100061684, v3, v5);
}

uint64_t sub_100E61D3C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100E61E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE800C(a1);
}

uint64_t sub_100E61EB4(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = *(void *)(v4 + 64);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100E61F7C, v1, 0);
}

uint64_t sub_100E61F7C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  v0[10] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E6206C, 0, 0);
}

uint64_t sub_100E6206C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BBD8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C(&qword_101644320);
  *uint64_t v4 = v0;
  v4[1] = sub_100E62184;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8E60C, v3, v5);
}

uint64_t sub_100E62184()
{
  uint64_t v1 = *v0;
  uint64_t v6 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  return v4(v2, v3);
}

uint64_t sub_100E62310@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100AE311C(a1, a2);
}

uint64_t sub_100E62338()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100E62358, v0, 0);
}

uint64_t sub_100E62358()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E623CC, 0, 0);
}

uint64_t sub_100E623CC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = sub_100E8BB84;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C(&qword_101660A78);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8BBB4, v3, v5);
}

uint64_t sub_100E624E4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E625AC, v1, 0);
}

uint64_t sub_100E625AC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E6269C, 0, 0);
}

uint64_t sub_100E6269C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BB0C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E627AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8BB78, v3, &type metadata for Int);
}

uint64_t sub_100E627AC()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t sub_100E62920(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  v2[6] = v3;
  v2[7] = *(void *)(v3 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E629E4, v1, 0);
}

uint64_t sub_100E629E4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  v0[9] = *(void *)(v2 + 136);
  sub_100E8DE8C(v4, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[10] = v6;
  *(void *)(v6 + 16) = v2;
  sub_100E8E4D4(v1, v6 + v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  return _swift_task_switch(sub_100E62AD0, 0, 0);
}

uint64_t sub_100E62AD0()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8BA84;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_101644320);
  *uint64_t v4 = v0;
  v4[1] = sub_100E62BE8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8BAE8, v3, v5);
}

uint64_t sub_100E62BE8()
{
  uint64_t v1 = *v0;
  uint64_t v6 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  return v4(v2, v3);
}

uint64_t sub_100E62D74@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6C53C(a1);
}

uint64_t sub_100E62DA0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E62E68, v1, 0);
}

uint64_t sub_100E62E68()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E62F58, 0, 0);
}

uint64_t sub_100E62F58()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8B684;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_101649718);
  *uint64_t v4 = v0;
  v4[1] = sub_100E8E6D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8B6F4, v3, v5);
}

uint64_t sub_100E63070@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_100E63088(a1, (uint64_t (*)(uint64_t))sub_100B6E218, a2);
}

uint64_t sub_100E63088@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(a1);
  *a3 = result;
  return result;
}

uint64_t sub_100E630C0(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return _swift_task_switch(sub_100E630E0, v1, 0);
}

uint64_t sub_100E630E0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  *(void *)(v0 + 80) = *(void *)(v2 + 136);
  sub_10001D010(v1, v0 + 16);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 88) = v3;
  *(void *)(v3 + 16) = v2;
  sub_10001CEB0((long long *)(v0 + 16), v3 + 24);
  swift_retain();
  return _swift_task_switch(sub_100E6318C, 0, 0);
}

uint64_t sub_100E6318C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8B62C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E6329C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8B660, v3, &type metadata for Double);
}

uint64_t sub_100E6329C()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v2.n128_u64[0] = *(void *)(v1 + 56);
  uint64_t v3 = *(uint64_t (**)(__n128))(v5 + 8);
  return v3(v2);
}

id sub_100E633D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = sub_10001CD44(a2, v5);
  id result = sub_100B2B68C((uint64_t)v7, v4, v5, v6);
  *a3 = result;
  return result;
}

uint64_t sub_100E63424@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100AF74AC(a1, a2);
}

void *sub_100E6344C@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6E7BC(a1);
}

uint64_t sub_100E63478@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100E634B8(a1, (uint64_t (*)(uint64_t))sub_100B6E74C, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, a2);
}

uint64_t sub_100E634B8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = a2(a1);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = a3(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if (v9)
  {
    sub_100E8DE8C(v8+ ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80)), a5, a4);
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, v12, 1, v10);

  return swift_bridgeObjectRelease();
}

void *sub_100E635A4@<X0>(void *a1@<X8>)
{
  id result = sub_100B6E784();
  *a1 = result;
  return result;
}

uint64_t sub_100E635D4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100E6369C, v1, 0);
}

uint64_t sub_100E6369C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100E6378C, 0, 0);
}

uint64_t sub_100E6378C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8B604;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_101660A58);
  *uint64_t v4 = v0;
  v4[1] = sub_100E638A4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8B61C, v3, v5);
}

uint64_t sub_100E638A4()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t sub_100E63A1C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v108 = a2;
  *(void *)&long long v104 = a1;
  unint64_t v102 = a3;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v110 = (uint64_t)v93 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v115 = (char *)v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v117 = *(void *)(v10 - 8);
  uint64_t v118 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v13 - 8);
  uint64_t v116 = (uint64_t)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v15 - 8);
  uint64_t v111 = (void (**)(char *, uint64_t))((char *)v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = sub_10000588C(&qword_101660680);
  uint64_t v112 = *(void *)(v114 - 8);
  uint64_t v17 = __chkstk_darwin(v114);
  uint64_t v103 = (void (**)(char *, uint64_t, uint64_t))((char *)v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v106 = (uint64_t)v93 - v19;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v99 = (char *)v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v100 = (char *)v93 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v93 - v26;
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_101660A60);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v101 = (char *)v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v93 - v31);
  if (qword_101637080 != -1) {
    swift_once();
  }
  uint64_t v109 = v8;
  Class v107 = v6;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  v93[1] = 0;
  swift_release();
  long long v122 = v119[10];
  long long v123 = v119[11];
  long long v124 = v119[12];
  v120[6] = v119[6];
  v120[7] = v119[7];
  v120[8] = v119[8];
  long long v121 = v119[9];
  v120[2] = v119[2];
  v120[3] = v119[3];
  v120[4] = v119[4];
  v120[5] = v119[5];
  v120[0] = v119[0];
  v120[1] = v119[1];
  sub_100551984((uint64_t)v120);
  double v32 = *(double *)&v121;
  *(void *)&long long v104 = *(void *)(*(void *)(v104 + 128) + 160);
  if (qword_1016374B0 != -1) {
    swift_once();
  }
  sub_100010324(v20, (uint64_t)qword_10170F308);
  UUID.uuidString.getter();
  uint64_t v33 = v27;
  uint64_t v98 = v27;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v95 = v21;
  uint64_t v34 = v20;
  uint64_t v113 = (unsigned int (*)(void, void, void))v20;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  uint64_t v36 = v100;
  v35(v100, v33, v34);
  uint64_t v37 = v114;
  uint64_t v38 = (uint64_t)v103;
  uint64_t v108 = (char *)v103 + *(int *)(v114 + 40);
  size_t v39 = v108;
  uint64_t v96 = type metadata accessor for DirectorySequence();
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56);
  v97(v39, 1, 1, v96);
  uint64_t v40 = v113;
  v35((char *)v38, v36, (uint64_t)v113);
  *(void *)(v38 + *(int *)(v37 + 36)) = v104;
  v35(v99, v36, (uint64_t)v40);
  swift_retain();
  uint64_t v41 = (uint64_t)v111;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v42 = *(void (**)(void, void))(v95 + 8);
  v42(v36, v40);
  v97((char *)v41, 0, 1, v96);
  sub_1005E353C(v41, (uint64_t)v108);
  uint64_t v43 = v106;
  sub_10001D608(v38, v106, &qword_101660680);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56);
  uint64_t v45 = (uint64_t)v101;
  uint64_t v46 = v114;
  v44(v101, 1, 1, v114);
  sub_10001DAB4(v45, &qword_10164B3C8);
  sub_10001D608(v43, v45, &qword_101660680);
  v44((char *)v45, 0, 1, v46);
  uint64_t v47 = v105;
  sub_10001D608(v45, (uint64_t)v105, (uint64_t *)&unk_101660A60);
  v42(v98, v113);
  sub_10000588C(&qword_101660A70);
  uint64_t v48 = (char *)swift_allocObject();
  sub_10001D608((uint64_t)v47, (uint64_t)&v48[*(void *)(class metadata base offset for _SequenceBox + *(void *)v48 + 16)], (uint64_t *)&unk_101660A60);
  uint64_t v49 = *(void *)(class metadata base offset for _SequenceBox + *(void *)v48 + 16);
  uint64_t v101 = v48;
  uint64_t v50 = (uint64_t)&v48[v49];
  sub_10000588C(&qword_10164B3E0);
  uint64_t v51 = (char *)swift_allocObject();
  sub_10001D074(v50, (uint64_t)&v51[*(void *)(class metadata base offset for _IteratorBox + *(void *)v51 + 16)], (uint64_t *)&unk_101660A60);
  uint64_t v52 = &v51[*(void *)(class metadata base offset for _IteratorBox + *(void *)v51 + 16)];
  uint64_t v100 = v51;
  swift_retain();
  uint64_t v53 = v116;
  uint64_t v114 = (uint64_t)v52;
  sub_100B22DEC(v116);
  uint64_t v54 = *(unsigned int (**)(void, void, void))(v117 + 48);
  v117 += 48;
  uint64_t v113 = v54;
  if (v54(v53, 1, v118) != 1)
  {
    uint64_t v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
    uint64_t v103 = (void (**)(char *, uint64_t, uint64_t))(v94 + 32);
    uint64_t v111 = (void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v112 = v94 + 56;
    uint64_t v55 = _swiftEmptyArrayStorage;
    long long v104 = xmmword_101342130;
    uint64_t v59 = v109;
    uint64_t v58 = v110;
    while (1)
    {
      sub_100E8E4D4(v53, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v62 = *(void *)v12;
      unint64_t v63 = *((void *)v12 + 1);
      uint64_t v64 = v61;
      switch(v63 >> 62)
      {
        case 1uLL:
          if ((int)v62 != v62 >> 32) {
            goto LABEL_17;
          }
          goto LABEL_27;
        case 2uLL:
          if (*(void *)(v62 + 16) == *(void *)(v62 + 24)) {
            goto LABEL_27;
          }
LABEL_17:
          sub_1000361E0(*(void *)v12, *((void *)v12 + 1));
          goto LABEL_18;
        case 3uLL:
          goto LABEL_13;
        default:
          if ((v63 & 0xFF000000000000) == 0)
          {
LABEL_13:
            sub_10001CFB8(*(void *)v12, *((void *)v12 + 1));
LABEL_27:
            uint64_t v80 = v115;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v112)(v58, 1, 1, v59);
LABEL_28:
            Date.init()();
            sub_10001DAB4(v58, (uint64_t *)&unk_10163AC90);
            goto LABEL_29;
          }
LABEL_18:
          id v65 = objc_allocWithZone((Class)NSKeyedUnarchiver);
          sub_1000361E0(v62, v63);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          *(void *)&v119[0] = 0;
          id v67 = [v65 initForReadingFromData:isa error:v119];

          if (v67)
          {
            id v68 = *(id *)&v119[0];
            sub_10001CFB8(v62, v63);
            [v67 _enableStrictSecureDecodingMode];
            id v69 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v67];
            if (v69)
            {
              char v70 = v69;
            }
            else
            {
              static os_log_type_t.error.getter();
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v78 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();

              char v70 = 0;
            }
          }
          else
          {
            id v71 = *(id *)&v119[0];
            uint64_t v72 = _convertNSErrorToError(_:)();

            swift_willThrow();
            sub_10001CFB8(v62, v63);
            LODWORD(v106) = static os_log_type_t.error.getter();
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v73 = swift_allocObject();
            *(_OWORD *)(v73 + 16) = v104;
            *(void *)&v119[0] = v72;
            swift_errorRetain();
            sub_10000588C(&qword_101638D40);
            uint64_t v74 = String.init<A>(describing:)();
            uint64_t v76 = v75;
            *(void *)(v73 + 56) = &type metadata for String;
            *(void *)(v73 + 64) = sub_10000B4CC();
            *(void *)(v73 + 32) = v74;
            *(void *)(v73 + 40) = v76;
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v77 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();
            swift_errorRelease();
            swift_bridgeObjectRelease();

            char v70 = 0;
          }
          sub_10001CFB8(v62, v63);
          uint64_t v59 = v109;
          if (!v70)
          {
            uint64_t v58 = v110;
            goto LABEL_27;
          }
          id v79 = [v70 creationDate];

          uint64_t v80 = v115;
          if (v79)
          {
            uint64_t v81 = (uint64_t)v107;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v82 = 0;
          }
          else
          {
            uint64_t v82 = 1;
            uint64_t v81 = (uint64_t)v107;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v112)(v81, v82, 1, v59);
          uint64_t v58 = v110;
          sub_10001D608(v81, v110, (uint64_t *)&unk_10163AC90);
          if ((*v105)(v58, 1, v59) == 1) {
            goto LABEL_28;
          }
          (*v103)(v80, v58, v59);
LABEL_29:
          Date.timeIntervalSinceNow.getter();
          double v84 = v83;
          (*v111)(v80, v59);
          if (fabs(v84) < v32)
          {
            uint64_t v85 = (uint64_t *)&v12[*(int *)(v118 + 28)];
            uint64_t v87 = *v85;
            unint64_t v86 = v85[1];
            os_log_type_t v88 = (uint64_t *)&v12[*(int *)(v118 + 32)];
            uint64_t v90 = *v88;
            unint64_t v89 = v88[1];
            sub_1000361E0(v87, v86);
            sub_1000361E0(v90, v89);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v55 = sub_100A70CCC(0, v55[2] + 1, 1, v55);
            }
            unint64_t v92 = v55[2];
            unint64_t v91 = v55[3];
            if (v92 >= v91 >> 1) {
              uint64_t v55 = sub_100A70CCC((void *)(v91 > 1), v92 + 1, 1, v55);
            }
            v55[2] = v92 + 1;
            uint64_t v60 = &v55[4 * v92];
            v60[4] = v87;
            v60[5] = v86;
            v60[6] = v90;
            v60[7] = v89;
            uint64_t v59 = v109;
            uint64_t v58 = v110;
          }
          uint64_t v53 = v116;
          sub_100E8DD7C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          sub_100B22DEC(v53);
          if (v113(v53, 1, v118) == 1) {
            goto LABEL_7;
          }
          break;
      }
    }
  }
  uint64_t v55 = _swiftEmptyArrayStorage;
LABEL_7:
  swift_release();
  uint64_t v56 = v100;
  swift_release();
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v56 + *(void *)(class metadata base offset for _IteratorBox + *v56 + 16), (uint64_t *)&unk_101660A60);
  uint64_t result = swift_deallocClassInstance();
  *unint64_t v102 = v55;
  return result;
}

uint64_t type metadata accessor for BeaconStoreActor()
{
  return self;
}

uint64_t sub_100E6493C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100E8DE34((unint64_t *)&unk_101660580, a2, (void (*)(uint64_t))type metadata accessor for BeaconStoreActor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100E64994()
{
  return sub_100AD7148() & 1;
}

uint64_t sub_100E649B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100E52EF0(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t)&unk_1015F8E98, (uint64_t)sub_100E7FB1C, a1, (void **)sub_100132424, (uint64_t)&unk_1015F8EB0, (uint64_t)sub_100E7FB4C, (uint64_t *)&unk_10163B7C0, (void (*)(void))sub_100E8A60C, (uint64_t *)&unk_1016605D0);
}

uint64_t sub_100E64A64(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_10165B288);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = v3;
    int64_t v35 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        id v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E64D18(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t *)&unk_101660FA0, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100E64D60(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, (uint64_t *)&unk_10164E810);
}

uint64_t sub_100E64D6C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101660F00);
  int v51 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v47 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v45 = v2;
  int64_t v46 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v49 = v6;
  uint64_t v50 = v9;
  uint64_t v56 = v8;
  uint64_t v57 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v46) {
      break;
    }
    unint64_t v25 = v47;
    unint64_t v26 = v47[v24];
    ++v18;
    if (!v26)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v26 = v47[v18];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v45;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v47[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v18 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v46) {
              goto LABEL_34;
            }
            unint64_t v26 = v47[v18];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v27;
      }
    }
LABEL_21:
    unint64_t v15 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v9 + 48) + v28 * v23;
    uint64_t v30 = 40 * v23;
    int64_t v55 = v18;
    if (v51)
    {
      (*v52)(v56, v29, v57);
      uint64_t v31 = *(void *)(v9 + 56) + v30;
      uint64_t v32 = *(void *)v31;
      uint64_t v54 = *(void *)(v31 + 8);
      uint64_t v34 = *(void *)(v31 + 16);
      uint64_t v33 = *(void *)(v31 + 24);
      int v53 = *(unsigned __int8 *)(v31 + 32);
    }
    else
    {
      (*v48)(v56, v29, v57);
      uint64_t v35 = *(void *)(v9 + 56) + v30;
      uint64_t v32 = *(void *)v35;
      uint64_t v54 = *(void *)(v35 + 8);
      uint64_t v34 = *(void *)(v35 + 16);
      uint64_t v33 = *(void *)(v35 + 24);
      int v53 = *(unsigned __int8 *)(v35 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v19 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v52)(*(void *)(v11 + 48) + v28 * v19, v56, v57);
    uint64_t v20 = *(void *)(v11 + 56) + 40 * v19;
    uint64_t v21 = v54;
    int64_t v18 = v55;
    *(void *)uint64_t v20 = v32;
    *(void *)(v20 + 8) = v21;
    *(void *)(v20 + 16) = v34;
    *(void *)(v20 + 24) = v33;
    *(unsigned char *)(v20 + 32) = v53;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v49;
    uint64_t v9 = v50;
  }
  swift_release();
  uint64_t v3 = v45;
  unint64_t v25 = v47;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v25, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E651F8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101661008);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v20 >= v31) {
      break;
    }
    unint64_t v21 = v32[v20];
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v31) {
        break;
      }
      unint64_t v21 = v32[v12];
      if (!v21)
      {
        int64_t v22 = v20 + 2;
        if (v22 >= v31) {
          break;
        }
        unint64_t v21 = v32[v22];
        if (!v21)
        {
          while (1)
          {
            int64_t v12 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v31) {
              goto LABEL_34;
            }
            unint64_t v21 = v32[v12];
            ++v22;
            if (v21) {
              goto LABEL_30;
            }
          }
        }
        int64_t v12 = v22;
      }
    }
LABEL_30:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_31:
    char v27 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((a2 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v14) >> 6;
    do
    {
      if (++v16 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x100E65600);
      }
      BOOL v25 = v16 == v24;
      if (v16 == v24) {
        unint64_t v16 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v11 + 8 * v16);
    }
    while (v26 == -1);
    unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
LABEL_8:
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
    if (v29 >= 64) {
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v32 = -1 << v29;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E65624(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_101660600);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v5 + 56) + 48 * v17;
    if (v37)
    {
      sub_100940378(v25, (uint64_t)v38);
    }
    else
    {
      sub_100E8A6B4(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100940378((uint64_t)v38, *(void *)(v7 + 56) + 48 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6594C(uint64_t a1, char a2)
{
  return sub_100E6EC7C(a1, a2, &qword_10164B240);
}

uint64_t sub_100E65958(uint64_t a1, int a2)
{
  return sub_100E6640C(a1, a2, type metadata accessor for MultipartAccessoryPairingInfo, &qword_101660B28, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_100E659A0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660B40);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  BOOL v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  char v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v42 + 72);
    uint64_t v27 = *(void *)(v8 + 56) + v26 * v21;
    unint64_t v28 = *(void *)(*(void *)(v8 + 48) + 16 * v21 + 8);
    long long v44 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v21);
    if (v43)
    {
      sub_10001D608(v27, (uint64_t)v7, (uint64_t *)&unk_1016477E0);
    }
    else
    {
      sub_10001D074(v27, (uint64_t)v7, (uint64_t *)&unk_1016477E0);
      sub_1000361E0(v44, v28);
    }
    Hasher.init(_seed:)();
    uint64_t v29 = v44;
    sub_1000361E0(v44, v28);
    Data.hash(into:)();
    sub_10001CFB8(v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v44;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      long long v19 = v44;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v10 + 48) + 16 * v18) = v19;
    uint64_t result = sub_10001D608((uint64_t)v7, *(void *)(v10 + 56) + v26 * v18, (uint64_t *)&unk_1016477E0);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E65D84(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_10164B230);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100173E4C((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100173F4C(v25, (uint64_t)&v38);
      sub_10012F428(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100173E4C(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6609C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660620);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E663C4(uint64_t a1, int a2)
{
  return sub_100E6640C(a1, a2, type metadata accessor for OwnedBeaconGroup.PairingState, &qword_101640980, type metadata accessor for OwnedBeaconGroup.PairingState, type metadata accessor for OwnedBeaconGroup.PairingState);
}

uint64_t sub_100E6640C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v47 = a6;
  uint64_t v9 = v6;
  uint64_t v11 = a3(0);
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  int64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = *v6;
  sub_10000588C(a4);
  int v49 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  int64_t v46 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  long long v44 = v6;
  int64_t v45 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v45) {
      break;
    }
    BOOL v29 = v46;
    unint64_t v30 = v46[v28];
    ++v23;
    if (!v30)
    {
      int64_t v23 = v28 + 1;
      if (v28 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v30 = v46[v23];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v9 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v46[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v23 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v45) {
              goto LABEL_34;
            }
            unint64_t v30 = v46[v23];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v23 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v48 + 72);
    uint64_t v33 = *(void *)(v14 + 56) + v32 * v27;
    unint64_t v34 = *(void *)(*(void *)(v14 + 48) + 16 * v27 + 8);
    long long v50 = *(_OWORD *)(*(void *)(v14 + 48) + 16 * v27);
    if (v49)
    {
      sub_100E8E4D4(v33, (uint64_t)v13, a5);
    }
    else
    {
      sub_100E8DE8C(v33, (uint64_t)v13, v47);
      sub_1000361E0(v50, v34);
    }
    Hasher.init(_seed:)();
    uint64_t v35 = v50;
    sub_1000361E0(v50, v34);
    Data.hash(into:)();
    sub_10001CFB8(v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v37) & ~*(void *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      long long v25 = v50;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      long long v25 = v50;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_OWORD *)(*(void *)(v16 + 48) + 16 * v24) = v25;
    uint64_t result = sub_100E8E4D4((uint64_t)v13, *(void *)(v16 + 56) + v32 * v24, a5);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v9 = v44;
  BOOL v29 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v14 + 32);
  if (v43 >= 64) {
    bzero(v29, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v29 = -1 << v43;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v9 = v16;
  return result;
}

uint64_t sub_100E667F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660B70);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v32 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v13 << 6);
    goto LABEL_31;
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_42;
  }
  if (v21 >= v11)
  {
    swift_release();
    uint64_t v3 = v32;
    unint64_t v22 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_37:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v22 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v33 + 8 * v21);
    ++v13;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v13 = v21 + 1;
    if (v21 + 1 >= v11) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v13);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
      char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        sub_1000361E0(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v14 = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v26 || (v25 & 1) == 0)
      {
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
        if (v28 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
LABEL_8:
          *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
          *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v34;
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x100E66D44);
    }
    int64_t v24 = v21 + 2;
    if (v24 < v11)
    {
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v13 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_43;
          }
          if (v13 >= v11) {
            goto LABEL_34;
          }
          unint64_t v23 = *(void *)(v33 + 8 * v13);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v13 = v24;
      goto LABEL_30;
    }
LABEL_34:
    swift_release();
    uint64_t v3 = v32;
    if (a2) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E66D88(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for BookmarkMetaData();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101652470);
  int v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_42;
  }
  v37[0] = v2;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  char v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  swift_retain();
  int64_t v16 = 0;
  v37[6] = "primaryLocationDecryption";
  v37[7] = "elegatedShare";
  v37[4] = "ude";
  v37[5] = "Bundle";
  _OWORD v37[2] = "";
  v37[3] = "circleSharedSecret";
  v37[1] = "beaconGroupAttributes";
LABEL_9:
  if (v14)
  {
    unint64_t v22 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v23 = v22 | (v16 << 6);
    goto LABEL_31;
  }
  int64_t v24 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_43;
  }
  if (v24 >= v38)
  {
    swift_release();
    uint64_t v3 = (uint64_t *)v37[0];
    char v25 = v39;
    if (v41)
    {
LABEL_38:
      uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
      if (v35 >= 64) {
        bzero(v25, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *char v25 = -1 << v35;
      }
      *(void *)(v8 + 16) = 0;
    }
  }
  else
  {
    char v25 = v39;
    unint64_t v26 = v39[v24];
    ++v16;
    if (v26) {
      goto LABEL_30;
    }
    int64_t v16 = v24 + 1;
    if (v24 + 1 >= v38) {
      goto LABEL_35;
    }
    unint64_t v26 = v39[v16];
    if (v26)
    {
LABEL_30:
      unint64_t v14 = (v26 - 1) & v26;
      unint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
      char v32 = *(unsigned char *)(*(void *)(v8 + 48) + v23);
      uint64_t v33 = *(void *)(v40 + 72);
      uint64_t v34 = *(void *)(v8 + 56) + v33 * v23;
      if (v41) {
        sub_100E8E4D4(v34, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
      }
      else {
        sub_100E8DE8C(v34, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v19 = v17 & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v20 == v29;
        if (v20 == v29) {
          unint64_t v20 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v20);
        if (v31 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v31)) + (v20 << 6);
LABEL_8:
          *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(unsigned char *)(*(void *)(v10 + 48) + v21) = v32;
          sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 56) + v33 * v21, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
          ++*(void *)(v10 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x100E673B0);
    }
    int64_t v27 = v24 + 2;
    if (v27 < v38)
    {
      unint64_t v26 = v39[v27];
      if (!v26)
      {
        while (1)
        {
          int64_t v16 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_44;
          }
          if (v16 >= v38) {
            goto LABEL_35;
          }
          unint64_t v26 = v39[v16];
          ++v27;
          if (v26) {
            goto LABEL_30;
          }
        }
      }
      int64_t v16 = v27;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = (uint64_t *)v37[0];
    if (v41) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E673F4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = __chkstk_darwin(v50);
  int64_t v55 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int v51 = (char *)&v44 - v8;
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101660658);
  int v52 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  long long v44 = v3;
  int64_t v45 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  int64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v48 = v5;
  uint64_t v49 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v23 = __clz(__rbit64(v15));
      uint64_t v24 = (v15 - 1) & v15;
      unint64_t v25 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    int64_t v27 = v46;
    unint64_t v28 = v46[v26];
    ++v19;
    if (!v28)
    {
      int64_t v19 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v19];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v19 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v19];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v29;
      }
    }
LABEL_21:
    uint64_t v24 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v5 + 72);
    unint64_t v31 = v30 * v25;
    unint64_t v32 = *(void *)(v9 + 48) + v30 * v25;
    unint64_t v53 = v24;
    int64_t v54 = v19;
    if (v52)
    {
      uint64_t v33 = *v16;
      uint64_t v35 = v50;
      uint64_t v34 = v51;
      (*v16)(v51, v32, v50);
    }
    else
    {
      uint64_t v33 = *v47;
      uint64_t v35 = v50;
      uint64_t v34 = v51;
      (*v47)(v51, v32, v50);
    }
    v33(v55, *(void *)(v9 + 56) + v31, v35);
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    unint64_t v21 = v30 * v20;
    unint64_t v22 = *v16;
    (*v16)((char *)(*(void *)(v11 + 48) + v30 * v20), (unint64_t)v34, v35);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(*(void *)(v11 + 56) + v21, v55, v35);
    ++*(void *)(v11 + 16);
    uint64_t v5 = v48;
    uint64_t v9 = v49;
    unint64_t v15 = v53;
    int64_t v19 = v54;
  }
  swift_release();
  uint64_t v3 = v44;
  int64_t v27 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v27 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E6789C(uint64_t a1, char a2)
{
  return sub_100E6C834(a1, a2, &qword_1016460A0, (void (*)(uint64_t, unsigned char *))sub_100173E4C);
}

uint64_t sub_100E678BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660EF8);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    unint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    BOOL v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    int64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      int64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_100173E4C((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_10012F428(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_100173E4C(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E67CB8(uint64_t a1, int a2)
{
  return sub_100E6B304(a1, a2, (uint64_t *)&unk_101660750);
}

uint64_t sub_100E67CC4(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, (uint64_t *)&unk_101660990);
}

uint64_t sub_100E67CD0(uint64_t a1, char a2)
{
  return sub_100E79718(a1, a2, &qword_101660748);
}

uint64_t sub_100E67CDC(uint64_t a1, int a2)
{
  return sub_100E77234(a1, a2, type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_101660788, type metadata accessor for CloudKitChangeSet.TombstoneInfo, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
}

uint64_t sub_100E67D24(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016523E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v26 = *(char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(qword_10137F638[v26]);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E68000(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101652390);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  char v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6830C(uint64_t a1, char a2)
{
  return sub_100E705E4(a1, a2, (uint64_t *)&unk_101660E70);
}

uint64_t sub_100E68318(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660FD0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_errorRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E685F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101652400);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E688A4(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, &qword_101660FC8);
}

uint64_t sub_100E688B0(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, &qword_1016523A0);
}

uint64_t sub_100E688BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_1016607B0);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  BOOL v41 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v49 = v8;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  uint64_t v50 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    char v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      long long v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v32;
      unint64_t v31 = v32[1];
      sub_1000361E0(*v32, v31);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v30;
    v20[1] = v31;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  char v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E68D08(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_10163F8E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
      long long v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        sub_1000361E0(v31, *((unint64_t *)&v31 + 1));
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(unsigned char *)(*(void *)(v7 + 48) + v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E68FD4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v46 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000588C(&qword_101660FC0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v40 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v38 = v2;
  int64_t v39 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v41 = v10;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v39) {
      break;
    }
    char v24 = v40;
    unint64_t v25 = v40[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v25 = v40[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v39) {
              goto LABEL_34;
            }
            unint64_t v25 = v40[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v43 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if (v45)
    {
      sub_100E8E4D4(v28, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v29 = *(void *)(v42 + 72);
      sub_100E8E4D4(*(void *)(v10 + 56) + v29 * v22, v46, type metadata accessor for ObservedAdvertisement);
    }
    else
    {
      sub_100E8DE8C(v28, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v29 = *(void *)(v42 + 72);
      sub_100E8DE8C(*(void *)(v10 + 56) + v29 * v22, v46, type metadata accessor for ObservedAdvertisement);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v10 = v41;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      uint64_t v10 = v41;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 48) + v27 * v20, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t result = sub_100E8E4D4(v46, *(void *)(v12 + 56) + v29 * v20, type metadata accessor for ObservedAdvertisement);
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  char v24 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v37;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100E69500(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_101660E10);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    char v33 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v12) {
          goto LABEL_34;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v12)
            {
LABEL_34:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_41;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_43;
                }
                if (v15 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v20 = v9[v15];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v15 = v21;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      unint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
      int64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if (a2)
      {
        sub_100173E4C(v23, v34);
      }
      else
      {
        sub_10012F428((uint64_t)v23, (uint64_t)v34);
        id v24 = v22;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      uint64_t result = (uint64_t)sub_100173E4C(v34, (_OWORD *)(*(void *)(v7 + 56) + 32 * v16));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E697D4(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101640988);
}

uint64_t sub_100E697E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016605F8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26 + 1);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E69AB0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660DE8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    unint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E69D58(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101652558);
}

uint64_t sub_100E69D64(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000588C(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  int64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_100E6A190(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, &qword_101660DF0);
}

uint64_t sub_100E6A19C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016523C0);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v21 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v22 = v21 | (v13 << 6);
      }
      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_33;
        }
        unint64_t v24 = v39[v23];
        ++v13;
        if (!v24)
        {
          int64_t v13 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v24 = v39[v13];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v37;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v13 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v24 = v39[v13];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v25;
          }
        }
LABEL_30:
        unint64_t v10 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      uint64_t v30 = 16 * v22;
      unint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v34 = *(void *)(v5 + 56) + v30;
      unint64_t v35 = *(void **)v34;
      char v36 = *(unsigned char *)(v34 + 8);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100940368(v35, v36);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v16 == v27;
          if (v16 == v27) {
            unint64_t v16 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 16 * v17;
      int64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
      *int64_t v19 = v33;
      v19[1] = v32;
      uint64_t v20 = *(void *)(v7 + 56) + v18;
      *(void *)uint64_t v20 = v35;
      *(unsigned char *)(v20 + 8) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6A4BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_10000588C(&qword_1016523B0);
  int v44 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_42;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v42 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  char v40 = v2;
  int64_t v41 = (unint64_t)(v10 + 63) >> 6;
  int64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  swift_retain();
  int64_t v16 = 0;
LABEL_9:
  if (v13)
  {
    unint64_t v22 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v23 = v22 | (v16 << 6);
    goto LABEL_31;
  }
  int64_t v24 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_43;
  }
  if (v24 >= v41)
  {
    swift_release();
    uint64_t v3 = v40;
    int64_t v25 = v42;
    if (v44)
    {
LABEL_38:
      uint64_t v38 = 1 << *(unsigned char *)(v7 + 32);
      if (v38 >= 64) {
        bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v25 = -1 << v38;
      }
      *(void *)(v7 + 16) = 0;
    }
  }
  else
  {
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v16;
    if (v26) {
      goto LABEL_30;
    }
    int64_t v16 = v24 + 1;
    if (v24 + 1 >= v41) {
      goto LABEL_35;
    }
    unint64_t v26 = v42[v16];
    if (v26)
    {
LABEL_30:
      unint64_t v13 = (v26 - 1) & v26;
      unint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
      uint64_t v32 = *(void *)(v7 + 56);
      uint64_t v33 = v7;
      char v34 = *(unsigned char *)(*(void *)(v7 + 48) + v23);
      uint64_t v35 = v5;
      uint64_t v36 = *(void *)(v5 + 72);
      uint64_t v37 = v32 + v36 * v23;
      if (v44) {
        (*v14)(v45, v37, v46);
      }
      else {
        (*v43)(v45, v37, v46);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v19 = v17 & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v20 == v29;
        if (v20 == v29) {
          unint64_t v20 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v20);
        if (v31 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v31)) + (v20 << 6);
LABEL_8:
          *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(unsigned char *)(*(void *)(v9 + 48) + v21) = v34;
          (*v14)((char *)(*(void *)(v9 + 56) + v36 * v21), (uint64_t)v45, v46);
          ++*(void *)(v9 + 16);
          uint64_t v5 = v35;
          uint64_t v7 = v33;
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x100E6A970);
    }
    int64_t v27 = v24 + 2;
    if (v27 < v41)
    {
      unint64_t v26 = v42[v27];
      if (!v26)
      {
        while (1)
        {
          int64_t v16 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_44;
          }
          if (v16 >= v41) {
            goto LABEL_35;
          }
          unint64_t v26 = v42[v16];
          ++v27;
          if (v26) {
            goto LABEL_30;
          }
        }
      }
      int64_t v16 = v27;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = v40;
    if (v44) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_100E6A990(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C((uint64_t *)&unk_101660FB0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_100E8DE34((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  int64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100E6ADB8(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, &qword_101660EC8, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_100E6AE00(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  int v52 = a6;
  uint64_t v58 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v60 = (uint64_t)&v47 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v56 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  sub_10000588C(a4);
  int v55 = a2;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v59 = v12;
  uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v50 = (void *)(v15 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  int v48 = v6;
  int64_t v49 = (unint64_t)(v18 + 63) >> 6;
  int v51 = (void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  uint64_t v57 = (void (**)(char *, unint64_t, uint64_t))(v13 + 32);
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  uint64_t v53 = v15;
  int64_t v25 = v56;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v49) {
      break;
    }
    uint64_t v30 = v50;
    unint64_t v31 = v50[v29];
    ++v24;
    if (!v31)
    {
      int64_t v24 = v29 + 1;
      if (v29 + 1 >= v49) {
        goto LABEL_34;
      }
      unint64_t v31 = v50[v24];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v49)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v48;
          if ((v55 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v31 = v50[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v24 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v49) {
              goto LABEL_34;
            }
            unint64_t v31 = v50[v24];
            ++v32;
            if (v31) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v32;
      }
    }
LABEL_21:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_22:
    uint64_t v33 = v13;
    uint64_t v34 = *(void *)(v13 + 72);
    unint64_t v35 = *(void *)(v15 + 48) + v34 * v28;
    if (v55)
    {
      (*v57)(v25, v35, v59);
      uint64_t v36 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v54 + 72);
      sub_100E8E4D4(v36 + v37 * v28, v60, v58);
    }
    else
    {
      (*v51)(v25, v35, v59);
      uint64_t v38 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v54 + 72);
      sub_100E8DE8C(v38 + v37 * v28, v60, v52);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      int64_t v25 = v56;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      int64_t v25 = v56;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*v57)((char *)(*(void *)(v17 + 48) + v34 * v26), (unint64_t)v25, v59);
    uint64_t result = sub_100E8E4D4(v60, *(void *)(v17 + 56) + v37 * v26, v58);
    ++*(void *)(v17 + 16);
    uint64_t v15 = v53;
    uint64_t v13 = v33;
  }
  swift_release();
  uint64_t v8 = v48;
  uint64_t v30 = v50;
  if ((v55 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v15 + 32);
  if (v46 >= 64) {
    bzero(v30, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v30 = -1 << v46;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v17;
  return result;
}

uint64_t sub_100E6B2F8(uint64_t a1, int a2)
{
  return sub_100E6B304(a1, a2, &qword_101640990);
}

uint64_t sub_100E6B304(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000588C(a3);
  int v44 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (*(void *)(v11 + 16))
  {
    uint64_t v39 = v3;
    uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v15 = *(void *)(v11 + 64);
    unint64_t v41 = (void *)(v11 + 64);
    if (v14 < 64) {
      uint64_t v16 = ~(-1 << v14);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v15;
    int64_t v40 = (unint64_t)(v14 + 63) >> 6;
    char v42 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
    uint64_t v18 = v12 + 64;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    uint64_t v46 = v7;
    for (i = v8; ; uint64_t v8 = i)
    {
      if (v17)
      {
        unint64_t v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v23 = v22 | (v20 << 6);
      }
      else
      {
        int64_t v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v40) {
          goto LABEL_34;
        }
        unint64_t v25 = v41[v24];
        ++v20;
        if (!v25)
        {
          int64_t v20 = v24 + 1;
          if (v24 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v25 = v41[v20];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v39;
              if (v44)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v41 = -1 << v38;
                }
                *(void *)(v11 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v20 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v25 = v41[v20];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v20 = v26;
          }
        }
LABEL_21:
        unint64_t v17 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      uint64_t v27 = *(void *)(v8 + 72);
      unint64_t v28 = *(void *)(v11 + 48) + v27 * v23;
      if (v44) {
        (*v45)(v10, v28, v46);
      }
      else {
        (*v42)(v10, v28, v46);
      }
      uint64_t v29 = v11;
      char v30 = *(unsigned char *)(*(void *)(v11 + 56) + v23);
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v31 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v18 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v13 + 48) + v27 * v21, v10, v46);
      *(unsigned char *)(*(void *)(v13 + 56) + v21) = v30;
      ++*(void *)(v13 + 16);
      uint64_t v11 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v5 = v13;
  return result;
}

uint64_t sub_100E6B72C(uint64_t a1, int a2)
{
  return sub_100E6D130(a1, a2, &qword_1016523B8, (void (*)(unint64_t, unsigned char *))sub_10001CEB0);
}

uint64_t sub_100E6B74C(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, (uint64_t *)&unk_101660930);
}

uint64_t sub_100E6B758(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000588C(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  int v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  char v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  uint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_100E6BB84(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, &qword_10165B298);
}

uint64_t sub_100E6BB90(uint64_t a1, int a2)
{
  return sub_100E7286C(a1, a2, &qword_101660720, &qword_101660728);
}

uint64_t sub_100E6BBA4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016607B8);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_100173E4C(v22, v36);
    }
    else
    {
      sub_10012F428((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_100173E4C(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6BEE0(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660F88);
}

uint64_t sub_100E6BEEC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  int v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000588C((uint64_t *)&unk_101660F90);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  int v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    unint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_100E8DE34((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100E6C3EC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101652540);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    BOOL v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_100E8DE34((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E6C814(uint64_t a1, char a2)
{
  return sub_100E6C834(a1, a2, (uint64_t *)&unk_101644340, (void (*)(uint64_t, unsigned char *))sub_100173E4C);
}

uint64_t sub_100E6C834(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, unsigned char *))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  sub_10000588C(a3);
  char v39 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v38 = v8 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    int64_t v22 = (void *)(v8 + 64);
    unint64_t v23 = *(void *)(v38 + 8 * v21);
    ++v16;
    if (!v23)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v38 + 8 * v16);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v38 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v16 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v38 + 8 * v16);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v24;
      }
    }
LABEL_21:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    uint64_t v25 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v8 + 56) + 32 * v20;
    if (v39)
    {
      a4(v28, v40);
    }
    else
    {
      sub_10012F428(v28, (uint64_t)v40);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v10 + 48) + 16 * v17);
    *int64_t v18 = v27;
    v18[1] = v26;
    uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a4)(v40, *(void *)(v10 + 56) + 32 * v17);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v8 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v36;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v10;
  return result;
}

uint64_t sub_100E6CB64(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660828);
}

uint64_t sub_100E6CB70(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v79 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C((uint64_t *)&unk_101660E58);
  int v65 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v57 = v2;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v59 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v58 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v61 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  os_log_type_t v66 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v63 = v6;
  uint64_t v64 = v8;
  uint64_t v78 = v5;
  int64_t v18 = v79;
  uint64_t v60 = v10;
  while (1)
  {
    if (v14)
    {
      unint64_t v23 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v58) {
      break;
    }
    uint64_t v26 = v59;
    unint64_t v27 = v59[v25];
    ++v17;
    if (!v27)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v58) {
        goto LABEL_34;
      }
      unint64_t v27 = v59[v17];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v58)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v57;
          if ((v65 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v59[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v17 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v58) {
              goto LABEL_34;
            }
            unint64_t v27 = v59[v17];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v28;
      }
    }
LABEL_21:
    unint64_t v14 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v17 << 6);
    int64_t v18 = v79;
LABEL_22:
    uint64_t v29 = *(void *)(v6 + 72);
    unint64_t v30 = *(void *)(v8 + 48) + v29 * v24;
    uint64_t v31 = 104 * v24;
    int64_t v77 = v17;
    if (v65)
    {
      (*v66)(v18, v30, v78);
      uint64_t v32 = *(void *)(v8 + 56) + v31;
      uint64_t v76 = *(void *)v32;
      int v75 = *(unsigned __int8 *)(v32 + 8);
      uint64_t v33 = *(void *)(v32 + 16);
      uint64_t v34 = *(void *)(v32 + 24);
      uint64_t v35 = *(void *)(v32 + 32);
      uint64_t v36 = *(void *)(v32 + 40);
      uint64_t v37 = *(void *)(v32 + 48);
      uint64_t v73 = *(void *)(v32 + 56);
      uint64_t v74 = v33;
      LODWORD(v33) = *(unsigned __int8 *)(v32 + 64);
      int v71 = *(unsigned __int8 *)(v32 + 65);
      int v72 = v33;
      uint64_t v38 = *(void *)(v32 + 72);
      uint64_t v69 = *(void *)(v32 + 80);
      uint64_t v70 = v38;
      uint64_t v68 = *(void *)(v32 + 88);
      int v67 = *(unsigned __int8 *)(v32 + 96);
    }
    else
    {
      (*v61)(v18, v30, v78);
      uint64_t v39 = *(void *)(v8 + 56) + v31;
      uint64_t v40 = *(void *)v39;
      int v75 = *(unsigned __int8 *)(v39 + 8);
      unint64_t v62 = v14;
      uint64_t v41 = v29;
      uint64_t v42 = *(void *)(v39 + 16);
      uint64_t v43 = *(void *)(v39 + 24);
      uint64_t v35 = *(void *)(v39 + 32);
      uint64_t v36 = *(void *)(v39 + 40);
      uint64_t v37 = *(void *)(v39 + 48);
      uint64_t v44 = *(void *)(v39 + 56);
      int v45 = *(unsigned __int8 *)(v39 + 64);
      int v71 = *(unsigned __int8 *)(v39 + 65);
      int v72 = v45;
      uint64_t v47 = *(void *)(v39 + 72);
      uint64_t v46 = *(void *)(v39 + 80);
      uint64_t v68 = *(void *)(v39 + 88);
      uint64_t v69 = v46;
      int v67 = *(unsigned __int8 *)(v39 + 96);
      uint64_t v73 = v44;
      swift_bridgeObjectRetain();
      uint64_t v70 = v47;
      swift_bridgeObjectRetain();
      uint64_t v76 = v40;
      swift_retain();
      uint64_t v74 = v42;
      uint64_t v34 = v43;
      uint64_t v29 = v41;
      unint64_t v14 = v62;
      uint64_t v10 = v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v48 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v49 = result & ~v48;
    unint64_t v50 = v49 >> 6;
    if (((-1 << v49) & ~*(void *)(v15 + 8 * (v49 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v49) & ~*(void *)(v15 + 8 * (v49 >> 6)))) | v49 & 0x7FFFFFFFFFFFFFC0;
      int64_t v18 = v79;
    }
    else
    {
      char v51 = 0;
      unint64_t v52 = (unint64_t)(63 - v48) >> 6;
      int64_t v18 = v79;
      do
      {
        if (++v50 == v52 && (v51 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v53 = v50 == v52;
        if (v50 == v52) {
          unint64_t v50 = 0;
        }
        v51 |= v53;
        uint64_t v54 = *(void *)(v15 + 8 * v50);
      }
      while (v54 == -1);
      unint64_t v19 = __clz(__rbit64(~v54)) + (v50 << 6);
    }
    *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v66)(*(void *)(v10 + 48) + v29 * v19, v18, v78);
    uint64_t v20 = *(void *)(v10 + 56) + 104 * v19;
    *(void *)uint64_t v20 = v76;
    *(unsigned char *)(v20 + 8) = v75;
    *(void *)(v20 + 16) = v74;
    *(void *)(v20 + 24) = v34;
    *(void *)(v20 + 32) = v35;
    *(void *)(v20 + 40) = v36;
    uint64_t v21 = v73;
    *(void *)(v20 + 48) = v37;
    *(void *)(v20 + 56) = v21;
    *(unsigned char *)(v20 + 64) = v72;
    *(unsigned char *)(v20 + 65) = v71;
    uint64_t v22 = v69;
    *(void *)(v20 + 72) = v70;
    *(void *)(v20 + 80) = v22;
    *(void *)(v20 + 88) = v68;
    *(unsigned char *)(v20 + 96) = v67;
    ++*(void *)(v10 + 16);
    uint64_t v6 = v63;
    uint64_t v8 = v64;
    int64_t v17 = v77;
  }
  swift_release();
  uint64_t v3 = v57;
  uint64_t v26 = v59;
  if ((v65 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v55 = 1 << *(unsigned char *)(v8 + 32);
  if (v55 >= 64) {
    bzero(v26, ((unint64_t)(v55 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v55;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E6D104(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_1016524B0);
}

uint64_t sub_100E6D110(uint64_t a1, int a2)
{
  return sub_100E6D130(a1, a2, &qword_101660E68, (void (*)(unint64_t, unsigned char *))sub_10001CEB0);
}

uint64_t sub_100E6D130(uint64_t a1, int a2, uint64_t *a3, void (*a4)(unint64_t, unsigned char *))
{
  char v51 = a4;
  uint64_t v6 = v4;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v4;
  sub_10000588C(a3);
  int v49 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v4;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  int v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  unint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v46 = v11;
  uint64_t v47 = v10;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    int64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v42;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v23;
    uint64_t v31 = v47;
    uint64_t v32 = v48;
    if (v49)
    {
      (*v50)(v47, v30, v48);
      v51(*(void *)(v11 + 56) + 40 * v23, v52);
    }
    else
    {
      (*v45)(v47, v30, v48);
      sub_10001D010(*(void *)(v11 + 56) + 40 * v23, (uint64_t)v52);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*v50)((char *)(*(void *)(v13 + 48) + v29 * v21), (unint64_t)v31, v32);
    uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))v51)(v52, *(void *)(v13 + 56) + 40 * v21);
    ++*(void *)(v13 + 16);
    uint64_t v8 = v28;
    uint64_t v11 = v46;
  }
  swift_release();
  uint64_t v6 = v42;
  int64_t v25 = v44;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v40;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v13;
  return result;
}

uint64_t sub_100E6D598(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  unint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000588C(&qword_101652460);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  char v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    unint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100E6DA98(uint64_t a1, char a2)
{
  return sub_100E6EC7C(a1, a2, (uint64_t *)&unk_101660DA0);
}

uint64_t sub_100E6DAA4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016524C8);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6DDD4(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_1016608A8);
}

uint64_t sub_100E6DDE0(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660B78);
}

uint64_t sub_100E6DDEC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v50 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660B20);
  int v49 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v46 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v48 = v5;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v45) {
      break;
    }
    unint64_t v24 = v46;
    unint64_t v25 = v46[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v25 = v46[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v45) {
              goto LABEL_34;
            }
            unint64_t v25 = v46[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v8 + 48);
    uint64_t v28 = *(void *)(v8 + 56);
    uint64_t v29 = v8;
    uint64_t v30 = v6;
    uint64_t v31 = *(void *)(v6 + 72);
    uint64_t v32 = v28 + v31 * v22;
    unint64_t v33 = *(void *)(v27 + 16 * v22 + 8);
    long long v51 = *(_OWORD *)(v27 + 16 * v22);
    if (v49)
    {
      (*v15)(v50, v32, v5);
    }
    else
    {
      (*v47)(v50, v32, v5);
      sub_1000361E0(v51, v33);
    }
    Hasher.init(_seed:)();
    uint64_t v34 = v51;
    sub_1000361E0(v51, v33);
    Data.hash(into:)();
    sub_10001CFB8(v34, v33);
    uint64_t result = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v36) & ~*(void *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v5 = v48;
      long long v20 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      uint64_t v5 = v48;
      long long v20 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(void *)(v10 + 48) + 16 * v19) = v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v31 * v19, v50, v5);
    ++*(void *)(v10 + 16);
    uint64_t v6 = v30;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v24 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v8 + 32);
  if (v42 >= 64) {
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v42;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E6E224(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016608A0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      id v34 = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6E50C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C((uint64_t *)&unk_1016606F0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      sub_100510360(v30);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  int64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100E6E934(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_101660910);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v34[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v34[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v35)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v34[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v28 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v20);
      Swift::UInt v29 = *v28;
      uint64_t v31 = *((void *)v28 + 1);
      uint64_t v30 = *((void *)v28 + 2);
      long long v36 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1000361E0(v36, *((unint64_t *)&v36 + 1));
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
      *(unsigned char *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v31;
      *(void *)(v18 + 16) = v30;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6EC70(uint64_t a1, char a2)
{
  return sub_100E6EC7C(a1, a2, (uint64_t *)&unk_101660870);
}

uint64_t sub_100E6EC7C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000588C(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  long long v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100E6EF88(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_101660E00);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E6F2A0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v34 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_1016524D8);
  char v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = (void *)v10;
  if (*(void *)(v8 + 16))
  {
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v33 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    uint64_t v31 = v2;
    int64_t v32 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        int64_t v24 = v33;
        if (v23 >= v32) {
          goto LABEL_24;
        }
        unint64_t v25 = v33[v23];
        ++v18;
        if (!v25)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v32) {
            goto LABEL_24;
          }
          unint64_t v25 = v33[v18];
          if (!v25)
          {
            int64_t v26 = v23 + 2;
            if (v26 >= v32)
            {
LABEL_24:
              swift_release();
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_31;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v8 + 32);
              if (v29 >= 64) {
                bzero(v24, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v24 = -1 << v29;
              }
              uint64_t v3 = v31;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v25 = v33[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v18 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_33;
                }
                if (v18 >= v32) {
                  goto LABEL_24;
                }
                unint64_t v25 = v33[v18];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v26;
          }
        }
LABEL_21:
        unint64_t v15 = (v25 - 1) & v25;
        unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
      }
      uint64_t v27 = *(void *)(v34 + 72);
      uint64_t v28 = *(void *)(v8 + 48) + v27 * v22;
      if (v9)
      {
        sub_100E8E4D4(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v19 = *(void *)(*(void *)(v8 + 56) + 8 * v22);
      }
      else
      {
        sub_100E8DE8C(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v19 = *(void *)(*(void *)(v8 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_100D1CDD8();
      Hasher._finalize()();
      unint64_t v20 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = sub_100E8E4D4((uint64_t)v7, v11[6] + v27 * v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(void *)(v11[7] + 8 * v20) = v19;
      ++v11[2];
    }
  }
  uint64_t result = swift_release();
LABEL_31:
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E6F5F8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v14 = *v2;
  sub_10000588C((uint64_t *)&unk_101660F60);
  int v55 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (*(void *)(v14 + 16))
  {
    uint64_t v61 = v13;
    int v49 = v2;
    uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
    uint64_t v18 = *(void *)(v14 + 64);
    unint64_t v52 = (void *)(v14 + 64);
    if (v17 < 64) {
      uint64_t v19 = ~(-1 << v17);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v20 = v19 & v18;
    int64_t v51 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v53 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v54 = (void (**)(char *, unsigned __int8 *, uint64_t))(v6 + 32);
    uint64_t v21 = v15 + 64;
    uint64_t result = swift_retain();
    int64_t v23 = 0;
    uint64_t v24 = v50;
    unint64_t v25 = (unsigned __int8 *)v56;
    while (1)
    {
      if (v20)
      {
        uint64_t v59 = (v20 - 1) & v20;
        unint64_t v28 = __clz(__rbit64(v20)) | (v23 << 6);
      }
      else
      {
        int64_t v29 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          return result;
        }
        if (v29 >= v51) {
          goto LABEL_40;
        }
        unint64_t v30 = v52[v29];
        ++v23;
        if (!v30)
        {
          int64_t v23 = v29 + 1;
          if (v29 + 1 >= v51) {
            goto LABEL_40;
          }
          unint64_t v30 = v52[v23];
          if (!v30)
          {
            int64_t v31 = v29 + 2;
            if (v31 >= v51)
            {
LABEL_40:
              swift_release();
              uint64_t v3 = v49;
              if (v55)
              {
                uint64_t v47 = 1 << *(unsigned char *)(v14 + 32);
                if (v47 >= 64) {
                  bzero(v52, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v52 = -1 << v47;
                }
                *(void *)(v14 + 16) = 0;
              }
              break;
            }
            unint64_t v30 = v52[v31];
            if (!v30)
            {
              while (1)
              {
                int64_t v23 = v31 + 1;
                if (__OFADD__(v31, 1)) {
                  goto LABEL_47;
                }
                if (v23 >= v51) {
                  goto LABEL_40;
                }
                unint64_t v30 = v52[v23];
                ++v31;
                if (v30) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v23 = v31;
          }
        }
LABEL_21:
        uint64_t v59 = (v30 - 1) & v30;
        unint64_t v28 = __clz(__rbit64(v30)) + (v23 << 6);
      }
      uint64_t v32 = *(void *)(v24 + 72);
      uint64_t v33 = *(void *)(v14 + 48) + v32 * v28;
      int64_t v60 = v23;
      uint64_t v58 = v32;
      uint64_t v34 = (uint64_t)v61;
      if (v55)
      {
        sub_100E8E4D4(v33, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        uint64_t v57 = *(void *)(*(void *)(v14 + 56) + 8 * v28);
      }
      else
      {
        sub_100E8DE8C(v33, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        uint64_t v57 = *(void *)(*(void *)(v14 + 56) + 8 * v28);
        swift_retain();
      }
      Hasher.init(_seed:)();
      sub_100E8DE8C(v34, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          char v36 = v8;
          Swift::UInt v37 = *v25;
          Hasher._combine(_:)(1uLL);
          Swift::UInt v38 = v37;
          uint64_t v8 = v36;
          uint64_t v24 = v50;
          Hasher._combine(_:)(v38);
          swift_bridgeObjectRetain();
          unint64_t v25 = (unsigned __int8 *)v56;
          String.hash(into:)();
          swift_bridgeObjectRelease_n();
          goto LABEL_31;
        }
        (*v54)(v8, v25, v5);
        Swift::UInt v39 = 2;
      }
      else
      {
        (*v54)(v8, v25, v5);
        Swift::UInt v39 = 0;
      }
      Hasher._combine(_:)(v39);
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*v53)(v8, v5);
LABEL_31:
      uint64_t result = Hasher._finalize()();
      uint64_t v40 = -1 << *(unsigned char *)(v16 + 32);
      unint64_t v41 = result & ~v40;
      unint64_t v42 = v41 >> 6;
      if (((-1 << v41) & ~*(void *)(v21 + 8 * (v41 >> 6))) != 0)
      {
        unint64_t v26 = __clz(__rbit64((-1 << v41) & ~*(void *)(v21 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v43 = 0;
        unint64_t v44 = (unint64_t)(63 - v40) >> 6;
        do
        {
          if (++v42 == v44 && (v43 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          BOOL v45 = v42 == v44;
          if (v42 == v44) {
            unint64_t v42 = 0;
          }
          v43 |= v45;
          uint64_t v46 = *(void *)(v21 + 8 * v42);
        }
        while (v46 == -1);
        unint64_t v26 = __clz(__rbit64(~v46)) + (v42 << 6);
      }
      uint64_t v27 = v58;
      *(void *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      uint64_t result = sub_100E8E4D4((uint64_t)v61, *(void *)(v16 + 48) + v27 * v26, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
      *(void *)(*(void *)(v16 + 56) + 8 * v26) = v57;
      ++*(void *)(v16 + 16);
      unint64_t v20 = v59;
      int64_t v23 = v60;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v16;
  return result;
}

uint64_t sub_100E6FC18(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_10000588C(&qword_101660908);
  int v45 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    uint64_t v40 = v2;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 64);
    unint64_t v42 = (void *)(v7 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v11;
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    char v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v14 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    uint64_t v44 = v7;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v42 = -1 << v39;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      uint64_t v24 = *(void *)(v7 + 56);
      unint64_t v25 = (unsigned __int8 *)(*(void *)(v7 + 48) + 24 * v20);
      Swift::UInt v26 = *v25;
      uint64_t v27 = *((void *)v25 + 1);
      uint64_t v28 = *((void *)v25 + 2);
      uint64_t v29 = v5;
      uint64_t v30 = *(void *)(v5 + 72);
      uint64_t v31 = v24 + v30 * v20;
      if (v45)
      {
        (*v46)(v47, v31, v48);
      }
      else
      {
        (*v43)(v47, v31, v48);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v14 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v9 + 48) + 24 * v17;
      *(unsigned char *)uint64_t v18 = v26;
      *(void *)(v18 + 8) = v27;
      *(void *)(v18 + 16) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v9 + 56) + v30 * v17, v47, v48);
      ++*(void *)(v9 + 16);
      uint64_t v7 = v44;
      uint64_t v5 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_100E70028(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660F80);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E70304(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_1016609C0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        id v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E705D8(uint64_t a1, char a2)
{
  return sub_100E705E4(a1, a2, &qword_101660880);
}

uint64_t sub_100E705E4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000588C(a3);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16))
  {
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    BOOL v37 = (void *)(v6 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v25 = v37[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v7)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v37 = -1 << v35;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v25 = v37[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_30:
        unint64_t v12 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      int64_t v32 = (uint64_t *)(*(void *)(v6 + 48) + v31);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      long long v38 = *(_OWORD *)(*(void *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 16 * v19;
      unint64_t v21 = (void *)(*(void *)(v9 + 48) + v20);
      *unint64_t v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v20) = v38;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v9;
  return result;
}

uint64_t sub_100E708EC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  char v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660610);
  int v42 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  long long v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v36 = v2;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v39 = v8;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    unint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v42)
    {
      sub_100E8E4D4(v26, (uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_100E8DE8C(v26, (uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for BeaconIdentifier();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = v39;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v22 = v38;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E70DC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660E48);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    char v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E71078(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660E40);
}

uint64_t sub_100E71084(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C((uint64_t *)&unk_101660B50);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    int64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    char v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E714AC(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, type metadata accessor for DeviceEvent, &qword_101660B88, type metadata accessor for DeviceEvent, type metadata accessor for DeviceEvent);
}

uint64_t sub_100E714F4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660B80);
  char v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    int64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v39 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_34;
        }
        unint64_t v24 = v39[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v24 = v39[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v9)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v24 = v39[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void *)(v8 + 56) + v26 * v22;
      unint64_t v28 = *(void *)(*(void *)(v8 + 48) + 16 * v22 + 8);
      long long v41 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v22);
      if (v9)
      {
        sub_100E8E4D4(v27, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      }
      else
      {
        sub_100E8DE8C(v27, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        sub_1000361E0(v41, v28);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        long long v20 = v41;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        long long v20 = v41;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_OWORD *)(*(void *)(v11 + 48) + 16 * v19) = v20;
      uint64_t result = sub_100E8E4D4((uint64_t)v7, *(void *)(v11 + 56) + v26 * v19, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E718C8(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, &qword_1016524C0, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100E71910(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660E20);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    int64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = v39[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          if ((v41 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = v39[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    long long v30 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    unint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + 32 * v21);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    uint64_t v34 = v31[2];
    unint64_t v35 = v31[3];
    long long v42 = v30;
    unint64_t v36 = *((void *)&v30 + 1);
    if ((v41 & 1) == 0)
    {
      sub_1000361E0(v30, *((unint64_t *)&v30 + 1));
      sub_1000361E0(v32, v33);
      sub_1000361E0(v34, v35);
    }
    Hasher.init(_seed:)();
    sub_1000361E0(v42, v36);
    Data.hash(into:)();
    sub_10001CFB8(v42, v36);
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      long long v18 = v42;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      long long v18 = v42;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
    unint64_t v19 = (uint64_t *)(*(void *)(v7 + 56) + 32 * v17);
    *unint64_t v19 = v32;
    v19[1] = v33;
    uint64_t v19[2] = v34;
    v19[3] = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E71C80(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660E28);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v39) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v40 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v40 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v40 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void *)(v5 + 56) + v31;
    uint64_t v34 = *(void *)v33;
    char v35 = *(unsigned char *)(v33 + 8);
    long long v42 = v32;
    unint64_t v36 = *((void *)&v32 + 1);
    if ((v41 & 1) == 0) {
      sub_1000361E0(v32, *((unint64_t *)&v32 + 1));
    }
    Hasher.init(_seed:)();
    sub_1000361E0(v42, v36);
    Data.hash(into:)();
    sub_10001CFB8(v42, v36);
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      long long v18 = v42;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      long long v18 = v42;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v19 = 16 * v17;
    *(_OWORD *)(*(void *)(v7 + 48) + v19) = v18;
    uint64_t v20 = *(void *)(v7 + 56) + v19;
    *(void *)uint64_t v20 = v34;
    *(unsigned char *)(v20 + 8) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E71FD4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101660E30);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    int64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    char v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E723FC(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660E38);
}

uint64_t sub_100E72408(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, &qword_101660F58);
}

uint64_t sub_100E72414(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000588C(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_100E72840(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660ED8);
}

uint64_t sub_100E7284C(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660F10);
}

uint64_t sub_100E72858(uint64_t a1, int a2)
{
  return sub_100E7286C(a1, a2, &qword_101660F20, &qword_101660F28);
}

uint64_t sub_100E7286C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = sub_10000588C(a3);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  int v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_10000588C(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  int v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  int v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  unint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    int64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  int64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v16;
  return result;
}

uint64_t sub_100E72D6C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660F08);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v29 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt64 v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        sub_1000361E0(v30, *((unint64_t *)&v30 + 1));
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E73048(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660BD0);
}

uint64_t sub_100E73054(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, (uint64_t *)&unk_101660940);
}

uint64_t sub_100E73060(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660960);
}

uint64_t sub_100E7306C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660840);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v5 + 56) + 48 * v17;
    if (v37)
    {
      sub_1007157C4(v25, (uint64_t)v38);
    }
    else
    {
      sub_100E8AC88(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_1007157C4((uint64_t)v38, *(void *)(v7 + 56) + 48 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E73394(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101652398);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E736A0(uint64_t a1, int a2)
{
  return sub_100E73B70(a1, a2, (uint64_t (*)(void))type metadata accessor for SecureLocation, &qword_101660E88, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

uint64_t sub_100E736E8(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, (uint64_t *)&unk_101660660);
}

uint64_t sub_100E736F4(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, &qword_10165B210);
}

uint64_t sub_100E73700(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C((uint64_t *)&unk_101660E90);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  BOOL v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100E73B28(uint64_t a1, int a2)
{
  return sub_100E73B70(a1, a2, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, &qword_101660E80, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
}

uint64_t sub_100E73B70(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v47 = a6;
  uint64_t v50 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = *v6;
  sub_10000588C(a4);
  int v49 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  int v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v44 = v6;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45) {
      break;
    }
    uint64_t v28 = v46;
    unint64_t v29 = v46[v27];
    ++v22;
    if (!v29)
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v29 = v46[v22];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v22 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v45) {
              goto LABEL_34;
            }
            unint64_t v29 = v46[v22];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_22:
    uint64_t v31 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v26);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(v48 + 72);
    uint64_t v35 = *(void *)(v13 + 56) + v34 * v26;
    if (v49)
    {
      sub_100E8E4D4(v35, (uint64_t)v12, v50);
    }
    else
    {
      sub_100E8DE8C(v35, (uint64_t)v12, v47);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v23 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    int64_t v24 = (void *)(*(void *)(v15 + 48) + 16 * v23);
    *int64_t v24 = v33;
    v24[1] = v32;
    uint64_t result = sub_100E8E4D4((uint64_t)v12, *(void *)(v15 + 56) + v34 * v23, v50);
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v8 = v44;
  uint64_t v28 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v43;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v15;
  return result;
}

uint64_t sub_100E73F28(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660EE0);
}

uint64_t sub_100E73F34(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, (uint64_t *)&unk_101660EE8);
}

uint64_t sub_100E73F40(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660ED0);
}

uint64_t sub_100E73F4C(uint64_t a1, int a2)
{
  return sub_100E73B70(a1, a2, type metadata accessor for MultipartAccessoryPairingInfo, (uint64_t *)&unk_101660B30, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_100E73F94(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000588C(&qword_101660618);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v43 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  BOOL v41 = v2;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v44 = v6 + 16;
  uint64_t v46 = v6;
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v45 = v11;
  uint64_t v47 = v5;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v42) {
      break;
    }
    unint64_t v25 = v43;
    unint64_t v26 = v43[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v26 = v43[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v43[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v42) {
              goto LABEL_34;
            }
            unint64_t v26 = v43[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v48 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v50)
    {
      sub_100E8E4D4(v29, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v30 = *(void *)(v11 + 56);
      uint64_t v31 = *(void *)(v46 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 32))(v52, v30 + v31 * v23, v5);
    }
    else
    {
      sub_100E8DE8C(v29, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v31 = *(void *)(v46 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v52, v32 + v31 * v23, v5);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v5 = v47;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v5 = v47;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_100E8E4D4((uint64_t)v10, *(void *)(v13 + 48) + v28 * v21, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v31 * v21, v52, v5);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v25 = v43;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v40;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100E744DC(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660650);
}

uint64_t sub_100E744E8(uint64_t a1, int a2)
{
  return sub_100E76914(a1, a2, &qword_101660EA0, (uint64_t *)&unk_101660EA8);
}

uint64_t sub_100E744FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660F78);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v26 = *(char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(qword_10137F638[v26]);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E747D8(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, type metadata accessor for BeaconState, &qword_101660F70, type metadata accessor for BeaconState, type metadata accessor for BeaconState);
}

uint64_t sub_100E74820(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101652528);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v40 = v2;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v44 = v6;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    BOOL v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v41) {
              goto LABEL_34;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v46)
    {
      (*v47)(v8, v28, v49);
      uint64_t v29 = *(void *)(v9 + 56) + 40 * v22;
      uint64_t v30 = *(void *)v29;
      long long v50 = *(_OWORD *)(v29 + 8);
      long long v48 = *(_OWORD *)(v29 + 24);
    }
    else
    {
      (*v43)(v8, v28, v49);
      uint64_t v31 = *(void *)(v9 + 56) + 40 * v22;
      uint64_t v30 = *(void *)v31;
      long long v50 = *(_OWORD *)(v31 + 8);
      long long v48 = *(_OWORD *)(v31 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v47)(*(void *)(v11 + 48) + v27 * v19, v8, v49);
    uint64_t v20 = *(void *)(v11 + 56) + 40 * v19;
    *(void *)uint64_t v20 = v30;
    *(_OWORD *)(v20 + 8) = v50;
    *(_OWORD *)(v20 + 24) = v48;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v44;
  }
  swift_release();
  uint64_t v3 = v40;
  BOOL v24 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v24 = -1 << v39;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E74CB8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660968);
  int v51 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v47 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v45 = v2;
  int64_t v46 = (unint64_t)(v11 + 63) >> 6;
  long long v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int v53 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v49 = v6;
  uint64_t v50 = v8;
  uint64_t v58 = v5;
  int64_t v18 = v52;
  while (1)
  {
    if (v14)
    {
      unint64_t v22 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v46) {
      break;
    }
    unint64_t v25 = v47;
    unint64_t v26 = v47[v24];
    ++v17;
    if (!v26)
    {
      int64_t v17 = v24 + 1;
      if (v24 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v26 = v47[v17];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v45;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v47[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v17 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v46) {
              goto LABEL_34;
            }
            unint64_t v26 = v47[v17];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v27;
      }
    }
LABEL_21:
    unint64_t v14 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v8 + 48) + v28 * v23;
    int64_t v57 = v17;
    if (v51)
    {
      (*v53)(v18, v29, v58);
      uint64_t v30 = *(void *)(v8 + 56) + 48 * v23;
      uint64_t v32 = *(void *)v30;
      uint64_t v31 = *(void *)(v30 + 8);
      uint64_t v33 = *(void *)(v30 + 24);
      uint64_t v55 = *(void *)(v30 + 16);
      uint64_t v56 = v31;
      int v54 = *(unsigned __int8 *)(v30 + 32);
      uint64_t v34 = *(void *)(v30 + 40);
    }
    else
    {
      (*v48)(v18, v29, v58);
      uint64_t v35 = *(void *)(v8 + 56) + 48 * v23;
      uint64_t v32 = *(void *)v35;
      uint64_t v36 = *(void *)(v35 + 8);
      uint64_t v33 = *(void *)(v35 + 24);
      uint64_t v55 = *(void *)(v35 + 16);
      uint64_t v56 = v36;
      int v54 = *(unsigned __int8 *)(v35 + 32);
      uint64_t v34 = *(void *)(v35 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v15 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v38) & ~*(void *)(v15 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      int64_t v18 = v52;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      int64_t v18 = v52;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v15 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v53)(*(void *)(v10 + 48) + v28 * v19, v18, v58);
    uint64_t v20 = *(void *)(v10 + 56) + 48 * v19;
    uint64_t v21 = v56;
    int64_t v17 = v57;
    *(void *)uint64_t v20 = v32;
    *(void *)(v20 + 8) = v21;
    *(void *)(v20 + 16) = v55;
    *(void *)(v20 + 24) = v33;
    *(unsigned char *)(v20 + 32) = v54;
    *(void *)(v20 + 40) = v34;
    ++*(void *)(v10 + 16);
    uint64_t v6 = v49;
    uint64_t v8 = v50;
  }
  swift_release();
  uint64_t v3 = v45;
  unint64_t v25 = v47;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v8 + 32);
  if (v44 >= 64) {
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v44;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E75168(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ManagedCBPeripheralManager.KeyType();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_101660628);
  int v42 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v39 = v8;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    unint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v42)
    {
      sub_100E8E4D4(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
      id v27 = *(id *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_100E8DE8C(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
      id v27 = *(id *)(*(void *)(v8 + 56) + 8 * v20);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v8 = v39;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      uint64_t v8 = v39;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v22 = v38;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E755C0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v51 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v55 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  uint64_t v54 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  sub_10000588C(&qword_101660648);
  int v56 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = (void *)v14;
  if (*(void *)(v13 + 16))
  {
    int64_t v46 = v2;
    char v16 = *(unsigned char *)(v13 + 32);
    uint64_t v17 = *(void *)(v13 + 64);
    long long v48 = (void *)(v13 + 64);
    uint64_t v18 = 1 << v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v20 = v19 & v17;
    int64_t v47 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v49 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v52 = v14 + 64;
    int v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t result = swift_retain();
    int64_t v22 = 0;
    while (1)
    {
      if (v20)
      {
        unint64_t v31 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v32 = v31 | (v22 << 6);
      }
      else
      {
        int64_t v33 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        uint64_t v34 = v48;
        if (v33 >= v47) {
          goto LABEL_27;
        }
        unint64_t v35 = v48[v33];
        ++v22;
        if (!v35)
        {
          int64_t v22 = v33 + 1;
          if (v33 + 1 >= v47) {
            goto LABEL_27;
          }
          unint64_t v35 = v48[v22];
          if (!v35)
          {
            int64_t v36 = v33 + 2;
            if (v36 >= v47)
            {
LABEL_27:
              swift_release();
              if ((v56 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v46;
                goto LABEL_34;
              }
              uint64_t v45 = 1 << *(unsigned char *)(v13 + 32);
              if (v45 >= 64) {
                bzero(v34, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v45;
              }
              uint64_t v3 = v46;
              *(void *)(v13 + 16) = 0;
              break;
            }
            unint64_t v35 = v48[v36];
            if (!v35)
            {
              while (1)
              {
                int64_t v22 = v36 + 1;
                if (__OFADD__(v36, 1)) {
                  goto LABEL_36;
                }
                if (v22 >= v47) {
                  goto LABEL_27;
                }
                unint64_t v35 = v48[v22];
                ++v36;
                if (v35) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v22 = v36;
          }
        }
LABEL_21:
        unint64_t v20 = (v35 - 1) & v35;
        unint64_t v32 = __clz(__rbit64(v35)) + (v22 << 6);
      }
      uint64_t v37 = *(void *)(v54 + 72);
      uint64_t v38 = *(void *)(v13 + 48) + v37 * v32;
      uint64_t v39 = 24 * v32;
      int64_t v60 = v22;
      if (v56)
      {
        sub_100E8E4D4(v38, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
        uint64_t v40 = *(void *)(v13 + 56) + v39;
        uint64_t v41 = *(void *)v40;
        uint64_t v58 = *(void *)(v40 + 8);
        uint64_t v59 = v41;
        int v57 = *(unsigned __int8 *)(v40 + 16);
      }
      else
      {
        sub_100E8DE8C(v38, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
        uint64_t v42 = *(void *)(v13 + 56) + v39;
        uint64_t v43 = *(void *)v42;
        uint64_t v58 = *(void *)(v42 + 8);
        uint64_t v59 = v43;
        int v57 = *(unsigned __int8 *)(v42 + 16);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v44 = v55;
      sub_10001D074((uint64_t)&v12[v10[6]], v55, &qword_101638CF0);
      if ((*v53)(v44, 1, v5) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v23 = v13;
        uint64_t v24 = v5;
        uint64_t v25 = v51;
        (*v50)(v51, v44, v24);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v26 = v25;
        uint64_t v5 = v24;
        uint64_t v13 = v23;
        (*v49)(v26, v5);
      }
      type metadata accessor for Date();
      sub_100E8DE34((unint64_t *)&unk_10163ADF0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v12[v10[9]]);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v12[v10[11]]);
      Hasher._combine(_:)(v12[v10[12]]);
      Hasher._finalize()();
      uint64_t v27 = v52;
      unint64_t v28 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v27 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      uint64_t result = sub_100E8E4D4((uint64_t)v12, v15[6] + v37 * v28, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v29 = v15[7] + 24 * v28;
      int64_t v22 = v60;
      uint64_t v30 = v58;
      *(void *)uint64_t v29 = v59;
      *(void *)(v29 + 8) = v30;
      *(unsigned char *)(v29 + 16) = v57;
      ++v15[2];
    }
  }
  uint64_t result = swift_release();
LABEL_34:
  *uint64_t v3 = v15;
  return result;
}

uint64_t sub_100E75C64(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v49 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  uint64_t v48 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  sub_10000588C((uint64_t *)&unk_101660638);
  int v50 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = (void *)v14;
  if (*(void *)(v13 + 16))
  {
    uint64_t v40 = v2;
    char v16 = *(unsigned char *)(v13 + 32);
    uint64_t v17 = *(void *)(v13 + 64);
    uint64_t v42 = (void *)(v13 + 64);
    uint64_t v18 = 1 << v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v20 = v19 & v17;
    int64_t v41 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v43 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v46 = v14 + 64;
    int64_t v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t result = swift_retain();
    int64_t v22 = 0;
    while (1)
    {
      if (v20)
      {
        unint64_t v29 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v30 = v29 | (v22 << 6);
      }
      else
      {
        int64_t v31 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        unint64_t v32 = v42;
        if (v31 >= v41) {
          goto LABEL_27;
        }
        unint64_t v33 = v42[v31];
        ++v22;
        if (!v33)
        {
          int64_t v22 = v31 + 1;
          if (v31 + 1 >= v41) {
            goto LABEL_27;
          }
          unint64_t v33 = v42[v22];
          if (!v33)
          {
            int64_t v34 = v31 + 2;
            if (v34 >= v41)
            {
LABEL_27:
              swift_release();
              if ((v50 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v40;
                goto LABEL_34;
              }
              uint64_t v38 = 1 << *(unsigned char *)(v13 + 32);
              if (v38 >= 64) {
                bzero(v32, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v32 = -1 << v38;
              }
              uint64_t v3 = v40;
              *(void *)(v13 + 16) = 0;
              break;
            }
            unint64_t v33 = v42[v34];
            if (!v33)
            {
              while (1)
              {
                int64_t v22 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  goto LABEL_36;
                }
                if (v22 >= v41) {
                  goto LABEL_27;
                }
                unint64_t v33 = v42[v22];
                ++v34;
                if (v33) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v22 = v34;
          }
        }
LABEL_21:
        unint64_t v20 = (v33 - 1) & v33;
        unint64_t v30 = __clz(__rbit64(v33)) + (v22 << 6);
      }
      uint64_t v35 = *(void *)(v48 + 72);
      uint64_t v36 = *(void *)(v13 + 48) + v35 * v30;
      int64_t v52 = v22;
      if (v50)
      {
        sub_100E8E4D4(v36, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
        uint64_t v51 = *(void *)(*(void *)(v13 + 56) + 8 * v30);
      }
      else
      {
        sub_100E8DE8C(v36, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
        uint64_t v51 = *(void *)(*(void *)(v13 + 56) + 8 * v30);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v37 = v49;
      sub_10001D074((uint64_t)&v12[v10[6]], v49, &qword_101638CF0);
      if ((*v47)(v37, 1, v5) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v23 = v13;
        uint64_t v24 = v5;
        uint64_t v25 = v45;
        (*v44)(v45, v37, v24);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v26 = v25;
        uint64_t v5 = v24;
        uint64_t v13 = v23;
        (*v43)(v26, v5);
      }
      type metadata accessor for Date();
      sub_100E8DE34((unint64_t *)&unk_10163ADF0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v12[v10[9]]);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v12[v10[11]]);
      Hasher._combine(_:)(v12[v10[12]]);
      Hasher._finalize()();
      uint64_t v27 = v46;
      unint64_t v28 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v27 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      uint64_t result = sub_100E8E4D4((uint64_t)v12, v15[6] + v35 * v28, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      int64_t v22 = v52;
      *(void *)(v15[7] + 8 * v28) = v51;
      ++v15[2];
    }
  }
  uint64_t result = swift_release();
LABEL_34:
  *uint64_t v3 = v15;
  return result;
}

uint64_t sub_100E762C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660630);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v34 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    long long v35 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1000361E0(v35, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      id v31 = v30;
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v35;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E765CC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_101660830);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E768A0(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660DF8);
}

uint64_t sub_100E768AC(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_1016609F8);
}

uint64_t sub_100E768B8(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t *)&unk_1016605E8, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100E76900(uint64_t a1, int a2)
{
  return sub_100E76914(a1, a2, (uint64_t *)&unk_10164E870, &qword_101660D98);
}

uint64_t sub_100E76914(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  int v57 = a3;
  uint64_t v8 = sub_10000588C(a3);
  uint64_t v51 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v56 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v53 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  sub_10000588C(a4);
  int v52 = a2;
  uint64_t v14 = v13;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v48 = (void *)(v13 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v46 = v4;
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v54 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v55 = v10;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  uint64_t v50 = v14;
  BOOL v24 = v53;
  while (1)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v47) {
      break;
    }
    int64_t v29 = v48;
    unint64_t v30 = v48[v28];
    ++v23;
    if (!v30)
    {
      int64_t v23 = v28 + 1;
      if (v28 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v30 = v48[v23];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v46;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v48[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v23 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v47) {
              goto LABEL_34;
            }
            unint64_t v30 = v48[v23];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v23 << 6);
    BOOL v24 = v53;
LABEL_22:
    uint64_t v32 = v11;
    uint64_t v33 = *(void *)(v11 + 72);
    unint64_t v34 = *(void *)(v14 + 48) + v33 * v27;
    if (v52)
    {
      (*v54)(v24, v34, v55);
      uint64_t v35 = *(void *)(v14 + 56);
      uint64_t v36 = *(void *)(v51 + 72);
      sub_10001D608(v35 + v36 * v27, v56, v57);
    }
    else
    {
      (*v49)(v24, v34, v55);
      uint64_t v37 = *(void *)(v14 + 56);
      uint64_t v36 = *(void *)(v51 + 72);
      sub_10001D074(v37 + v36 * v27, v56, v57);
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v38 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v39 = result & ~v38;
    unint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v39) & ~*(void *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      BOOL v24 = v53;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v38) >> 6;
      BOOL v24 = v53;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v43 = v40 == v42;
        if (v40 == v42) {
          unint64_t v40 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v21 + 8 * v40);
      }
      while (v44 == -1);
      unint64_t v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v54)((char *)(*(void *)(v16 + 48) + v33 * v25), (unint64_t)v24, v55);
    uint64_t result = sub_10001D608(v56, *(void *)(v16 + 56) + v36 * v25, v57);
    ++*(void *)(v16 + 16);
    uint64_t v14 = v50;
    uint64_t v11 = v32;
  }
  swift_release();
  uint64_t v6 = v46;
  int64_t v29 = v48;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v45 = 1 << *(unsigned char *)(v14 + 32);
  if (v45 >= 64) {
    bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v29 = -1 << v45;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v16;
  return result;
}

uint64_t sub_100E76DF8(uint64_t a1, int a2)
{
  return sub_100E76914(a1, a2, &qword_10163CBB0, &qword_101660DE0);
}

uint64_t sub_100E76E0C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for StableIdentifier();
  uint64_t v39 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C((uint64_t *)&unk_101660950);
  int v40 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v36 = v2;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    char v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v39 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v40)
    {
      sub_100E8E4D4(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_100E8DE8C(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    sub_101112A38();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  char v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E771EC(uint64_t a1, int a2)
{
  return sub_100E77234(a1, a2, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord, &qword_101660740, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
}

uint64_t sub_100E77234(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v46 = a6;
  uint64_t v9 = v6;
  uint64_t v11 = a3(0);
  uint64_t v47 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = *v6;
  sub_10000588C(a4);
  int v48 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v45 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  BOOL v43 = v6;
  int64_t v44 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v44) {
      break;
    }
    uint64_t v28 = v45;
    unint64_t v29 = v45[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v29 = v45[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v9 = v43;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v45[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v44) {
              goto LABEL_34;
            }
            unint64_t v29 = v45[v23];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v30;
      }
    }
LABEL_21:
    unint64_t v20 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    char v31 = *(void **)(*(void *)(v14 + 48) + 8 * v26);
    uint64_t v32 = *(void *)(v47 + 72);
    uint64_t v33 = *(void *)(v14 + 56) + v32 * v26;
    if (v48)
    {
      sub_100E8E4D4(v33, (uint64_t)v13, a5);
    }
    else
    {
      sub_100E8DE8C(v33, (uint64_t)v13, v46);
      id v34 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v16 + 40));
    uint64_t v35 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v21 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v24 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(*(void *)(v16 + 48) + 8 * v24) = v31;
    uint64_t result = sub_100E8E4D4((uint64_t)v13, *(void *)(v16 + 56) + v32 * v24, a5);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v9 = v43;
  uint64_t v28 = v45;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v14 + 32);
  if (v42 >= 64) {
    bzero(v28, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v42;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v9 = v16;
  return result;
}

uint64_t sub_100E775C0(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, (uint64_t *)&unk_101660810);
}

uint64_t sub_100E775CC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660F50);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12) {
          goto LABEL_33;
        }
        unint64_t v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v25 = v9[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v25 = v9[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_30:
        unint64_t v11 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + v31);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      long long v35 = v32;
      if ((a2 & 1) == 0)
      {
        sub_1000361E0(v32, *((unint64_t *)&v32 + 1));
        sub_1000361E0(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        long long v20 = v35;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        long long v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v21 = 16 * v19;
      *(_OWORD *)(*(void *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(void *)(v7 + 56) + v21) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E778E4(uint64_t a1, int a2)
{
  return sub_100E7286C(a1, a2, &qword_1016609B0, &qword_1016609B8);
}

uint64_t sub_100E778F8(uint64_t a1, int a2)
{
  return sub_100E6D130(a1, a2, (uint64_t *)&unk_101660B60, (void (*)(unint64_t, unsigned char *))sub_10001CEB0);
}

uint64_t sub_100E77918(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101652450);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v41 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v49 = v8;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  uint64_t v50 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    int64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      BOOL v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      long long v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v30 = *v32;
      unint64_t v31 = v32[1];
      sub_1000361E0(*v32, v31);
    }
    sub_100E8DE34((unint64_t *)&unk_10165F130, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    long long v20 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v19);
    *long long v20 = v30;
    v20[1] = v31;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  int64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E77D64(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660B48);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v33 = v2;
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v34) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v34)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((v6 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v34) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    char v30 = *(unsigned char *)(*(void *)(v5 + 56) + v21);
    long long v36 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    unint64_t v31 = *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8);
    if ((v6 & 1) == 0) {
      sub_1000361E0(v36, v31);
    }
    Hasher.init(_seed:)();
    sub_1000361E0(v36, v31);
    Data.hash(into:)();
    sub_10001CFB8(v36, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v36;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v36;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v18) = v19;
    *(unsigned char *)(*(void *)(v8 + 56) + v18) = v30;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  int64_t v23 = (void *)(v5 + 64);
  if ((v6 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_100E78094(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660A08);
}

uint64_t sub_100E780A0(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for SafeLocation, &qword_101660A00, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100E780E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_1016609D0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v20);
    Swift::UInt v30 = *v29;
    uint64_t v32 = *((void *)v29 + 1);
    uint64_t v31 = *((void *)v29 + 2);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v30);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(unsigned char *)uint64_t v18 = v30;
    *(void *)(v18 + 8) = v32;
    *(void *)(v18 + 16) = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7842C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for BeaconScanner.AISLookupState(0);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000588C((uint64_t *)&unk_1016609A0);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  int64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  int v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  int64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    int64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_100E8E4D4(v32 + v33 * v24, v54, type metadata accessor for BeaconScanner.AISLookupState);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_100E8DE8C(v34 + v33 * v24, v54, type metadata accessor for BeaconScanner.AISLookupState);
    }
    sub_100062734((unint64_t *)&qword_10163CB90, &qword_10163D210);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      int64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      int64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_100E8E4D4(v54, *(void *)(v13 + 56) + v33 * v22, type metadata accessor for BeaconScanner.AISLookupState);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100E7893C(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101660980, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100E78984(uint64_t a1, int a2)
{
  return sub_100E7286C(a1, a2, &qword_101660970, &qword_101660978);
}

uint64_t sub_100E78998(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660900);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        int64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12) {
          goto LABEL_33;
        }
        unint64_t v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          int64_t v15 = v22 + 1;
          if (v22 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v23 = v9[v15];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v31;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v23 = v9[v15];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
      {
        id v30 = v29;
        sub_1000361E0(v33, *((unint64_t *)&v33 + 1));
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        unint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v19) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E78C70(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, &qword_1016608F0);
}

uint64_t sub_100E78C7C(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_1016608E8);
}

uint64_t sub_100E78C88(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000588C(&qword_1016608F8);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    char v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    BOOL v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      BOOL v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100E790B8(uint64_t a1, char a2)
{
  return sub_100E79718(a1, a2, &qword_1016608E0);
}

uint64_t sub_100E790C4(uint64_t a1, char a2)
{
  return sub_100E79104(a1, a2, &qword_101660738, (void (*)(uint64_t, uint64_t))sub_10033093C);
}

uint64_t sub_100E790E4(uint64_t a1, char a2)
{
  return sub_100E79104(a1, a2, &qword_101660730, (void (*)(uint64_t, uint64_t))sub_100C1E464);
}

uint64_t sub_100E79104(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  sub_10000588C(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_40;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v38 = v7 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & *(void *)(v7 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v13) {
      break;
    }
    uint64_t v25 = (void *)(v7 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v16);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_33:
          swift_release();
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v16 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v16 >= v13) {
              goto LABEL_33;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v16);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v16 = v27;
      }
    }
LABEL_30:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
    char v32 = *(void **)(*(void *)(v7 + 48) + 8 * v23);
    uint64_t v33 = *(void *)(v7 + 56) + 16 * v23;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(unsigned __int8 *)(v33 + 8);
    if ((v40 & 1) == 0)
    {
      id v36 = v32;
      a4(v34, v35);
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
    uint64_t v17 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      unint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(void *)(*(void *)(v9 + 48) + 8 * v20) = v32;
    uint64_t v21 = *(void *)(v9 + 56) + 16 * v20;
    *(void *)uint64_t v21 = v34;
    *(unsigned char *)(v21 + 8) = v35;
    ++*(void *)(v9 + 16);
  }
  swift_release();
  uint64_t v25 = (void *)(v7 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v7 + 32);
  if (v37 >= 64) {
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v37;
  }
  *(void *)(v7 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v5 = v9;
  return result;
}

uint64_t sub_100E79400(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_1016608C0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7970C(uint64_t a1, char a2)
{
  return sub_100E79718(a1, a2, &qword_1016608C8);
}

uint64_t sub_100E79718(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000588C(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    char v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  int64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

unint64_t sub_100E799E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660920);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = (void *)v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v25 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    unint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_23;
        }
        unint64_t v19 = v25[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_23;
          }
          unint64_t v19 = v25[v14];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v11)
            {
LABEL_23:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v25, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v25 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v25[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_30;
                }
                if (v14 >= v11) {
                  goto LABEL_23;
                }
                unint64_t v19 = v25[v14];
                ++v20;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v14 = v20;
          }
        }
LABEL_20:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_100E8B2D0((uint64_t)v26, v22);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v15 = 8 * result;
      *(void *)(v7[6] + v15) = v22;
      *(void *)(v7[7] + v15) = v23;
      ++v7[2];
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E79C50(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660928);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_33;
        }
        unint64_t v22 = v35[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v22 = v35[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v36)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v22 = v35[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      unint64_t v28 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v20);
      Swift::UInt v29 = *v28;
      uint64_t v31 = *((void *)v28 + 1);
      uint64_t v30 = *((void *)v28 + 2);
      char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
      *(unsigned char *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v31;
      *(void *)(v18 + 16) = v30;
      *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E79F7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C((uint64_t *)&unk_1016606E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v37 = a2;
    int64_t v8 = 0;
    int64_t v39 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v38) {
          goto LABEL_31;
        }
        unint64_t v20 = v39[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v20 = v39[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v39 = -1 << v36;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v20 = v39[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 16 * v18;
      uint64_t v23 = *(void *)(v5 + 48) + v22;
      Swift::UInt v24 = *(void *)(v23 + 8);
      Swift::UInt32 v25 = *(_DWORD *)v23;
      BOOL v26 = (uint64_t *)(*(void *)(v5 + 56) + v22);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = 16 * v13;
      uint64_t v15 = *(void *)(v7 + 48) + v14;
      *(_DWORD *)uint64_t v15 = v25;
      *(void *)(v15 + 8) = v24;
      unint64_t v16 = (void *)(*(void *)(v7 + 56) + v14);
      *unint64_t v16 = v28;
      v16[1] = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7A278(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660898);
}

uint64_t sub_100E7A284(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, &qword_101660888, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
}

uint64_t sub_100E7A2CC(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, &qword_101660890, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
}

uint64_t sub_100E7A314(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660868);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = (char *)(*(void *)(v5 + 56) + 2 * v21);
    char v34 = *v33;
    char v35 = v33[1];
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    int64_t v19 = (unsigned char *)(*(void *)(v7 + 56) + 2 * v17);
    *int64_t v19 = v34;
    v19[1] = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7A634(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660860);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 24 * v21;
    uint64_t v34 = *(void *)v33;
    long long v40 = *(_OWORD *)(v33 + 8);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(void *)uint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v40;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7A978(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  int v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (unsigned __int8 *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000588C(&qword_101660858);
  int v51 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v45 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v46 = v5 + 16;
  uint64_t v48 = v5;
  unint64_t v18 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44) {
      break;
    }
    char v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v51 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v44) {
              goto LABEL_34;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    uint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v51)
    {
      sub_100E8E4D4(v30, (uint64_t)v9, type metadata accessor for ShareAttemptTracker.AttemptKey);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      sub_100E8DE8C(v30, (uint64_t)v9, type metadata accessor for ShareAttemptTracker.AttemptKey);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v9);
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_100E8E4D4((uint64_t)v9, *(void *)(v13 + 48) + v29 * v22, type metadata accessor for ShareAttemptTracker.AttemptKey);
    uint64_t result = (*v18)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v43;
  char v26 = v45;
  if ((v51 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100E7AE9C(uint64_t a1, char a2)
{
  return sub_100E7AEA8(a1, a2, &qword_101660790);
}

uint64_t sub_100E7AEA8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000588C(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100E7B1BC(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, &qword_101660850);
}

uint64_t sub_100E7B1C8(uint64_t a1, int a2)
{
  return sub_100E69D64(a1, a2, &qword_101660820);
}

uint64_t sub_100E7B1D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000588C(&qword_101660780);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 24 * v20);
    Swift::UInt v30 = *v29;
    uint64_t v32 = *((void *)v29 + 1);
    uint64_t v31 = *((void *)v29 + 2);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v30);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(unsigned char *)uint64_t v18 = v30;
    *(void *)(v18 + 8) = v32;
    *(void *)(v18 + 16) = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100E7B518(uint64_t a1, int a2)
{
  return sub_100E6AE00(a1, a2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t *)&unk_101660800, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100E7B560(uint64_t a1, int a2)
{
  return sub_100E7B578(a1, a2, (uint64_t *)&unk_1016606B0);
}

uint64_t sub_100E7B56C(uint64_t a1, int a2)
{
  return sub_100E7B578(a1, a2, &qword_101652488);
}

uint64_t sub_100E7B578(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for BeaconKeyManager.FileKey(0);
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  sub_10000588C(a3);
  int v44 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v39 = v3;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v39;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v26;
      }
    }
LABEL_21:
    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v42 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if (v44)
    {
      sub_100E8E4D4(v28, (uint64_t)v9, type metadata accessor for BeaconKeyManager.FileKey);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }
    else
    {
      sub_100E8DE8C(v28, (uint64_t)v9, type metadata accessor for BeaconKeyManager.FileKey);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 48) + v27 * v20, type metadata accessor for BeaconKeyManager.FileKey);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v5 = v39;
  int64_t v24 = v41;
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v37;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v12;
  return result;
}

uint64_t sub_100E7BA28(uint64_t a1, int a2)
{
  return sub_100E72414(a1, a2, (uint64_t *)&unk_1016607A0);
}

uint64_t sub_100E7BA34(uint64_t a1, int a2)
{
  return sub_100E6B758(a1, a2, &qword_101660F18);
}

uint64_t sub_100E7BA40(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000588C(&qword_101660798);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  int v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    int64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = *(void *)(v9 + 56) + 16 * v22;
      char v30 = *(unsigned char *)v29;
      uint64_t v31 = *(void *)(v29 + 8);
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = *(void *)(v9 + 56) + 16 * v22;
      char v30 = *(unsigned char *)v32;
      uint64_t v31 = *(void *)(v32 + 8);
      swift_retain();
    }
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    uint64_t v20 = *(void *)(v11 + 56) + 16 * v19;
    *(unsigned char *)uint64_t v20 = v30;
    *(void *)(v20 + 8) = v31;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  int64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100E7BE90(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7DD2C(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E7BEA8(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  long long v17 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = *((void *)a3 + 3);
  char v9 = *((unsigned char *)a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = a4[7] + 40 * a1;
  *(_OWORD *)uint64_t v13 = v17;
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v8;
  *(unsigned char *)(v13 + 32) = v9;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_100E7BF94(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100E7C164(a1, a2, a3, a4, a5, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_100E7BFC0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t result = sub_10001D608(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_1016477E0);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

_OWORD *sub_100E7C06C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100173E4C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_100E7C0E8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  long long v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_100E7C138(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100E7C164(a1, a2, a3, a4, a5, type metadata accessor for OwnedBeaconGroup.PairingState, type metadata accessor for OwnedBeaconGroup.PairingState);
}

uint64_t sub_100E7C164(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = a5[7];
  uint64_t v13 = a6(0);
  uint64_t result = sub_100E8E4D4(a4, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a7);
  uint64_t v15 = a5[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a5[2] = v17;
  }
  return result;
}

uint64_t sub_100E7C210(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for BookmarkMetaData();
  uint64_t result = sub_100E8E4D4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_100E7C2B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  BOOL v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

_OWORD *sub_100E7C394(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100173E4C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_100E7C400(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_100173E4C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100E7C4C8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
  uint64_t result = sub_100E8E4D4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t sub_100E7C570(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100E7C5B4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100E7C600(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100E7C648(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for BeaconIdentifier();
  sub_100E8E4D4(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t result = sub_100E8E4D4(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for ObservedAdvertisement);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *sub_100E7C734(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100173E4C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_100E7C7A0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 16 * result;
  *(void *)uint64_t v7 = a4;
  *(unsigned char *)(v7 + 8) = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_100E7C7F4(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_100E7C8A0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7DD2C(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E7C8B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_100E7C8E4(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100E7C99C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D5A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10001CEB0);
}

uint64_t sub_100E7C9B4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CB48(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E7C9CC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D0E0(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E7C9E4(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a3;
  char v9 = *((unsigned char *)a3 + 8);
  uint64_t v10 = a3[7];
  uint64_t v25 = a3[6];
  char v11 = *((unsigned char *)a3 + 64);
  char v12 = *((unsigned char *)a3 + 65);
  long long v24 = *(_OWORD *)(a3 + 9);
  uint64_t v23 = a3[11];
  char v22 = *((unsigned char *)a3 + 96);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v13 = a4[6];
  uint64_t v14 = type metadata accessor for UUID();
  long long v20 = *((_OWORD *)a3 + 2);
  long long v21 = *((_OWORD *)a3 + 1);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13 + *(void *)(*(void *)(v14 - 8) + 72) * a1, a2, v14);
  uint64_t v16 = a4[7] + 104 * a1;
  *(void *)uint64_t v16 = v8;
  *(unsigned char *)(v16 + 8) = v9;
  *(_OWORD *)(v16 + 16) = v21;
  *(_OWORD *)(v16 + 32) = v20;
  *(void *)(v16 + 48) = v25;
  *(void *)(v16 + 56) = v10;
  *(unsigned char *)(v16 + 64) = v11;
  *(unsigned char *)(v16 + 65) = v12;
  *(_OWORD *)(v16 + 72) = v24;
  *(void *)(v16 + 88) = v23;
  *(unsigned char *)(v16 + 96) = v22;
  uint64_t v17 = a4[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a4[2] = v19;
  }
  return result;
}

uint64_t sub_100E7CB30(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CB48(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E7CB48(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  uint64_t v11 = a4[7];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a3, v12);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

unint64_t sub_100E7CC40(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_100E7CC88(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100E7CD40(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a7[6] + 24 * result;
  *(unsigned char *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  uint64_t v8 = (void *)(a7[7] + 16 * result);
  *uint64_t v8 = a5;
  v8[1] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_100E7CD94(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t result = sub_100E8E4D4(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100E7CE48(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D3C8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
}

unint64_t sub_100E7CE74(unint64_t result, char a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100E7CEB8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D0E0(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E7CED0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100E7CEFC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a4[6];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  uint64_t v14 = a4[7];
  uint64_t v15 = a5(0);
  uint64_t result = sub_100E8E4D4(a3, v14 + *(void *)(*(void *)(v15 - 8) + 72) * a1, a6);
  uint64_t v17 = a4[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a4[2] = v19;
  }
  return result;
}

uint64_t sub_100E7CFF0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D8BC(a1, a2, a3, a4, &qword_101660F20);
}

uint64_t sub_100E7CFFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1007157C4(a4, a5[7] + 48 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_100E7D06C(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(unsigned char *)(a5[7] + result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100E7D0B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100E7D1C8(a1, a2, a3, a4, a5, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

uint64_t sub_100E7D0E0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_100E7D19C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100E7D1C8(a1, a2, a3, a4, a5, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
}

uint64_t sub_100E7D1C8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = a5[7];
  uint64_t v13 = a6(0);
  uint64_t result = sub_100E8E4D4(a4, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a7);
  uint64_t v15 = a5[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a5[2] = v17;
  }
  return result;
}

uint64_t sub_100E7D274(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D4AC(a1, a2, a3, a4, &qword_101660EA0);
}

uint64_t sub_100E7D280(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, type metadata accessor for BeaconState, type metadata accessor for BeaconState);
}

uint64_t sub_100E7D2AC(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  long long v18 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = *((void *)a3 + 3);
  char v9 = *((unsigned char *)a3 + 32);
  uint64_t v10 = *((void *)a3 + 5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a2, v12);
  uint64_t v14 = a4[7] + 48 * a1;
  *(_OWORD *)uint64_t v14 = v18;
  *(void *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v8;
  *(unsigned char *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v10;
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_100E7D39C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D3C8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

uint64_t sub_100E7D3C8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100E8E4D4(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_100E7D474(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100E7D4A0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D4AC(a1, a2, a3, a4, (uint64_t *)&unk_10164E870);
}

uint64_t sub_100E7D4AC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = sub_10000588C(a5);
  uint64_t result = sub_10001D608(a3, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a5);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_100E7D590(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D4AC(a1, a2, a3, a4, &qword_10163CBB0);
}

uint64_t sub_100E7D59C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D8BC(a1, a2, a3, a4, &qword_1016609B0);
}

uint64_t sub_100E7D5A8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t result = a5(a3, a4[7] + 40 * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100E7D674(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D8BC(a1, a2, a3, a4, &qword_101660720);
}

uint64_t sub_100E7D680(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for MACAddress();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_100E7D740(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

unint64_t sub_100E7D76C(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(unsigned char *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(void *)(v6 + 16) = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t sub_100E7D7BC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for BeaconScanner.AISLookupState(0);
  uint64_t result = sub_100E8E4D4(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for BeaconScanner.AISLookupState);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100E7D8B0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D8BC(a1, a2, a3, a4, &qword_101660970);
}

uint64_t sub_100E7D8BC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = sub_10000588C(a5);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_100E7D9B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

unint64_t sub_100E7DA78(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(unsigned char *)(v5 + 8) = a4 & 1;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100E7DAC8(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 16 * result;
  *(_DWORD *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_100E7DB1C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
}

uint64_t sub_100E7DB48(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7CEFC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
}

unint64_t sub_100E7DB74(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_WORD *)(a5[7] + 2 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100E7DBBC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_100E7DC10(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  sub_100E8E4D4(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for ShareAttemptTracker.AttemptKey);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100E7DD00(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100E7D3C8(a1, a2, a3, a4, type metadata accessor for BeaconKeyManager.FileKey, type metadata accessor for BeaconKeyManager.FileKey);
}

uint64_t sub_100E7DD2C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_100E7DDE8(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = a5[7] + 16 * a1;
  *(unsigned char *)uint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

id sub_100E7DEAC()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165B288);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7E050()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t *)&unk_101660FA0, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

id sub_100E7E098()
{
  return sub_100E89DE0((uint64_t *)&unk_10164E810);
}

char *sub_100E7E0A4()
{
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660F00);
  unint64_t v35 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v44 = v3;
  if (!v4)
  {
    id result = (char *)swift_release();
    uint64_t v33 = v44;
    uint64_t v32 = v35;
LABEL_25:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v5 = v3;
  id result = (char *)(v3 + 64);
  unint64_t v7 = (char *)(v2 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v36 = v2 + 64;
  if (v5 != v2 || result >= &v7[8 * v8])
  {
    id result = (char *)memmove(result, v7, 8 * v8);
    uint64_t v5 = v44;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v42 = v2;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = v44;
  uint64_t v39 = v43 + 16;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v43 + 32;
  uint64_t v14 = v43;
  unint64_t v15 = v40;
  uint64_t v16 = v41;
  while (1)
  {
    if (v12)
    {
      uint64_t v45 = (v12 - 1) & v12;
      int64_t v46 = v9;
      unint64_t v17 = __clz(__rbit64(v12)) | (v9 << 6);
      uint64_t v18 = v42;
      goto LABEL_9;
    }
    int64_t v28 = v9 + 1;
    uint64_t v18 = v42;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v28);
    int64_t v30 = v9 + 1;
    if (!v29)
    {
      int64_t v30 = v9 + 2;
      if (v9 + 2 >= v37) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v36 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    uint64_t v45 = (v29 - 1) & v29;
    int64_t v46 = v30;
    unint64_t v17 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v14 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v18 + 48) + v19, v16);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 40 * v17;
    char v22 = (uint64_t *)(v20 + 40 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    int v47 = *((unsigned __int8 *)v22 + 32);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v13 + 48) + v19, v15, v16);
    uint64_t v27 = *(void *)(v13 + 56) + v21;
    *(void *)uint64_t v27 = v24;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = v26;
    *(unsigned char *)(v27 + 32) = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (char *)swift_retain();
    unint64_t v12 = v45;
    int64_t v9 = v46;
  }
  uint64_t v31 = v9 + 3;
  if (v9 + 3 >= v37)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v32 = v35;
    uint64_t v33 = v44;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v36 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v9 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E7E3C4()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101661008);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7E568()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_101660600);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_100E8A6B4(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100940378((uint64_t)v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100E7E754()
{
  return sub_100E82BF4(&qword_10164B240);
}

void *sub_100E7E760()
{
  return sub_100E7EE20(type metadata accessor for MultipartAccessoryPairingInfo, &qword_101660B28, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo);
}

void *sub_100E7E7A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660B40);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v26 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    unint64_t v20 = *(void *)(v28 + 72) * v15;
    sub_10001D074(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&unk_1016477E0);
    uint64_t v21 = (uint64_t *)(*(void *)(v7 + 48) + v16);
    *uint64_t v21 = v18;
    v21[1] = v19;
    sub_10001D608((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t *)&unk_1016477E0);
    id result = (void *)sub_1000361E0(v18, v19);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E7EA34()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10164B230);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100173F4C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10012F428(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100173E4C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7EC1C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660620);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7EDD8()
{
  return sub_100E7EE20(type metadata accessor for OwnedBeaconGroup.PairingState, &qword_101640980, type metadata accessor for OwnedBeaconGroup.PairingState, type metadata accessor for OwnedBeaconGroup.PairingState);
}

void *sub_100E7EE20(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v36 = a3;
  int64_t v37 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v32 - v8;
  sub_10000588C(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v6 = v12;
    return result;
  }
  uint64_t v33 = v6;
  id result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  uint64_t v34 = v10 + 64;
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v29);
    ++v16;
    if (!v30)
    {
      int64_t v16 = v29 + 1;
      if (v29 + 1 >= v20) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v34 + 8 * v16);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    uint64_t v23 = 16 * v22;
    int64_t v24 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v22);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    unint64_t v27 = *(void *)(v35 + 72) * v22;
    sub_100E8DE8C(*(void *)(v10 + 56) + v27, (uint64_t)v9, v36);
    uint64_t v28 = (uint64_t *)(*(void *)(v12 + 48) + v23);
    *uint64_t v28 = v25;
    v28[1] = v26;
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 56) + v27, v37);
    id result = (void *)sub_1000361E0(v25, v26);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v20)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v33;
    goto LABEL_28;
  }
  unint64_t v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    int64_t v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v16);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E7F098()
{
  return sub_100E7FF14(&qword_101660B70);
}

void *sub_100E7F0A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BookmarkMetaData();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101652470);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v23 = v1;
  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v15) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v9 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    char v18 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
    unint64_t v19 = *(void *)(v24 + 72) * v17;
    sub_100E8DE8C(*(void *)(v5 + 56) + v19, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v18;
    id result = (void *)sub_100E8E4D4((uint64_t)v4, *(void *)(v7 + 56) + v19, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v9 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E7F31C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v30 - v6;
  sub_10000588C(&qword_101660658);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  unint64_t v30 = v1;
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v36 = v7;
  uint64_t v37 = v9;
  *(void *)(v9 + 16) = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v31 = v7 + 64;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v33 = v3 + 2;
  unint64_t v17 = v34;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      int64_t v12 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v12);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v28 - 1) & v28;
    unint64_t v19 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_9:
    uint64_t v20 = v36;
    unint64_t v21 = v3[9] * v19;
    int64_t v22 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v22(v17, *(void *)(v36 + 48) + v21, v2);
    unint64_t v23 = *(void *)(v20 + 56) + v21;
    uint64_t v24 = v35;
    v22(v35, v23, v2);
    uint64_t v25 = v37;
    unint64_t v26 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v26(*(void *)(v37 + 48) + v21, v17, v2);
    id result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v25 + 56) + v21, v24, v2);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v30;
    uint64_t v9 = v37;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E7F618()
{
  return sub_100E8149C(&qword_1016460A0, (void (*)(unsigned char *, uint64_t))sub_100173E4C);
}

void *sub_100E7F638()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660EF8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_10012F428(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_100173E4C(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E7F8E0()
{
  return sub_100E80F68((uint64_t *)&unk_101660750);
}

void *sub_100E7F8EC()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_101660990);
}

id sub_100E7F90C()
{
  return sub_100E888AC(&qword_101660748);
}

id sub_100E7F918()
{
  return sub_100E86DC0(type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_101660788, type metadata accessor for CloudKitChangeSet.TombstoneInfo, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
}

void *sub_100E7F960()
{
  return sub_100E867A8(&qword_1016523E0);
}

void *sub_100E7F96C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101652390);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100E7FB1C()
{
  sub_1010EA55C(v0);
}

uint64_t sub_100E7FB24()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E7FB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100E7FB44()
{
  return swift_release();
}

void sub_100E7FB4C(uint64_t *a1@<X8>)
{
}

void *sub_100E7FB6C()
{
  return sub_100E83618((uint64_t *)&unk_101660E70);
}

void *sub_100E7FB78()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660FD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_errorRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7FD24()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101652400);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E7FED0()
{
  return sub_100E896DC(&qword_101660FC8);
}

void *sub_100E7FEDC()
{
  return sub_100E896DC(&qword_1016523A0);
}

void *sub_100E7FEE8()
{
  return sub_100E87248((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016607B0);
}

void *sub_100E7FF08()
{
  return sub_100E7FF14(&qword_10163F8E0);
}

void *sub_100E7FF14(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    long long v17 = *(_OWORD *)(*(void *)(v3 + 56) + 16 * v16);
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    *(_OWORD *)(*(void *)(v5 + 56) + 16 * v16) = v17;
    id result = (void *)sub_1000361E0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E800B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconIdentifier();
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660FC0);
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v10;
    return result;
  }
  int64_t v27 = v1;
  id result = (void *)(v9 + 64);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v12 + 8 * v13) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v18) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v12 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v28 + 72) * v20;
    sub_100E8DE8C(*(void *)(v8 + 48) + v21, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    unint64_t v22 = *(void *)(v29 + 72) * v20;
    sub_100E8DE8C(*(void *)(v8 + 56) + v22, (uint64_t)v4, type metadata accessor for ObservedAdvertisement);
    sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v21, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    id result = (void *)sub_100E8E4D4((uint64_t)v4, *(void *)(v10 + 56) + v22, type metadata accessor for ObservedAdvertisement);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v18)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v12 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100E803E8()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_101660E10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10012F428(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100173E4C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E805B0()
{
  return sub_100E898A4(&qword_101640988);
}

void *sub_100E805BC()
{
  return sub_100E867A8(&qword_1016605F8);
}

void *sub_100E805C8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660DE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E80758()
{
  return sub_100E898A4(&qword_101652558);
}

void *sub_100E80764()
{
  return sub_100E896DC(&qword_101660DF0);
}

void *sub_100E80770()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016523C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(v2 + 56) + v16;
    unint64_t v21 = *(void **)v20;
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    char v23 = *(unsigned char *)(v20 + 8);
    *unint64_t v22 = v19;
    v22[1] = v18;
    uint64_t v24 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v24 = v21;
    *(unsigned char *)(v24 + 8) = v23;
    swift_bridgeObjectRetain();
    id result = sub_100940368(v21, v23);
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E80940()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_1016523B0);
  unint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    char v16 = *(unsigned char *)(*(void *)(v5 + 48) + v15);
    unint64_t v17 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v17, v1);
    *(unsigned char *)(*(void *)(v7 + 48) + v15) = v16;
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v17, v4, v1);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E80BCC()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for MACAddress, (uint64_t *)&unk_101660FB0);
}

void *sub_100E80BEC()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, &qword_101660EC8, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

void *sub_100E80C34(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v6 = a1(0);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a2);
  uint64_t v29 = v4;
  uint64_t v13 = *v4;
  uint64_t v14 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v29 = v15;
    return result;
  }
  id result = (void *)(v14 + 64);
  unint64_t v17 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  if (v15 != v13 || (unint64_t)result >= v13 + 64 + 8 * v17) {
    id result = memmove(result, (const void *)(v13 + 64), 8 * v17);
  }
  uint64_t v30 = v13 + 64;
  int64_t v18 = 0;
  *(void *)(v15 + 16) = *(void *)(v13 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v13 + 64);
  uint64_t v33 = v10 + 16;
  int64_t v31 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v32 = v10 + 32;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_9;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v18);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_9:
    unint64_t v24 = *(void *)(v10 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(void *)(v13 + 48) + v24, v9);
    unint64_t v25 = *(void *)(v34 + 72) * v23;
    sub_100E8DE8C(*(void *)(v13 + 56) + v25, (uint64_t)v8, v35);
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(void *)(v15 + 48) + v24, v12, v9);
    id result = (void *)sub_100E8E4D4((uint64_t)v8, *(void *)(v15 + 56) + v25, v36);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v31) {
    goto LABEL_23;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    int64_t v18 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E80F5C()
{
  return sub_100E80F68(&qword_101640990);
}

void *sub_100E80F68(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a1);
  unint64_t v25 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v25 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v26 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v29 = v4 + 16;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v28 = v4 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    char v20 = *(unsigned char *)(*(void *)(v7 + 56) + v18);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(unsigned char *)(*(void *)(v9 + 56) + v18) = v20;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E811F4()
{
  return sub_100E81A80(&qword_1016523B8, (uint64_t (*)(unsigned char *, uint64_t))sub_10001CEB0);
}

void *sub_100E81214()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_101660930);
}

void *sub_100E81234()
{
  return sub_100E896DC(&qword_10165B298);
}

void *sub_100E81240()
{
  return sub_100E87CA0(&qword_101660720, &qword_101660728);
}

id sub_100E81254()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016607B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10012F428(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100173E4C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E8141C()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660F88);
}

void *sub_100E8143C()
{
  return sub_100E81D54((uint64_t (*)(void))&type metadata accessor for MACAddress, (uint64_t *)&unk_101660F90);
}

void *sub_100E8145C()
{
  return sub_100E83C3C((uint64_t (*)(void))&type metadata accessor for MACAddress, &qword_101652540);
}

void *sub_100E8147C()
{
  return sub_100E8149C((uint64_t *)&unk_101644340, (void (*)(unsigned char *, uint64_t))sub_100173E4C);
}

void *sub_100E8149C(uint64_t *a1, void (*a2)(unsigned char *, uint64_t))
{
  uint64_t v4 = v2;
  sub_10000588C(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v7;
    return result;
  }
  int64_t v27 = v4;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    int64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = 32 * v17;
    sub_10012F428(*(void *)(v5 + 56) + 32 * v17, (uint64_t)v29);
    int64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *int64_t v23 = v20;
    v23[1] = v21;
    a2(v29, *(void *)(v7 + 56) + v22);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E8168C()
{
  return sub_100E898A4(&qword_101660828);
}

char *sub_100E81698()
{
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101660E58);
  uint64_t v39 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v48 = v3;
  if (!v4)
  {
    id result = (char *)swift_release();
    uint64_t v38 = v48;
    uint64_t v37 = v39;
LABEL_25:
    *uint64_t v37 = v38;
    return result;
  }
  uint64_t v5 = v3;
  id result = (char *)(v3 + 64);
  uint64_t v7 = (char *)(v2 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v40 = v2 + 64;
  if (v5 != v2 || result >= &v7[8 * v8])
  {
    id result = (char *)memmove(result, v7, 8 * v8);
    uint64_t v5 = v48;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v46 = v2;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v43 = v47 + 16;
  int64_t v41 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v42 = v47 + 32;
  uint64_t v13 = v47;
  unint64_t v14 = v44;
  while (1)
  {
    if (v12)
    {
      uint64_t v49 = (v12 - 1) & v12;
      int64_t v50 = v9;
      unint64_t v15 = __clz(__rbit64(v12)) | (v9 << 6);
      uint64_t v16 = v46;
      goto LABEL_9;
    }
    int64_t v33 = v9 + 1;
    uint64_t v16 = v46;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v33 >= v41) {
      goto LABEL_23;
    }
    unint64_t v34 = *(void *)(v40 + 8 * v33);
    int64_t v35 = v9 + 1;
    if (!v34)
    {
      int64_t v35 = v9 + 2;
      if (v9 + 2 >= v41) {
        goto LABEL_23;
      }
      unint64_t v34 = *(void *)(v40 + 8 * v35);
      if (!v34) {
        break;
      }
    }
LABEL_22:
    uint64_t v49 = (v34 - 1) & v34;
    int64_t v50 = v35;
    unint64_t v15 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v13 + 72) * v15;
    uint64_t v18 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v14, *(void *)(v16 + 48) + v17, v45);
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v20 = 104 * v15;
    uint64_t v21 = (uint64_t *)(v19 + 104 * v15);
    uint64_t v22 = *v21;
    int v60 = *((unsigned __int8 *)v21 + 8);
    uint64_t v23 = v21[3];
    uint64_t v51 = v21[2];
    uint64_t v52 = v23;
    uint64_t v24 = v21[5];
    uint64_t v53 = v21[4];
    uint64_t v25 = v21[7];
    uint64_t v59 = v21[6];
    int v26 = *((unsigned __int8 *)v21 + 64);
    int v57 = *((unsigned __int8 *)v21 + 65);
    int v58 = v26;
    uint64_t v28 = v21[9];
    uint64_t v27 = v21[10];
    uint64_t v55 = v21[11];
    uint64_t v56 = v27;
    int v54 = *((unsigned __int8 *)v21 + 96);
    uint64_t v29 = v48;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v48 + 48) + v17, v14, v18);
    uint64_t v30 = *(void *)(v29 + 56) + v20;
    *(void *)uint64_t v30 = v22;
    *(unsigned char *)(v30 + 8) = v60;
    uint64_t v31 = v52;
    *(void *)(v30 + 16) = v51;
    *(void *)(v30 + 24) = v31;
    *(void *)(v30 + 32) = v53;
    *(void *)(v30 + 40) = v24;
    *(void *)(v30 + 48) = v59;
    *(void *)(v30 + 56) = v25;
    *(unsigned char *)(v30 + 64) = v58;
    *(unsigned char *)(v30 + 65) = v57;
    uint64_t v32 = v56;
    *(void *)(v30 + 72) = v28;
    *(void *)(v30 + 80) = v32;
    *(void *)(v30 + 88) = v55;
    *(unsigned char *)(v30 + 96) = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (char *)swift_bridgeObjectRetain();
    unint64_t v12 = v49;
    int64_t v9 = v50;
  }
  uint64_t v36 = v9 + 3;
  if (v9 + 3 >= v41)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v37 = v39;
    uint64_t v38 = v48;
    goto LABEL_25;
  }
  unint64_t v34 = *(void *)(v40 + 8 * v36);
  if (v34)
  {
    int64_t v35 = v9 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v35 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v35 >= v41) {
      goto LABEL_23;
    }
    unint64_t v34 = *(void *)(v40 + 8 * v35);
    ++v36;
    if (v34) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E81A54()
{
  return sub_100E898A4(&qword_1016524B0);
}

void *sub_100E81A60()
{
  return sub_100E81A80(&qword_101660E68, (uint64_t (*)(unsigned char *, uint64_t))sub_10001CEB0);
}

void *sub_100E81A80(uint64_t *a1, uint64_t (*a2)(unsigned char *, uint64_t))
{
  uint64_t v30 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a1);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v11;
    return result;
  }
  int v26 = v4;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v27 = v9 + 64;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v29 = v6 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v15);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t v22 = 40 * v20;
    sub_10001D010(*(void *)(v9 + 56) + v22, (uint64_t)v31);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
    id result = (void *)v30(v31, *(void *)(v11 + 56) + v22);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v15 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E81D34()
{
  return sub_100E81D54((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101652460);
}

void *sub_100E81D54(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a1(0);
  uint64_t v48 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v36 - v6;
  sub_10000588C(a2);
  uint64_t v36 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v50 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v35 = v50;
    unint64_t v34 = v36;
LABEL_25:
    *unint64_t v34 = v35;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v50;
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  uint64_t v47 = v7;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v37 = v7 + 64;
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = v49;
  uint64_t v18 = v48;
  uint64_t v41 = v49 + 16;
  uint64_t v42 = v48 + 16;
  uint64_t v39 = v49 + 32;
  uint64_t v40 = v48 + 32;
  unint64_t v19 = v43;
  uint64_t v20 = v44;
  uint64_t v21 = v46;
  uint64_t v22 = v50;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v51 = v13;
      unint64_t v24 = v23 | (v13 << 6);
      uint64_t v25 = v47;
      goto LABEL_9;
    }
    int64_t v30 = v13 + 1;
    uint64_t v25 = v47;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v30);
    int64_t v32 = v13 + 1;
    if (!v31)
    {
      int64_t v32 = v30 + 1;
      if (v30 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v37 + 8 * v32);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v31 - 1) & v31;
    int64_t v51 = v32;
    unint64_t v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    unint64_t v26 = *(void *)(v18 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v19, *(void *)(v25 + 48) + v26, v20);
    unint64_t v27 = *(void *)(v17 + 72) * v24;
    unint64_t v28 = *(void *)(v25 + 56) + v27;
    uint64_t v29 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v45, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v22 + 48) + v26, v19, v20);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v22 + 56) + v27, v29, v21);
    int64_t v13 = v51;
  }
  int64_t v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    id result = (void *)swift_release();
    unint64_t v34 = v36;
    uint64_t v35 = v50;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v37 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100E82100()
{
  return sub_100E82BF4((uint64_t *)&unk_101660DA0);
}

id sub_100E8210C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016524C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E822B4()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016608A8);
}

void *sub_100E822D4()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660B78);
}

void *sub_100E822F4()
{
  uint64_t v35 = type metadata accessor for MACAddress();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660B20);
  int64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    unint64_t v27 = v30;
LABEL_25:
    *unint64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  uint64_t v31 = v4 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v34 = v1 + 16;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    unint64_t v23 = (uint64_t *)(*(void *)(v36 + 48) + v17);
    *unint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)sub_1000361E0(v19, v20);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    unint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E825C0()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016608A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    id v23 = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E82778()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_1016606F0);
  id v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *id v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    unint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)sub_100510360(v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E82A10()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_101660910);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = 16 * v15;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    long long v25 = *(_OWORD *)(*(void *)(v2 + 56) + v20);
    *(unsigned char *)uint64_t v21 = *(unsigned char *)v17;
    *(void *)(v21 + 8) = v19;
    *(void *)(v21 + 16) = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v20) = v25;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000361E0(v25, *((unint64_t *)&v25 + 1));
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100E82BE8()
{
  return sub_100E82BF4((uint64_t *)&unk_101660870);
}

id sub_100E82BF4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E82DA0()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_101660E00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E82F58()
{
  return sub_100E86380((uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, &qword_1016524D8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

void *sub_100E82FA0()
{
  return sub_100E8381C((uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext, (uint64_t *)&unk_101660F60, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
}

uint64_t sub_100E82FE8()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660908);
  int64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    uint64_t result = swift_release();
    uint64_t v30 = v40;
    uint64_t v29 = v32;
LABEL_25:
    *uint64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  unint64_t v7 = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  int64_t v13 = v37;
  uint64_t v14 = v38;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      uint64_t result = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t result = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v16 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    uint64_t v18 = 24 * v16;
    uint64_t v19 = *(void *)(result + 48) + 24 * v16;
    char v20 = *(unsigned char *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    unint64_t v23 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v13, *(void *)(result + 56) + v23, v14);
    uint64_t v24 = v40;
    uint64_t v25 = *(void *)(v40 + 48) + v18;
    *(unsigned char *)uint64_t v25 = v20;
    *(void *)(v25 + 8) = v21;
    *(void *)(v25 + 16) = v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v24 + 56) + v23, v13, v14);
    swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = swift_release();
    uint64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E832C4()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660F80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100E83468()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_1016609C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E8360C()
{
  return sub_100E83618(&qword_101660880);
}

void *sub_100E83618(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + v17);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    long long v21 = *(_OWORD *)(*(void *)(v3 + 56) + v17);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(void *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E837D4()
{
  return sub_100E8381C(type metadata accessor for BeaconKeyServiceBuilder.FileKey, &qword_101660610, type metadata accessor for BeaconKeyServiceBuilder.FileKey, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
}

void *sub_100E8381C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  int64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v30 - v8;
  sub_10000588C(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v6 = v12;
    return result;
  }
  uint64_t v30 = v6;
  id result = (void *)(v11 + 64);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v27);
    ++v17;
    if (!v28)
    {
      int64_t v17 = v27 + 1;
      if (v27 + 1 >= v21) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v14 + 8 * v17);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v17 << 6);
LABEL_12:
    unint64_t v24 = *(void *)(v31 + 72) * v23;
    sub_100E8DE8C(*(void *)(v10 + 48) + v24, (uint64_t)v9, v32);
    uint64_t v25 = 8 * v23;
    uint64_t v26 = *(void *)(*(void *)(v10 + 56) + 8 * v23);
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 48) + v24, v33);
    *(void *)(*(void *)(v12 + 56) + v25) = v26;
    id result = (void *)swift_retain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v21)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v14 + 8 * v29);
  if (v28)
  {
    int64_t v17 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v17);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E83A84()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660E48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E83C10()
{
  return sub_100E898A4(&qword_101660E40);
}

void *sub_100E83C1C()
{
  return sub_100E83C3C((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_101660B50);
}

void *sub_100E83C3C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v26 - v6;
  sub_10000588C(a2);
  int64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E83ED0()
{
  return sub_100E80C34(type metadata accessor for DeviceEvent, &qword_101660B88, type metadata accessor for DeviceEvent, type metadata accessor for DeviceEvent);
}

void *sub_100E83F18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660B80);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_100E8DE8C(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_100E8E4D4((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    id result = (void *)sub_1000361E0(v19, v20);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E841B0()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, &qword_1016524C0, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

void *sub_100E841F8()
{
  sub_10000588C(&qword_101660E20);
  int64_t v27 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v27 = v3;
    return result;
  }
  id result = (void *)(v2 + 64);
  uint64_t v5 = v1 + 64;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    id result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v12) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v5 + 8 * v24);
    ++v8;
    if (!v25)
    {
      int64_t v8 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v5 + 8 * v8);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = 32 * v14;
    uint64_t v17 = (uint64_t *)(*(void *)(v1 + 56) + v16);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    unint64_t v21 = v17[3];
    long long v22 = *(_OWORD *)(*(void *)(v1 + 48) + v15);
    *(_OWORD *)(*(void *)(v3 + 48) + v15) = v22;
    int64_t v23 = (uint64_t *)(*(void *)(v3 + 56) + v16);
    *int64_t v23 = v18;
    v23[1] = v19;
    _OWORD v23[2] = v20;
    v23[3] = v21;
    sub_1000361E0(v22, *((unint64_t *)&v22 + 1));
    sub_1000361E0(v18, v19);
    id result = (void *)sub_1000361E0(v20, v21);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v12) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v5 + 8 * v26);
  if (v25)
  {
    int64_t v8 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v5 + 8 * v8);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E843E8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660E28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 56) + v16;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v19;
    uint64_t v20 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v20 = v18;
    *(unsigned char *)(v20 + 8) = v17;
    id result = (void *)sub_1000361E0(v19, *((unint64_t *)&v19 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E845A4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660E30);
  unint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E84834()
{
  return sub_100E898A4(&qword_101660E38);
}

id sub_100E84840()
{
  return sub_100E89DE0(&qword_101660F58);
}

void *sub_100E8484C()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660ED8);
}

void *sub_100E8486C()
{
  return sub_100E898A4(&qword_101660F10);
}

void *sub_100E84878()
{
  return sub_100E87CA0(&qword_101660F20, &qword_101660F28);
}

void *sub_100E8488C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660F08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)sub_1000361E0(v19, *((unint64_t *)&v19 + 1));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E84A3C()
{
  return sub_100E898A4(&qword_101660BD0);
}

void *sub_100E84A48()
{
  return sub_100E898A4((uint64_t *)&unk_101660940);
}

void *sub_100E84A54()
{
  return sub_100E898A4(&qword_101660960);
}

void *sub_100E84A60()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660840);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_100E8AC88(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_1007157C4((uint64_t)v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E84C4C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101652398);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E84DF8()
{
  return sub_100E85138((uint64_t (*)(void))type metadata accessor for SecureLocation, &qword_101660E88, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

void *sub_100E84E40()
{
  return sub_100E898A4((uint64_t *)&unk_101660660);
}

id sub_100E84E4C()
{
  return sub_100E89DE0(&qword_10165B210);
}

void *sub_100E84E58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101660E90);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E850F0()
{
  return sub_100E85138((uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, &qword_101660E80, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
}

void *sub_100E85138(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v32 - v8;
  sub_10000588C(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v6 = v12;
    return result;
  }
  uint64_t v33 = v6;
  id result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  uint64_t v34 = v10 + 64;
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v29);
    ++v16;
    if (!v30)
    {
      int64_t v16 = v29 + 1;
      if (v29 + 1 >= v20) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v34 + 8 * v16);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    uint64_t v23 = 16 * v22;
    uint64_t v24 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v22);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    unint64_t v27 = *(void *)(v35 + 72) * v22;
    sub_100E8DE8C(*(void *)(v10 + 56) + v27, (uint64_t)v9, v36);
    uint64_t v28 = (void *)(*(void *)(v12 + 48) + v23);
    *uint64_t v28 = v25;
    v28[1] = v26;
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 56) + v27, v37);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v20)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v33;
    goto LABEL_28;
  }
  unint64_t v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    int64_t v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v16);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E853AC()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660EE0);
}

void *sub_100E853CC()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_101660EE8);
}

void *sub_100E853EC()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660ED0);
}

void *sub_100E8540C()
{
  return sub_100E85138(type metadata accessor for MultipartAccessoryPairingInfo, (uint64_t *)&unk_101660B30, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo);
}

void *sub_100E85454()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconIdentifier();
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660618);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v24 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v29 + 72) * v18;
    sub_100E8DE8C(*(void *)(v8 + 48) + v19, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    unint64_t v20 = *(void *)(v2 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v8 + 56) + v20, v1);
    sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v19, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v10 + 56) + v20, v4, v1);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E85794()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660650);
}

void *sub_100E857B4()
{
  return sub_100E869B8(&qword_101660EA0, (uint64_t *)&unk_101660EA8);
}

void *sub_100E857C8()
{
  return sub_100E867A8(&qword_101660F78);
}

void *sub_100E857D4()
{
  return sub_100E80C34(type metadata accessor for BeaconState, &qword_101660F70, type metadata accessor for BeaconState, type metadata accessor for BeaconState);
}

void *sub_100E8581C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101652528);
  uint64_t v29 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v29 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v30 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v33 = v2 + 16;
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v32 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v25 >= v31) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v10;
    if (!v26)
    {
      int64_t v10 = v25 + 1;
      if (v25 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v10);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 40 * v15;
    uint64_t v18 = *(void *)(v5 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v7 + 48) + v16;
    int64_t v21 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    long long v22 = *(_OWORD *)(v18 + 8);
    long long v34 = *(_OWORD *)(v18 + 24);
    long long v35 = v22;
    v21(v20, v4, v1);
    uint64_t v23 = *(void *)(v7 + 56) + v17;
    *(void *)uint64_t v23 = v19;
    long long v24 = v34;
    *(_OWORD *)(v23 + 8) = v35;
    *(_OWORD *)(v23 + 24) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v31) {
    goto LABEL_23;
  }
  unint64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    int64_t v10 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v10);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

char *sub_100E85AE8()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660968);
  long long v34 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v43 = v3;
  if (!v4)
  {
    id result = (char *)swift_release();
    uint64_t v33 = v43;
    uint64_t v32 = v34;
LABEL_25:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v5 = v3;
  id result = (char *)(v3 + 64);
  uint64_t v7 = (char *)(v2 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v35 = v2 + 64;
  if (v5 != v2 || result >= &v7[8 * v8])
  {
    id result = (char *)memmove(result, v7, 8 * v8);
    uint64_t v5 = v43;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v41 = v2;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = v43;
  uint64_t v38 = v42 + 16;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v37 = v42 + 32;
  uint64_t v14 = v42;
  unint64_t v16 = v39;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      uint64_t v44 = (v12 - 1) & v12;
      int64_t v45 = v9;
      unint64_t v17 = __clz(__rbit64(v12)) | (v9 << 6);
      uint64_t v18 = v41;
      goto LABEL_9;
    }
    int64_t v28 = v9 + 1;
    uint64_t v18 = v41;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    int64_t v30 = v9 + 1;
    if (!v29)
    {
      int64_t v30 = v9 + 2;
      if (v9 + 2 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    uint64_t v44 = (v29 - 1) & v29;
    int64_t v45 = v30;
    unint64_t v17 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v14 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v16, *(void *)(v18 + 48) + v19, v15);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 48 * v17;
    long long v22 = (uint64_t *)(v20 + 48 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = v22[3];
    uint64_t v47 = v22[2];
    int v46 = *((unsigned __int8 *)v22 + 32);
    uint64_t v26 = v22[5];
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v13 + 48) + v19, v16, v15);
    uint64_t v27 = *(void *)(v13 + 56) + v21;
    *(void *)uint64_t v27 = v24;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v47;
    *(void *)(v27 + 24) = v25;
    *(unsigned char *)(v27 + 32) = v46;
    *(void *)(v27 + 40) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (char *)swift_retain();
    unint64_t v12 = v44;
    int64_t v9 = v45;
  }
  uint64_t v31 = v9 + 3;
  if (v9 + 3 >= v36)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v32 = v34;
    uint64_t v33 = v43;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v9 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100E85E18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ManagedCBPeripheralManager.KeyType();
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660628);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  id result = (id)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_100E8DE8C(*(void *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void **)(*(void *)(v5 + 56) + v19);
    sub_100E8E4D4((uint64_t)v4, *(void *)(v7 + 48) + v18, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    id result = v20;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E8609C()
{
  uint64_t v1 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  uint64_t v28 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660648);
  uint64_t v25 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v25 = v6;
    return result;
  }
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  uint64_t v26 = v4 + 64;
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_9:
    unint64_t v15 = *(void *)(v28 + 72) * v14;
    sub_100E8DE8C(*(void *)(v4 + 48) + v15, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v16 = 24 * v14;
    uint64_t v17 = *(void *)(v4 + 56) + 24 * v14;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    sub_100E8E4D4((uint64_t)v3, *(void *)(v6 + 48) + v15, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v21 = *(void *)(v6 + 56) + v16;
    *(void *)uint64_t v21 = v18;
    *(void *)(v21 + 8) = v19;
    *(unsigned char *)(v21 + 16) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E86338()
{
  return sub_100E86380((uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo, (uint64_t *)&unk_101660638, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

void *sub_100E86380(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v30 - v8;
  sub_10000588C(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v6 = v12;
    return result;
  }
  int64_t v30 = v6;
  id result = (void *)(v11 + 64);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v27);
    ++v17;
    if (!v28)
    {
      int64_t v17 = v27 + 1;
      if (v27 + 1 >= v21) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v14 + 8 * v17);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v17 << 6);
LABEL_12:
    unint64_t v24 = *(void *)(v31 + 72) * v23;
    sub_100E8DE8C(*(void *)(v10 + 48) + v24, (uint64_t)v9, v32);
    uint64_t v25 = 8 * v23;
    uint64_t v26 = *(void *)(*(void *)(v10 + 56) + 8 * v23);
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 48) + v24, v33);
    *(void *)(*(void *)(v12 + 56) + v25) = v26;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v21)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v14 + 8 * v29);
  if (v28)
  {
    int64_t v17 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v17);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100E865E8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660630);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_1000361E0(v19, *((unint64_t *)&v19 + 1));
    id result = v17;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E8679C()
{
  return sub_100E867A8((uint64_t *)&unk_101660830);
}

void *sub_100E867A8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E86944()
{
  return sub_100E898A4(&qword_101660DF8);
}

void *sub_100E86950()
{
  return sub_100E898A4(&qword_1016609F8);
}

void *sub_100E8695C()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t *)&unk_1016605E8, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

void *sub_100E869A4()
{
  return sub_100E869B8((uint64_t *)&unk_10164E870, &qword_101660D98);
}

void *sub_100E869B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v43 = a1;
  uint64_t v4 = sub_10000588C(a1);
  uint64_t v42 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a2);
  long long v34 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v45 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v33 = v45;
    uint64_t v32 = v34;
LABEL_25:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v45;
  }
  uint64_t v35 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v44 = v8;
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v6 + 16;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v6 + 32;
  unint64_t v19 = v39;
  uint64_t v18 = v40;
  uint64_t v20 = (uint64_t)v41;
  for (i = v45; ; id result = (void *)sub_10001D608(v20, *(void *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      uint64_t v24 = v44;
      goto LABEL_9;
    }
    int64_t v29 = v14 + 1;
    uint64_t v24 = v44;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      int64_t v14 = v29 + 1;
      if (v29 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v35 + 8 * v14);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v30 - 1) & v30;
    unint64_t v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(void *)(v24 + 48) + v25, v18);
    uint64_t v26 = *(void *)(v24 + 56);
    int64_t v27 = v43;
    unint64_t v28 = *(void *)(v42 + 72) * v23;
    sub_10001D074(v26 + v28, v20, v43);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(i + 48) + v25, v19, v18);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v32 = v34;
    uint64_t v33 = v45;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v35 + 8 * v31);
  if (v30)
  {
    int64_t v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v35 + 8 * v14);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E86D1C()
{
  return sub_100E869B8(&qword_10163CBB0, &qword_101660DE0);
}

void *sub_100E86D30()
{
  return sub_100E86380((uint64_t (*)(void))type metadata accessor for StableIdentifier, (uint64_t *)&unk_101660950, (uint64_t (*)(void))type metadata accessor for StableIdentifier, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
}

id sub_100E86D78()
{
  return sub_100E86DC0((uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord, &qword_101660740, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
}

id sub_100E86DC0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v30 - v8;
  sub_10000588C(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (id)swift_release();
LABEL_28:
    uint64_t *v6 = v12;
    return result;
  }
  unint64_t v30 = v6;
  id result = (id)(v11 + 64);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v27);
    ++v17;
    if (!v28)
    {
      int64_t v17 = v27 + 1;
      if (v27 + 1 >= v21) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v14 + 8 * v17);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v17 << 6);
LABEL_12:
    uint64_t v24 = 8 * v23;
    unint64_t v25 = *(void **)(*(void *)(v10 + 48) + 8 * v23);
    unint64_t v26 = *(void *)(v31 + 72) * v23;
    sub_100E8DE8C(*(void *)(v10 + 56) + v26, (uint64_t)v9, v32);
    *(void *)(*(void *)(v12 + 48) + v24) = v25;
    sub_100E8E4D4((uint64_t)v9, *(void *)(v12 + 56) + v26, v33);
    id result = v25;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v21)
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t v6 = v30;
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v14 + 8 * v29);
  if (v28)
  {
    int64_t v17 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v14 + 8 * v17);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E87020()
{
  return sub_100E896DC((uint64_t *)&unk_101660810);
}

void *sub_100E8702C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660F50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v21 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v21;
    sub_1000361E0(v17, *((unint64_t *)&v17 + 1));
    id result = (void *)sub_1000361E0(v21, *((unint64_t *)&v21 + 1));
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E871F4()
{
  return sub_100E87CA0(&qword_1016609B0, &qword_1016609B8);
}

void *sub_100E87208()
{
  return sub_100E81A80((uint64_t *)&unk_101660B60, (uint64_t (*)(unsigned char *, uint64_t))sub_10001CEB0);
}

void *sub_100E87228()
{
  return sub_100E87248((uint64_t (*)(void))&type metadata accessor for MACAddress, &qword_101652450);
}

void *sub_100E87248(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v42 = a1(0);
  uint64_t v4 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - v5;
  sub_10000588C(a2);
  int64_t v36 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v44 = v7;
  if (!v8)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v44;
    uint64_t v33 = v36;
LABEL_28:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  uint64_t v38 = (const void *)(v6 + 64);
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, v38, 8 * v11);
    uint64_t v9 = v44;
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v43 = v6;
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 64);
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v39 = v4 + 32;
  uint64_t v40 = v4 + 16;
  int64_t v18 = v41;
  uint64_t v17 = v42;
  uint64_t v19 = v44;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      uint64_t v22 = v43;
      goto LABEL_12;
    }
    int64_t v30 = v13 + 1;
    uint64_t v22 = v43;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v30 >= v37) {
      goto LABEL_26;
    }
    unint64_t v31 = *((void *)v38 + v30);
    ++v13;
    if (!v31)
    {
      int64_t v13 = v30 + 1;
      if (v30 + 1 >= v37) {
        goto LABEL_26;
      }
      unint64_t v31 = *((void *)v38 + v13);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v31 - 1) & v31;
    unint64_t v21 = __clz(__rbit64(v31)) + (v13 << 6);
LABEL_12:
    unint64_t v23 = *(void *)(v4 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v18, *(void *)(v22 + 48) + v23, v17);
    uint64_t v24 = *(void *)(v22 + 56);
    uint64_t v25 = 16 * v21;
    unint64_t v26 = (uint64_t *)(v24 + 16 * v21);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v19 + 48) + v23, v18, v17);
    int64_t v29 = (uint64_t *)(*(void *)(v19 + 56) + v25);
    *int64_t v29 = v27;
    v29[1] = v28;
    id result = (void *)sub_1000361E0(v27, v28);
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v37)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v33 = v36;
    uint64_t v34 = v44;
    goto LABEL_28;
  }
  unint64_t v31 = *((void *)v38 + v32);
  if (v31)
  {
    int64_t v13 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v13 >= v37) {
      goto LABEL_26;
    }
    unint64_t v31 = *((void *)v38 + v13);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100E87528()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660B48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
    id result = (void *)sub_1000361E0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E876D4()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660A08);
}

void *sub_100E876F4()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for SafeLocation, &qword_101660A00, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

void *sub_100E8773C()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_1016609D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(unsigned char *)uint64_t v22 = *(unsigned char *)v17;
    *(void *)(v22 + 8) = v19;
    *(void *)(v22 + 16) = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E87900()
{
  uint64_t v1 = type metadata accessor for BeaconScanner.AISLookupState(0);
  uint64_t v29 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_1016609A0);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v24 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_100E8DE8C(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for BeaconScanner.AISLookupState);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    id result = (void *)sub_100E8E4D4((uint64_t)v3, *(void *)(v10 + 56) + v20, type metadata accessor for BeaconScanner.AISLookupState);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E87C44()
{
  return sub_100E80C34(type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101660980, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord);
}

void *sub_100E87C8C()
{
  return sub_100E87CA0(&qword_101660970, &qword_101660978);
}

void *sub_100E87CA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = sub_10000588C(a1);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a2);
  uint64_t v35 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v49 = v7;
  if (!v8)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v49;
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  uint64_t v46 = v6;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v36 = v6 + 64;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v48;
  uint64_t v17 = v47;
  uint64_t v40 = v48 + 16;
  uint64_t v41 = v47 + 16;
  uint64_t v38 = v48 + 32;
  uint64_t v39 = v47 + 32;
  unint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v45;
  uint64_t v21 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v50 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v46;
      goto LABEL_9;
    }
    int64_t v29 = v12 + 1;
    uint64_t v24 = v46;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v50 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v17 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(void *)(v24 + 48) + v25, v19);
    unint64_t v26 = *(void *)(v16 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    uint64_t v28 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v44, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v21 + 48) + v25, v18, v19);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 56) + v26, v28, v20);
    int64_t v12 = v50;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v49;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100E88044()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660900);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    id v19 = v17;
    id result = (void *)sub_1000361E0(v23, *((unint64_t *)&v23 + 1));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100E88208()
{
  return sub_100E89DE0(&qword_1016608F0);
}

void *sub_100E88214()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016608E8);
}

void *sub_100E88234()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_1016608F8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v24 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 16 * v16;
    unint64_t v19 = *(void *)(v8 + 48) + v17;
    int64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    long long v28 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v28;
    id result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100E884DC()
{
  return sub_100E888AC(&qword_1016608E0);
}

void *sub_100E884E8()
{
  return sub_100E88528(&qword_101660738, (uint64_t (*)(uint64_t, uint64_t))sub_10033093C);
}

void *sub_100E88508()
{
  return sub_100E88528(&qword_101660730, (uint64_t (*)(uint64_t, uint64_t))sub_100C1E464);
}

void *sub_100E88528(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = v2;
  sub_10000588C(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v4 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v16) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v9 + 8 * v27);
    ++v12;
    if (!v28)
    {
      int64_t v12 = v27 + 1;
      if (v27 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v9 + 8 * v12);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 8 * v18;
    int64_t v20 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
    uint64_t v21 = 16 * v18;
    uint64_t v22 = *(void *)(v5 + 56) + v21;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(unsigned __int8 *)(v22 + 8);
    *(void *)(*(void *)(v7 + 48) + v19) = v20;
    uint64_t v25 = *(void *)(v7 + 56) + v21;
    *(void *)uint64_t v25 = v23;
    *(unsigned char *)(v25 + 8) = v24;
    id v26 = v20;
    id result = (void *)a2(v23, v24);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v16) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v9 + 8 * v29);
  if (v28)
  {
    int64_t v12 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v9 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E886F4()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016608C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100E888A0()
{
  return sub_100E888AC(&qword_1016608C8);
}

id sub_100E888AC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E88A4C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660920);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E88BF0()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660928);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 48) + 24 * v15;
    char v17 = *(unsigned char *)v16;
    uint64_t v19 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v20 = *(void *)(v4 + 48) + 24 * v15;
    *(unsigned char *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v19;
    *(void *)(v20 + 16) = v18;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E88DA8()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_1016606E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v25 = __clz(__rbit64(v23));
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int v18 = *(_DWORD *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = v18;
    *(void *)(v21 + 8) = v19;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E88F48()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660898);
}

void *sub_100E88F68()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, &qword_101660888, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
}

void *sub_100E88FB0()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, &qword_101660890, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
}

void *sub_100E88FF8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660868);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 2 * v15;
    LOWORD(v17) = *(_WORD *)(*(void *)(v2 + 56) + v20);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_WORD *)(*(void *)(v4 + 56) + v20) = (_WORD)v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E891A8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660860);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    long long v24 = *(_OWORD *)(v21 + 8);
    *unint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v25 = v22;
    *(_OWORD *)(v25 + 8) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E89390()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660858);
  long long v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *long long v24 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v29 + 72) * v18;
    sub_100E8DE8C(*(void *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
    unint64_t v20 = *(void *)(v2 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v8 + 56) + v20, v1);
    sub_100E8E4D4((uint64_t)v7, *(void *)(v10 + 48) + v19, type metadata accessor for ShareAttemptTracker.AttemptKey);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v10 + 56) + v20, v4, v1);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100E896D0()
{
  return sub_100E896DC(&qword_101660790);
}

void *sub_100E896DC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100E8988C()
{
  return sub_100E89DE0(&qword_101660850);
}

void *sub_100E89898()
{
  return sub_100E898A4(&qword_101660820);
}

void *sub_100E898A4(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E89B38()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101660780);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(unsigned char *)uint64_t v22 = *(unsigned char *)v17;
    *(void *)(v22 + 8) = v19;
    *(void *)(v22 + 16) = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E89CFC()
{
  return sub_100E80C34((uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t *)&unk_101660800, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

void *sub_100E89D44()
{
  return sub_100E8381C(type metadata accessor for BeaconKeyManager.FileKey, (uint64_t *)&unk_1016606B0, type metadata accessor for BeaconKeyManager.FileKey, type metadata accessor for BeaconKeyManager.FileKey);
}

void *sub_100E89D8C()
{
  return sub_100E8381C(type metadata accessor for BeaconKeyManager.FileKey, &qword_101652488, type metadata accessor for BeaconKeyManager.FileKey, type metadata accessor for BeaconKeyManager.FileKey);
}

id sub_100E89DD4()
{
  return sub_100E89DE0((uint64_t *)&unk_1016607A0);
}

id sub_100E89DE0(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (id)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v30 = v4 + 16;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void **)(*(void *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E8A074()
{
  return sub_100E8A094((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101660F18);
}

void *sub_100E8A094(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - v6;
  sub_10000588C(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v31 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100E8A32C()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  int64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101660798);
  int64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    int64_t v29 = v32;
LABEL_25:
    *int64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  int64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    uint64_t v22 = (char *)(v20 + 16 * v17);
    char v23 = *v22;
    uint64_t v24 = *((void *)v22 + 1);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    uint64_t v25 = *(void *)(v15 + 56) + v21;
    *(unsigned char *)uint64_t v25 = v23;
    *(void *)(v25 + 8) = v24;
    id result = (void *)swift_retain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_100E8A60C()
{
  unint64_t result = qword_1016605C0;
  if (!qword_1016605C0)
  {
    sub_10000592C((uint64_t *)&unk_10163B7C0);
    sub_100E8DE34(&qword_101640E08, 255, (void (*)(uint64_t))type metadata accessor for MemberSharingCircle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016605C0);
  }
  return result;
}

uint64_t sub_100E8A6B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100E8A710@<X0>(uint64_t a1@<X8>)
{
  return sub_100E52EF0(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_1015F8EE8, (uint64_t)sub_100E7FB1C, a1, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F8F00, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101660670, (void (*)(void))sub_100E8A7D0, (uint64_t *)&unk_1016606A0);
}

uint64_t sub_100E8A7C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8A7D0()
{
  unint64_t result = qword_101660690;
  if (!qword_101660690)
  {
    sub_10000592C((uint64_t *)&unk_101660670);
    sub_100E8DE34((unint64_t *)&unk_10166C7F0, 255, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660690);
  }
  return result;
}

uint64_t sub_100E8A878()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8A888()
{
  unint64_t result = qword_1016606C0;
  if (!qword_1016606C0)
  {
    sub_10000592C((uint64_t *)&unk_101638D50);
    sub_100E8DE34(&qword_10165C6E8, 255, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016606C0);
  }
  return result;
}

uint64_t sub_100E8A930()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8A940()
{
  unint64_t result = qword_101660700;
  if (!qword_101660700)
  {
    sub_10000592C(&qword_10163BBB0);
    sub_100E8DE34(&qword_10164F248, 255, (void (*)(uint64_t))type metadata accessor for BeaconProductInfoRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660700);
  }
  return result;
}

uint64_t sub_100E8A9E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100E52EF0(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_1015F8FD8, (uint64_t)sub_100E7FB1C, a1, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F8FF0, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101638D10, (void (*)(void))sub_100E8AAA8, &qword_101660778);
}

uint64_t sub_100E8AA98()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8AAA8()
{
  unint64_t result = qword_101660768;
  if (!qword_101660768)
  {
    sub_10000592C((uint64_t *)&unk_101638D10);
    sub_100E8DE34(&qword_101660770, 255, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660768);
  }
  return result;
}

uint64_t sub_100E8AB50@<X0>(uint64_t a1@<X8>)
{
  return sub_100E8ABA0((uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t *)&unk_1016607D0, (void (*)(void))sub_100E8ABE0, &qword_1016607F8, a1);
}

uint64_t sub_100E8ABA0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100E54078(*(void *)(v5 + 16), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), a1, a2, a3, a5, a4);
}

unint64_t sub_100E8ABE0()
{
  unint64_t result = qword_1016607E8;
  if (!qword_1016607E8)
  {
    sub_10000592C((uint64_t *)&unk_1016607D0);
    sub_100E8DE34(&qword_101640790, 255, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016607E8);
  }
  return result;
}

uint64_t sub_100E8AC88(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100E8ACE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a2;
  v4[5] = a3;
  v4[6] = a4;
  unint64_t v8 = sub_10001D958(v4 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v8, a1, a3);
  return _swift_task_switch(sub_100E8AD98, a2, 0);
}

uint64_t sub_100E8AD98()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v0 + 112) = *(void *)(v1 + 136);
  sub_10001D010(v0 + 16, v0 + 56);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 120) = v2;
  *(void *)(v2 + 16) = v1;
  sub_10001CEB0((long long *)(v0 + 56), v2 + 24);
  swift_retain();
  return _swift_task_switch(sub_100E8AE48, 0, 0);
}

uint64_t sub_100E8AE48()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_100E8DDE0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  uint64_t v5 = sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  *uint64_t v4 = v0;
  v4[1] = sub_100CB8648;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100CBE09C, v3, v5);
}

void sub_100E8AF6C(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *((void *)a1 + 8);
  long long v12 = a1[1];
  long long v36 = *a1;
  long long v37 = v12;
  long long v13 = a1[2];
  long long v14 = a1[3];
  int64_t v28 = a1;
  long long v38 = v13;
  long long v39 = v14;
  uint64_t v40 = v11;
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  Swift::Int v31 = v15;
  uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v33 = v5 + 16;
  int64_t v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v32 = v5 + 48;
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v20 = 0;
  int64_t v21 = 0;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v35 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
      goto LABEL_19;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_100E8DE34(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 ^= v27;
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v21++, 1)) {
      goto LABEL_21;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_14:
    unint64_t v19 = (v25 - 1) & v25;
  }
  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v29)
  {
LABEL_18:
    (*v34)(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v20);
    return;
  }
  unint64_t v25 = *(void *)(v30 + 8 * v26);
  if (v25)
  {
    ++v21;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

void sub_100E8B2D0(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  Swift::UInt v3 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v4++, 1)) {
      goto LABEL_19;
    }
    if (v4 >= v9)
    {
LABEL_17:
      Hasher._combine(_:)(v3);
      return;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (!v14) {
      break;
    }
LABEL_16:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v11);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }
  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v9) {
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    ++v4;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_17;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_100E8B43C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8B44C()
{
  unint64_t result = qword_1016609E0;
  if (!qword_1016609E0)
  {
    sub_10000592C(&qword_1016426B0);
    sub_100E8DE34(&qword_1016609E8, 255, (void (*)(uint64_t))type metadata accessor for LocationProvider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016609E0);
  }
  return result;
}

uint64_t sub_100E8B4F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100E8ABA0((uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t *)&unk_10163B890, (void (*)(void))sub_100E8B544, &qword_101660A50, a1);
}

unint64_t sub_100E8B544()
{
  unint64_t result = qword_101660A40;
  if (!qword_101660A40)
  {
    sub_10000592C((uint64_t *)&unk_10163B890);
    sub_100E8DE34((unint64_t *)&unk_101661A10, 255, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660A40);
  }
  return result;
}

uint64_t sub_100E8B5EC()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8B604()
{
  return sub_100E8CB50((uint64_t (*)(uint64_t, uint64_t))sub_100E63A1C);
}

uint64_t sub_100E8B61C(uint64_t a1)
{
  return sub_10012A2EC(a1, v1[2], v1[3], v1[4]);
}

void sub_100E8B62C(void *a1@<X8>)
{
  sub_100AE3328((void *)(v1 + 24));
  *a1 = v3;
}

uint64_t sub_100E8B660(uint64_t a1)
{
  return sub_10012A3AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8B66C()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_100E8B684@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t result = sub_100B6E218(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  *a1 = result;
  return result;
}

uint64_t sub_100E8B6F4(uint64_t a1)
{
  return sub_100129D7C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8B700()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  long long v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  int64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100E8BA84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t result = sub_100B351DC(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_100E8BAE8(uint64_t a1)
{
  return sub_10012A0DC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8BAF4()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8BB0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t result = sub_10099C240(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  *a1 = result;
  return result;
}

uint64_t sub_100E8BB78(uint64_t a1)
{
  return sub_100129ECC(a1, v1[2], v1[3], v1[4]);
}

void *sub_100E8BB84@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100B6C090();
  *a1 = result;
  return result;
}

uint64_t sub_100E8BBB4(uint64_t a1)
{
  return sub_10012A49C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8BBC0()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8BBD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t result = sub_100AAB5F8(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_100E8BC44()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E8BC5C()
{
  return sub_100E8C238((uint64_t (*)(void))&type metadata accessor for MACAddress, (uint64_t (*)(unint64_t))sub_100AE800C);
}

uint64_t sub_100E8BC88()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100E8BD58(uint64_t a1)
{
  return sub_10012A31C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8BD64()
{
  uint64_t v1 = (int *)(sub_10000588C((uint64_t *)&unk_10164E870) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v3 + v1[11];
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v11, v5);
  v12(v0 + v8, v5);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100E8BEC0()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_10164E870) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100AE967C(v0 + v2, v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_100E8BF8C()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for MACAddress);
}

uint64_t sub_100E8BFA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t result = sub_100AE4474(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  *a1 = result;
  return result;
}

uint64_t sub_100E8C010()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100ADFD0C(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_100E8C0A4(uint64_t a1)
{
  return sub_100E56EAC(a1, v1[2], v1[3], v1[4], (uint64_t *)&unk_101660A80, (uint64_t)&unk_1015F9230, (uint64_t)sub_100E8C0FC, (uint64_t)&unk_1015F9248);
}

uint64_t sub_100E8C0F0()
{
  return sub_100133A14((uint64_t *)&unk_101660A80);
}

uint64_t sub_100E8C0FC()
{
  return sub_100E8E120((uint64_t *)&unk_101660A80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100E57300);
}

uint64_t sub_100E8C11C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 64);

  return _swift_deallocObject(v0, 105, 7);
}

void *sub_100E8C164@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100AE0BA4((void *)(v1 + 24), (void *)(v1 + 64), *(unsigned char *)(v1 + 104));
  *a1 = result;
  return result;
}

uint64_t sub_100E8C1A4(uint64_t a1)
{
  return sub_10012A28C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8C1B0()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C1C8()
{
  return sub_100E8C238((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(unint64_t))sub_100ACEADC);
}

uint64_t sub_100E8C1F4()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C20C()
{
  return sub_100E8C238((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(unint64_t))sub_100ACD178);
}

uint64_t sub_100E8C238(uint64_t (*a1)(void), uint64_t (*a2)(unint64_t))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_100E8C2BC()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C2D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100ACCD98(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

char *sub_100E8C340@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_100AD0D68();
  *a1 = result;
  return result;
}

char *sub_100E8C36C@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_100ACF5FC();
  *a1 = result;
  return result;
}

uint64_t sub_100E8C398()
{
  return QueueSynchronizer.conditionalSync<A>(_:)();
}

uint64_t sub_100E8C3FC()
{
  uint64_t v1 = (int *)(type metadata accessor for MemberSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  v9(v6 + v1[9], v8);
  v9(v6 + v1[10], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100E8C560()
{
  return sub_100E8CC1C((uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(uint64_t, uint64_t))sub_100E5E1C0);
}

uint64_t sub_100E8C58C(uint64_t a1)
{
  return sub_100129FEC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8C598()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C5B0()
{
  return sub_100E8CB50((uint64_t (*)(uint64_t, uint64_t))sub_100E5D698);
}

uint64_t sub_100E8C5C8(uint64_t a1)
{
  return sub_100129DAC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100E8C5D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD71E8(a1);
}

uint64_t sub_100E8C5F0()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8C608()
{
  return sub_100E8CB50((uint64_t (*)(uint64_t, uint64_t))sub_100E5CDE4);
}

uint64_t sub_100E8C620@<X0>(uint64_t a1@<X8>)
{
  return sub_100E8ABA0((uint64_t (*)(void))type metadata accessor for SharingCircleSecret, &qword_1016593B8, (void (*)(void))sub_100E8C670, &qword_101660B00, a1);
}

unint64_t sub_100E8C670()
{
  unint64_t result = qword_101660AF0;
  if (!qword_101660AF0)
  {
    sub_10000592C(&qword_1016593B8);
    sub_100E8DE34(&qword_10165DFB0, 255, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660AF0);
  }
  return result;
}

uint64_t sub_100E8C718()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v4 + v3 + 1, v2 | 7);
}

uint64_t sub_100E8C844()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 24) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100E8C9B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for MACAddress();
  return sub_100ADDDB4(v1 + v4, *(void *)(v1 + v5 + 8), *(void *)(v1 + v5 + 16), a1);
}

uint64_t sub_100E8CAAC(uint64_t a1)
{
  return sub_100E56EAC(a1, v1[2], v1[3], v1[4], &qword_101660B08, (uint64_t)&unk_1015F93E8, (uint64_t)sub_100E8CB04, (uint64_t)&unk_1015F9400);
}

uint64_t sub_100E8CAF8()
{
  return sub_100133A14(&qword_101660B08);
}

uint64_t sub_100E8CB04()
{
  return sub_100E8E564(&qword_101660B08, (uint64_t *)&unk_10163BF10, (uint64_t *)&unk_101660B10);
}

uint64_t sub_100E8CB20()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8CB38()
{
  return sub_100E8CB50((uint64_t (*)(uint64_t, uint64_t))sub_100E5B67C);
}

uint64_t sub_100E8CB50(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100E8CBD8()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8CBF0()
{
  return sub_100E8CC1C((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))sub_100E5AEA4);
}

uint64_t sub_100E8CC1C(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t sub_100E8CCAC()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8CCC4()
{
  return sub_100E8CEF8((uint64_t (*)(unint64_t))sub_100B6CF00);
}

uint64_t sub_100E8CCDC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100E8CDC4()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8CDDC()
{
  return sub_100E8CEF8((uint64_t (*)(unint64_t))sub_100B6CCF0);
}

uint64_t sub_100E8CDF4()
{
  return sub_100E8CE0C((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100E8CE0C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100E8CEE0()
{
  return sub_100E8CEF8((uint64_t (*)(unint64_t))sub_100B6CAE0);
}

uint64_t sub_100E8CEF8(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return a1(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_100E8CF78()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100E8CFB0()
{
  return sub_100A9E7EC(*(unsigned __int8 *)(v0 + 24));
}

unint64_t sub_100E8CFE0()
{
  unint64_t result = qword_101660B98;
  if (!qword_101660B98)
  {
    sub_10000592C(&qword_101660B90);
    sub_100E8DE34(&qword_101660BA0, 255, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660B98);
  }
  return result;
}

uint64_t sub_100E8D088()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D098()
{
  unint64_t result = qword_101660BB8;
  if (!qword_101660BB8)
  {
    sub_10000592C(&qword_101660BB0);
    sub_100E8DE34(&qword_101645BD0, 255, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660BB8);
  }
  return result;
}

unint64_t sub_100E8D140()
{
  unint64_t result = qword_101660BD8;
  if (!qword_101660BD8)
  {
    sub_10000592C(&qword_10163B9E0);
    sub_100E8DE34(&qword_101660BE0, 255, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660BD8);
  }
  return result;
}

uint64_t sub_100E8D1E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D1F8()
{
  unint64_t result = qword_101660BF8;
  if (!qword_101660BF8)
  {
    sub_10000592C(&qword_101660BF0);
    sub_100E8DE34(&qword_101660C00, 255, (void (*)(uint64_t))type metadata accessor for ShareRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660BF8);
  }
  return result;
}

uint64_t sub_100E8D2A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D2B0()
{
  unint64_t result = qword_101660C10;
  if (!qword_101660C10)
  {
    sub_10000592C(&qword_10163BB20);
    sub_100E8DE34(&qword_101647708, 255, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660C10);
  }
  return result;
}

uint64_t sub_100E8D358()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D368()
{
  unint64_t result = qword_101660C30;
  if (!qword_101660C30)
  {
    sub_10000592C(&qword_1016511E0);
    sub_100E8DE34(&qword_101640320, 255, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660C30);
  }
  return result;
}

uint64_t sub_100E8D410()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D420()
{
  unint64_t result = qword_101660C50;
  if (!qword_101660C50)
  {
    sub_10000592C(&qword_10164A370);
    sub_100E8DE34(&qword_10164A440, 255, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660C50);
  }
  return result;
}

uint64_t sub_100E8D4C8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E8D4D8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100E8D550()
{
  unint64_t result = qword_101660C78;
  if (!qword_101660C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660C78);
  }
  return result;
}

uint64_t sub_100E8D5A4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D5B4()
{
  unint64_t result = qword_101660C90;
  if (!qword_101660C90)
  {
    sub_10000592C(&qword_10164A380);
    sub_100E8DE34(&qword_10165A868, 255, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660C90);
  }
  return result;
}

uint64_t sub_100E8D65C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D66C()
{
  unint64_t result = qword_101660CB0;
  if (!qword_101660CB0)
  {
    sub_10000592C(&qword_10164B2D0);
    sub_100E8DE34(&qword_101639638, 255, (void (*)(uint64_t))type metadata accessor for LostModeInfoRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660CB0);
  }
  return result;
}

uint64_t sub_100E8D714()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D724()
{
  unint64_t result = qword_101660CD0;
  if (!qword_101660CD0)
  {
    sub_10000592C(&qword_10163BB70);
    sub_100E8DE34((unint64_t *)&unk_101661150, 255, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660CD0);
  }
  return result;
}

uint64_t sub_100E8D7CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D7DC()
{
  unint64_t result = qword_101660CF0;
  if (!qword_101660CF0)
  {
    sub_10000592C(&qword_10164B290);
    sub_100E8DE34((unint64_t *)&unk_10166F970, 255, (void (*)(uint64_t))type metadata accessor for LeashRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660CF0);
  }
  return result;
}

uint64_t sub_100E8D884()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D894()
{
  unint64_t result = qword_101660D10;
  if (!qword_101660D10)
  {
    sub_10000592C(&qword_1016593C8);
    sub_100E8DE34(&qword_10165DAB0, 255, (void (*)(uint64_t))type metadata accessor for PairingErrorRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660D10);
  }
  return result;
}

uint64_t sub_100E8D93C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8D94C()
{
  unint64_t result = qword_101660D30;
  if (!qword_101660D30)
  {
    sub_10000592C(&qword_10163BB80);
    sub_100E8DE34(&qword_10163AC70, 255, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660D30);
  }
  return result;
}

uint64_t sub_100E8D9F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8DA04()
{
  unint64_t result = qword_101660D50;
  if (!qword_101660D50)
  {
    sub_10000592C(&qword_101653F20);
    sub_100E8DE34((unint64_t *)&unk_101663680, 255, (void (*)(uint64_t))type metadata accessor for SafeLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660D50);
  }
  return result;
}

uint64_t sub_100E8DAAC()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8DABC()
{
  unint64_t result = qword_101660D68;
  if (!qword_101660D68)
  {
    sub_10000592C((uint64_t *)&unk_101653D50);
    sub_100E8DE34(&qword_101660D70, 255, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660D68);
  }
  return result;
}

uint64_t sub_100E8DB64@<X0>(uint64_t a1@<X8>)
{
  return sub_100E52EF0(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_1015F9960, (uint64_t)sub_100E7FB1C, a1, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F9978, (uint64_t)sub_100E8E6DC, (uint64_t *)&unk_101653D50, (void (*)(void))sub_100E8DABC, (uint64_t *)&unk_101660D78);
}

uint64_t sub_100E8DC14@<X0>(uint64_t a1@<X8>)
{
  return sub_100E52EF0(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_1015F99B0, (uint64_t)sub_100E7FB1C, a1, (void **)sub_1003B7AE0, (uint64_t)&unk_1015F99C8, (uint64_t)sub_100E8E6DC, &qword_10163B9F0, (void (*)(void))sub_100E8DCD4, (uint64_t *)&unk_101660DD0);
}

uint64_t sub_100E8DCC4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100E8DCD4()
{
  unint64_t result = qword_101660DC8;
  if (!qword_101660DC8)
  {
    sub_10000592C(&qword_10163B9F0);
    sub_100E8DE34(&qword_10165DD20, 255, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660DC8);
  }
  return result;
}

uint64_t sub_100E8DD7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100E8DDE0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + 3;
  uint64_t v4 = *(void *)(v1[2] + 128);
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = sub_10001CD44(v3, v6);
  id result = sub_100B2B68C((uint64_t)v7, v4, v6, v5);
  *a1 = result;
  return result;
}

uint64_t sub_100E8DE34(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100E8DE7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100E8DE8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100E8DEF4()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100E8DFFC()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100BF0A30(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100E8E0A8(uint64_t a1)
{
  return sub_100E56EAC(a1, v1[2], v1[3], v1[4], (uint64_t *)&unk_1016565A0, (uint64_t)&unk_1015F9AA0, (uint64_t)sub_100E8E100, (uint64_t)&unk_1015F9AB8);
}

uint64_t sub_100E8E0F4()
{
  return sub_100133A14((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100E8E100()
{
  return sub_100E8E120((uint64_t *)&unk_1016565A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100E5727C);
}

uint64_t sub_100E8E120(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(sub_10000588C(a1) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v2 + v4;
  unint64_t v6 = (uint64_t *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return a2(v5, v7, v8);
}

uint64_t sub_100E8E1C0()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  sub_10001CFB8(*((void *)v0 + 3), *((void *)v0 + 4));
  sub_10001CFB8(*((void *)v0 + 5), *((void *)v0 + 6));
  sub_10001CFB8(*((void *)v0 + 7), *((void *)v0 + 8));
  unint64_t v5 = *((void *)v0 + 10);
  if (v5 >> 60 != 15) {
    sub_10001CFB8(*((void *)v0 + 9), v5);
  }
  unint64_t v6 = *((void *)v0 + 12);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*((void *)v0 + 11), v6);
  }
  uint64_t v7 = (v3 + 128) & ~v3;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v7], v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100E8E300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v7 = *(void *)(v1 + 120);
  unint64_t v8 = v1 + v4;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = sub_10000588C(&qword_101660FF0);
  return sub_100BF17A8(a1, a1 + *(int *)(v10 + 48), (long long *)(v1 + 24), v5, v6, v7, v8, v9);
}

uint64_t *sub_100E8E3F8(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_100037A38(v6, v7);
  sub_100037A38(v8, v9);
  return a1;
}

uint64_t sub_100E8E488(uint64_t a1)
{
  return sub_100E56EAC(a1, v1[2], v1[3], v1[4], &qword_101660FF8, (uint64_t)&unk_1015F9B18, (uint64_t)sub_100E8E548, (uint64_t)&unk_1015F9B30);
}

uint64_t sub_100E8E4D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100E8E53C()
{
  return sub_100133A14(&qword_101660FF8);
}

uint64_t sub_100E8E548()
{
  return sub_100E8E564(&qword_101660FF8, &qword_101660FF0, &qword_101661000);
}

uint64_t sub_100E8E564(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = *(void *)(sub_10000588C(a1) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100E57544(v3 + v8, *(void (**)(uint64_t))(v3 + v9), *(void *)(v3 + v9 + 8), a2, a3, a1);
}

void sub_100E8E6DC(uint64_t *a1@<X8>)
{
}

uint64_t destroy for MessagingDevice()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessagingDevice()
{
  return &type metadata for MessagingDevice;
}

uint64_t sub_100E8EAB8()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 128) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 129) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 130) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 131) & 1);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 152);
  Hasher._combine(_:)(LOBYTE(v2[0]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return sub_100E8F31C((uint64_t)v2);
}

Swift::Int sub_100E8EC78()
{
  return Hasher._finalize()();
}

Swift::Int sub_100E8ECBC()
{
  return Hasher._finalize()();
}

BOOL sub_100E8ECF8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v13[6] = a1[6];
  v13[7] = v2;
  long long v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[3];
  v13[2] = a1[2];
  uint64_t v13[3] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a2[7];
  void v14[6] = a2[6];
  v14[7] = v7;
  long long v8 = a2[9];
  v14[8] = a2[8];
  v14[9] = v8;
  long long v9 = a2[3];
  v14[2] = a2[2];
  v14[3] = v9;
  long long v10 = a2[5];
  v14[4] = a2[4];
  v14[5] = v10;
  long long v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  return sub_100E8EE3C((uint64_t)v13, (uint64_t)v14);
}

uint64_t sub_100E8ED80()
{
  uint64_t v1 = *(void *)(v0 + 96);
  long long v2 = *(void **)(v0 + 104);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 60;
}

BOOL sub_100E8EE3C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
      {
        if (*(void *)(a1 + 48) == *(void *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56)
          || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
        {
          if (*(void *)(a1 + 64) == *(void *)(a2 + 64) && *(void *)(a1 + 72) == *(void *)(a2 + 72)
            || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
          {
            if (*(void *)(a1 + 80) == *(void *)(a2 + 80) && *(void *)(a1 + 88) == *(void *)(a2 + 88)
              || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
            {
              if (*(void *)(a1 + 96) == *(void *)(a2 + 96) && *(void *)(a1 + 104) == *(void *)(a2 + 104)
                || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
              {
                if (*(void *)(a1 + 112) == *(void *)(a2 + 112) && *(void *)(a1 + 120) == *(void *)(a2 + 120)) {
                  return ((*(unsigned __int8 *)(a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                }
                      && ((*(unsigned __int8 *)(a1 + 129) ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                      && ((*(unsigned __int8 *)(a1 + 130) ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                      && ((*(unsigned __int8 *)(a1 + 131) ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                      && *(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136)
                      && (*(void *)(a1 + 144) == *(void *)(a2 + 144)
                       && *(void *)(a1 + 152) == *(void *)(a2 + 152)
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
                char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL result = 0;
                if (v14) {
                  return ((*(unsigned __int8 *)(a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                }
                      && ((*(unsigned __int8 *)(a1 + 129) ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                      && ((*(unsigned __int8 *)(a1 + 130) ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                      && ((*(unsigned __int8 *)(a1 + 131) ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                      && *(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136)
                      && (*(void *)(a1 + 144) == *(void *)(a2 + 144)
                       && *(void *)(a1 + 152) == *(void *)(a2 + 152)
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100E8F03C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 uniqueID];
  if (!v4)
  {
    __break(1u);
    goto LABEL_12;
  }
  char v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = [a1 uniqueIDOverride];
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  char v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = [a1 modelIdentifier];
  if (!v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  int64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = [a1 productName];
  if (!v19)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  Swift::UInt v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v22;

  id v23 = [a1 productVersion];
  if (!v23)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v24 = v23;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v60 = v25;

  id v26 = [a1 productBuildVersion];
  if (!v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v58 = v29;
  uint64_t v59 = v28;

  id v30 = [a1 name];
  if (!v30)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  Swift::Int v31 = v30;
  uint64_t v57 = v21;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v33;
  uint64_t v56 = v32;

  id v34 = [a1 service];
  if (!v34)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v35 = v34;
  uint64_t v50 = v18;
  uint64_t v51 = v16;
  uint64_t v52 = v13;
  uint64_t v53 = v11;
  uint64_t v54 = v8;
  uint64_t v36 = v6;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v38;
  uint64_t v49 = v37;

  unsigned __int8 v39 = [a1 isLocallyPaired];
  unsigned __int8 v40 = [a1 isActive];
  unsigned __int8 v41 = [a1 isNearby];
  unsigned __int8 v42 = [a1 isConnected];
  uint64_t v43 = IDSCopyIDForDevice();
  if (v43)
  {
    uint64_t v44 = (void *)v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v54;
    *(void *)(a2 + 16) = v53;
    *(void *)(a2 + 24) = v52;
    *(void *)(a2 + 32) = v51;
    *(void *)(a2 + 40) = v50;
    *(void *)(a2 + 48) = v57;
    *(void *)(a2 + 56) = v62;
    *(void *)(a2 + 64) = v61;
    *(void *)(a2 + 72) = v60;
    *(void *)(a2 + 80) = v59;
    *(void *)(a2 + 88) = v58;
    *(void *)(a2 + 96) = v56;
    *(void *)(a2 + 104) = v55;
    *(void *)(a2 + 112) = v49;
    *(void *)(a2 + 120) = v48;
    *(unsigned char *)(a2 + 128) = v39;
    *(unsigned char *)(a2 + 129) = v40;
    *(unsigned char *)(a2 + 130) = v41;
    *(unsigned char *)(a2 + 131) = v42;
    *(unsigned char *)(a2 + 136) = 3;
    *(void *)(a2 + 144) = v45;
    *(void *)(a2 + 152) = v47;
    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_100E8F31C(uint64_t a1)
{
  return a1;
}

id sub_100E8F348()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)SPSecureLocation) init];
  [v2 setLongitude:*(double *)(v0 + 16)];
  [v2 setLatitude:*(double *)(v0 + 24)];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setFindMyId:v3];

  [v2 setVerticalAccuracy:*(double *)(v1 + 32)];
  [v2 setHorizontalAccuracy:*(double *)(v1 + 40)];
  [v2 setSpeed:*(double *)(v1 + 48)];
  [v2 setCourse:*(double *)(v1 + 56)];
  [v2 setAltitude:*(double *)(v1 + 64)];
  if ((*(unsigned char *)(v1 + 80) & 1) == 0)
  {
    id v4 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v1 + 72)];
    [v2 setFloor:v4];
  }
  char v5 = (int *)type metadata accessor for SecureLocation();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v2 setTimestamp:isa];

  [v2 setMotionActivityState:*(void *)(v1 + v5[14])];
  [v2 setPublishReason:*(void *)(v1 + v5[15])];
  if (*(void *)(v1 + v5[16] + 8)) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0;
  }
  [v2 setLocationLabel:v7];

  return v2;
}

uint64_t sub_100E8F520()
{
  _StringGuts.grow(_:)(100);
  v1._object = (void *)0x8000000101419180;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  NSString v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 15392;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  Double.write<A>(to:)();
  v7._countAndFlagsBits = 0x20617620203ELL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  Double.write<A>(to:)();
  v8._countAndFlagsBits = 543254560;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  Double.write<A>(to:)();
  v9._countAndFlagsBits = 544240416;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  Double.write<A>(to:)();
  v10._countAndFlagsBits = 0x2073726320;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  Double.write<A>(to:)();
  v11._countAndFlagsBits = 0x20746C6120;
  v11._object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  Double.write<A>(to:)();
  v12._countAndFlagsBits = 543974944;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  sub_10000588C(&qword_10163ABA0);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 544437280;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  id v14 = (int *)type metadata accessor for SecureLocation();
  type metadata accessor for Date();
  sub_100E927CC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 544435488;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  unint64_t v17 = 0xEA00000000007972;
  uint64_t v18 = 0x616E6F6974617473;
  switch(*(uint64_t *)((char *)v0 + v14[14]))
  {
    case 1:
      break;
    case 2:
      unint64_t v17 = 0xE700000000000000;
      unsigned int v19 = 1802264951;
      goto LABEL_6;
    case 3:
      unint64_t v17 = 0xE700000000000000;
      unsigned int v19 = 1852732786;
      goto LABEL_6;
    case 4:
      unint64_t v17 = 0xE700000000000000;
      unsigned int v19 = 1818458467;
LABEL_6:
      uint64_t v18 = v19 | 0x676E6900000000;
      break;
    case 5:
      unint64_t v17 = 0xEA00000000006576;
      uint64_t v18 = 0x69746F6D6F747561;
      break;
    default:
      unint64_t v17 = 0xE700000000000000;
      uint64_t v18 = 0x6E776F6E6B6E75;
      break;
  }
  unint64_t v20 = v17;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 544370720;
  v21._object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = sub_100E90398(*(uint64_t *)((char *)v0 + v14[15]));
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x206C626C20;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  uint64_t v24 = (uint64_t *)((char *)v0 + v14[16]);
  if (v24[1])
  {
    uint64_t v25 = *v24;
    id v26 = (void *)v24[1];
  }
  else
  {
    id v26 = (void *)0xE300000000000000;
    uint64_t v25 = 7104878;
  }
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return 0;
}

uint64_t sub_100E8F944@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  Data.subObject<A>(range:)();
  Data.subObject<A>(range:)();
  Data.subObject<A>(range:)();
  sub_10006145C();
  unscale<A, B>(_:_:)();
  Swift::String v8 = (int *)type metadata accessor for SecureLocation();
  uint64_t v9 = a4 + v8[13];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a3, v10);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = (double)(int)bswap32(v14) / 10000000.0;
  *(double *)(a4 + 24) = (double)(int)bswap32(v14) / 10000000.0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = v15;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  *(void *)(a4 + v8[14]) = 0;
  uint64_t v11 = v8[15];
  Swift::String v12 = (void *)(a4 + v8[16]);
  *Swift::String v12 = 0;
  v12[1] = 0;
  *(void *)(a4 + v11) = 8;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v8 - 1) + 56))(a4, 0, 1, v8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100E8FD70()
{
  long long v9 = xmmword_101348180;
  double v1 = *(double *)(v0 + 24) * 10000000.0;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v1 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  LODWORD(v5) = bswap32((int)v1);
  Swift::String v7 = &type metadata for UnsafeRawBufferPointer;
  Swift::String v8 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v6 = &v5;
  *((void *)&v6 + 1) = (char *)&v5 + 4;
  sub_10001CD44(&v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v6);
  double v2 = *(double *)(v0 + 16) * 10000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v2 >= 2147483650.0) {
    goto LABEL_13;
  }
  LODWORD(v5) = bswap32((int)v2);
  Swift::String v7 = &type metadata for UnsafeRawBufferPointer;
  Swift::String v8 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v6 = &v5;
  *((void *)&v6 + 1) = (char *)&v5 + 4;
  sub_10001CD44(&v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v6);
  uint64_t v5 = *(void *)(v0 + 40);
  long long v6 = xmmword_101374DD0;
  sub_10006145C();
  scale<A, B>(_:_:)();
  Swift::String v7 = &type metadata for UnsafeRawBufferPointer;
  Swift::String v8 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&long long v6 = &v4;
  *((void *)&v6 + 1) = &v5;
  sub_10001CD44(&v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v6);
  return v9;
}

uint64_t sub_100E8FF94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v48 - v12;
  id v14 = [a1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  int v15 = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  id v16 = [a1 findMyId];
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v17;

  [a1 longitude];
  uint64_t v19 = v18;
  [a1 latitude];
  uint64_t v21 = v20;
  [a1 verticalAccuracy];
  uint64_t v23 = v22;
  [a1 horizontalAccuracy];
  uint64_t v25 = v24;
  [a1 speed];
  uint64_t v27 = v26;
  [a1 course];
  uint64_t v29 = v28;
  [a1 altitude];
  uint64_t v31 = v30;
  id v32 = [a1 floor];

  if (v32 && (id v33 = [a1 floor]) != 0)
  {
    id v34 = v33;
    id v48 = [v33 integerValue];

    int v15 = 0;
  }
  else
  {
    id v48 = 0;
  }
  int v51 = v15;
  sub_10001E2BC((uint64_t)v13, (uint64_t)v11);
  uint64_t v35 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    Date.init()();
    sub_10001E324((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
  }
  id v36 = [a1 motionActivityState:v48];
  id v37 = [a1 publishReason];
  id v38 = [a1 locationLabel];
  if (v38)
  {
    unsigned __int8 v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v42 = 0;
  }
  uint64_t v43 = v49;
  sub_10001E324((uint64_t)v13);
  uint64_t v44 = v50;
  *(void *)a2 = v43;
  *(void *)(a2 + 8) = v44;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v27;
  *(void *)(a2 + 56) = v29;
  *(void *)(a2 + 64) = v31;
  *(void *)(a2 + 72) = v48;
  *(unsigned char *)(a2 + 80) = v51;
  uint64_t v45 = (int *)type metadata accessor for SecureLocation();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v45[13], v35, v4);
  *(void *)(a2 + v45[14]) = v36;
  *(void *)(a2 + v45[15]) = v37;
  uint64_t v47 = (uint64_t *)(a2 + v45[16]);
  *uint64_t v47 = v40;
  v47[1] = v42;
  return result;
}

unint64_t sub_100E90398(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 6515827;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x6174537469736976;
      break;
    case 2:
      unint64_t result = 0x6165627472616568;
      break;
    case 3:
      unint64_t result = 0x65646E6174737962;
      break;
    case 4:
      unint64_t result = 0x646E616D65646E6FLL;
      break;
    case 5:
      unint64_t result = 0x776F6C6C616873;
      break;
    case 6:
      unint64_t result = 1702259052;
      break;
    case 7:
      unint64_t result = 0x656977657473;
      break;
    case 8:
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 99:
      unint64_t result = 0x6F4C79636167656CLL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_100E906AC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100E9073C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100E907BC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100E9084C()
{
  return RawRepresentable<>.encode(to:)();
}

void *sub_100E908CC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    long long v9 = *((_OWORD *)a2 + 3);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v11 = a3[13];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(_OWORD *)(a1 + 48) = v9;
    uint64_t v14 = type metadata accessor for Date();
    int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    uint64_t v16 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(void *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[16];
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100E90A10(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100E90AA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = a3[13];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  uint64_t v15 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[16];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100E90B94(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = a3[13];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v11 = a3[16];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100E90CC4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = a3[13];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100E90D88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = a3[13];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 64) = v8;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[16];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100E90E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100E90E88);
}

uint64_t sub_100E90E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100E90F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100E90F4C);
}

uint64_t sub_100E90F4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocation()
{
  uint64_t result = qword_101661070;
  if (!qword_101661070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100E91040()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100E91108(char a1)
{
  unint64_t result = 0x6449794D646E6966;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x6465657073;
      break;
    case 6:
      unint64_t result = 0x657372756F63;
      break;
    case 7:
      unint64_t result = 0x6564757469746C61;
      break;
    case 8:
      unint64_t result = 0x726F6F6C66;
      break;
    case 9:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000013;
      break;
    case 11:
      unint64_t result = 0x526873696C627570;
      break;
    case 12:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100E912B8(char a1)
{
  unint64_t result = 0x6449794D646E6966;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x6465657073;
      break;
    case 6:
      unint64_t result = 0x657372756F63;
      break;
    case 7:
      unint64_t result = 0x6564757469746C61;
      break;
    case 8:
      unint64_t result = 0x726F6F6C66;
      break;
    case 9:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000013;
      break;
    case 11:
      unint64_t result = 0x526873696C627570;
      break;
    case 12:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100E91468(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100E91108(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100E91108(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100E914F4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100E91108(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100E91558()
{
  sub_100E91108(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100E915AC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100E91108(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100E9160C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100E92AB0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100E9163C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100E91108(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100E91668()
{
  return sub_100E912B8(*v0);
}

unint64_t sub_100E91670@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100E92AB0(a1);
  *a2 = result;
  return result;
}

void sub_100E91698(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_100E916A4(uint64_t a1)
{
  unint64_t v2 = sub_100E9258C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100E916E0(uint64_t a1)
{
  unint64_t v2 = sub_100E9258C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100E9171C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((*(void *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 24);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 32);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + 40);
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 48);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(void *)(v0 + 56) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)(v0 + 56);
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((*(void *)(v0 + 64) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)(v0 + 64);
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (*(unsigned char *)(v0 + 80) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v8 = *(void *)(v0 + 72);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
  }
  uint64_t v9 = (int *)type metadata accessor for SecureLocation();
  type metadata accessor for Date();
  sub_100E927CC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + v9[14]));
  Hasher._combine(_:)(*(void *)(v0 + v9[15]));
  if (*(void *)(v0 + v9[16] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100E9190C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100E91924(a1, a2);
}

uint64_t sub_100E91924@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  id v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_1016610E0);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  Swift::UInt64 v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SecureLocation();
  Swift::UInt64 v7 = (int *)__chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v9 + 9) = 0;
  v9[80] = 1;
  uint64_t v10 = v7[14];
  *(void *)&v9[v10] = 0;
  uint64_t v11 = v7[15];
  *(void *)&v9[v11] = 0;
  uint64_t v12 = &v9[v7[16]];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v41 = v12;
  sub_10001CD44(a1, a1[3]);
  sub_100E9258C();
  unsigned __int8 v39 = v5;
  uint64_t v13 = (uint64_t)v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = v10;
    uint64_t v33 = v6;
    uint64_t v42 = a1;
    uint64_t v14 = v38;
    LOBYTE(v43) = 0;
    *(void *)uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 1) = v16;
    uint64_t v31 = v16;
    LOBYTE(v43) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 2) = v17;
    LOBYTE(v43) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 3) = v18;
    LOBYTE(v43) = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 4) = v19;
    LOBYTE(v43) = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 5) = v20;
    LOBYTE(v43) = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 6) = v21;
    LOBYTE(v43) = 6;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 7) = v22;
    LOBYTE(v43) = 7;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v9 + 8) = v23;
    LOBYTE(v43) = 8;
    *((void *)v9 + 9) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9[80] = v24 & 1;
    LOBYTE(v43) = 9;
    sub_100E927CC(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v9[*(int *)(v33 + 52)], v36, v37);
    type metadata accessor for SPMotionActivityState(0);
    char v45 = 10;
    sub_100E927CC(&qword_1016610F0, type metadata accessor for SPMotionActivityState);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v25 = v43;
    if (v44) {
      uint64_t v25 = 0;
    }
    *(void *)&v9[v32] = v25;
    type metadata accessor for SPSecureLocationPublishReason(0);
    char v45 = 11;
    sub_100E927CC(&qword_1016610F8, type metadata accessor for SPSecureLocationPublishReason);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v26 = v43;
    if (v44) {
      uint64_t v26 = 0;
    }
    *(void *)&v9[v11] = v26;
    LOBYTE(v43) = 12;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v39, v40);
    uint64_t v30 = (uint64_t *)v41;
    swift_bridgeObjectRelease();
    *uint64_t v30 = v27;
    v30[1] = v29;
    sub_1001FEF08((uint64_t)v9, v34);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v42);
    return sub_1001FEFBC((uint64_t)v9);
  }
}

uint64_t sub_100E91F84(void *a1)
{
  return sub_100E91F9C(a1);
}

uint64_t sub_100E91F9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661100);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100E9258C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = *(unsigned char *)(v3 + 80);
    *(void *)&long long v12 = *(void *)(v3 + 72);
    BYTE8(v12) = v9;
    char v13 = 8;
    sub_10000588C(&qword_10163ABA0);
    sub_100E925E0(&qword_101661108, &qword_10163ABA0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = (int *)type metadata accessor for SecureLocation();
    LOBYTE(v12) = 9;
    type metadata accessor for Date();
    sub_100E927CC((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)(v3 + v10[14]);
    char v13 = 10;
    type metadata accessor for SPMotionActivityState(0);
    sub_100E927CC(&qword_101661110, type metadata accessor for SPMotionActivityState);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)(v3 + v10[15]);
    char v13 = 11;
    type metadata accessor for SPSecureLocationPublishReason(0);
    sub_100E927CC(&qword_101661118, type metadata accessor for SPSecureLocationPublishReason);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + v10[16]);
    char v13 = 12;
    sub_10000588C(&qword_101644320);
    sub_100E925E0(&qword_101661120, &qword_101644320);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100E9243C()
{
  return static Date.< infix(_:_:)();
}

BOOL sub_100E9244C()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

BOOL sub_100E9247C()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

uint64_t sub_100E924A8()
{
  return static Date.< infix(_:_:)();
}

Swift::Int sub_100E924BC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100E92500()
{
  return Hasher._finalize()();
}

uint64_t sub_100E92544()
{
  return sub_100E927CC(&qword_1016610D8, (void (*)(uint64_t))type metadata accessor for SecureLocation);
}

unint64_t sub_100E9258C()
{
  unint64_t result = qword_1016610E8;
  if (!qword_1016610E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016610E8);
  }
  return result;
}

uint64_t sub_100E925E0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100E92644(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)
      || *(double *)(a1 + 24) != *(double *)(a2 + 24)
      || *(double *)(a1 + 32) != *(double *)(a2 + 32)
      || *(double *)(a1 + 40) != *(double *)(a2 + 40)
      || *(double *)(a1 + 48) != *(double *)(a2 + 48)
      || *(double *)(a1 + 56) != *(double *)(a2 + 56)
      || *(double *)(a1 + 64) != *(double *)(a2 + 64))
    {
      return 0;
    }
    char v7 = *(unsigned char *)(a2 + 80);
    if (*(unsigned char *)(a1 + 80))
    {
      if (!*(unsigned char *)(a2 + 80)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 72) != *(void *)(a2 + 72)) {
        char v7 = 1;
      }
      if (v7) {
        return 0;
      }
    }
    uint64_t v8 = (int *)type metadata accessor for SecureLocation();
    if ((static Date.== infix(_:_:)() & 1) == 0
      || *(void *)(a1 + v8[14]) != *(void *)(a2 + v8[14])
      || *(void *)(a1 + v8[15]) != *(void *)(a2 + v8[15]))
    {
      return 0;
    }
    uint64_t v9 = v8[16];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = *(void *)(a1 + v9 + 8);
    long long v12 = (void *)(a2 + v9);
    uint64_t v13 = v12[1];
    if (v11)
    {
      if (!v13 || (*v10 != *v12 || v11 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_100E927CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SecureLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    char *result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E92970);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocation.CodingKeys()
{
  return &type metadata for SecureLocation.CodingKeys;
}

unint64_t sub_100E929AC()
{
  unint64_t result = qword_101661138;
  if (!qword_101661138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661138);
  }
  return result;
}

unint64_t sub_100E92A04()
{
  unint64_t result = qword_101661140;
  if (!qword_101661140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661140);
  }
  return result;
}

unint64_t sub_100E92A5C()
{
  unint64_t result = qword_101661148;
  if (!qword_101661148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661148);
  }
  return result;
}

unint64_t sub_100E92AB0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2C28, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

uint64_t sub_100E92AFC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v8 = (char *)&v74 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v9 - 8);
  uint64_t v83 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  int64_t v77 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v79 = (char *)&v74 - v12;
  uint64_t v13 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v14 = (uint64_t *)((char *)a2 + v13[7]);
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v15 = (uint64_t *)((char *)a2 + v13[8]);
  *uint64_t v15 = 0;
  v15[1] = 0;
  uint64_t v80 = v15;
  uint64_t v16 = (uint64_t *)((char *)a2 + v13[9]);
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v81 = v16;
  id v84 = a1;
  if (CKRecord.recordType.getter() == 0x65646F4D74736F4CLL && v17 == 0xEE0064726F636552)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_100E947EC();
      swift_allocError();
      *uint64_t v43 = 0;
      swift_willThrow();

      goto LABEL_17;
    }
  }
  uint64_t v78 = v14;
  id v19 = v84;
  id v20 = [v84 recordID];
  id v21 = [v20 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v82;
  uint64_t v22 = v83;
  char v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
  if (v24(v8, 1, v83) == 1)
  {
    sub_100270E18((uint64_t)v8);
    sub_100E947EC();
    swift_allocError();
    *uint64_t v25 = 1;
    swift_willThrow();

LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v26 = v8;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v27(v79, v26, v22);
  id v28 = [v19 encryptedValues];
  NSString v29 = String._bridgeToObjectiveC()();
  id v75 = v28;
  id v30 = [v28 objectForKeyedSubscript:v29];

  if (!v30 || (v87 = v30, uint64_t v74 = sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    static os_log_type_t.error.getter();
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    *(void *)(v39 + 56) = sub_100E94840();
    *(void *)(v39 + 64) = sub_100E95A10((unint64_t *)&qword_10163AD10, (void (*)(uint64_t))sub_100E94840);
    id v40 = v84;
    *(void *)(v39 + 32) = v84;
    id v41 = v40;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100E947EC();
    swift_allocError();
    *uint64_t v42 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v83);
    goto LABEL_17;
  }
  uint64_t v31 = v76;
  UUID.init(uuidString:)();
  uint64_t v32 = (uint64_t)v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v31;
  uint64_t v34 = v83;
  if (v24(v33, 1, v83) == 1)
  {
    sub_100270E18(v32);
    static os_log_type_t.error.getter();
    id v35 = v84;
    if (qword_1016372E0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_101342130;
    *(void *)(v36 + 56) = sub_100E94840();
    *(void *)(v36 + 64) = sub_100E95A10((unint64_t *)&qword_10163AD10, (void (*)(uint64_t))sub_100E94840);
    *(void *)(v36 + 32) = v35;
    id v37 = v35;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100E947EC();
    swift_allocError();
    *uint64_t v38 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v83);
    goto LABEL_17;
  }
  v27(v77, (char *)v32, v34);
  id v46 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v84 encodeSystemFieldsWithCoder:v46];
  [v46 finishEncoding];
  uint64_t v47 = v34;
  id v48 = [v46 encodedData];
  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;

  *a2 = v49;
  a2[1] = v51;
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v52((char *)a2 + v13[5], v79, v47);
  v52((char *)a2 + v13[6], v77, v47);
  NSString v53 = String._bridgeToObjectiveC()();
  id v54 = v75;
  id v55 = [v75 objectForKeyedSubscript:v53];

  if (v55)
  {
    id v87 = v55;
    int v56 = swift_dynamicCast();
    if (v56) {
      uint64_t v57 = v85;
    }
    else {
      uint64_t v57 = 0;
    }
    if (v56) {
      uint64_t v58 = v86;
    }
    else {
      uint64_t v58 = 0;
    }
    uint64_t v60 = v80;
    uint64_t v59 = v81;
    uint64_t v61 = v78;
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v60 = v80;
    uint64_t v59 = v81;
    uint64_t v61 = v78;
  }
  swift_bridgeObjectRelease();
  *uint64_t v61 = v57;
  v61[1] = v58;
  NSString v62 = String._bridgeToObjectiveC()();
  id v63 = [v54 objectForKeyedSubscript:v62];

  if (v63)
  {
    id v87 = v63;
    int v64 = swift_dynamicCast();
    if (v64) {
      uint64_t v65 = v85;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v64) {
      uint64_t v66 = v86;
    }
    else {
      uint64_t v66 = 0;
    }
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  swift_bridgeObjectRelease();
  *uint64_t v60 = v65;
  v60[1] = v66;
  NSString v67 = String._bridgeToObjectiveC()();
  id v68 = [v54 objectForKeyedSubscript:v67];
  swift_unknownObjectRelease();

  uint64_t v69 = v83;
  uint64_t v70 = *(void (**)(char *, uint64_t))(v82 + 8);
  v70(v77, v83);
  v70(v79, v69);
  if (v68)
  {
    id v87 = v68;
    int v71 = swift_dynamicCast();
    if (v71) {
      uint64_t v72 = v85;
    }
    else {
      uint64_t v72 = 0;
    }
    if (v71) {
      uint64_t v73 = v86;
    }
    else {
      uint64_t v73 = 0;
    }
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  void *v59 = v72;
  v59[1] = v73;
  return result;
}

uint64_t sub_100E934D0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170ED90);
  sub_100010324(v0, (uint64_t)qword_10170ED90);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100E935F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = (int *)type metadata accessor for LostModeRecord();
  type metadata accessor for UUID();
  sub_100E95A10(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if (*(uint64_t *)((char *)v1 + v4[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(uint64_t *)((char *)v1 + v4[8] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(uint64_t *)((char *)v1 + v4[9] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t sub_100E937E4(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x6C69616D65;
      break;
    case 4:
      unint64_t result = 0x6D754E656E6F6870;
      break;
    case 5:
      unint64_t result = 0x6567617373656DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100E938B8()
{
  return sub_100E937E4(*v0);
}

uint64_t sub_100E938C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100E9577C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100E938E8(uint64_t a1)
{
  unint64_t v2 = sub_100E94880();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100E93924(uint64_t a1)
{
  unint64_t v2 = sub_100E94880();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100E93960()
{
  return Hasher._finalize()();
}

Swift::Int sub_100E939A4()
{
  return Hasher._finalize()();
}

uint64_t sub_100E939E4(id *a1)
{
  uint64_t v2 = v1;
  [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v3 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v4 = UUID.uuidString.getter();
  if (!*((void *)&v21 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if ((void)v21 == v4 && *((void *)&v21 + 1) == v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_9:
    *(void *)&long long v21 = UUID.uuidString.getter();
    *((void *)&v21 + 1) = v8;
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v9 = (unint64_t *)(v1 + v3[7]);
  unint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  if (*((void *)&v21 + 1))
  {
    if (!v10)
    {
      swift_bridgeObjectRelease();
      long long v21 = 0u;
LABEL_20:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_21;
    }
    if (v21 == __PAIR128__(v10, v11))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
LABEL_19:
      *(void *)&long long v21 = v11;
      *((void *)&v21 + 1) = v10;
      goto LABEL_20;
    }
  }
  else if (v10)
  {
    goto LABEL_19;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = (unint64_t *)(v2 + v3[8]);
  unint64_t v15 = *v13;
  unint64_t v14 = v13[1];
  if (*((void *)&v21 + 1))
  {
    if (!v14)
    {
      swift_bridgeObjectRelease();
      long long v21 = 0u;
LABEL_30:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_31;
    }
    if (v21 == __PAIR128__(v14, v15))
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
LABEL_29:
      *(void *)&long long v21 = v15;
      *((void *)&v21 + 1) = v14;
      goto LABEL_30;
    }
  }
  else if (v14)
  {
    goto LABEL_29;
  }
LABEL_31:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v17 = v2 + v3[9];
  uint64_t v18 = *(void *)(v17 + 8);
  if (!*((void *)&v21 + 1))
  {
    if (!v18) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_39;
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if (v21 == *(_OWORD *)v17)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0) {
    goto LABEL_39;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100E93DF0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101661188);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100E94880();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for LostModeRecord();
    LOBYTE(v10) = 1;
    type metadata accessor for UUID();
    sub_100E95A10(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100E94094@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  id v46 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v47 = sub_10000588C(&qword_101661178);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LostModeRecord();
  char v11 = (int *)__chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = &v13[v11[7]];
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v51 = (uint64_t *)v14;
  unint64_t v15 = &v13[v11[8]];
  *(void *)unint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v50 = (uint64_t *)v15;
  char v16 = &v13[v11[9]];
  *(void *)char v16 = 0;
  *((void *)v16 + 1) = 0;
  id v48 = v16;
  sub_10001CD44(a1, a1[3]);
  sub_100E94880();
  uint64_t v17 = v9;
  uint64_t v18 = (uint64_t)v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = v10;
    id v41 = v13;
    id v19 = v46;
    uint64_t v49 = a1;
    char v53 = 0;
    sub_100037AA0();
    uint64_t v20 = v47;
    long long v21 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = v41;
    *id v41 = v52;
    LOBYTE(v52) = 1;
    sub_100E95A10((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v24 = v40;
    uint64_t v25 = (char *)v22 + *(int *)(v40 + 20);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v39(v25, v7, v23);
    LOBYTE(v52) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v39((char *)v41 + *(int *)(v24 + 24), v19, v23);
    LOBYTE(v52) = 3;
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v27 = v51;
    *uint64_t v51 = v26;
    v27[1] = v28;
    LOBYTE(v52) = 4;
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v30 = v50;
    uint64_t *v50 = v29;
    v30[1] = v31;
    LOBYTE(v52) = 5;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v20);
    id v35 = (uint64_t *)v48;
    swift_bridgeObjectRelease();
    *id v35 = v32;
    v35[1] = v34;
    uint64_t v36 = v41;
    sub_100E948D4((uint64_t)v41, v42);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
    return sub_100E94938((uint64_t)v36);
  }
}

uint64_t sub_100E945EC()
{
  if (qword_101637130 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170ED90);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100E94694@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100E94094(a1, a2);
}

uint64_t sub_100E946AC(void *a1)
{
  return sub_100E93DF0(a1);
}

uint64_t sub_100E946C4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100E95A10((unint64_t *)&unk_101661150, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
  uint64_t result = sub_100E95A10(&qword_10165E810, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeRecord()
{
  uint64_t result = qword_1016611E8;
  if (!qword_1016611E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100E94794(uint64_t a1)
{
  uint64_t result = sub_100E95A10((unint64_t *)&unk_101661160, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100E947EC()
{
  unint64_t result = qword_101661170;
  if (!qword_101661170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661170);
  }
  return result;
}

unint64_t sub_100E94840()
{
  unint64_t result = qword_10163AE60;
  if (!qword_10163AE60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10163AE60);
  }
  return result;
}

unint64_t sub_100E94880()
{
  unint64_t result = qword_101661180;
  if (!qword_101661180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661180);
  }
  return result;
}

uint64_t sub_100E948D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100E94938(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for LostModeRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    char *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E94A60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.CodingKeys()
{
  return &type metadata for LostModeRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for LostModeRecord.LostModeRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100E94B64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.LostModeRecordConversionError()
{
  return &type metadata for LostModeRecord.LostModeRecordConversionError;
}

uint64_t *sub_100E94B9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    char v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *char v16 = *v17;
    v16[1] = v18;
    id v19 = (uint64_t *)((char *)a1 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *id v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100E94CF8(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100E94DD0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v13);
  char v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14);
  id v19 = (uint64_t *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100E94EDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  char v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *char v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  id v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  *id v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100E95028(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_100E950FC(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  id v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *id v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)&a2[v23];
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100E95210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100E95224);
}

uint64_t sub_100E95224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100E952F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100E9530C);
}

uint64_t sub_100E9530C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t sub_100E953D0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100E95478()
{
  return sub_100E95A10(&qword_101661230, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
}

unint64_t sub_100E954C4()
{
  unint64_t result = qword_101661238;
  if (!qword_101661238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661238);
  }
  return result;
}

unint64_t sub_100E9551C()
{
  unint64_t result = qword_101661240;
  if (!qword_101661240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661240);
  }
  return result;
}

unint64_t sub_100E95574()
{
  unint64_t result = qword_101661248;
  if (!qword_101661248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661248);
  }
  return result;
}

unint64_t sub_100E955CC()
{
  unint64_t result = qword_101661250;
  if (!qword_101661250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101661250);
  }
  return result;
}

uint64_t sub_100E95620(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = (int *)type metadata accessor for LostModeRecord();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0 || (static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  uint64_t v9 = v8[1];
  if (!v7)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v9) {
    return 0;
  }
  BOOL v10 = *v6 == *v8 && v7 == v9;
  if (v10 || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
LABEL_13:
    uint64_t v13 = v4[8];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = *(void *)(a1 + v13 + 8);
    uint64_t v16 = (void *)(a2 + v13);
    uint64_t v17 = v16[1];
    if (v15)
    {
      if (!v17) {
        return 0;
      }
      if (*v14 != *v16 || v15 != v17)
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v19 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    uint64_t v20 = v4[9];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = *(void *)(a1 + v20 + 8);
    uint64_t v23 = (void *)(a2 + v20);
    uint64_t v24 = v23[1];
    if (v22)
    {
      if (v24 && (*v21 == *v23 && v22 == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v24)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100E9577C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100E95A10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100E95A58()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EDA8);
  sub_100010324(v0, (uint64_t)qword_10170EDA8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100E95ADC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EDC0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EDC0);
  if (qword_101637138 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EDA8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100E95BA4()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return _swift_task_switch(sub_100E95BEC, v0, 0);
}

uint64_t sub_100E95BEC()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v7 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult<A>(_:);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = sub_10000588C(&qword_101669360);
  *uint64_t v4 = v0;
  v4[1] = sub_100E95D04;
  return ((uint64_t (*)(void *, void *, uint64_t, uint64_t))v7)(v0 + 2, &unk_101661468, v3, v5);
}

uint64_t sub_100E95D04()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_100E95E78;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100E95E60;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100E95E60()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100E95E78()
{
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0, 0xF000000000000000);
}

uint64_t sub_100E95E94(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return _swift_task_switch(sub_100E95EB0, a2, 0);
}

uint64_t sub_100E95EB0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v1 + 176);
  v0[5] = v2;
  unint64_t v3 = *(void *)(v1 + 184);
  v0[6] = v3;
  sub_100037A38(v2, v3);
  return _swift_task_switch(sub_100E95F28, 0, 0);
}

uint64_t sub_100E95F28()
{
  unint64_t v1 = v0[6];
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100E96020;
    uint64_t v3 = v0[4];
    v2[5] = v3;
    return _swift_task_switch(sub_100E98160, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)v0[3];
    *uint64_t v4 = v0[5];
    v4[1] = v1;
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100E96020(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100E9617C;
  }
  else
  {
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a1;
    uint64_t v7 = sub_100E96154;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100E96154()
{
  *(int8x16_t *)*(void *)(v0 + 24) = vextq_s8(*(int8x16_t *)(v0 + 72), *(int8x16_t *)(v0 + 72), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100E9617C()
{
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDC0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get topic token %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  *(_OWORD *)v0[3] = xmmword_101347BB0;
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100E96394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = 0xD000000000000016;
  *(void *)(v2 + 120) = 0x800000010137FF00;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(void *)(v2 + 160) = 0xF000000000000000;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v2 + 168) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(_OWORD *)(v2 + 176) = xmmword_101347BB0;
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EDC0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    BOOL v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "init(apnsManager:) called", v10, 2u);
    swift_slowDealloc();
  }

  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = a2;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_100E96550()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return _swift_task_switch(sub_100E96598, v0, 0);
}

uint64_t sub_100E96598()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v1 + 136);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 144);
    uint64_t v4 = qword_101637140;
    swift_unknownObjectRetain_n();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EDC0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "APNSManager exists already. No need to create one", v8, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
    v0[8] = v2;
    v0[9] = v3;
    uint64_t v10 = v0[4];
    uint64_t v11 = v0[5];
    uint64_t ObjectType = swift_getObjectType();
    v0[10] = ObjectType;
    uint64_t v13 = swift_allocObject();
    v0[11] = v13;
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = v11;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[12] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100E96B20;
    return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_101661430, v13, ObjectType, v3);
  }
  else
  {
    type metadata accessor for APNSManager();
    os_log_type_t v9 = (void *)swift_task_alloc();
    v0[6] = v9;
    *os_log_type_t v9 = v0;
    v9[1] = sub_100E9683C;
    return APNSManager.__allocating_init(environmentName:delegatePort:)(0x69746375646F7270, 0xEA00000000006E6FLL, 0xD000000000000021, 0x80000001014192C0);
  }
}

uint64_t sub_100E9683C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E96954, v2, 0);
}

uint64_t sub_100E96954()
{
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDC0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "APNSManager created", v4, 2u);
    swift_slowDealloc();
  }

  v0[8] = v0[7];
  v0[9] = &protocol witness table for APNSManager;
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t ObjectType = swift_getObjectType();
  v0[10] = ObjectType;
  uint64_t v8 = swift_allocObject();
  v0[11] = v8;
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v6;
  swift_unknownObjectRetain();
  swift_retain();
  os_log_type_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *os_log_type_t v9 = v0;
  v9[1] = sub_100E96B20;
  return dispatch thunk of APNSConnector.setDidReceive(block:)(&unk_101661430, v8, ObjectType, &protocol witness table for APNSManager);
}

uint64_t sub_100E96B20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100E96C70, v1, 0);
}

uint64_t sub_100E96C70()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_allocObject();
  v0[13] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E96D64;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return dispatch thunk of APNSConnector.setDidReceivePublicToken(block:)(&unk_101661440, v3, v5, v6);
}

uint64_t sub_100E96D64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100E96EB4, v1, 0);
}

uint64_t sub_100E96EB4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_allocObject();
  v0[15] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100E96FA8;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return dispatch thunk of APNSConnector.setDidReceiveTokenForTopic(block:)(&unk_101661450, v3, v5, v6);
}

uint64_t sub_100E96FA8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100E970F8, v1, 0);
}

uint64_t sub_100E970F8()
{
  uint64_t v10 = v0;
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDC0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    v0[3] = sub_1008FA0F0(0xD000000000000023, 0x80000001013EEAC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Setting push topic: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_unknownObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100E97324;
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  return dispatch thunk of APNSConnector.set(enabledTopics:)(&off_1015A1F28, v6, v7);
}

uint64_t sub_100E97324()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100E97450, v1, 0);
}

uint64_t sub_100E97450()
{
  *(_OWORD *)(*(void *)(v0 + 32) + 136) = *(_OWORD *)(v0 + 64);
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E974BC(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for APNSManager.IncomingMessage();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100E9757C, 0, 0);
}

uint64_t sub_100E9757C()
{
  char v19 = v0;
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 136446210;
    sub_100E9C8E4(&qword_101661458, 255, (void (*)(uint64_t))&type metadata accessor for APNSManager.IncomingMessage);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Did receive push: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[7], v0[5]);
  }

  uint64_t v15 = (void *)swift_task_alloc();
  v0[8] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100E9781C;
  uint64_t v16 = v0[3];
  return sub_100E98CE4(v16);
}

uint64_t sub_100E9781C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100E9792C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return _swift_task_switch(sub_100E97950, 0, 0);
}

uint64_t sub_100E97950()
{
  uint64_t v15 = v0;
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EDC0);
  sub_1000361E0(v1, v2);
  sub_1000361E0(v1, v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[3];
  unint64_t v7 = v0[4];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v10 = Data.hexString.getter();
    v0[2] = sub_1008FA0F0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v7);
    sub_10001CFB8(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Did receive APS public token: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v0[3], v0[4]);
    sub_10001CFB8(v8, v7);
  }

  uint64_t v12 = v0[5];
  return _swift_task_switch(sub_100E97B8C, v12, 0);
}

uint64_t sub_100E97B8C()
{
  unint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v5 = *(void *)(v2 + 152);
  unint64_t v4 = *(void *)(v2 + 160);
  *(void *)(v2 + 152) = v3;
  *(void *)(v2 + 160) = v1;
  sub_1000361E0(v3, v1);
  sub_100037A24(v5, v4);
  BOOL v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100E97C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a4;
  v7[8] = a7;
  v7[5] = a2;
  v7[6] = a3;
  void v7[4] = a1;
  return _swift_task_switch(sub_100E97C2C, 0, 0);
}

uint64_t sub_100E97C2C()
{
  uint64_t v23 = v0;
  if (v0[6] == 0xD000000000000023 && v0[7] == 0x80000001013EEAC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_101637140 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[4];
    unint64_t v1 = v0[5];
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EDC0);
    sub_1000361E0(v2, v1);
    sub_1000361E0(v2, v1);
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = v0[4];
    unint64_t v7 = v0[5];
    if (v6)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v10 = Data.hexString.getter();
      v0[2] = sub_1008FA0F0(v10, v11, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v8, v7);
      sub_10001CFB8(v8, v7);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Did receive APS topic token: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[4], v0[5]);
      sub_10001CFB8(v8, v7);
    }

    uint64_t v12 = v0[8];
    return _swift_task_switch(sub_100E9805C, v12, 0);
  }
  else
  {
    if (qword_101637140 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EDC0);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = v0[7];
    if (v16)
    {
      uint64_t v18 = v0[6];
      char v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)char v19 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = sub_1008FA0F0(v18, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ignoring token for topic %s.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100E9805C()
{
  unint64_t v1 = (void *)v0[8];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  uint64_t v4 = v1[22];
  unint64_t v5 = v1[23];
  v1[22] = v2;
  v1[23] = v3;
  sub_1000361E0(v2, v3);
  sub_1000361E0(v2, v3);
  sub_100037A24(v4, v5);
  if (v1[16])
  {
    uint64_t v6 = v0[4];
    v0[2] = v6;
    unint64_t v7 = v0[5];
    v0[3] = v7;
    swift_retain();
    OnceCheckedContinuation.resume(returning:)();
    swift_release();
    uint64_t v8 = v6;
    unint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = v0[4];
    unint64_t v9 = v0[5];
  }
  sub_10001CFB8(v8, v9);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100E98140()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_100E98160, v0, 0);
}

uint64_t sub_100E98160()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + 136);
  v0[6] = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 144);
    uint64_t v4 = self;
    swift_unknownObjectRetain();
    id v5 = [v4 mainBundle];
    id v6 = [v5 bundleIdentifier];

    if (v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v8;

      if (qword_101637140 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170EDC0);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446210;
        v0[4] = sub_1008FA0F0(0xD000000000000023, 0x80000001013EEAC0, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetch APS topic token: %{public}s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v13 = v0[5];
      uint64_t v14 = static Duration.seconds(_:)();
      uint64_t v16 = v15;
      unint64_t v17 = (void *)swift_allocObject();
      v0[7] = v17;
      v17[2] = v13;
      v17[3] = v2;
      v17[4] = v3;
      v17[5] = v7;
      v17[6] = v27;
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v18 = (void *)swift_task_alloc();
      v0[8] = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_100E985C4;
      return withTimeout<A>(_:block:)(v0 + 2, v14, v16, &unk_101661410, v17, &type metadata for Data);
    }
    if (qword_101637140 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170EDC0);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cannot read bundle identifier to fetch token", v23, 2u);
      swift_slowDealloc();
    }

    sub_100E9C3DC();
    swift_allocError();
    *uint64_t v24 = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100E9C3DC();
    swift_allocError();
    *char v19 = 0;
    swift_willThrow();
  }
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100E985C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_100E98754;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_release();
    uint64_t v4 = sub_100E986EC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100E986EC()
{
  swift_unknownObjectRelease();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_100E98754()
{
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E987C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return _swift_task_switch(sub_100E987E8, 0, 0);
}

uint64_t sub_100E987E8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v6 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v6;
  *(void *)(v2 + 48) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100E988F4;
  uint64_t v4 = *(void *)(v0 + 16);
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v4, 0x5350416863746566, 0xEF29286E656B6F54, sub_100E9C54C, v2, &type metadata for Data);
}

uint64_t sub_100E988F4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100E98A30, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100E98A30()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100E98A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = a2;
  v16[5] = a1;
  v16[6] = a3;
  v16[7] = a4;
  v16[8] = a5;
  v16[9] = a6;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1008F5E44((uint64_t)v14, (uint64_t)&unk_101661420, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_100E98BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  return _swift_task_switch(sub_100E98C08, a4, 0);
}

uint64_t sub_100E98C08()
{
  *(void *)(v0[2] + 128) = v0[3];
  swift_retain();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001E0274;
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[5];
  return dispatch thunk of APNSConnector.requestToken(for:identifier:)(0xD000000000000023, 0x80000001013EEAC0, v3, v4, ObjectType, v5);
}

uint64_t sub_100E98CE4(uint64_t a1)
{
  v2[68] = v1;
  v2[67] = a1;
  sub_10000588C(&qword_101638CF0);
  v2[69] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[70] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[71] = v4;
  v2[72] = *(void *)(v4 + 64);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for APNSManager.IncomingMessage();
  v2[75] = v5;
  v2[76] = *(void *)(v5 - 8);
  v2[77] = swift_task_alloc();
  return _swift_task_switch(sub_100E98E80, v1, 0);
}

uint64_t sub_100E98E80()
{
  uint64_t v67 = v0;
  if (APNSManager.IncomingMessage.topic.getter() == 0xD000000000000023 && v1 == 0x80000001013EEAC0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
  }
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v3 = (id *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 616);
  uint64_t v5 = *(void *)(v0 + 608);
  uint64_t v6 = *(void *)(v0 + 600);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v0 + 624) = sub_100010324(v8, (uint64_t)qword_10170EDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 616);
  uint64_t v13 = *(void *)(v0 + 608);
  if (v11)
  {
    uint64_t v65 = *(void *)(v0 + 600);
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = APNSManager.IncomingMessage.topic.getter();
    *(void *)(v0 + 528) = sub_1008FA0F0(v15, v16, &v66);
    uint64_t v3 = (id *)(v0 + 480);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v65);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received an APNS for the topic: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, void))(v13 + 8))(v12, *(void *)(v0 + 600));
  }
  unint64_t v17 = self;
  APNSManager.IncomingMessage.userInfo.getter();
  sub_10000588C(&qword_101651CF0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *uint64_t v3 = 0;
  id v19 = [v17 dataWithJSONObject:isa options:0 error:v3];

  id v20 = *v3;
  if (!v19)
  {
    uint64_t v24 = v20;
    uint64_t v25 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      *(void *)(v0 + 472) = v25;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v29 = String.init<A>(describing:)();
      *(void *)(v0 + 464) = sub_1008FA0F0(v29, v30, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to decode APS message due to %{public}s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_15;
  }
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  *(void *)(v0 + 632) = v21;
  *(void *)(v0 + 640) = v23;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100E9C258();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v33 = *(void *)(v0 + 568);
  uint64_t v34 = *(void *)(v0 + 560);
  uint64_t v35 = *(void *)(v0 + 552);
  swift_release();
  *(_DWORD *)(v0 + 287) = *(_DWORD *)(v0 + 327);
  long long v36 = *(_OWORD *)(v0 + 312);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 272) = v36;
  uint64_t v38 = *(void *)(v0 + 264);
  unint64_t v37 = *(void *)(v0 + 272);
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  sub_100E8F31C(v0 + 256);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v35, 1, v34) == 1)
  {
    sub_100270E18(*(void *)(v0 + 552));
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)id v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 456) = sub_1008FA0F0(v38, v37, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100E8F31C(v0 + 256);
      sub_100E8F31C(v0 + 256);
      sub_100E8F31C(v0 + 256);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Invalid share ID received from the APNS message: %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8(v21, v23);
    }
    else
    {
      sub_10001CFB8(v21, v23);
      sub_100E8F31C(v0 + 256);
      sub_100E8F31C(v0 + 256);
    }

    goto LABEL_15;
  }
  uint64_t v42 = *(void *)(v0 + 592);
  uint64_t v43 = *(void *)(v0 + 568);
  uint64_t v44 = *(void *)(v0 + 560);
  uint64_t v45 = *(void *)(v0 + 552);
  id v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
  *(void *)(v0 + 648) = v46;
  *(void *)(v0 + 656) = (v43 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v46(v42, v45, v44);
  char v47 = *(unsigned char *)(v0 + 289);
  sub_100E9C2AC(v0 + 280, v0 + 440);
  *(unsigned char *)(v0 + 291) = *(unsigned char *)(v0 + 290);
  swift_bridgeObjectRetain();
  id v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v48, v49))
  {
    sub_100E8F31C(v0 + 256);
    sub_100E8F31C(v0 + 256);

    if (v47) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
  uint64_t v50 = swift_slowAlloc();
  uint64_t v66 = swift_slowAlloc();
  *(_DWORD *)uint64_t v50 = 141558275;
  *(void *)(v0 + 512) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v50 + 12) = 2081;
  swift_bridgeObjectRetain();
  uint64_t v51 = sub_10114029C();
  unint64_t v53 = v52;
  sub_100E8F31C(v0 + 256);
  *(void *)(v0 + 520) = sub_1008FA0F0(v51, v53, &v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100E8F31C(v0 + 256);
  sub_100E8F31C(v0 + 256);
  _os_log_impl((void *)&_mh_execute_header, v48, v49, "APS message: %{private,mask.hash}s.", (uint8_t *)v50, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if ((v47 & 1) == 0)
  {
LABEL_30:
    sub_100E9C2AC(v0 + 440, v0 + 424);
    if ((*(unsigned char *)(v0 + 432) & 1) == 0)
    {
      *(void *)(v0 + 696) = *(void *)(v0 + 424);
      if (qword_1016375E8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v54 = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
        sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
        uint64_t v57 = &dword_1016390D8;
        uint64_t v58 = dword_1016390D8;
        uint64_t v59 = (void *)swift_task_alloc();
        *(void *)(v0 + 704) = v59;
        void *v59 = v0;
        uint64_t v60 = sub_100E9A8D8;
LABEL_40:
        v59[1] = v60;
        uint64_t v31 = (uint64_t (*)(void))((char *)v57 + v58);
        return v31();
      }
      goto LABEL_45;
    }
    int v61 = *(unsigned __int8 *)(v0 + 291);
    if (v61 != 2 && (v61 & 1) == 0)
    {
      uint64_t v54 = (uint64_t)sub_100E9B9F8;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      return _swift_task_switch(v54, v55, v56);
    }
    uint64_t v62 = *(void *)(v0 + 592);
    uint64_t v63 = *(void *)(v0 + 568);
    uint64_t v64 = *(void *)(v0 + 560);
    sub_10001CFB8(*(void *)(v0 + 632), *(void *)(v0 + 640));
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
LABEL_24:
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v54 = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 176);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
    sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v57 = &dword_1016392E8;
    uint64_t v58 = dword_1016392E8;
    uint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 664) = v59;
    void *v59 = v0;
    uint64_t v60 = sub_100E99A78;
    goto LABEL_40;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return _swift_task_switch(v54, v55, v56);
}

uint64_t sub_100E99A78(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544);
  *(void *)(*(void *)v1 + 672) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E99BBC, v2, 0);
}

uint64_t sub_100E99BBC()
{
  uint64_t v1 = *(void *)(v0 + 672);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 672);
    swift_retain();
    uint64_t v3 = (uint64_t)sub_100E99E94;
    uint64_t v4 = v2;
    goto LABEL_3;
  }
  sub_100E9C2AC(v0 + 440, v0 + 424);
  if (*(unsigned char *)(v0 + 432))
  {
    int v6 = *(unsigned __int8 *)(v0 + 291);
    if (v6 != 2 && (v6 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)sub_100E9B9F8;
      uint64_t v4 = 0;
LABEL_3:
      uint64_t v5 = 0;
      return _swift_task_switch(v3, v4, v5);
    }
    uint64_t v8 = *(void *)(v0 + 592);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 560);
    sub_10001CFB8(*(void *)(v0 + 632), *(void *)(v0 + 640));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    *(void *)(v0 + 696) = *(void *)(v0 + 424);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v3 = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
    if (!*(void *)(v0 + 80))
    {
      __break(1u);
      return _swift_task_switch(v3, v4, v5);
    }
    sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v13 = dword_1016390D8;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 704) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100E9A8D8;
    return ((uint64_t (__cdecl *)())((char *)&dword_1016390D8 + v13))();
  }
}

uint64_t sub_100E99E94()
{
  uint64_t v1 = v0[84];
  v0[51] = 0xD000000000000013;
  v0[52] = 0x80000001013F80A0;
  uint64_t v2 = async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[85] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100E99FD0;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
                                                                                + v2))(v0 + 51, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_100E99FD0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 688) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 672);
    uint64_t v4 = sub_100E9A3FC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 544);
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t v4 = sub_100E9A168;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100E9A168()
{
  swift_release();
  sub_100E9C2AC(v0 + 440, v0 + 424);
  if (*(unsigned char *)(v0 + 432))
  {
    int v1 = *(unsigned __int8 *)(v0 + 291);
    if (v1 == 2 || (v1 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0 + 592);
      uint64_t v4 = *(void *)(v0 + 568);
      uint64_t v5 = *(void *)(v0 + 560);
      sub_10001CFB8(*(void *)(v0 + 632), *(void *)(v0 + 640));
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v6 = *(uint64_t (**)(void))(v0 + 8);
      return v6();
    }
    uint64_t v8 = (uint64_t)sub_100E9B9F8;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    return _swift_task_switch(v8, v9, v10);
  }
  *(void *)(v0 + 696) = *(void *)(v0 + 424);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    __break(1u);
    return _swift_task_switch(v8, v9, v10);
  }
  sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
  sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v11 = dword_1016390D8;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100E9A8D8;
  return ((uint64_t (__cdecl *)())((char *)&dword_1016390D8 + v11))();
}

uint64_t sub_100E9A3FC()
{
  uint64_t v1 = *(void *)(v0 + 544);
  return _swift_task_switch(sub_100E9A488, v1, 0);
}

uint64_t sub_100E9A488()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0 + 424;
  uint64_t v2 = v0 + 440;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v1 = v0 + 424;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    *(void *)(v0 + 504) = sub_1008FA0F0(v6, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on publishing beacons when requested through APNS push message: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v0 + 440;
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100E9C2AC(v2, v1);
  if (*(unsigned char *)(v0 + 432))
  {
    int v8 = *(unsigned __int8 *)(v0 + 291);
    if (v8 != 2 && (v8 & 1) == 0)
    {
      uint64_t v9 = (uint64_t)sub_100E9B9F8;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      return _swift_task_switch(v9, v10, v11);
    }
    uint64_t v15 = *(void *)(v0 + 592);
    uint64_t v16 = *(void *)(v0 + 568);
    uint64_t v17 = *(void *)(v0 + 560);
    sub_10001CFB8(*(void *)(v0 + 632), *(void *)(v0 + 640));
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    *(void *)(v0 + 696) = *(void *)(v0 + 424);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v9 = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
    if (!*(void *)(v0 + 80))
    {
      __break(1u);
      return _swift_task_switch(v9, v10, v11);
    }
    sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v12 = dword_1016390D8;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 704) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100E9A8D8;
    return ((uint64_t (__cdecl *)())((char *)&dword_1016390D8 + v12))();
  }
}

uint64_t sub_100E9A8D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544);
  *(void *)(*(void *)v1 + 712) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E9AA1C, v2, 0);
}

uint64_t sub_100E9AA1C()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0 + 96;
  if (*(void *)(v0 + 712))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 16);
    if (*(void *)(v0 + 40))
    {
      sub_10001CEB0((long long *)(v0 + 16), v0 + 216);
      sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
      uint64_t v3 = dword_101639228;
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 720) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_100E9ADB8;
      return ((uint64_t (__cdecl *)())((char *)&dword_101639228 + v3))();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    unint64_t v5 = *(void *)(v0 + 640);
    uint64_t v6 = *(void *)(v0 + 632);
    uint64_t v7 = *(void *)(v0 + 592);
    uint64_t v8 = *(void *)(v0 + 568);
    uint64_t v9 = *(void *)(v0 + 560);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = 0xD000000000000010;
    v11[1] = 0x80000001013F23D0;
    swift_willThrow();
    sub_10001CFB8(v6, v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v0 + 472) = v10;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v15 = String.init<A>(describing:)();
      *(void *)(v0 + 464) = sub_1008FA0F0(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to decode APS message due to %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  return result;
}

uint64_t sub_100E9ADB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544);
  *(void *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100E9AEFC, v2, 0);
}

uint64_t sub_100E9AEFC()
{
  uint64_t v18 = v0;
  uint64_t v1 = (uint64_t)(v0 + 27);
  if (v0[91])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[89];
    return _swift_task_switch(sub_100E9B22C, v2, 0);
  }
  else
  {
    unint64_t v3 = v0[80];
    uint64_t v4 = v0[79];
    uint64_t v5 = v0[74];
    uint64_t v6 = v0[71];
    uint64_t v7 = v0[70];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v8 = swift_allocError();
    *uint64_t v9 = 0xD000000000000014;
    v9[1] = 0x80000001013F1890;
    swift_willThrow();
    swift_release();
    sub_10001CFB8(v4, v3);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      v0[59] = v8;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v13 = String.init<A>(describing:)();
      v0[58] = sub_1008FA0F0(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to decode APS message due to %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_100E9B22C()
{
  *(void *)(v0 + 736) = *(void *)(*(void *)(v0 + 712) + 136);
  swift_retain();
  return _swift_task_switch(sub_100E9B2CC, 0, 0);
}

uint64_t sub_100E9B2CC()
{
  uint64_t v1 = v0[92];
  uint64_t v2 = v0[89];
  unint64_t v3 = (void *)swift_task_alloc();
  v0[93] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[94] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100E9B40C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 62, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100E9B40C()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[95] = v1[62];
  unint64_t v3 = (void *)swift_task_alloc();
  v1[96] = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_100E9B5E8;
  uint64_t v4 = v1[87];
  uint64_t v5 = v1[74];
  return sub_1012E181C(v5, v4);
}

uint64_t sub_100E9B5E8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 544);
    swift_release();
    uint64_t v4 = sub_100E9BC58;
    uint64_t v5 = v3;
  }
  else
  {
    swift_release();
    uint64_t v5 = *(void *)(v2 + 728);
    uint64_t v4 = sub_100E9B77C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100E9B77C()
{
  uint64_t v1 = *(void *)(v0 + 544);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  return _swift_task_switch(sub_100E9B894, v1, 0);
}

uint64_t sub_100E9B894()
{
  swift_release();
  swift_release();
  int v1 = *(unsigned __int8 *)(v0 + 291);
  if (v1 != 2 && (v1 & 1) == 0)
  {
    return _swift_task_switch(sub_100E9B9F8, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 592);
    uint64_t v4 = *(void *)(v0 + 568);
    uint64_t v5 = *(void *)(v0 + 560);
    sub_10001CFB8(*(void *)(v0 + 632), *(void *)(v0 + 640));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100E9B9F8()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  int v1 = (void (*)(unint64_t, uint64_t, uint64_t))v0[81];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[71];
  uint64_t v4 = v0[70];
  uint64_t v5 = v0[68];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v2, v0[74], v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v1(v7 + v6, v2, v4);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100E9BB70, v5, 0);
}

uint64_t sub_100E9BB70()
{
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  sub_10001CFB8(v0[79], v0[80]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100E9BC58()
{
  uint64_t v15 = v0;
  unint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[71];
  uint64_t v5 = v0[70];
  swift_release();
  swift_release();
  sub_10001CFB8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = v0[97];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    v0[59] = v6;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v10 = String.init<A>(describing:)();
    v0[58] = sub_1008FA0F0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to decode APS message due to %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100E9BEDC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  sub_100037A24(*(void *)(v0 + 152), *(void *)(v0 + 160));
  swift_release();
  sub_100037A24(*(void *)(v0 + 176), *(void *)(v0 + 184));
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for APSNotificationService()
{
  return self;
}

uint64_t sub_100E9BF60()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100E9BF80, v0, 0);
}

uint64_t sub_100E9BF80()
{
  if (qword_101637140 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EDC0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "inside startup() function", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100E9C10C;
  uint64_t v6 = *(void **)(v0 + 16);
  v5[4] = v6;
  v5[5] = *v6;
  return _swift_task_switch(sub_100E96598, v6, 0);
}

uint64_t sub_100E9C10C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}