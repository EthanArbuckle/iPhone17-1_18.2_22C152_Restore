uint64_t sub_100D4FB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4FC60, v1, 0);
}

uint64_t sub_100D4FC60()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 680);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 608) + 48))(v1, 1, *(void *)(v0 + 600)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 744) + 8))(*(void *)(v0 + 752), *(void *)(v0 + 736));
    v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Device event: observationService.stream() terminated.", v4, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 672);
    uint64_t v8 = *(void *)(v0 + 664);
    sub_100DB2DE8(v1, v7, type metadata accessor for DeviceEvent);
    sub_100DB2E50(v7, v8, type metadata accessor for DeviceEvent);
    v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 664);
    if (v11)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446723;
      *(void *)(v13 + 4) = sub_1008FA0F0(0xD000000000000015, 0x80000001014180F0, &v18);
      *(_WORD *)(v13 + 12) = 2160;
      *(void *)(v13 + 14) = 1752392040;
      *(_WORD *)(v13 + 22) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v13 + 24) = sub_1008FA0F0(v14, v15, &v18);
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v12, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(*(void *)(v0 + 664), type metadata accessor for DeviceEvent);
    }

    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 216, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 240))
    {
      sub_10001CEB0((long long *)(v0 + 216), v0 + 176);
      sub_10001CD44((void *)(v0 + 176), *(void *)(v0 + 200));
      v17 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 800) = v16;
      void *v16 = v0;
      v16[1] = sub_100D5014C;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100D5014C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464);
  *(void *)(*(void *)v1 + 808) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D50264, v2, 0);
}

uint64_t sub_100D50264()
{
  uint64_t v1 = (uint64_t)(v0 + 22);
  if (v0[101])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[101];
    return _swift_task_switch(sub_100D505F4, v2, 0);
  }
  else
  {
    uint64_t v3 = v0[94];
    uint64_t v4 = v0[93];
    uint64_t v5 = v0[92];
    uint64_t v6 = v0[84];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_10137D890;
    *(unsigned char *)(v7 + 16) = 3;
    swift_willThrow();
    sub_100D6BBBC(v6, type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      BOOL v11 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 138543362;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      v0[56] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to register for device events: %{public}@.", v10, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100D505F4()
{
  *(void *)(v0 + 816) = *(void *)(*(void *)(v0 + 808) + 136);
  swift_retain();
  return _swift_task_switch(sub_100D50668, 0, 0);
}

uint64_t sub_100D50668()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[101];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[103] = v3;
  v3[2] = v1;
  v3[3] = sub_1003CD95C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[104] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  void *v4 = v0;
  v4[1] = sub_100D50784;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 55, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1003CF0E0, v3, v5);
}

uint64_t sub_100D50784()
{
  uint64_t v1 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[105] = v1[55];
  uint64_t v2 = v1[101];
  return _swift_task_switch(sub_100D508E0, v2, 0);
}

uint64_t sub_100D508E0()
{
  uint64_t v1 = *(void *)(v0 + 464);
  swift_release();
  return _swift_task_switch(sub_100D5094C, v1, 0);
}

uint64_t sub_100D5094C()
{
  uint64_t v46 = v0;
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100DB2E50(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), *(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 552);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  uint64_t v8 = *(void *)(v0 + 584);
  uint64_t v9 = *(void *)(v0 + 576);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 552);
  if (v7 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 552), &qword_10163B9F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v10, 1, 1, v9);
LABEL_7:
    uint64_t v15 = *(void *)(v0 + 568);
    v16 = &qword_101638CF0;
LABEL_8:
    sub_10001DAB4(v15, v16);
    sub_100DB2E50(*(void *)(v0 + 672), *(void *)(v0 + 640), type metadata accessor for DeviceEvent);
    v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 672);
    uint64_t v21 = *(void *)(v0 + 640);
    if (v19)
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558275;
      *(void *)(v22 + 4) = 1752392040;
      *(_WORD *)(v22 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v22 + 14) = sub_1008FA0F0(v23, v24, &v45);
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v21, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not determine self-beacon UUID to publish the device event,for beacon: %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100D6BBBC(v21, type metadata accessor for DeviceEvent);
    }
    sub_100D6BBBC(v20, type metadata accessor for DeviceEvent);
    uint64_t v25 = *(void *)(v0 + 784);
    uint64_t v26 = *(void *)(v0 + 464);
    v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v27;
    void *v27 = v0;
    v27[1] = sub_100D4FB50;
    uint64_t v28 = *(void *)(v0 + 736);
    uint64_t v29 = *(void *)(v0 + 680);
    uint64_t v30 = v26;
    uint64_t v31 = v25;
    return AsyncStream.Iterator.next(isolation:)(v29, v30, v31, v28);
  }
  uint64_t v12 = v11 + *(int *)(v3 + 20);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  *(void *)(v0 + 848) = v13;
  *(void *)(v0 + 856) = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v10, v12, v9);
  sub_100D6BBBC(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  *(void *)(v0 + 864) = v14;
  *(void *)(v0 + 872) = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v14(v10, 0, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) == 1) {
    goto LABEL_7;
  }
  uint64_t v32 = *(void *)(v0 + 672);
  uint64_t v33 = *(void *)(v0 + 600);
  uint64_t v34 = *(void *)(v0 + 536);
  uint64_t v35 = *(void *)(v0 + 528);
  uint64_t v36 = *(void *)(v0 + 520);
  (*(void (**)(void, void, void))(*(void *)(v0 + 584) + 32))(*(void *)(v0 + 592), *(void *)(v0 + 568), *(void *)(v0 + 576));
  sub_10001D074(v32 + *(int *)(v33 + 32), v36, &qword_10163CF20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
  {
    uint64_t v37 = *(void *)(v0 + 520);
    (*(void (**)(void, void))(*(void *)(v0 + 584) + 8))(*(void *)(v0 + 592), *(void *)(v0 + 576));
    v16 = &qword_10163CF20;
    uint64_t v15 = v37;
    goto LABEL_8;
  }
  uint64_t v38 = *(void *)(v0 + 672);
  uint64_t v39 = *(void *)(v0 + 600);
  uint64_t v40 = *(void *)(v0 + 512);
  sub_100DB2DE8(*(void *)(v0 + 520), *(void *)(v0 + 544), type metadata accessor for DeviceEvent.AttachmentInfo);
  uint64_t v41 = *(int *)(v39 + 36);
  *(_DWORD *)(v0 + 952) = v41;
  sub_100DB2E50(v38 + v41, v40, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v29 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 80))
  {
    __break(1u);
    return AsyncStream.Iterator.next(isolation:)(v29, v30, v31, v28);
  }
  sub_10001CEB0((long long *)(v0 + 56), v0 + 296);
  sub_10001CD44((void *)(v0 + 296), *(void *)(v0 + 320));
  v44 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
  v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v42;
  void *v42 = v0;
  v42[1] = sub_100D50F64;
  return v44();
}

uint64_t sub_100D50F64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464);
  *(void *)(*(void *)v1 + 888) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D5107C, v2, 0);
}

uint64_t sub_100D5107C()
{
  v63 = v0;
  uint64_t v1 = (uint64_t)(v0 + 37);
  if (v0[111])
  {
    uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[108];
    uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[106];
    uint64_t v4 = v0[74];
    uint64_t v5 = v0[72];
    uint64_t v6 = v0[70];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3(v6, v4, v5);
    v2(v6, 0, 1, v5);
    int v7 = (void *)swift_task_alloc();
    v0[112] = v7;
    *int v7 = v0;
    v7[1] = sub_100D51A58;
    uint64_t v8 = v0[70];
    uint64_t v9 = v0[64];
    uint64_t v10 = v0[59];
    return sub_101105688(v10, v9, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_1004AF24C();
  swift_allocError();
  *(_OWORD *)uint64_t v12 = xmmword_10137D880;
  *(unsigned char *)(v12 + 16) = 3;
  swift_willThrow();
  sub_100DB2E50(v0[84], v0[79], type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = v0[79];
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc();
    v56 = (void *)swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138543875;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[51] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v56 = v18;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v17 + 12) = 2160;
    v0[52] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v0[45] = dispatch thunk of CustomStringConvertible.description.getter();
    v0[46] = v19;
    v20._countAndFlagsBits = 47;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v0[54] = sub_1008FA0F0(v0[45], v0[46], v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v16, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100D6BBBC(v16, type metadata accessor for DeviceEvent);
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    sub_100DB2E50(v0[84], v0[81], type metadata accessor for DeviceEvent);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v0[84];
    uint64_t v39 = v0[81];
    if (v37)
    {
      uint64_t v60 = v0[74];
      uint64_t v61 = v0[84];
      uint64_t v40 = v0[72];
      uint64_t type = v0[68];
      uint64_t v59 = v0[73];
      uint64_t v57 = v0[64];
      uint64_t v41 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[47] = sub_1008FA0F0(v42, v43, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v39, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100D6BBBC(v57, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(type, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v40);
      uint64_t v34 = v61;
    }
    else
    {
      uint64_t v46 = v0[74];
      uint64_t v47 = v0[73];
      uint64_t v48 = v0[72];
      uint64_t v49 = v0[68];
      uint64_t v50 = v0[64];

      sub_100D6BBBC(v39, type metadata accessor for DeviceEvent);
      sub_100D6BBBC(v50, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v49, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      uint64_t v34 = v38;
    }
    goto LABEL_19;
  }
  uint64_t v22 = v0[84];
  uint64_t v23 = v0[82];
  uint64_t v24 = v0[76];
  uint64_t v25 = v0[58];
  type metadata accessor for Transaction();
  sub_100DB2E50(v22, v23, type metadata accessor for DeviceEvent);
  unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  sub_100DB2DE8(v23, v27 + v26, type metadata accessor for DeviceEvent);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  int v28 = *(unsigned __int8 *)(v22 + 9);
  if (v28 != 7 && v28 != 3 && v28 != 4)
  {
    uint64_t v29 = v0[84];
    uint64_t v30 = v0[74];
    uint64_t v31 = v0[73];
    uint64_t v32 = v0[72];
    uint64_t v33 = v0[68];
    sub_100D6BBBC(v0[64], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v33, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    uint64_t v34 = v29;
LABEL_19:
    sub_100D6BBBC(v34, type metadata accessor for DeviceEvent);
    uint64_t v51 = v0[98];
    uint64_t v52 = v0[58];
    v53 = (void *)swift_task_alloc();
    v0[99] = v53;
    void *v53 = v0;
    v53[1] = sub_100D4FB50;
    uint64_t v54 = v0[92];
    uint64_t v55 = v0[85];
    return AsyncStream.Iterator.next(isolation:)(v55, v52, v51, v54);
  }
  v44 = (void *)swift_task_alloc();
  v0[117] = v44;
  void *v44 = v0;
  v44[1] = sub_100D52FF4;
  uint64_t v45 = v0[58];
  v44[17] = v45;
  return _swift_task_switch(sub_100D54074, v45, 0);
}

uint64_t sub_100D51A58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 560);
  uint64_t v4 = *(void *)(v2 + 464);
  sub_10001DAB4(v3, &qword_101638CF0);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_100D53260;
  }
  else {
    uint64_t v5 = sub_100D51BC4;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100D51BC4()
{
  uint64_t v1 = *(void *)(v0 + 472);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 488) + 48))(v1, 1, *(void *)(v0 + 480)) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 672);
    uint64_t v3 = *(void *)(v0 + 592);
    uint64_t v4 = *(void *)(v0 + 584);
    uint64_t v5 = *(void *)(v0 + 576);
    uint64_t v6 = *(void *)(v0 + 544);
    sub_100D6BBBC(*(void *)(v0 + 512), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v6, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    sub_100D6BBBC(v2, type metadata accessor for DeviceEvent);
    sub_10001DAB4(v1, &qword_10163CBA0);
    uint64_t v7 = *(void *)(v0 + 784);
    uint64_t v8 = *(void *)(v0 + 464);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v9;
    void *v9 = v0;
    v9[1] = sub_100D4FB50;
    uint64_t v10 = *(void *)(v0 + 736);
    uint64_t v11 = *(void *)(v0 + 680);
    uint64_t v12 = v8;
    uint64_t v13 = v7;
    return AsyncStream.Iterator.next(isolation:)(v11, v12, v13, v10);
  }
  sub_10001D608(v1, *(void *)(v0 + 496), (uint64_t *)&unk_10164E870);
  uint64_t v11 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 160))
  {
    __break(1u);
    return AsyncStream.Iterator.next(isolation:)(v11, v12, v13, v10);
  }
  sub_10001CEB0((long long *)(v0 + 136), v0 + 256);
  sub_10001CD44((void *)(v0 + 256), *(void *)(v0 + 280));
  uint64_t v16 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
  os_log_type_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 912) = v14;
  *os_log_type_t v14 = v0;
  v14[1] = sub_100D51E20;
  return v16();
}

uint64_t sub_100D51E20(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464);
  *(void *)(*(void *)v1 + 920) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D51F38, v2, 0);
}

uint64_t sub_100D51F38()
{
  uint64_t v60 = v0;
  uint64_t v1 = v0 + 256;
  if (*(void *)(v0 + 920))
  {
    uint64_t v2 = *(void *)(v0 + 504);
    uint64_t v3 = *(void *)(v0 + 672) + *(int *)(v0 + 952);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = v3 + *(int *)(v2 + 20);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 928) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100D528FC;
    uint64_t v6 = *(void *)(v0 + 496);
    return sub_100E606FC(v6, v4);
  }
  uint64_t v8 = *(void *)(v0 + 496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_1004AF24C();
  swift_allocError();
  *(_OWORD *)uint64_t v9 = xmmword_10137D890;
  *(unsigned char *)(v9 + 16) = 3;
  swift_willThrow();
  sub_10001DAB4(v8, (uint64_t *)&unk_10164E870);
  sub_100DB2E50(*(void *)(v0 + 672), *(void *)(v0 + 632), type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 632);
  if (v12)
  {
    uint64_t v14 = swift_slowAlloc();
    v53 = (void *)swift_slowAlloc();
    v59[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138543875;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 408) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v53 = v15;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v14 + 12) = 2160;
    *(void *)(v0 + 416) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    *(void *)(v0 + 360) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 368) = v16;
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 432) = sub_1008FA0F0(*(void *)(v0 + 360), *(void *)(v0 + 368), v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v13, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100D6BBBC(v13, type metadata accessor for DeviceEvent);
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    sub_100DB2E50(*(void *)(v0 + 672), *(void *)(v0 + 648), type metadata accessor for DeviceEvent);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 672);
    uint64_t v36 = *(void *)(v0 + 648);
    if (v34)
    {
      uint64_t v57 = *(void *)(v0 + 592);
      uint64_t v58 = *(void *)(v0 + 672);
      uint64_t v37 = *(void *)(v0 + 576);
      uint64_t type = *(void *)(v0 + 544);
      uint64_t v56 = *(void *)(v0 + 584);
      uint64_t v54 = *(void *)(v0 + 512);
      uint64_t v38 = swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 141558275;
      *(void *)(v0 + 424) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 376) = sub_1008FA0F0(v39, v40, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v36, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100D6BBBC(v54, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(type, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v37);
      uint64_t v31 = v58;
    }
    else
    {
      uint64_t v43 = *(void *)(v0 + 592);
      uint64_t v44 = *(void *)(v0 + 584);
      uint64_t v45 = *(void *)(v0 + 576);
      uint64_t v46 = *(void *)(v0 + 544);
      uint64_t v47 = *(void *)(v0 + 512);

      sub_100D6BBBC(v36, type metadata accessor for DeviceEvent);
      sub_100D6BBBC(v47, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v46, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      uint64_t v31 = v35;
    }
    goto LABEL_19;
  }
  uint64_t v19 = *(void *)(v0 + 672);
  uint64_t v20 = *(void *)(v0 + 656);
  uint64_t v21 = *(void *)(v0 + 608);
  uint64_t v22 = *(void *)(v0 + 464);
  type metadata accessor for Transaction();
  sub_100DB2E50(v19, v20, type metadata accessor for DeviceEvent);
  unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  sub_100DB2DE8(v20, v24 + v23, type metadata accessor for DeviceEvent);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  int v25 = *(unsigned __int8 *)(v19 + 9);
  if (v25 != 7 && v25 != 3 && v25 != 4)
  {
    uint64_t v26 = *(void *)(v0 + 672);
    uint64_t v27 = *(void *)(v0 + 592);
    uint64_t v28 = *(void *)(v0 + 584);
    uint64_t v29 = *(void *)(v0 + 576);
    uint64_t v30 = *(void *)(v0 + 544);
    sub_100D6BBBC(*(void *)(v0 + 512), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v30, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    uint64_t v31 = v26;
LABEL_19:
    sub_100D6BBBC(v31, type metadata accessor for DeviceEvent);
    uint64_t v48 = *(void *)(v0 + 784);
    uint64_t v49 = *(void *)(v0 + 464);
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v50;
    *uint64_t v50 = v0;
    v50[1] = sub_100D4FB50;
    uint64_t v51 = *(void *)(v0 + 736);
    uint64_t v52 = *(void *)(v0 + 680);
    return AsyncStream.Iterator.next(isolation:)(v52, v49, v48, v51);
  }
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 936) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_100D52FF4;
  uint64_t v42 = *(void *)(v0 + 464);
  v41[17] = v42;
  return _swift_task_switch(sub_100D54074, v42, 0);
}

uint64_t sub_100D528FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D52A28, v1, 0);
}

uint64_t sub_100D52A28()
{
  uint64_t v42 = v0;
  sub_10001DAB4(v0[62], (uint64_t *)&unk_10164E870);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    sub_100DB2E50(v0[84], v0[81], type metadata accessor for DeviceEvent);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = v0[84];
    uint64_t v18 = v0[81];
    if (v16)
    {
      uint64_t v39 = v0[84];
      uint64_t v40 = v0[74];
      uint64_t v35 = v0[72];
      uint64_t v37 = v0[68];
      uint64_t v38 = v0[73];
      uint64_t v36 = v0[64];
      uint64_t v19 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[47] = sub_1008FA0F0(v20, v21, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v18, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100D6BBBC(v36, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v37, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v35);
      uint64_t v13 = v39;
    }
    else
    {
      uint64_t v24 = v0[74];
      uint64_t v25 = v0[73];
      uint64_t v26 = v0[72];
      uint64_t v27 = v0[68];
      uint64_t v28 = v0[64];

      sub_100D6BBBC(v18, type metadata accessor for DeviceEvent);
      sub_100D6BBBC(v28, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v27, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      uint64_t v13 = v17;
    }
LABEL_12:
    sub_100D6BBBC(v13, type metadata accessor for DeviceEvent);
    uint64_t v29 = v0[98];
    uint64_t v30 = v0[58];
    uint64_t v31 = (void *)swift_task_alloc();
    v0[99] = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_100D4FB50;
    uint64_t v32 = v0[92];
    uint64_t v33 = v0[85];
    return AsyncStream.Iterator.next(isolation:)(v33, v30, v29, v32);
  }
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[76];
  uint64_t v4 = v0[58];
  type metadata accessor for Transaction();
  sub_100DB2E50(v1, v2, type metadata accessor for DeviceEvent);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  sub_100DB2DE8(v2, v6 + v5, type metadata accessor for DeviceEvent);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  int v7 = *(unsigned __int8 *)(v1 + 9);
  if (v7 != 7 && v7 != 3 && v7 != 4)
  {
    uint64_t v8 = v0[84];
    uint64_t v9 = v0[74];
    uint64_t v10 = v0[73];
    uint64_t v11 = v0[72];
    uint64_t v12 = v0[68];
    sub_100D6BBBC(v0[64], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v12, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v13 = v8;
    goto LABEL_12;
  }
  uint64_t v22 = (void *)swift_task_alloc();
  v0[117] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100D52FF4;
  uint64_t v23 = v0[58];
  v22[17] = v23;
  return _swift_task_switch(sub_100D54074, v23, 0);
}

uint64_t sub_100D52FF4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 944) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 464);
  if (v0) {
    uint64_t v4 = sub_100D53B30;
  }
  else {
    uint64_t v4 = sub_100D53120;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D53120()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[74];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[68];
  sub_100D6BBBC(v0[64], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_100D6BBBC(v5, type metadata accessor for DeviceEvent.AttachmentInfo);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100D6BBBC(v1, type metadata accessor for DeviceEvent);
  uint64_t v6 = v0[98];
  uint64_t v7 = v0[58];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[99] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D4FB50;
  uint64_t v9 = v0[92];
  uint64_t v10 = v0[85];
  return AsyncStream.Iterator.next(isolation:)(v10, v7, v6, v9);
}

uint64_t sub_100D53260()
{
  uint64_t v52 = v0;
  sub_100DB2E50(v0[84], v0[79], type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v43 = v0[79];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543875;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[51] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v45 = v4;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v3 + 12) = 2160;
    v0[52] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v0[45] = dispatch thunk of CustomStringConvertible.description.getter();
    v0[46] = v5;
    v6._countAndFlagsBits = 47;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v0[54] = sub_1008FA0F0(v0[45], v0[46], &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v43, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v3, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = v0[79];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100D6BBBC(v8, type metadata accessor for DeviceEvent);
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    sub_100DB2E50(v0[84], v0[81], type metadata accessor for DeviceEvent);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = v0[84];
    uint64_t v26 = v0[81];
    if (v24)
    {
      *(void *)uint64_t type = v0[84];
      uint64_t v50 = v0[74];
      uint64_t v44 = v0[72];
      uint64_t v47 = v0[68];
      uint64_t v48 = v0[73];
      uint64_t v46 = v0[64];
      uint64_t v27 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[47] = sub_1008FA0F0(v28, v29, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v26, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100D6BBBC(v46, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v47, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v44);
      uint64_t v21 = *(void *)type;
    }
    else
    {
      uint64_t v32 = v0[74];
      uint64_t v33 = v0[73];
      uint64_t v34 = v0[72];
      uint64_t v35 = v0[68];
      uint64_t v36 = v0[64];

      sub_100D6BBBC(v26, type metadata accessor for DeviceEvent);
      sub_100D6BBBC(v36, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100D6BBBC(v35, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      uint64_t v21 = v25;
    }
LABEL_15:
    sub_100D6BBBC(v21, type metadata accessor for DeviceEvent);
    uint64_t v37 = v0[98];
    uint64_t v38 = v0[58];
    uint64_t v39 = (void *)swift_task_alloc();
    v0[99] = v39;
    *uint64_t v39 = v0;
    v39[1] = sub_100D4FB50;
    uint64_t v40 = v0[92];
    uint64_t v41 = v0[85];
    return AsyncStream.Iterator.next(isolation:)(v41, v38, v37, v40);
  }
  uint64_t v9 = v0[84];
  uint64_t v10 = v0[82];
  uint64_t v11 = v0[76];
  uint64_t v12 = v0[58];
  type metadata accessor for Transaction();
  sub_100DB2E50(v9, v10, type metadata accessor for DeviceEvent);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  sub_100DB2DE8(v10, v14 + v13, type metadata accessor for DeviceEvent);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  int v15 = *(unsigned __int8 *)(v9 + 9);
  if (v15 != 7 && v15 != 3 && v15 != 4)
  {
    uint64_t v16 = v0[84];
    uint64_t v17 = v0[74];
    uint64_t v18 = v0[73];
    uint64_t v19 = v0[72];
    uint64_t v20 = v0[68];
    sub_100D6BBBC(v0[64], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v20, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    uint64_t v21 = v16;
    goto LABEL_15;
  }
  uint64_t v30 = (void *)swift_task_alloc();
  v0[117] = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_100D52FF4;
  uint64_t v31 = v0[58];
  v30[17] = v31;
  return _swift_task_switch(sub_100D54074, v31, 0);
}

uint64_t sub_100D53B30()
{
  uint64_t v30 = v0;
  sub_100DB2E50(v0[84], v0[78], type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v26 = v0[74];
    uint64_t v27 = v0[84];
    uint64_t v28 = v0[72];
    uint64_t v24 = v0[68];
    uint64_t v25 = v0[73];
    uint64_t v22 = v0[78];
    uint64_t v23 = v0[64];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543875;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[48] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v3 + 12) = 2160;
    v0[49] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[50] = sub_1008FA0F0(v6, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v22, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to publish the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v3, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_100D6BBBC(v23, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v24, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v28);
    uint64_t v8 = v27;
  }
  else
  {
    uint64_t v9 = v0[84];
    uint64_t v10 = v0[78];
    uint64_t v11 = v0[74];
    uint64_t v12 = v0[73];
    uint64_t v13 = v0[72];
    uint64_t v14 = v0[68];
    uint64_t v15 = v0[64];

    sub_100D6BBBC(v10, type metadata accessor for DeviceEvent);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100D6BBBC(v15, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100D6BBBC(v14, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v8 = v9;
  }
  sub_100D6BBBC(v8, type metadata accessor for DeviceEvent);
  uint64_t v16 = v0[98];
  uint64_t v17 = v0[58];
  uint64_t v18 = (void *)swift_task_alloc();
  v0[99] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D4FB50;
  uint64_t v19 = v0[92];
  uint64_t v20 = v0[85];
  return AsyncStream.Iterator.next(isolation:)(v20, v17, v16, v19);
}

uint64_t sub_100D53FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100D5469C(a2);
}

uint64_t sub_100D54054()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_100D54074, v0, 0);
}

uint64_t sub_100D54074()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016392E8 + dword_1016392E8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v2;
    void *v2 = v0;
    v2[1] = sub_100D541B0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D541B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D542C8, v2, 0);
}

uint64_t sub_100D542C8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 152);
    return _swift_task_switch(sub_100D543B8, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD00000000000001CLL;
    v3[1] = 0x80000001013F8080;
    swift_willThrow();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100D543B8()
{
  uint64_t v1 = v0[19];
  v0[15] = 0xD000000000000013;
  v0[16] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[20] = v2;
  void *v2 = v0;
  v2[1] = sub_100D544D0;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 15, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_100D544D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 152);
    uint64_t v4 = sub_100D5461C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_1000F3910;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D5461C()
{
  return _swift_task_switch(sub_100D54638, *(void *)(v0 + 136), 0);
}

uint64_t sub_100D54638()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D5469C(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = type metadata accessor for DeviceEvent(0);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DeviceEvent.Location(0);
  v2[39] = v4;
  v2[40] = *(void *)(v4 - 8);
  v2[41] = swift_task_alloc();
  sub_10000588C(&qword_10164E880);
  v2[42] = swift_task_alloc();
  return _swift_task_switch(sub_100D54858, v1, 0);
}

uint64_t sub_100D54858()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[27];
  if (*(unsigned char *)(v1 + 9) == 6)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10165E160);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Not updating existing location for the disappeared device event.", v5, 2u);
      swift_slowDealloc();
    }

LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  uint64_t v6 = v0[42];
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[40];
  sub_10001D074(v1 + *(int *)(v0[32] + 28), v6, &qword_10164E880);
  LODWORD(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  sub_10001DAB4(v6, &qword_10164E880);
  if (v7 != 1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[34];
    uint64_t v11 = v0[27];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10165E160);
    sub_100DB2E50(v11, v10, type metadata accessor for DeviceEvent);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[34];
    if (v15)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      type metadata accessor for BeaconIdentifier();
      type metadata accessor for UUID();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[26] = sub_1008FA0F0(v18, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v16, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not updating existing location for the device event for beacon: %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(v0[34], type metadata accessor for DeviceEvent);
    }

    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(v0[28] + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher);
  v0[43] = v9;
  return _swift_task_switch(sub_100D54CD8, v9, 0);
}

uint64_t sub_100D54CD8()
{
  sub_10001CD44((void *)(*(void *)(v0 + 344) + 112), *(void *)(*(void *)(v0 + 344) + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D54D78;
  return sub_100FC0D0C();
}

uint64_t sub_100D54D78(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[43];
    uint64_t v5 = sub_100D55430;
  }
  else
  {
    uint64_t v4 = v3[28];
    uint64_t v5 = sub_100D54E90;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100D54E90()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void **)(v0 + 360);
  if (v1)
  {
    uint64_t v35 = (long long *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 320);
    uint64_t v3 = *(void **)(v0 + 328);
    uint64_t v5 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 312);
    uint64_t v6 = *(int **)(v0 + 256);
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v34 = *(void *)(v0 + 232);
    uint64_t v8 = *(uint64_t **)(v0 + 216);
    [v1 coordinate];
    uint64_t v10 = v9;
    [v1 coordinate];
    uint64_t v12 = v11;
    [v1 horizontalAccuracy];
    uint64_t v14 = v13;
    id v15 = [v1 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    *uint64_t v3 = v10;
    v3[1] = v12;
    v3[2] = v14;
    uint64_t v16 = *v8;
    char v32 = *((unsigned char *)v8 + 9);
    char v33 = *((unsigned char *)v8 + 8);
    uint64_t v17 = v6[6];
    *(_DWORD *)(v0 + 408) = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5 + v17, (uint64_t)v8 + v17, v34);
    uint64_t v18 = v5 + v6[7];
    sub_100DB2E50((uint64_t)v3, v18, type metadata accessor for DeviceEvent.Location);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v18, 0, 1, v4);
    sub_10001D074((uint64_t)v8 + v6[8], v5 + v6[8], &qword_10163CF20);
    sub_100DB2E50((uint64_t)v8 + v6[9], v5 + v6[9], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    static Date.trustedNow.getter(v5 + v6[10]);
    *(void *)uint64_t v5 = v16;
    *(unsigned char *)(v5 + 8) = v33;
    *(unsigned char *)(v5 + 9) = v32;
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v35, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 40))
    {
      sub_10001CEB0(v35, v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v36 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_100D5579C;
      return v36();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10165E160);
    sub_100DB2E50(v22, v21, type metadata accessor for DeviceEvent);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 280);
    if (v26)
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      *(void *)(v0 + 128) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      type metadata accessor for BeaconIdentifier();
      type metadata accessor for UUID();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 120) = sub_1008FA0F0(v29, v30, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v27, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to update location for the device eventfor beacon: %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(*(void *)(v0 + 280), type metadata accessor for DeviceEvent);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  return result;
}

uint64_t sub_100D55430()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_errorRelease();
  return _swift_task_switch(sub_100D5549C, v1, 0);
}

uint64_t sub_100D5549C()
{
  uint64_t v14 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[27];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10165E160);
  sub_100DB2E50(v2, v1, type metadata accessor for DeviceEvent);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[35];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for BeaconIdentifier();
    type metadata accessor for UUID();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_1008FA0F0(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v7, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to update location for the device eventfor beacon: %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(v0[35], type metadata accessor for DeviceEvent);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100D5579C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D558B4, v2, 0);
}

uint64_t sub_100D558B4()
{
  uint64_t v27 = v0;
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[48])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[49] = v2;
    void *v2 = v0;
    v2[1] = sub_100D55DC4;
    uint64_t v3 = v0[38];
    return sub_101106BA8(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_10137D880;
    *(unsigned char *)(v5 + 16) = 3;
    swift_willThrow();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[33];
    uint64_t v7 = v0[27];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10165E160);
    sub_100DB2E50(v7, v6, type metadata accessor for DeviceEvent);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void *)v0[45];
    uint64_t v13 = v0[41];
    uint64_t v14 = v0[38];
    uint64_t v15 = v0[33];
    if (v11)
    {
      os_log_type_t v25 = (void *)v0[45];
      os_log_type_t type = v10;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138543875;
      swift_errorRetain();
      uint64_t v24 = v13;
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v16 + 12) = 2160;
      v0[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2081;
      type metadata accessor for BeaconIdentifier();
      type metadata accessor for UUID();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[19] = sub_1008FA0F0(v19, v20, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v15, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v9, type, "Failed to update location for the device event, error: %{public}@ for beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      sub_100D6BBBC(v14, type metadata accessor for DeviceEvent);
      uint64_t v21 = v24;
    }
    else
    {

      sub_100D6BBBC(v15, type metadata accessor for DeviceEvent);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100D6BBBC(v14, type metadata accessor for DeviceEvent);
      uint64_t v21 = v13;
    }
    sub_100D6BBBC(v21, type metadata accessor for DeviceEvent.Location);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_100D55DC4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    uint64_t v4 = sub_100D564A0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 224);
    swift_release();
    uint64_t v4 = sub_100D55EEC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D55EEC()
{
  uint64_t v38 = v0;
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  id v4 = [*(id *)(v0 + 360) timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSince(_:)();
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v1, v3);
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void **)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10165E160);
  sub_100DB2E50(v11, v10, type metadata accessor for DeviceEvent);
  sub_100DB2E50(v11, v9, type metadata accessor for DeviceEvent);
  id v13 = v8;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void **)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 288);
  if (v16)
  {
    log = v14;
    uint64_t v32 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v34 = v7;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 141559043;
    *(void *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    type metadata accessor for BeaconIdentifier();
    type metadata accessor for UUID();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_1008FA0F0(v22, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v20, type metadata accessor for DeviceEvent);
    *(_WORD *)(v21 + 22) = 2082;
    id v24 = [v17 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100DB1F50((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v26;
    v34(v32, v33);
    *(void *)(v0 + 176) = sub_1008FA0F0(v25, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 32) = 2082;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v28, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v36, type metadata accessor for DeviceEvent);
    *(_WORD *)(v21 + 42) = 2048;
    *(void *)(v0 + 192) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v15, "Updated existing device event location for beacon: %{private,mask.hash}s. Location timestamp: %{public}s, eventTimestamp: %{public}s, delta: %f.", (uint8_t *)v21, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100D6BBBC(v19, type metadata accessor for DeviceEvent);
  }
  else
  {

    sub_100D6BBBC(v36, type metadata accessor for DeviceEvent);
    sub_100D6BBBC(v20, type metadata accessor for DeviceEvent);

    sub_100D6BBBC(v19, type metadata accessor for DeviceEvent);
  }
  sub_100D6BBBC(v18, type metadata accessor for DeviceEvent.Location);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_100D564A0()
{
  unint64_t v23 = v0;
  swift_release();
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[27];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10165E160);
  sub_100DB2E50(v2, v1, type metadata accessor for DeviceEvent);
  swift_errorRetain();
  swift_errorRetain();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[45];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[38];
  uint64_t v10 = v0[33];
  if (v6)
  {
    uint64_t v21 = (void *)v0[45];
    os_log_type_t type = v5;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138543875;
    swift_errorRetain();
    uint64_t v20 = v8;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v11 + 12) = 2160;
    v0[18] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2081;
    type metadata accessor for BeaconIdentifier();
    type metadata accessor for UUID();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v10, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Failed to update location for the device event, error: %{public}@ for beacon: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_100D6BBBC(v9, type metadata accessor for DeviceEvent);
    uint64_t v16 = v20;
  }
  else
  {

    sub_100D6BBBC(v10, type metadata accessor for DeviceEvent);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100D6BBBC(v9, type metadata accessor for DeviceEvent);
    uint64_t v16 = v8;
  }
  sub_100D6BBBC(v16, type metadata accessor for DeviceEvent.Location);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100D568F0()
{
  v1[30] = v0;
  v1[31] = sub_10000588C(&qword_10163D218);
  v1[32] = swift_task_alloc();
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  v1[33] = v2;
  v1[34] = *(void *)(v2 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  sub_10000588C(&qword_10165E920);
  v1[41] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AccessoryConnectionService.Event();
  v1[42] = v3;
  v1[43] = *(void *)(v3 - 8);
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_101660EA0);
  v1[49] = v4;
  v1[50] = *(void *)(v4 - 8);
  v1[51] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[55] = v5;
  v1[56] = *(void *)(v5 - 8);
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = sub_10000588C(&qword_10165E928);
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10165E930);
  v1[75] = v6;
  v1[76] = *(void *)(v6 - 8);
  v1[77] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10165E938);
  v1[78] = v7;
  v1[79] = *(void *)(v7 - 8);
  v1[80] = swift_task_alloc();
  return _swift_task_switch(sub_100D56DBC, v0, 0);
}

uint64_t sub_100D56DBC()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639328 + dword_101639328);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 648) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D56F0C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D56F0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 656) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D57024, v2, 0);
}

uint64_t sub_100D57024()
{
  uint64_t v1 = *(void *)(v0 + 656);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 656);
    return _swift_task_switch(sub_100D5737C, v2, 0);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10165E160);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing AccessoryConnectionService", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100D5737C()
{
  uint64_t v1 = v0[82];
  uint64_t v48 = v0[71];
  uint64_t v2 = v0[56];
  uint64_t v45 = v0[49];
  uint64_t v46 = v0[50];
  uint64_t v44 = v0[43];
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 144);
  uint64_t v40 = v3 + 64;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v3 + 64);
  uint64_t v47 = v2;
  int64_t v41 = (unint64_t)(63 - v5) >> 6;
  uint64_t v42 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v49 = v3;
  uint64_t v7 = swift_bridgeObjectRetain_n();
  int64_t v10 = 0;
  uint64_t v43 = v0;
  uint64_t v57 = _swiftEmptyArrayStorage;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v55 = (v6 - 1) & v6;
  int64_t v56 = v10;
  for (unint64_t i = __clz(__rbit64(v6)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    uint64_t v16 = v0[74];
    uint64_t v17 = v0[73];
    uint64_t v18 = v0[72];
    unint64_t v53 = v0[70];
    uint64_t v19 = v0[55];
    uint64_t v54 = v0[54];
    uint64_t v52 = v0[51];
    uint64_t v20 = v0[48];
    uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v47 + 16);
    v21(v16, *(void *)(v49 + 48) + *(void *)(v47 + 72) * i, v19);
    sub_10001D074(*(void *)(v49 + 56) + *(void *)(v46 + 72) * i, v16 + *(int *)(v48 + 48), &qword_101660EA0);
    sub_10001D608(v16, v17, &qword_10165E928);
    uint64_t v22 = *(int *)(v48 + 48);
    uint64_t v23 = v18 + v22 + *(int *)(v45 + 64);
    uint64_t v24 = (char *)(v17 + v22);
    v21(v18, v17, v19);
    char v50 = *v24;
    char v51 = v24[1];
    sub_10001D074((uint64_t)&v24[*(int *)(v45 + 64)], v23, (uint64_t *)&unk_1016477E0);
    uint64_t v25 = v52 + *(int *)(v45 + 64);
    sub_10001D608(v23, v25, (uint64_t *)&unk_1016477E0);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 32))(v53, v18, v19);
    sub_10001D608(v25, v54, (uint64_t *)&unk_1016477E0);
    unint64_t v26 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
    uint64_t v27 = v26[12];
    uint64_t v28 = v20 + v26[16];
    uint64_t v29 = v26[20];
    v21(v20, v53, v19);
    *(unsigned char *)(v20 + v27) = v50;
    sub_10001D074(v54, v28, (uint64_t *)&unk_1016477E0);
    *(unsigned char *)(v20 + v29) = v51;
    swift_storeEnumTagMultiPayload();
    unint64_t v30 = (unint64_t)v57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v30 = sub_100A71C18(0, v57[2] + 1, 1, (unint64_t)v57);
    }
    unint64_t v32 = *(void *)(v30 + 16);
    unint64_t v31 = *(void *)(v30 + 24);
    uint64_t v0 = v43;
    if (v32 >= v31 >> 1) {
      unint64_t v30 = sub_100A71C18(v31 > 1, v32 + 1, 1, v30);
    }
    uint64_t v33 = v43[73];
    uint64_t v34 = v43[70];
    uint64_t v36 = v43[54];
    uint64_t v35 = v43[55];
    uint64_t v37 = v43[48];
    *(void *)(v30 + 16) = v32 + 1;
    sub_100DB2DE8(v37, v30+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v32, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
    sub_10001DAB4(v36, (uint64_t *)&unk_1016477E0);
    (*v42)(v34, v35);
    uint64_t v7 = sub_10001DAB4(v33, &qword_10165E928);
    unint64_t v6 = v55;
    int64_t v10 = v56;
    uint64_t v57 = (void *)v30;
    if (v55) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return _swift_task_switch(v7, v8, v9);
    }
    if (v12 >= v41) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v40 + 8 * v12);
    int64_t v14 = v10 + 1;
    if (!v13)
    {
      int64_t v14 = v10 + 2;
      if (v10 + 2 >= v41) {
        goto LABEL_27;
      }
      unint64_t v13 = *(void *)(v40 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v10 + 3;
        if (v10 + 3 >= v41) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v40 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v10 + 4;
          if (v10 + 4 >= v41) {
            goto LABEL_27;
          }
          unint64_t v13 = *(void *)(v40 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v55 = (v13 - 1) & v13;
    int64_t v56 = v14;
  }
  uint64_t v15 = v10 + 5;
  if (v10 + 5 < v41)
  {
    unint64_t v13 = *(void *)(v40 + 8 * v15);
    if (!v13)
    {
      while (1)
      {
        int64_t v14 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_31;
        }
        if (v14 >= v41) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v40 + 8 * v14);
        ++v15;
        if (v13) {
          goto LABEL_20;
        }
      }
    }
    int64_t v14 = v10 + 5;
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v38 = v0[30];
  swift_release();
  swift_bridgeObjectRelease();
  AsyncStreamProvider.stream(initialEvents:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t)sub_100D57888;
  uint64_t v8 = v38;
  uint64_t v9 = 0;
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100D57888()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[76];
  uint64_t v3 = v0[75];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[83] = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  v0[84] = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  v0[85] = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_peripheralStreamProvider;
  swift_beginAccess();
  uint64_t v4 = v0[83];
  uint64_t v5 = v0[30];
  unint64_t v6 = (void *)swift_task_alloc();
  v0[86] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100D579E4;
  uint64_t v7 = v0[78];
  uint64_t v8 = v0[41];
  return AsyncStream.Iterator.next(isolation:)(v8, v5, v4, v7);
}

uint64_t sub_100D579E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D57AF4, v1, 0);
}

uint64_t sub_100D57AF4()
{
  v194 = v0;
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = sub_10000588C(&qword_10165E940);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[79] + 8))(v0[80], v0[78]);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10165E160);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "accessoryConnectionService.stream() terminated", v6, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  uint64_t v10 = v0[46];
  uint64_t v9 = v0[47];
  v0[87] = *v1;
  sub_100DB2DE8((uint64_t)v1 + *(int *)(v2 + 48), v9, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  sub_100DB2E50(v9, v10, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = v0[68];
      uint64_t v14 = v0[55];
      uint64_t v13 = v0[56];
      uint64_t v15 = v0[52];
      uint64_t v16 = v0[46];
      uint64_t v17 = v0[40];
      uint64_t v18 = v0[30] + v0[84];
      uint64_t v19 = sub_10000588C(&qword_101651BD8);
      uint64_t v20 = v16 + *(int *)(v19 + 48);
      char v190 = *(unsigned char *)(v16 + *(int *)(v19 + 64));
      uint64_t v21 = v14;
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v22(v12, v16, v21);
      sub_10001D608(v20, v15, (uint64_t *)&unk_1016477E0);
      sub_100DB2E50(v18, v17, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          char v51 = v22;
          uint64_t v52 = v0[65];
          uint64_t v53 = v0[55];
          uint64_t v54 = v0[40];
          uint64_t v55 = v54 + *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
          v51(v52, v54, v53);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v56 = v0[33];
            uint64_t v57 = v0[34];
            (*(void (**)(void, void))(v0[56] + 8))(v0[65], v0[55]);
            (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
            goto LABEL_24;
          }
          if (qword_1016370D8 != -1) {
            swift_once();
          }
          uint64_t v132 = v0[68];
          uint64_t v133 = v0[64];
          uint64_t v134 = v0[55];
          uint64_t v135 = v0[56];
          uint64_t v136 = type metadata accessor for Logger();
          sub_100010324(v136, (uint64_t)qword_10165E160);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v133, v132, v134);
          v137 = Logger.logObject.getter();
          os_log_type_t v138 = static os_log_type_t.default.getter();
          BOOL v139 = os_log_type_enabled(v137, v138);
          uint64_t v140 = v0[68];
          uint64_t v141 = v0[64];
          uint64_t v142 = v0[55];
          uint64_t v143 = v0[56];
          uint64_t v188 = v0[65];
          uint64_t v191 = v0[52];
          uint64_t v144 = v0[47];
          if (v139)
          {
            uint64_t v186 = v0[47];
            uint64_t v145 = swift_slowAlloc();
            v193[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v145 = 136446210;
            sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v145 + 4) = sub_1008FA0F0(v146, v147, v193);
            swift_bridgeObjectRelease();
            v148 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
            v148(v141, v142);
            _os_log_impl((void *)&_mh_execute_header, v137, v138, "Got .propertyInfoChanged event without an earlier .attach event for %{public}s", (uint8_t *)v145, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_release();
            v148(v188, v142);
            sub_10001DAB4(v191, (uint64_t *)&unk_1016477E0);
            v148(v140, v142);
            uint64_t v149 = v186;
          }
          else
          {

            swift_release();
            v181 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
            v181(v141, v142);
            v181(v188, v142);
            sub_10001DAB4(v191, (uint64_t *)&unk_1016477E0);
            v181(v140, v142);
            uint64_t v149 = v144;
          }
          sub_100D6BBBC(v149, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
          (*(void (**)(uint64_t, void))(v0[34] + 8))(v55, v0[33]);
          goto LABEL_66;
        case 2u:
          v22(v0[63], v0[40], v0[55]);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v23 = v0[63];
            goto LABEL_23;
          }
          if (qword_1016370D8 != -1) {
            swift_once();
          }
          uint64_t v150 = v0[68];
          uint64_t v151 = v0[62];
          uint64_t v152 = v0[55];
          uint64_t v153 = v0[56];
          uint64_t v154 = type metadata accessor for Logger();
          sub_100010324(v154, (uint64_t)qword_10165E160);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 16))(v151, v150, v152);
          v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.default.getter();
          BOOL v128 = os_log_type_enabled(v126, v127);
          uint64_t v129 = v0[68];
          uint64_t v131 = v0[62];
          uint64_t v130 = v0[63];
          goto LABEL_52;
        case 3u:
          goto LABEL_24;
        default:
          v22(v0[67], v0[40], v0[55]);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v23 = v0[67];
LABEL_23:
            (*(void (**)(uint64_t, void))(v0[56] + 8))(v23, v0[55]);
LABEL_24:
            uint64_t v58 = (void *)swift_task_alloc();
            v0[89] = v58;
            *uint64_t v58 = v0;
            v58[1] = sub_100D59494;
            uint64_t v59 = v0[52];
            uint64_t v60 = v0[68];
            char v61 = v190;
            goto LABEL_60;
          }
          if (qword_1016370D8 != -1) {
            swift_once();
          }
          uint64_t v121 = v0[68];
          uint64_t v122 = v0[66];
          uint64_t v123 = v0[55];
          uint64_t v124 = v0[56];
          uint64_t v125 = type metadata accessor for Logger();
          sub_100010324(v125, (uint64_t)qword_10165E160);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v122, v121, v123);
          v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.default.getter();
          BOOL v128 = os_log_type_enabled(v126, v127);
          uint64_t v129 = v0[68];
          uint64_t v130 = v0[67];
          uint64_t v131 = v0[66];
LABEL_52:
          uint64_t v155 = v0[55];
          uint64_t v156 = v0[56];
          uint64_t v192 = v0[52];
          uint64_t v109 = v0[47];
          if (v128)
          {
            uint64_t v189 = v0[47];
            uint64_t v157 = swift_slowAlloc();
            v193[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v157 = 136446210;
            sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v158 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v157 + 4) = sub_1008FA0F0(v158, v159, v193);
            swift_bridgeObjectRelease();
            v160 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
            v160(v131, v155);
            _os_log_impl((void *)&_mh_execute_header, v126, v127, "Got .propertyInfoChanged event without an earlier .attach event for %{public}s", (uint8_t *)v157, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_release();
            v160(v130, v155);
            sub_10001DAB4(v192, (uint64_t *)&unk_1016477E0);
            v160(v129, v155);
            uint64_t v38 = v189;
            goto LABEL_65;
          }

          swift_release();
          v169 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
          v169(v131, v155);
          v169(v130, v155);
          sub_10001DAB4(v192, (uint64_t *)&unk_1016477E0);
          v169(v129, v155);
          break;
      }
LABEL_57:
      uint64_t v38 = v109;
    }
    else
    {
      uint64_t v39 = v0[39];
      uint64_t v40 = v0[30] + v0[84];
      int64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[56] + 32);
      v41(v0[61], v0[46], v0[55]);
      sub_100DB2E50(v40, v39, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v62 = v0[59];
          uint64_t v63 = v0[55];
          uint64_t v64 = v0[39];
          uint64_t v65 = v0[36];
          uint64_t v66 = v0[33];
          uint64_t v67 = v0[34];
          uint64_t v68 = v64 + *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
          v41(v62, v64, v63);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v65, v68, v66);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v69 = v0[38];
            uint64_t v70 = v0[30] + v0[84];
            swift_storeEnumTagMultiPayload();
            swift_beginAccess();
            sub_100DB5A5C(v69, v70);
            swift_endAccess();
            if (qword_1016370D8 != -1) {
              swift_once();
            }
            uint64_t v71 = v0[61];
            uint64_t v72 = v0[58];
            uint64_t v73 = v0[55];
            uint64_t v74 = v0[56];
            uint64_t v76 = v0[35];
            uint64_t v75 = v0[36];
            uint64_t v77 = v0[33];
            uint64_t v78 = v0[34];
            uint64_t v79 = type metadata accessor for Logger();
            sub_100010324(v79, (uint64_t)qword_10165E160);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v72, v71, v73);
            v187 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16);
            v187(v76, v75, v77);
            v80 = Logger.logObject.getter();
            os_log_type_t v81 = static os_log_type_t.default.getter();
            BOOL v82 = os_log_type_enabled(v80, v81);
            uint64_t v83 = v0[58];
            uint64_t v84 = v0[55];
            uint64_t v85 = v0[35];
            uint64_t v86 = v0[33];
            v87 = (void (**)(uint64_t, uint64_t))(v0[34] + 8);
            v88 = (void (**)(uint64_t, uint64_t))(v0[56] + 8);
            if (v82)
            {
              uint64_t v89 = swift_slowAlloc();
              v193[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v89 = 136315394;
              sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v89 + 4) = sub_1008FA0F0(v90, v91, v193);
              swift_bridgeObjectRelease();
              v185 = *v88;
              (*v88)(v83, v84);
              *(_WORD *)(v89 + 12) = 2080;
              sub_100062734(&qword_10163B810, &qword_10163D210);
              uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v89 + 14) = sub_1008FA0F0(v92, v93, v193);
              swift_bridgeObjectRelease();
              v184 = *v87;
              (*v87)(v85, v86);
              _os_log_impl((void *)&_mh_execute_header, v80, v81, "Pencil detached: uuid: %s %s", (uint8_t *)v89, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              v185 = *v88;
              (*v88)(v0[58], v0[55]);
              v184 = *v87;
              (*v87)(v85, v86);
            }

            *(void *)os_log_type_t type = v0[61];
            uint64_t v171 = v0[59];
            uint64_t v172 = v0[55];
            uint64_t v183 = v0[47];
            uint64_t v173 = v0[36];
            uint64_t v174 = v0[33];
            uint64_t v175 = v0[32];
            v187(v175, v173, v174);
            type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            AsyncStreamProvider.yield(value:transaction:)();
            swift_release();
            sub_10001DAB4(v175, &qword_10163D218);
            v184(v173, v174);
            v185(v171, v172);
            v185(*(void *)type, v172);
            uint64_t v38 = v183;
          }
          else
          {
            uint64_t v161 = v0[61];
            uint64_t v162 = v0[59];
            uint64_t v163 = v0[55];
            uint64_t v164 = v0[56];
            uint64_t v104 = v0[47];
            uint64_t v165 = v0[36];
            uint64_t v166 = v0[33];
            uint64_t v167 = v0[34];
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v165, v166);
            v168 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
            v168(v162, v163);
            v168(v161, v163);
LABEL_55:
            uint64_t v38 = v104;
          }
          break;
        case 2u:
          v41(v0[57], v0[39], v0[55]);
          if (static UUID.== infix(_:_:)())
          {
            uint64_t v94 = v0[38];
            uint64_t v95 = v0[30] + v0[84];
            swift_storeEnumTagMultiPayload();
            swift_beginAccess();
            sub_100DB5A5C(v94, v95);
            swift_endAccess();
            if (qword_1016370D8 != -1) {
              swift_once();
            }
            uint64_t v96 = type metadata accessor for Logger();
            sub_100010324(v96, (uint64_t)qword_10165E160);
            v97 = Logger.logObject.getter();
            os_log_type_t v98 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v97, v98))
            {
              v99 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v99 = 0;
              _os_log_impl((void *)&_mh_execute_header, v97, v98, "Unsupported pencil detached.", v99, 2u);
              swift_slowDealloc();
            }
          }
          uint64_t v100 = v0[61];
          uint64_t v102 = v0[56];
          uint64_t v101 = v0[57];
          uint64_t v103 = v0[55];
          uint64_t v104 = v0[47];
          swift_release();
          v105 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
          v105(v101, v103);
          v105(v100, v103);
          goto LABEL_55;
        case 3u:
          uint64_t v106 = v0[61];
          uint64_t v107 = v0[55];
          uint64_t v108 = v0[56];
          uint64_t v109 = v0[47];
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
          goto LABEL_57;
        default:
          uint64_t v43 = v0[60];
          uint64_t v42 = v0[61];
          uint64_t v44 = v0[55];
          uint64_t v45 = v0[56];
          uint64_t v46 = v0[47];
          v41(v43, v0[39], v44);
          char v47 = static UUID.== infix(_:_:)();
          swift_release();
          uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
          v48(v43, v44);
          v48(v42, v44);
          sub_100D6BBBC(v46, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
          if (v47)
          {
            uint64_t v49 = v0[38];
            uint64_t v50 = v0[30] + v0[84];
            swift_storeEnumTagMultiPayload();
            swift_beginAccess();
            sub_100DB5A5C(v49, v50);
            swift_endAccess();
          }
          goto LABEL_66;
      }
    }
    goto LABEL_65;
  }
  uint64_t v24 = v0[69];
  uint64_t v25 = v0[55];
  uint64_t v26 = v0[56];
  uint64_t v27 = v0[53];
  uint64_t v28 = v0[46];
  uint64_t v29 = (int *)sub_10000588C((uint64_t *)&unk_101651BC8);
  char v30 = *(unsigned char *)(v28 + v29[12]);
  uint64_t v31 = v28 + v29[16];
  char v32 = *(unsigned char *)(v28 + v29[20]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v24, v28, v25);
  sub_10001D608(v31, v27, (uint64_t *)&unk_1016477E0);
  if (((1 << v30) & 0x6BF) != 0)
  {
    uint64_t v33 = v0[69];
    uint64_t v35 = v0[55];
    uint64_t v34 = v0[56];
    uint64_t v36 = v0[53];
    uint64_t v37 = v0[47];
    swift_release();
    sub_10001DAB4(v36, (uint64_t *)&unk_1016477E0);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    uint64_t v38 = v37;
LABEL_65:
    sub_100D6BBBC(v38, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
LABEL_66:
    uint64_t v176 = v0[83];
    uint64_t v177 = v0[30];
    v178 = (void *)swift_task_alloc();
    v0[86] = v178;
    void *v178 = v0;
    v178[1] = sub_100D579E4;
    uint64_t v179 = v0[78];
    uint64_t v180 = v0[41];
    return AsyncStream.Iterator.next(isolation:)(v180, v177, v176, v179);
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v110 = v0[47];
  uint64_t v111 = v0[45];
  uint64_t v112 = type metadata accessor for Logger();
  sub_100010324(v112, (uint64_t)qword_10165E160);
  sub_100DB2E50(v110, v111, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.default.getter();
  BOOL v115 = os_log_type_enabled(v113, v114);
  uint64_t v116 = v0[45];
  if (v115)
  {
    uint64_t v117 = v0[44];
    uint64_t v118 = swift_slowAlloc();
    v193[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v118 = 136315138;
    sub_100DB2E50(v116, v117, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
    uint64_t v119 = String.init<A>(describing:)();
    *(void *)(v118 + 4) = sub_1008FA0F0(v119, v120, v193);
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v116, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "raw accessoryConnectionService event: %s", (uint8_t *)v118, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(v0[45], (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  }

  v170 = (void *)swift_task_alloc();
  v0[88] = v170;
  void *v170 = v0;
  v170[1] = sub_100D59268;
  uint64_t v59 = v0[53];
  uint64_t v60 = v0[69];
  char v61 = v32;
LABEL_60:
  return sub_100D675C0(v60, v59, v61);
}

uint64_t sub_100D59268()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D59378, v1, 0);
}

uint64_t sub_100D59378()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[56];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[47];
  swift_release();
  sub_10001DAB4(v4, (uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100D6BBBC(v5, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  uint64_t v6 = v0[83];
  uint64_t v7 = v0[30];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[86] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D579E4;
  uint64_t v9 = v0[78];
  uint64_t v10 = v0[41];
  return AsyncStream.Iterator.next(isolation:)(v10, v7, v6, v9);
}

uint64_t sub_100D59494()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D595A4, v1, 0);
}

uint64_t sub_100D595A4()
{
  uint64_t v1 = v0[68];
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[56];
  uint64_t v4 = v0[52];
  uint64_t v5 = v0[47];
  swift_release();
  sub_10001DAB4(v4, (uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_100D6BBBC(v5, (uint64_t (*)(void))type metadata accessor for AccessoryConnectionService.Event);
  uint64_t v6 = v0[83];
  uint64_t v7 = v0[30];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[86] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D579E4;
  uint64_t v9 = v0[78];
  uint64_t v10 = v0[41];
  return AsyncStream.Iterator.next(isolation:)(v10, v7, v6, v9);
}

uint64_t sub_100D596C0()
{
  v1[5] = v0;
  v1[6] = *v0;
  type metadata accessor for CentralManager.ConnectedState();
  v1[7] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101666760);
  v1[8] = swift_task_alloc();
  uint64_t v2 = sub_10000588C(&qword_10165E8C8);
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101666770);
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100D59868, v0, 0);
}

uint64_t sub_100D59868()
{
  uint64_t v17 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[15] = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[4] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101418010, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v0[16] = *(void *)(v0[5] + 144);
  sub_10000588C((uint64_t *)&unk_1016665D0);
  uint64_t v5 = type metadata accessor for CentralManager.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  v0[17] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  unint64_t v10 = v9 + v8;
  uint64_t v11 = *(void (**)(unint64_t, void, uint64_t))(v6 + 104);
  v11(v10, enum case for CentralManager.State.poweredOn(_:), v5);
  v11(v10 + v7, enum case for CentralManager.State.restricted(_:), v5);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[18] = v12;
  uint64_t v13 = type metadata accessor for CentralManager();
  v0[19] = v13;
  uint64_t v14 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v12 = v0;
  v12[1] = sub_100D59B8C;
  return CentralManagerProtocol.await(states:)(v9, v13, v14);
}

uint64_t sub_100D59B8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_100D5A778;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100D59CB4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D59CB4()
{
  sub_10000588C(&qword_101639C80);
  sub_10000588C(&qword_101639A70);
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 168) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  sub_100DB1F50((unint64_t *)&unk_101666780, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100D59E1C, v3, v2);
}

uint64_t sub_100D59E1C()
{
  uint64_t v1 = v0[20];
  dispatch thunk of CentralManager.connectionEvents(serviceIdentifiers:)();
  v0[22] = v1;
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = sub_100D5A954;
  }
  else
  {
    uint64_t v4 = v0[5];
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100D59EC0;
    uint64_t v2 = v4;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100D59EC0()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v2 = v0[22];
  v0[23] = v1;
  v0[24] = v2;
  uint64_t v3 = v0[5];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[25] = v4;
  void *v4 = v0;
  v4[1] = sub_100D59FBC;
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v1, v6);
}

uint64_t sub_100D59FBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D5A0CC, v1, 0);
}

uint64_t sub_100D5A0CC()
{
  uint64_t v1 = (uint64_t *)v0[8];
  uint64_t v2 = sub_10000588C(&qword_10165E8D0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "centralManager.connectionEvents() terminated", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[13];
    uint64_t v6 = v0[14];
    uint64_t v8 = v0[12];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    goto LABEL_12;
  }
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[7];
  uint64_t v11 = *v1;
  v0[26] = *v1;
  sub_100DB2DE8((uint64_t)v1 + *(int *)(v2 + 48), v10, (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  static Task<>.checkCancellation()();
  if (v9)
  {
    uint64_t v13 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v15 = v0[11];
    uint64_t v14 = v0[12];
    uint64_t v16 = v0[9];
    uint64_t v17 = v0[10];
    uint64_t v18 = v0[7];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_100D6BBBC(v18, (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138543362;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v21, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
  uint64_t v24 = v0[23];
  uint64_t v26 = v0[6];
  uint64_t v25 = v0[7];
  uint64_t v27 = v0[5];
  type metadata accessor for Transaction();
  v0[27] = static Transaction.$current.getter();
  v0[3] = v11;
  uint64_t v28 = (void *)swift_task_alloc();
  v0[28] = v28;
  v28[2] = v25;
  v28[3] = v27;
  v28[4] = v26;
  swift_retain();
  uint64_t v29 = (void *)swift_task_alloc();
  v0[29] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100D5A55C;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v29, v0 + 3, &unk_10165E8E0, v28, v27, v24, 0xD000000000000027, 0x8000000101417FE0);
}

uint64_t sub_100D5A55C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  swift_release();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v4 = sub_100D5AB30;
  }
  else {
    os_log_type_t v4 = sub_100D5A698;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D5A698()
{
  swift_release();
  uint64_t v1 = v0[30];
  sub_100D6BBBC(v0[7], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  v0[24] = v1;
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[5];
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[25] = v4;
  void *v4 = v0;
  v4[1] = sub_100D59FBC;
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_100D5A778()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100D5A954()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100D5AB30()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error processing monitorBluetoothConnections event: %{public}@", (uint8_t *)v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100D6BBBC(v0[7], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  v0[24] = 0;
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[5];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[25] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D59FBC;
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[9];
  return AsyncStream.Iterator.next(isolation:)(v9, v7, v6, v10);
}

uint64_t sub_100D5AD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[14] = a2;
  v3[15] = a3;
  uint64_t v4 = type metadata accessor for CentralManager.State();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[20] = v5;
  v3[21] = *(void *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalFindableAccessoryRecord();
  v3[26] = v6;
  v3[27] = *(void *)(v6 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v3[30] = v7;
  v3[31] = *(void *)(v7 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = type metadata accessor for CentralManager.ConnectedState();
  v3[48] = swift_task_alloc();
  v3[49] = type metadata accessor for CentralManager();
  uint64_t v8 = (void *)swift_task_alloc();
  v3[50] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100D5B0C0;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_100D5B0C0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[51] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[15];
    return _swift_task_switch(sub_100D5B354, v6, 0);
  }
}

uint64_t sub_100D5B354()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[31];
  sub_100DB2E50(v0[14], v0[48], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = *(void (**)(void, uint64_t, uint64_t))(v1 + 32);
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[30];
  if (EnumCaseMultiPayload == 1)
  {
    v3(v0[39], v4, v5);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v7 = v0[38];
    uint64_t v6 = v0[39];
    uint64_t v8 = v0[30];
    uint64_t v9 = v0[31];
    uint64_t v10 = type metadata accessor for Logger();
    v0[71] = sub_100010324(v10, (uint64_t)qword_10165E160);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v0[72] = v11;
    v0[73] = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v7, v6, v8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[38];
    uint64_t v16 = v0[30];
    uint64_t v17 = v0[31];
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v19, v20, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v21(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Connected to %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v21(v0[38], v0[30]);
    }

    v0[74] = v21;
    (*(void (**)(void, void, void))(v0[17] + 104))(v0[18], enum case for CentralManager.State.poweredOn(_:), v0[16]);
    uint64_t v38 = (void *)swift_task_alloc();
    v0[75] = v38;
    uint64_t v39 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    *uint64_t v38 = v0;
    v38[1] = sub_100D5D788;
    uint64_t v40 = v0[49];
    uint64_t v41 = v0[18];
    return CentralManagerProtocol.await(state:)(v41, v40, v39);
  }
  else
  {
    v3(v0[46], v4, v5);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v23 = v0[45];
    uint64_t v22 = v0[46];
    uint64_t v24 = v0[30];
    uint64_t v25 = v0[31];
    uint64_t v26 = type metadata accessor for Logger();
    v0[52] = sub_100010324(v26, (uint64_t)qword_10165E160);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    v0[53] = v27;
    v0[54] = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v27(v23, v22, v24);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = v0[45];
    uint64_t v32 = v0[30];
    uint64_t v33 = v0[31];
    if (v30)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = sub_1008FA0F0(v35, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v37(v31, v32);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Disconnected from %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v37(v0[45], v0[30]);
    }

    v0[55] = v37;
    swift_retain();
    uint64_t v42 = (void *)swift_task_alloc();
    v0[56] = v42;
    void *v42 = v0;
    v42[1] = sub_100D5B964;
    uint64_t v43 = v0[51];
    return withTimeout<A>(_:block:)(v42, 2000000000000000000, 0, &unk_10165E8F8, v43, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100D5B964()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = sub_100D5FC50;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    swift_release();
    uint64_t v4 = sub_100D5BA8C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D5BA8C()
{
  sub_10000588C(&qword_10163BC50);
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 464) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  Identifier.id.getter();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v2;
  void *v2 = v0;
  v2[1] = sub_100D5BB94;
  return v4(v1);
}

uint64_t sub_100D5BB94(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[60] = a1;
  v3[61] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[15];
    uint64_t v5 = sub_100D5FEC8;
  }
  else
  {
    uint64_t v6 = v3[15];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100D5BCBC;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

void sub_100D5BCBC()
{
  uint64_t v24 = v0;
  unint64_t v1 = v0[60];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
    uint64_t v6 = v0[46];
    uint64_t v7 = v0[44];
    uint64_t v8 = v0[30];
    swift_bridgeObjectRelease();
    v5(v7, v6, v8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[55];
    uint64_t v13 = v0[46];
    uint64_t v14 = v0[44];
    uint64_t v15 = v0[30];
    if (v11)
    {
      uint64_t v22 = v0[46];
      unint64_t v20 = (void (*)(uint64_t, uint64_t))v0[55];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = sub_1008FA0F0(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to retrieve a Peripheral for %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      v20(v22, v15);
    }
    else
    {

      v12(v14, v15);
      swift_release();
      v12(v13, v15);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (void (*)(void))v0[1];
    v19();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[60] + 32);
    swift_retain();
  }
  v0[62] = v2;
  swift_bridgeObjectRelease();
  uint64_t v21 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                       + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[63] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100D5C15C;
  v21();
}

uint64_t sub_100D5C15C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 512) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 120);
  if (v1)
  {
    uint64_t v6 = sub_100D60140;
  }
  else
  {
    *(unsigned char *)(v4 + 768) = a1 & 1;
    uint64_t v6 = sub_100D5C29C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D5C29C()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 768))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D5CF2C;
    uint64_t v2 = *(void *)(v0 + 120);
    v1[2] = *(void *)(v0 + 496);
    v1[3] = v2;
    return _swift_task_switch(sub_100D68E78, v2, 0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 344), *(void *)(v0 + 368), *(void *)(v0 + 240));
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 240);
    if (v5)
    {
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 80) = sub_1008FA0F0(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v15(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Checking if we have a matching record for %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 344), *(void *)(v0 + 240));
    }

    BOOL v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 520) = v11;
    *BOOL v11 = v0;
    v11[1] = sub_100D5C574;
    uint64_t v12 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 200);
    return sub_100D612E4(v13, v12);
  }
}

uint64_t sub_100D5C574()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  if (v0) {
    os_log_type_t v4 = sub_100D603B8;
  }
  else {
    os_log_type_t v4 = sub_100D5C6A0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D5C6A0()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[27] + 48))(v1, 1, v0[26]) == 1)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
    uint64_t v3 = v0[46];
    uint64_t v4 = v0[42];
    uint64_t v5 = v0[30];
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    v2(v4, v3, v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[55];
    uint64_t v10 = v0[46];
    uint64_t v11 = v0[42];
    uint64_t v12 = v0[30];
    if (v8)
    {
      uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[55];
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_1008FA0F0(v14, v15, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No LocalFindableRecord for %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
      v26(v10, v12);
    }
    else
    {

      swift_release();
      v9(v11, v12);
      swift_release();
      v9(v10, v12);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  else
  {
    uint64_t v16 = v0[29];
    uint64_t v17 = v0[23];
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[19];
    sub_100DB2DE8(v1, v16, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v16, v18);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[67] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100D5CB80;
    uint64_t v22 = v0[41];
    uint64_t v23 = v0[19];
    return sub_100D2EE60(v22, v23);
  }
}

uint64_t sub_100D5CB80()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v0 + 440);
  uint64_t v3 = *(void *)(*v0 + 328);
  uint64_t v4 = *(void *)(*v0 + 248);
  uint64_t v5 = *(void *)(*v0 + 240);
  uint64_t v6 = *(void *)(*v0 + 152);
  uint64_t v7 = *(void *)(*v0 + 120);
  swift_task_dealloc();
  sub_10001DAB4(v6, &qword_101638CF0);
  *(void *)(v1 + 544) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v3, v5);
  return _swift_task_switch(sub_100D5CD40, v7, 0);
}

uint64_t sub_100D5CD40()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v2 = v0[46];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  swift_release();
  swift_release();
  sub_100D6BBBC(v4, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D5CF2C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(unsigned char *)(*(void *)v1 + 769) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D5D044, v2, 0);
}

uint64_t sub_100D5D044()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 769) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D5D47C;
    uint64_t v2 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 152);
    return sub_100D2EE60(v2, v3);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 320), *(void *)(v0 + 368), *(void *)(v0 + 240));
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    BOOL v8 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 240);
    if (v7)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 88) = sub_1008FA0F0(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v8(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ignore connection event for unsupported accessory %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
      v8(v9, v11);
    }
    else
    {

      swift_release();
      v8(v10, v11);
      swift_release();
      v8(v9, v11);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100D5D47C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  sub_10001DAB4(v1, &qword_101638CF0);
  return _swift_task_switch(sub_100D5D5B0, v2, 0);
}

uint64_t sub_100D5D5B0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[30];
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D5D788()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v5 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 120);
  if (v0) {
    BOOL v7 = sub_100D60630;
  }
  else {
    BOOL v7 = sub_100D5D910;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100D5D910()
{
  sub_10000588C(&qword_10163BC50);
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 616) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  Identifier.id.getter();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 624) = v2;
  void *v2 = v0;
  v2[1] = sub_100D5DA18;
  return v4(v1);
}

uint64_t sub_100D5DA18(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 632) = a1;
  *(void *)(v4 + 640) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 120);
  if (v1) {
    uint64_t v6 = sub_100D60804;
  }
  else {
    uint64_t v6 = sub_100D5DB6C;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_100D5DB6C()
{
  uint64_t v23 = v0;
  unint64_t v1 = v0[79];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[72];
    uint64_t v6 = v0[39];
    uint64_t v7 = v0[37];
    uint64_t v8 = v0[30];
    swift_bridgeObjectRelease();
    v5(v7, v6, v8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[74];
    uint64_t v13 = v0[39];
    uint64_t v14 = v0[37];
    uint64_t v15 = v0[30];
    if (v11)
    {
      uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[74];
      uint64_t v16 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_1008FA0F0(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      v20(v13, v15);
    }
    else
    {
      swift_release();

      v12(v14, v15);
      v12(v13, v15);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (void (*)(void))v0[1];
    v19();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[79] + 32);
    swift_retain();
  }
  v0[81] = v2;
  swift_bridgeObjectRelease();
  uint64_t v21 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                       + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[82] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100D5E038;
  v21();
}

uint64_t sub_100D5E038(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 664) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 120);
  if (v1)
  {
    uint64_t v6 = sub_100D609D8;
  }
  else
  {
    *(unsigned char *)(v4 + 770) = a1 & 1;
    uint64_t v6 = sub_100D5E178;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D5E178()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 770))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 704) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D5EE14;
    uint64_t v2 = *(void *)(v0 + 120);
    v1[2] = *(void *)(v0 + 648);
    v1[3] = v2;
    return _swift_task_switch(sub_100D68E78, v2, 0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 576))(*(void *)(v0 + 288), *(void *)(v0 + 312), *(void *)(v0 + 240));
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 288);
    uint64_t v7 = *(void *)(v0 + 240);
    if (v5)
    {
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v15(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Checking if we have a matching record for %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 288), *(void *)(v0 + 240));
    }

    BOOL v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 672) = v11;
    *BOOL v11 = v0;
    v11[1] = sub_100D5E454;
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 192);
    return sub_100D612E4(v13, v12);
  }
}

uint64_t sub_100D5E454()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  if (v0) {
    os_log_type_t v4 = sub_100D60BB8;
  }
  else {
    os_log_type_t v4 = sub_100D5E580;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D5E580()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[24];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[27] + 48))(v1, 1, v0[26]) == 1)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[72];
    uint64_t v3 = v0[39];
    uint64_t v4 = v0[35];
    uint64_t v5 = v0[30];
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    v2(v4, v3, v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[74];
    uint64_t v10 = v0[39];
    uint64_t v11 = v0[35];
    uint64_t v12 = v0[30];
    if (v8)
    {
      uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[74];
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[2] = sub_1008FA0F0(v14, v15, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No LocalFindableRecord for %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
      v26(v10, v12);
    }
    else
    {
      swift_release();

      swift_release();
      v9(v11, v12);
      v9(v10, v12);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  else
  {
    uint64_t v16 = v0[28];
    uint64_t v17 = v0[23];
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[19];
    sub_100DB2DE8(v1, v16, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v16, v18);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[86] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100D5EA64;
    uint64_t v22 = v0[41];
    uint64_t v23 = v0[19];
    return sub_100D2E818(v22, v23);
  }
}

uint64_t sub_100D5EA64()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v0 + 592);
  uint64_t v3 = *(void *)(*v0 + 328);
  uint64_t v4 = *(void *)(*v0 + 248);
  uint64_t v5 = *(void *)(*v0 + 240);
  uint64_t v6 = *(void *)(*v0 + 152);
  uint64_t v7 = *(void *)(*v0 + 120);
  swift_task_dealloc();
  sub_10001DAB4(v6, &qword_101638CF0);
  *(void *)(v1 + 696) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v3, v5);
  return _swift_task_switch(sub_100D5EC24, v7, 0);
}

uint64_t sub_100D5EC24()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[74];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[28];
  swift_release();
  swift_release();
  sub_100D6BBBC(v4, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D5EE14(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(unsigned char *)(*(void *)v1 + 771) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D5EF2C, v2, 0);
}

uint64_t sub_100D5EF2C()
{
  uint64_t v18 = v0;
  if (*(unsigned char *)(v0 + 771) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 712) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D5F36C;
    uint64_t v2 = *(void *)(v0 + 312);
    uint64_t v3 = *(void *)(v0 + 152);
    return sub_100D2E818(v2, v3);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 576))(*(void *)(v0 + 264), *(void *)(v0 + 312), *(void *)(v0 + 240));
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    BOOL v8 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 240);
    if (v7)
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1008FA0F0(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ignore connection event for unsupported accessory %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
      v16(v9, v11);
    }
    else
    {
      swift_release();

      swift_release();
      v8(v10, v11);
      v8(v9, v11);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100D5F36C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  sub_10001DAB4(v1, &qword_101638CF0);
  return _swift_task_switch(sub_100D5F4A0, v2, 0);
}

uint64_t sub_100D5F4A0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[74];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  Peripheral.id.getter();
  Identifier.id.getter();
  v0[90] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v1(v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[91] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100D5F598;
  uint64_t v6 = v0[22];
  return sub_100D638A8(v6);
}

uint64_t sub_100D5F598(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 736) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 176);
  uint64_t v6 = *(void *)(v4 + 168);
  uint64_t v7 = *(void *)(v4 + 160);
  uint64_t v8 = *(void *)(v4 + 120);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = sub_100D60D98;
  }
  else
  {
    *(unsigned char *)(v4 + 772) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = sub_100D5F738;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100D5F738()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 240);
  if (*(unsigned char *)(v0 + 772) == 1)
  {
    sub_100D6339C(*(void *)(v0 + 312));
    swift_release();
    swift_release();
    v1(v2, v3);
  }
  else
  {
    v1(*(void *)(v0 + 312), *(void *)(v0 + 240));
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100D5F944()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  sub_10001DAB4(v1, &qword_101638CF0);
  return _swift_task_switch(sub_100D5FA78, v2, 0);
}

uint64_t sub_100D5FA78()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[30];
  swift_errorRelease();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D5FC50()
{
  uint64_t v16 = v0;
  swift_release();
  *(void *)(v0 + 744) = *(void *)(v0 + 456);
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 256), *(void *)(v0 + 368), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 248);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v13 + 8;
    v14(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 248) + 8;
    (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  }

  *(void *)(v0 + 752) = v8;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v9;
  void *v9 = v0;
  v9[1] = sub_100D5F944;
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 152);
  return sub_100D2EE60(v10, v11);
}

uint64_t sub_100D5FEC8()
{
  uint64_t v16 = v0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 744) = *(void *)(v0 + 488);
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 256), *(void *)(v0 + 368), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 248);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v13 + 8;
    v14(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 248) + 8;
    (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  }

  *(void *)(v0 + 752) = v8;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v9;
  void *v9 = v0;
  v9[1] = sub_100D5F944;
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 152);
  return sub_100D2EE60(v10, v11);
}

uint64_t sub_100D60140()
{
  uint64_t v16 = v0;
  swift_release();
  *(void *)(v0 + 744) = *(void *)(v0 + 512);
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 256), *(void *)(v0 + 368), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 248);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v13 + 8;
    v14(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 248) + 8;
    (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  }

  *(void *)(v0 + 752) = v8;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v9;
  void *v9 = v0;
  v9[1] = sub_100D5F944;
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 152);
  return sub_100D2EE60(v10, v11);
}

uint64_t sub_100D603B8()
{
  uint64_t v16 = v0;
  swift_release();
  *(void *)(v0 + 744) = *(void *)(v0 + 528);
  (*(void (**)(void, void, void))(v0 + 424))(*(void *)(v0 + 256), *(void *)(v0 + 368), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 248);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v13 + 8;
    v14(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 248) + 8;
    (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  }

  *(void *)(v0 + 752) = v8;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 168) + 56))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v9;
  void *v9 = v0;
  v9[1] = sub_100D5F944;
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 152);
  return sub_100D2EE60(v10, v11);
}

uint64_t sub_100D60630()
{
  swift_release();
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 312), *(void *)(v0 + 240));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D60804()
{
  swift_release();
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 312), *(void *)(v0 + 240));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D609D8()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 312), *(void *)(v0 + 240));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D60BB8()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 312), *(void *)(v0 + 240));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D60D98()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void))(v0 + 592))(*(void *)(v0 + 312), *(void *)(v0 + 240));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D60F6C(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = type metadata accessor for CentralManager.State();
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_100D6102C, 0, 0);
}

uint64_t sub_100D6102C()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for CentralManager.State.poweredOn(_:), v0[3]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  uint64_t v2 = type metadata accessor for CentralManager();
  uint64_t v3 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D6113C;
  uint64_t v4 = v0[5];
  return CentralManagerProtocol.await(state:)(v4, v2, v3);
}

uint64_t sub_100D6113C()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v5 = *v1;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100313080, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100D612E4(uint64_t a1, uint64_t a2)
{
  v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  uint64_t v4 = type metadata accessor for MACAddress();
  v3[26] = v4;
  v3[27] = *(void *)(v4 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[30] = v5;
  v3[31] = *(void *)(v5 - 8);
  v3[32] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalFindableAccessoryRecord();
  v3[34] = v6;
  v3[35] = *(void *)(v6 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v3[39] = v7;
  v3[40] = *(void *)(v7 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  return _swift_task_switch(sub_100D61544, v2, 0);
}

uint64_t sub_100D61544()
{
  uint64_t v23 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[44];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[24];
  uint64_t v6 = type metadata accessor for Logger();
  v0[45] = sub_100010324(v6, (uint64_t)qword_10165E160);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[46] = v7;
  v0[47] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v2, v5, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[44];
  uint64_t v12 = v0[39];
  uint64_t v13 = v0[40];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    v0[21] = sub_1008FA0F0(0xD00000000000002ALL, 0x80000001014180A0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[22] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v0[44], v0[39]);
  }

  v0[48] = v17;
  uint64_t v18 = qword_1016375E8;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v21 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[49] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100D618E8;
    return v21();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D618E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D61A00, v2, 0);
}

uint64_t sub_100D61A00()
{
  BOOL v10 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[50])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter();
    uint64_t v2 = v0[50];
    return _swift_task_switch(sub_100D61C98, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      v0[15] = sub_1008FA0F0(0xD00000000000002ALL, 0x80000001014180A0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s No CloudStorageService available!", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_101354100;
    *(unsigned char *)(v6 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100D61C98()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D61D34;
  uint64_t v3 = v0[32];
  uint64_t v2 = v0[33];
  return sub_100C12834(v2, v3);
}

uint64_t sub_100D61D34()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[50];
    os_log_type_t v4 = sub_100D623B4;
  }
  else
  {
    uint64_t v5 = v2[25];
    (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
    os_log_type_t v4 = sub_100D61E6C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D61E6C()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[33];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[35] + 48))(v1, 1, v0[34]);
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  uint64_t v4 = v0[39];
  if (v2 == 1)
  {
    uint64_t v5 = v0[42];
    uint64_t v6 = v0[24];
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    v3(v5, v6, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[42];
    uint64_t v11 = v0[39];
    if (v9)
    {
      uint64_t v28 = (void (*)(uint64_t, uint64_t))v0[48];
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[18] = sub_1008FA0F0(v13, v14, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v28(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Iterating all LocalFindableBeaconRecords to find peripheralIdentifier: %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[48])(v0[42], v0[39]);
    }

    uint64_t v25 = v0[50];
    return _swift_task_switch(sub_100D62528, v25, 0);
  }
  else
  {
    uint64_t v15 = v0[43];
    uint64_t v16 = v0[24];
    sub_100DB2DE8(v1, v0[38], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    v3(v15, v16, v4);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[43];
    uint64_t v21 = v0[39];
    if (v19)
    {
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[48];
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446466;
      v0[19] = sub_1008FA0F0(0xD00000000000002ALL, 0x80000001014180A0, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[20] = sub_1008FA0F0(v23, v24, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29(v20, v21);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s Found LocalFindableAccessoryRecord matching %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[48])(v0[43], v0[39]);
    }
    swift_release();

    sub_100DB2DE8(v0[38], v0[23], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(void, void, uint64_t, void))(v0[35] + 56))(v0[23], 0, 1, v0[34]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_100D623B4()
{
  uint64_t v1 = v0[25];
  (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
  return _swift_task_switch(sub_100D62430, v1, 0);
}

uint64_t sub_100D62430()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D62528()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D625BC;
  return sub_100C134B0();
}

uint64_t sub_100D625BC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 432) = a1;
  *(void *)(v4 + 440) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 200);
  if (v1) {
    uint64_t v6 = sub_100D6293C;
  }
  else {
    uint64_t v6 = sub_100D626F0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D626F0()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 448) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v3 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 216);
    *(void *)(v0 + 456) = *(void *)(*(void *)(v0 + 200) + 144);
    int v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 520) = v7;
    *(void *)(v0 + 464) = *(void *)(v3 + 72);
    *(void *)(v0 + 472) = 0;
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v9 = *(void *)(v0 + 232);
    sub_100DB2E50(v1 + ((v7 + 32) & ~(unint64_t)v7), v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v10 = v8 + *(int *)(v4 + 52);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    *(void *)(v0 + 480) = v11;
    *(void *)(v0 + 488) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v9, v10, v5);
    uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                          + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100D62A34;
    uint64_t v13 = *(void *)(v0 + 232);
    return v16(v13);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 184), 1, 1, *(void *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100D6293C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D62A34(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[63] = a1;
  v3[64] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[25];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100D63264;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[25];
    uint64_t v5 = sub_100D62B5C;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100D62B5C()
{
  uint64_t v52 = v0;
  if (*(void *)(v0 + 504))
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v2 = *(void *)(v0 + 328);
    uint64_t v3 = *(void *)(v0 + 312);
    Peripheral.id.getter();
    type metadata accessor for Peripheral();
    char v4 = static Identifier.== infix(_:_:)();
    v1(v2, v3);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 288);
      uint64_t v5 = *(void *)(v0 + 296);
      swift_bridgeObjectRelease();
      sub_100DB2E50(v5, v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      int v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      BOOL v9 = os_log_type_enabled(v7, v8);
      uint64_t v10 = *(void *)(v0 + 288);
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v13 = *(void *)(v0 + 208);
      uint64_t v12 = *(void *)(v0 + 216);
      if (v9)
      {
        uint64_t v48 = *(void *)(v0 + 232);
        uint64_t v14 = swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136446466;
        *(void *)(v0 + 128) = sub_1008FA0F0(0xD00000000000002ALL, 0x80000001014180A0, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v14 + 12) = 2080;
        uint64_t v15 = sub_1000C8E00();
        *(void *)(v0 + 136) = sub_1008FA0F0(v15, v16, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100D6BBBC(v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Found LocalFindableAccessoryRecord record %s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v48, v13);
      }
      else
      {
        swift_release();

        swift_release();
        sub_100D6BBBC(v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      }
      sub_100DB2DE8(*(void *)(v0 + 296), *(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      uint64_t v36 = 0;
      goto LABEL_16;
    }
    uint64_t v30 = *(void *)(v0 + 296);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v33 = *(void *)(v0 + 216);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    uint64_t v29 = v30;
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 480))(*(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 208));
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 224);
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v23 = *(void *)(v0 + 216);
    if (v19)
    {
      uint64_t v49 = *(void *)(v0 + 296);
      uint64_t v25 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      *(void *)(v25 + 4) = sub_1008FA0F0(0xD00000000000002ALL, 0x80000001014180A0, &v51);
      *(_WORD *)(v25 + 12) = 2082;
      sub_100DB1F50((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v25 + 14) = sub_1008FA0F0(v26, v27, &v51);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v28(v21, v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s No peripheral for %{public}s!", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v28(v22, v24);
      uint64_t v29 = v49;
    }
    else
    {

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v34(v21, v24);
      v34(v22, v24);
      uint64_t v29 = v20;
    }
  }
  sub_100D6BBBC(v29, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v35 = *(void *)(v0 + 472) + 1;
  if (v35 == *(void *)(v0 + 448))
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v36 = 1;
LABEL_16:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 184), v36, 1, *(void *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  *(void *)(v0 + 472) = v35;
  uint64_t v37 = *(void *)(v0 + 296);
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v39 = *(void *)(v0 + 232);
  uint64_t v40 = *(void *)(v0 + 208);
  uint64_t v41 = *(void *)(v0 + 216);
  sub_100DB2E50(*(void *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520))+ *(void *)(v0 + 464) * v35, v37, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v42 = v37 + *(int *)(v38 + 52);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  *(void *)(v0 + 480) = v43;
  *(void *)(v0 + 488) = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v43(v39, v42, v40);
  uint64_t v50 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v44;
  void *v44 = v0;
  v44[1] = sub_100D62A34;
  uint64_t v45 = *(void *)(v0 + 232);
  return v50(v45);
}

uint64_t sub_100D63264()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D6339C(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v39 = *v1;
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  uint64_t v38 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v37 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v36 = (char *)v34 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v34 - v10;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10165E160);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v41 = v5 + 16;
  v40(v11, v42, v4);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v44 = sub_1008FA0F0(0xD000000000000018, 0x8000000101418030, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2082;
    uint64_t v35 = v15 + 14;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = sub_1008FA0F0(v16, v17, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s for %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }

  uint64_t v18 = v43;
  uint64_t v35 = *(void *)(v43 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue);
  v34[2] = type metadata accessor for WorkItemQueue.WorkItem();
  BOOL v19 = v36;
  uint64_t v20 = v42;
  v40(v36, v42, v4);
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  uint64_t v23 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v24 = (v23 + 24) & ~v23;
  v34[1] = v23 | 7;
  uint64_t v25 = v6 + 7;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v18;
  v34[0] = *(void *)(v22 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v34[0])(v26 + v24, v19, v21);
  uint64_t v27 = v20;
  uint64_t v29 = v39;
  uint64_t v28 = v40;
  *(void *)(v26 + ((v24 + v25) & 0xFFFFFFFFFFFFFFF8)) = v39;
  uint64_t v30 = v37;
  v28(v37, v27, v21);
  uint64_t v31 = (v23 + 16) & ~v23;
  uint64_t v32 = swift_allocObject();
  ((void (*)(uint64_t, char *, uint64_t))v34[0])(v32 + v31, v30, v21);
  *(void *)(v32 + ((v31 + v25) & 0xFFFFFFFFFFFFFFF8)) = v29;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100D638A8(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  v2[23] = *v1;
  sub_10000588C(&qword_10164DBB0);
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = *(void *)(v4 + 64);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalFindablePreferences();
  v2[30] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[31] = v6;
  v2[32] = *(void *)(v6 + 64);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  sub_10000588C(&qword_10165B9A8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_100D63AF8, v1, 0);
}

uint64_t sub_100D63AF8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D63C48;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D63C48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 376) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D63D60, v2, 0);
}

uint64_t sub_100D63D60()
{
  uint64_t v1 = *(void *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 376);
    return _swift_task_switch(sub_100D63F30, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000013;
    v3[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4(0);
  }
}

uint64_t sub_100D63F30()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[48] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D63FD0;
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[21];
  return sub_100C154E8(v2, v3);
}

uint64_t sub_100D63FD0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0) {
    uint64_t v4 = sub_100D64C50;
  }
  else {
    uint64_t v4 = sub_100D640FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D640FC()
{
  uint64_t v112 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  sub_10001D074(*(void *)(v0 + 360), v1, &qword_10165B9A8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(void *)(v0 + 400) = v4;
  *(void *)(v0 + 408) = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = *(void *)(v0 + 344);
  if (v5 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 344), &qword_10165B9A8);
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t *)(v6 + *(int *)(*(void *)(v0 + 240) + 24));
  uint64_t v8 = *v7;
  *(void *)(v0 + 416) = *v7;
  unint64_t v9 = v7[1];
  *(void *)(v0 + 424) = v9;
  sub_100037A38(v8, v9);
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
  if (v9 >> 60 == 15)
  {
LABEL_4:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 248) + 56))(*(void *)(v0 + 352), 1, 1, *(void *)(v0 + 240));
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v110 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10165E160);
    sub_10001D074(v10, v12, &qword_10165B9A8);
    sub_10001D074(v11, v13, &qword_10165B9A8);
    uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v109(v14, v110, v16);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v104 = v19;
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      uint64_t v21 = *(void *)(v0 + 336);
      uint64_t v22 = *(void *)(v0 + 320);
      uint64_t v23 = *(void *)(v0 + 240);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v111 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446979;
      sub_10001D074(v21, v22, &qword_10165B9A8);
      int v25 = v20(v22, 1, v23);
      uint64_t v26 = *(void *)(v0 + 320);
      if (v25 == 1)
      {
        sub_10001DAB4(v26, &qword_10165B9A8);
        char v27 = 3;
      }
      else
      {
        char v27 = *(unsigned char *)(v26 + *(int *)(*(void *)(v0 + 240) + 20));
        sub_100D6BBBC(v26, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
      }
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      uint64_t v35 = *(void *)(v0 + 328);
      uint64_t v34 = *(void *)(v0 + 336);
      uint64_t v36 = *(void *)(v0 + 240);
      *(unsigned char *)(v0 + 456) = v27;
      sub_10000588C(&qword_10165E8C0);
      uint64_t v37 = String.init<A>(describing:)();
      *(void *)(v0 + 128) = sub_1008FA0F0(v37, v38, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v34, &qword_10165B9A8);
      *(_WORD *)(v24 + 12) = 2082;
      int v39 = v33(v35, 1, v36);
      uint64_t v40 = *(void *)(v0 + 328);
      if (v39) {
        char v41 = 3;
      }
      else {
        char v41 = *(unsigned char *)(v40 + *(int *)(*(void *)(v0 + 240) + 20));
      }
      uint64_t v42 = *(void *)(v0 + 232);
      uint64_t v44 = *(void *)(v0 + 200);
      uint64_t v43 = *(void *)(v0 + 208);
      *(unsigned char *)(v0 + 457) = v41;
      uint64_t v45 = String.init<A>(describing:)();
      *(void *)(v0 + 144) = sub_1008FA0F0(v45, v46, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v40, &qword_10165B9A8);
      *(_WORD *)(v24 + 22) = 2160;
      *(void *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 32) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v47, v48, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      _os_log_impl((void *)&_mh_execute_header, v18, v104, "findMyPairingState = %{public}s,\nserialNumber-based findMyPairingState = %{public}s,\nidentifier = %{private,mask.hash}s.", (uint8_t *)v24, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 328);
      uint64_t v29 = *(void *)(v0 + 232);
      uint64_t v31 = *(void *)(v0 + 200);
      uint64_t v30 = *(void *)(v0 + 208);
      sub_10001DAB4(*(void *)(v0 + 336), &qword_10165B9A8);
      sub_10001DAB4(v28, &qword_10165B9A8);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v50 = *(void *)(v0 + 312);
    uint64_t v51 = *(void *)(v0 + 240);
    sub_10001D074(*(void *)(v0 + 352), v50, &qword_10165B9A8);
    if (v49(v50, 1, v51) == 1)
    {
      uint64_t v52 = *(void *)(v0 + 312);
      swift_release();
      sub_10001DAB4(v52, &qword_10165B9A8);
      goto LABEL_26;
    }
    uint64_t v53 = *(void *)(v0 + 272);
    uint64_t v54 = *(void *)(v0 + 240);
    sub_100DB2DE8(*(void *)(v0 + 312), v53, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    if (*(unsigned char *)(v53 + *(int *)(v54 + 20)) == 1)
    {
      uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      uint64_t v56 = *(void *)(v0 + 304);
      uint64_t v57 = *(void *)(v0 + 240);
      sub_10001D074(*(void *)(v0 + 360), v56, &qword_10165B9A8);
      int v58 = v55(v56, 1, v57);
      uint64_t v59 = *(void *)(v0 + 304);
      if (v58 == 1)
      {
        sub_10001DAB4(v59, &qword_10165B9A8);
LABEL_24:
        uint64_t v62 = *(void *)(v0 + 216);
        uint64_t v61 = *(void *)(v0 + 224);
        uint64_t v63 = *(void *)(v0 + 200);
        uint64_t v64 = *(void *)(v0 + 208);
        uint64_t v65 = *(NSObject **)(v0 + 192);
        os_log_t log = v65;
        uint64_t v108 = *(void *)(v0 + 184);
        uint64_t v67 = *(void *)(v0 + 168);
        uint64_t v66 = *(void *)(v0 + 176);
        uint64_t v68 = type metadata accessor for TaskPriority();
        (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v65, 1, 1, v68);
        v109(v61, v67, v63);
        uint64_t v69 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
        unint64_t v70 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
        unint64_t v71 = (v70 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v72 = (v70 + v62 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v73 = swift_allocObject();
        *(void *)(v73 + 16) = v66;
        *(void *)(v73 + 24) = v69;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v64 + 32))(v73 + v70, v61, v63);
        unint64_t v74 = v73 + v71;
        *(void *)unint64_t v74 = v66;
        *(unsigned char *)(v74 + 8) = 1;
        *(void *)(v73 + v72) = v108;
        swift_retain_n();
        sub_1008F5E44((uint64_t)log, (uint64_t)&unk_10165E8B8, v73);
        swift_release();
        goto LABEL_25;
      }
      int v60 = *(unsigned __int8 *)(v59 + *(int *)(v54 + 20));
      sub_100D6BBBC(v59, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
      if (v60 != 1) {
        goto LABEL_24;
      }
    }
LABEL_25:
    uint64_t v75 = *(void *)(v0 + 376);
    uint64_t v77 = *(void *)(v0 + 264);
    uint64_t v76 = *(void *)(v0 + 272);
    uint64_t v78 = *(void *)(v0 + 248);
    uint64_t v79 = *(void *)(v0 + 224);
    uint64_t v102 = *(void *)(v0 + 256);
    uint64_t v103 = *(void *)(v0 + 216);
    uint64_t v80 = *(void *)(v0 + 200);
    uint64_t v81 = *(void *)(v0 + 208);
    uint64_t v82 = *(void *)(v0 + 192);
    uint64_t v105 = v82;
    os_log_t loga = *(os_log_t *)(v0 + 184);
    uint64_t v83 = *(void *)(v0 + 168);
    uint64_t v84 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v82, 1, 1, v84);
    sub_100DB2E50(v76, v77, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    v109(v79, v83, v80);
    unint64_t v85 = (*(unsigned __int8 *)(v78 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    unint64_t v86 = (v102 + *(unsigned __int8 *)(v81 + 80) + v85) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
    v87 = (char *)swift_allocObject();
    *((void *)v87 + 2) = 0;
    *((void *)v87 + 3) = 0;
    *((void *)v87 + 4) = v75;
    sub_100DB2DE8(v77, (uint64_t)&v87[v85], (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(&v87[v86], v79, v80);
    *(void *)&v87[(v103 + v86 + 7) & 0xFFFFFFFFFFFFFFF8] = loga;
    swift_retain();
    sub_1008F5E44(v105, (uint64_t)&unk_10165E8A8, (uint64_t)v87);
    swift_release();
    swift_release();
    sub_100D6BBBC(v76, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
LABEL_26:
    v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v89 = *(void *)(v0 + 296);
    uint64_t v90 = *(void *)(v0 + 240);
    sub_10001D608(*(void *)(v0 + 360), v89, &qword_10165B9A8);
    int v91 = v88(v89, 1, v90);
    uint64_t v92 = *(void *)(v0 + 352);
    uint64_t v94 = *(void *)(v0 + 288);
    uint64_t v93 = *(void *)(v0 + 296);
    if (v91 == 1)
    {
      sub_10001DAB4(v93, &qword_10165B9A8);
      sub_10001D608(v92, v94, &qword_10165B9A8);
    }
    else
    {
      int v95 = *(unsigned __int8 *)(v93 + *(int *)(*(void *)(v0 + 240) + 20));
      sub_100D6BBBC(v93, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
      sub_10001D608(v92, v94, &qword_10165B9A8);
      if (v95 == 1)
      {
        uint64_t v96 = *(void *)(v0 + 288);
        BOOL v97 = 1;
        goto LABEL_33;
      }
    }
    uint64_t v96 = *(void *)(v0 + 288);
    uint64_t v98 = *(void *)(v0 + 240);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 400))(v96, 1, v98))
    {
      BOOL v101 = 0;
LABEL_34:
      sub_10001DAB4(v96, &qword_10165B9A8);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v99 = *(uint64_t (**)(BOOL))(v0 + 8);
      return v99(v101);
    }
    BOOL v97 = *(unsigned __int8 *)(v96 + *(int *)(v98 + 20)) == 1;
LABEL_33:
    BOOL v101 = v97;
    goto LABEL_34;
  }
  uint64_t v32 = *(void *)(v0 + 376);
  return _swift_task_switch(sub_100D64D94, v32, 0);
}

uint64_t sub_100D64C50()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100D64D94()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[54] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D64E30;
  uint64_t v3 = v0[52];
  uint64_t v2 = v0[53];
  return sub_100C15AE8(v3, v2);
}

uint64_t sub_100D64E30(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 440) = a1;
  *(void *)(v4 + 448) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 176);
  if (v1) {
    uint64_t v6 = sub_100D64F64;
  }
  else {
    uint64_t v6 = sub_100D650C8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D64F64()
{
  uint64_t v1 = v0[45];
  sub_100037A24(v0[52], v0[53]);
  swift_release();
  sub_10001DAB4(v1, &qword_10165B9A8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2(0);
}

uint64_t sub_100D650C8()
{
  uint64_t v124 = v0;
  uint64_t v1 = &qword_101637000;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10165E160);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 440);
  uint64_t v119 = v2;
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v123 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218242;
    *(void *)(v0 + 136) = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = v8;
    uint64_t v1 = &qword_101637000;
    *(void *)(v0 + 120) = sub_1008FA0F0(v11, v10, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "All SerialNumber-based preferences[%ld]: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = *(void *)(v0 + 440);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = v12 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100DB2E50(v15, *(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
      sub_100DB1F50((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_100D6BBBC(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
      v15 += v16;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    uint64_t v18 = *(void *)(v0 + 416);
    unint64_t v17 = *(void *)(v0 + 424);
    uint64_t v19 = *(void *)(v0 + 352);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    swift_bridgeObjectRelease();
    sub_100DB2DE8(v20, v19, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  else
  {
LABEL_11:
    uint64_t v18 = *(void *)(v0 + 416);
    unint64_t v17 = *(void *)(v0 + 424);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 248) + 56))(*(void *)(v0 + 352), 1, 1, *(void *)(v0 + 240));
  }
  sub_100037A24(v18, v17);
  swift_bridgeObjectRelease();
  if (v1[27] != -1) {
    swift_once();
  }
  uint64_t v121 = *(void *)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v23 = *(void *)(v0 + 360);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 200);
  uint64_t v28 = *(void *)(v0 + 208);
  sub_100010324(v119, (uint64_t)qword_10165E160);
  sub_10001D074(v23, v25, &qword_10165B9A8);
  sub_10001D074(v24, v26, &qword_10165B9A8);
  unint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v120(v27, v121, v29);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    os_log_type_t v113 = v31;
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v33 = *(void *)(v0 + 336);
    uint64_t v34 = *(void *)(v0 + 320);
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v36 = swift_slowAlloc();
    uint64_t v123 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136446979;
    sub_10001D074(v33, v34, &qword_10165B9A8);
    int v37 = v32(v34, 1, v35);
    uint64_t v38 = *(void *)(v0 + 320);
    if (v37 == 1)
    {
      sub_10001DAB4(v38, &qword_10165B9A8);
      char v39 = 3;
    }
    else
    {
      char v39 = *(unsigned char *)(v38 + *(int *)(*(void *)(v0 + 240) + 20));
      sub_100D6BBBC(v38, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    }
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v46 = *(void *)(v0 + 328);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v47 = *(void *)(v0 + 240);
    *(unsigned char *)(v0 + 456) = v39;
    sub_10000588C(&qword_10165E8C0);
    uint64_t v48 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_1008FA0F0(v48, v49, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v45, &qword_10165B9A8);
    *(_WORD *)(v36 + 12) = 2082;
    int v50 = v44(v46, 1, v47);
    uint64_t v51 = *(void *)(v0 + 328);
    if (v50) {
      char v52 = 3;
    }
    else {
      char v52 = *(unsigned char *)(v51 + *(int *)(*(void *)(v0 + 240) + 20));
    }
    uint64_t v53 = *(void *)(v0 + 232);
    uint64_t v54 = *(void *)(v0 + 200);
    uint64_t v55 = *(void *)(v0 + 208);
    *(unsigned char *)(v0 + 457) = v52;
    uint64_t v56 = String.init<A>(describing:)();
    *(void *)(v0 + 144) = sub_1008FA0F0(v56, v57, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v51, &qword_10165B9A8);
    *(_WORD *)(v36 + 22) = 2160;
    *(void *)(v0 + 152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 32) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 160) = sub_1008FA0F0(v58, v59, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    _os_log_impl((void *)&_mh_execute_header, v30, v113, "findMyPairingState = %{public}s,\nserialNumber-based findMyPairingState = %{public}s,\nidentifier = %{private,mask.hash}s.", (uint8_t *)v36, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v40 = *(void *)(v0 + 328);
    uint64_t v41 = *(void *)(v0 + 232);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 208);
    sub_10001DAB4(*(void *)(v0 + 336), &qword_10165B9A8);
    sub_10001DAB4(v40, &qword_10165B9A8);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  }

  int v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  uint64_t v61 = *(void *)(v0 + 312);
  uint64_t v62 = *(void *)(v0 + 240);
  sub_10001D074(*(void *)(v0 + 352), v61, &qword_10165B9A8);
  if (v60(v61, 1, v62) == 1)
  {
    uint64_t v63 = *(void *)(v0 + 312);
    swift_release();
    sub_10001DAB4(v63, &qword_10165B9A8);
    goto LABEL_32;
  }
  uint64_t v64 = *(void *)(v0 + 272);
  uint64_t v65 = *(void *)(v0 + 240);
  sub_100DB2DE8(*(void *)(v0 + 312), v64, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
  if (*(unsigned char *)(v64 + *(int *)(v65 + 20)) == 1)
  {
    uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v67 = *(void *)(v0 + 304);
    uint64_t v68 = *(void *)(v0 + 240);
    sub_10001D074(*(void *)(v0 + 360), v67, &qword_10165B9A8);
    int v69 = v66(v67, 1, v68);
    uint64_t v70 = *(void *)(v0 + 304);
    if (v69 == 1)
    {
      sub_10001DAB4(v70, &qword_10165B9A8);
LABEL_30:
      uint64_t v73 = *(void *)(v0 + 216);
      uint64_t v72 = *(void *)(v0 + 224);
      uint64_t v74 = *(void *)(v0 + 200);
      uint64_t v75 = *(void *)(v0 + 208);
      uint64_t v76 = *(void *)(v0 + 192);
      uint64_t v117 = v76;
      uint64_t v122 = *(void *)(v0 + 184);
      uint64_t v78 = *(void *)(v0 + 168);
      uint64_t v77 = *(void *)(v0 + 176);
      uint64_t v79 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v76, 1, 1, v79);
      v120(v72, v78, v74);
      uint64_t v80 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
      unint64_t v81 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      unint64_t v82 = (v81 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v83 = (v81 + v73 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = swift_allocObject();
      *(void *)(v84 + 16) = v77;
      *(void *)(v84 + 24) = v80;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 32))(v84 + v81, v72, v74);
      unint64_t v85 = v84 + v82;
      *(void *)unint64_t v85 = v77;
      *(unsigned char *)(v85 + 8) = 1;
      *(void *)(v84 + v83) = v122;
      swift_retain_n();
      sub_1008F5E44(v117, (uint64_t)&unk_10165E8B8, v84);
      swift_release();
      goto LABEL_31;
    }
    int v71 = *(unsigned __int8 *)(v70 + *(int *)(v65 + 20));
    sub_100D6BBBC(v70, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    if (v71 != 1) {
      goto LABEL_30;
    }
  }
LABEL_31:
  uint64_t v86 = *(void *)(v0 + 376);
  uint64_t v88 = *(void *)(v0 + 264);
  uint64_t v87 = *(void *)(v0 + 272);
  uint64_t v89 = *(void *)(v0 + 248);
  uint64_t v90 = *(void *)(v0 + 224);
  uint64_t v114 = *(void *)(v0 + 256);
  uint64_t v115 = *(void *)(v0 + 216);
  uint64_t v91 = *(void *)(v0 + 200);
  uint64_t v92 = *(void *)(v0 + 208);
  uint64_t v93 = *(void *)(v0 + 192);
  uint64_t v116 = v93;
  uint64_t v118 = *(void *)(v0 + 184);
  uint64_t v94 = *(void *)(v0 + 168);
  uint64_t v95 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v93, 1, 1, v95);
  sub_100DB2E50(v87, v88, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
  v120(v90, v94, v91);
  unint64_t v96 = (*(unsigned __int8 *)(v89 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
  unint64_t v97 = (v114 + *(unsigned __int8 *)(v92 + 80) + v96) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  uint64_t v98 = (char *)swift_allocObject();
  *((void *)v98 + 2) = 0;
  *((void *)v98 + 3) = 0;
  *((void *)v98 + 4) = v86;
  sub_100DB2DE8(v88, (uint64_t)&v98[v96], (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(&v98[v97], v90, v91);
  *(void *)&v98[(v115 + v97 + 7) & 0xFFFFFFFFFFFFFFF8] = v118;
  swift_retain();
  sub_1008F5E44(v116, (uint64_t)&unk_10165E8A8, (uint64_t)v98);
  swift_release();
  swift_release();
  sub_100D6BBBC(v87, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
LABEL_32:
  v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  uint64_t v100 = *(void *)(v0 + 296);
  uint64_t v101 = *(void *)(v0 + 240);
  sub_10001D608(*(void *)(v0 + 360), v100, &qword_10165B9A8);
  int v102 = v99(v100, 1, v101);
  uint64_t v103 = *(void *)(v0 + 352);
  uint64_t v105 = *(void *)(v0 + 288);
  uint64_t v104 = *(void *)(v0 + 296);
  if (v102 == 1)
  {
    sub_10001DAB4(v104, &qword_10165B9A8);
    sub_10001D608(v103, v105, &qword_10165B9A8);
  }
  else
  {
    int v106 = *(unsigned __int8 *)(v104 + *(int *)(*(void *)(v0 + 240) + 20));
    sub_100D6BBBC(v104, (uint64_t (*)(void))type metadata accessor for LocalFindablePreferences);
    sub_10001D608(v103, v105, &qword_10165B9A8);
    if (v106 == 1)
    {
      uint64_t v107 = *(void *)(v0 + 288);
      BOOL v108 = 1;
      goto LABEL_39;
    }
  }
  uint64_t v107 = *(void *)(v0 + 288);
  uint64_t v109 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 400))(v107, 1, v109))
  {
    BOOL v112 = 0;
    goto LABEL_40;
  }
  BOOL v108 = *(unsigned __int8 *)(v107 + *(int *)(v109 + 20)) == 1;
LABEL_39:
  BOOL v112 = v108;
LABEL_40:
  sub_10001DAB4(v107, &qword_10165B9A8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v110 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v110(v112);
}

uint64_t sub_100D65E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 80) = a6;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = a5;
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + 56) = *(void *)(v8 - 8);
  *(void *)(v6 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_100D65F08, a5, 0);
}

uint64_t sub_100D65F08()
{
  uint64_t v21 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 48);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Store previous user's choice for this accessory %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  }

  uint64_t v15 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v16;
  void *v16 = v0;
  v16[1] = sub_100D661E4;
  uint64_t v18 = *(void *)(v0 + 32);
  uint64_t v17 = *(void *)(v0 + 40);
  v16[22] = 0x1000000000000000;
  v16[23] = v17;
  v16[20] = v18;
  v16[21] = v15;
  return _swift_task_switch(sub_100D66318, v17, 0);
}

uint64_t sub_100D661E4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100D662F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  return _swift_task_switch(sub_100D66318, v3, 0);
}

uint64_t sub_100D66318()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D66468;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D66468(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D66580, v2, 0);
}

uint64_t sub_100D66580()
{
  os_log_type_t v31 = v0;
  uint64_t v1 = v0[25];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[21];
    unint64_t v3 = v0[22];
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    sub_100C1E0A8(v2, v3);
    sub_100C1E0A8(v2, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = v0[21];
    unint64_t v8 = v0[22];
    if (v7)
    {
      uint64_t v10 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      v0[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      uint64_t v11 = sub_10121E858(v9, v8);
      v0[19] = sub_1008FA0F0(v11, v12, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100C1E0B8(v9, v8);
      sub_100C1E0B8(v9, v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Saving accessory info %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100C1E0B8(v0[21], v0[22]);
      sub_100C1E0B8(v9, v8);
    }

    uint64_t v26 = v0[25];
    return _swift_task_switch(sub_100D66ADC, v26, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v13 = 0xD000000000000013;
    v13[1] = 0x80000001014033F0;
    swift_willThrow();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v14 = v0[21];
    unint64_t v15 = v0[22];
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10165E160);
    sub_100C1E0A8(v14, v15);
    swift_errorRetain();
    sub_100C1E0A8(v14, v15);
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[21];
    unint64_t v21 = v0[22];
    if (v19)
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558531;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2081;
      uint64_t v23 = sub_10121E858(v20, v21);
      v0[16] = sub_1008FA0F0(v23, v24, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100C1E0B8(v20, v21);
      sub_100C1E0B8(v20, v21);
      *(_WORD *)(v22 + 22) = 2114;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to save accessory info %{private,mask.hash}s, error %{public}@", (uint8_t *)v22, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_100C1E0B8(v20, v21);
      sub_100C1E0B8(v20, v21);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
}

uint64_t sub_100D66ADC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[26] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D66B7C;
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  return sub_100C1383C(v3, v2, v4);
}

uint64_t sub_100D66B7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_100D66CA8;
  }
  else {
    uint64_t v4 = sub_10038C728;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D66CA8()
{
  uint64_t v17 = v0;
  swift_release();
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[21];
  unint64_t v1 = v0[22];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10165E160);
  sub_100C1E0A8(v2, v1);
  swift_errorRetain();
  sub_100C1E0A8(v2, v1);
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[21];
  unint64_t v7 = v0[22];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    unint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v10 = sub_10121E858(v8, v7);
    v0[16] = sub_1008FA0F0(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100C1E0B8(v8, v7);
    sub_100C1E0B8(v8, v7);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v15 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to save accessory info %{private,mask.hash}s, error %{public}@", (uint8_t *)v9, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100C1E0B8(v8, v7);
    sub_100C1E0B8(v8, v7);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100D66FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v8 = type metadata accessor for UUID();
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_100D67080, a4, 0);
}

uint64_t sub_100D67080()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100D67124;
  uint64_t v2 = *(void *)(v0 + 48);
  return sub_100C14AA4(v2, 0, 0xF000000000000000);
}

uint64_t sub_100D67124()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100D67260, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100D67260()
{
  unint64_t v21 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    os_log_t log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138543875;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v13;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Error on accessory info deletion %{public}@, identifier %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100D675C0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 168) = a2;
  *(void *)(v4 + 176) = v3;
  *(unsigned char *)(v4 + 432) = a3;
  *(void *)(v4 + 160) = a1;
  *(void *)(v4 + 184) = sub_10000588C(&qword_10163D218);
  *(void *)(v4 + 192) = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 200) = v5;
  *(void *)(v4 + 208) = *(void *)(v5 - 8);
  *(void *)(v4 + 216) = swift_task_alloc();
  *(void *)(v4 + 224) = swift_task_alloc();
  sub_10000588C(&qword_10165E898);
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016477E0);
  *(void *)(v4 + 248) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MACAddress();
  *(void *)(v4 + 256) = v6;
  *(void *)(v4 + 264) = *(void *)(v6 - 8);
  *(void *)(v4 + 272) = swift_task_alloc();
  *(void *)(v4 + 280) = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  *(void *)(v4 + 288) = swift_task_alloc();
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v4 + 312) = v7;
  *(void *)(v4 + 320) = *(void *)(v7 - 8);
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 336) = swift_task_alloc();
  *(void *)(v4 + 344) = swift_task_alloc();
  *(void *)(v4 + 352) = swift_task_alloc();
  *(void *)(v4 + 360) = swift_task_alloc();
  *(void *)(v4 + 368) = swift_task_alloc();
  *(void *)(v4 + 376) = swift_task_alloc();
  return _swift_task_switch(sub_100D67890, v3, 0);
}

uint64_t sub_100D67890()
{
  uint64_t v82 = v0;
  switch(*(unsigned char *)(v0 + 432))
  {
    case 1:
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v16 = *(void *)(v0 + 368);
      uint64_t v18 = *(void *)(v0 + 312);
      uint64_t v17 = *(void *)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 160);
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10165E160);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v24 = *(void *)(v0 + 368);
      uint64_t v26 = *(void *)(v0 + 312);
      uint64_t v25 = *(void *)(v0 + 320);
      if (v23)
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136446210;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 144) = sub_1008FA0F0(v28, v29, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Accessory auth failed for %{public}s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v25 + 8))(*(void *)(v0 + 368), *(void *)(v0 + 312));
      }
      goto LABEL_32;
    case 2:
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v30 = *(void *)(v0 + 360);
      uint64_t v31 = *(void *)(v0 + 312);
      uint64_t v32 = *(void *)(v0 + 320);
      uint64_t v33 = *(void *)(v0 + 160);
      uint64_t v34 = type metadata accessor for Logger();
      *(void *)(v0 + 384) = sub_100010324(v34, (uint64_t)qword_10165E160);
      uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
      *(void *)(v0 + 392) = v35;
      *(void *)(v0 + 400) = (v32 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v35(v30, v33, v31);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v39 = *(void *)(v0 + 360);
      uint64_t v41 = *(void *)(v0 + 312);
      uint64_t v40 = *(void *)(v0 + 320);
      if (v38)
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136446210;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 136) = sub_1008FA0F0(v43, v44, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v45(v39, v41);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Accessory auth status is .passed for %{public}s", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v45(*(void *)(v0 + 360), *(void *)(v0 + 312));
      }
      uint64_t v60 = *(void *)(v0 + 304);
      uint64_t v61 = *(void *)(v0 + 176);
      uint64_t v62 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
      *(void *)(v0 + 408) = v45;
      *(void *)(v0 + 416) = v62;
      uint64_t v63 = v61 + v62;
      swift_beginAccess();
      sub_100DB2E50(v63, v60, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v64 = *(void *)(v0 + 352);
        uint64_t v65 = *(void *)(v0 + 312);
        uint64_t v66 = *(void *)(v0 + 320);
        uint64_t v67 = *(void *)(v0 + 304);
        uint64_t v68 = *(void *)(v0 + 200);
        uint64_t v69 = *(void *)(v0 + 208);
        uint64_t v70 = v67 + *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v64, v67, v65);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v68);
        LOBYTE(v67) = static UUID.== infix(_:_:)();
        v45(v64, v65);
        if (v67) {
          goto LABEL_32;
        }
      }
      else
      {
        sub_100D6BBBC(*(void *)(v0 + 304), type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      }
      uint64_t v71 = *(void *)(v0 + 256);
      uint64_t v72 = *(void *)(v0 + 264);
      uint64_t v73 = *(void *)(v0 + 248);
      sub_10001D074(*(void *)(v0 + 168), v73, (uint64_t *)&unk_1016477E0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v73, 1, v71) != 1)
      {
        (*(void (**)(void, void, void))(*(void *)(v0 + 264) + 32))(*(void *)(v0 + 272), *(void *)(v0 + 248), *(void *)(v0 + 256));
        uint64_t v78 = (void *)swift_task_alloc();
        *(void *)(v0 + 424) = v78;
        *uint64_t v78 = v0;
        v78[1] = sub_100D68430;
        uint64_t v79 = *(void *)(v0 + 272);
        uint64_t v80 = *(void *)(v0 + 240);
        return sub_100D69364(v80, v79);
      }
      sub_10001DAB4(*(void *)(v0 + 248), (uint64_t *)&unk_1016477E0);
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v74)) {
        goto LABEL_31;
      }
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v74, "Accessory auth status is passed without a MAC address! (Bug on CoreAccessory)", v75, 2u);
      goto LABEL_30;
    case 3:
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v47 = *(void *)(v0 + 320);
      uint64_t v46 = *(void *)(v0 + 328);
      uint64_t v48 = *(void *)(v0 + 312);
      uint64_t v49 = *(void *)(v0 + 160);
      uint64_t v50 = type metadata accessor for Logger();
      sub_100010324(v50, (uint64_t)qword_10165E160);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      uint64_t v56 = *(void *)(v0 + 312);
      if (v53)
      {
        unint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)unint64_t v57 = 136446210;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 112) = sub_1008FA0F0(v58, v59, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Accessory auth timed out for %{public}s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v55 + 8))(*(void *)(v0 + 328), *(void *)(v0 + 312));
      }

      goto LABEL_32;
    default:
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v1 = *(void *)(v0 + 160);
      uint64_t v2 = *(void *)(v0 + 376);
      uint64_t v4 = *(void *)(v0 + 312);
      uint64_t v3 = *(void *)(v0 + 320);
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10165E160);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      BOOL v8 = os_log_type_enabled(v6, v7);
      uint64_t v9 = *(void *)(v0 + 376);
      uint64_t v11 = *(void *)(v0 + 312);
      uint64_t v10 = *(void *)(v0 + 320);
      if (v8)
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446210;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 152) = sub_1008FA0F0(v13, v14, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
        unint64_t v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unknown auth status for %{public}s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_30:
        swift_slowDealloc();
LABEL_31:
      }
      else
      {
        (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 312));
      }
LABEL_32:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v76 = *(uint64_t (**)(void))(v0 + 8);
      return v76();
  }
}

uint64_t sub_100D68430()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D68540, v1, 0);
}

uint64_t sub_100D68540()
{
  uint64_t v67 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[26];
  sub_10001D074(v0[30], v1, &qword_10165E898);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[49];
  uint64_t v6 = v0[39];
  uint64_t v7 = v0[29];
  if (v4 == 1)
  {
    uint64_t v8 = v0[42];
    uint64_t v9 = v0[20];
    sub_10001DAB4(v7, &qword_10165E898);
    v5(v8, v9, v6);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[42];
    uint64_t v14 = v0[39];
    if (v12)
    {
      uint64_t v61 = (void (*)(uint64_t, uint64_t))v0[51];
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 136446210;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = sub_1008FA0F0(v16, v17, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v61(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unsupported pencil attached: uuid: %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[51])(v0[42], v0[39]);
    }

    uint64_t v37 = v0[36];
    uint64_t v38 = v0[37];
    uint64_t v63 = v0[34];
    uint64_t v39 = v0[33];
    uint64_t v60 = v0[32];
    uint64_t v40 = v0[30];
    uint64_t v41 = (void *)v0[24];
    uint64_t v42 = v0[22] + v0[52];
    ((void (*)(uint64_t, void, void))v0[49])(v38, v0[20], v0[39]);
    swift_storeEnumTagMultiPayload();
    sub_100DB2DE8(v38, v37, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_beginAccess();
    sub_100DB5A5C(v37, v42);
    swift_endAccess();
    type metadata accessor for SPPairingSessionError(0);
    v0[12] = 16;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100DB1F50(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v41 = v0[11];
    swift_storeEnumTagMultiPayload();
    AsyncStreamProvider.yield(value:transaction:)();
    sub_10001DAB4((uint64_t)v41, &qword_10163D218);
    sub_10001DAB4(v40, &qword_10165E898);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v63, v60);
  }
  else
  {
    uint64_t v18 = v0[43];
    uint64_t v19 = v0[28];
    uint64_t v65 = v0[27];
    uint64_t v21 = v0[25];
    uint64_t v20 = v0[26];
    uint64_t v22 = v0[20];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v7, v21);
    v5(v18, v22, v6);
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v64(v65, v19, v21);
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[51];
    uint64_t v27 = v0[43];
    uint64_t v28 = v0[39];
    uint64_t v29 = v0[26];
    uint64_t v30 = v0[27];
    uint64_t v31 = v0[25];
    if (v25)
    {
      os_log_type_t type = v24;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446466;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = sub_1008FA0F0(v33, v34, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v27, v28);
      *(_WORD *)(v32 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v35, v36, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v62(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v23, type, "Pencil attached: uuid: %{public}s (%{public}s)", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v26(v0[43], v0[39]);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v62(v30, v31);
    }
    uint64_t v43 = (void (*)(uint64_t, uint64_t, uint64_t))v0[49];
    uint64_t v44 = v0[39];
    uint64_t v45 = v0[37];
    os_log_t log = (os_log_t)v0[33];
    *(void *)typea = v0[32];
    uint64_t v59 = v0[34];
    uint64_t v46 = v0[28];
    uint64_t v48 = v0[24];
    uint64_t v47 = v0[25];
    uint64_t v55 = v0[30];
    uint64_t v54 = v0[36];
    uint64_t v49 = v0[22] + v0[52];
    uint64_t v50 = v0[20];
    uint64_t v51 = v45 + *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
    v43(v45, v50, v44);
    v64(v51, v46, v47);
    swift_storeEnumTagMultiPayload();
    sub_100DB2DE8(v45, v54, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_beginAccess();
    sub_100DB5A5C(v54, v49);
    swift_endAccess();
    v64(v48, v46, v47);
    type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    AsyncStreamProvider.yield(value:transaction:)();
    sub_10001DAB4(v48, &qword_10163D218);
    v62(v46, v47);
    sub_10001DAB4(v55, &qword_10165E898);
    ((void (*)(uint64_t, os_log_type_t *))log[1].isa)(v59, *(os_log_type_t **)typea);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t sub_100D68E58(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100D68E78, v1, 0);
}

uint64_t sub_100D68E78()
{
  if (qword_1016370E0 != -1) {
    swift_once();
  }
  uint64_t v1 = off_10165E178;
  *(void *)(v0 + 32) = off_10165E178;
  char v2 = v1[32];
  *(unsigned char *)(v0 + 72) = v2;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << v2;
  if (-(-1 << v2) < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *((void *)v1 + 7);
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v5));
    uint64_t v9 = (v5 - 1) & v5;
LABEL_7:
    *(void *)(v0 + 40) = v7;
    *(void *)(v0 + 48) = v9;
    uint64_t v10 = (void *)(v6[6] + 16 * v8);
    *(void *)(v0 + 56) = *v10;
    *(void *)(v0 + 64) = v10[1];
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_10165E890, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    swift_bridgeObjectRetain();
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100D690D0, v12, v11);
  }
  unint64_t v13 = 63 - v4;
  if ((unint64_t)(63 - v4) > 0x7F)
  {
    unint64_t v14 = v6[8];
    if (v14)
    {
      uint64_t v7 = 1;
LABEL_13:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v8 = __clz(__rbit64(v14)) + (v7 << 6);
      goto LABEL_7;
    }
    if (v13 >= 0xC0)
    {
      unint64_t v14 = v6[9];
      if (v14)
      {
        uint64_t v7 = 2;
        goto LABEL_13;
      }
      if (v13 >= 0x100)
      {
        unint64_t v14 = v6[10];
        if (v14)
        {
          uint64_t v7 = 3;
          goto LABEL_13;
        }
        if (v13 >= 0x140)
        {
          unint64_t v14 = v6[11];
          if (v14)
          {
            uint64_t v7 = 4;
            goto LABEL_13;
          }
          uint64_t v15 = 0;
          uint64_t v16 = v13 >> 6;
          if (v16 <= 5) {
            uint64_t v16 = 5;
          }
          uint64_t v17 = v16 - 5;
          while (v17 != v15)
          {
            unint64_t v14 = v6[v15++ + 12];
            if (v14)
            {
              uint64_t v7 = v15 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18(0);
}

uint64_t sub_100D690D0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(unsigned char *)(v0 + 73) = dispatch thunk of Peripheral.hasTag(_:)() & 1;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100D69158, v1, 0);
}

uint64_t sub_100D69158(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(v3 + 73);
  if ((v4 & 1) == 0)
  {
    int64_t v8 = *(void *)(v3 + 40);
    unint64_t v7 = *(void *)(v3 + 48);
    if (v7)
    {
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
      uint64_t v11 = *(void *)(v3 + 32);
      goto LABEL_7;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else
    {
      int64_t v17 = (unint64_t)((1 << *(unsigned char *)(v3 + 72)) + 63) >> 6;
      if (v16 >= v17) {
        goto LABEL_2;
      }
      uint64_t v11 = *(void *)(v3 + 32);
      uint64_t v18 = v11 + 56;
      unint64_t v19 = *(void *)(v11 + 56 + 8 * v16);
      ++v8;
      if (v19) {
        goto LABEL_13;
      }
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v17) {
        goto LABEL_2;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v8);
      if (v19) {
        goto LABEL_13;
      }
      int64_t v8 = v16 + 2;
      if (v16 + 2 >= v17) {
        goto LABEL_2;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v8);
      if (v19) {
        goto LABEL_13;
      }
      int64_t v20 = v16 + 3;
      if (v20 >= v17) {
        goto LABEL_2;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v20);
      if (v19)
      {
        int64_t v8 = v20;
LABEL_13:
        uint64_t v9 = (v19 - 1) & v19;
        unint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_7:
        *(void *)(v3 + 40) = v8;
        *(void *)(v3 + 48) = v9;
        uint64_t v12 = (void *)(*(void *)(v11 + 48) + 16 * v10);
        *(void *)(v3 + 56) = *v12;
        *(void *)(v3 + 64) = v12[1];
        type metadata accessor for Peripheral();
        sub_100DB1F50(&qword_10165E890, (void (*)(uint64_t))&type metadata accessor for Peripheral);
        swift_bridgeObjectRetain();
        uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v15 = v14;
        a1 = sub_100D690D0;
        a2 = v13;
        a3 = v15;
        return _swift_task_switch(a1, a2, a3);
      }
      while (1)
      {
        int64_t v8 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          break;
        }
        if (v8 >= v17) {
          goto LABEL_2;
        }
        unint64_t v19 = *(void *)(v18 + 8 * v8);
        ++v20;
        if (v19) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
    return _swift_task_switch(a1, a2, a3);
  }
LABEL_2:
  swift_release();
  unint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v4);
}

uint64_t sub_100D69364(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for MACAddress();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101665590);
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100D69468, v2, 0);
}

uint64_t sub_100D69468()
{
  uint64_t v1 = v0[19];
  v0[2] = _swiftEmptyArrayStorage;
  v0[20] = type metadata accessor for CentralManager();
  static CentralManager.Options.needsRestrictedStateOperation.getter();
  uint64_t v2 = type metadata accessor for CentralManager.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100D6956C;
  uint64_t v4 = v0[19];
  return CentralManager.__allocating_init(options:)(v4);
}

uint64_t sub_100D6956C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D69684, v2, 0);
}

uint64_t sub_100D69684()
{
  uint64_t v21 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  v0[23] = sub_100010324(v5, (uint64_t)qword_10165E160);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[24] = v6;
  v0[25] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[16];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_100DB1F50((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Looking for CBPeripheral for attached accessory by MAC address: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[18], v0[15]);
  }

  v0[26] = v16;
  swift_retain();
  int64_t v17 = (void *)swift_task_alloc();
  v0[27] = v17;
  void *v17 = v0;
  v17[1] = sub_100D69968;
  uint64_t v18 = v0[22];
  return withTimeout<A>(_:block:)(v17, 1000000000000000000, 0, &unk_10165E868, v18, (char *)&type metadata for () + 8);
}

uint64_t sub_100D69968()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_100D6A5C0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 112);
    swift_release();
    uint64_t v4 = sub_100D69AB0;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100D69AB0()
{
  uint64_t v12 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[22];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[8] = sub_1008FA0F0(0xD000000000000032, 0x8000000101417FA0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    v0[9] = v3;
    sub_100DB1F50(&qword_10165E670, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s %s has powered on!", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  unint64_t v7 = (void *)swift_task_alloc();
  v0[29] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100D69D20;
  uint64_t v8 = v0[13];
  return v10(v8);
}

uint64_t sub_100D69D20(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[14];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100D6A7D4;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[14];
    uint64_t v5 = sub_100D69E48;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100D69E48()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  if (v1)
  {
    swift_retain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 48) = v1;
      type metadata accessor for Peripheral();
      sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
      uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v5, v6, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found peripheral by MAC address: %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 192))(*(void *)(v0 + 136), *(void *)(v0 + 104), *(void *)(v0 + 120));
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v11 = *(void *)(v0 + 120);
    if (v9)
    {
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100DB1F50((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v13, v14, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v21(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No CBPeripheral found for %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 208))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    }
  }
  uint64_t v15 = *(void *)(v0 + 16);
  *(void *)(v0 + 256) = v15;
  *(void *)(v0 + 32) = v15;
  swift_bridgeObjectRetain();
  int64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v16;
  uint64_t v17 = sub_10000588C(&qword_10165E880);
  uint64_t v18 = sub_100062734(&qword_10165E888, &qword_10165E880);
  void *v16 = v0;
  v16[1] = sub_100D6A2E0;
  uint64_t v19 = *(void *)(v0 + 112);
  return Sequence.asyncFilter(_:)(&unk_10165E878, v19, v17, v18);
}

uint64_t sub_100D6A2E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100D6A438, v2, 0);
}

void sub_100D6A438()
{
  unint64_t v1 = v0[34];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v2 = 1;
    goto LABEL_9;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  Peripheral.id.getter();
  swift_release();
  uint64_t v2 = 0;
LABEL_9:
  swift_release();
  uint64_t v4 = v0[12];
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, v2, 1, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = (void (*)(void))v0[1];
  v6();
}

uint64_t sub_100D6A5C0()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error while retrieving peripheral: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[12];
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100D6A7D4()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error while retrieving peripheral: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[12];
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100D6A9E8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_100D6AA08, 0, 0);
}

uint64_t sub_100D6AA08()
{
  sub_10000588C((uint64_t *)&unk_1016665D0);
  uint64_t v1 = type metadata accessor for CentralManager.State();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 24) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  unint64_t v6 = v5 + v4;
  uint64_t v7 = *(void (**)(unint64_t, void, uint64_t))(v2 + 104);
  v7(v6, enum case for CentralManager.State.poweredOn(_:), v1);
  v7(v6 + v3, enum case for CentralManager.State.restricted(_:), v1);
  os_log_type_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v8;
  uint64_t v9 = type metadata accessor for CentralManager();
  uint64_t v10 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *os_log_type_t v8 = v0;
  v8[1] = sub_100D6ABD4;
  return CentralManagerProtocol.await(states:)(v5, v9, v10);
}

uint64_t sub_100D6ABD4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100D6AD10, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100D6AD10()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D6AD74(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = v4;
  v5[3] = a2;
  v5[1] = sub_1003871AC;
  return _swift_task_switch(sub_100D68E78, a2, 0);
}

uint64_t sub_100D6AE24()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100D6BBBC(v0 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100D6AEE0()
{
  sub_100D6AE24();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100D6AF0C()
{
  return type metadata accessor for PencilPairingService(0);
}

uint64_t type metadata accessor for PencilPairingService(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10165E1D0);
}

uint64_t sub_100D6AF34()
{
  uint64_t result = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165E538);
}

uint64_t *sub_100D6B030(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_10000588C(&qword_10163D210);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100D6B124(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100D6B18C(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100D6B224(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100D6BBBC(a1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_10000588C(&qword_10163D210);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for PencilPairingService.PeripheralDiscovery(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10165E480);
}

uint64_t sub_100D6B300(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100D6B398(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100D6BBBC(a1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_10000588C(&qword_10163D210);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_100D6B45C()
{
  sub_100D6B4E4();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_100D6B4E4()
{
  if (!qword_10165E490)
  {
    type metadata accessor for Peripheral();
    unint64_t v0 = type metadata accessor for Identifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10165E490);
    }
  }
}

uint64_t *sub_100D6B53C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = sub_10000588C(&qword_10163D210);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
    }
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100D6B73C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      a1 += *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
      uint64_t v3 = sub_10000588C(&qword_10163D210);
      goto LABEL_6;
    }
    if (result) {
      return result;
    }
  }
  uint64_t v3 = type metadata accessor for UUID();
LABEL_6:
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v5(a1, v3);
}

char *sub_100D6B820(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_10000588C(&qword_10163D210);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
  }
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_100D6B9DC(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100D6BBBC((uint64_t)a1, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = sub_10000588C(&qword_10163D210);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
    }
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100D6BBBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_100D6BC1C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_10000588C(&qword_10163D210);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
  }
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_100D6BDD8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100D6BBBC((uint64_t)a1, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = *(int *)(sub_10000588C(&qword_10165E4C0) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = sub_10000588C(&qword_10163D210);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
    }
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_100D6BFB8()
{
  uint64_t v0 = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(v0 - 8) + 64;
    uint64_t v5 = v2;
    sub_100D6B4E4();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v4;
      uint64_t v7 = v2;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

uint64_t sub_100D6C094()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4AD2C();
}

uint64_t sub_100D6C120(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_100D6C140, v3, 0);
}

uint64_t sub_100D6C140()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100D6C1E4;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_101215028(v2);
}

uint64_t sub_100D6C1E4(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_100D6C2E4(uint64_t a1)
{
  uint64_t result = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100D6C33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a1;
  uint64_t v58 = a4;
  uint64_t v56 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v39 = v7;
  uint64_t v59 = *(void **)(v7 - 8);
  uint64_t v8 = v59[8];
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v41 = (char *)&v39 - v10;
  uint64_t v12 = sub_10000588C(&qword_10163D210);
  uint64_t v55 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v50 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v40 = (char *)&v39 - v16;
  uint64_t v53 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue);
  uint64_t v52 = type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v18 = swift_allocObject();
  uint64_t v49 = v18;
  swift_weakInit();
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v48(v17, v56, v12);
  uint64_t v19 = v59;
  uint64_t v47 = (void (*)(char *, uint64_t, uint64_t))v59[2];
  v47(v11, v57, v7);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = (v20 + 24) & ~v20;
  uint64_t v22 = *((unsigned __int8 *)v19 + 80);
  uint64_t v46 = v14 + v22;
  uint64_t v23 = (v14 + v22 + v21) & ~v22;
  uint64_t v44 = v8 + 7;
  uint64_t v45 = v20 | v22 | 7;
  unint64_t v24 = (v8 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v18;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  uint64_t v42 = v13 + 32;
  uint64_t v43 = v26;
  uint64_t v27 = v55;
  v26(v25 + v21, v40, v55);
  uint64_t v28 = v25 + v23;
  uint64_t v29 = (char *)v59[4];
  v59 += 4;
  uint64_t v40 = v29;
  uint64_t v30 = v39;
  ((void (*)(uint64_t, char *, uint64_t))v29)(v28, v41, v39);
  *(void *)(v25 + v24) = v58;
  uint64_t v31 = v50;
  v48(v50, v56, v27);
  uint64_t v32 = v51;
  uint64_t v33 = v30;
  v47(v51, v57, v30);
  uint64_t v34 = (v20 + 16) & ~v20;
  uint64_t v35 = (v46 + v34) & ~v22;
  unint64_t v36 = (v44 + v35) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  v43(v37 + v34, v31, v55);
  ((void (*)(uint64_t, char *, uint64_t))v40)(v37 + v35, v32, v33);
  *(void *)(v37 + v36) = v58;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  swift_release();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100D6C78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016565A0);
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = *(void *)(v6 + 64);
  v4[12] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v4[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[14] = v8;
  v4[15] = *(void *)(v8 + 64);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_100D6C8C4, 0, 0);
}

uint64_t sub_100D6C8C4()
{
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v15 = v0[12];
  uint64_t v16 = v0[15];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[9];
  uint64_t v17 = v0[11];
  uint64_t v18 = v0[8];
  uint64_t v13 = v1;
  uint64_t v14 = v0[7];
  uint64_t v12 = v0[6];
  uint64_t v6 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v12, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v15, v14, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v8 = (v16 + *(unsigned __int8 *)(v4 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  v0[17] = v9;
  *(void *)(v9 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + v7, v13, v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v15, v5);
  *(void *)(v9 + ((v17 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[18] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D6CB04;
  return withTimeout<A>(_:block:)(v10, 0x40AAD21B3B700000, 3, &unk_10165E650, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_100D6CB04()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100D6CC90;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100D6CC20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D6CC20()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D6CC90()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D6CD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[33] = a3;
  v4[34] = a4;
  v4[32] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[35] = v5;
  v4[36] = *(void *)(v5 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[41] = v6;
  v4[42] = *(void *)(v6 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CentralManager.State();
  v4[46] = v7;
  v4[47] = *(void *)(v7 - 8);
  v4[48] = swift_task_alloc();
  return _swift_task_switch(sub_100D6CECC, 0, 0);
}

uint64_t sub_100D6CECC()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[49] = Strong;
  if (Strong)
  {
    v0[50] = type metadata accessor for CentralManager();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[51] = v2;
    void *v2 = v0;
    v2[1] = sub_100D6D040;
    return static CentralManager.pairingCentralManager.getter();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_100D6D040(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 416) = a1;
  *(void *)(v3 + 424) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100D704E8;
  }
  else {
    uint64_t v4 = sub_100D6D154;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D6D154()
{
  (*(void (**)(void, void, void))(v0[47] + 104))(v0[48], enum case for CentralManager.State.poweredOn(_:), v0[46]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[54] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D6D250;
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[48];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_100D6D250()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[47] + 8))(v2[48], v2[46]);
  if (v0) {
    uint64_t v3 = sub_100D705B4;
  }
  else {
    uint64_t v3 = sub_100D6D3B8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100D6D3B8()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[56] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[52];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[29] = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[30] = v5;
    sub_100DB1F50(&qword_10165E670, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[31] = sub_1008FA0F0(v7, v8, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %s has powered on!", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v9 = v0[40];
  uint64_t v10 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[33];
  sub_10000588C(&qword_10165E658);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  v0[57] = v16;
  v0[58] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v16(v15, v12, v10);
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000B7034(0, 1, 0);
  v16(v9, v15, v10);
  Identifier.id.getter();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[59] = v17;
  v0[60] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v9, v10);
  uint64_t v18 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000B7034(0, v18[2] + 1, 1);
    uint64_t v18 = v27;
  }
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1)
  {
    sub_1000B7034(v19 > 1, v20 + 1, 1);
    uint64_t v18 = v27;
  }
  v0[61] = v18;
  uint64_t v21 = v0[45];
  uint64_t v22 = v0[41];
  uint64_t v23 = v0[42];
  v18[2] = v20 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v20, v21, v22);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v26 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  unint64_t v24 = (void *)swift_task_alloc();
  v0[62] = v24;
  *unint64_t v24 = v0;
  v24[1] = sub_100D6D820;
  return v26(v18);
}

uint64_t sub_100D6D820(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 504) = a1;
  *(void *)(v3 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    BOOL v4 = sub_100D7068C;
  }
  else
  {
    swift_release();
    BOOL v4 = sub_100D6D93C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D6D93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = v3;
  unint64_t v4 = v3[63];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_3:
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return _swift_task_switch(a1, a2, a3);
        }
        uint64_t v5 = *(void *)(v3[63] + 32);
        swift_retain();
      }
      v3[65] = v5;
      swift_bridgeObjectRelease();
      swift_retain_n();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446466;
        v3[25] = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2080;
        v3[26] = v5;
        type metadata accessor for Peripheral();
        sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
        uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
        v3[27] = sub_1008FA0F0(v9, v10, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Retrieved peripheral: %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v11 = (void *)swift_task_alloc();
      v3[66] = v11;
      *uint64_t v11 = v3;
      v11[1] = sub_100D6DEA8;
      a2 = v3[49];
      v11[2] = v5;
      v11[3] = a2;
      a1 = (uint64_t)sub_100D68E78;
      a3 = 0;
      return _swift_task_switch(a1, a2, a3);
    }
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v3[57];
  uint64_t v14 = v3[39];
  uint64_t v15 = v3[35];
  uint64_t v16 = v3[33];
  swift_bridgeObjectRelease();
  v13(v14, v16, v15);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  unint64_t v20 = (void (*)(uint64_t, uint64_t))v3[59];
  uint64_t v21 = v3[39];
  uint64_t v22 = v3[35];
  if (v19)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v3[28] = sub_1008FA0F0(v24, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing peripheral for %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v20(v3[39], v3[35]);
  }

  sub_1004AF24C();
  swift_allocError();
  *(_OWORD *)uint64_t v26 = xmmword_10137D8A0;
  *(unsigned char *)(v26 + 16) = 3;
  swift_willThrow();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v3[1];
  return v27();
}

uint64_t sub_100D6DEA8(char a1)
{
  *(unsigned char *)(*(void *)v1 + 640) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D6DFA8, 0, 0);
}

uint64_t sub_100D6DFA8()
{
  uint64_t v26 = v0;
  if (*(unsigned char *)(v0 + 640) == 1)
  {
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t v1 = (void *)qword_10170EE68;
    id v2 = [self sharedInstance];
    unsigned int v3 = [v2 isInternalBuild];

    if (v3
      && (NSString v4 = String._bridgeToObjectiveC()(),
          unsigned __int8 v5 = [v1 BOOLForKey:v4],
          v4,
          (v5 & 1) != 0))
    {
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing notification is enabled! Proceed with pairing", v8, 2u);
        swift_slowDealloc();
      }

      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 624) = v9;
      void *v9 = v0;
      v9[1] = sub_100D70248;
      uint64_t v10 = *(void *)(v0 + 520);
      return sub_100D70BFC(v10);
    }
    else
    {
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_100D6E468;
      uint64_t v22 = *(void *)(v0 + 520);
      return sub_100D7B3DC(v22);
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 456))(*(void *)(v0 + 296), *(void *)(v0 + 264), *(void *)(v0 + 280));
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 280);
    if (v14)
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 144) = sub_1008FA0F0(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v15(v16, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unsupported local findable accessory %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v15(*(void *)(v0 + 296), *(void *)(v0 + 280));
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_1013540C0;
    *(unsigned char *)(v23 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_100D6E468(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 641) = a1;
  *(void *)(v3 + 544) = v1;
  swift_task_dealloc();
  if (v1) {
    NSString v4 = sub_100D70854;
  }
  else {
    NSString v4 = sub_100D6E580;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D6E580()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0;
  id v2 = (long long *)(v0 + 16);
  uint64_t v3 = (void *)(v0 + 56);
  NSString v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = *(unsigned char *)(v1 + 641);
    uint64_t v7 = swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    *(void *)(v1 + 184) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2082;
    unint64_t v8 = sub_100C0646C(v6);
    *(void *)(v1 + 192) = sub_1008FA0F0(v8, v9, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s accountCheckResult: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  switch(*(unsigned char *)(v1 + 641))
  {
    case 2:
    case 4:
      uint64_t v12 = qword_1016375E8;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v2, (uint64_t *)&unk_101638D30);
      if (!*(void *)(v1 + 40))
      {
        __break(1u);
        JUMPOUT(0x100D6EC00);
      }
      sub_10001CEB0(v2, (uint64_t)v3);
      swift_release();
      sub_10001CD44(v3, *(void *)(v1 + 80));
      uint64_t v25 = (uint64_t (__cdecl *)())((char *)&dword_101639180 + dword_101639180);
      os_log_type_t v13 = (void *)swift_task_alloc();
      *(void *)(v1 + 568) = v13;
      *os_log_type_t v13 = v1;
      v13[1] = sub_100D6EEB8;
      uint64_t result = v25();
      break;
    case 3:
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446210;
        *(void *)(v1 + 176) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Paired to this account. Proceed with pairing", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      os_log_type_t v18 = (void *)swift_task_alloc();
      *(void *)(v1 + 552) = v18;
      *os_log_type_t v18 = v1;
      v18[1] = sub_100D6EC18;
      uint64_t v19 = *(void *)(v1 + 520);
      uint64_t result = sub_100D70BFC(v19);
      break;
    case 5:
      unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v1 + 472);
      uint64_t v21 = *(void *)(v1 + 320);
      uint64_t v22 = *(void *)(v1 + 280);
      Peripheral.id.getter();
      Identifier.id.getter();
      v20(v21, v22);
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v1 + 616) = v23;
      *uint64_t v23 = v1;
      v23[1] = sub_100D6FF64;
      uint64_t v24 = *(void *)(v1 + 344);
      uint64_t result = sub_100D7D230(v24, 0, 0xF000000000000000);
      break;
    default:
      uint64_t v10 = *(void *)(v1 + 544);
      static Task<>.checkCancellation()();
      if (!v10)
      {
        sub_10000588C((uint64_t *)&unk_1016565A0);
        CheckedContinuation.resume(returning:)();
      }
      swift_release();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v11 = *(uint64_t (**)(void))(v1 + 8);
      uint64_t result = v11();
      break;
  }
  return result;
}

uint64_t sub_100D6EC18()
{
  *(void *)(*(void *)v1 + 560) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_100D70938;
  }
  else {
    id v2 = sub_100D6ED2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D6ED2C()
{
  uint64_t v1 = *(void *)(v0 + 560);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D6EEB8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D6EFB8, 0, 0);
}

uint64_t sub_100D6EFB8()
{
  uint64_t v1 = v0 + 56;
  if (*(void *)(v0 + 576))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = *(void *)(v0 + 576);
    return _swift_task_switch(sub_100D6F144, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000025;
    v3[1] = 0x8000000101417C70;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100D6F144()
{
  uint64_t v1 = *(void *)(v0 + 576);
  if (*(unsigned char *)(v1 + 145) == 1)
  {
    uint64_t v2 = sub_100D6F188;
  }
  else
  {
    *(unsigned char *)(v0 + 642) = *(unsigned char *)(v1 + 146);
    uint64_t v2 = sub_100D6F424;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D6F188()
{
  unint64_t v8 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    v0[21] = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Onboarding is showing. Abort pairing.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v4 = v0[68];
  static Task<>.checkCancellation()();
  if (!v4)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D6F424()
{
  uint64_t v13 = v0;
  if (*(unsigned char *)(v0 + 642))
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136446210;
      *(void *)(v0 + 168) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Onboarding is showing. Abort pairing.", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v4 = *(void *)(v0 + 544);
    static Task<>.checkCancellation()();
    if (!v4)
    {
      sub_10000588C((uint64_t *)&unk_1016565A0);
      CheckedContinuation.resume(returning:)();
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v8 = *(void *)(v0 + 280);
    Peripheral.id.getter();
    Identifier.id.getter();
    v6(v7, v8);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v9;
    void *v9 = v0;
    v9[1] = sub_100D6F780;
    uint64_t v10 = *(void *)(v0 + 352);
    return sub_100D638A8(v10);
  }
}

uint64_t sub_100D6F780(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 336);
  *(void *)(v4 + 592) = v1;
  swift_task_dealloc();
  uint64_t v6 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = *(void *)(v4 + 352);
  uint64_t v8 = *(void *)(v4 + 328);
  if (v1)
  {
    (*v6)(v7, v8);
    uint64_t v9 = sub_100D70A1C;
  }
  else
  {
    *(unsigned char *)(v4 + 643) = a1 & 1;
    (*v6)(v7, v8);
    uint64_t v9 = sub_100D6F910;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100D6F910()
{
  uint64_t v13 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 643);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  if (v1 == 1)
  {
    if (v4)
    {
      uint64_t v5 = swift_slowAlloc();
      v12[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446466;
      *(void *)(v0 + 152) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v0 + 160) = sub_1008FA0F0(1702195828, 0xE400000000000000, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Not paired, isFindMyEnabled = %s. Proceed with pairing", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100D6FCBC;
    uint64_t v7 = *(void *)(v0 + 520);
    return sub_100D70BFC(v7);
  }
  else
  {
    if (v4)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "FindMy pairing was declined previously. Ignoring.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 592);

    static Task<>.checkCancellation()();
    if (!v10)
    {
      sub_10000588C((uint64_t *)&unk_1016565A0);
      CheckedContinuation.resume(returning:)();
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100D6FCBC()
{
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100D70B0C;
  }
  else {
    os_log_type_t v2 = sub_100D6FDD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D6FDD0()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 608);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D6FF64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344);
  uint64_t v2 = *(void *)(*(void *)v0 + 336);
  uint64_t v3 = *(void *)(*(void *)v0 + 328);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100D700BC, 0, 0);
}

uint64_t sub_100D700BC()
{
  uint64_t v1 = *(void *)(v0 + 544);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D70248()
{
  *(void *)(*(void *)v1 + 632) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D70770;
  }
  else {
    uint64_t v2 = sub_100D7035C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D7035C()
{
  uint64_t v1 = *(void *)(v0 + 632);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D704E8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D705B4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D7068C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70770()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70854()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70938()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70A1C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70B0C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D70BFC(uint64_t a1)
{
  v2[348] = v1;
  v2[347] = a1;
  v2[349] = *v1;
  sub_10000588C(&qword_10164DBB0);
  v2[350] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for BinaryDecoder();
  v2[351] = v3;
  v2[352] = *(void *)(v3 - 8);
  v2[353] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BinaryEncoder();
  v2[354] = v4;
  v2[355] = *(void *)(v4 - 8);
  v2[356] = swift_task_alloc();
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[357] = v5;
  v2[358] = *(void *)(v5 - 8);
  v2[359] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639A70);
  v2[360] = v6;
  v2[361] = *(void *)(v6 - 8);
  v2[362] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[363] = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  v2[364] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Peripheral.ConnectionOptions();
  v2[365] = v7;
  v2[366] = *(void *)(v7 - 8);
  v2[367] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v2[368] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v2[369] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AccessoryProductInfo();
  v2[370] = v8;
  v2[371] = *(void *)(v8 - 8);
  v2[372] = swift_task_alloc();
  v2[373] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10166BFA0);
  v2[374] = swift_task_alloc();
  v2[375] = swift_task_alloc();
  v2[376] = swift_task_alloc();
  v2[377] = swift_task_alloc();
  type metadata accessor for RawAccessoryMetadata(0);
  v2[378] = swift_task_alloc();
  v2[379] = type metadata accessor for AccessoryMetadata(0);
  v2[380] = swift_task_alloc();
  v2[381] = swift_task_alloc();
  v2[382] = swift_task_alloc();
  v2[383] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v2[384] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  v2[385] = v9;
  v2[386] = *(void *)(v9 - 8);
  v2[387] = swift_task_alloc();
  v2[388] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v2[389] = v10;
  v2[390] = *(void *)(v10 - 8);
  v2[391] = swift_task_alloc();
  v2[392] = swift_task_alloc();
  v2[393] = swift_task_alloc();
  v2[394] = swift_task_alloc();
  return _swift_task_switch(sub_100D711BC, v1, 0);
}

uint64_t sub_100D711BC()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 2392) = My;
  *(void *)(v0 + 2400) = sub_100DB1F50((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 2368));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2368);
  if (My)
  {
    uint64_t v3 = qword_1016375E8;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 2448, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 2472))
    {
      sub_10001CEB0((long long *)(v0 + 2448), v0 + 2408);
      swift_release();
      sub_10001CD44((void *)(v0 + 2408), *(void *)(v0 + 2432));
      uint64_t v12 = (uint64_t (*)(void))((char *)&dword_101639150 + dword_101639150);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 3160) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100D71670;
      return v12();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10165E160);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Feature.FindMy.lineUp is disabled!", v9, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_1013540C0;
    *(unsigned char *)(v10 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  return result;
}

uint64_t sub_100D71670(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2784);
  *(void *)(*(void *)v1 + 3168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D71788, v2, 0);
}

uint64_t sub_100D71788()
{
  uint64_t v1 = (uint64_t)(v0 + 301);
  if (v0[396])
  {
    uint64_t v2 = v0[388];
    uint64_t v3 = v0[386];
    uint64_t v4 = v0[385];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[397] = type metadata accessor for Peripheral();
    v0[398] = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    Identifier.id.getter();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v0[399] = v5;
    v0[400] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v5(v2, v4);
    uint64_t v6 = v0[396];
    return _swift_task_switch(sub_100D71ABC, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000013;
    v7[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100D71ABC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[401] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D71B5C;
  uint64_t v2 = v0[394];
  uint64_t v3 = v0[384];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100D71B5C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 2784);
  if (v0) {
    uint64_t v4 = sub_100D72E74;
  }
  else {
    uint64_t v4 = sub_100D71C88;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D71C88()
{
  uint64_t v116 = v0;
  uint64_t v1 = *(void *)(v0 + 3072);
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
  if (v3 != 1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 3152);
    uint64_t v12 = *(void *)(v0 + 3144);
    uint64_t v13 = *(void *)(v0 + 3120);
    uint64_t v14 = *(void *)(v0 + 3112);
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 3144);
    uint64_t v20 = *(void *)(v0 + 3120);
    uint64_t v21 = *(void *)(v0 + 3112);
    if (v18)
    {
      uint64_t v22 = swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446466;
      *(void *)(v0 + 2648) = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2082;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 2592) = sub_1008FA0F0(v23, v24, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v25(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s Found existing record for %{public}s. Not pairing", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v25(*(void *)(v0 + 3144), *(void *)(v0 + 3112));
    }

    uint64_t v58 = *(void *)(v0 + 3152);
    uint64_t v59 = *(void *)(v0 + 3112);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v60 = xmmword_101354080;
    *(unsigned char *)(v60 + 16) = 3;
    swift_willThrow();
    swift_release();
    v25(v58, v59);
    goto LABEL_19;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 3224) = sub_100010324(v4, (uint64_t)qword_10165E160);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 2776);
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    v115[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    *(void *)(v0 + 2768) = v7;
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 2680) = sub_1008FA0F0(v9, v10, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reading DIS from peripheral: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 2512) = 0x7365547265646E75;
  *(void *)(v0 + 2520) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 3530) == 1)
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 3192);
    uint64_t v27 = *(void *)(v0 + 3096);
    uint64_t v28 = *(void *)(v0 + 3080);
    dispatch thunk of PeripheralProtocol.id.getter();
    Identifier.id.getter();
    v26(v27, v28);
    uint64_t v29 = sub_1002AAF08(76, 1106);
    if (v30 >> 60 == 15)
    {
      __break(1u);
      return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v29, v30, v31, v32);
    }
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    uint64_t v35 = *(void *)(v0 + 3136);
    uint64_t v36 = *(void *)(v0 + 3120);
    uint64_t v37 = *(void *)(v0 + 3112);
    uint64_t v38 = *(void *)(v0 + 3056);
    uint64_t v39 = *(int **)(v0 + 3032);
    uint64_t v40 = v38 + v39[10];
    *(void *)uint64_t v40 = 0;
    *(void *)(v40 + 8) = 0;
    *(unsigned char *)(v40 + 16) = 1;
    uint64_t v41 = (void *)(v38 + v39[15]);
    *uint64_t v41 = 0;
    v41[1] = 0xE000000000000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v35, v37);
    uint64_t v42 = (uint64_t *)(v38 + v39[5]);
    uint64_t *v42 = v33;
    v42[1] = v34;
    *(_DWORD *)(v38 + v39[8]) = 4063235;
    uint64_t v43 = (void *)(v38 + v39[7]);
    *uint64_t v43 = 0;
    v43[1] = 0;
    uint64_t v44 = (void *)(v38 + v39[6]);
    void *v44 = 0;
    v44[1] = 0;
    uint64_t v45 = v38 + v39[9];
    *(_DWORD *)uint64_t v45 = 0;
    *(unsigned char *)(v45 + 4) = 1;
    uint64_t v46 = v38 + v39[11];
    *(void *)uint64_t v46 = 0;
    *(unsigned char *)(v46 + 8) = 1;
    uint64_t v47 = v38 + v39[12];
    *(_DWORD *)uint64_t v47 = 0;
    *(unsigned char *)(v47 + 4) = 1;
    *(unsigned char *)(v38 + v39[13]) = 4;
    *(unsigned char *)(v38 + v39[14]) = 5;
    uint64_t v48 = *(void *)(v0 + 3216);
    uint64_t v49 = *(void *)(v0 + 3064);
    uint64_t v50 = *(void *)(v0 + 3040);
    sub_100DB2DE8(*(void *)(v0 + 3056), v49, type metadata accessor for AccessoryMetadata);
    sub_100DB2E50(v49, v50, type metadata accessor for AccessoryMetadata);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v54 = *(void *)(v0 + 3040);
    uint64_t v113 = v48;
    if (v53)
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136446210;
      uint64_t v56 = sub_1001A9070();
      *(void *)(v0 + 2760) = sub_1008FA0F0(v56, v57, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v54, type metadata accessor for AccessoryMetadata);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "DIS: %{public}s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(v54, type metadata accessor for AccessoryMetadata);
    }

    *(void *)(v0 + 2544) = 0x7365547265646E75;
    *(void *)(v0 + 2552) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0 + 3529) == 1)
    {
      uint64_t v66 = *(void *)(v0 + 3128);
      uint64_t v67 = *(void *)(v0 + 3120);
      uint64_t v68 = *(void *)(v0 + 3112);
      uint64_t v69 = *(void *)(v0 + 3008);
      uint64_t v70 = *(void *)(v0 + 2968);
      uint64_t v71 = *(void *)(v0 + 2960);
      type metadata accessor for BeaconStore(0);
      UUID.init()();
      sub_10114615C(v66, 0, v69);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v69, 0, 1, v71);
      uint64_t v72 = *(void *)(v0 + 3016);
      uint64_t v73 = *(void *)(v0 + 2992);
      uint64_t v74 = *(void *)(v0 + 2968);
      uint64_t v75 = *(void *)(v0 + 2960);
      sub_10001D608(*(void *)(v0 + 3008), v72, (uint64_t *)&unk_10166BFA0);
      sub_10001D074(v72, v73, (uint64_t *)&unk_10166BFA0);
      int v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v75);
      uint64_t v77 = *(void *)(v0 + 2992);
      if (v76 == 1)
      {
        sub_10001DAB4(v77, (uint64_t *)&unk_10166BFA0);
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v78, v79))
        {
          uint64_t v80 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v80 = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, v79, "Missing product info!", v80, 2u);
          swift_slowDealloc();
        }
        uint64_t v81 = *(void *)(v0 + 3152);
        uint64_t v82 = *(void *)(v0 + 3120);
        uint64_t v83 = *(void *)(v0 + 3112);
        uint64_t v84 = *(void *)(v0 + 3064);
        uint64_t v85 = *(void *)(v0 + 3016);

        sub_1004AF24C();
        swift_allocError();
        *(_OWORD *)uint64_t v86 = xmmword_10137D8B0;
        *(unsigned char *)(v86 + 16) = 3;
        swift_willThrow();
        swift_release();
        sub_10001DAB4(v85, (uint64_t *)&unk_10166BFA0);
        sub_100D6BBBC(v84, type metadata accessor for AccessoryMetadata);
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
        goto LABEL_19;
      }
      uint64_t v90 = *(void *)(v0 + 2984);
      uint64_t v91 = *(void *)(v0 + 2976);
      sub_100DB2DE8(v77, v90, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      sub_100DB2E50(v90, v91, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      BOOL v94 = os_log_type_enabled(v92, v93);
      uint64_t v95 = *(void *)(v0 + 2976);
      if (v94)
      {
        unint64_t v96 = (uint8_t *)swift_slowAlloc();
        v115[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v96 = 136446210;
        uint64_t v97 = sub_1011E56F0();
        *(void *)(v0 + 2752) = sub_1008FA0F0(v97, v98, v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100D6BBBC(v95, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Product info: %{public}s)", v96, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100D6BBBC(*(void *)(v0 + 2976), (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      }

      sub_100D95484(*(void *)(v0 + 3064), *(void *)(v0 + 2984));
      if (v113)
      {
        uint64_t v99 = *(void *)(v0 + 3152);
        uint64_t v100 = *(void *)(v0 + 3120);
        uint64_t v101 = *(void *)(v0 + 3112);
        uint64_t v102 = *(void *)(v0 + 3064);
        uint64_t v103 = *(void *)(v0 + 3016);
        uint64_t v104 = *(void *)(v0 + 2984);
        swift_release();
        sub_100D6BBBC(v104, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        sub_10001DAB4(v103, (uint64_t *)&unk_10166BFA0);
        sub_100D6BBBC(v102, type metadata accessor for AccessoryMetadata);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
LABEL_19:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
        return v61();
      }
      uint64_t v105 = *(void *)(v0 + 2952);
      uint64_t v106 = *(void *)(v0 + 2944);
      uint64_t v107 = *(void *)(v0 + 2912);
      uint64_t v108 = type metadata accessor for ConnectUseCase();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v105, 1, 1, v108);
      sub_10000588C(&qword_101639AA8);
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16) = xmmword_101347BA0;
      static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
      static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
      *(void *)(v0 + 2584) = v109;
      sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
      sub_10000588C(&qword_101639AB8);
      sub_100062734(&qword_101639AC0, &qword_101639AB8);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v110 = type metadata accessor for PeripheralPairingInfo();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v107, 1, 1, v110);
      Peripheral.Options.init(connectionOptions:pairingInfo:)();
      uint64_t v111 = type metadata accessor for Peripheral.Options();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v106, 0, 1, v111);
      BOOL v112 = (void *)swift_task_alloc();
      *(void *)(v0 + 3280) = v112;
      *BOOL v112 = v0;
      v112[1] = sub_100D74098;
      uint64_t v32 = *(void *)(v0 + 3184);
      uint64_t v31 = *(void *)(v0 + 3176);
      unint64_t v30 = *(void *)(v0 + 2944);
      uint64_t v29 = *(void *)(v0 + 2952);
      return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v29, v30, v31, v32);
    }
    type metadata accessor for AccessoryMetadataManager();
    uint64_t v87 = (void *)swift_task_alloc();
    *(void *)(v0 + 3264) = v87;
    void *v87 = v0;
    v87[1] = sub_100D73F6C;
    uint64_t v88 = *(void *)(v0 + 3064);
    uint64_t v89 = *(void *)(v0 + 3000);
    return sub_1002F7378(v89, v88, 3);
  }
  else
  {
    uint64_t v114 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10165E678 + dword_10165E678);
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 3232) = v63;
    void *v63 = v0;
    v63[1] = sub_100D73098;
    uint64_t v64 = *(void *)(v0 + 3024);
    uint64_t v65 = *(void *)(v0 + 2776);
    return v114(v64, v65);
  }
}

uint64_t sub_100D72E74()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D73098()
{
  *(void *)(*(void *)v1 + 3240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D73244;
  }
  else {
    uint64_t v2 = sub_100D731AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D731AC()
{
  uint64_t v1 = v0[405];
  sub_1001A9FB0(v0[378], v0[381]);
  v0[406] = v1;
  if (v1)
  {
    v0[407] = v1;
    uint64_t v2 = v0[348];
    uint64_t v3 = sub_100D73D48;
  }
  else
  {
    uint64_t v2 = v0[348];
    uint64_t v3 = sub_100D73268;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100D73244()
{
  v0[407] = v0[405];
  return _swift_task_switch(sub_100D73D48, v0[348], 0);
}

uint64_t sub_100D73268()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 3248);
  uint64_t v2 = *(void *)(v0 + 3064);
  uint64_t v3 = *(void *)(v0 + 3040);
  sub_100DB2DE8(*(void *)(v0 + 3048), v2, type metadata accessor for AccessoryMetadata);
  sub_100DB2E50(v2, v3, type metadata accessor for AccessoryMetadata);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v63 = v1;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 3040);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = sub_1001A9070();
    *(void *)(v0 + 2760) = sub_1008FA0F0(v8, v9, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v6, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DIS: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(*(void *)(v0 + 3040), type metadata accessor for AccessoryMetadata);
  }

  *(void *)(v0 + 2544) = 0x7365547265646E75;
  *(void *)(v0 + 2552) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 3529) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 3128);
    uint64_t v11 = *(void *)(v0 + 3120);
    uint64_t v12 = *(void *)(v0 + 3112);
    uint64_t v13 = *(void *)(v0 + 3008);
    uint64_t v14 = *(void *)(v0 + 2968);
    uint64_t v15 = *(void *)(v0 + 2960);
    type metadata accessor for BeaconStore(0);
    UUID.init()();
    sub_10114615C(v10, 0, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v15);
    uint64_t v16 = *(void *)(v0 + 3016);
    uint64_t v17 = *(void *)(v0 + 2992);
    uint64_t v18 = *(void *)(v0 + 2968);
    uint64_t v19 = *(void *)(v0 + 2960);
    sub_10001D608(*(void *)(v0 + 3008), v16, (uint64_t *)&unk_10166BFA0);
    sub_10001D074(v16, v17, (uint64_t *)&unk_10166BFA0);
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v17, 1, v19);
    uint64_t v21 = *(void *)(v0 + 2992);
    if (v20 == 1)
    {
      sub_10001DAB4(v21, (uint64_t *)&unk_10166BFA0);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Missing product info!", v24, 2u);
        swift_slowDealloc();
      }
      uint64_t v25 = *(void *)(v0 + 3152);
      uint64_t v26 = *(void *)(v0 + 3120);
      uint64_t v27 = *(void *)(v0 + 3112);
      uint64_t v28 = *(void *)(v0 + 3064);
      uint64_t v29 = *(void *)(v0 + 3016);

      sub_1004AF24C();
      swift_allocError();
      *(_OWORD *)uint64_t v30 = xmmword_10137D8B0;
      *(unsigned char *)(v30 + 16) = 3;
      swift_willThrow();
      swift_release();
      sub_10001DAB4(v29, (uint64_t *)&unk_10166BFA0);
      sub_100D6BBBC(v28, type metadata accessor for AccessoryMetadata);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      goto LABEL_17;
    }
    uint64_t v35 = *(void *)(v0 + 2984);
    uint64_t v36 = *(void *)(v0 + 2976);
    sub_100DB2DE8(v21, v35, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_100DB2E50(v35, v36, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 2976);
    if (v39)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136446210;
      uint64_t v42 = sub_1011E56F0();
      *(void *)(v0 + 2752) = sub_1008FA0F0(v42, v43, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v40, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Product info: %{public}s)", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(*(void *)(v0 + 2976), (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    }

    sub_100D95484(*(void *)(v0 + 3064), *(void *)(v0 + 2984));
    if (v63)
    {
      uint64_t v44 = *(void *)(v0 + 3152);
      uint64_t v45 = *(void *)(v0 + 3120);
      uint64_t v46 = *(void *)(v0 + 3112);
      uint64_t v47 = *(void *)(v0 + 3064);
      uint64_t v48 = *(void *)(v0 + 3016);
      uint64_t v49 = *(void *)(v0 + 2984);
      swift_release();
      sub_100D6BBBC(v49, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      sub_10001DAB4(v48, (uint64_t *)&unk_10166BFA0);
      sub_100D6BBBC(v47, type metadata accessor for AccessoryMetadata);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
LABEL_17:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
      return v50();
    }
    uint64_t v51 = *(void *)(v0 + 2952);
    uint64_t v52 = *(void *)(v0 + 2944);
    uint64_t v53 = *(void *)(v0 + 2912);
    uint64_t v54 = type metadata accessor for ConnectUseCase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v51, 1, 1, v54);
    sub_10000588C(&qword_101639AA8);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_101347BA0;
    static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
    static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
    *(void *)(v0 + 2584) = v55;
    sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
    sub_10000588C(&qword_101639AB8);
    sub_100062734(&qword_101639AC0, &qword_101639AB8);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v56 = type metadata accessor for PeripheralPairingInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v53, 1, 1, v56);
    Peripheral.Options.init(connectionOptions:pairingInfo:)();
    uint64_t v57 = type metadata accessor for Peripheral.Options();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v52, 0, 1, v57);
    uint64_t v58 = (void *)swift_task_alloc();
    *(void *)(v0 + 3280) = v58;
    *uint64_t v58 = v0;
    v58[1] = sub_100D74098;
    uint64_t v59 = *(void *)(v0 + 3184);
    uint64_t v60 = *(void *)(v0 + 3176);
    uint64_t v61 = *(void *)(v0 + 2952);
    uint64_t v62 = *(void *)(v0 + 2944);
    return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v61, v62, v60, v59);
  }
  else
  {
    type metadata accessor for AccessoryMetadataManager();
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 3264) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_100D73F6C;
    uint64_t v32 = *(void *)(v0 + 3064);
    uint64_t v33 = *(void *)(v0 + 3000);
    return sub_1002F7378(v33, v32, 3);
  }
}

uint64_t sub_100D73D48()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D73F6C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 2784);
  if (v0) {
    uint64_t v4 = sub_100D7B198;
  }
  else {
    uint64_t v4 = sub_100D7A9B8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D74098()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 3288) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[369];
  uint64_t v4 = v2[368];
  uint64_t v5 = v2[348];
  sub_10001DAB4(v4, &qword_101639A80);
  sub_10001DAB4(v3, &qword_101639A88);
  if (v0) {
    uint64_t v6 = sub_100D74470;
  }
  else {
    uint64_t v6 = sub_100D7420C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D7420C()
{
  uint64_t v15 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[347];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[342] = v3;
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[343] = sub_1008FA0F0(v5, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Connected to peripheral: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v7 = v0[390];
  uint64_t v8 = v0[389];
  uint64_t v9 = v0[363];
  dispatch thunk of PeripheralProtocol.id.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v9, 1, 1, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[412] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D746E8;
  uint64_t v11 = v0[388];
  uint64_t v12 = v0[363];
  return sub_100D2E818(v11, v12);
}

uint64_t sub_100D74470()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  uint64_t v5 = v0[377];
  uint64_t v6 = v0[373];
  swift_release();
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v5, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D746E8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 3192);
  uint64_t v2 = *(void *)(*(void *)v0 + 3104);
  uint64_t v3 = *(void *)(*(void *)v0 + 3080);
  uint64_t v4 = *(void *)(*(void *)v0 + 2904);
  uint64_t v5 = *(void *)(*(void *)v0 + 2784);
  swift_task_dealloc();
  sub_10001DAB4(v4, &qword_101638CF0);
  v1(v2, v3);
  return _swift_task_switch(sub_100D74888, v5, 0);
}

uint64_t sub_100D74888()
{
  *(void *)(v0 + 2560) = 0x7365547265646E75;
  *(void *)(v0 + 2568) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 3528))
  {
    *(void *)(v0 + 3320) = type metadata accessor for Service();
    Identifier.init(stringLiteral:)();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 3328) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D74B68;
    uint64_t v2 = *(void *)(v0 + 3184);
    uint64_t v3 = *(void *)(v0 + 3176);
    uint64_t v4 = *(void *)(v0 + 2896);
    return dispatch thunk of PeripheralProtocol.subscript.getter(v4, v3, v2);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 3304) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100D74A2C;
    uint64_t v6 = *(void *)(v0 + 2776);
    return sub_100D7B3DC(v6);
  }
}

uint64_t sub_100D74A2C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 3312) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 2784);
  if (v1)
  {
    uint64_t v6 = sub_100D7A740;
  }
  else
  {
    *(unsigned char *)(v4 + 3531) = a1;
    uint64_t v6 = sub_100D7A2D4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D74B68(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[417] = a1;
  v4[418] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[362];
  uint64_t v6 = v3[361];
  uint64_t v7 = v3[360];
  uint64_t v8 = v3[348];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1) {
    uint64_t v9 = sub_100D74F9C;
  }
  else {
    uint64_t v9 = sub_100D74CF0;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100D74CF0()
{
  v0[419] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v1 = sub_100DB1F50(&qword_101639AD0, (void (*)(uint64_t))&type metadata accessor for Service);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[420] = v2;
  void *v2 = v0;
  v2[1] = sub_100D74DF8;
  uint64_t v3 = v0[415];
  uint64_t v4 = v0[359];
  return dispatch thunk of ServiceProtocol.subscript.getter(v4, v3, v1);
}

uint64_t sub_100D74DF8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[421] = a1;
  v4[422] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[359];
  uint64_t v6 = v3[358];
  uint64_t v7 = v3[357];
  uint64_t v8 = v3[348];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1) {
    uint64_t v9 = sub_100D754B0;
  }
  else {
    uint64_t v9 = sub_100D75214;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100D74F9C()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  uint64_t v5 = v0[377];
  uint64_t v6 = v0[373];
  swift_release();
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v5, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D75214()
{
  uint64_t v15 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered FindMy services and Pairing characteristic.", v3, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[347];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[339] = v6;
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[340] = sub_1008FA0F0(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing peripheral: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v10 = (void *)swift_task_alloc();
  v0[423] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D75728;
  uint64_t v11 = v0[398];
  uint64_t v12 = v0[397];
  return dispatch thunk of PeripheralProtocol.pair()(v12, v11);
}

uint64_t sub_100D754B0()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  uint64_t v5 = v0[377];
  uint64_t v6 = v0[373];
  swift_release();
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v5, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D75728()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 2784);
  if (v0) {
    uint64_t v4 = sub_100D763D8;
  }
  else {
    uint64_t v4 = sub_100D75854;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D75854()
{
  uint64_t v33 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 160);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 2776);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v0 + 2696) = v4;
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 2704) = sub_1008FA0F0(v6, v7, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Paired peripheral: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (_OWORD *)(v0 + 160);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v8 = *(void *)(v0 + 3392);
  BinaryEncoder.init()();
  BinaryDecoder.init()();
  sub_100D95C7C(v1);
  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 3120);
    uint64_t v30 = *(void *)(v0 + 3112);
    uint64_t v31 = *(void *)(v0 + 3152);
    uint64_t v29 = *(void *)(v0 + 3064);
    uint64_t v28 = *(void *)(v0 + 3016);
    uint64_t v10 = *(void *)(v0 + 2984);
    uint64_t v11 = *(void *)(v0 + 2848);
    uint64_t v12 = *(void *)(v0 + 2840);
    uint64_t v13 = *(void *)(v0 + 2832);
    uint64_t v14 = *(void *)(v0 + 2824);
    uint64_t v15 = *(void *)(v0 + 2816);
    uint64_t v16 = *(void *)(v0 + 2808);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_100D6BBBC(v10, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v28, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v29, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v31, v30);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    sub_1001E1A4C(v1, (_OWORD *)(v0 + 2032));
    sub_1001E1A4C((_OWORD *)(v0 + 2032), (_OWORD *)(v0 + 1888));
    SharingCircleWildAdvertisementKey.init(key:)(v0 + 1888);
    sub_1001E1A4C((_OWORD *)(v0 + 2032), (_OWORD *)(v0 + 1744));
    sub_10001D608(v0 + 1888, v0 + 2176, &qword_10165E688);
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      sub_1001E1A4C((_OWORD *)(v0 + 1744), (_OWORD *)(v0 + 304));
      sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
      uint64_t v20 = String.init<A>(describing:)();
      *(void *)(v0 + 2688) = sub_1008FA0F0(v20, v21, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending command: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
    }

    sub_1001E1A4C((_OWORD *)(v0 + 1744), (_OWORD *)(v0 + 1600));
    *(void *)(v0 + 3400) = sub_100DB311C();
    *(void *)(v0 + 3408) = BinaryEncoder.encode<A>(_:)();
    *(void *)(v0 + 3416) = v22;
    uint64_t v23 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    unint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 3424) = v24;
    *unint64_t v24 = v0;
    v24[1] = sub_100D7665C;
    uint64_t v25 = *(void *)(v0 + 3352);
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v25, v23);
  }
}

uint64_t sub_100D763D8()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  uint64_t v5 = v0[377];
  uint64_t v6 = v0[373];
  swift_release();
  swift_release();
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v5, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D7665C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 3432) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 2784);
  if (v1)
  {
    uint64_t v6 = sub_100D76974;
  }
  else
  {
    *(void *)(v4 + 3440) = a1;
    uint64_t v6 = sub_100D76788;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D76788()
{
  uint64_t v1 = fragment(data:mtu:)();
  sub_1001E1A4C((_OWORD *)(v0 + 1744), (_OWORD *)(v0 + 1456));
  if (sub_1001E1A7C(v0 + 1456) == 4)
  {
    uint64_t v2 = *(void *)(v0 + 3368);
    uint64_t v3 = swift_allocObject();
    *(void *)(v0 + 3448) = v3;
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 3456) = v4;
    void *v4 = v0;
    v4[1] = sub_100D76F7C;
    uint64_t v5 = (char *)&type metadata for () + 8;
    uint64_t v6 = &unk_10165E6C0;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 3368);
    uint64_t v9 = swift_allocObject();
    *(void *)(v0 + 3472) = v9;
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v1;
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 3480) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100D770A4;
    uint64_t v5 = (char *)&type metadata for Data;
    uint64_t v6 = &unk_10165E6A0;
    uint64_t v4 = (void *)(v0 + 2528);
    uint64_t v7 = v9;
  }
  return withTimeout<A>(_:block:)(v4, 0x40AAD21B3B700000, 3, v6, v7, v5);
}

uint64_t sub_100D76974()
{
  uint64_t v26 = v0;
  sub_10001CFB8(v0[426], v0[427]);
  sub_100DB2EB8((uint64_t)(v0 + 218), (void (*)(void))sub_10001CFB8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[325] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Pairing command error: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100DB3170((uint64_t)(v0 + 272));
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[333] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[330] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s failed with %{public}@", (uint8_t *)v8, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v11 = v0[390];
  uint64_t v23 = v0[389];
  uint64_t v24 = v0[394];
  uint64_t v21 = v0[377];
  uint64_t v22 = v0[383];
  uint64_t v19 = v0[356];
  uint64_t v20 = v0[373];
  uint64_t v12 = v0[355];
  uint64_t v18 = v0[354];
  uint64_t v13 = v0[353];
  uint64_t v14 = v0[352];
  uint64_t v15 = v0[351];
  swift_willThrow();
  swift_release();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v19, v18);
  sub_100D6BBBC(v20, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v21, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v22, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v24, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100D76F7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 2784);
    uint64_t v4 = sub_100D77908;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 2784);
    swift_release();
    uint64_t v4 = sub_100D771CC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D770A4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 2784);
    uint64_t v4 = sub_100D78BC8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 2784);
    swift_release();
    uint64_t v4 = sub_100D77EFC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D771CC()
{
  uint64_t v38 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_1001E1A4C((_OWORD *)(v0 + 1744), (_OWORD *)(v0 + 448));
    uint64_t v4 = String.init<A>(describing:)();
    *(void *)(v0 + 2672) = sub_1008FA0F0(v4, v5, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sent final command: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100DB3170(v0 + 2176);
  }
  else
  {
    sub_100DB3170(v0 + 2176);
  }
  *(unsigned char *)(*(void *)(v0 + 2784) + 152) = 9;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing completed succesfully!", v8, 2u);
    swift_slowDealloc();
  }
  unint64_t v9 = *(void *)(v0 + 3416);
  uint64_t v10 = *(void *)(v0 + 3408);
  uint64_t v11 = *(void *)(v0 + 2800);
  uint64_t v12 = *(void *)(v0 + 2792);
  uint64_t v13 = *(void *)(v0 + 2784);
  uint64_t v14 = *(void *)(v0 + 2776);

  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  uint64_t v16 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v13;
  v17[3] = v16;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v12;
  swift_retain_n();
  swift_retain();
  sub_1008F5E44(v11, (uint64_t)&unk_10165E6D0, (uint64_t)v17);
  swift_release();
  sub_10001CFB8(v10, v9);
  swift_errorRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 3152);
  uint64_t v22 = *(void *)(v0 + 3120);
  uint64_t v23 = *(void *)(v0 + 3112);
  uint64_t v24 = *(void *)(v0 + 3064);
  uint64_t v25 = *(void *)(v0 + 3016);
  uint64_t v35 = *(void *)(v0 + 2848);
  uint64_t v36 = *(void *)(v0 + 2984);
  uint64_t v26 = *(void *)(v0 + 2840);
  uint64_t v34 = *(void *)(v0 + 2832);
  uint64_t v33 = *(void *)(v0 + 2824);
  uint64_t v27 = *(void *)(v0 + 2816);
  uint64_t v32 = *(void *)(v0 + 2808);
  if (v20)
  {
    uint64_t v31 = *(void *)(v0 + 3016);
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136446210;
    *(void *)(v0 + 2656) = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s completed successfully", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v33, v32);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v35, v34);
    sub_100D6BBBC(v36, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v31, (uint64_t *)&unk_10166BFA0);
  }
  else
  {
    swift_release();

    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v33, v32);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v35, v34);
    sub_100D6BBBC(v36, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v25, (uint64_t *)&unk_10166BFA0);
  }
  sub_100D6BBBC(v24, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_100D77908()
{
  uint64_t v26 = v0;
  sub_10001CFB8(v0[426], v0[427]);
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[325] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Pairing command error: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100DB3170((uint64_t)(v0 + 272));
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[333] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[330] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s failed with %{public}@", (uint8_t *)v8, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v11 = v0[390];
  uint64_t v23 = v0[389];
  uint64_t v24 = v0[394];
  uint64_t v21 = v0[377];
  uint64_t v22 = v0[383];
  uint64_t v19 = v0[356];
  uint64_t v20 = v0[373];
  uint64_t v12 = v0[355];
  uint64_t v18 = v0[354];
  uint64_t v13 = v0[353];
  uint64_t v14 = v0[352];
  uint64_t v15 = v0[351];
  swift_willThrow();
  swift_release();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v19, v18);
  sub_100D6BBBC(v20, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v21, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v22, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v24, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100D77EFC()
{
  uint64_t v59 = v0;
  uint64_t v1 = v0 + 1744;
  uint64_t v2 = *(void *)(v0 + 2528);
  *(void *)(v0 + 3496) = v2;
  unint64_t v3 = *(void *)(v0 + 2536);
  *(void *)(v0 + 3504) = v3;
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_1001E1A4C((_OWORD *)(v0 + 1744), (_OWORD *)(v0 + 592));
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 2576) = sub_1008FA0F0(v7, v8, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sent command: %s.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
  }

  sub_1000361E0(v2, v3);
  sub_1000361E0(v2, v3);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v57 = v10;
    uint64_t v11 = swift_slowAlloc();
    *(void *)(v0 + 2616) = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218242;
    uint64_t v12 = 0;
    switch(v3 >> 62)
    {
      case 1uLL:
        LODWORD(v12) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          JUMPOUT(0x100D78BB8);
        }
        uint64_t v12 = (int)v12;
LABEL_11:
        *(void *)(v0 + 2624) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v11 + 12) = 2080;
        uint64_t v16 = Data.hexString.getter();
        *(void *)(v0 + 2632) = sub_1008FA0F0(v16, v17, (uint64_t *)(v0 + 2616));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v1 = v0 + 1744;
        swift_bridgeObjectRelease();
        sub_10001CFB8(v2, v3);
        sub_10001CFB8(v2, v3);
        _os_log_impl((void *)&_mh_execute_header, v9, v57, "length: %ld Received Response: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v2 + 16);
        uint64_t v13 = *(void *)(v2 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v12 = v13 - v14;
        if (!v15) {
          goto LABEL_11;
        }
        goto LABEL_29;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v12 = BYTE6(v3);
        goto LABEL_11;
    }
  }
  else
  {
    sub_10001CFB8(v2, v3);
    sub_10001CFB8(v2, v3);
  }

  uint64_t v18 = *(void *)(v0 + 3488);
  unint64_t v19 = sub_100DB3320();
  BinaryDecoder.decode<A>(_:from:)();
  if (v18)
  {
    uint64_t v20 = v0 + 2176;
    unint64_t v21 = *(void *)(v0 + 3416);
    uint64_t v22 = *(void *)(v0 + 3408);
    sub_10001CFB8(v2, v3);
    sub_10001CFB8(v22, v21);
    sub_100DB2EB8(v1, (void (*)(void))sub_10001CFB8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138543362;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2600) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Pairing command error: %{public}@", v25, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v20 = v0 + 2176;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    sub_100DB3170(v20);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = (void *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446466;
      *(void *)(v0 + 2664) = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2114;
      swift_errorRetain();
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2640) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v38;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s failed with %{public}@", (uint8_t *)v36, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v39 = *(void *)(v0 + 3120);
    uint64_t v55 = *(void *)(v0 + 3112);
    uint64_t v56 = *(void *)(v0 + 3152);
    uint64_t v53 = *(void *)(v0 + 3016);
    uint64_t v54 = *(void *)(v0 + 3064);
    uint64_t v51 = *(void *)(v0 + 2848);
    uint64_t v52 = *(void *)(v0 + 2984);
    uint64_t v40 = *(void *)(v0 + 2840);
    uint64_t v50 = *(void *)(v0 + 2832);
    uint64_t v41 = *(void *)(v0 + 2824);
    uint64_t v42 = *(void *)(v0 + 2816);
    uint64_t v43 = *(void *)(v0 + 2808);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v51, v50);
    sub_100D6BBBC(v52, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v53, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v54, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v56, v55);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  else
  {
    uint64_t v28 = v0 + 16;
    sub_1001E1A4C((_OWORD *)(v0 + 1312), (_OWORD *)(v0 + 1168));
    sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_1000361E0);
    sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_1000361E0);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      sub_1001E1A4C((_OWORD *)(v0 + 1168), (_OWORD *)(v0 + 736));
      sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_1000361E0);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)(v0 + 2608) = sub_1008FA0F0(v32, v33, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Received response: %s", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v28 = v0 + 16;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_10001CFB8);
    }

    uint64_t v46 = *(void *)(v0 + 3400);
    *(void *)(v0 + 2344) = &type metadata for PencilPairingCommand;
    *(void *)(v0 + 2352) = v19;
    *(void *)(v0 + 2360) = v46;
    uint64_t v47 = swift_allocObject();
    *(void *)(v0 + 2320) = v47;
    sub_1001E1A4C((_OWORD *)(v0 + 1168), (_OWORD *)(v47 + 16));
    sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_1000361E0);
    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 3512) = v48;
    *uint64_t v48 = v0;
    v48[1] = sub_100D791E0;
    uint64_t v49 = *(void *)(v0 + 2776);
    return sub_100DA643C(v28, v49, v0 + 2320);
  }
}

uint64_t sub_100D78BC8()
{
  uint64_t v28 = v0;
  unint64_t v1 = v0[427];
  uint64_t v2 = v0[426];
  sub_100DB2EB8((uint64_t)(v0 + 218), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 138543362;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[325] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pairing command error: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100DB3170((uint64_t)(v0 + 272));
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    v0[333] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[330] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s failed with %{public}@", (uint8_t *)v10, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v13 = v0[390];
  uint64_t v25 = v0[389];
  uint64_t v26 = v0[394];
  uint64_t v23 = v0[377];
  uint64_t v24 = v0[383];
  uint64_t v21 = v0[356];
  uint64_t v22 = v0[373];
  uint64_t v14 = v0[355];
  uint64_t v20 = v0[354];
  uint64_t v15 = v0[353];
  uint64_t v16 = v0[352];
  uint64_t v17 = v0[351];
  swift_willThrow();
  swift_release();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v21, v20);
  sub_100D6BBBC(v22, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v23, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v24, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v26, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100D791E0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 2784);
    os_log_type_t v4 = sub_100D79C8C;
  }
  else
  {
    os_log_type_t v5 = (_OWORD *)(v2 + 16);
    uint64_t v6 = v2 + 2320;
    uint64_t v7 = (_OWORD *)(v2 + 880);
    uint64_t v8 = *(void *)(v2 + 2784);
    sub_1001E1A4C(v5, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    os_log_type_t v4 = sub_100D79318;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D79318()
{
  uint64_t v41 = v0;
  unint64_t v1 = (_OWORD *)(v0 + 1744);
  unint64_t v2 = *(void *)(v0 + 3504);
  uint64_t v3 = *(void *)(v0 + 3496);
  unint64_t v4 = *(void *)(v0 + 3416);
  uint64_t v5 = *(void *)(v0 + 3408);
  sub_100DB3170(v0 + 2176);
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v3, v2);
  sub_100DB2EB8(v0 + 1168, (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v5, v4);
  sub_1001E1A4C((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1024));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 1024);
  sub_1001E1A4C((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1744));
  sub_10001D608(v0 + 1024, v0 + 2176, &qword_10165E688);
  uint64_t v6 = *(void *)(v0 + 3520);
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
  sub_100DB2EB8(v0 + 1744, (void (*)(void))sub_1000361E0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 136315138;
    sub_1001E1A4C(v1, (_OWORD *)(v0 + 304));
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_1000361E0);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 2688) = sub_1008FA0F0(v10, v11, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending command: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_10001CFB8);
  }

  sub_1001E1A4C(v1, (_OWORD *)(v0 + 1600));
  *(void *)(v0 + 3400) = sub_100DB311C();
  *(void *)(v0 + 3408) = BinaryEncoder.encode<A>(_:)();
  *(void *)(v0 + 3416) = v12;
  if (v6)
  {
    sub_100DB2EB8((uint64_t)v1, (void (*)(void))sub_10001CFB8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543362;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2600) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Pairing command error: %{public}@", v15, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    sub_100DB3170(v0 + 2176);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446466;
      *(void *)(v0 + 2664) = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2114;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2640) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s failed with %{public}@", (uint8_t *)v23, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v26 = *(void *)(v0 + 3120);
    uint64_t v38 = *(void *)(v0 + 3112);
    uint64_t v39 = *(void *)(v0 + 3152);
    uint64_t v36 = *(void *)(v0 + 3016);
    uint64_t v37 = *(void *)(v0 + 3064);
    uint64_t v34 = *(void *)(v0 + 2848);
    uint64_t v35 = *(void *)(v0 + 2984);
    uint64_t v27 = *(void *)(v0 + 2840);
    uint64_t v33 = *(void *)(v0 + 2832);
    uint64_t v28 = *(void *)(v0 + 2824);
    uint64_t v29 = *(void *)(v0 + 2816);
    uint64_t v30 = *(void *)(v0 + 2808);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v34, v33);
    sub_100D6BBBC(v35, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v36, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v37, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v39, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  else
  {
    uint64_t v18 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    unint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 3424) = v19;
    *unint64_t v19 = v0;
    v19[1] = sub_100D7665C;
    uint64_t v20 = *(void *)(v0 + 3352);
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v20, v18);
  }
}

uint64_t sub_100D79C8C()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 272);
  unint64_t v2 = v0[438];
  uint64_t v3 = v0[437];
  unint64_t v4 = v0[427];
  uint64_t v5 = v0[426];
  sub_100DB2EB8((uint64_t)(v0 + 218), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v3, v2);
  sub_100DB2EB8((uint64_t)(v0 + 146), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v5, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 290));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 138543362;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[325] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    uint64_t v1 = (uint64_t)(v0 + 272);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing command error: %{public}@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100DB3170(v1);
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    os_log_type_t v14 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    v0[333] = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[330] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v14 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s failed with %{public}@", (uint8_t *)v13, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v16 = v0[390];
  uint64_t v28 = v0[389];
  uint64_t v29 = v0[394];
  uint64_t v26 = v0[377];
  uint64_t v27 = v0[383];
  uint64_t v24 = v0[356];
  uint64_t v25 = v0[373];
  uint64_t v17 = v0[355];
  uint64_t v23 = v0[354];
  uint64_t v18 = v0[353];
  uint64_t v19 = v0[352];
  uint64_t v20 = v0[351];
  swift_willThrow();
  swift_release();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v23);
  sub_100D6BBBC(v25, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v26, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v27, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100D7A2D4()
{
  uint64_t v18 = v0;
  if (*(unsigned __int8 *)(v0 + 3531) > 4u)
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v7 = 136446210;
      *(void *)(v0 + 2728) = sub_1008FA0F0(0xD00000000000001BLL, 0x8000000101417CA0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Not your pencil!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v8 = *(void *)(v0 + 3152);
    uint64_t v9 = *(void *)(v0 + 3120);
    uint64_t v10 = *(void *)(v0 + 3112);
    uint64_t v11 = *(void *)(v0 + 3064);
    uint64_t v12 = *(void *)(v0 + 3016);
    uint64_t v13 = *(void *)(v0 + 2984);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_10137D8C0;
    *(unsigned char *)(v14 + 16) = 3;
    swift_willThrow();
    swift_release();
    sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v12, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v11, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    *(void *)(v0 + 3320) = type metadata accessor for Service();
    Identifier.init(stringLiteral:)();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 3328) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D74B68;
    uint64_t v2 = *(void *)(v0 + 3184);
    uint64_t v3 = *(void *)(v0 + 3176);
    uint64_t v4 = *(void *)(v0 + 2896);
    return dispatch thunk of PeripheralProtocol.subscript.getter(v4, v3, v2);
  }
}

uint64_t sub_100D7A740()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  uint64_t v5 = v0[377];
  uint64_t v6 = v0[373];
  swift_release();
  sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v5, (uint64_t *)&unk_10166BFA0);
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D7A9B8()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[409];
  uint64_t v2 = v0[377];
  uint64_t v3 = v0[374];
  uint64_t v4 = v0[371];
  uint64_t v5 = v0[370];
  sub_10001D608(v0[375], v2, (uint64_t *)&unk_10166BFA0);
  sub_10001D074(v2, v3, (uint64_t *)&unk_10166BFA0);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  uint64_t v7 = v0[374];
  if (v6 == 1)
  {
    sub_10001DAB4(v7, (uint64_t *)&unk_10166BFA0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing product info!", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[394];
    uint64_t v12 = v0[390];
    uint64_t v13 = v0[389];
    uint64_t v14 = v0[383];
    uint64_t v15 = v0[377];

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_10137D8B0;
    *(unsigned char *)(v16 + 16) = 3;
    swift_willThrow();
    swift_release();
    sub_10001DAB4(v15, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v14, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    goto LABEL_10;
  }
  uint64_t v17 = v0[373];
  uint64_t v18 = v0[372];
  sub_100DB2DE8(v7, v17, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_100DB2E50(v17, v18, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = v0[372];
  if (v21)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v24 = sub_1011E56F0();
    v0[344] = sub_1008FA0F0(v24, v25, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v22, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Product info: %{public}s)", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(v0[372], (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }

  sub_100D95484(v0[383], v0[373]);
  if (v1)
  {
    uint64_t v26 = v0[394];
    uint64_t v27 = v0[390];
    uint64_t v28 = v0[389];
    uint64_t v29 = v0[383];
    uint64_t v30 = v0[377];
    uint64_t v31 = v0[373];
    swift_release();
    sub_100D6BBBC(v31, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v30, (uint64_t *)&unk_10166BFA0);
    sub_100D6BBBC(v29, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  uint64_t v34 = v0[369];
  uint64_t v35 = v0[368];
  uint64_t v36 = v0[364];
  uint64_t v37 = type metadata accessor for ConnectUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v34, 1, 1, v37);
  sub_10000588C(&qword_101639AA8);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101347BA0;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
  v0[323] = v38;
  sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
  sub_10000588C(&qword_101639AB8);
  sub_100062734(&qword_101639AC0, &qword_101639AB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v39 = type metadata accessor for PeripheralPairingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v36, 1, 1, v39);
  Peripheral.Options.init(connectionOptions:pairingInfo:)();
  uint64_t v40 = type metadata accessor for Peripheral.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v35, 0, 1, v40);
  uint64_t v41 = (void *)swift_task_alloc();
  v0[410] = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_100D74098;
  uint64_t v42 = v0[398];
  uint64_t v43 = v0[397];
  uint64_t v44 = v0[369];
  uint64_t v45 = v0[368];
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v44, v45, v43, v42);
}

uint64_t sub_100D7B198()
{
  uint64_t v1 = v0[394];
  uint64_t v2 = v0[390];
  uint64_t v3 = v0[389];
  uint64_t v4 = v0[383];
  swift_release();
  sub_100D6BBBC(v4, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D7B3DC(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_100D7B4FC, v1, 0);
}

uint64_t sub_100D7B4FC()
{
  uint64_t v16 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[23];
    uint64_t v6 = v0[21];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[14] = sub_1008FA0F0(0xD000000000000018, 0x8000000101417E20, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2082;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v0[15] = sub_1008FA0F0(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "%{public}s for peripheral: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = (void *)swift_task_alloc();
  v0[25] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100D7B820;
  uint64_t v12 = v0[16];
  return sub_100D92E94(v12);
}

uint64_t sub_100D7B820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[26] = a1;
  v4[27] = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v4[17];
    return _swift_task_switch(sub_100D7B968, v7, 0);
  }
}

uint64_t sub_100D7B968()
{
  uint64_t v23 = v0;
  if ((v0[27] & 0x3000000000000000) == 0x1000000000000000)
  {
    uint64_t v1 = v0[26];
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = 0xD000000000000010;
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      if ((_BYTE)v1)
      {
        if (v1 == 1) {
          uint64_t v4 = 0xD000000000000014;
        }
        else {
          uint64_t v4 = 0xD000000000000017;
        }
        if (v1 == 1) {
          unint64_t v6 = 0x8000000101415BD0;
        }
        else {
          unint64_t v6 = 0x8000000101415BB0;
        }
      }
      else
      {
        unint64_t v6 = 0x8000000101415BF0;
      }
      v0[13] = sub_1008FA0F0(v4, v6, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "FMND status: %{public}s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v16 = v0[22];
    uint64_t v15 = v0[23];
    uint64_t v17 = v0[21];
    v0[28] = type metadata accessor for Peripheral();
    v0[29] = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    Identifier.id.getter();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v0[30] = v18;
    v0[31] = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v18(v15, v17);
    uint64_t v19 = swift_task_alloc();
    v0[32] = v19;
    *(void *)uint64_t v19 = v0;
    *(void *)(v19 + 8) = sub_100D7BD28;
    uint64_t v20 = v0[20];
    uint64_t v21 = v0[17];
    *(void *)(v19 + 184) = v21;
    *(_OWORD *)(v19 + 168) = xmmword_10137D8D0;
    *(void *)(v19 + 160) = v20;
    return _swift_task_switch(sub_100D66318, v21, 0);
  }
  else
  {
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = v0[26];
    unint64_t v10 = v0[27];
    if (v9)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unexpected FMND ID response!", v12, 2u);
      swift_slowDealloc();

      sub_100DB4B8C(v11, v10);
    }
    else
    {
      sub_100DB4B8C(v0[26], v0[27]);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13(0);
  }
}

uint64_t sub_100D7BD28()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  uint64_t v3 = *(void *)(*v0 + 152);
  uint64_t v4 = *(void *)(*v0 + 144);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[33] = v6;
  v1[34] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v1[35] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100D7BEE8;
  uint64_t v8 = v1[16];
  return sub_100D87F0C(v8);
}

uint64_t sub_100D7BEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[36] = a1;
  v5[37] = a2;
  v5[38] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[17];
  if (v2) {
    uint64_t v7 = sub_100D7C4D8;
  }
  else {
    uint64_t v7 = sub_100D7C020;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100D7C020()
{
  uint64_t v2 = v0[36];
  unint64_t v1 = v0[37];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[30];
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[21];
  dispatch thunk of PeripheralProtocol.id.getter();
  Identifier.id.getter();
  v3(v4, v5);
  sub_1000361E0(v2, v1);
  uint64_t v6 = swift_task_alloc();
  v0[39] = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = sub_100D7C138;
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[17];
  long long v9 = *((_OWORD *)v0 + 18);
  *(void *)(v6 + 184) = v8;
  *(_OWORD *)(v6 + 168) = v9;
  *(void *)(v6 + 160) = v7;
  return _swift_task_switch(sub_100D66318, v8, 0);
}

uint64_t sub_100D7C138()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 296);
  uint64_t v2 = *(void *)(*(void *)v0 + 288);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 264);
  uint64_t v4 = *(void *)(*(void *)v0 + 160);
  uint64_t v5 = *(void *)(*(void *)v0 + 144);
  uint64_t v6 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  sub_10001CFB8(v2, v1);
  v3(v4, v5);
  return _swift_task_switch(sub_100D7C2F0, v6, 0);
}

uint64_t sub_100D7C2F0()
{
  uint64_t v1 = *(void *)(v0 + 288);
  unint64_t v2 = *(void *)(v0 + 296);
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  sub_1000361E0(v1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100D7C3AC;
  return sub_100C067E8(v0 + 16);
}

uint64_t sub_100D7C3AC(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 57) = a1;
  *(void *)(v3 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(void *)(v3 + 136);
    uint64_t v5 = sub_100D7CBA4;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 136);
    sub_10001CFB8(*(void *)(v3 + 288), *(void *)(v3 + 296));
    uint64_t v5 = sub_100D7C738;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100D7C4D8()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 64) = sub_1008FA0F0(0xD000000000000018, 0x8000000101417E20, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = 0x50304u >> (8 * *(_DWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

uint64_t sub_100D7C738()
{
  uint64_t v27 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = *(unsigned char *)(v0 + 57);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    unint64_t v5 = sub_100C061E4(v3);
    *(void *)(v0 + 96) = sub_1008FA0F0(v5, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AccountCheckResult.SeverStatus: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (!*(unsigned char *)(v0 + 208))
  {
    int v7 = 0;
    unsigned int v9 = 328706;
    char v10 = 8 * *(unsigned char *)(v0 + 57);
LABEL_10:
    uint64_t v8 = v9 >> v10;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v0 + 208) != 1)
  {
    char v11 = *(unsigned char *)(v0 + 57);
    int v7 = v11 & 1;
    char v10 = 8 * v11;
    unsigned int v9 = 327939;
    goto LABEL_10;
  }
  int v7 = 0;
  if (*(unsigned __int8 *)(v0 + 57) >= 2u) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = 3;
  }
LABEL_11:
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    unint64_t v15 = sub_100C0646C(v8);
    *(void *)(v0 + 88) = sub_1008FA0F0(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "AccountCheckResult: %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v7)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      unint64_t v20 = sub_100C0646C(1);
      *(void *)(v0 + 80) = sub_1008FA0F0(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Handling %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100D7CE20;
    uint64_t v23 = *(void *)(v0 + 128);
    return sub_100DA11D0(v23);
  }
  else
  {
    sub_10001CFB8(*(void *)(v0 + 288), *(void *)(v0 + 296));
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v25(v8);
  }
}

uint64_t sub_100D7CBA4()
{
  uint64_t v12 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  unint64_t v2 = *(void *)(v0 + 296);
  sub_10001CFB8(v1, v2);
  sub_10001CFB8(v1, v2);
  swift_errorRetain();
  swift_errorRetain();
  char v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    unint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    *(void *)(v0 + 64) = sub_1008FA0F0(0xD000000000000018, 0x8000000101417E20, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = 0x50304u >> (8 * *(_DWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v8);
}

uint64_t sub_100D7CE20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    os_log_type_t v4 = sub_100D7CFC8;
  }
  else {
    os_log_type_t v4 = sub_100D7CF4C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D7CF4C()
{
  sub_10001CFB8(v0[36], v0[37]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  return v1(4);
}

uint64_t sub_100D7CFC8()
{
  uint64_t v10 = v0;
  sub_10001CFB8(*(void *)(v0 + 288), *(void *)(v0 + 296));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 64) = sub_1008FA0F0(0xD000000000000018, 0x8000000101417E20, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 72) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = 0x50304u >> (8 * *(_DWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

uint64_t sub_100D7D230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  type metadata accessor for String.Encoding();
  v4[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[27] = v5;
  v4[28] = *(void *)(v5 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_100D7D330, v3, 0);
}

uint64_t sub_100D7D330()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D7D480;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D7D480(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D7D598, v2, 0);
}

uint64_t sub_100D7D598()
{
  uint64_t v49 = v0;
  uint64_t v1 = v0[32];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[22];
    uint64_t v3 = v0[30];
    uint64_t v4 = v0[27];
    uint64_t v5 = v0[28];
    uint64_t v7 = v0[23];
    unint64_t v6 = v0[24];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
    sub_100037A38(v7, v6);
    sub_100037A38(v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    uint64_t v47 = v9;
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[30];
    uint64_t v13 = v0[27];
    uint64_t v14 = v0[28];
    unint64_t v15 = v0[24];
    if (v11)
    {
      os_log_type_t v44 = v10;
      uint64_t v16 = swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558787;
      v0[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[19] = sub_1008FA0F0(v17, v18, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      *(_WORD *)(v16 + 22) = 2160;
      v0[20] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 32) = 2081;
      if (v15 >> 60 == 15)
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0xE000000000000000;
      }
      else
      {
        static String.Encoding.utf8.getter();
        uint64_t v19 = String.init(data:encoding:)();
        if (!v40) {
          uint64_t v19 = Data.hexString.getter();
        }
        unint64_t v20 = v40;
      }
      uint64_t v42 = v0[23];
      unint64_t v41 = v0[24];
      v0[21] = sub_1008FA0F0(v19, v20, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v42, v41);
      sub_100037A24(v42, v41);
      _os_log_impl((void *)&_mh_execute_header, v47, v44, "Delete accessory info for %{private,mask.hash}s\nSN: %{private,mask.hash}s", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v37 = v0[23];
      (*(void (**)(void, void))(v14 + 8))(v0[30], v0[27]);
      sub_100037A24(v37, v15);
      sub_100037A24(v37, v15);
    }
    uint64_t v43 = v0[32];
    return _swift_task_switch(sub_100D7DCE0, v43, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *unint64_t v21 = 0xD000000000000013;
    v21[1] = 0x80000001014033F0;
    swift_willThrow();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v23 = v0[28];
    uint64_t v22 = v0[29];
    uint64_t v24 = v0[27];
    uint64_t v25 = v0[22];
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v31 = v0[28];
    uint64_t v30 = v0[29];
    uint64_t v32 = v0[27];
    if (v29)
    {
      os_log_t log = v27;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 141558531;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v34, v35, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      *(_WORD *)(v33 + 22) = 2114;
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v45 = v36;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v28, "Failed to delete accessory info for %{private,mask.hash}s, error %{public}@", (uint8_t *)v33, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
}

uint64_t sub_100D7DCE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D7DD80;
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[22];
  return sub_100C14AA4(v4, v2, v3);
}

uint64_t sub_100D7DD80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 200);
  if (v0) {
    uint64_t v4 = sub_100D7DF28;
  }
  else {
    uint64_t v4 = sub_100D7DEAC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D7DEAC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D7DF28()
{
  unint64_t v21 = v0;
  swift_release();
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[22];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[28];
  uint64_t v9 = v0[29];
  uint64_t v11 = v0[27];
  if (v8)
  {
    os_log_t log = v6;
    uint64_t v12 = swift_slowAlloc();
    unint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to delete accessory info for %{private,mask.hash}s, error %{public}@", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100D7E29C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 128) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100D7E378, 0, 0);
}

uint64_t sub_100D7E378()
{
  uint64_t v43 = v0;
  if (*(unsigned char *)(v0 + 128))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    sub_10033093C(v20, 1);
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v40 = v15;
      uint64_t v29 = swift_slowAlloc();
      unint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446722;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v30, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      *(_WORD *)(v29 + 22) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v41 = v32;
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v29, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v40;
      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        *(void *)(v0 + 16) = v15;
        sub_10000588C((uint64_t *)&unk_1016565A0);
        CheckedContinuation.resume(throwing:)();
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);

      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Not resuming continuation in cancelled task.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v36, 1);
    }
    else
    {
      sub_100173E88(*(void *)(v0 + 72), 1);
    }
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100D7EA88(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return _swift_task_switch(sub_100D7EAD0, v1, 0);
}

uint64_t sub_100D7EAD0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  uint64_t v7 = sub_10000588C(&qword_101650758);
  *uint64_t v6 = v0;
  v6[1] = sub_100923DFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v1, v4, 0xD000000000000017, 0x80000001014181A0, sub_100DB99F0, v5, v7);
}

uint64_t sub_100D7EC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v25 = a1;
  uint64_t v5 = sub_10000588C(&qword_101660970);
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  BOOL v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163D210);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v5);
  uint64_t v16 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + *(unsigned __int8 *)(v6 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  uint64_t v20 = v26;
  *((void *)v19 + 2) = v26;
  *((void *)v19 + 3) = v16;
  *((void *)v19 + 4) = v20;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v19[v17], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v19[v18], v24, v23);
  *(void *)&v19[(v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8] = v27;
  swift_retain_n();
  sub_1008F5E44((uint64_t)v14, (uint64_t)&unk_10165EAA8, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100D7EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v9 = sub_10000588C(&qword_101660970);
  v7[6] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[7] = v10;
  v7[8] = *(void *)(v10 + 64);
  v7[9] = swift_task_alloc();
  v7[10] = swift_task_alloc();
  uint64_t v11 = sub_10000588C(&qword_10163D210);
  v7[11] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[12] = v12;
  v7[13] = *(void *)(v12 + 64);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v7[16] = v13;
  v7[17] = *(void *)(v13 - 8);
  v7[18] = swift_task_alloc();
  return _swift_task_switch(sub_100D7F0E4, a4, 0);
}

uint64_t sub_100D7F0E4()
{
  Identifier.id.getter();
  uint64_t v1 = swift_task_alloc();
  v0[19] = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = sub_100D7F1B0;
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[2];
  *(void *)(v1 + 184) = v3;
  *(_OWORD *)(v1 + 168) = xmmword_10137D8E0;
  *(void *)(v1 + 160) = v2;
  return _swift_task_switch(sub_100D66318, v3, 0);
}

uint64_t sub_100D7F1B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(void *)(*(void *)v0 + 128);
  uint64_t v4 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100D7F31C, v4, 0);
}

uint64_t sub_100D7F31C()
{
  uint64_t v1 = v0[15];
  uint64_t v34 = v1;
  uint64_t v30 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v21 = v5;
  uint64_t v35 = v4;
  uint64_t v31 = v0[9];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[6];
  uint64_t v23 = v7;
  uint64_t v24 = v0[8];
  uint64_t v8 = v0[4];
  uint64_t v32 = v0[5];
  uint64_t v27 = v8;
  uint64_t v9 = v0[3];
  uint64_t v29 = v9;
  uint64_t v33 = v0[2];
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v28(v1, v9, v5);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v26(v4, v8, v7);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v25 = ((v10 + 16) & ~v10) + v3;
  uint64_t v11 = (v10 + 16) & ~v10;
  unint64_t v12 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (v13 + v12 + 8) & ~v13;
  v24 += 7;
  uint64_t v15 = swift_allocObject();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v22(v15 + v11, v34, v5);
  *(void *)(v15 + v12) = v33;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v16(v15 + v14, v35, v23);
  *(void *)(v15 + ((v14 + v24) & 0xFFFFFFFFFFFFFFF8)) = v32;
  v28(v30, v29, v5);
  v26(v31, v27, v23);
  uint64_t v17 = (v25 + v13) & ~v13;
  uint64_t v18 = swift_allocObject();
  v22(v18 + v11, v30, v21);
  v16(v18 + v17, v31, v23);
  *(void *)(v18 + ((v17 + v24) & 0xFFFFFFFFFFFFFFF8)) = v32;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100D7F648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  sub_10000588C(&qword_101638CF0);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v3[16] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100D7F838, 0, 0);
}

uint64_t sub_100D7F838()
{
  uint64_t v20 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[20];
  uint64_t v11 = v0[17];
  uint64_t v10 = v0[18];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    v0[4] = sub_1008FA0F0(0xD000000000000017, 0x80000001014181A0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v0[20], v0[17]);
  }

  v0[21] = v15;
  uint64_t v16 = *(void *)(v0[7] + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher);
  v0[22] = v16;
  return _swift_task_switch(sub_100D7FAE4, v16, 0);
}

uint64_t sub_100D7FAE4()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[16];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = sub_100DB1F50(&qword_10165EAD0, (void (*)(uint64_t))type metadata accessor for PencilLocationsPublisher);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v1;
  swift_retain_n();
  v0[23] = sub_10088605C(v2, (uint64_t)&unk_10165EAD8, (uint64_t)v5);
  type metadata accessor for CentralManager();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100D7FC58;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_100D7FC58(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[25] = a1;
  v4[26] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100D80590, 0, 0);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10165EAE0 + dword_10165EAE0);
    uint64_t v6 = (void *)swift_task_alloc();
    v4[27] = v6;
    *uint64_t v6 = v5;
    v6[1] = sub_100D7FDF8;
    uint64_t v7 = v4[6];
    return v9(a1, v7);
  }
}

uint64_t sub_100D7FDF8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100D80640;
  }
  else {
    uint64_t v4 = sub_100D7FF0C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D7FF0C()
{
  static Date.trustedNow.getter(v0[15]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[30] = (uint64_t)v1;
  uint64_t v2 = sub_10000588C(&qword_101650758);
  uint64_t v3 = sub_10000588C(&qword_101638D40);
  *uint64_t v1 = v0;
  v1[1] = sub_100D7FFE8;
  uint64_t v4 = v0[23];
  return Task.value.getter(v0 + 2, v4, v2, v3, &protocol self-conformance witness table for Error);
}

uint64_t sub_100D7FFE8()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v2 = sub_100D806FC;
  }
  else
  {
    uint64_t v2 = sub_100D80104;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D80104()
{
  uint64_t v1 = v0[2];
  v0[32] = v0[31];
  v0[33] = v1;
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  Peripheral.id.getter();
  Identifier.id.getter();
  v2(v3, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v7, 1, 1, v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[34] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D8023C;
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[9];
  return sub_100D81664(v10, 7, v9, v11);
}

uint64_t sub_100D8023C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  sub_10001DAB4(v4, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100D803B8, 0, 0);
}

uint64_t sub_100D803B8()
{
  uint64_t v1 = v0[32];
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = (void *)v0[33];
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v4 = (void *)v0[33];
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[14];
    v0[3] = v4;
    id v8 = v4;
    sub_10000588C(&qword_101660970);
    CheckedContinuation.resume(returning:)();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100D80590()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D80640()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D806FC()
{
  v0[32] = 0;
  v0[33] = 0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  Peripheral.id.getter();
  Identifier.id.getter();
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, 1, 1, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[34] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100D8023C;
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[9];
  return sub_100D81664(v9, 7, v8, v10);
}

uint64_t sub_100D8082C(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = *v2;
  uint64_t v4 = type metadata accessor for CentralManager.State();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v3[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[14] = v6;
  v3[15] = *(void *)(v6 + 64);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_100D8099C, v2, 0);
}

uint64_t sub_100D8099C()
{
  uint64_t v23 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  v0[19] = sub_100010324(v5, (uint64_t)qword_10165E160);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[20] = v6;
  v0[21] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[14];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pairing Pencil with identifier %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[18], v0[13]);
  }

  v0[22] = v16;
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for CentralManager.State.poweredOn(_:), v0[10]);
  uint64_t v17 = type metadata accessor for CentralManager();
  uint64_t v18 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[23] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100D80CB0;
  uint64_t v20 = v0[12];
  return dispatch thunk of CentralManagerProtocol.await(state:)(v20, v17, v18);
}

uint64_t sub_100D80CB0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v7 = sub_100D8117C;
  }
  else {
    uint64_t v7 = sub_100D80E38;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100D80E38()
{
  uint64_t v22 = v0;
  (*(void (**)(void, void, void))(v0 + 160))(*(void *)(v0 + 136), *(void *)(v0 + 56), *(void *)(v0 + 104));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    *(void *)(v0 + 24) = sub_1008FA0F0(0xD000000000000026, 0x80000001014181C0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_1008FA0F0(v6, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Retrieving peripheral matching identifier: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 136), *(void *)(v0 + 104));
  }

  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 160))(v8, *(void *)(v0 + 56), v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v0 + 200) = v16;
  *(void *)(v16 + 16) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v16 + v14, v8, v10);
  *(void *)(v16 + v15) = v12;
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v17;
  uint64_t v18 = type metadata accessor for Peripheral();
  void *v17 = v0;
  v17[1] = sub_100D81208;
  return withTimeout<A>(_:block:)(v0 + 16, 0x40AAD21B3B700000, 3, &unk_10165EAF0, v16, v18);
}

uint64_t sub_100D8117C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D81208()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_100D8153C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_release();
    uint64_t v4 = sub_100D81330;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D81330()
{
  uint64_t v1 = v0[2];
  v0[28] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  void *v2 = v0;
  v2[1] = sub_100D813CC;
  return sub_100D70BFC(v1);
}

uint64_t sub_100D813CC()
{
  uint64_t v2 = (void *)*v1;
  v2[30] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[8];
    return _swift_task_switch(sub_100D815D0, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v5 = v2[28];
    return v4(v5);
  }
}

uint64_t sub_100D8153C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D815D0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D81664(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 312) = a4;
  *(void *)(v5 + 320) = v4;
  *(unsigned char *)(v5 + 604) = a2;
  *(void *)(v5 + 296) = a1;
  *(void *)(v5 + 304) = a3;
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v5 + 328) = v6;
  *(void *)(v5 + 336) = *(void *)(v6 - 8);
  *(void *)(v5 + 344) = swift_task_alloc();
  *(void *)(v5 + 352) = type metadata accessor for DeviceEvent(0);
  *(void *)(v5 + 360) = swift_task_alloc();
  *(void *)(v5 + 368) = type metadata accessor for BeaconIdentifier();
  *(void *)(v5 + 376) = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  *(void *)(v5 + 384) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v5 + 392) = v7;
  *(void *)(v5 + 400) = *(void *)(v7 - 8);
  *(void *)(v5 + 408) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v5 + 416) = swift_task_alloc();
  *(void *)(v5 + 424) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v5 + 432) = v8;
  *(void *)(v5 + 440) = *(void *)(v8 - 8);
  *(void *)(v5 + 448) = swift_task_alloc();
  *(void *)(v5 + 456) = swift_task_alloc();
  *(void *)(v5 + 464) = swift_task_alloc();
  *(void *)(v5 + 472) = swift_task_alloc();
  *(void *)(v5 + 480) = swift_task_alloc();
  sub_10000588C(&qword_10163CF20);
  *(void *)(v5 + 488) = swift_task_alloc();
  *(void *)(v5 + 496) = swift_task_alloc();
  return _swift_task_switch(sub_100D81928, v4, 0);
}

uint64_t sub_100D81928()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);
  sub_10001D074(*(void *)(v0 + 312), v3, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v24 = (long long *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 488);
    uint64_t v8 = *(void *)(v0 + 472);
    uint64_t v9 = *(void *)(v0 + 480);
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 440);
    uint64_t v12 = *(void *)(v0 + 416);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    uint64_t v22 = *(void *)(v0 + 496);
    v21(v9, *(void *)(v0 + 424), v10);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v13(v8, v9, v10);
    static SystemInfo.bootSessionUUID.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
    v21(v7, v8, v10);
    uint64_t v14 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    sub_10001D608(v12, v7 + *(int *)(v14 + 20), &qword_101638CF0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 0, 1, v14);
    sub_10001D608(v7, v22, &qword_10163CF20);
    *(void *)(v0 + 552) = v13;
    uint64_t v15 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v18 = *(void *)(v0 + 296);
    uid_t v19 = getuid();
    sub_100DC5FC0(v19);
    uint64_t v20 = v17 + *(int *)(v16 + 20);
    *(void *)(v0 + 560) = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v13(v20, v18, v15);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v24, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0(v24, v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v5;
      *uint64_t v5 = v0;
      uint64_t v6 = sub_100D82BFC;
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return result;
  }
  sub_10001DAB4(*(void *)(v0 + 424), &qword_101638CF0);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 120))
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
  sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v5;
  *uint64_t v5 = v0;
  uint64_t v6 = sub_100D81D24;
LABEL_10:
  v5[1] = v6;
  return v23();
}

uint64_t sub_100D81D24(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 320);
  *(void *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D81E3C, v2, 0);
}

uint64_t sub_100D81E3C()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[64];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[64];
    return _swift_task_switch(sub_100D822C0, v2, 0);
  }
  else
  {
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = xmmword_10137D890;
    *(unsigned char *)(v3 + 16) = 3;
    swift_willThrow();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[55];
    uint64_t v4 = v0[56];
    uint64_t v6 = v0[54];
    uint64_t v7 = v0[37];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[55];
    uint64_t v12 = v0[56];
    uint64_t v14 = v0[54];
    if (v11)
    {
      os_log_t log = v9;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = v12;
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543875;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      v0[29] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v17;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v15 + 12) = 2160;
      v0[30] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[31] = sub_1008FA0F0(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v22, v14);
      _os_log_impl((void *)&_mh_execute_header, log, v10, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100D822C0()
{
  *(void *)(v0 + 520) = *(void *)(*(void *)(v0 + 512) + 136);
  swift_retain();
  return _swift_task_switch(sub_100D82334, 0, 0);
}

uint64_t sub_100D82334()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[66] = v3;
  v3[2] = v1;
  v3[3] = sub_1003CD95C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[67] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  void *v4 = v0;
  v4[1] = sub_100D82450;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 28, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100D82450()
{
  uint64_t v1 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[68] = v1[28];
  uint64_t v2 = v1[64];
  return _swift_task_switch(sub_100D825AC, v2, 0);
}

uint64_t sub_100D825AC()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_release();
  return _swift_task_switch(sub_100D82618, v1, 0);
}

uint64_t sub_100D82618()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[68];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[50] + 80);
    sub_100DB2E50(v1 + ((v2 + 32) & ~v2), v0[48], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v43 = (long long *)(v0 + 7);
  uint64_t v5 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v6 = v0[48];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5);
  uint64_t v8 = v0[62];
  if (v7 == 1)
  {
    sub_10001DAB4(v0[48], &qword_10163B9F0);
    uint64_t v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[58];
    uint64_t v12 = v0[54];
    uint64_t v11 = v0[55];
    uint64_t v13 = v0[37];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10165E160);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v16 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v15(v10, v13, v12);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[58];
    uint64_t v22 = v0[54];
    uint64_t v21 = v0[55];
    if (v19)
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 141558275;
      v0[36] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[35] = sub_1008FA0F0(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error could not get self-beacon UUID for device event for beacon: %{private,mask.hash}s.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v21 + 8))(v0[58], v0[54]);
    }
  }
  else
  {
    uint64_t v26 = v0[61];
    uint64_t v27 = v0[59];
    uint64_t v29 = v0[54];
    uint64_t v28 = v0[55];
    uint64_t v31 = v0[51];
    uint64_t v30 = v0[52];
    uint64_t v32 = v0[49];
    sub_100DB2DE8(v0[48], v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v33 = v31 + *(int *)(v32 + 20);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    unint64_t v16 = (v28 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v15(v27, v33, v29);
    static SystemInfo.bootSessionUUID.getter();
    sub_100D6BBBC(v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v26, v27, v29);
    uint64_t v34 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    sub_10001D608(v30, v26 + *(int *)(v34 + 20), &qword_101638CF0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v26, 0, 1, v34);
    sub_10001D608(v26, v8, &qword_10163CF20);
  }
  v0[69] = v15;
  uint64_t v35 = v0[54];
  uint64_t v37 = v0[46];
  uint64_t v36 = v0[47];
  uint64_t v38 = v0[37];
  uid_t v39 = getuid();
  sub_100DC5FC0(v39);
  uint64_t v40 = v36 + *(int *)(v37 + 20);
  v0[70] = v16;
  v15(v40, v38, v35);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v43, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v43, (uint64_t)(v0 + 17));
    sub_10001CD44(v0 + 17, v0[20]);
    uint64_t v44 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v42 = (void *)swift_task_alloc();
    v0[71] = v42;
    void *v42 = v0;
    v42[1] = sub_100D82BFC;
    return v44();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D82BFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 320);
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D82D14, v2, 0);
}

uint64_t sub_100D82D14()
{
  uint64_t v36 = v0;
  uint64_t v1 = v0 + 136;
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 376);
  if (*(void *)(v0 + 576))
  {
    uint64_t v5 = *(int **)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 360);
    uint64_t v6 = *(void *)(v0 + 328);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 304);
    char v9 = *(unsigned char *)(v0 + 604);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4 + v5[6], v8, v6);
    uint64_t v10 = v4 + v5[7];
    uint64_t v11 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    sub_10001D074(v2, v4 + v5[8], &qword_10163CF20);
    sub_100DB2E50(v3, v4 + v5[9], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    static Date.trustedNow.getter(v4 + v5[10]);
    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 1;
    *(unsigned char *)(v4 + 9) = v9;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100D832D4;
    uint64_t v13 = *(void *)(v0 + 360);
    return sub_101106BA8(v13);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_10137D880;
    *(unsigned char *)(v15 + 16) = 3;
    swift_willThrow();
    sub_100D6BBBC(v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_10001DAB4(v2, &qword_10163CF20);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 440);
    uint64_t v16 = *(void *)(v0 + 448);
    uint64_t v18 = *(void *)(v0 + 432);
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v25 = *(void *)(v0 + 440);
    uint64_t v24 = *(void *)(v0 + 448);
    uint64_t v26 = *(void *)(v0 + 432);
    if (v23)
    {
      os_log_t log = v21;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v33 = v24;
      uint64_t v28 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138543875;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 232) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v27 + 12) = 2160;
      *(void *)(v0 + 240) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 248) = sub_1008FA0F0(v30, v31, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v26);
      _os_log_impl((void *)&_mh_execute_header, log, v22, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v27, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
}

uint64_t sub_100D832D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 592) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  uint64_t v4 = *(void *)(v2 + 320);
  sub_100D6BBBC(v3, type metadata accessor for DeviceEvent);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_100D838A8;
  }
  else {
    uint64_t v5 = sub_100D8344C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100D8344C()
{
  uint64_t v29 = v0;
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 328);
  static Date.trustedNow.getter(v1);
  Date.timeIntervalSince(_:)();
  double v5 = v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v5 <= 1.0)
  {
    uint64_t v23 = *(void *)(v0 + 496);
    sub_100D6BBBC(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v22 = v23;
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 552);
    uint64_t v7 = *(void *)(v0 + 456);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10165E160);
    v6(v7, v9, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v15 = *(void *)(v0 + 456);
    uint64_t v17 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 440);
    uint64_t v18 = *(void *)(v0 + 376);
    if (v13)
    {
      uint64_t v27 = *(void *)(v0 + 376);
      int v26 = *(unsigned __int8 *)(v0 + 604);
      uint64_t v19 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558787;
      *(void *)(v0 + 256) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 264) = sub_1008FA0F0(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      *(_WORD *)(v19 + 22) = 2048;
      *(double *)(v0 + 272) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 32) = 1026;
      *(_DWORD *)(v0 + 600) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Device event for beacon: %{private,mask.hash}s stored in %fs, source: %{public}u.", (uint8_t *)v19, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100D6BBBC(v27, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      sub_100D6BBBC(v18, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }
    uint64_t v22 = v14;
  }
  sub_10001DAB4(v22, &qword_10163CF20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100D838A8()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[62];
  sub_100D6BBBC(v0[47], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_10001DAB4(v1, &qword_10163CF20);
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[55];
  uint64_t v2 = v0[56];
  uint64_t v4 = v0[54];
  uint64_t v5 = v0[37];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[55];
  uint64_t v10 = v0[56];
  uint64_t v12 = v0[54];
  if (v9)
  {
    os_log_t log = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = v10;
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138543875;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[29] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v15;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v13 + 12) = 2160;
    v0[30] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[31] = sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v20, v12);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100D83CCC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 128) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100D83DA8, 0, 0);
}

uint64_t sub_100D83DA8()
{
  uint64_t v43 = v0;
  if (*(unsigned char *)(v0 + 128))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    sub_10033093C(v20, 1);
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v40 = v15;
      uint64_t v29 = swift_slowAlloc();
      unint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446722;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD000000000000017, 0x80000001014181A0, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v30, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      *(_WORD *)(v29 + 22) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v41 = v32;
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v29, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v40;
      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        *(void *)(v0 + 16) = v15;
        sub_10000588C(&qword_101660970);
        CheckedContinuation.resume(throwing:)();
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);

      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD000000000000017, 0x80000001014181A0, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Not resuming continuation in cancelled task.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v36, 1);
    }
    else
    {
      sub_100173E88(*(void *)(v0 + 72), 1);
    }
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD000000000000017, 0x80000001014181A0, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100D844B8(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100D845A4, v1, 0);
}

uint64_t sub_100D845A4()
{
  uint64_t v25 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    v0[3] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[10], v0[8]);
  }

  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[5];
  uint64_t v18 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[11] = v19;
  v19[2] = v15;
  v19[3] = v17;
  v19[4] = v16;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[12] = v20;
  type metadata accessor for SPAccessoryPairingStatus(0);
  *uint64_t v20 = v0;
  v20[1] = sub_100D8491C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v15, v18, 0xD00000000000001ELL, 0x8000000101418180, sub_100DB937C, v19, v21);
}

uint64_t sub_100D8491C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_100DBAADC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_task_dealloc();
    uint64_t v4 = sub_100DBAAD0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D84A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(void *)(v6 + 64);
  v4[9] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10165EA28);
  v4[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[11] = v8;
  v4[12] = *(void *)(v8 + 64);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_100D84B7C, 0, 0);
}

uint64_t sub_100D84B7C()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v15 = v0[8];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v16 = v5;
  uint64_t v8 = v0[4];
  uint64_t v17 = v0[5];
  uint64_t v9 = v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[3], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v2 + *(unsigned __int8 *)(v7 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  v0[14] = v12;
  *(void *)(v12 + 16) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v12 + v11, v16, v6);
  *(void *)(v12 + ((v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v17;
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100D84D58;
  return withTimeout<A>(_:block:)(v13, 0x40AAD21B3B700000, 3, &unk_10165EA90, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_100D84D58()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100DBAB2C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100DBAB28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D84E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[45] = a3;
  v4[46] = a4;
  v4[44] = a2;
  type metadata accessor for String.Encoding();
  v4[47] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v4[48] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  v4[49] = v5;
  v4[50] = *(void *)(v5 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[53] = v6;
  v4[54] = *(void *)(v6 - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[57] = v7;
  v4[58] = *(void *)(v7 - 8);
  v4[59] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CentralManager.State();
  v4[60] = v8;
  v4[61] = *(void *)(v8 - 8);
  v4[62] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101665590);
  v4[63] = swift_task_alloc();
  return _swift_task_switch(sub_100D850FC, 0, 0);
}

uint64_t sub_100D850FC()
{
  uint64_t v18 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100DB1F50((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (My)
  {
    if (sub_100496614())
    {
      uint64_t v3 = qword_1016375E8;
      swift_retain();
      if (v3 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
        swift_release();
        sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
        uint64_t v16 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
        uint64_t v5 = (void *)swift_task_alloc();
        *(void *)(v0 + 512) = v5;
        *uint64_t v5 = v0;
        v5[1] = sub_100D85670;
        return v16();
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10165E160);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      *(void *)(v0 + 176) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s FMIP is disabled!", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)(v0 + 208) = 6;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10165E160);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Feature.FindMy.lineUp is disabled!", v9, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_1013540C0;
    *(unsigned char *)(v10 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t sub_100D85670(uint64_t a1)
{
  *(void *)(*(void *)v1 + 520) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D85770, 0, 0);
}

uint64_t sub_100D85770()
{
  unint64_t v11 = v0;
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (v0[65])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[66] = v2;
    void *v2 = v0;
    v2[1] = sub_100D85A48;
    return sub_10086B480();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      v0[23] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing CloudStorageService!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *os_log_type_t v8 = 0xD000000000000013;
    v8[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100D85A48(char a1)
{
  *(unsigned char *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D85B48, 0, 0);
}

uint64_t sub_100D85B48()
{
  uint64_t v12 = v0;
  if (*(unsigned char *)(v0 + 728) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 504);
    *(void *)(v0 + 536) = type metadata accessor for CentralManager();
    uint64_t v2 = type metadata accessor for CentralManager.Options();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D85E74;
    uint64_t v4 = *(void *)(v0 + 504);
    return CentralManager.__allocating_init(options:)(v4);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10165E160);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v8 = 136446210;
      *(void *)(v0 + 200) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Account is not ready!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)(v0 + 192) = 5;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100D85E74(uint64_t a1)
{
  *(void *)(*(void *)v1 + 552) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D85F74, 0, 0);
}

uint64_t sub_100D85F74()
{
  (*(void (**)(void, void, void))(v0[61] + 104))(v0[62], enum case for CentralManager.State.poweredOn(_:), v0[60]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[70] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D86070;
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[62];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_100D86070()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[61] + 8))(v2[62], v2[60]);
  if (v0) {
    uint64_t v3 = sub_100D87C3C;
  }
  else {
    uint64_t v3 = sub_100D861D8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100D861D8()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[72] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[69];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[41] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[42] = v5;
    sub_100DB1F50(&qword_10165E670, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[43] = sub_1008FA0F0(v7, v8, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %s has powered on!", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v9 = v0[56];
  uint64_t v10 = v0[53];
  uint64_t v11 = v0[54];
  uint64_t v12 = v0[46];
  sub_10000588C(&qword_10165E658);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  v0[73] = v16;
  v0[74] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v16(v15, v12, v10);
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000B7034(0, 1, 0);
  v16(v9, v15, v10);
  Identifier.id.getter();
  uint64_t v17 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v0[75] = v17;
  v0[76] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v9, v10);
  uint64_t v18 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000B7034(0, v18[2] + 1, 1);
    uint64_t v18 = v27;
  }
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1)
  {
    sub_1000B7034(v19 > 1, v20 + 1, 1);
    uint64_t v18 = v27;
  }
  v0[77] = v18;
  uint64_t v22 = v0[58];
  uint64_t v21 = v0[59];
  uint64_t v23 = v0[57];
  v18[2] = v20 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v20, v21, v23);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v26 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v24 = (void *)swift_task_alloc();
  v0[78] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100D86648;
  return v26(v18);
}

uint64_t sub_100D86648(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 632) = a1;
  *(void *)(v3 + 640) = v1;
  swift_task_dealloc();
  if (v1)
  {
    BOOL v4 = sub_100D87D24;
  }
  else
  {
    swift_release();
    BOOL v4 = sub_100D86768;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_100D86768()
{
  uint64_t v26 = v0;
  unint64_t v1 = v0[79];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[73];
    uint64_t v11 = v0[55];
    uint64_t v12 = v0[53];
    uint64_t v13 = v0[46];
    swift_bridgeObjectRelease();
    v10(v11, v13, v12);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[75];
    uint64_t v18 = v0[55];
    uint64_t v19 = v0[53];
    if (v16)
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[40] = sub_1008FA0F0(v21, v22, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v17(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing peripheral for %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v17(v0[55], v0[53]);
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_10137D8A0;
    *(unsigned char *)(v23 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (void (*)(void))v0[1];
    v24();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[79] + 32);
    swift_retain();
  }
  v0[81] = v2;
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[37] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    v0[38] = v2;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[39] = sub_1008FA0F0(v6, v7, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Retrieved peripheral: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v8 = (void *)swift_task_alloc();
  v0[82] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_100D86CD0;
  sub_100D87F0C(v2);
}

uint64_t sub_100D86CD0(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = (void *)*v3;
  v4[83] = a1;
  v4[84] = a2;
  v4[85] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100D87E18;
  }
  else {
    uint64_t v5 = sub_100D86DEC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100D86DEC()
{
  unint64_t v22 = v0;
  uint64_t v1 = v0[83];
  v0[20] = v1;
  unint64_t v2 = v0[84];
  v0[21] = v2;
  sub_1000361E0(v1, v2);
  sub_1000362FC();
  char v3 = DataProtocol.isNull.getter();
  unint64_t v4 = v0[84];
  uint64_t v5 = v0[83];
  if (v3)
  {
    sub_1000361E0(v0[83], v0[84]);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = v0[84];
    uint64_t v10 = v0[83];
    if (v8)
    {
      uint64_t v11 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      v0[35] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      uint64_t v12 = Data.hexString.getter();
      v0[36] = sub_1008FA0F0(v12, v13, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v10, v9);
      sub_10001CFB8(v10, v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Invalid serial number %{public}s!", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[83], v0[84]);
      sub_10001CFB8(v10, v9);
    }

    unint64_t v16 = v0[84];
    uint64_t v17 = v0[83];
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v18 = xmmword_10137D8F0;
    *(unsigned char *)(v18 + 16) = 3;
    swift_willThrow();
    sub_10001CFB8(v17, v16);
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  else
  {
    v0[86] = Data.trimmed.getter();
    v0[87] = v14;
    sub_10001CFB8(v5, v4);
    uint64_t v15 = v0[65];
    return _swift_task_switch(sub_100D87158, v15, 0);
  }
}

uint64_t sub_100D87158()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[88] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D871F8;
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[86];
  return sub_100C12E34(v3, v2);
}

uint64_t sub_100D871F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 712) = a1;
  *(void *)(v3 + 720) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_100D87B20;
  }
  else {
    unint64_t v4 = sub_100D87310;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D87310()
{
  uint64_t v51 = v0;
  uint64_t v1 = v0[89];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[50] + 80);
    sub_100DB2E50(v1 + ((v2 + 32) & ~v2), v0[48], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[49];
  uint64_t v5 = v0[50];
  uint64_t v6 = v0[48];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  unint64_t v8 = v0[87];
  uint64_t v9 = v0[86];
  if (v7 == 1)
  {
    sub_10001DAB4(v0[48], (uint64_t *)&unk_10163B1D0);
    sub_1000361E0(v9, v8);
    sub_1000361E0(v9, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    unint64_t v13 = v0[87];
    uint64_t v14 = v0[86];
    if (v12)
    {
      uint64_t v15 = swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[28] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      static String.Encoding.utf8.getter();
      uint64_t v16 = String.init(data:encoding:)();
      if (!v17) {
        uint64_t v16 = Data.hexString.getter();
      }
      unint64_t v18 = v0[87];
      uint64_t v19 = v0[86];
      v0[29] = sub_1008FA0F0(v16, v17, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v19, v18);
      sub_10001CFB8(v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing record for %{private,mask.hash}s!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[86], v0[87]);
      sub_10001CFB8(v14, v13);
    }

    uint64_t v35 = v0[90];
    static Task<>.checkCancellation()();
    unint64_t v36 = v0[87];
    uint64_t v37 = v0[86];
    unint64_t v38 = v0[84];
    uint64_t v39 = v0[83];
    if (v35)
    {
      sub_10001CFB8(v0[86], v0[87]);
      sub_10001CFB8(v39, v38);
      swift_release();
      swift_release();
LABEL_19:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v46 = (uint64_t (*)(void))v0[1];
      goto LABEL_23;
    }
    v0[27] = 0;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_release();
    swift_release();
    sub_10001CFB8(v39, v38);
    sub_10001CFB8(v37, v36);
    swift_release();
  }
  else
  {
    uint64_t v21 = v0[51];
    uint64_t v20 = v0[52];
    sub_100DB2DE8(v0[48], v20, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100DB2E50(v20, v21, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_1000361E0(v9, v8);
    sub_1000361E0(v9, v8);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    unint64_t v25 = v0[87];
    uint64_t v26 = v0[86];
    if (v24)
    {
      os_log_type_t v49 = v23;
      uint64_t v27 = v0[51];
      uint64_t v28 = swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558787;
      v0[31] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[32] = sub_1008FA0F0(v29, v30, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v27, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      *(_WORD *)(v28 + 22) = 2160;
      v0[33] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 32) = 2081;
      static String.Encoding.utf8.getter();
      uint64_t v31 = String.init(data:encoding:)();
      if (!v32) {
        uint64_t v31 = Data.hexString.getter();
      }
      unint64_t v33 = v0[87];
      uint64_t v34 = v0[86];
      v0[34] = sub_1008FA0F0(v31, v32, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v34, v33);
      sub_10001CFB8(v34, v33);
      _os_log_impl((void *)&_mh_execute_header, v22, v49, "Found existing record %{private,mask.hash}s matching\n%{private,mask.hash}s", (uint8_t *)v28, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(v0[51], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      sub_10001CFB8(v26, v25);
      sub_10001CFB8(v26, v25);
    }

    uint64_t v40 = v0[90];
    static Task<>.checkCancellation()();
    unint64_t v41 = v0[87];
    uint64_t v42 = v0[86];
    unint64_t v43 = v0[84];
    uint64_t v44 = v0[83];
    uint64_t v45 = v0[52];
    if (v40)
    {
      sub_100D6BBBC(v0[52], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      swift_release();
      swift_release();
      sub_10001CFB8(v44, v43);
      sub_10001CFB8(v42, v41);
      goto LABEL_19;
    }
    unint64_t v47 = v0[87];
    v0[30] = 2;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_release();
    sub_10001CFB8(v42, v47);
    sub_10001CFB8(v44, v43);
    swift_release();
    swift_release();
    sub_100D6BBBC(v45, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = (uint64_t (*)(void))v0[1];
LABEL_23:
  return v46();
}

uint64_t sub_100D87B20()
{
  unint64_t v1 = v0[87];
  uint64_t v2 = v0[86];
  unint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  swift_release();
  swift_release();
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D87C3C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D87D24()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D87E18()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D87F0C(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  type metadata accessor for String.Encoding();
  v2[18] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_101639C68);
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  v2[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Peripheral.ConnectionOptions();
  v2[27] = v5;
  v2[28] = *(void *)(v5 - 8);
  v2[29] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v2[30] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v2[31] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639A70);
  v2[32] = v6;
  v2[33] = *(void *)(v6 - 8);
  v2[34] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v2[35] = v7;
  v2[36] = *(void *)(v7 - 8);
  v2[37] = swift_task_alloc();
  return _swift_task_switch(sub_100D88218, v1, 0);
}

uint64_t sub_100D88218()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[38] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    uint64_t v4 = v0[36];
    uint64_t v5 = v0[37];
    uint64_t v6 = v0[35];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[14] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v0[15] = sub_1008FA0F0(v8, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "%{public}s for peripheral: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[31];
  uint64_t v13 = v0[26];
  v0[39] = type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  uint64_t v14 = enum case for ConnectUseCase.findNearbyPencil(_:);
  uint64_t v15 = type metadata accessor for ConnectUseCase();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 104))(v12, v14, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  sub_10000588C(&qword_101639AA8);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101347BA0;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
  v0[9] = v17;
  sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
  sub_10000588C(&qword_101639AB8);
  sub_100062734(&qword_101639AC0, &qword_101639AB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = type metadata accessor for PeripheralPairingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  Peripheral.Options.init(connectionOptions:pairingInfo:)();
  uint64_t v19 = type metadata accessor for Peripheral.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 0, 1, v19);
  uint64_t v20 = type metadata accessor for Peripheral();
  v0[40] = v20;
  uint64_t v21 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[41] = v21;
  unint64_t v22 = (void *)swift_task_alloc();
  v0[42] = v22;
  *unint64_t v22 = v0;
  v22[1] = sub_100D887C4;
  uint64_t v23 = v0[30];
  uint64_t v24 = v0[31];
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v24, v23, v20, v21);
}

uint64_t sub_100D887C4()
{
  uint64_t v2 = (void *)*v1;
  os_log_type_t v3 = (void *)*v1;
  v2[43] = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[31];
  uint64_t v5 = v2[30];
  if (v0)
  {
    uint64_t v6 = v2[17];
    sub_10001DAB4(v5, &qword_101639A80);
    sub_10001DAB4(v4, &qword_101639A88);
    return _swift_task_switch(sub_100D88AF0, v6, 0);
  }
  else
  {
    sub_10001DAB4(v5, &qword_101639A80);
    sub_10001DAB4(v4, &qword_101639A88);
    uint64_t v7 = (void *)swift_task_alloc();
    v2[44] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_100D889BC;
    uint64_t v8 = v2[40];
    uint64_t v9 = v2[41];
    uint64_t v10 = v2[34];
    return dispatch thunk of PeripheralProtocol.subscript.getter(v10, v8, v9);
  }
}

uint64_t sub_100D889BC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 360) = a1;
  *(void *)(v4 + 368) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 136);
  if (v1) {
    uint64_t v6 = sub_100D890E0;
  }
  else {
    uint64_t v6 = sub_100D88DB8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D88AF0()
{
  uint64_t v12 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D88DB8()
{
  uint64_t v1 = v0[23];
  sub_1000B6F60(0, 3, 0);
  type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  unint64_t v3 = _swiftEmptyArrayStorage[2];
  unint64_t v2 = _swiftEmptyArrayStorage[3];
  if (v3 >= v2 >> 1) {
    sub_1000B6F60(v2 > 1, v3 + 1, 1);
  }
  v0[47] = _swiftEmptyArrayStorage;
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[22];
  _swiftEmptyArrayStorage[2] = v3 + 1;
  unint64_t v6 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = (char *)_swiftEmptyArrayStorage + v6 + v7 * v3;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 32);
  v9(v8, v4, v5);
  Identifier.init(stringLiteral:)();
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  unint64_t v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1) {
    sub_1000B6F60(v10 > 1, v11 + 1, 1);
  }
  v0[47] = _swiftEmptyArrayStorage;
  uint64_t v12 = v0[25];
  uint64_t v13 = v0[22];
  _swiftEmptyArrayStorage[2] = v11 + 1;
  v9((char *)_swiftEmptyArrayStorage + v6 + v11 * v7, v12, v13);
  Identifier.init(stringLiteral:)();
  unint64_t v15 = _swiftEmptyArrayStorage[2];
  unint64_t v14 = _swiftEmptyArrayStorage[3];
  if (v15 >= v14 >> 1) {
    sub_1000B6F60(v14 > 1, v15 + 1, 1);
  }
  v0[47] = _swiftEmptyArrayStorage;
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[22];
  _swiftEmptyArrayStorage[2] = v15 + 1;
  v9((char *)_swiftEmptyArrayStorage + v6 + v15 * v7, v16, v17);
  uint64_t v18 = sub_100DB1F50(&qword_101639AD0, (void (*)(uint64_t))&type metadata accessor for Service);
  v0[48] = v18;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[49] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100D893A8;
  uint64_t v20 = v0[39];
  return dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)(_swiftEmptyArrayStorage, v20, v18);
}

uint64_t sub_100D890E0()
{
  uint64_t v12 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D893A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = sub_100D897E4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100D894E4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D894E4()
{
  v0[51] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[52] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D895B4;
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[24];
  return dispatch thunk of ServiceProtocol.subscript.getter(v4, v3, v2);
}

uint64_t sub_100D895B4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[53] = a1;
  v3[54] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[24];
  uint64_t v6 = v3[23];
  uint64_t v7 = v3[22];
  if (v1)
  {
    uint64_t v8 = v3[17];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    return _swift_task_switch(sub_100D89C80, v8, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    unint64_t v10 = (void *)swift_task_alloc();
    v3[55] = v10;
    *unint64_t v10 = v4;
    v10[1] = sub_100D89AC0;
    uint64_t v11 = v3[51];
    uint64_t v12 = v3[21];
    return dispatch thunk of CharacteristicProtocol.read()(v12, v11, v9);
  }
}

uint64_t sub_100D897E4()
{
  uint64_t v12 = v0;
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D89AC0()
{
  os_log_type_t v2 = (void *)*v1;
  v2[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    return _swift_task_switch(sub_100D8A0CC, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (void *)swift_task_alloc();
    v2[57] = v4;
    uint64_t v5 = sub_100062734(&qword_101665560, &qword_101639C68);
    void *v4 = v2;
    v4[1] = sub_100D89F50;
    uint64_t v6 = v2[19];
    return AsyncSequence.first()(v2 + 4, v6, v5);
  }
}

uint64_t sub_100D89C80()
{
  uint64_t v12 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D89F50()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[21];
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[19];
  uint64_t v6 = v2[17];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100D8AD10;
  }
  else {
    uint64_t v7 = sub_100D8A3A8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100D8A0CC()
{
  uint64_t v12 = v0;
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D8A3A8()
{
  unint64_t v43 = v0;
  unint64_t v1 = v0[5];
  if (v1 >> 60 == 15)
  {
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      v0[8] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Failed to read serial number!", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_10137D8F0;
    *(unsigned char *)(v5 + 16) = 3;
    swift_willThrow();
    goto LABEL_14;
  }
  uint64_t v6 = v0[4];
  v0[2] = v6;
  v0[3] = v1;
  sub_1000361E0(v6, v1);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v6, v1);
    sub_1000361E0(v6, v1);
    sub_1000361E0(v6, v1);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      v0[12] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v10 = Data.hexString.getter();
      v0[13] = sub_1008FA0F0(v10, v11, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v6, v1);
      sub_100037A24(v6, v1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Invalid serial number %s!", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v6, v1);
      sub_100037A24(v6, v1);
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_10137D8F0;
    *(unsigned char *)(v23 + 16) = 3;
    swift_willThrow();
    sub_100037A24(v6, v1);
LABEL_14:
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446466;
      v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2114;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      v0[6] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s error %{public}@", (uint8_t *)v26, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v30 = v0[33];
    uint64_t v29 = v0[34];
    uint64_t v31 = v0[32];
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  uint64_t v12 = Data.trimmed.getter();
  unint64_t v14 = v13;
  sub_100037A24(v6, v1);
  sub_1000361E0(v12, v14);
  sub_1000361E0(v12, v14);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  uint64_t v41 = v6;
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v40 = v16;
    uint64_t v17 = swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    v0[10] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    sub_1000361E0(v12, v14);
    static String.Encoding.utf8.getter();
    uint64_t v18 = String.init(data:encoding:)();
    if (!v19) {
      uint64_t v18 = Data.hexString.getter();
    }
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    sub_10001CFB8(v12, v14);
    uint64_t v22 = v0[33];
    uint64_t v39 = v0[34];
    uint64_t v38 = v0[32];
    v0[11] = sub_1008FA0F0(v20, v21, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v12, v14);
    _os_log_impl((void *)&_mh_execute_header, v15, v40, "%{public}s %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    sub_10001CFB8(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v39, v38);
  }
  else
  {
    uint64_t v34 = v0[33];
    uint64_t v35 = v0[34];
    uint64_t v36 = v0[32];

    swift_release();
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v37(v41, v1);
}

uint64_t sub_100D8AD10()
{
  uint64_t v12 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[7] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417E60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D8AFE0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 128) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100D8B0BC, 0, 0);
}

uint64_t sub_100D8B0BC()
{
  uint64_t v43 = v0;
  if (*(unsigned char *)(v0 + 128))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    sub_10033093C(v20, 1);
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v40 = v15;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446722;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v30, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      *(_WORD *)(v29 + 22) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v41 = v32;
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v29, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v40;
      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        *(void *)(v0 + 16) = v15;
        sub_10000588C(&qword_10165EA28);
        CheckedContinuation.resume(throwing:)();
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);

      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Not resuming continuation in cancelled task.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v36, 1);
    }
    else
    {
      sub_100173E88(*(void *)(v0 + 72), 1);
    }
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101418180, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100D8B7CC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100D8B8B8, v1, 0);
}

uint64_t sub_100D8B8B8()
{
  uint64_t v25 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    v0[3] = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[10], v0[8]);
  }

  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[5];
  uint64_t v18 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[11] = v19;
  v19[2] = v15;
  v19[3] = v17;
  v19[4] = v16;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[12] = v20;
  type metadata accessor for SPAccessoryPairingStatus(0);
  *uint64_t v20 = v0;
  v20[1] = sub_100D8BC30;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v15, v18, 0xD00000000000001ALL, 0x8000000101418160, sub_100DB8E6C, v19, v21);
}

uint64_t sub_100D8BC30()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_1000FA9DC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_task_dealloc();
    uint64_t v4 = sub_100D8BD58;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D8BD58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100D8BDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  uint64_t v56 = a6;
  uint64_t v53 = a5;
  uint64_t v63 = a2;
  uint64_t v64 = a4;
  uint64_t v62 = a3;
  uint64_t v50 = a1;
  uint64_t v10 = type metadata accessor for UUID();
  __chkstk_darwin(v10 - 8);
  os_log_type_t v57 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163D210);
  uint64_t v60 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v61 = *(void *)(v13 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v43 = (char *)&v43 - v16;
  uint64_t v18 = sub_10000588C(&qword_10165EA28);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v20;
  __chkstk_darwin(v21);
  os_log_type_t v23 = (char *)&v43 - v22;
  uint64_t v44 = (char *)&v43 - v22;
  uint64_t v55 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue);
  uint64_t v54 = type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v24 = v19;
  os_log_type_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v25 = v18;
  v49(v23, a1, v18);
  uint64_t v65 = v13;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v45(v17, v62, v12);
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = v24;
  uint64_t v28 = (v26 + 24) & ~v26;
  uint64_t v29 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v30 = (v20 + v29 + v28) & ~v29;
  uint64_t v46 = v26 | v29 | 7;
  unint64_t v31 = (v61 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v63;
  unint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  uint64_t v47 = v27 + 32;
  uint64_t v53 = v33;
  v33(v32 + v28, v44, v25);
  os_log_type_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 32);
  v65 += 32;
  uint64_t v35 = v60;
  v34(v32 + v30, v43, v60);
  *(void *)(v32 + v31) = v64;
  uint64_t v36 = v52;
  v45(v52, v62, v35);
  uint64_t v37 = v51;
  v49(v51, v50, v25);
  uint64_t v38 = (v29 + 16) & ~v29;
  uint64_t v39 = (v61 + v26 + v38) & ~v26;
  unint64_t v40 = (v48 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = swift_allocObject();
  v34(v41 + v38, v36, v60);
  v53(v41 + v39, v37, v25);
  *(void *)(v41 + v40) = v64;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100D8C1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(void *)(v6 + 64);
  v4[9] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10165EA28);
  v4[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[11] = v8;
  v4[12] = *(void *)(v8 + 64);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_100D8C31C, 0, 0);
}

uint64_t sub_100D8C31C()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v15 = v0[8];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v16 = v5;
  uint64_t v8 = v0[4];
  uint64_t v17 = v0[5];
  uint64_t v9 = v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[3], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v2 + *(unsigned __int8 *)(v7 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  v0[14] = v12;
  *(void *)(v12 + 16) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v12 + v11, v16, v6);
  *(void *)(v12 + ((v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v17;
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100D8C4F8;
  return withTimeout<A>(_:block:)(v13, 0x40AAD21B3B700000, 3, &unk_10165EA58, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_100D8C4F8()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100D8C684;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100D8C614;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D8C614()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D8C684()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D8C6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[34] = a3;
  v4[35] = a4;
  v4[33] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[36] = v5;
  v4[37] = *(void *)(v5 - 8);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[40] = v6;
  v4[41] = *(void *)(v6 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CentralManager.State();
  v4[43] = v7;
  v4[44] = *(void *)(v7 - 8);
  v4[45] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101665590);
  v4[46] = swift_task_alloc();
  return _swift_task_switch(sub_100D8C8BC, 0, 0);
}

uint64_t sub_100D8C8BC()
{
  uint64_t v18 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100DB1F50((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (My)
  {
    if (sub_100496614())
    {
      uint64_t v3 = qword_1016375E8;
      swift_retain();
      if (v3 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
        swift_release();
        sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
        uint64_t v16 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
        uint64_t v5 = (void *)swift_task_alloc();
        *(void *)(v0 + 376) = v5;
        *uint64_t v5 = v0;
        v5[1] = sub_100D8CDD4;
        return v16();
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10165E160);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      *(void *)(v0 + 160) = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s FMIP is disabled!", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)(v0 + 168) = 6;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10165E160);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Feature.FindMy.lineUp is disabled!", v9, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_1013540C0;
    *(unsigned char *)(v10 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t sub_100D8CDD4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D8CED4, 0, 0);
}

uint64_t sub_100D8CED4()
{
  unint64_t v11 = v0;
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (v0[48])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[49] = v2;
    void *v2 = v0;
    v2[1] = sub_100D8D184;
    return sub_10086B480();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      v0[22] = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing CloudStorageService!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *os_log_type_t v8 = 0xD000000000000013;
    v8[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100D8D184(char a1)
{
  *(unsigned char *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D8D284, 0, 0);
}

uint64_t sub_100D8D284()
{
  uint64_t v12 = v0;
  if (*(unsigned char *)(v0 + 536) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 368);
    *(void *)(v0 + 400) = type metadata accessor for CentralManager();
    uint64_t v2 = type metadata accessor for CentralManager.Options();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D8D57C;
    uint64_t v4 = *(void *)(v0 + 368);
    return CentralManager.__allocating_init(options:)(v4);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10165E160);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v8 = 136446210;
      *(void *)(v0 + 192) = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Account is not ready!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)(v0 + 184) = 5;
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100D8D57C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D8D67C, 0, 0);
}

uint64_t sub_100D8D67C()
{
  (*(void (**)(void, void, void))(v0[44] + 104))(v0[45], enum case for CentralManager.State.poweredOn(_:), v0[43]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[53] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D8D778;
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[45];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_100D8D778()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[44] + 8))(v2[45], v2[43]);
  if (v0) {
    uint64_t v3 = sub_100D8E614;
  }
  else {
    uint64_t v3 = sub_100D8D8E0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100D8D8E0()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[55] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[52];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[30] = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[31] = v5;
    sub_100DB1F50(&qword_10165E670, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[32] = sub_1008FA0F0(v7, v8, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %s has powered on!", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v9 = v0[39];
  uint64_t v10 = v0[36];
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[35];
  sub_10000588C(&qword_10165E658);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  v0[56] = v16;
  v0[57] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v16(v15, v12, v10);
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000B7034(0, 1, 0);
  v16(v9, v15, v10);
  Identifier.id.getter();
  uint64_t v17 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v0[58] = v17;
  v0[59] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v9, v10);
  uint64_t v18 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1000B7034(0, v18[2] + 1, 1);
    uint64_t v18 = v27;
  }
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1)
  {
    sub_1000B7034(v19 > 1, v20 + 1, 1);
    uint64_t v18 = v27;
  }
  v0[60] = v18;
  uint64_t v22 = v0[41];
  uint64_t v21 = v0[42];
  uint64_t v23 = v0[40];
  v18[2] = v20 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v20, v21, v23);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v26 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v24 = (void *)swift_task_alloc();
  v0[61] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100D8DD48;
  return v26(v18);
}

uint64_t sub_100D8DD48(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 496) = a1;
  *(void *)(v3 + 504) = v1;
  swift_task_dealloc();
  if (v1)
  {
    BOOL v4 = sub_100D8E6C4;
  }
  else
  {
    swift_release();
    BOOL v4 = sub_100D8DE64;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_100D8DE64()
{
  uint64_t v26 = v0;
  unint64_t v1 = v0[62];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[56];
    uint64_t v11 = v0[38];
    uint64_t v13 = v0[35];
    uint64_t v12 = v0[36];
    swift_bridgeObjectRelease();
    v10(v11, v13, v12);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[58];
    uint64_t v18 = v0[38];
    uint64_t v19 = v0[36];
    if (v16)
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[29] = sub_1008FA0F0(v21, v22, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v17(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing peripheral for %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v17(v0[38], v0[36]);
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_10137D8A0;
    *(unsigned char *)(v23 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (void (*)(void))v0[1];
    v24();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[62] + 32);
    swift_retain();
  }
  v0[64] = v2;
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[26] = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    v0[27] = v2;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[28] = sub_1008FA0F0(v6, v7, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Retrieved peripheral: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v8 = (void *)swift_task_alloc();
  v0[65] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_100D8E39C;
  sub_100D7B3DC(v2);
}

uint64_t sub_100D8E39C(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 537) = a1;
  *(void *)(v3 + 528) = v1;
  swift_task_dealloc();
  if (v1) {
    os_log_type_t v4 = sub_100D8E780;
  }
  else {
    os_log_type_t v4 = sub_100D8E4B4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D8E4B4()
{
  uint64_t v1 = *(void *)(v0 + 528);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    *(void *)(v0 + 200) = qword_10137DB18[*(char *)(v0 + 537)];
    sub_10000588C(&qword_10165EA28);
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D8E614()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D8E6C4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D8E780()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D8E83C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 128) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100D8E918, 0, 0);
}

uint64_t sub_100D8E918()
{
  uint64_t v43 = v0;
  if (*(unsigned char *)(v0 + 128))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    sub_10033093C(v20, 1);
    swift_errorRetain();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v40 = v15;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446722;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v30, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      *(_WORD *)(v29 + 22) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v41 = v32;
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v29, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v40;
      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        *(void *)(v0 + 16) = v15;
        sub_10000588C(&qword_10165EA28);
        CheckedContinuation.resume(throwing:)();
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);

      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 72);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Not resuming continuation in cancelled task.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v36, 1);
    }
    else
    {
      sub_100173E88(*(void *)(v0 + 72), 1);
    }
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101418160, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100D8F028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_100D8F148, 0, 0);
}

uint64_t sub_100D8F148()
{
  (*(void (**)(void, void, void))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  type metadata accessor for Peripheral();
  Identifier.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D8F218;
  uint64_t v2 = v0[9];
  return sub_100D8F3D0(v2);
}

uint64_t sub_100D8F218()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1007E7150, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100D8F3D0(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for CentralManager.State();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_100D8F50C, v1, 0);
}

uint64_t sub_100D8F50C()
{
  uint64_t v21 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v5 = type metadata accessor for Logger();
  v0[26] = sub_100010324(v5, (uint64_t)qword_10165E160);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[27] = v6;
  v0[28] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[25];
  uint64_t v12 = v0[21];
  uint64_t v11 = v0[22];
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    v0[14] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101417BD0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for identifier: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
  }

  v0[29] = v16;
  v0[30] = type metadata accessor for CentralManager();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[31] = v17;
  void *v17 = v0;
  v17[1] = sub_100D8F7F8;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_100D8F7F8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[32] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[17];
    return _swift_task_switch(sub_100D8F960, v6, 0);
  }
}

uint64_t sub_100D8F960()
{
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for CentralManager.State.poweredOn(_:), v0[18]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D8FA5C;
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[20];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_100D8FA5C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[20];
  uint64_t v4 = v2[19];
  uint64_t v5 = v2[18];
  uint64_t v6 = v2[17];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100D90E10;
  }
  else {
    uint64_t v7 = sub_100D8FBD8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100D8FBD8()
{
  uint64_t v18 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 104) = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101417BD0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s CentralManager has powered on!", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(void, void, void))(v0 + 216))(*(void *)(v0 + 192), *(void *)(v0 + 128), *(void *)(v0 + 168));
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 168);
  if (v6)
  {
    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    *(void *)(v0 + 88) = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101417BD0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 96) = sub_1008FA0F0(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v15(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Retrieving peripheral matching identifier: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 192), *(void *)(v0 + 168));
  }

  sub_10000588C(&qword_10163BC50);
  type metadata accessor for UUID();
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 280) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  Identifier.id.getter();
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100D8FFF8;
  return v16(v12);
}

uint64_t sub_100D8FFF8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[17];
    os_log_type_t v5 = sub_100D90EA4;
  }
  else
  {
    uint64_t v6 = v3[17];
    swift_bridgeObjectRelease();
    os_log_type_t v5 = sub_100D90120;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

void sub_100D90120()
{
  uint64_t v22 = v0;
  unint64_t v1 = v0[37];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    os_log_type_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[27];
    uint64_t v6 = v0[23];
    uint64_t v7 = v0[21];
    uint64_t v8 = v0[16];
    swift_bridgeObjectRelease();
    v5(v6, v8, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[23];
    uint64_t v13 = v0[21];
    if (v11)
    {
      uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[29];
      uint64_t v14 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      v0[9] = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101417BD0, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[10] = sub_1008FA0F0(v15, v16, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Missing peripheral for %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[29])(v0[23], v0[21]);
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_10137D8A0;
    *(unsigned char *)(v17 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (void (*)(void))v0[1];
    v18();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[37] + 32);
    swift_retain();
  }
  v0[39] = v2;
  swift_bridgeObjectRelease();
  uint64_t v19 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                       + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100D904FC;
  v19();
}

uint64_t sub_100D904FC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 328) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 136);
  if (v1)
  {
    uint64_t v6 = sub_100D90F44;
  }
  else
  {
    *(unsigned char *)(v4 + 352) = a1 & 1;
    uint64_t v6 = sub_100D9063C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D9063C()
{
  uint64_t v20 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 352);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  if (v1 == 1)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 312);
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      *(void *)(v0 + 56) = v5;
      type metadata accessor for Peripheral();
      sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = sub_1008FA0F0(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Now unpairing peripheral: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v18 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.unpair()
                            + async function pointer to dispatch thunk of Peripheral.unpair());
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100D90AA8;
    return v18();
  }
  else
  {
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v2, v9);
    uint64_t v11 = *(void *)(v0 + 312);
    if (v10)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      *(void *)(v0 + 16) = sub_1008FA0F0(0xD00000000000001CLL, 0x8000000101417BD0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2082;
      *(void *)(v0 + 24) = v11;
      type metadata accessor for Peripheral();
      sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1008FA0F0(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v9, "%{public}s Peripheral is not paired. No need to unpair %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_100D90AA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    BOOL v4 = sub_100D90FE4;
  }
  else {
    BOOL v4 = sub_100D90BD4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D90BD4()
{
  uint64_t v11 = v0;
  swift_retain_n();
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[39];
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 136446210;
    uint64_t v10 = v5;
    v0[5] = v3;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Bluetooth device unpaired successfully! %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
  }
  else
  {
    swift_release_n();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100D90E10()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D90EA4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D90F44()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D90FE4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D91084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[11] = a2;
  sub_10000588C(&qword_101638CF0);
  v4[14] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = sub_10000588C(&qword_10163D218);
  v4[25] = swift_task_alloc();
  return _swift_task_switch(sub_100D9121C, a4, 0);
}

uint64_t sub_100D9121C()
{
  uint64_t v22 = v0;
  sub_10001D074(v0[11], v0[25], &qword_10163D218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10165E160);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      BOOL v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)BOOL v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      v0[6] = sub_1008FA0F0(v5, v6, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Can't determine accessory state due to failure on peripheral discovery: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  else
  {
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[16];
    sub_100DB2DE8(v0[25], v8, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    sub_100DB2E50(v8, v7, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v11 = *(void (**)(void, uint64_t, void))(v9 + 32);
    uint64_t v12 = v0[22];
    if (EnumCaseMultiPayload == 1)
    {
      v11(v0[18], v12, v0[15]);
      sub_10000588C(&qword_10163BC50);
      uint64_t v13 = type metadata accessor for UUID();
      v0[35] = v13;
      v0[36] = *(void *)(v13 - 8);
      uint64_t v14 = swift_allocObject();
      v0[37] = v14;
      *(_OWORD *)(v14 + 16) = xmmword_101342130;
      Identifier.id.getter();
      uint64_t v20 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                            + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
      uint64_t v15 = (void *)swift_task_alloc();
      v0[38] = v15;
      *uint64_t v15 = v0;
      unint64_t v16 = sub_100D92204;
    }
    else
    {
      v11(v0[20], v12, v0[15]);
      sub_10000588C(&qword_10163BC50);
      uint64_t v19 = type metadata accessor for UUID();
      v0[26] = v19;
      v0[27] = *(void *)(v19 - 8);
      uint64_t v14 = swift_allocObject();
      v0[28] = v14;
      *(_OWORD *)(v14 + 16) = xmmword_101342130;
      Identifier.id.getter();
      uint64_t v20 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                            + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
      uint64_t v15 = (void *)swift_task_alloc();
      v0[29] = v15;
      *uint64_t v15 = v0;
      unint64_t v16 = sub_100D9177C;
    }
    v15[1] = v16;
    return v20(v14);
  }
}

uint64_t sub_100D9177C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 240) = a1;
  *(void *)(v4 + 248) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 104);
  if (v1) {
    unint64_t v6 = sub_100D92C8C;
  }
  else {
    unint64_t v6 = sub_100D918CC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D918CC()
{
  uint64_t v28 = v0;
  unint64_t v1 = v0[30];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v2 = *(void *)(v0[30] + 32);
      swift_retain();
LABEL_6:
      v0[32] = v2;
      swift_bridgeObjectRelease();
      uint64_t v3 = (void *)swift_task_alloc();
      v0[33] = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100D91CF8;
      uint64_t v4 = v0[13];
      v3[2] = v2;
      v3[3] = v4;
      return _swift_task_switch(sub_100D68E78, v4, 0);
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  if (qword_1016370D8 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v6 = v0[19];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v26 = v0[23];
  uint64_t v14 = v0[19];
  uint64_t v15 = v0[20];
  uint64_t v16 = v0[15];
  uint64_t v17 = v0[16];
  if (v13)
  {
    uint64_t v25 = v0[20];
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558275;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v14, v16);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v22 = v25;
  }
  else
  {

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v14, v16);
    uint64_t v22 = v15;
  }
  v21(v22, v16);
  sub_100D6BBBC(v26, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100D91CF8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(unsigned char *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D91E10, v2, 0);
}

uint64_t sub_100D91E10()
{
  if (*(unsigned char *)(v0 + 352) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 216) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 208));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D91FC4;
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 112);
    return sub_100D2F33C(v2, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 128);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    sub_100D6BBBC(v5, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100D91FC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  sub_10001DAB4(v1, &qword_101638CF0);
  return _swift_task_switch(sub_100D920F8, v2, 0);
}

uint64_t sub_100D920F8()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100D6BBBC(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D92204(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 312) = a1;
  *(void *)(v4 + 320) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 104);
  if (v1) {
    uint64_t v6 = sub_100D92D90;
  }
  else {
    uint64_t v6 = sub_100D92354;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D92354()
{
  uint64_t v28 = v0;
  unint64_t v1 = v0[39];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v2 = *(void *)(v0[39] + 32);
      swift_retain();
LABEL_6:
      v0[41] = v2;
      swift_bridgeObjectRelease();
      uint64_t v3 = (void *)swift_task_alloc();
      v0[42] = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100D92780;
      uint64_t v4 = v0[13];
      v3[2] = v2;
      v3[3] = v4;
      return _swift_task_switch(sub_100D68E78, v4, 0);
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  if (qword_1016370D8 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v26 = v0[23];
  uint64_t v14 = v0[17];
  uint64_t v15 = v0[18];
  uint64_t v16 = v0[15];
  uint64_t v17 = v0[16];
  if (v13)
  {
    uint64_t v25 = v0[18];
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v14, v16);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v22 = v25;
  }
  else
  {

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v14, v16);
    uint64_t v22 = v15;
  }
  v21(v22, v16);
  sub_100D6BBBC(v26, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100D92780(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(unsigned char *)(*(void *)v1 + 353) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D92898, v2, 0);
}

uint64_t sub_100D92898()
{
  if (*(unsigned char *)(v0 + 353) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 288) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 280));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100D92A4C;
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 112);
    return sub_100D2FA20(v2, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 128);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    sub_100D6BBBC(v5, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100D92A4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  sub_10001DAB4(v1, &qword_101638CF0);
  return _swift_task_switch(sub_100D92B80, v2, 0);
}

uint64_t sub_100D92B80()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100D6BBBC(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D92C8C()
{
  uint64_t v1 = v0[23];
  (*(void (**)(void, void))(v0[16] + 8))(v0[20], v0[15]);
  sub_100D6BBBC(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100D92D90()
{
  uint64_t v1 = v0[23];
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  sub_100D6BBBC(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100D92E94(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_101639A70);
  v2[36] = v4;
  v2[37] = *(void *)(v4 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BinaryDecoder();
  v2[39] = v5;
  v2[40] = *(void *)(v5 - 8);
  v2[41] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BinaryEncoder();
  v2[42] = v6;
  v2[43] = *(void *)(v6 - 8);
  v2[44] = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  v2[45] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Peripheral.ConnectionOptions();
  v2[46] = v7;
  v2[47] = *(void *)(v7 - 8);
  v2[48] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v2[49] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v2[50] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10163D210);
  v2[51] = v8;
  v2[52] = *(void *)(v8 - 8);
  v2[53] = swift_task_alloc();
  return _swift_task_switch(sub_100D931BC, v1, 0);
}

uint64_t sub_100D931BC()
{
  uint64_t v26 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[54] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    uint64_t v4 = v0[52];
    uint64_t v5 = v0[53];
    uint64_t v6 = v0[51];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[29] = sub_1008FA0F0(0xD000000000000027, 0x8000000101417E80, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2082;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v0[30] = sub_1008FA0F0(v8, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "%{public}s for peripheral: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = v0[49];
  uint64_t v12 = v0[50];
  uint64_t v13 = v0[45];
  uint64_t v14 = type metadata accessor for ConnectUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  sub_10000588C(&qword_101639AA8);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
  v0[24] = v15;
  sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
  sub_10000588C(&qword_101639AB8);
  sub_100062734(&qword_101639AC0, &qword_101639AB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v16 = type metadata accessor for PeripheralPairingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
  Peripheral.Options.init(connectionOptions:pairingInfo:)();
  uint64_t v17 = type metadata accessor for Peripheral.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 0, 1, v17);
  uint64_t v18 = type metadata accessor for Peripheral();
  v0[55] = v18;
  uint64_t v19 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[56] = v19;
  unint64_t v20 = (void *)swift_task_alloc();
  v0[57] = v20;
  *unint64_t v20 = v0;
  v20[1] = sub_100D936F8;
  uint64_t v21 = v0[49];
  uint64_t v22 = v0[50];
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v22, v21, v18, v19);
}

uint64_t sub_100D936F8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[50];
  uint64_t v4 = v2[49];
  uint64_t v5 = v2[32];
  sub_10001DAB4(v4, &qword_101639A80);
  sub_10001DAB4(v3, &qword_101639A88);
  if (v0) {
    uint64_t v6 = sub_100D93B10;
  }
  else {
    uint64_t v6 = sub_100D9386C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D9386C()
{
  uint64_t v13 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[31];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[26] = sub_1008FA0F0(0xD000000000000027, 0x8000000101417E80, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    v0[27] = v3;
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[28] = sub_1008FA0F0(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Connected to peripheral: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  BinaryEncoder.init()();
  BinaryDecoder.init()();
  v0[59] = type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[60] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100D93BEC;
  uint64_t v8 = v0[55];
  uint64_t v9 = v0[56];
  uint64_t v10 = v0[38];
  return dispatch thunk of PeripheralProtocol.subscript.getter(v10, v8, v9);
}

uint64_t sub_100D93B10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D93BEC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[61] = a1;
  v4[62] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[38];
  uint64_t v6 = v3[37];
  uint64_t v7 = v3[36];
  uint64_t v8 = v3[32];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1) {
    uint64_t v9 = sub_100D9401C;
  }
  else {
    uint64_t v9 = sub_100D93D70;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100D93D70()
{
  v0[63] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v1 = sub_100DB1F50(&qword_101639AD0, (void (*)(uint64_t))&type metadata accessor for Service);
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[64] = v2;
  void *v2 = v0;
  v2[1] = sub_100D93E78;
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[35];
  return dispatch thunk of ServiceProtocol.subscript.getter(v4, v3, v1);
}

uint64_t sub_100D93E78(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[65] = a1;
  v4[66] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[35];
  uint64_t v6 = v3[34];
  uint64_t v7 = v3[33];
  uint64_t v8 = v3[32];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1) {
    uint64_t v9 = sub_100D946E4;
  }
  else {
    uint64_t v9 = sub_100D9412C;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100D9401C()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  (*(void (**)(void, void))(v0[40] + 8))(v0[41], v0[39]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D9412C()
{
  uint64_t v40 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered FindMy services and Paired Owner characteristic.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = sub_100F87378();
  *(void *)(v0 + 536) = v4;
  *(void *)(v0 + 544) = v5;
  if (v5 >> 60 == 15)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to generate FindMyNetworkId!", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 312);
    uint64_t v14 = *(void *)(v0 + 320);

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_10137D900;
    *(unsigned char *)(v15 + 16) = 3;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    goto LABEL_19;
  }
  unint64_t v16 = v5;
  uint64_t v17 = v4;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        JUMPOUT(0x100D946D4);
      }
      uint64_t v18 = HIDWORD(v4) - (int)v4;
LABEL_12:
      sub_1000361E0(v4, v5);
LABEL_13:
      if (v18 != 32) {
        goto LABEL_27;
      }
      sub_1000361E0(v17, v16);
      sub_1000361E0(v17, v16);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v0 + 16) = v17;
        *(void *)(v0 + 24) = v16;
        *(void *)(v0 + 32) = 0;
        *(void *)(v0 + 40) = 0;
        *(unsigned char *)(v0 + 48) = 1;
        sub_1000361E0(v17, v16);
        uint64_t v24 = String.init<A>(describing:)();
        *(void *)(v0 + 200) = sub_1008FA0F0(v24, v25, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v17, v16);
        sub_100037A24(v17, v16);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sending .verifyFindMyNetworkId command: %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(v17, v16);
        sub_100037A24(v17, v16);
      }

      uint64_t v26 = *(void *)(v0 + 528);
      *(void *)(v0 + 56) = v17;
      *(void *)(v0 + 64) = v16;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0;
      *(unsigned char *)(v0 + 88) = 1;
      sub_100DB4C58();
      *(void *)(v0 + 552) = BinaryEncoder.encode<A>(_:)();
      *(void *)(v0 + 560) = v27;
      if (v26)
      {
        uint64_t v28 = *(void *)(v0 + 344);
        uint64_t v38 = *(void *)(v0 + 352);
        uint64_t v30 = *(void *)(v0 + 328);
        uint64_t v29 = *(void *)(v0 + 336);
        uint64_t v32 = *(void *)(v0 + 312);
        uint64_t v31 = *(void *)(v0 + 320);
        sub_100037A24(v17, v16);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v38, v29);
        sub_100037A24(v17, v16);
LABEL_19:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
        return v33();
      }
      uint64_t v35 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
      uint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v36;
      *uint64_t v36 = v0;
      v36[1] = sub_100D947F4;
      uint64_t v37 = *(void *)(v0 + 504);
      return dispatch thunk of CharacteristicProtocol.mtu.getter(v37, v35);
    case 2uLL:
      uint64_t v20 = *(void *)(v4 + 16);
      uint64_t v19 = *(void *)(v4 + 24);
      uint64_t v18 = v19 - v20;
      if (!__OFSUB__(v19, v20)) {
        goto LABEL_12;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_27;
    default:
      uint64_t v18 = BYTE6(v5);
      goto LABEL_13;
  }
}

uint64_t sub_100D946E4()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  (*(void (**)(void, void))(v0[40] + 8))(v0[41], v0[39]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D947F4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[72] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[32];
  if (v1)
  {
    uint64_t v6 = sub_100D94B90;
  }
  else
  {
    v4[73] = a1;
    uint64_t v6 = sub_100D94930;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D94930()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = fragment(data:mtu:)();
  uint64_t v3 = swift_allocObject();
  v0[74] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[75] = v4;
  void *v4 = v0;
  v4[1] = sub_100D94A48;
  return withTimeout<A>(_:block:)(v0 + 17, 0x40AAD21B3B700000, 3, &unk_10165E7C8, v3, &type metadata for Data);
}

uint64_t sub_100D94A48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100D95334;
  }
  else {
    uint64_t v4 = sub_100D94CE0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D94B90()
{
  unint64_t v1 = v0[68];
  uint64_t v2 = v0[67];
  uint64_t v4 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v6 = v0[41];
  uint64_t v5 = v0[42];
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[40];
  sub_10001CFB8(v0[69], v0[70]);
  sub_100037A24(v2, v1);
  swift_release();
  sub_100037A24(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D94CE0()
{
  uint64_t v49 = v0;
  unint64_t v1 = *(void *)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v4 = *(void *)(v0 + 136);
  unint64_t v3 = *(void *)(v0 + 144);
  sub_1000361E0(v2, v1);
  sub_1000361E0(v2, v1);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v47 = v4;
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = *(void *)(v0 + 544);
    uint64_t v8 = *(void *)(v0 + 536);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 96) = v8;
    *(void *)(v0 + 112) = 0;
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 104) = v7;
    *(unsigned char *)(v0 + 128) = 1;
    sub_1000361E0(v8, v7);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 184) = sub_1008FA0F0(v10, v11, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v8, v7);
    unint64_t v12 = v7;
    uint64_t v4 = v47;
    sub_100037A24(v8, v12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sent command: %s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v13 = *(void *)(v0 + 544);
    uint64_t v14 = *(void *)(v0 + 536);
    sub_100037A24(v14, v13);
    sub_100037A24(v14, v13);
  }

  sub_1000361E0(v4, v3);
  sub_1000361E0(v4, v3);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134218242;
    uint64_t v18 = 0;
    switch(v3 >> 62)
    {
      case 1uLL:
        LODWORD(v18) = HIDWORD(v47) - v47;
        if (__OFSUB__(HIDWORD(v47), v47))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          JUMPOUT(0x100D95324);
        }
        uint64_t v18 = (int)v18;
LABEL_11:
        *(void *)(v0 + 176) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2080;
        uint64_t v4 = v47;
        uint64_t v22 = Data.hexString.getter();
        *(void *)(v0 + 168) = sub_1008FA0F0(v22, v23, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v47, v3);
        sub_10001CFB8(v47, v3);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Length: %ld received response: %s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v20 = *(void *)(v47 + 16);
        uint64_t v19 = *(void *)(v47 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        uint64_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_11;
        }
        goto LABEL_20;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v18 = BYTE6(v3);
        goto LABEL_11;
    }
  }
  else
  {
    sub_10001CFB8(v4, v3);
    sub_10001CFB8(v4, v3);
  }

  uint64_t v24 = *(void *)(v0 + 608);
  sub_100DB4D5C();
  BinaryDecoder.decode<A>(_:from:)();
  unint64_t v25 = *(void *)(v0 + 560);
  uint64_t v26 = *(void *)(v0 + 552);
  unint64_t v27 = *(void *)(v0 + 544);
  uint64_t v28 = *(void *)(v0 + 536);
  uint64_t v29 = v4;
  if (v24)
  {
    uint64_t v30 = *(void *)(v0 + 344);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 352);
    uint64_t v31 = *(void *)(v0 + 320);
    uint64_t v32 = *(void *)(v0 + 328);
    uint64_t v33 = *(void *)(v0 + 312);
    sub_10001CFB8(v26, v25);
    sub_100037A24(v28, v27);
    sub_10001CFB8(v29, v3);
    swift_release();
    sub_100037A24(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v46, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 344);
    uint64_t v37 = *(void *)(v0 + 328);
    uint64_t v43 = *(void *)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 352);
    uint64_t v39 = *(void *)(v0 + 312);
    uint64_t v38 = *(void *)(v0 + 320);
    sub_10001CFB8(v26, v25);
    sub_100037A24(v28, v27);
    sub_10001CFB8(v29, v3);
    swift_release();
    sub_100037A24(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v44, v43);
    uint64_t v40 = *(void *)(v0 + 152);
    uint64_t v41 = *(void *)(v0 + 160);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v42(v40, v41);
  }
}

uint64_t sub_100D95334()
{
  unint64_t v1 = v0[68];
  uint64_t v2 = v0[67];
  uint64_t v4 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v6 = v0[41];
  uint64_t v5 = v0[42];
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[40];
  sub_10001CFB8(v0[69], v0[70]);
  sub_100037A24(v2, v1);
  swift_release();
  sub_100037A24(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D95484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v78 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v68 - v11;
  uint64_t v77 = type metadata accessor for AccessoryProductInfo();
  unint64_t v13 = (uint64_t *)(a2 + *(int *)(v77 + 92));
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  swift_retain();
  uint64_t v16 = sub_100D21AA4(v14, v15);
  unint64_t v18 = v17;
  swift_release();
  if (v18 >> 60 == 15)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10165E160);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to generate E1 blob.", v22, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(void *)uint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
    *(unsigned char *)(v23 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = sub_100F87378();
    if (v26 >> 60 == 15)
    {
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10165E160);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to generate FindMyNetworkId.", v30, 2u);
        swift_slowDealloc();
      }

      sub_1004AF24C();
      swift_allocError();
      *(void *)uint64_t v31 = 0;
      *(void *)(v31 + 8) = 0;
      *(unsigned char *)(v31 + 16) = 3;
      swift_willThrow();
      return sub_100037A24(v16, v18);
    }
    else
    {
      unint64_t v32 = v26;
      uint64_t v74 = v10;
      uint64_t v75 = v25;
      uint64_t v73 = a2;
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v71 = v4;
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10165E160);
      sub_1000361E0(v16, v18);
      sub_1000361E0(v16, v18);
      uint64_t v70 = v34;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v76 = v16;
      uint64_t v72 = v12;
      if (v37)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        v79[0] = (uint64_t)v69;
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v68 = v38 + 4;
        sub_1000361E0(v76, v18);
        uint64_t v39 = Data.hexString.getter();
        unint64_t v41 = v40;
        sub_100037A24(v76, v18);
        uint64_t v80 = sub_1008FA0F0(v39, v41, v79);
        uint64_t v42 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v42, v18);
        sub_100037A24(v42, v18);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "E1: %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(v16, v18);
        sub_100037A24(v16, v18);
      }

      uint64_t v43 = v75;
      sub_1000361E0(v75, v32);
      sub_1000361E0(v43, v32);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v70 = swift_slowAlloc();
        v79[0] = v70;
        uint64_t v69 = v46;
        *(_DWORD *)uint64_t v46 = 136315138;
        uint64_t v68 = v46 + 4;
        sub_1000361E0(v43, v32);
        uint64_t v47 = Data.hexString.getter();
        unint64_t v49 = v48;
        sub_100037A24(v43, v32);
        uint64_t v80 = sub_1008FA0F0(v47, v49, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v43, v32);
        sub_100037A24(v43, v32);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "findMyNetworkId: %s", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(v43, v32);
        sub_100037A24(v43, v32);
      }

      uint64_t v50 = (uint64_t)v72;
      uint64_t v51 = *(void *)(v5 + 160);
      uint64_t v52 = type metadata accessor for AccessoryMetadata(0);
      if (*(unsigned char *)(v78 + *(int *)(v52 + 40) + 16))
      {
        swift_retain();
        sub_100037A24(v76, v18);
        uint64_t v53 = 0;
        uint64_t v54 = 0;
      }
      else
      {
        swift_retain();
        uint64_t v53 = sub_100BBA674();
        uint64_t v54 = v55;
        sub_100037A24(v76, v18);
      }
      *(void *)(v51 + 88) = v53;
      *(void *)(v51 + 96) = v54;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void *)(v5 + 160);
      os_log_type_t v57 = (uint64_t *)(v78 + *(int *)(v52 + 20));
      uint64_t v58 = *v57;
      unint64_t v59 = v57[1];
      uint64_t v60 = *(void *)(v56 + 104);
      unint64_t v61 = *(void *)(v56 + 112);
      *(void *)(v56 + 104) = *v57;
      *(void *)(v56 + 112) = v59;
      sub_1000361E0(v58, v59);
      sub_100037A24(v60, v61);
      uint64_t v62 = (uint64_t *)(*(void *)(v5 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
      uint64_t v63 = *v62;
      unint64_t v64 = v62[1];
      *uint64_t v62 = v75;
      v62[1] = v32;
      sub_100037A24(v63, v64);
      uint64_t v65 = *(void *)(v5 + 160);
      sub_100DB2E50(v73, v50, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v77 - 8) + 56))(v50, 0, 1);
      uint64_t v66 = (uint64_t)v74;
      sub_10001D608(v50, (uint64_t)v74, (uint64_t *)&unk_10166BFA0);
      uint64_t v67 = v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess();
      swift_retain();
      sub_100062604(v66, v67, (uint64_t *)&unk_10166BFA0);
      swift_endAccess();
      return swift_release();
    }
  }
}

_OWORD *sub_100D95C7C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 160);
  unint64_t v3 = v2[6];
  if (v3 >> 60 == 15)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing E1 blob to generate init pairing.", v7, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(unsigned char *)(v8 + 16) = 3;
    return (_OWORD *)swift_willThrow();
  }
  else
  {
    uint64_t v10 = v2[5];
    uint64_t v11 = (void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
    unint64_t v12 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8);
    if (v12 >> 60 == 15)
    {
      sub_1000361E0(v2[5], v2[6]);
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10165E160);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing FindMyNetworkId to generate init pairing.", v16, 2u);
        swift_slowDealloc();
      }

      sub_1004AF24C();
      swift_allocError();
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;
      *(unsigned char *)(v17 + 16) = 3;
      swift_willThrow();
      return (_OWORD *)sub_100037A24(v10, v3);
    }
    else
    {
      uint64_t v18 = v1;
      uint64_t v19 = *v11;
      uint64_t v20 = v2[2];
      unint64_t v21 = v2[3];
      sub_100DC4A6C(v20, v21, v10, v3, *v11, v12, v54);
      uint64_t v45 = v54[1];
      uint64_t v46 = v54[0];
      uint64_t v43 = v54[3];
      uint64_t v44 = v54[2];
      uint64_t v41 = v54[5];
      uint64_t v42 = v54[4];
      sub_100037A38(v10, v3);
      sub_100037A38(v19, v12);
      sub_100037A38(v10, v3);
      uint64_t v47 = v19;
      sub_100037A38(v19, v12);
      sub_1000361E0(v20, v21);
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10165E160);
      swift_retain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_t log = v23;
        os_log_type_t type = v24;
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)&long long v49 = v36;
        uint64_t v26 = *(void *)(v18 + 160);
        uint64_t v28 = *(void *)(v26 + 16);
        unint64_t v27 = *(void *)(v26 + 24);
        sub_1000361E0(v28, v27);
        unint64_t v39 = v12;
        uint64_t v40 = v10;
        uint64_t v29 = Data.hexString.getter();
        unint64_t v31 = v30;
        sub_10001CFB8(v28, v27);
        uint64_t v32 = v29;
        unint64_t v12 = v39;
        v54[8] = sub_1008FA0F0(v32, v31, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v10 = v40;
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v23 = log;
        _os_log_impl((void *)&_mh_execute_header, log, type, "sessionNonce: %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      *(void *)&long long v49 = v46;
      *((void *)&v49 + 1) = v45;
      uint64_t v50 = v44;
      uint64_t v51 = v43;
      uint64_t v52 = v42;
      uint64_t v53 = v41;
      sub_1001E3AA0(&v49);
      sub_100DB4B1C(v54, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "generateInitPairingPayload request success.", v35, 2u);
        swift_slowDealloc();
        sub_100037A24(v47, v12);
        sub_100037A24(v10, v3);

        sub_100DB4B1C(v54, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      }
      else
      {
        sub_100DB4B1C(v54, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        sub_100037A24(v47, v12);
        sub_100037A24(v10, v3);
      }
      return sub_1001E1A4C(&v49, a1);
    }
  }
}

uint64_t sub_100D96270(uint64_t a1)
{
  v2[428] = v1;
  v2[427] = a1;
  v2[429] = *v1;
  sub_10000588C(&qword_101638CF0);
  v2[430] = swift_task_alloc();
  v2[431] = swift_task_alloc();
  v2[432] = type metadata accessor for PencilPairingLockCheckResponse();
  v2[433] = swift_task_alloc();
  v2[434] = swift_task_alloc();
  v2[435] = sub_10000588C(&qword_10165E700);
  v2[436] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[437] = v3;
  v2[438] = *(void *)(v3 - 8);
  v2[439] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[440] = v4;
  v2[441] = *(void *)(v4 - 8);
  v2[442] = swift_task_alloc();
  v2[443] = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v2[444] = swift_task_alloc();
  v2[445] = swift_task_alloc();
  return _swift_task_switch(sub_100D964D8, v1, 0);
}

uint64_t sub_100D964D8()
{
  uint64_t v52 = v0;
  uint64_t v1 = *(void *)(v0 + 3424);
  swift_retain();
  sub_100D22844(v0 + 1536);
  sub_10001D608(v0 + 1536, v0 + 16, &qword_10165DDE8);
  swift_release();
  sub_10001D608(v0 + 1536, v0 + 624, &qword_10165DDE8);
  if (sub_100DB38C4(v0 + 624) == 1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10165E160);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to create pairing check data.", v5, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD00000000000001ALL;
    *(void *)(v6 + 8) = 0x80000001013F2440;
    *(unsigned char *)(v6 + 16) = 0;
    swift_willThrow();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
  memcpy((void *)(v0 + 320), (const void *)(v0 + 624), 0x130uLL);
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v0 + 3568) = sub_100010324(v7, (uint64_t)qword_10165E160);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_10001D608(v0 + 16, v0 + 1840, &qword_10165DDE8);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB38DC);
  sub_10025E980((uint64_t *)(v0 + 1840));
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  os_log_t log = v8;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136316162;
    os_log_type_t type = v9;
    uint64_t v11 = *(void *)(v0 + 560);
    unint64_t v12 = *(void *)(v0 + 568);
    sub_1000361E0(v11, v12);
    uint64_t v13 = Data.description.getter();
    unint64_t v15 = v14;
    sub_10001CFB8(v11, v12);
    *(void *)(v0 + 3376) = sub_1008FA0F0(v13, v15, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v16 = *(void *)(v0 + 576);
    unint64_t v17 = *(void *)(v0 + 584);
    sub_1000361E0(v16, v17);
    uint64_t v18 = Data.description.getter();
    unint64_t v20 = v19;
    sub_10001CFB8(v16, v17);
    *(void *)(v0 + 3384) = sub_1008FA0F0(v18, v20, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v21 = *(void *)(v0 + 512);
    unint64_t v22 = *(void *)(v0 + 520);
    sub_1000361E0(v21, v22);
    uint64_t v23 = Data.description.getter();
    unint64_t v25 = v24;
    sub_10001CFB8(v21, v22);
    *(void *)(v0 + 3392) = sub_1008FA0F0(v23, v25, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    *(_WORD *)(v10 + 32) = 2080;
    uint64_t v26 = *(void *)(v0 + 496);
    unint64_t v27 = *(void *)(v0 + 504);
    sub_1000361E0(v26, v27);
    uint64_t v28 = Data.description.getter();
    unint64_t v30 = v29;
    sub_10001CFB8(v26, v27);
    *(void *)(v0 + 3400) = sub_1008FA0F0(v28, v30, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    *(_WORD *)(v10 + 42) = 2080;
    uint64_t v31 = *(void *)(v0 + 480);
    unint64_t v32 = *(void *)(v0 + 488);
    sub_1000361E0(v31, v32);
    uint64_t v33 = Data.description.getter();
    unint64_t v35 = v34;
    sub_10001CFB8(v31, v32);
    *(void *)(v0 + 3408) = sub_1008FA0F0(v33, v35, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    _os_log_impl((void *)&_mh_execute_header, log, type, "nonce: %s e1: %s attestation: %s\ncsr: %s certs: %s", (uint8_t *)v10, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_10001D608(v0 + 16, v0 + 928, &qword_10165DDE8);
    sub_10025EE90((uint64_t *)(v0 + 928));
    sub_10025EE90((uint64_t *)(v0 + 320));
    sub_10001D608(v0 + 16, v0 + 1232, &qword_10165DDE8);
    sub_10025EE90((uint64_t *)(v0 + 1232));
    sub_10025EE90((uint64_t *)(v0 + 320));
    sub_10001D608(v0 + 16, v0 + 2448, &qword_10165DDE8);
    sub_10025EE90((uint64_t *)(v0 + 2448));
    sub_10025EE90((uint64_t *)(v0 + 320));
    sub_10001D608(v0 + 16, v0 + 2144, &qword_10165DDE8);
    sub_10025EE90((uint64_t *)(v0 + 2144));
    sub_10025EE90((uint64_t *)(v0 + 320));
  }
  uint64_t v36 = (uint64_t *)(*(void *)(v1 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v37 = *v36;
  *(void *)(v0 + 3576) = *v36;
  unint64_t v38 = v36[1];
  *(void *)(v0 + 3584) = v38;
  if (v38 >> 60 == 15)
  {
LABEL_15:
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Invalid serial number.", v41, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v42 = xmmword_10137D8F0;
    *(unsigned char *)(v42 + 16) = 3;
    swift_willThrow();
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    goto LABEL_18;
  }
  *(void *)(v0 + 3312) = v37;
  *(void *)(v0 + 3320) = v38;
  sub_1000361E0(v37, v38);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v37, v38);
    goto LABEL_15;
  }
  *(void *)(v0 + 3592) = Data.trimmed.getter();
  *(void *)(v0 + 3600) = v45;
  uint64_t v46 = qword_1016375E8;
  swift_retain();
  if (v46 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 3224, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 3248))
  {
    sub_10001CEB0((long long *)(v0 + 3224), v0 + 3184);
    swift_release();
    sub_10001CD44((void *)(v0 + 3184), *(void *)(v0 + 3208));
    os_log_t loga = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 3608) = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_100D96F0C;
    return loga();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D96F0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 3424);
  *(void *)(*(void *)v1 + 3616) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D97024, v2, 0);
}

uint64_t sub_100D97024()
{
  uint64_t v1 = (uint64_t)(v0 + 398);
  uint64_t v2 = v0[452];
  if (v2)
  {
    uint64_t v3 = v0[429];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = swift_allocObject();
    v0[453] = v4;
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v3;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[454] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100D97280;
    return withTimeout<A>(_:block:)(v5, 0x8155A43676E00000, 6, &unk_10165E710, v4, (char *)&type metadata for () + 8);
  }
  else
  {
    unint64_t v6 = v0[450];
    uint64_t v7 = v0[449];
    unint64_t v8 = v0[448];
    uint64_t v9 = v0[447];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v10 = 0xD000000000000013;
    v10[1] = 0x80000001014033F0;
    swift_willThrow();
    sub_10001CFB8(v7, v6);
    sub_100037A24(v9, v8);
    sub_100DB3A98((uint64_t)(v0 + 192), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100D97280()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3640) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 3424);
    uint64_t v4 = sub_100D98B80;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 3424);
    swift_release();
    uint64_t v4 = sub_100D973A8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D973A8()
{
  return _swift_task_switch(sub_100D973C4, *(void *)(v0 + 3616), 0);
}

uint64_t sub_100D973C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[456] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D97464;
  uint64_t v2 = v0[450];
  uint64_t v3 = v0[449];
  return sub_100C12E34(v3, v2);
}

uint64_t sub_100D97464(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 3656) = a1;
  *(void *)(v4 + 3664) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 3424);
  if (v1) {
    unint64_t v6 = sub_100D97950;
  }
  else {
    unint64_t v6 = sub_100D9759C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D9759C()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 3656);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 3672) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 3544);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 3728) = v4;
    *(void *)(v0 + 3680) = *(void *)(v3 + 72);
    *(void *)(v0 + 3688) = 0;
    uint64_t v5 = *(void *)(v0 + 3560);
    uint64_t v6 = *(void *)(v0 + 3552);
    sub_100DB2E50(v1 + ((v4 + 32) & ~(unint64_t)v4), v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100DB2E50(v5, v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(void *)(v0 + 3552);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446466;
      *(void *)(v0 + 3360) = sub_1008FA0F0(0xD000000000000020, 0x8000000101417CE0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2082;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 3368) = sub_1008FA0F0(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v9, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Removing dupe: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(*(void *)(v0 + 3552), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    (*(void (**)(void, void, void))(*(void *)(v0 + 3504) + 16))(*(void *)(v0 + 3512), *(void *)(v0 + 3560), *(void *)(v0 + 3496));
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 3696) = v16;
    void *v16 = v0;
    v16[1] = sub_100D97A84;
    uint64_t v17 = *(void *)(v0 + 3536);
    return sub_100D994E8(v17, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 3712) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100D97FC4;
    uint64_t v14 = *(void *)(v0 + 3488);
    return sub_100D9B890(v14, v0 + 320);
  }
}

uint64_t sub_100D97950()
{
  unint64_t v1 = v0[450];
  uint64_t v2 = v0[449];
  unint64_t v3 = v0[448];
  uint64_t v4 = v0[447];
  swift_release();
  sub_10001CFB8(v2, v1);
  sub_100037A24(v4, v3);
  sub_100DB3A98((uint64_t)(v0 + 192), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D97A84()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 3704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[442];
    uint64_t v4 = v2[441];
    uint64_t v5 = v2[440];
    uint64_t v6 = v2[428];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100D98CC0;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v9 = v2[428];
    (*(void (**)(void, void))(v2[441] + 8))(v2[442], v2[440]);
    uint64_t v7 = sub_100D97BEC;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100D97BEC()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 3672);
  uint64_t v2 = *(void *)(v0 + 3688) + 1;
  sub_100D6BBBC(*(void *)(v0 + 3560), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 3712) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D97FC4;
    uint64_t v4 = *(void *)(v0 + 3488);
    return sub_100D9B890(v4, v0 + 320);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 3688) + 1;
    *(void *)(v0 + 3688) = v6;
    uint64_t v7 = *(void *)(v0 + 3560);
    uint64_t v8 = *(void *)(v0 + 3552);
    sub_100DB2E50(*(void *)(v0 + 3656)+ ((*(unsigned __int8 *)(v0 + 3728) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3728))+ *(void *)(v0 + 3680) * v6, v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100DB2E50(v7, v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 3552);
    if (v11)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      *(void *)(v0 + 3360) = sub_1008FA0F0(0xD000000000000020, 0x8000000101417CE0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 3368) = sub_1008FA0F0(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v12, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Removing dupe: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100D6BBBC(*(void *)(v0 + 3552), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    (*(void (**)(void, void, void))(*(void *)(v0 + 3504) + 16))(*(void *)(v0 + 3512), *(void *)(v0 + 3560), *(void *)(v0 + 3496));
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 3696) = v16;
    void *v16 = v0;
    v16[1] = sub_100D97A84;
    uint64_t v17 = *(void *)(v0 + 3536);
    return sub_100D994E8(v17, 0);
  }
}

uint64_t sub_100D97FC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 3424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D980D4, v1, 0);
}

uint64_t sub_100D980D4()
{
  os_log_type_t v40 = v0;
  uint64_t v1 = (id *)v0[436];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = *v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138543362;
      uint64_t v7 = v2;
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      v0[419] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v8;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pairing lock check failed. Error: %{public}@", v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v3 = v2;
    }

    v0[418] = v2;
    type metadata accessor for SPPairingSessionError(0);
    sub_100DB1F50(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.code.getter();
    unint64_t v20 = v0[450];
    uint64_t v21 = v0[449];
    unint64_t v22 = v0[448];
    uint64_t v23 = v0[447];
    if (v0[417] == 18)
    {
      sub_1004AF24C();
      swift_allocError();
      *(_OWORD *)uint64_t v24 = xmmword_10137D8C0;
      *(unsigned char *)(v24 + 16) = 3;
    }
    else
    {
      sub_1004AF24C();
      swift_allocError();
      *(void *)uint64_t v25 = v2;
      *(void *)(v25 + 8) = 0;
      *(unsigned char *)(v25 + 16) = 1;
      uint64_t v26 = v2;
    }
    swift_willThrow();
    sub_100DB3A98((uint64_t)(v0 + 192), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100037A24(v23, v22);
    swift_release();
    sub_10001CFB8(v21, v20);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  else
  {
    uint64_t v9 = (uint64_t)(v0 + 344);
    uint64_t v10 = v0[434];
    uint64_t v11 = v0[433];
    sub_100DB2DE8((uint64_t)v1, v10, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    sub_100DB2E50(v10, v11, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[433];
    if (v14)
    {
      uint64_t v16 = v0[432];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      if (*(void *)(v15 + *(int *)(v16 + 40) + 8) >> 60 == 15)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0xE000000000000000;
      }
      else
      {
        uint64_t v18 = Data.hexString.getter();
        unint64_t v19 = v29;
      }
      uint64_t v30 = v0[433];
      v0[416] = sub_1008FA0F0(v18, v19, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC(v30, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received SeedS and S3 from server. Pairing token: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = (uint64_t)(v0 + 344);
    }
    else
    {
      sub_100D6BBBC(v0[433], (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    }
    uint64_t v31 = v0[438];
    uint64_t v32 = v0[437];
    uint64_t v33 = v0[431];
    uint64_t v34 = v0[430];
    uint64_t v35 = *(void *)(v0[428] + 160);
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 16))(v33, v0[434] + *(int *)(v0[432] + 32), v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v32);
    sub_10001D608(v33, v34, &qword_101638CF0);
    uint64_t v36 = v35 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess();
    swift_retain();
    sub_100062604(v34, v36, &qword_101638CF0);
    swift_endAccess();
    swift_release();
    uint64_t v37 = (void *)swift_task_alloc();
    v0[465] = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_100D98730;
    uint64_t v38 = v0[434];
    return sub_100D9C0D4(v9, v38);
  }
}

uint64_t sub_100D98730()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 3424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D98840, v1, 0);
}

uint64_t sub_100D98840()
{
  sub_10001D608(v0 + 2752, v0 + 2896, &qword_10165E688);
  if (sub_100DB3DC4(v0 + 2896) == 1)
  {
    unint64_t v1 = *(void *)(v0 + 3600);
    uint64_t v2 = *(void *)(v0 + 3592);
    unint64_t v3 = *(void *)(v0 + 3584);
    uint64_t v4 = *(void *)(v0 + 3576);
    uint64_t v5 = *(void *)(v0 + 3472);
    sub_1004AF24C();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD00000000000001ALL;
    *(void *)(v6 + 8) = 0x8000000101417CC0;
    *(unsigned char *)(v6 + 16) = 0;
    swift_willThrow();
    sub_10001CFB8(v2, v1);
    swift_release();
    sub_100037A24(v4, v3);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100D6BBBC(v5, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_1001E1A4C((_OWORD *)(v0 + 2896), (_OWORD *)(v0 + 3040));
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully generated finalize pairing command.", v10, 2u);
      swift_slowDealloc();
    }
    unint64_t v11 = *(void *)(v0 + 3584);
    uint64_t v12 = *(void *)(v0 + 3576);
    uint64_t v13 = *(void *)(v0 + 3472);
    BOOL v14 = *(_OWORD **)(v0 + 3416);
    sub_10001CFB8(*(void *)(v0 + 3592), *(void *)(v0 + 3600));

    swift_release();
    sub_100037A24(v12, v11);
    sub_100DB3A98(v0 + 1536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
    sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    sub_1001E1A4C((_OWORD *)(v0 + 3040), v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v7();
}

uint64_t sub_100D98B80()
{
  unint64_t v1 = v0[450];
  uint64_t v2 = v0[449];
  unint64_t v3 = v0[448];
  uint64_t v4 = v0[447];
  sub_100DB3A98((uint64_t)(v0 + 192), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
  sub_100037A24(v4, v3);
  swift_release();
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100D98CC0()
{
  unint64_t v1 = v0[448];
  uint64_t v2 = v0[447];
  uint64_t v3 = v0[445];
  sub_10001CFB8(v0[449], v0[450]);
  swift_release();
  sub_100037A24(v2, v1);
  sub_100DB3A98((uint64_t)(v0 + 192), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100DB3B24);
  sub_100D6BBBC(v3, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D98E10(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100D98ED0, 0, 0);
}

uint64_t sub_100D98ED0()
{
  uint64_t v8 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_1008FA0F0(0xD000000000000020, 0x8000000101417CE0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available... %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_100D990B0, v5, 0);
}

uint64_t sub_100D990B0()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D99160;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_100D99160()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_100D99294;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_100D99370;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D99294()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  return _swift_task_switch(sub_100D9930C, 0, 0);
}

uint64_t sub_100D9930C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D99370()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_1008FA0F0(0xD000000000000020, 0x8000000101417CE0, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100D994E8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 532) = a2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v2;
  uint64_t v4 = type metadata accessor for CloudKitCoordinator.Database();
  *(void *)(v3 + 208) = v4;
  *(void *)(v3 + 216) = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = swift_task_alloc();
  sub_10000588C(&qword_10165E5D0);
  *(void *)(v3 + 232) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 240) = v5;
  *(void *)(v3 + 248) = *(void *)(v5 - 8);
  *(void *)(v3 + 256) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocalFindableAccessoryRecord();
  *(void *)(v3 + 272) = v6;
  *(void *)(v3 + 280) = *(void *)(v6 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  *(void *)(v3 + 296) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 304) = v8;
  *(void *)(v3 + 312) = *(void *)(v8 + 64);
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  *(void *)(v3 + 336) = swift_task_alloc();
  return _swift_task_switch(sub_100D99748, v2, 0);
}

uint64_t sub_100D99748()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 16);
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 344) = sub_100010324(v6, (uint64_t)qword_10165E160);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 352) = v7;
  *(void *)(v0 + 360) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 304);
  if (v10)
  {
    os_log_type_t type = v9;
    uint64_t v14 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    *(void *)(v0 + 176) = sub_1008FA0F0(0xD00000000000003ALL, 0x8000000101417B90, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v15, v16, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (uint64_t *)(v0 + 16);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(*(void *)(v0 + 336), *(void *)(v0 + 296));
  }

  *(void *)(v0 + 368) = v17;
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100DB1F50((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v19 = sub_10001D958(v1);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v19, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (My)
  {
    uint64_t v20 = qword_1016375E8;
    swift_retain();
    if (v20 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
      swift_release();
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      unint64_t v29 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
      unint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v22;
      *unint64_t v22 = v0;
      v22[1] = sub_100D99CD4;
      return v29();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Feature.FindMy.lineUp is disabled!", v25, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v26 = xmmword_1013540C0;
    *(unsigned char *)(v26 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  return result;
}

uint64_t sub_100D99CD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D99DEC, v2, 0);
}

uint64_t sub_100D99DEC()
{
  BOOL v10 = v0;
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[48])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter();
    uint64_t v2 = v0[48];
    return _swift_task_switch(sub_100D9A060, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      v0[20] = sub_1008FA0F0(0xD00000000000003ALL, 0x8000000101417B90, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s No CloudStorageService available!", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_101354100;
    *(unsigned char *)(v6 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100D9A060()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[49] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D9A0FC;
  uint64_t v3 = v0[32];
  uint64_t v2 = v0[33];
  return sub_100C12834(v2, v3);
}

uint64_t sub_100D9A0FC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[48];
    os_log_type_t v4 = sub_100D9A5D8;
  }
  else
  {
    uint64_t v5 = v2[25];
    (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
    os_log_type_t v4 = sub_100D9A234;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D9A234()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v5 = *(void *)(v0 + 296);
    uint64_t v6 = *(void *)(v0 + 192);
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B1D0);
    v3(v4, v6, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 296);
    if (v9)
    {
      os_log_type_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 168) = sub_1008FA0F0(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v24(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No LocalFindableAccessoryRecord corresponds to peripheralIdentifier: %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 320), *(void *)(v0 + 296));
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v22 = xmmword_101354100;
    *(unsigned char *)(v22 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 288);
    sub_100DB2DE8(v2, v15, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v16 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 528) = v16;
    uint64_t v17 = (uint64_t *)(v15 + v16);
    uint64_t v18 = *v17;
    *(void *)(v0 + 408) = *v17;
    unint64_t v19 = v17[1];
    *(void *)(v0 + 416) = v19;
    sub_1000361E0(v18, v19);
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 424) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100D9A720;
    return sub_100DAFB8C(v18, v19);
  }
}

uint64_t sub_100D9A5D8()
{
  uint64_t v1 = v0[25];
  (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
  return _swift_task_switch(sub_100D9A654, v1, 0);
}

uint64_t sub_100D9A654()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D9A720()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  unint64_t v3 = v2[52];
  uint64_t v4 = v2[51];
  uint64_t v5 = v2[25];
  sub_10001CFB8(v4, v3);
  if (v0) {
    uint64_t v6 = sub_100D9B6A4;
  }
  else {
    uint64_t v6 = sub_100D9A87C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100D9A87C()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 288) + *(int *)(v0 + 528));
  uint64_t v2 = *v1;
  *(void *)(v0 + 440) = *v1;
  unint64_t v3 = v1[1];
  *(void *)(v0 + 448) = v3;
  sub_1000361E0(v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v4;
  void *v4 = v0;
  v4[1] = sub_100D9A94C;
  uint64_t v5 = *(void *)(v0 + 288);
  return sub_100D7D230(v5, v2, v3);
}

uint64_t sub_100D9A94C()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 448);
  uint64_t v2 = *(void *)(*(void *)v0 + 440);
  uint64_t v3 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  sub_10001CFB8(v2, v1);
  return _swift_task_switch(sub_100D9AA98, v3, 0);
}

uint64_t sub_100D9AA98()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = swift_task_alloc();
  v0[58] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = v0[48];
  return _swift_task_switch(sub_100D9AB0C, v3, 0);
}

uint64_t sub_100D9AB0C()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D9ABD4;
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[29];
  return v5(v3, &unk_10165E5F0, v2);
}

uint64_t sub_100D9ABD4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 384);
    uint64_t v4 = sub_100D9AF64;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 200);
    swift_task_dealloc();
    uint64_t v4 = sub_100D9ACFC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D9ACFC()
{
  (*(void (**)(void, void, void))(v0[27] + 104))(v0[28], enum case for CloudKitCoordinator.Database.private(_:), v0[26]);
  uint64_t v1 = v0[48];
  return _swift_task_switch(sub_100D9AD80, v1, 0);
}

uint64_t sub_100D9AD80()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[61] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D9AE30;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  return v5(v3, v2);
}

uint64_t sub_100D9AE30()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[48];
    uint64_t v4 = sub_100D9B2E4;
  }
  else
  {
    uint64_t v5 = v2[25];
    (*(void (**)(void, void))(v2[27] + 8))(v2[28], v2[26]);
    uint64_t v4 = sub_100D9B0BC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D9AF64()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D9AFD0, v1, 0);
}

uint64_t sub_100D9AFD0()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_release();
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D9B0BC()
{
  if (*(unsigned char *)(v0 + 532) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 328);
    uint64_t v2 = *(void *)(v0 + 304);
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v4 = *(void *)(v0 + 200);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 352))(v1, *(void *)(v0 + 192), v3);
    unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v6 = swift_allocObject();
    *(void *)(v0 + 504) = v6;
    *(void *)(v6 + 16) = v4;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v6 + v5, v1, v3);
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100D9B45C;
    return withTimeout<A>(_:block:)(v7, 0x40AAD21B3B700000, 3, &unk_10165E600, v6, (char *)&type metadata for () + 8);
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 232), &qword_10165E5D0);
    swift_release();
    sub_100D6BBBC(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100D9B2E4()
{
  uint64_t v1 = v0[25];
  (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
  return _swift_task_switch(sub_100D9B35C, v1, 0);
}

uint64_t sub_100D9B35C()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[29];
  swift_release();
  sub_10001DAB4(v2, &qword_10165E5D0);
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100D9B45C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 200);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100D9B790;
  }
  else {
    uint64_t v4 = sub_100D9B5A4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D9B5A4()
{
  uint64_t v1 = v0[29];
  swift_release();
  sub_10001DAB4(v1, &qword_10165E5D0);
  sub_100D6BBBC(v0[36], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100D9B6A4()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_release();
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100D9B790()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[29];
  swift_release();
  sub_10001DAB4(v2, &qword_10165E5D0);
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100D9B890(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = type metadata accessor for PencilPairingLockCheckResponse();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100D9B994, v2, 0);
}

uint64_t sub_100D9B994()
{
  uint64_t v28 = v0;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 48) = 0x7365547265646E75;
  *(void *)(v0 + 56) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 184) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 136);
    uint64_t v3 = *(int **)(v0 + 144);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v23 = *(void *)(v0 + 112);
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 96);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v5 + 96);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    sub_100061E54(v0 + 16);
    sub_100061E54(v0 + 32);
    uint64_t v26 = 0x2000000000;
    uint64_t v27 = __DataStorage.init(length:)();
    sub_10072AF34((int *)&v26, 17);
    uint64_t v21 = v27 | 0x4000000000000000;
    uint64_t v22 = v26;
    swift_allocObject();
    uint64_t v6 = __DataStorage.init(length:)();
    uint64_t v26 = 0x6400000000;
    uint64_t v27 = v6;
    sub_10072AF34((int *)&v26, 34);
    uint64_t v7 = v26;
    uint64_t v8 = v27 | 0x4000000000000000;
    UUID.init()();
    swift_allocObject();
    uint64_t v9 = __DataStorage.init(length:)();
    uint64_t v26 = 0x2000000000;
    uint64_t v27 = v9;
    sub_10072AF34((int *)&v26, 85);
    uint64_t v10 = v26;
    uint64_t v11 = v27 | 0x4000000000000000;
    *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
    *(void *)(v1 + 32) = v22;
    *(void *)(v1 + 40) = v21;
    *(void *)(v1 + 48) = v7;
    *(void *)(v1 + 56) = v8;
    uint64_t v12 = (void *)(v1 + v3[9]);
    *uint64_t v12 = 0xD000000000000011;
    v12[1] = 0x80000001013F24B0;
    uint64_t v13 = (uint64_t *)(v1 + v3[10]);
    *uint64_t v13 = v10;
    v13[1] = v11;
    *(void *)(v1 + v3[11]) = 0;
    uint64_t v14 = *(void *)(v23 + 160);
    swift_retain();
    Date.init()();
    uint64_t v15 = Date.epoch.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v24);
    *(void *)(v14 + 32) = v15;
    swift_release();
    sub_100DB2DE8(v1, v25, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    sub_10000588C(&qword_10165E700);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100D9BD58;
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 104);
    return sub_10049A2B8(v19, v20);
  }
}

uint64_t sub_100D9BD58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v4 = sub_100D9BF38;
  }
  else {
    uint64_t v4 = sub_100D9BE84;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D9BE84()
{
  sub_100DB2DE8(v0[19], v0[12], (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  sub_10000588C(&qword_10165E700);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100D9BF38()
{
  v0[8] = v0[22];
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  type metadata accessor for SPPairingSessionError(0);
  if (swift_dynamicCast())
  {
    uint64_t v1 = (void *)v0[12];
    swift_errorRelease();
    *uint64_t v1 = v0[9];
  }
  else
  {
    v0[11] = 7;
    uint64_t v2 = (void *)v0[12];
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100DB1F50(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_errorRelease();
    void *v2 = v0[10];
  }
  sub_10000588C(&qword_10165E700);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100D9C0D4(uint64_t a1, uint64_t a2)
{
  v3[46] = a1;
  v3[47] = a2;
  type metadata accessor for PencilPairingLockCheckResponse();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  return _swift_task_switch(sub_100D9C174, v2, 0);
}

uint64_t sub_100D9C174()
{
  uint64_t v33 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10165E160);
  sub_100DB2E50(v3, v2, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  sub_100DB2E50(v3, v1, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 392);
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218242;
    uint64_t v10 = *(void *)(v8 + 48);
    unint64_t v11 = *(void *)(v8 + 56);
    uint64_t v12 = 0;
    switch(v11 >> 62)
    {
      case 1uLL:
        BOOL v14 = __OFSUB__(HIDWORD(v10), v10);
        int v15 = HIDWORD(v10) - v10;
        if (v14)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x100D9C4E8);
        }
        uint64_t v12 = v15;
LABEL_10:
        uint64_t v19 = *(void *)(v0 + 384);
        sub_100D6BBBC(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
        *(void *)(v0 + 352) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v9 + 12) = 2080;
        uint64_t v20 = Data.hexString.getter();
        *(void *)(v0 + 360) = sub_1008FA0F0(v20, v21, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100D6BBBC(v19, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "S3 count %ld: %s", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v18 = v10 + 16;
        uint64_t v16 = *(void *)(v10 + 16);
        uint64_t v17 = *(void *)(v18 + 8);
        uint64_t v12 = v17 - v16;
        if (!__OFSUB__(v17, v16)) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v12 = BYTE6(v11);
        goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 384);
    sub_100D6BBBC(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  }

  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v22 = *(void **)(v0 + 376);
  uint64_t v24 = v22[4];
  unint64_t v25 = v22[5];
  uint64_t v26 = v22[6];
  unint64_t v27 = v22[7];
  sub_1000361E0(v24, v25);
  sub_1000361E0(v26, v27);
  sub_100D03304(v24, v25, v26, v27, (_OWORD *)(v0 + 304));
  long long v28 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 304);
  long long v29 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 176) = v28;
  *(_OWORD *)(v0 + 192) = v29;
  sub_1001E39B8((void *)(v0 + 160));
  sub_1001E1A4C((_OWORD *)(v0 + 160), (_OWORD *)(v0 + 16));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 16);
  sub_10001D608(v0 + 16, v23, &qword_10165E688);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_100D9C4F8(uint64_t a1, uint64_t a2)
{
  v2[36] = a1;
  v2[37] = a2;
  uint64_t v3 = type metadata accessor for CentralManager.State();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v2[41] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[42] = v4;
  v2[43] = *(void *)(v4 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[49] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[50] = v5;
  v2[51] = *(void *)(v5 - 8);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v2[56] = v6;
  v2[57] = *(void *)(v6 - 8);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  return _swift_task_switch(sub_100D9C79C, 0, 0);
}

uint64_t sub_100D9C79C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639180 + dword_101639180);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100D9C8EC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D9C8EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 488) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D9C9EC, 0, 0);
}

uint64_t sub_100D9C9EC()
{
  uint64_t v1 = *(void *)(v0 + 488);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 488);
    return _swift_task_switch(sub_100D9CB9C, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000025;
    v3[1] = 0x8000000101417C70;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_100D9CB9C()
{
  uint64_t v1 = *(void *)(v0 + 488);
  if (*(unsigned char *)(v1 + 145) == 1)
  {
    uint64_t v2 = sub_100D9CBE0;
  }
  else
  {
    *(unsigned char *)(v0 + 812) = *(unsigned char *)(v1 + 146);
    uint64_t v2 = sub_100D9CDC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D9CBE0()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Onboarding is showing. Not retrying.", v4, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100D9CDC4()
{
  if (*(unsigned char *)(v0 + 812))
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10165E160);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Onboarding is showing. Not retrying.", v4, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 288);
    Identifier.id.getter();
    return _swift_task_switch(sub_100D9CFF8, v7, 0);
  }
}

uint64_t sub_100D9CFF8()
{
  *(void *)(v0 + 496) = sub_100DB6D44();
  return _swift_task_switch(sub_100D9D060, 0, 0);
}

uint64_t sub_100D9D060()
{
  if (*(void *)(v0[62] + 16) && (unint64_t v1 = sub_1007240CC(v0[55]), (v2 & 1) != 0))
  {
    (*(void (**)(void, unint64_t, void))(v0[57] + 16))(v0[49], *(void *)(v0[62] + 56) + *(void *)(v0[57] + 72) * v1, v0[56]);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[57];
  uint64_t v6 = v0[55];
  uint64_t v7 = v0[50];
  uint64_t v8 = v0[51];
  uint64_t v9 = v0[49];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v9, v3, 1, v4);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[63] = v10;
  v0[64] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v6, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    uint64_t v11 = v0[49];
    static Date.distantPast.getter();
    sub_10001DAB4(v11, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[57] + 32))(v0[59], v0[49], v0[56]);
  }
  uint64_t v12 = v0[58];
  uint64_t v13 = v0[56];
  uint64_t v14 = v0[57];
  static Date.trustedNow.getter(v12);
  Date.timeIntervalSince(_:)();
  v0[65] = v15;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[66] = v16;
  v0[67] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v12, v13);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_10170E390;
  v0[68] = qword_10170E390;
  swift_retain();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[69] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D9D2D8;
  return unsafeBlocking<A>(_:)(v0 + 23, sub_10001D704, v17, &type metadata for Configuration);
}

uint64_t sub_100D9D2D8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D9D3F0, 0, 0);
}

uint64_t sub_100D9D3F0()
{
  uint64_t v1 = v0[36];
  v0[70] = v0[23];
  return _swift_task_switch(sub_100D9D414, v1, 0);
}

uint64_t sub_100D9D414()
{
  sub_1010ABF94(*(void *)(v0 + 560));
  *(void *)(v0 + 568) = v1;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100D9D48C, 0, 0);
}

uint64_t sub_100D9D48C()
{
  double v1 = *(double *)(v0 + 520);
  if (*(double *)(v0 + 568) >= v1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 568);
      uint64_t v8 = *(void *)(v0 + 520);
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134218240;
      *(void *)(v0 + 136) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2048;
      *(void *)(v0 + 144) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Time since last attempt %f. Threshold %f. Not retrying.", (uint8_t *)v9, 0x16u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    uint64_t v11 = *(void *)(v0 + 472);
    uint64_t v12 = *(void *)(v0 + 448);

    swift_release();
    v10(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 288);
    if (v1 <= 86400.0)
    {
      Identifier.id.getter();
      uint64_t v3 = sub_100D9D868;
    }
    else
    {
      Identifier.id.getter();
      uint64_t v3 = sub_100D9D76C;
    }
    return _swift_task_switch(v3, v2, 0);
  }
}

uint64_t sub_100D9D76C()
{
  double v1 = (void (*)(uint64_t, uint64_t))v0[63];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[50];
  sub_100DB751C(0, v2);
  v1(v2, v3);
  return _swift_task_switch(sub_100D9D7F8, 0, 0);
}

uint64_t sub_100D9D7F8()
{
  uint64_t v1 = *(void *)(v0 + 288);
  Identifier.id.getter();
  return _swift_task_switch(sub_100D9D868, v1, 0);
}

uint64_t sub_100D9D868()
{
  *(void *)(v0 + 576) = sub_100DB7160();
  return _swift_task_switch(sub_100D9D8D0, 0, 0);
}

uint64_t sub_100D9D8D0()
{
  uint64_t v1 = *(void *)(v0[72] + 16);
  if (v1)
  {
    unint64_t v2 = sub_1007240CC(v0[53]);
    if (v3) {
      uint64_t v1 = *(void *)(*(void *)(v0[72] + 56) + 8 * v2);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  v0[73] = v1;
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[63];
  uint64_t v5 = v0[53];
  uint64_t v6 = v0[50];
  swift_bridgeObjectRelease();
  v4(v5, v6);
  uint64_t v7 = qword_10170E390;
  v0[74] = qword_10170E390;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[75] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D9DA04;
  return unsafeBlocking<A>(_:)(v0 + 19, sub_10001D704, v7, &type metadata for Configuration);
}

uint64_t sub_100D9DA04()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D9DB1C, 0, 0);
}

uint64_t sub_100D9DB1C()
{
  uint64_t v1 = v0[36];
  v0[76] = v0[19];
  return _swift_task_switch(sub_100D9DB40, v1, 0);
}

uint64_t sub_100D9DB40()
{
  *(void *)(v0 + 616) = sub_1010ABF48(*(void *)(v0 + 608));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100D9DBB8, 0, 0);
}

uint64_t sub_100D9DBB8()
{
  uint64_t v35 = v0;
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[73];
  BOOL v3 = __OFSUB__(v1, v2);
  uint64_t v4 = v1 - v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v4 >= 1)
  {
    if (qword_1016370D8 == -1)
    {
LABEL_4:
      uint64_t v5 = v0[48];
      uint64_t v6 = v0[42];
      uint64_t v7 = v0[43];
      uint64_t v8 = v0[37];
      uint64_t v9 = type metadata accessor for Logger();
      v0[78] = sub_100010324(v9, (uint64_t)qword_10165E160);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v0[79] = v10;
      v0[80] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v10(v5, v8, v6);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v33 = v0[77];
        uint64_t v32 = v0[73];
        uint64_t v13 = v0[48];
        uint64_t v15 = v0[42];
        uint64_t v14 = v0[43];
        uint64_t v16 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136446722;
        sub_100062734(&qword_10163B810, &qword_10163D210);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[34] = sub_1008FA0F0(v17, v18, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v19(v13, v15);
        *(_WORD *)(v16 + 12) = 2048;
        v0[35] = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 22) = 2048;
        v0[27] = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Retry pairing for %{public}s. Attempted %ld. Daily limit %ld", (uint8_t *)v16, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0[43] + 8);
        v19(v0[48], v0[42]);
      }

      v0[81] = v19;
      uint64_t v31 = v0[36];
      static Date.trustedNow.getter(v0[58]);
      Identifier.id.getter();
      return _swift_task_switch(sub_100D9E0B0, v31, 0);
    }
LABEL_18:
    swift_once();
    goto LABEL_4;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10165E160);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = v0[77];
    uint64_t v24 = v0[73];
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134218240;
    v0[20] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2048;
    v0[21] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Exceeded number of retries per day %ld. Attempted: %ld", (uint8_t *)v25, 0x16u);
    swift_slowDealloc();
  }
  uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v27 = v0[59];
  uint64_t v28 = v0[56];

  swift_release();
  v26(v27, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100D9E0B0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[63];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[50];
  sub_100DB7784(v3, v5);
  v2(v5, v6);
  v1(v3, v4);
  return _swift_task_switch(sub_100D9E168, 0, 0);
}

uint64_t sub_100D9E168(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[73];
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v3[36];
    v3[82] = v4 + 1;
    Identifier.id.getter();
    a1 = sub_100D9E1EC;
    a2 = v5;
    a3 = 0;
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100D9E1EC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[63];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[50];
  sub_100DB751C(v0[82], v2);
  v1(v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[83] = v4;
  void *v4 = v0;
  v4[1] = sub_100D9E2B0;
  uint64_t v5 = v0[41];
  uint64_t v6 = v0[37];
  return sub_100D612E4(v5, v6);
}

uint64_t sub_100D9E2B0()
{
  *(void *)(*(void *)v1 + 672) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D9FCA0;
  }
  else {
    uint64_t v2 = sub_100D9E3C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D9E3C4()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
  if (v3 == 1)
  {
    *(void *)(v0 + 680) = type metadata accessor for CentralManager();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v4;
    void *v4 = v0;
    v4[1] = sub_100D9E798;
    return static CentralManager.pairingCentralManager.getter();
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 632))(*(void *)(v0 + 376), *(void *)(v0 + 296), *(void *)(v0 + 336));
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
    uint64_t v9 = *(void *)(v0 + 472);
    uint64_t v10 = *(void *)(v0 + 448);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 336);
    if (v7)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 264) = sub_1008FA0F0(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v18(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Found record for %{public}s. Not retrying", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      v8(v9, v10);
    }
    else
    {

      swift_release();
      v18(v11, v12);
      v8(v9, v10);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_100D9E798(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 696) = a1;
  *(void *)(v3 + 704) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100DA0008;
  }
  else {
    uint64_t v4 = sub_100D9E8B0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D9E8B0()
{
  (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for CentralManager.State.poweredOn(_:), v0[38]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[89] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100D9E9AC;
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[40];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_100D9E9AC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 720) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[39] + 8))(v2[40], v2[38]);
  if (v0) {
    uint64_t v3 = sub_100DA0148;
  }
  else {
    uint64_t v3 = sub_100D9EB14;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100D9EB14()
{
  uint64_t v16 = (void (*)(unint64_t, uint64_t))v0[81];
  uint64_t v1 = (void (*)(unint64_t, uint64_t, uint64_t))v0[79];
  unint64_t v2 = v0[46];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[37];
  sub_10000588C(&qword_10165E658);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  unint64_t v8 = v7 + v6;
  v1(v8, v5, v3);
  sub_1000B7034(0, 1, 0);
  v1(v2, v8, v3);
  Identifier.id.getter();
  v0[91] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v2, v3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B7034(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v10 = _swiftEmptyArrayStorage[2];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1) {
    sub_1000B7034(v9 > 1, v10 + 1, 1);
  }
  v0[92] = _swiftEmptyArrayStorage;
  uint64_t v12 = v0[51];
  uint64_t v11 = v0[52];
  uint64_t v13 = v0[50];
  _swiftEmptyArrayStorage[2] = v10 + 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v10, v11, v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v17 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[93] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100D9ED70;
  return v17(_swiftEmptyArrayStorage);
}

uint64_t sub_100D9ED70(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 752) = a1;
  *(void *)(v3 + 760) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    uint64_t v4 = sub_100DA0294;
  }
  else {
    uint64_t v4 = sub_100D9EEB0;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_100D9EEB0()
{
  long long v29 = v0;
  unint64_t v1 = v0[94];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
LABEL_13:
    unint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[79];
    uint64_t v11 = v0[45];
    uint64_t v12 = v0[42];
    uint64_t v13 = v0[37];
    swift_bridgeObjectRelease();
    v10(v11, v13, v12);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = v0[45];
    uint64_t v18 = v0[42];
    if (v16)
    {
      uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[81];
      uint64_t v19 = swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446466;
      v0[31] = sub_1008FA0F0(0xD000000000000018, 0x8000000101418030, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[32] = sub_1008FA0F0(v20, v21, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v27(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s Missing peripheral for %{public}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[81])(v0[45], v0[42]);
    }

    os_log_type_t v22 = (void (*)(uint64_t, uint64_t))v0[66];
    uint64_t v23 = v0[59];
    uint64_t v24 = v0[56];
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v25 = xmmword_10137D8A0;
    *(unsigned char *)(v25 + 16) = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    v22(v23, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (void (*)(void))v0[1];
    v26();
    return;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v2 = *(void *)(v0[94] + 32);
    swift_retain();
  }
  v0[96] = v2;
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[28] = sub_1008FA0F0(0xD000000000000018, 0x8000000101418030, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    v0[29] = v2;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v6, v7, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Retrieved peripheral: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  unint64_t v8 = (void *)swift_task_alloc();
  v0[97] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_100D9F4B8;
  sub_100D7B3DC(v2);
}

uint64_t sub_100D9F4B8(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 813) = a1;
  *(void *)(v3 + 784) = v1;
  swift_task_dealloc();
  if (v1) {
    os_log_type_t v4 = sub_100DA03E0;
  }
  else {
    os_log_type_t v4 = sub_100D9F5D0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D9F5D0()
{
  uint64_t v24 = v0;
  unsigned int v1 = *(unsigned __int8 *)(v0 + 813);
  BOOL v3 = (v1 & 1) == 0 && v1 < 5;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = *(unsigned char *)(v0 + 813);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    unint64_t v8 = sub_100C0646C(v6);
    *(void *)(v0 + 208) = sub_1008FA0F0(v8, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 1026;
    *(_DWORD *)(v0 + 808) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AccountCheckResult: %{public}s, shouldRetry = %{BOOL,public}d", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v3)
  {
    (*(void (**)(void, void, void))(v0 + 632))(*(void *)(v0 + 352), *(void *)(v0 + 296), *(void *)(v0 + 336));
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 336);
    if (v12)
    {
      os_log_type_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136446210;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 200) = sub_1008FA0F0(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v22(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Retrying pairing for %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 648))(*(void *)(v0 + 352), *(void *)(v0 + 336));
    }

    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100D9FA3C;
    uint64_t v21 = *(void *)(v0 + 768);
    return sub_100D70BFC(v21);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 472), *(void *)(v0 + 448));
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_100D9FA3C()
{
  *(void *)(*(void *)v1 + 800) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100DA0538;
  }
  else {
    uint64_t v2 = sub_100D9FB50;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D9FB50()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D9FCA0()
{
  v0[22] = v0[84];
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (!swift_dynamicCast())
  {
LABEL_4:
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138543362;
      swift_errorRetain();
      uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
      v0[24] = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v4 = v5;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error during localFindableRecord check: %{public}@", v3, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[66];
    uint64_t v7 = v0[59];
    uint64_t v8 = v0[56];

    swift_willThrow();
    swift_release();
    v6(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  if (v0[16])
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  swift_errorRelease();
  swift_errorRelease();
  v0[85] = type metadata accessor for CentralManager();
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[86] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = sub_100D9E798;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_100DA0008()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DA0148()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DA0294()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DA03E0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DA0538()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DA0690(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 104) = a2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = a3;
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = *(void *)(v4 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  *(void *)(v3 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100DA0768, 0, 0);
}

uint64_t sub_100DA0768()
{
  uint64_t v36 = v0;
  if (*(unsigned char *)(v0 + 104))
  {
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 56);
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
    sub_10033093C(v19, 1);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v6, v21);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 88);
    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v26 = *(void *)(v0 + 56);
    if (v22)
    {
      os_log_type_t type = v21;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446722;
      *(void *)(v0 + 16) = sub_1008FA0F0(0xD000000000000018, 0x8000000101418030, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v28, v29, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      *(_WORD *)(v27 + 22) = 2114;
      swift_errorRetain();
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 32) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v30;
      sub_100173E88(v26, 1);
      sub_100173E88(v26, 1);
      _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v27, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v26, 1);
      goto LABEL_13;
    }
    sub_100173E88(*(void *)(v0 + 56), 1);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    sub_100173E88(v26, 1);
    sub_100173E88(v26, 1);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      *(void *)(v0 + 40) = sub_1008FA0F0(0xD000000000000018, 0x8000000101418030, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 48) = sub_1008FA0F0(v13, v14, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    }
  }

LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100DA0D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = sub_10000588C(&qword_101639C68);
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  uint64_t v7 = type metadata accessor for Characteristic();
  uint64_t v8 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
  uint64_t v9 = (void *)swift_task_alloc();
  v3[6] = v9;
  void *v9 = v3;
  v9[1] = sub_100DA0E94;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v6, a3, v7, v8);
}

uint64_t sub_100DA0E94()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100DBAAC8, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[8] = v3;
    uint64_t v4 = sub_100062734(&qword_101665560, &qword_101639C68);
    *uint64_t v3 = v2;
    v3[1] = sub_100DA1044;
    uint64_t v5 = v2[3];
    return AsyncSequence<>.reassemble()(v5, v4);
  }
}

uint64_t sub_100DA1044(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[9] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[3];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v10 = sub_100DBAACC;
  }
  else
  {
    v6[10] = a2;
    v6[11] = a1;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v10 = sub_100DBAB00;
  }
  return _swift_task_switch(v10, 0, 0);
}

uint64_t sub_100DA11D0(uint64_t a1)
{
  v2[42] = a1;
  v2[43] = v1;
  uint64_t v3 = type metadata accessor for BinaryDecoder();
  v2[44] = v3;
  v2[45] = *(void *)(v3 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BinaryEncoder();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[50] = v5;
  v2[51] = *(void *)(v5 - 8);
  v2[52] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639A70);
  v2[53] = v6;
  v2[54] = *(void *)(v6 - 8);
  v2[55] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v2[56] = v7;
  v2[57] = *(void *)(v7 - 8);
  v2[58] = swift_task_alloc();
  return _swift_task_switch(sub_100DA140C, v1, 0);
}

uint64_t sub_100DA140C()
{
  uint64_t v17 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[59] = sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[57];
    uint64_t v4 = v0[58];
    uint64_t v6 = v0[56];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[41] = sub_1008FA0F0(0xD000000000000015, 0x8000000101417E40, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2082;
    type metadata accessor for Peripheral();
    sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v0[27] = sub_1008FA0F0(v8, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s for %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  v0[60] = type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  uint64_t v11 = type metadata accessor for Peripheral();
  v0[61] = v11;
  uint64_t v12 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[62] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[63] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100DA17C0;
  uint64_t v14 = v0[55];
  return dispatch thunk of PeripheralProtocol.subscript.getter(v14, v11, v12);
}

uint64_t sub_100DA17C0(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[64] = a1;
  v4[65] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[55];
  uint64_t v6 = v3[54];
  uint64_t v7 = v3[53];
  uint64_t v8 = v3[43];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1) {
    unint64_t v9 = sub_100DA1BF4;
  }
  else {
    unint64_t v9 = sub_100DA1948;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100DA1948()
{
  v0[66] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v1 = sub_100DB1F50(&qword_101639AD0, (void (*)(uint64_t))&type metadata accessor for Service);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[67] = v2;
  void *v2 = v0;
  v2[1] = sub_100DA1A50;
  uint64_t v3 = v0[60];
  uint64_t v4 = v0[52];
  return dispatch thunk of ServiceProtocol.subscript.getter(v4, v3, v1);
}

uint64_t sub_100DA1A50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[68] = a1;
  v4[69] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[52];
  uint64_t v6 = v3[51];
  uint64_t v7 = v3[50];
  uint64_t v8 = v3[43];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1) {
    unint64_t v9 = sub_100DA20CC;
  }
  else {
    unint64_t v9 = sub_100DA1C98;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100DA1BF4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DA1C98()
{
  uint64_t v27 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 320) = sub_1008FA0F0(0xD000000000000015, 0x8000000101417E40, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Discovered FindMy services and Config characteristic.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  BinaryEncoder.init()();
  BinaryDecoder.init()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = (_OWORD *)&unk_101364000;
  uint64_t v7 = "Code";
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    v26[0] = v9;
    *(_OWORD *)(v0 + 112) = xmmword_101364B30;
    *(_OWORD *)(v0 + 128) = xmmword_101347BC0;
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 312) = sub_1008FA0F0(v10, v11, v26);
    uint64_t v7 = "Code";
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sending .unpair command: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = &unk_101364000;
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(v0 + 552);
  long long v13 = *((_OWORD *)v7 + 188);
  *(_OWORD *)(v0 + 16) = v6[179];
  *(_OWORD *)(v0 + 32) = v13;
  sub_10063D2D4();
  *(void *)(v0 + 560) = BinaryEncoder.encode<A>(_:)();
  *(void *)(v0 + 568) = v14;
  if (v12)
  {
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v15 = *(void *)(v0 + 392);
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 352);
    uint64_t v20 = *(void *)(v0 + 360);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    uint64_t v23 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100DA2170;
    uint64_t v25 = *(void *)(v0 + 528);
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v25, v23);
  }
}

uint64_t sub_100DA20CC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DA2170(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[73] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[43];
  if (v1)
  {
    uint64_t v6 = sub_100DA250C;
  }
  else
  {
    v4[74] = a1;
    uint64_t v6 = sub_100DA22AC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100DA22AC()
{
  uint64_t v1 = v0[68];
  uint64_t v2 = fragment(data:mtu:)();
  uint64_t v3 = swift_allocObject();
  v0[75] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[76] = v4;
  void *v4 = v0;
  v4[1] = sub_100DA23C4;
  return withTimeout<A>(_:block:)(v0 + 22, 0x40AAD21B3B700000, 3, &unk_10165E7B0, v3, &type metadata for Data);
}

uint64_t sub_100DA23C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 344);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100DA3844;
  }
  else {
    uint64_t v4 = sub_100DA260C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA250C()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v4 = v0[46];
  uint64_t v3 = v0[47];
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[45];
  sub_10001CFB8(v0[70], v0[71]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100DA260C()
{
  uint64_t v115 = v0;
  uint64_t v2 = *(void *)(v0 + 176);
  unint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  uint64_t v113 = v2;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_OWORD *)(v0 + 144) = xmmword_101364B30;
    *(_DWORD *)uint64_t v5 = 136446210;
    v114[0] = v6;
    *(_OWORD *)(v0 + 160) = xmmword_101347BC0;
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 296) = sub_1008FA0F0(v7, v8, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sent command: %{public}s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000361E0(v2, v1);
  sub_1000361E0(v2, v1);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v114[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218242;
    uint64_t v12 = 0;
    switch(v1 >> 62)
    {
      case 1uLL:
        LODWORD(v12) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2))
        {
          __break(1u);
LABEL_46:
          __break(1u);
          JUMPOUT(0x100DA3834);
        }
        uint64_t v12 = (int)v12;
LABEL_10:
        *(void *)(v0 + 272) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v11 + 12) = 2082;
        uint64_t v16 = Data.hexString.getter();
        *(void *)(v0 + 280) = sub_1008FA0F0(v16, v17, v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v2, v1);
        sub_10001CFB8(v2, v1);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Length: %ld received response: %{public}s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v2 + 16);
        uint64_t v13 = *(void *)(v2 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v12 = v13 - v14;
        if (!v15) {
          goto LABEL_10;
        }
        goto LABEL_46;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v12 = BYTE6(v1);
        goto LABEL_10;
    }
  }
  else
  {
    sub_10001CFB8(v2, v1);
    sub_10001CFB8(v2, v1);
  }

  uint64_t v18 = *(void *)(v0 + 616);
  sub_10063D280();
  BinaryDecoder.decode<A>(_:from:)();
  if (v18)
  {
    uint64_t v20 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v22 = *(void *)(v0 + 368);
    uint64_t v21 = *(void *)(v0 + 376);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v24 = *(void *)(v0 + 360);
    sub_10001CFB8(*(void *)(v0 + 560), *(void *)(v0 + 568));
    sub_10001CFB8(v2, v1);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
LABEL_35:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_36;
  }
  uint64_t v26 = *(void *)(v0 + 48);
  uint64_t v25 = *(void *)(v0 + 56);
  uint64_t v27 = *(void *)(v0 + 64);
  unint64_t v28 = *(void *)(v0 + 72);
  uint64_t v106 = v27;
  unint64_t v107 = v1;
  uint64_t v104 = v26;
  uint64_t v105 = v25;
  if (((v28 >> 59) & 6 | ((v25 & 0x2000000000000000) != 0)) != 1)
  {
    swift_retain();
    sub_1002A53B4(v26, v25, v27, v28, sub_1000361E0);
    swift_retain();
    sub_1002A53B4(v26, v25, v27, v28, sub_1000361E0);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t typeb = v40;
      uint64_t v41 = *(void *)(v0 + 464);
      uint64_t v42 = v25;
      uint64_t v96 = *(void *)(v0 + 456);
      uint64_t v94 = *(void *)(v0 + 448);
      uint64_t v43 = swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446723;
      *(void *)(v0 + 80) = v26;
      *(void *)(v0 + 88) = v42;
      *(void *)(v0 + 96) = v27;
      *(void *)(v0 + 104) = v28;
      sub_1002A53B4(v26, v42, v27, v28, sub_1000361E0);
      uint64_t v44 = String.init<A>(describing:)();
      *(void *)(v0 + 304) = sub_1008FA0F0(v44, v45, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002A53B4(v26, v42, v27, v28, sub_10001CFB8);
      sub_1002A53B4(v26, v42, v27, v28, sub_10001CFB8);
      *(_WORD *)(v43 + 12) = 2160;
      *(void *)(v0 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 22) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter();
      swift_release();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v41, v94);
      *(void *)(v0 + 192) = sub_1008FA0F0(v46, v48, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, typeb, "Invalid response %{public}s Peripheral %{private,mask.hash}s", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_1002A53B4(v26, v25, v27, v28, sub_10001CFB8);
      sub_1002A53B4(v26, v25, v27, v28, sub_10001CFB8);

      swift_release();
    }
    unint64_t v59 = v28;
    unint64_t v60 = *(void *)(v0 + 568);
    uint64_t v61 = *(void *)(v0 + 560);
    uint64_t v62 = *(void *)(v0 + 384);
    uint64_t v63 = *(void *)(v0 + 368);
    uint64_t v109 = *(void *)(v0 + 376);
    uint64_t v110 = *(void *)(v0 + 392);
    uint64_t v65 = *(void *)(v0 + 352);
    uint64_t v64 = *(void *)(v0 + 360);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v66 = xmmword_1013540F0;
    *(unsigned char *)(v66 + 16) = 3;
    swift_willThrow();
    sub_10001CFB8(v61, v60);
    sub_1002A53B4(v26, v105, v106, v59, sub_10001CFB8);
    sub_10001CFB8(v113, v107);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
    goto LABEL_34;
  }
  sub_1002A53B4(v26, v25, v27, v28, sub_1000361E0);
  sub_1000361E0(v26, v25 & 0xDFFFFFFFFFFFFFFFLL);
  sub_1000361E0(v27, v28 & 0xCFFFFFFFFFFFFFFFLL);
  int v29 = sub_1003C90E8(v26, v25 & 0xDFFFFFFFFFFFFFFFLL, v27, v28 & 0xCFFFFFFFFFFFFFFFLL);
  unint64_t v103 = v28;
  if ((v29 & 0xFF0000) == 0x60000)
  {
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = *(void *)(v0 + 456);
      uint64_t v33 = *(void *)(v0 + 464);
      uint64_t v34 = *(void *)(v0 + 448);
      uint64_t v35 = swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v38 = v37;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
      *(void *)(v0 + 208) = sub_1008FA0F0(v36, v38, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Invalid commandResponse for %{private,mask.hash}s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_32:
      unint64_t v78 = *(void *)(v0 + 568);
      uint64_t v79 = *(void *)(v0 + 560);
      uint64_t v62 = *(void *)(v0 + 384);
      uint64_t v109 = *(void *)(v0 + 376);
      uint64_t v110 = *(void *)(v0 + 392);
      uint64_t v80 = *(void *)(v0 + 360);
      *(void *)typea = *(void *)(v0 + 368);
      uint64_t v81 = *(void *)(v0 + 352);
      sub_1004AF24C();
      swift_allocError();
      *(_OWORD *)uint64_t v82 = xmmword_10135D7D0;
      char v83 = 3;
LABEL_33:
      *(unsigned char *)(v82 + 16) = v83;
      swift_willThrow();
      sub_10001CFB8(v79, v78);
      sub_1002A53B4(v104, v105, v106, v103, sub_10001CFB8);
      sub_1002A53B4(v104, v105, v106, v103, sub_10001CFB8);
      sub_10001CFB8(v113, v107);
      swift_release();
      (*(void (**)(os_log_type_t *, uint64_t))(v80 + 8))(*(os_log_type_t **)typea, v81);
LABEL_34:
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v110, v109);
      goto LABEL_35;
    }

    goto LABEL_31;
  }
  int v49 = v29;
  char v50 = sub_1002A5350(v29);
  swift_retain();
  if (v50 == 19)
  {
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      os_log_type_t v111 = v52;
      uint64_t v53 = *(void *)(v0 + 456);
      uint64_t v54 = *(void *)(v0 + 464);
      uint64_t v108 = *(void *)(v0 + 448);
      uint64_t v55 = swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 33686275;
      *(_WORD *)(v0 + 624) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 6) = 2160;
      *(void *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 16) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v58 = v57;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v108);
      *(void *)(v0 + 232) = sub_1008FA0F0(v56, v58, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v111, "Invalid opcode: %{public}hu. Peripheral %{private,mask.hash}s", (uint8_t *)v55, 0x1Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_32;
    }

LABEL_31:
    swift_release();
    goto LABEL_32;
  }
  swift_retain();
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, v68))
  {
    os_log_type_t v112 = v68;
    uint64_t v95 = *(void *)(v0 + 464);
    uint64_t v98 = *(void *)(v0 + 448);
    *(void *)os_log_type_t type = *(void *)(v0 + 456);
    uint64_t v69 = swift_slowAlloc();
    v114[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 136315907;
    unint64_t v70 = sub_1002A4514(v50);
    *(void *)(v0 + 240) = sub_1008FA0F0(v70, v71, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 12) = 2082;
    if (BYTE2(v49)) {
      unsigned __int8 v72 = BYTE2(v49);
    }
    else {
      unsigned __int8 v72 = 6;
    }
    uint64_t v73 = sub_1003C8AB4(v72);
    *(void *)(v0 + 248) = sub_1008FA0F0(v73, v74, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 32) = 2081;
    dispatch thunk of PeripheralProtocol.id.getter();
    swift_release();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v77 = v76;
    (*(void (**)(uint64_t, uint64_t))(*(void *)type + 8))(v95, v98);
    *(void *)(v0 + 264) = sub_1008FA0F0(v75, v77, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, v112, "Opcode: %s. Status %{public}s. Peripheral %{private,mask.hash}s", (uint8_t *)v69, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v86 = BYTE2(v49);
  if (v86)
  {
    unint64_t v78 = *(void *)(v0 + 568);
    uint64_t v79 = *(void *)(v0 + 560);
    uint64_t v62 = *(void *)(v0 + 384);
    uint64_t v109 = *(void *)(v0 + 376);
    uint64_t v110 = *(void *)(v0 + 392);
    uint64_t v80 = *(void *)(v0 + 360);
    *(void *)typea = *(void *)(v0 + 368);
    uint64_t v81 = *(void *)(v0 + 352);
    sub_1004AF24C();
    swift_allocError();
    *(void *)uint64_t v82 = v86;
    *(void *)(v82 + 8) = 0;
    char v83 = 2;
    goto LABEL_33;
  }
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v89 = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "RX unpair succeeded", v89, 2u);
    swift_slowDealloc();
  }
  uint64_t v91 = *(void *)(v0 + 384);
  uint64_t v90 = *(void *)(v0 + 392);
  uint64_t v92 = *(void *)(v0 + 368);
  *(void *)typec = *(void *)(v0 + 376);
  uint64_t v93 = *(void *)(v0 + 360);
  uint64_t v97 = *(void *)(v0 + 352);
  sub_10001CFB8(*(void *)(v0 + 560), *(void *)(v0 + 568));

  sub_1002A53B4(v104, v105, v106, v103, sub_10001CFB8);
  sub_1002A53B4(v104, v105, v106, v103, sub_10001CFB8);
  sub_10001CFB8(v113, v107);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v97);
  (*(void (**)(uint64_t, os_log_type_t *))(v91 + 8))(v90, *(os_log_type_t **)typec);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
LABEL_36:
  return v84();
}

uint64_t sub_100DA3844()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v4 = v0[46];
  uint64_t v3 = v0[47];
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[45];
  sub_10001CFB8(v0[70], v0[71]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100DA3944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Characteristic();
  uint64_t v6 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100033F68;
  return dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)(a3, v5, v6);
}

uint64_t sub_100DA3A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[5] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_100DA3ACC;
  return sub_100DA3F5C();
}

uint64_t sub_100DA3ACC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100DA3C24;
  uint64_t v4 = *(void *)(v1 + 32);
  return sub_100DA485C(v4);
}

uint64_t sub_100DA3C24()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_100DA3D58, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100DA3D58()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registration failed - %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100DA3F5C()
{
  v1[94] = v0;
  v1[95] = type metadata accessor for PencilPairingLockAckResponse();
  v1[96] = swift_task_alloc();
  v1[97] = swift_task_alloc();
  v1[98] = swift_task_alloc();
  return _swift_task_switch(sub_100DA400C, v0, 0);
}

uint64_t sub_100DA400C()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 792) = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ackPairing...", v4, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  sub_100D23164(v0 + 496);
  swift_release();
  sub_10001D608(v0 + 496, v0 + 256, &qword_10165DDE0);
  if (sub_10005F324(v0 + 256) == 1)
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, " Unable to generate ack data!", v7, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    long long v10 = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 224) = v10;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 480);
    long long v11 = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 384);
    *(_OWORD *)(v0 + 160) = v11;
    long long v12 = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v0 + 192) = v12;
    long long v13 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 96) = v13;
    long long v14 = *(_OWORD *)(v0 + 368);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 128) = v14;
    long long v15 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 32) = v15;
    long long v16 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 64) = v16;
    unint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 800) = v17;
    void *v17 = v0;
    v17[1] = sub_100DA42D0;
    uint64_t v18 = *(void *)(v0 + 784);
    return sub_10049DE78(v18, v0 + 16);
  }
}

uint64_t sub_100DA42D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 752);
  if (v0) {
    uint64_t v4 = sub_100DA4664;
  }
  else {
    uint64_t v4 = sub_100DA43FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA43FC()
{
  long long v15 = v0;
  sub_100DB2E50(v0[98], v0[97], (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[98];
    uint64_t v3 = v0[97];
    uint64_t v4 = v0[96];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_100DB2E50(v3, v4, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
    uint64_t v6 = String.init<A>(describing:)();
    v0[93] = sub_1008FA0F0(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v3, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, " Ack register was success. %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100DB35D0((uint64_t)(v0 + 62));

    uint64_t v8 = v13;
  }
  else
  {
    uint64_t v9 = v0[98];
    uint64_t v10 = v0[97];
    sub_100DB35D0((uint64_t)(v0 + 62));

    sub_100D6BBBC(v10, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
    uint64_t v8 = v9;
  }
  sub_100D6BBBC(v8, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100DA4664()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 736) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, " Ack register failed with error - %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100DB35D0(v0 + 496);

    swift_errorRelease();
  }
  else
  {
    sub_100DB35D0(v0 + 496);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100DA485C(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = type metadata accessor for PeripheralState();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[42] = v4;
  v2[43] = *(void *)(v4 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v2[46] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  v2[47] = v5;
  v2[48] = *(void *)(v5 - 8);
  v2[49] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v2[50] = swift_task_alloc();
  return _swift_task_switch(sub_100DA4A50, v1, 0);
}

uint64_t sub_100DA4A50()
{
  uint64_t v25 = v0;
  uint64_t v1 = (uint64_t *)(*(void *)(v0[37] + 160)
                 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v2 = *v1;
  v0[51] = *v1;
  unint64_t v3 = v1[1];
  v0[52] = v3;
  if (v3 >> 60 == 15) {
    goto LABEL_4;
  }
  v0[30] = v2;
  v0[31] = v3;
  sub_1000361E0(v2, v3);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v2, v3);
LABEL_4:
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10165E160);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Invalid serial number.", v7, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = xmmword_10137D8F0;
    *(unsigned char *)(v8 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  uint64_t v11 = Data.trimmed.getter();
  unint64_t v13 = v12;
  v0[53] = v11;
  v0[54] = v12;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v14 = (long long *)(v0 + 15);
  uint64_t v15 = type metadata accessor for Logger();
  v0[55] = v15;
  sub_100010324(v15, (uint64_t)qword_10170F068);
  sub_1000361E0(v11, v13);
  sub_1000361E0(v11, v13);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558275;
    v0[34] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    static String.Encoding.utf8.getter();
    uint64_t v19 = String.init(data:encoding:)();
    if (!v20) {
      uint64_t v19 = Data.hexString.getter();
    }
    v0[35] = sub_1008FA0F0(v19, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v11, v13);
    sub_10001CFB8(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting registration through FMFD %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = (long long *)(v0 + 15);
  }
  else
  {
    sub_10001CFB8(v11, v13);
    sub_10001CFB8(v11, v13);
  }
  uint64_t v21 = qword_1016375E8;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v14, (uint64_t *)&unk_101638D30);
  if (v0[18])
  {
    sub_10001CEB0(v14, (uint64_t)(v0 + 10));
    swift_release();
    sub_10001CD44(v0 + 10, v0[13]);
    uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[56] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100DA4F90;
    return v23();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DA4F90(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296);
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DA50A8, v2, 0);
}

uint64_t sub_100DA50A8()
{
  uint64_t v1 = (uint64_t)(v0 + 10);
  if (v0[57])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[57];
    return _swift_task_switch(sub_100DA5218, v2, 0);
  }
  else
  {
    uint64_t v4 = v0[53];
    unint64_t v3 = v0[54];
    uint64_t v6 = v0[51];
    unint64_t v5 = v0[52];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000013;
    v7[1] = 0x80000001014033F0;
    swift_willThrow();
    sub_10001CFB8(v4, v3);
    sub_100037A24(v6, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100DA5218()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[58] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100DA52B4;
  uint64_t v3 = v0[53];
  uint64_t v2 = v0[54];
  return sub_100C12E34(v3, v2);
}

uint64_t sub_100DA52B4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 472) = a1;
  *(void *)(v4 + 480) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 296);
  if (v1) {
    uint64_t v6 = sub_100DA5794;
  }
  else {
    uint64_t v6 = sub_100DA53E8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100DA53E8()
{
  uint64_t v1 = v0[59];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[48] + 80);
    sub_100DB2E50(v1 + ((v2 + 32) & ~v2), v0[46], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[48];
  uint64_t v6 = v0[46];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(v0[46], (uint64_t *)&unk_10163B1D0);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    sub_100010324(v0[55], (uint64_t)qword_10165E160);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = v0[53];
    unint64_t v10 = v0[54];
    uint64_t v13 = v0[51];
    unint64_t v12 = v0[52];
    if (v9)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid record!", v14, 2u);
      swift_slowDealloc();
      swift_release();

      sub_10001CFB8(v11, v10);
      sub_100037A24(v13, v12);
    }
    else
    {
      sub_100037A24(v0[51], v0[52]);
      swift_release();
      sub_10001CFB8(v11, v10);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    uint64_t v15 = v0[49];
    uint64_t v16 = v0[45];
    uint64_t v17 = v0[42];
    uint64_t v18 = v0[43];
    sub_100DB2DE8(v0[46], v15, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    v0[61] = [self sharedInstance];
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v0[62] = v19;
    v0[63] = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v16, v15, v17);
    uint64_t v20 = type metadata accessor for Peripheral();
    uint64_t v21 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[64] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100DA5870;
    uint64_t v23 = v0[41];
    return dispatch thunk of PeripheralProtocol.state.getter(v23, v20, v21);
  }
}

uint64_t sub_100DA5794()
{
  uint64_t v2 = v0[53];
  unint64_t v1 = v0[54];
  sub_100037A24(v0[51], v0[52]);
  swift_release();
  sub_10001CFB8(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DA5870()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 296);
  swift_task_dealloc();
  return _swift_task_switch(sub_100DA5980, v1, 0);
}

uint64_t sub_100DA5980()
{
  uint64_t v40 = *(void *)(v0 + 424);
  unint64_t v41 = *(void *)(v0 + 432);
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v39 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 312);
  (*(void (**)(uint64_t, void))(v0 + 496))(v1, *(void *)(v0 + 360));
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for PeripheralState.connected(_:), v5);
  sub_100DB1F50(&qword_10165E6E8, (void (*)(uint64_t))&type metadata accessor for PeripheralState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v6 = *(void *)(v0 + 264) == *(void *)(v0 + 256);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 520) = v7;
  *(void *)(v0 + 528) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v5);
  id v8 = objc_allocWithZone((Class)FMDLocalFindableAccessory);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 initWithIdentifier:isa name:v10 connected:v6];
  *(void *)(v0 + 536) = v11;

  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 544) = v12;
  *(void *)(v0 + 552) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v1, v39);
  sub_1000361E0(v40, v41);
  static String.Encoding.utf8.getter();
  String.init(data:encoding:)();
  uint64_t v14 = v13;
  sub_10001CFB8(v40, v41);
  if (!v14) {
    Data.hexString.getter();
  }
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 376);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setSerialNumber:v17];

  uint64_t v18 = (uint64_t *)(v15 + *(int *)(v16 + 32));
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = *v18;
    *(void *)(v0 + 224) = *v18;
    *(void *)(v0 + 232) = v19;
    sub_1000361E0(v20, v19);
    sub_100DB28D0();
    RawRepresentable<>.hexString.getter();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 setAlternateSerialNumber:v21];

    sub_100037A24(v20, v19);
  }
  id v42 = *(id *)(v0 + 488);
  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v23 = *(int **)(v0 + 376);
  uint64_t v24 = v22 + v23[13];
  uint64_t v25 = (uint64_t *)(v24 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_1000361E0(*v25, v27);
  Class v28 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v26, v27);
  [v11 setIrkData:v28];

  MACAddress.hexString.getter();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setBtAddress:v29];

  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_101342130;
  uint64_t v31 = *(void *)(v22 + v23[10]);
  *(void *)(v30 + 56) = &type metadata for Int;
  *(void *)(v30 + 64) = &protocol witness table for Int;
  *(void *)(v30 + 32) = v31;
  String.init(format:_:)();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setVendorId:v32];

  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_101342130;
  uint64_t v34 = *(void *)(v22 + v23[11]);
  *(void *)(v33 + 56) = &type metadata for Int;
  *(void *)(v33 + 64) = &protocol witness table for Int;
  *(void *)(v33 + 32) = v34;
  String.init(format:_:)();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setProductId:v35];

  Class v36 = UUID._bridgeToObjectiveC()().super.isa;
  [v11 setBaUUID:v36];

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100DA5EDC;
  uint64_t v37 = swift_continuation_init();
  *(void *)(v0 + 160) = _NSConcreteStackBlock;
  *(void *)(v0 + 168) = 0x40000000;
  *(void *)(v0 + 176) = sub_100DB174C;
  *(void *)(v0 + 184) = &unk_1015F2BD0;
  *(void *)(v0 + 192) = v37;
  [v42 didAddLocalFindableAccessory:v11];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100DA5EDC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 560) = v2;
  uint64_t v3 = *(void *)(v1 + 296);
  if (v2) {
    uint64_t v4 = sub_100DA6164;
  }
  else {
    uint64_t v4 = sub_100DA5FFC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA5FFC()
{
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 544);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
  uint64_t v1 = *(void **)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 424);
  unint64_t v2 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 408);
  unint64_t v4 = *(void *)(v0 + 416);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v8 = *(void *)(v0 + 304);

  swift_release();
  sub_10001CFB8(v3, v2);
  sub_100037A24(v5, v4);
  v12(v7, v8);
  v14(v11, v6);
  sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100DA6164()
{
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[68];
  uint64_t v1 = (void *)v0[67];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[65];
  unint64_t v2 = (void *)v0[61];
  uint64_t v4 = v0[53];
  unint64_t v3 = v0[54];
  uint64_t v5 = v0[51];
  uint64_t v14 = v0[49];
  uint64_t v12 = v0[45];
  uint64_t v6 = v0[41];
  unint64_t v10 = v0[52];
  uint64_t v11 = v0[42];
  uint64_t v7 = v0[38];
  swift_willThrow();
  swift_release();

  sub_10001CFB8(v4, v3);
  sub_100037A24(v5, v10);
  v13(v6, v7);
  v15(v12, v11);
  sub_100D6BBBC(v14, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100DA62D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = sub_10000588C(&qword_101639C68);
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  uint64_t v7 = type metadata accessor for Characteristic();
  uint64_t v8 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
  BOOL v9 = (void *)swift_task_alloc();
  v3[6] = v9;
  void *v9 = v3;
  v9[1] = sub_1000463D0;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v6, a3, v7, v8);
}

uint64_t sub_100DA643C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[317] = v3;
  v4[316] = a3;
  v4[315] = a2;
  v4[314] = a1;
  type metadata accessor for LocalFindableAccessoryRecord();
  v4[318] = swift_task_alloc();
  v4[319] = swift_task_alloc();
  v4[320] = swift_task_alloc();
  return _swift_task_switch(sub_100DA64F4, v3, 0);
}

uint64_t sub_100DA64F4()
{
  uint64_t v173 = v0;
  sub_10005F6AC(*(void *)(v0 + 2528), v0 + 2080);
  sub_10000588C(&qword_101639B58);
  if (!swift_dynamicCast())
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 2528);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10165E160);
    sub_10005F6AC(v9, v0 + 2128);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_10005F6AC(v0 + 2128, v0 + 2032);
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v0 + 2496) = sub_1008FA0F0(v14, v15, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2128);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid command from payload %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2128);
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v30 = xmmword_1013540F0;
    *(unsigned char *)(v30 + 16) = 3;
    swift_willThrow();
    goto LABEL_44;
  }
  uint64_t v1 = (_OWORD *)(v0 + 16);
  uint64_t v2 = v0 + 160;
  sub_1001E1A4C((_OWORD *)(v0 + 592), (_OWORD *)(v0 + 160));
  uint64_t v171 = (_OWORD *)(v0 + 1168);
  sub_1001E1A4C((_OWORD *)(v0 + 592), (_OWORD *)(v0 + 1168));
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 2568) = v3;
  sub_100010324(v3, (uint64_t)qword_10165E160);
  sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
  sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v172[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    sub_1001E1A4C((_OWORD *)(v0 + 160), (_OWORD *)(v0 + 1024));
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 2504) = sub_1008FA0F0(v7, v8, v172);
    uint64_t v1 = (_OWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received command: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
  }

  sub_1001E1A4C((_OWORD *)(v0 + 160), v1);
  int v16 = sub_1001E1A7C((uint64_t)v1);
  if (v16 != 3)
  {
    if (v16 == 1)
    {
      sub_1001E1BE8((uint64_t)v1);
      NSString v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, " Received pairing data!!", v19, 2u);
        swift_slowDealloc();
      }

      sub_1001E17B8((uint64_t *)(v0 + 2216));
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        uint64_t v20 = (uint64_t *)(v0 + 1744);
        long long v21 = *(_OWORD *)(v0 + 560);
        *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 544);
        *(_OWORD *)(v0 + 1856) = v21;
        *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 576);
        long long v22 = *(_OWORD *)(v0 + 496);
        *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 480);
        *(_OWORD *)(v0 + 1792) = v22;
        long long v23 = *(_OWORD *)(v0 + 528);
        *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 512);
        *(_OWORD *)(v0 + 1824) = v23;
        long long v24 = *(_OWORD *)(v0 + 464);
        *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 448);
        *(_OWORD *)(v0 + 1760) = v24;
        sub_100DB37B8((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_1000361E0);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          unint64_t v27 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v27 = 136315138;
          uint64_t v28 = Data.hexString.getter();
          *(void *)(v0 + 2488) = sub_1008FA0F0(v28, v29, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "AuthNonce: %s", v27, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        unint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v73 = 136315138;
          uint64_t v74 = Data.hexString.getter();
          *(void *)(v0 + 2480) = sub_1008FA0F0(v74, v75, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "SerialNumber: %s", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v82 = 136315138;
          uint64_t v83 = Data.hexString.getter();
          *(void *)(v0 + 2472) = sub_1008FA0F0(v83, v84, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "Alternate SerialNumber: %s", v82, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 136315138;
          uint64_t v88 = Data.hexString.getter();
          *(void *)(v0 + 2464) = sub_1008FA0F0(v88, v89, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "seed: %s", v87, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        uint64_t v90 = v0 + 304;
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        uint64_t v91 = Logger.logObject.getter();
        os_log_type_t v92 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v91, v92))
        {
          uint64_t v93 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v93 = 136315138;
          uint64_t v94 = Data.hexString.getter();
          *(void *)(v0 + 2456) = sub_1008FA0F0(v94, v95, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          uint64_t v90 = v0 + 304;
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "Certs: %s", v93, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_1000361E0);
        uint64_t v96 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v96, v97))
        {
          uint64_t v98 = (uint8_t *)swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v98 = 136315138;
          uint64_t v99 = Data.hexString.getter();
          *(void *)(v0 + 2448) = sub_1008FA0F0(v99, v100, v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "Attestation: %s", v98, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100DB37B8(v20, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        }

        uint64_t v101 = *(void *)(v0 + 2536);
        *(unsigned char *)(v101 + 152) = 3;
        uint64_t v102 = *(void *)(v0 + 1744);
        unint64_t v103 = *(void *)(v0 + 1752);
        uint64_t v104 = (uint64_t *)(*(void *)(v101 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
        uint64_t v106 = *v104;
        unint64_t v105 = v104[1];
        *uint64_t v104 = v102;
        v104[1] = v103;
        sub_1000361E0(v102, v103);
        sub_100037A24(v106, v105);
        uint64_t v107 = *(void *)(v0 + 1760);
        unint64_t v108 = *(void *)(v0 + 1768);
        uint64_t v109 = (uint64_t *)(*(void *)(v101 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        uint64_t v111 = *v109;
        unint64_t v110 = v109[1];
        *uint64_t v109 = v107;
        v109[1] = v108;
        sub_1000361E0(v107, v108);
        sub_100037A24(v111, v110);
        uint64_t v112 = *(void *)(v0 + 1776);
        unint64_t v113 = *(void *)(v0 + 1784);
        uint64_t v114 = (uint64_t *)(*(void *)(v101 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
        uint64_t v116 = *v114;
        unint64_t v115 = v114[1];
        *uint64_t v114 = v112;
        v114[1] = v113;
        sub_1000361E0(v112, v113);
        sub_100037A24(v116, v115);
        uint64_t v117 = *(void *)(v0 + 1792);
        unint64_t v118 = *(void *)(v0 + 1800);
        uint64_t v119 = (uint64_t *)(*(void *)(v101 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
        uint64_t v121 = *v119;
        unint64_t v120 = v119[1];
        *uint64_t v119 = v117;
        v119[1] = v118;
        sub_1000361E0(v117, v118);
        sub_100037A24(v121, v120);
        uint64_t v122 = *(void *)(v0 + 1824);
        unint64_t v123 = *(void *)(v0 + 1832);
        uint64_t v124 = (uint64_t *)(*(void *)(v101 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
        uint64_t v126 = *v124;
        unint64_t v125 = v124[1];
        *uint64_t v124 = v122;
        v124[1] = v123;
        sub_1000361E0(v122, v123);
        sub_100037A24(v126, v125);
        uint64_t v127 = *(void *)(v0 + 1808);
        unint64_t v128 = *(void *)(v0 + 1816);
        uint64_t v129 = (uint64_t *)(*(void *)(v101 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
        uint64_t v131 = *v129;
        unint64_t v130 = v129[1];
        *uint64_t v129 = v127;
        v129[1] = v128;
        sub_1000361E0(v127, v128);
        sub_100037A24(v131, v130);
        uint64_t v132 = *(void *)(v0 + 1840);
        unint64_t v133 = *(void *)(v0 + 1848);
        uint64_t v134 = (uint64_t *)(*(void *)(v101 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
        uint64_t v136 = *v134;
        unint64_t v135 = v134[1];
        *uint64_t v134 = v132;
        v134[1] = v133;
        sub_1000361E0(v132, v133);
        sub_100037A24(v136, v135);
        uint64_t v137 = *(void *)(v0 + 1856);
        unint64_t v138 = *(void *)(v0 + 1864);
        BOOL v139 = (uint64_t *)(*(void *)(v101 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature);
        uint64_t v141 = *v139;
        unint64_t v140 = v139[1];
        *BOOL v139 = v137;
        v139[1] = v138;
        sub_1000361E0(v137, v138);
        sub_100037A24(v141, v140);
        uint64_t v142 = (void *)swift_task_alloc();
        *(void *)(v0 + 2576) = v142;
        *uint64_t v142 = v0;
        v142[1] = sub_100DA83B4;
        return sub_100D96270(v90);
      }
      uint64_t v52 = v0 + 160;
      sub_1001E1A4C(v171, (_OWORD *)(v0 + 736));
      uint64_t v53 = (uint64_t *)sub_1001E1BE8(v0 + 736);
      sub_100DB37B8(v53, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      sub_100DB37B8(v53, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        v172[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 136446210;
        sub_1001E17B8((uint64_t *)(v0 + 2176));
        uint64_t v57 = String.init<A>(describing:)();
        *(void *)(v0 + 2424) = sub_1008FA0F0(v57, v58, v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100DB2EB8(v52, (void (*)(void))sub_10001CFB8);
        sub_100DB2EB8(v52, (void (*)(void))sub_10001CFB8);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Invalid sendPairingData payload %{public}s", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100DB2EB8(v52, (void (*)(void))sub_10001CFB8);
        sub_100DB2EB8(v52, (void (*)(void))sub_10001CFB8);
      }

      sub_1004AF24C();
      swift_allocError();
      *(_OWORD *)uint64_t v76 = xmmword_101354100;
      *(unsigned char *)(v76 + 16) = 3;
      swift_willThrow();
      uint64_t v77 = v0 + 160;
      goto LABEL_43;
    }
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      int v49 = (uint8_t *)swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)int v49 = 136446210;
      sub_1001E1A4C((_OWORD *)(v0 + 160), (_OWORD *)(v0 + 1456));
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_1000361E0);
      uint64_t v50 = String.init<A>(describing:)();
      *(void *)(v0 + 2440) = sub_1008FA0F0(v50, v51, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100DB2EB8(v2, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v2, (void (*)(void))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Received unexpected command %{public}s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    }

    sub_1004AF24C();
    swift_allocError();
    long long v70 = xmmword_1013540F0;
LABEL_42:
    *(_OWORD *)uint64_t v69 = v70;
    *(unsigned char *)(v69 + 16) = 3;
    swift_willThrow();
    uint64_t v77 = v2;
LABEL_43:
    sub_100DB2EB8(v77, (void (*)(void))sub_10001CFB8);
LABEL_44:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v78 = *(uint64_t (**)(void))(v0 + 8);
    return v78();
  }
  sub_1001E1BE8((uint64_t)v1);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Received pairing status.", v33, 2u);
    swift_slowDealloc();
  }
  uint64_t v34 = *(void *)(v0 + 2536);

  *(unsigned char *)(v34 + 152) = 5;
  sub_1001E17B8((uint64_t *)(v0 + 2256));
  sub_10000588C(&qword_101639B68);
  if (!swift_dynamicCast())
  {
    sub_1001E1A4C(v171, (_OWORD *)(v0 + 1888));
    unint64_t v59 = (uint64_t *)sub_1001E1BE8(v0 + 1888);
    uint64_t v61 = *v59;
    unint64_t v60 = v59[1];
    uint64_t v62 = v59[2];
    unint64_t v63 = v59[3];
    sub_1000361E0(*v59, v60);
    sub_1000361E0(v62, v63);
    sub_1000361E0(v61, v60);
    sub_1000361E0(v62, v63);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446210;
      sub_1001E17B8((uint64_t *)(v0 + 2296));
      uint64_t v67 = String.init<A>(describing:)();
      *(void *)(v0 + 2432) = sub_1008FA0F0(v67, v68, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, " Invalid sendPairingStatus payload %{public}s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v0 + 160;
      swift_slowDealloc();
    }
    else
    {
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
      sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    }

    sub_1004AF24C();
    swift_allocError();
    long long v70 = xmmword_101354100;
    goto LABEL_42;
  }
  uint64_t v35 = *(void *)(v0 + 2336);
  *(void *)(v0 + 2592) = v35;
  unint64_t v36 = *(void *)(v0 + 2344);
  *(void *)(v0 + 2600) = v36;
  uint64_t v37 = *(void *)(v0 + 2352);
  *(void *)(v0 + 2608) = v37;
  unint64_t v38 = *(void *)(v0 + 2360);
  *(void *)(v0 + 2616) = v38;
  sub_1000361E0(v35, v36);
  char v39 = sub_1008F5DD8(v35, v36);
  if (v39)
  {
    char v40 = v39;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v169 = v37;
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      unint64_t v44 = sub_1008F5C58(v40);
      *(void *)(v0 + 2416) = sub_1008FA0F0(v44, v45, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, " Pairing failed with status %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v37 = v169;
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v46 = xmmword_10135D7D0;
    *(unsigned char *)(v46 + 16) = 3;
    swift_willThrow();
    sub_10001CFB8(v35, v36);
    sub_10001CFB8(v37, v38);
    sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
    goto LABEL_44;
  }
  uint64_t v143 = *(void *)(v0 + 2536);
  uint64_t v144 = (uint64_t *)(*(void *)(v143 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  uint64_t v146 = *v144;
  unint64_t v145 = v144[1];
  *uint64_t v144 = v35;
  v144[1] = v36;
  sub_1000361E0(v35, v36);
  sub_100037A24(v146, v145);
  unint64_t v147 = (uint64_t *)(*(void *)(v143 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
  uint64_t v149 = *v147;
  unint64_t v148 = v147[1];
  *unint64_t v147 = v37;
  v147[1] = v38;
  uint64_t v170 = v37;
  sub_1000361E0(v37, v38);
  sub_100037A24(v149, v148);
  uint64_t v150 = Logger.logObject.getter();
  os_log_type_t v151 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v150, v151))
  {
    uint64_t v152 = (uint8_t *)swift_slowAlloc();
    v172[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v152 = 136446210;
    unint64_t v153 = sub_1008F5C58(0);
    *(void *)(v0 + 2384) = sub_1008FA0F0(v153, v154, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v150, v151, "status: %{public}s", v152, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000361E0(v35, v36);
  sub_1000361E0(v170, v38);
  sub_1000361E0(v35, v36);
  sub_1000361E0(v170, v38);
  uint64_t v155 = Logger.logObject.getter();
  uint64_t v156 = v35;
  os_log_type_t v157 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v155, v157))
  {
    uint64_t v158 = v156;
    uint64_t v159 = swift_slowAlloc();
    v172[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v159 = 134218242;
    uint64_t v160 = 0;
    switch(v38 >> 62)
    {
      case 1uLL:
        LODWORD(v160) = HIDWORD(v170) - v170;
        if (__OFSUB__(HIDWORD(v170), v170))
        {
          __break(1u);
LABEL_77:
          __break(1u);
          JUMPOUT(0x100DA83A4);
        }
        uint64_t v160 = (int)v160;
LABEL_72:
        *(void *)(v0 + 2368) = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v159 + 12) = 2080;
        uint64_t v164 = Data.hexString.getter();
        *(void *)(v0 + 2376) = sub_1008FA0F0(v164, v165, v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v158, v36);
        sub_10001CFB8(v170, v38);
        sub_10001CFB8(v158, v36);
        sub_10001CFB8(v170, v38);
        _os_log_impl((void *)&_mh_execute_header, v155, v157, "S4 count %ld: %s", (uint8_t *)v159, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v162 = *(void *)(v170 + 16);
        uint64_t v161 = *(void *)(v170 + 24);
        BOOL v163 = __OFSUB__(v161, v162);
        uint64_t v160 = v161 - v162;
        if (!v163) {
          goto LABEL_72;
        }
        goto LABEL_77;
      case 3uLL:
        goto LABEL_72;
      default:
        uint64_t v160 = BYTE6(v38);
        goto LABEL_72;
    }
  }
  else
  {
    sub_10001CFB8(v156, v36);
    sub_10001CFB8(v170, v38);
    sub_10001CFB8(v156, v36);
    sub_10001CFB8(v170, v38);
  }

  uint64_t v166 = (void *)swift_task_alloc();
  *(void *)(v0 + 2624) = v166;
  *uint64_t v166 = v0;
  v166[1] = sub_100DA8684;
  uint64_t v167 = *(void *)(v0 + 2560);
  uint64_t v168 = *(void *)(v0 + 2520);
  return sub_100DA8D74(v167, v168);
}

uint64_t sub_100DA83B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 2536);
    uint64_t v4 = sub_100DA85C4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 2536);
    sub_1001E1A4C((_OWORD *)(v2 + 304), (_OWORD *)(v2 + 1600));
    uint64_t v4 = sub_100DA84E0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA84E0()
{
  sub_100DB37B8((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
  sub_1001E1A4C((_OWORD *)(v0 + 1600), (_OWORD *)(v0 + 1312));
  sub_1001E1A4C((_OWORD *)(v0 + 1312), *(_OWORD **)(v0 + 2512));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DA85C4()
{
  sub_100DB37B8((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100DB2EB8(v0 + 160, (void (*)(void))sub_10001CFB8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DA8684()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2632) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 2536);
  if (v0) {
    uint64_t v4 = sub_100DA8CB0;
  }
  else {
    uint64_t v4 = sub_100DA87B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA87B0()
{
  uint64_t v33 = v0;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v31 = v0 + 160;
  uint64_t v1 = *(void *)(v0 + 2560);
  uint64_t v2 = *(void *)(v0 + 2552);
  uint64_t v3 = *(void *)(v0 + 2544);
  sub_100010324(*(void *)(v0 + 2568), (uint64_t)qword_10170F068);
  sub_100DB2E50(v1, v2, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_100DB2E50(v1, v3, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 2552);
  uint64_t v8 = *(void *)(v0 + 2544);
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315651;
    uint64_t v10 = sub_1000C8E00();
    *(void *)(v0 + 2408) = sub_1008FA0F0(v10, v11, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v9 + 12) = 2160;
    *(void *)(v0 + 2400) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 2392) = sub_1008FA0F0(v12, v13, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Created beacon: %s. BeaconId: %{private,mask.hash}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(*(void *)(v0 + 2552), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100D6BBBC(v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }

  uint64_t v14 = *(void *)(v0 + 2632);
  *(unsigned char *)(*(void *)(v0 + 2536) + 152) = 9;
  uint64_t v15 = static Data.random(bytes:)();
  unint64_t v17 = v16;
  sub_1000361E0(v15, v16);
  sub_100D02A44();
  BinaryDecodable.init(data:)();
  if (v14)
  {
    unint64_t v18 = *(void *)(v0 + 2616);
    uint64_t v19 = *(void *)(v0 + 2608);
    unint64_t v20 = *(void *)(v0 + 2600);
    uint64_t v21 = *(void *)(v0 + 2592);
    uint64_t v22 = *(void *)(v0 + 2560);
    swift_errorRelease();
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_101354100;
    *(unsigned char *)(v23 + 16) = 3;
    swift_willThrow();
    sub_100DB2EB8(v31, (void (*)(void))sub_10001CFB8);
    sub_10001CFB8(v15, v17);
    sub_10001CFB8(v21, v20);
    sub_10001CFB8(v19, v18);
    sub_100D6BBBC(v22, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }
  else
  {
    unint64_t v25 = *(void *)(v0 + 2616);
    uint64_t v26 = *(void *)(v0 + 2608);
    unint64_t v27 = *(void *)(v0 + 2600);
    uint64_t v28 = *(void *)(v0 + 2592);
    uint64_t v29 = *(void *)(v0 + 2560);
    sub_100DB2EB8(v31, (void (*)(void))sub_10001CFB8);
    sub_10001CFB8(v15, v17);
    sub_10001CFB8(v28, v27);
    sub_10001CFB8(v26, v25);
    sub_1001E3920(v0 + 880);
    sub_100D6BBBC(v29, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_1001E1A4C((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1312));
    sub_1001E1A4C((_OWORD *)(v0 + 1312), *(_OWORD **)(v0 + 2512));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100DA8CB0()
{
  unint64_t v1 = v0[327];
  uint64_t v2 = v0[326];
  sub_10001CFB8(v0[324], v0[325]);
  sub_10001CFB8(v2, v1);
  sub_100DB2EB8((uint64_t)(v0 + 20), (void (*)(void))sub_10001CFB8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DA8D74(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  v3[29] = *v2;
  sub_10000588C(&qword_10164DBB0);
  v3[30] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudKitCoordinator.Database();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  type metadata accessor for LocalFindableAccessoryRecord();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[36] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v3[37] = v5;
  v3[38] = *(void *)(v5 - 8);
  v3[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[40] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[41] = v7;
  v3[42] = *(void *)(v7 + 64);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PeripheralConnectionMaterial(0);
  v3[45] = v8;
  v3[46] = *(void *)(v8 - 8);
  v3[47] = swift_task_alloc();
  sub_10000588C(&qword_10163E578);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PeripheralPairingInfo();
  v3[50] = v9;
  v3[51] = *(void *)(v9 - 8);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  sub_10000588C(&qword_10165E5D0);
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v3[57] = swift_task_alloc();
  return _swift_task_switch(sub_100DA9150, v2, 0);
}

uint64_t sub_100DA9150()
{
  uint64_t v35 = v0;
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v1 = (void *)qword_10170EE68;
  id v2 = [self sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v1 BOOLForKey:v4];

    if (v5)
    {
      if (qword_1016370D8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100010324(v6, (uint64_t)qword_10165E160);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        v34[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136446210;
        v0[25] = sub_1008FA0F0(0xD000000000000019, 0x8000000101417D40, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s SimulateLocalFindablePairingFailure defaults set. Failing beacon creation!", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_1004AF24C();
      swift_allocError();
      uint64_t v11 = 20;
LABEL_18:
      *(void *)uint64_t v10 = v11;
      *(void *)(v10 + 8) = 0;
      *(unsigned char *)(v10 + 16) = 3;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = (uint64_t (*)(void))v0[1];
      return v19();
    }
  }
  uint64_t v12 = (uint64_t *)(*(void *)(v0[28] + 160)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v13 = *v12;
  v0[58] = *v12;
  unint64_t v14 = v12[1];
  v0[59] = v14;
  if (v14 >> 60 == 15)
  {
LABEL_13:
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10165E160);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid serial number.", v18, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    uint64_t v11 = 8;
    goto LABEL_18;
  }
  v0[18] = v13;
  v0[19] = v14;
  sub_1000361E0(v13, v14);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v13, v14);
    goto LABEL_13;
  }
  uint64_t v21 = Data.trimmed.getter();
  unint64_t v23 = v22;
  v0[60] = v21;
  v0[61] = v22;
  if (qword_101637310 != -1) {
    swift_once();
  }
  long long v24 = (long long *)(v0 + 7);
  uint64_t v25 = type metadata accessor for Logger();
  v0[62] = v25;
  sub_100010324(v25, (uint64_t)qword_10170F068);
  sub_1000361E0(v21, v23);
  sub_1000361E0(v21, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 141558275;
    v0[23] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2081;
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.init(data:encoding:)();
    if (!v30) {
      uint64_t v29 = Data.hexString.getter();
    }
    v0[24] = sub_1008FA0F0(v29, v30, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v21, v23);
    sub_10001CFB8(v21, v23);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    long long v24 = (long long *)(v0 + 7);
  }
  else
  {
    sub_10001CFB8(v21, v23);
    sub_10001CFB8(v21, v23);
  }
  uint64_t v31 = qword_1016375E8;
  swift_retain();
  if (v31 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v24, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v24, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v33 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    os_log_type_t v32 = (void *)swift_task_alloc();
    v0[63] = v32;
    *os_log_type_t v32 = v0;
    v32[1] = sub_100DA9930;
    return v33();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DA9930(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DA9A48, v2, 0);
}

uint64_t sub_100DA9A48()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[64];
  if (v2)
  {
    uint64_t v3 = v0[29];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = swift_allocObject();
    v0[65] = v4;
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v3;
    swift_retain();
    unsigned int v5 = (void *)swift_task_alloc();
    v0[66] = v5;
    *unsigned int v5 = v0;
    v5[1] = sub_100DA9CDC;
    return withTimeout<A>(_:block:)(v5, 0x8155A43676E00000, 6, &unk_10165E730, v4, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v7 = v0[60];
    unint64_t v6 = v0[61];
    uint64_t v9 = v0[58];
    unint64_t v8 = v0[59];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v10 = 0xD000000000000013;
    v10[1] = 0x80000001014033F0;
    swift_willThrow();
    sub_10001CFB8(v7, v6);
    sub_100037A24(v9, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100DA9CDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    uint64_t v4 = sub_100DAA028;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 224);
    swift_release();
    uint64_t v4 = sub_100DA9E04;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DA9E04()
{
  uint64_t v1 = type metadata accessor for Peripheral();
  v0[68] = v1;
  uint64_t v2 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[69] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[70] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100DA9EFC;
  uint64_t v4 = v0[54];
  return dispatch thunk of PeripheralProtocol.pairingInfo.getter(v4, v1, v2);
}

uint64_t sub_100DA9EFC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_100DAA608;
  }
  else {
    uint64_t v4 = sub_100DAA1A0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DAA028()
{
  uint64_t v2 = v0[60];
  unint64_t v1 = v0[61];
  sub_100037A24(v0[58], v0[59]);
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DAA1A0()
{
  unint64_t v41 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[51];
  v0[72] = sub_100010324(v0[62], (uint64_t)qword_10165E160);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v1, v2, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[53];
  uint64_t v11 = v0[50];
  uint64_t v10 = v0[51];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_100DB1F50(&qword_10165E760, (void (*)(uint64_t))&type metadata accessor for PeripheralPairingInfo);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[22] = sub_1008FA0F0(v13, v14, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Peripheral pairing info: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v9, v11);
  }

  v0[73] = v15;
  uint64_t v16 = v0[52];
  uint64_t v17 = v0[49];
  uint64_t v18 = v0[50];
  uint64_t v33 = v15;
  uint64_t v34 = v0[48];
  uint64_t v19 = v0[46];
  uint64_t v20 = v0[47];
  uint64_t v21 = v0[45];
  uint64_t v37 = v0[38];
  uint64_t v36 = v0[37];
  uint64_t v38 = v0[28];
  uint64_t v35 = v0[39];
  uint64_t v22 = *(void *)(v38 + 160);
  v5(v16, v0[54], v18);
  swift_retain();
  PeripheralPairingInfo.remoteAddress.getter();
  uint64_t v23 = PeripheralPairingInfo.remoteIRK.getter();
  uint64_t v25 = v24;
  v0[74] = v39;
  v33(v16, v18);
  uint64_t v26 = (uint64_t *)(v20 + *(int *)(v21 + 20));
  *uint64_t v26 = v23;
  v26[1] = v25;
  sub_100DB2DE8(v20, v17, type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v21);
  sub_10001D608(v17, v34, &qword_10163E578);
  uint64_t v27 = v22 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  swift_beginAccess();
  sub_100062604(v34, v27, &qword_10163E578);
  swift_endAccess();
  swift_release();
  dispatch thunk of PeripheralProtocol.id.getter();
  Identifier.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  uint64_t v28 = *(void *)(v38 + 160);
  v0[75] = v28;
  swift_retain();
  uint64_t v29 = (void *)swift_task_alloc();
  v0[76] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100DAA774;
  uint64_t v30 = v0[44];
  uint64_t v31 = v0[26];
  return sub_100DAC3BC(v31, v30, v28);
}

uint64_t sub_100DAA608()
{
  uint64_t v2 = v0[60];
  unint64_t v1 = v0[61];
  sub_100037A24(v0[58], v0[59]);
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DAA774()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    swift_release();
    uint64_t v4 = sub_100DAAA88;
    uint64_t v5 = v3;
  }
  else
  {
    swift_release();
    uint64_t v5 = *(void *)(v2 + 512);
    uint64_t v4 = sub_100DAA8BC;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100DAA8BC()
{
  unint64_t v1 = (void *)swift_task_alloc();
  v0[78] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100DAA95C;
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[36];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100DAA95C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 632) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v4 = sub_100DAAEA4;
  }
  else {
    uint64_t v4 = sub_100DAAC3C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DAAA88()
{
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[60];
  unint64_t v2 = v0[61];
  uint64_t v4 = v0[58];
  unint64_t v3 = v0[59];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[40];
  uint64_t v9 = v0[41];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v12(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100DAAC3C()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[26];
  uint64_t v3 = swift_task_alloc();
  v0[80] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = v0[64];
  return _swift_task_switch(sub_100DAACB4, v4, 0);
}

uint64_t sub_100DAACB4()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[81] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100DAAD7C;
  uint64_t v2 = v0[80];
  uint64_t v3 = v0[55];
  return v5(v3, &unk_10165E748, v2);
}

uint64_t sub_100DAAD7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 656) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 512);
    uint64_t v4 = sub_100DAB33C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 224);
    swift_task_dealloc();
    uint64_t v4 = sub_100DAB07C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DAAEA4()
{
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[60];
  unint64_t v2 = v0[61];
  uint64_t v4 = v0[58];
  unint64_t v3 = v0[59];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[40];
  uint64_t v9 = v0[41];
  uint64_t v12 = v0[26];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v13(v5, v6);
  sub_100D6BBBC(v12, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100DAB07C()
{
  uint64_t v17 = v0;
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[26];
  sub_10001D608(v0[55], v0[56], &qword_10165E5D0);
  sub_100DB2E50(v3, v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_100DB2E50(v3, v2, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = v0[34];
    uint64_t v6 = v0[35];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = sub_1000C8E00();
    v0[20] = sub_1008FA0F0(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v8 + 12) = 2082;
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[21] = sub_1008FA0F0(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Saving new %s %{public}s to CK.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = v0[34];
    sub_100D6BBBC(v0[35], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }

  (*(void (**)(void, void, void))(v0[32] + 104))(v0[33], enum case for CloudKitCoordinator.Database.private(_:), v0[31]);
  uint64_t v14 = v0[64];
  return _swift_task_switch(sub_100DAB594, v14, 0);
}

uint64_t sub_100DAB33C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_task_dealloc();
  return _swift_task_switch(sub_100DAB3A8, v1, 0);
}

uint64_t sub_100DAB3A8()
{
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[60];
  unint64_t v2 = v0[61];
  uint64_t v4 = v0[58];
  unint64_t v3 = v0[59];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[40];
  uint64_t v9 = v0[41];
  uint64_t v12 = v0[36];
  uint64_t v13 = v0[26];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v14(v5, v6);
  sub_10001DAB4(v12, (uint64_t *)&unk_10163B1D0);
  sub_100D6BBBC(v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100DAB594()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[83] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100DAB648;
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[33];
  return v5(v2, v3);
}

uint64_t sub_100DAB648()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 672) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[64];
    uint64_t v4 = sub_100DABAC8;
  }
  else
  {
    uint64_t v5 = v2[28];
    (*(void (**)(void, void))(v2[32] + 8))(v2[33], v2[31]);
    uint64_t v4 = sub_100DAB780;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DAB780()
{
  uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v17 = v0[60];
  unint64_t v18 = v0[61];
  uint64_t v19 = v0[58];
  uint64_t v23 = v0[54];
  uint64_t v24 = v0[56];
  unint64_t v20 = v0[59];
  uint64_t v21 = v0[50];
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v16 = v1;
  uint64_t v4 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v5 = v0[40];
  uint64_t v22 = v0[36];
  uint64_t v6 = v0[30];
  uint64_t v15 = v0[29];
  uint64_t v7 = v0[28];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  uint64_t v9 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = v7;
  *((void *)v12 + 3) = v9;
  *((void *)v12 + 4) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v12[v10], v2, v5);
  *(void *)&v12[v11] = v15;
  swift_retain_n();
  sub_1008F5E44(v6, (uint64_t)&unk_10165E758, (uint64_t)v12);
  swift_release();
  swift_release();
  sub_10001CFB8(v17, v18);
  sub_100037A24(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v16, v5);
  v25(v23, v21);
  sub_10001DAB4(v24, &qword_10165E5D0);
  sub_10001DAB4(v22, (uint64_t *)&unk_10163B1D0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100DABAC8()
{
  uint64_t v1 = v0[28];
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  return _swift_task_switch(sub_100DABB44, v1, 0);
}

uint64_t sub_100DABB44()
{
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[60];
  unint64_t v2 = v0[61];
  uint64_t v4 = v0[58];
  unint64_t v3 = v0[59];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[44];
  uint64_t v9 = v0[40];
  uint64_t v8 = v0[41];
  uint64_t v12 = v0[36];
  uint64_t v13 = v0[56];
  uint64_t v15 = v0[26];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v14(v5, v6);
  sub_10001DAB4(v13, &qword_10165E5D0);
  sub_10001DAB4(v12, (uint64_t *)&unk_10163B1D0);
  sub_100D6BBBC(v15, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100DABD48(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100DABE08, 0, 0);
}

uint64_t sub_100DABE08()
{
  uint64_t v8 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100010324(v1, (uint64_t)qword_10165E160);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_1008FA0F0(0xD000000000000019, 0x8000000101417D40, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available... %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_100DABFE8, v5, 0);
}

uint64_t sub_100DABFE8()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100DAC098;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_100DAC098()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_100DAC1CC;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_100DAC244;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DAC1CC()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  return _swift_task_switch(sub_100DBAAD8, 0, 0);
}

uint64_t sub_100DAC244()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_1008FA0F0(0xD000000000000019, 0x8000000101417D40, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100DAC3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a2;
  v4[18] = a3;
  v4[16] = a1;
  uint64_t v5 = type metadata accessor for SymmetricKey256();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for P256PrivateKey();
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  type metadata accessor for Endianness();
  v4[25] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10166BFA0);
  v4[26] = swift_task_alloc();
  sub_10000588C(&qword_10163E578);
  v4[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PeripheralConnectionMaterial(0);
  v4[28] = v7;
  v4[29] = *(void *)(v7 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v4[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[33] = v8;
  v4[34] = *(void *)(v8 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  return _swift_task_switch(sub_100DAC67C, v3, 0);
}

uint64_t sub_100DAC67C()
{
  uint64_t v90 = v0;
  uint64_t v1 = (uint64_t *)(v0[18] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    goto LABEL_9;
  }
  uint64_t v3 = *v1;
  v0[13] = *v1;
  v0[14] = v2;
  sub_1000361E0(v3, v2);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v3, v2);
LABEL_9:
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10165E160);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v89[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      v0[15] = sub_1008FA0F0(0xD00000000000002ELL, 0x8000000101417DB0, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s Invalid parameters!", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v22 = xmmword_101354100;
    *(unsigned char *)(v22 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    goto LABEL_14;
  }
  uint64_t v5 = v0[33];
  uint64_t v4 = v0[34];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[18];
  uint64_t v8 = Data.trimmed.getter();
  unint64_t v10 = v9;
  uint64_t v11 = v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess();
  sub_10001D074(v11, v6, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    uint64_t v12 = v0[32];
    sub_100037A24(v3, v2);
    sub_10001CFB8(v8, v10);
    uint64_t v13 = &qword_101638CF0;
    uint64_t v14 = v12;
LABEL_6:
    sub_10001DAB4(v14, v13);
    goto LABEL_9;
  }
  uint64_t v84 = v3;
  uint64_t v85 = v8;
  unint64_t v86 = v10;
  uint64_t v15 = v0[18];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 32);
  v16(v0[37], v0[32], v0[33]);
  unint64_t v17 = *(void *)(v15 + 112);
  if (v17 >> 60 == 15)
  {
    (*(void (**)(void, void))(v0[34] + 8))(v0[37], v0[33]);
    sub_100037A24(v3, v2);
    sub_10001CFB8(v85, v10);
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)(v15 + 104);
  uint64_t v27 = v0[28];
  uint64_t v26 = v0[29];
  uint64_t v28 = v0[27];
  uint64_t v29 = v0[18] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  swift_beginAccess();
  sub_10001D074(v29, v28, &qword_10163E578);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v27) == 1)
  {
    uint64_t v30 = v0[37];
    uint64_t v32 = v0[33];
    uint64_t v31 = v0[34];
    uint64_t v33 = v25;
    uint64_t v34 = v0[27];
    sub_1000361E0(v33, v17);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    sub_100037A24(v84, v2);
    sub_10001CFB8(v85, v86);
    sub_100037A24(v33, v17);
    uint64_t v13 = &qword_10163E578;
    uint64_t v14 = v34;
    goto LABEL_6;
  }
  uint64_t v35 = v0[18];
  sub_100DB2DE8(v0[27], v0[31], type metadata accessor for PeripheralConnectionMaterial);
  uint64_t v36 = (uint64_t *)(v35 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
  unint64_t v37 = *(void *)(v35 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8);
  if (v37 >> 60 == 15)
  {
    uint64_t v38 = v0;
    sub_1000361E0(v25, v17);
  }
  else
  {
    uint64_t v39 = *v36;
    v0[11] = *v36;
    v0[12] = v37;
    uint64_t v38 = v0;
    sub_100037A38(v25, v17);
    sub_100037A38(v39, v37);
    if ((DataProtocol.isNull.getter() & 1) == 0)
    {
      uint64_t v40 = Data.trimmed.getter();
      unint64_t v81 = v41;
      uint64_t v82 = v40;
      sub_100037A24(v39, v37);
      goto LABEL_25;
    }
    sub_100037A24(v39, v37);
  }
  unint64_t v81 = 0xF000000000000000;
  uint64_t v82 = 0;
LABEL_25:
  uint64_t v42 = v38;
  uint64_t v43 = v38[36];
  uint64_t v44 = v38[33];
  uint64_t v45 = v38[34];
  uint64_t v46 = v38[26];
  uint64_t v47 = v38[18];
  uint64_t v87 = *(void (**)(void))(v45 + 16);
  ((void (*)(uint64_t, void, uint64_t))v87)(v43, v42[17], v44);
  uint64_t v48 = v47 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess();
  sub_10001D074(v48, v46, (uint64_t *)&unk_10166BFA0);
  uint64_t v49 = type metadata accessor for AccessoryProductInfo();
  int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v46, 1, v49);
  uint64_t v51 = v42[26];
  if (v50)
  {
    unint64_t v64 = 0xE000000000000000;
    uint64_t v65 = 0;
  }
  else
  {
    uint64_t v52 = (uint64_t *)(v51 + *(int *)(v49 + 48));
    unint64_t v64 = v52[1];
    uint64_t v65 = *v52;
    swift_bridgeObjectRetain();
  }
  uint64_t v53 = v42[18];
  sub_10001DAB4(v51, (uint64_t *)&unk_10166BFA0);
  uint64_t v70 = v42[18];
  if (*(void *)(v53 + 96))
  {
    unint64_t v62 = *(void *)(v53 + 96);
    uint64_t v63 = *(void *)(v42[18] + 88);
  }
  else
  {
    unint64_t v62 = 0xE000000000000000;
    uint64_t v63 = 0;
  }
  uint64_t v54 = v87;
  uint64_t v69 = v42[37];
  uint64_t v74 = v42[36];
  uint64_t v76 = v42[35];
  uint64_t v73 = v42[34];
  uint64_t v68 = v42[33];
  uint64_t v83 = v42[31];
  uint64_t v66 = v42[30];
  uint64_t v72 = v42[24];
  uint64_t v77 = v42[23];
  uint64_t v78 = v42[22];
  uint64_t v88 = v42[21];
  uint64_t v79 = v42[20];
  uint64_t v80 = v42[19];
  uint64_t v55 = v42[16];
  v54();
  swift_bridgeObjectRetain();
  uint64_t v75 = sub_1002AA484(v25, v17);
  sub_1002AA5D4(v25, v17);
  static Endianness.current.getter();
  sub_100091A80();
  FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v56 = *((int *)v42 + 76);
  if (*((unsigned char *)v42 + 308)) {
    uint64_t v56 = 0;
  }
  uint64_t v67 = v56;
  uint64_t v71 = *(void *)(v70 + 32);
  sub_100DB2E50(v83, v66, type metadata accessor for PeripheralConnectionMaterial);
  static P256PrivateKey.random()();
  static SymmetricKey256.random()();
  sub_100037A24(v25, v17);
  sub_100037A24(v3, v2);
  sub_100D6BBBC(v83, type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v69, v68);
  v16(v55, v74, v68);
  uint64_t v57 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  unint64_t v58 = (void *)(v55 + v57[5]);
  *unint64_t v58 = v65;
  v58[1] = v64;
  unint64_t v59 = (void *)(v55 + v57[6]);
  *unint64_t v59 = v63;
  v59[1] = v62;
  unint64_t v60 = (uint64_t *)(v55 + v57[7]);
  *unint64_t v60 = v85;
  v60[1] = v86;
  uint64_t v61 = (uint64_t *)(v55 + v57[8]);
  *uint64_t v61 = v82;
  v61[1] = v81;
  v16(v55 + v57[9], v76, v68);
  *(void *)(v55 + v57[10]) = v75;
  *(void *)(v55 + v57[11]) = v67;
  *(void *)(v55 + v57[12]) = v71;
  sub_100DB2DE8(v66, v55 + v57[13], type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v55 + v57[14], v72, v78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32))(v55 + v57[15], v88, v80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v42[1];
LABEL_14:
  return v23();
}

uint64_t sub_100DAD050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocalFindableAccessoryRecord();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100DAD144, 0, 0);
}

uint64_t sub_100DAD144()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  sub_10001D074(v0[3], v3, (uint64_t *)&unk_10163B1D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[5], (uint64_t *)&unk_10163B1D0);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = (uint64_t)v4;
    uint64_t v5 = sub_100DB1F50(&qword_10165B8F0, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
    void *v4 = v0;
    v4[1] = sub_100DAD374;
    uint64_t v6 = v0[6];
    uint64_t v7 = v0[4];
    return CloudKitChangeSet.Adaptor.create<A>(record:)(v7, v6, v5);
  }
  else
  {
    uint64_t v8 = v0[4];
    sub_100DB2DE8(v0[5], v0[8], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v9 = swift_task_alloc();
    v0[10] = v9;
    *(void *)(v9 + 16) = v8;
    unint64_t v10 = (void *)swift_task_alloc();
    v0[11] = (uint64_t)v10;
    uint64_t v11 = sub_100DB1F50(&qword_10165B8F0, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
    *unint64_t v10 = v0;
    v10[1] = sub_100DAD4A8;
    uint64_t v12 = v0[8];
    uint64_t v13 = v0[6];
    return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(v12, sub_100DB4AC0, v9, v13, v11);
  }
}

uint64_t sub_100DAD374()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100DAD4A8()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100DAD664;
  }
  else {
    uint64_t v2 = sub_100DAD5D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100DAD5D8()
{
  sub_100D6BBBC(*(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DAD664()
{
  sub_100D6BBBC(*(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100DAD6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100DAD790;
  return sub_100DADAC8(a5);
}

uint64_t sub_100DAD790()
{
  uint64_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_100DAD8C4, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100DAD8C4()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed saveProductInfoRecord: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100DADAC8(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  type metadata accessor for BeaconProductInfoRecord();
  v2[23] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10166BFA0);
  v2[24] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AccessoryProductInfo();
  v2[25] = v4;
  v2[26] = *(void *)(v4 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_100DADC50, v1, 0);
}

uint64_t sub_100DADC50()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(*(void *)(v0 + 152) + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess();
  sub_10001D074(v4, v3, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 192), (uint64_t *)&unk_10166BFA0);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10165E160);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing product info!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v9 = xmmword_10137D8B0;
    *(unsigned char *)(v9 + 16) = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v17 = *(void *)(v0 + 160);
    uint64_t v18 = *(void *)(v0 + 144);
    sub_100DB2DE8(*(void *)(v0 + 192), v12, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_100DB2E50(v12, v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
    sub_1008538C8(v13, v15, v14);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      os_log_type_t v20 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_100DADFFC;
      return v20();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100DADFFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DAE114, v2, 0);
}

uint64_t sub_100DAE114()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[30])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165E770 + dword_10165E770);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[31] = v2;
    void *v2 = v0;
    v2[1] = sub_100DAE2E0;
    uint64_t v3 = v0[23];
    return v9(v3, (uint64_t)sub_100DB23A0, 0);
  }
  else
  {
    uint64_t v5 = v0[28];
    uint64_t v6 = v0[23];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_10137D890;
    *(unsigned char *)(v7 + 16) = 3;
    swift_willThrow();
    sub_100D6BBBC(v6, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    sub_100D6BBBC(v5, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100DAE2E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100DAE40C, v1, 0);
}

uint64_t sub_100DAE40C()
{
  uint64_t v1 = v0[28];
  sub_100D6BBBC(v0[23], (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  sub_100D6BBBC(v1, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100DAE4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for BeaconProductInfoRecord() - 8);
  v4[6] = v5;
  v4[7] = *(void *)(v5 + 64);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_100DAE5AC, v3, 0);
}

uint64_t sub_100DAE5AC()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  v0[9] = *(void *)(v3 + 136);
  sub_100DB2E50(v7, v1, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  v0[10] = v10;
  *(void *)(v10 + 16) = v3;
  sub_100DB2DE8(v1, v10 + v8, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  uint64_t v11 = (void *)(v10 + v9);
  *uint64_t v11 = v6;
  v11[1] = v5;
  swift_retain();
  swift_retain();
  return _swift_task_switch(sub_100DAE6CC, 0, 0);
}

uint64_t sub_100DAE6CC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100DB45B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  void *v4 = v0;
  v4[1] = sub_100DAE7D4;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D74C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100DAE7D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100046204, v1, 0);
}

uint64_t sub_100DAE924(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v31 = a5;
  int v30 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v26 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v27 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  uint64_t v17 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = v18 + v11;
  unint64_t v20 = (*(unsigned __int8 *)(v7 + 80) + v18 + v11 + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = v29;
  *((void *)v21 + 2) = v29;
  *((void *)v21 + 3) = v17;
  *((void *)v21 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v18], v12, v25);
  v21[v19] = v30;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v21[v20], v27, v26);
  *(void *)&v21[(v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
  swift_retain_n();
  sub_1008F5E44((uint64_t)v15, (uint64_t)&unk_10165E5A0, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100DAEC48(uint64_t a1)
{
  return sub_100DAE924(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100DAEC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 40) = a8;
  *(unsigned char *)(v8 + 136) = a6;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  type metadata accessor for UUID();
  *(void *)(v8 + 48) = swift_task_alloc();
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016565A0);
  *(void *)(v8 + 56) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 64) = v11;
  *(void *)(v8 + 72) = *(void *)(v11 + 64);
  *(void *)(v8 + 80) = swift_task_alloc();
  *(void *)(v8 + 88) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_10163D210);
  *(void *)(v8 + 96) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 112) = *(void *)(v13 + 64);
  *(void *)(v8 + 120) = swift_task_alloc();
  *(void *)(v8 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_100DAEDE4, a4, 0);
}

uint64_t sub_100DAEDE4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v31 = v1;
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v17 = v4;
  uint64_t v32 = v3;
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v28 = *(void *)(v0 + 72);
  uint64_t v27 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v26 = *(void *)(v0 + 40);
  uint64_t v20 = v6;
  char v22 = *(unsigned char *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v30 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v21(v1, v7, v4);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v19(v3, v6, v27);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v30;
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v18(v11 + v9, v31, v17);
  *(unsigned char *)(v11 + v9 + v29) = v22;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v23(v11 + ((v10 + v9 + v29 + 1) & ~v10), v32, v27);
  v21(v24, v7, v17);
  v19(v25, v20, v27);
  uint64_t v12 = (v8 + 16) & ~v8;
  uint64_t v13 = (v29 + v10 + v12) & ~v10;
  uint64_t v14 = swift_allocObject();
  v18(v14 + v12, v24, v17);
  v23(v14 + v13, v25, v27);
  *(void *)(v14 + ((v28 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v26;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100DAF124(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_100DAF1D4;
  return sub_100D994E8(a2, a3);
}

uint64_t sub_100DAF1D4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100DAF308, 0, 0);
  }
}

uint64_t sub_100DAF308()
{
  uint64_t v1 = *(void *)(v0 + 32);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    CheckedContinuation.resume(returning:)();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100DAF3A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 128) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100DAF47C, 0, 0);
}

uint64_t sub_100DAF47C()
{
  uint64_t v43 = v0;
  if (*(unsigned char *)(v0 + 128))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    swift_errorRetain();
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10165E160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    sub_10033093C(v20, 1);
    swift_errorRetain();
    char v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 72);
    if (v24)
    {
      uint64_t v40 = v15;
      uint64_t v29 = swift_slowAlloc();
      unint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446722;
      *(void *)(v0 + 32) = sub_1008FA0F0(0xD000000000000039, 0x8000000101417B50, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2082;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v30, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      *(_WORD *)(v29 + 22) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v41 = v32;
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v29, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v40;
      if ((static Task<>.isCancelled.getter() & 1) == 0)
      {
LABEL_10:
        *(void *)(v0 + 16) = v15;
        sub_10000588C((uint64_t *)&unk_1016565A0);
        CheckedContinuation.resume(throwing:)();
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_100173E88(v28, 1);
      sub_100173E88(v28, 1);

      if ((static Task<>.isCancelled.getter() & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 72);
    if (v35)
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)unint64_t v37 = 136446210;
      *(void *)(v0 + 24) = sub_1008FA0F0(0xD000000000000039, 0x8000000101417B50, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Not resuming continuation in cancelled task.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(v36, 1);
    }
    else
    {
      sub_100173E88(*(void *)(v0 + 72), 1);
    }
    goto LABEL_16;
  }
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 56) = sub_1008FA0F0(0xD000000000000039, 0x8000000101417B50, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v13, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100DAFB8C(uint64_t a1, uint64_t a2)
{
  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocalFindableAccessoryRecord();
  v3[34] = v4;
  v3[35] = *(void *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  return _swift_task_switch(sub_100DAFC90, v2, 0);
}

uint64_t sub_100DAFC90()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100DAFDE0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DAFDE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100DAFEF8, v2, 0);
}

uint64_t sub_100DAFEF8()
{
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (!v0[39])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10165E160);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No CloudStorageService available!", v15, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_101354100;
    *(unsigned char *)(v16 + 16) = 3;
    swift_willThrow();
    goto LABEL_13;
  }
  uint64_t v2 = v0[30];
  unint64_t v3 = v0[31];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v0[25] = v2;
  v0[26] = v3;
  sub_1000361E0(v2, v3);
  sub_1000362FC();
  char v4 = DataProtocol.isNull.getter();
  uint64_t v6 = v0[30];
  unint64_t v5 = v0[31];
  if (v4)
  {
    sub_10001CFB8(v0[30], v0[31]);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10165E160);
    BOOL v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalid serial number.", v10, 2u);
      swift_slowDealloc();
    }

    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v11 = xmmword_101354100;
    *(unsigned char *)(v11 + 16) = 3;
    swift_willThrow();
    swift_release();
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  v0[40] = Data.trimmed.getter();
  v0[41] = v19;
  sub_10001CFB8(v6, v5);
  uint64_t v20 = v0[39];
  return _swift_task_switch(sub_100DB0218, v20, 0);
}

uint64_t sub_100DB0218()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[42] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100DB02B4;
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  return sub_100C12E34(v3, v2);
}

uint64_t sub_100DB02B4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 344) = a1;
  *(void *)(v4 + 352) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 256);
  if (v1) {
    uint64_t v6 = sub_100DB085C;
  }
  else {
    uint64_t v6 = sub_100DB03E8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100DB03E8()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[43];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[35] + 80);
    sub_100DB2E50(v1 + ((v2 + 32) & ~v2), v0[33], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[33];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(v0[33], (uint64_t *)&unk_10163B1D0);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v7 = v0[30];
    unint64_t v8 = v0[31];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10165E160);
    sub_1000361E0(v7, v8);
    sub_1000361E0(v7, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[30];
    unint64_t v13 = v0[31];
    if (v12)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[27] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      uint64_t v16 = Data.description.getter();
      v0[28] = sub_1008FA0F0(v16, v17, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v14, v13);
      sub_10001CFB8(v14, v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing record for %{private,mask.hash}s!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[30], v0[31]);
      sub_10001CFB8(v14, v13);
    }

    uint64_t v24 = v0[40];
    unint64_t v23 = v0[41];
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v25 = xmmword_10135D7D0;
    *(unsigned char *)(v25 + 16) = 3;
    swift_willThrow();
    sub_10001CFB8(v24, v23);
    swift_release();
    goto LABEL_13;
  }
  uint64_t v18 = v0[44];
  uint64_t v20 = v0[36];
  uint64_t v19 = v0[37];
  sub_100DB2DE8(v0[33], v19, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_100DB2E50(v19, v20, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_1004AE130(v20, v0 + 2);
  if (v18)
  {
    uint64_t v22 = v0[40];
    unint64_t v21 = v0[41];
    sub_100D6BBBC(v0[37], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    swift_release();
    sub_10001CFB8(v22, v21);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  uint64_t v28 = (void *)swift_task_alloc();
  v0[45] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_100DB08F4;
  return sub_10049F590((uint64_t)(v0 + 2));
}

uint64_t sub_100DB085C()
{
  uint64_t v1 = v0[40];
  unint64_t v2 = v0[41];
  swift_release();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DB08F4()
{
  uint64_t v2 = *v1 + 16;
  uint64_t v3 = (void *)*v1;
  v3[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v3[32];
    sub_100DB2864(v2);
    uint64_t v5 = sub_100DB0C60;
    uint64_t v6 = v4;
  }
  else
  {
    sub_100DB2864(v2);
    uint64_t v7 = (void *)swift_task_alloc();
    v3[47] = v7;
    *uint64_t v7 = v3;
    v7[1] = sub_100DB0A7C;
    uint64_t v6 = v3[32];
    v7[15] = v3[37];
    v7[16] = v6;
    uint64_t v5 = sub_100DB113C;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100DB0A7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_100DB0D18;
  }
  else {
    uint64_t v4 = sub_100DB0BA8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DB0BA8()
{
  uint64_t v1 = v0[40];
  unint64_t v2 = v0[41];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100D6BBBC(v0[37], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DB0C60()
{
  uint64_t v1 = v0[40];
  unint64_t v2 = v0[41];
  uint64_t v3 = v0[37];
  swift_release();
  sub_10001CFB8(v1, v2);
  sub_100D6BBBC(v3, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100DB0D18()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v6 = v0[40];
  unint64_t v5 = v0[41];
  if (v4)
  {
    unint64_t v12 = v0[41];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[29] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to unregister device: %{public}@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v6, v12);
  }
  else
  {
    swift_release();
    sub_10001CFB8(v6, v5);

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100D6BBBC(v0[37], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100DB0F8C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v6 = sub_100DB1F50(&qword_10165B8F0, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  void *v4 = v2;
  v4[1] = sub_10001D2E4;
  return CloudKitChangeSet.Adaptor.delete<A>(record:)(a2, v5, v6);
}

uint64_t sub_100DB1080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100033F68;
  return sub_100D8F3D0(a3);
}

uint64_t sub_100DB111C(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(sub_100DB113C, v1, 0);
}

uint64_t sub_100DB113C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  uint64_t v3 = v1[15];
  id v26 = [self sharedInstance];
  v1[17] = v26;
  id v4 = objc_allocWithZone((Class)FMDLocalFindableAccessory);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v4 initWithIdentifier:isa name:v6 connected:0];
  v1[18] = v7;

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setSerialNumber:v8];

  uint64_t v9 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v10 = (uint64_t *)(v3 + v9[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    v1[10] = *v10;
    v1[11] = v11;
    sub_1000361E0(v12, v11);
    sub_100DB28D0();
    RawRepresentable<>.hexString.getter();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 setAlternateSerialNumber:v13];

    sub_100037A24(v12, v11);
  }
  uint64_t v14 = v1[15];
  type metadata accessor for PeripheralConnectionMaterial(0);
  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  [v7 setIrkData:v15];

  MACAddress.bluetoothAddress.getter();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setBtAddress:v16];

  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = *(void *)(v14 + v9[10]);
  *(void *)(v17 + 56) = &type metadata for Int;
  *(void *)(v17 + 64) = &protocol witness table for Int;
  *(void *)(v17 + 32) = v18;
  String.init(format:_:)();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setVendorId:v19];

  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  uint64_t v21 = *(void *)(v14 + v9[11]);
  *(void *)(v20 + 56) = &type metadata for Int;
  *(void *)(v20 + 64) = &protocol witness table for Int;
  *(void *)(v20 + 32) = v21;
  String.init(format:_:)();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setProductId:v22];

  Class v23 = UUID._bridgeToObjectiveC()().super.isa;
  [v7 setBaUUID:v23];

  v1[2] = v1;
  v1[3] = sub_100DB154C;
  uint64_t v24 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100DB174C;
  v1[13] = &unk_1015F2A78;
  v1[14] = v24;
  [v26 didRemoveLocalFindableAccessory:v7 completion:v2];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100DB154C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    id v4 = sub_100DB16D4;
  }
  else {
    id v4 = sub_100DB166C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100DB166C()
{
  uint64_t v1 = *(void **)(v0 + 136);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100DB16D4()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100DB1750(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100DB17E8()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + v4 + 1) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100DB1960(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  char v13 = *((unsigned char *)v1 + v7);
  uint64_t v14 = (uint64_t)v1 + v6;
  uint64_t v15 = (uint64_t)v1 + v9;
  uint64_t v16 = *(void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  void *v17 = v3;
  v17[1] = sub_100033F68;
  return sub_100DAEC58(a1, v10, v11, v12, v14, v13, v15, v16);
}

uint64_t sub_100DB1B0C()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + v4 + 1) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100DB1C70()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8) + 80);
  uint64_t v6 = v4 + v5 + 1;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  char v9 = *(unsigned char *)(v0 + v4);
  uint64_t v10 = v0 + (v6 & ~v5);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100DAF124(v7, v8, v9, v10);
}

uint64_t sub_100DB1DC0()
{
  return sub_100DBA014((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100DB1DCC(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100DAF3A0(a1, v5, v2 + v7, v10);
}

uint64_t sub_100DB1F50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100DB1F98(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100DB0F8C(a1, v4);
}

uint64_t sub_100DB2034()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100DB2104(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100DB1080(a1, v5, v6);
}

uint64_t sub_100DB21F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100DB2290;
  return sub_100DB6444(a2, a3);
}

uint64_t sub_100DB2290(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

void sub_100DB23A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = sub_10000588C(&qword_1016592D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v10, &qword_1016592D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10165E160);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to save BeaconProductInfoRecord %{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100DB2DE8((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10165E160);
    sub_100DB2E50((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      type metadata accessor for UUID();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v23 = sub_1008FA0F0(v21, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D6BBBC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully saved BeaconProductInfoRecord %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100D6BBBC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
    sub_100D6BBBC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
}

uint64_t sub_100DB2864(uint64_t a1)
{
  return a1;
}

unint64_t sub_100DB28D0()
{
  unint64_t result = qword_10165E618;
  if (!qword_10165E618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165E618);
  }
  return result;
}

uint64_t sub_100DB2924(uint64_t a1)
{
  return sub_100D6C33C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100DB2930()
{
  return sub_100DB9700(&qword_10163D210, (uint64_t *)&unk_1016565A0);
}

uint64_t sub_100DB2944()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v6;
  uint64_t v10 = *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100D6C78C(v7, v8, v9, v10);
}

uint64_t sub_100DB2AB8()
{
  return sub_100DBA014((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100DB2AC4(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  uint64_t v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100D7E29C(a1, v5, v2 + v7, v10);
}

uint64_t sub_100DB2C48()
{
  return sub_100DB9700(&qword_10163D210, (uint64_t *)&unk_1016565A0);
}

uint64_t sub_100DB2C5C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100033F68;
  return sub_100D6CD08(a1, v10, v1 + v6, v11);
}

uint64_t sub_100DB2DE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DB2E50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DB2EB8(uint64_t a1, void (*a2)(void))
{
  return a1;
}

void sub_100DB2F1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, void (*a19)(void))
{
  switch((a18 >> 59) & 6 | ((a16 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 2uLL:
      a19();
      ((void (*)(uint64_t, unint64_t))a19)(a3, a4);
      uint64_t v23 = a5;
      unint64_t v24 = a6;
      goto LABEL_5;
    case 1uLL:
      a19();
      ((void (*)(uint64_t, unint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, unint64_t))a19)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a19)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a19)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a19)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a19)(a13, a14);
      ((void (*)(uint64_t, unint64_t))a19)(a15, a16 & 0xDFFFFFFFFFFFFFFFLL);
      uint64_t v23 = a17;
      unint64_t v24 = a18 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3uLL:
      a19();
      uint64_t v23 = a3;
      unint64_t v24 = a4;
LABEL_5:
      ((void (*)(uint64_t, unint64_t))a19)(v23, v24);
      break;
    default:
      return;
  }
}

unint64_t sub_100DB311C()
{
  unint64_t result = qword_10165E690;
  if (!qword_10165E690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165E690);
  }
  return result;
}

uint64_t sub_100DB3170(uint64_t a1)
{
  return a1;
}

void sub_100DB31CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if ((~(a2 & a4 & a6 & a8 & a10 & a12 & a14 & a16 & a18) & 0x3000000000000000) != 0) {
    sub_100DB2F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (void (*)(void))sub_10001CFB8);
  }
}

uint64_t sub_100DB3274(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100DA62D4(a1, v5, v4);
}

unint64_t sub_100DB3320()
{
  unint64_t result = qword_10165E6A8;
  if (!qword_10165E6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165E6A8);
  }
  return result;
}

uint64_t sub_100DB3374()
{
  sub_100DB2F1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), (void (*)(void))sub_10001CFB8);

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t sub_100DB33F0(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100DA3944(a1, v5, v4);
}

uint64_t sub_100DB349C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100DB34E4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v4;
  void *v4 = v2;
  v4[1] = sub_100DA3ACC;
  return sub_100DA3F5C();
}

uint64_t sub_100DB35D0(uint64_t a1)
{
  sub_100DB3644(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232));
  return a1;
}

void sub_100DB3644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_100037A24(a21, a22);
    sub_10001CFB8(a23, a24);
    sub_10001CFB8(a25, a26);
    swift_bridgeObjectRelease();
    sub_100037A24(a29, a30);
  }
}

uint64_t *sub_100DB37B8(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  return a1;
}

uint64_t sub_100DB38C4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 128);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100DB38DC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38)
{
  if (a17)
  {
    sub_100037A38(result, a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(a9, a10);
    sub_1000361E0(a11, a12);
    sub_1000361E0(a13, a14);
    swift_bridgeObjectRetain();
    sub_1000361E0(a19, a20);
    sub_1000361E0(a21, a22);
    sub_1000361E0(a23, a24);
    sub_1000361E0(a25, a26);
    sub_1000361E0(a27, a28);
    sub_100037A38(a29, a30);
    sub_1000361E0(a31, a32);
    sub_1000361E0(a33, a34);
    swift_bridgeObjectRetain();
    return sub_100037A38(a37, a38);
  }
  return result;
}

uint64_t sub_100DB3A98(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 288),
    *(void *)(a1 + 296));
  return a1;
}

uint64_t sub_100DB3B24(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38)
{
  if (a17)
  {
    sub_100037A24(result, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    swift_bridgeObjectRelease();
    sub_10001CFB8(a19, a20);
    sub_10001CFB8(a21, a22);
    sub_10001CFB8(a23, a24);
    sub_10001CFB8(a25, a26);
    sub_10001CFB8(a27, a28);
    sub_100037A24(a29, a30);
    sub_10001CFB8(a31, a32);
    sub_10001CFB8(a33, a34);
    swift_bridgeObjectRelease();
    return sub_100037A24(a37, a38);
  }
  return result;
}

uint64_t sub_100DB3CE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100DB3D18(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_10001D2E4;
  return sub_100D98E10(a1, v4);
}

uint64_t sub_100DB3DC4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  unint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 88);
  __int16 v4 = *(_WORD *)(a1 + 110);
  unint64_t v5 = *(void *)(a1 + 120);
  int v6 = (8
      * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v1 >> 54) & 0xC0 | (v2 >> 52) & 0x300 | (v3 >> 50) & 0xC00 | v4 & 0x3000 | (v5 >> 46) & 0x4000)) | (((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v1 >> 54) & 0xC0 | (v2 >> 52) & 0x300 | (v3 >> 50) & 0xC00 | v4 & 0x3000 | (v5 >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000) >> 15);
  unsigned int v7 = v6 ^ 0x3FFFF;
  unsigned int v8 = 0x40000 - v6;
  if (v7 >= 0x3FFFB) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_100DB3E6C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100DABD48(a1, v4);
}

uint64_t sub_100DB3F18(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *int v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100DAD050(a1, v5, v4);
}

uint64_t sub_100DB3FC0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100DB40A0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  v5[3] = v3;
  unint64_t v6 = (void *)swift_task_alloc();
  v5[4] = v6;
  *unint64_t v6 = v5;
  v6[1] = sub_100DAD790;
  return sub_100DADAC8(v4);
}

uint64_t sub_100DB41C4()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconProductInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v19 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[12];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v1[13];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + v1[16];
  uint64_t v12 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(v12 + 40);
    if (!v9(v13, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
    }
    uint64_t v14 = v11 + *(int *)(v12 + 44);
    if (!v9(v14, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 24) & ~v2;
  }
  unint64_t v15 = (v18 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v4 + v1[19], v7);
  v16(v4 + v1[20], v7);
  v16(v4 + v1[21], v7);
  v16(v4 + v1[22], v7);
  v16(v4 + v1[23], v7);
  v16(v4 + v1[24], v7);
  swift_release();

  return _swift_deallocObject(v19, v15 + 16, v2 | 7);
}

uint64_t sub_100DB45B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconProductInfoRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100D33898(v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
}

uint64_t sub_100DB464C()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconProductInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v19 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[12];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v1[13];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + v1[16];
  uint64_t v12 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(v12 + 40);
    if (!v9(v13, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
    }
    uint64_t v14 = v11 + *(int *)(v12 + 44);
    if (!v9(v14, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
  }
  uint64_t v15 = v2 | 7;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v4 + v1[19], v7);
  v16(v4 + v1[20], v7);
  v16(v4 + v1[21], v7);
  v16(v4 + v1[22], v7);
  v16(v4 + v1[23], v7);
  v16(v4 + v1[24], v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v19, ((((v18 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v15);
}

uint64_t sub_100DB4A44()
{
  return sub_100DB5674((uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord, &qword_1016592D0, (uint64_t)sub_100DB4AA4, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
}

uint64_t sub_100DB4A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100DB4A9C()
{
  return swift_release();
}

void sub_100DB4AA4()
{
  sub_100D42190(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100DB4AC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_100D6BBBC(a1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  return sub_100DB2E50(v3, a1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
}

uint64_t *sub_100DB4B1C(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_100DB4B8C(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2)
  {
    if (v2 != 2) {
      return result;
    }
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_10001CFB8(result, a2);
}

uint64_t sub_100DB4BAC(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100DA0D2C(a1, v5, v4);
}

unint64_t sub_100DB4C58()
{
  unint64_t result = qword_10165E7B8;
  if (!qword_10165E7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165E7B8);
  }
  return result;
}

uint64_t sub_100DB4CB0(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100DA0D2C(a1, v5, v4);
}

unint64_t sub_100DB4D5C()
{
  unint64_t result = qword_10165E7D0;
  if (!qword_10165E7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165E7D0);
  }
  return result;
}

uint64_t sub_100DB4DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v45 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v43 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v44 = (v45 + 16) & ~v45;
  uint64_t v3 = v0 + v44;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  uint64_t v7 = v3 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = v3 + v2[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v2[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v46(v10, v11);
  uint64_t v13 = v3 + v2[11];
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v42(v13, 1, v11)) {
    v46(v13, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v3 + v2[14];
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v6(v14, v4);
    sub_10001CFB8(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v2[15];
  uint64_t v17 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48))(v16, 1, v17))
  {
    uint64_t v40 = v11;
    uint64_t v41 = v1;
    uint64_t v18 = v16 + v17[5];
    uint64_t v19 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v16 + v17[16];
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(void))(v22 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    uint64_t v24 = v16 + v17[17];
    uint64_t v39 = v23;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v24, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v16 + v17[20];
    uint64_t v26 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v25 + *(int *)(v26 + 40);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v37, v21);
      }
      uint64_t v38 = v25 + *(int *)(v26 + 44);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v38, v21);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t *)(v16 + v17[23]);
    unint64_t v28 = v27[1];
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    uint64_t v29 = (uint64_t *)(v16 + v17[24]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v31(v16 + v17[25], v21);
    v31(v16 + v17[26], v21);
    v31(v16 + v17[27], v21);
    v31(v16 + v17[28], v21);
    v31(v16 + v17[29], v21);
    v31(v16 + v17[30], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31(v16 + v17[37], v21);
    v31(v16 + v17[38], v21);
    v31(v16 + v17[39], v21);
    v31(v16 + v17[40], v21);
    v31(v16 + v17[41], v21);
    v31(v16 + v17[42], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v40;
    uint64_t v1 = v41;
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v3 + v2[18];
  if (!v42(v32, 1, v11)) {
    v46(v32, v11);
  }
  uint64_t v33 = v3 + v2[19];
  if (!v42(v33, 1, v11)) {
    v46(v33, v11);
  }
  os_log_type_t v34 = (uint64_t *)(v3 + v2[20]);
  unint64_t v35 = v34[1];
  if (((v35 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v34, v35);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, ((((v43 + v44 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v45 | 7);
}

uint64_t sub_100DB562C()
{
  return sub_100DB5674(type metadata accessor for WildModeAssociationRecord, &qword_101660A90, (uint64_t)sub_1007AF964, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_100DB5674(uint64_t (*a1)(void), uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = *(void *)(a1(0) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100D35B9C(v4 + v9, *(void *)(v4 + v10), *(void (**)(char *))(v4 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), a2, a3, a4);
}

uint64_t sub_100DB5734()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationProvider() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100DB58BC()
{
  return sub_100DB5674((uint64_t (*)(void))type metadata accessor for LocationProvider, &qword_10165E848, (uint64_t)sub_100DB5904, (uint64_t (*)(void))type metadata accessor for LocationProvider);
}

void sub_100DB5904()
{
  sub_100D48F48(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100DB5920()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_100D6AA08, 0, 0);
}

uint64_t sub_100DB59C4(uint64_t *a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10012E0C8;
  return sub_100D6AD74(a1, v1);
}

uint64_t sub_100DB5A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100DB5AC0()
{
  uint64_t v1 = (int *)(type metadata accessor for LocalFindablePreferences() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v14 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v0 + v3, v4);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_10001CFB8(*v9, v10);
  }
  uint64_t v11 = (v3 + v14 + v6) & ~v6;
  unint64_t v12 = ((v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8(v0 + v11, v4);

  return _swift_deallocObject(v0, v12, v2 | v6 | 7);
}

uint64_t sub_100DB5C58(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for LocalFindablePreferences() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v9;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_100033F68;
  return sub_100D66FB8(a1, v10, v11, v12, (uint64_t)v1 + v6, v13);
}

uint64_t sub_100DB5DF0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100DB5EE0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((v5 + *(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100033F68;
  return sub_100D65E40(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_100DB6028(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100D5AD3C(a1, v4, v5);
}

uint64_t sub_100DB60DC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100033F68;
  return sub_100D60F6C(a1, v1);
}

uint64_t sub_100DB617C()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_100D9C4F8(v3, v4);
}

uint64_t sub_100DB628C()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100DB632C(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_100DA0690(a1, v5, v7);
}

uint64_t sub_100DB6444(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100DB6574, 0, 0);
}

uint64_t sub_100DB6574()
{
  unint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  sub_10000588C(&qword_10165E658);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v8;
  v0[13] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v7, v4, v2);
  sub_1000B7034(0, 1, 0);
  v8(v1, v7, v2);
  Identifier.id.getter();
  uint64_t v9 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  v0[14] = v9;
  v0[15] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v1, v2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000B7034(0, _swiftEmptyArrayStorage[2] + 1, 1);
  }
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  unint64_t v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1) {
    sub_1000B7034(v10 > 1, v11 + 1, 1);
  }
  v0[16] = _swiftEmptyArrayStorage;
  uint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v14 = v0[9];
  _swiftEmptyArrayStorage[2] = v11 + 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v11, v12, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v15 = type metadata accessor for CentralManager();
  uint64_t v16 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[17] = v17;
  void *v17 = v0;
  v17[1] = sub_100DB681C;
  return dispatch thunk of CentralManagerProtocol.retrievePeripherals(identifiers:)(_swiftEmptyArrayStorage, v15, v16);
}

uint64_t sub_100DB681C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100DB6CBC;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100DB6938;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100DB6938()
{
  uint64_t v23 = v0;
  unint64_t v1 = v0[18];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v2 = *(void *)(v0[18] + 32);
      swift_retain();
LABEL_6:
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
      return v3(v2);
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  if (qword_1016370D8 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[12];
  uint64_t v7 = v0[7];
  uint64_t v9 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10165E160);
  v6(v7, v9, v8);
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[5];
  if (v13)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v14(v15, v16);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing peripheral for %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v14(v0[7], v0[5]);
  }

  sub_1004AF24C();
  swift_allocError();
  *(_OWORD *)uint64_t v20 = xmmword_10137D8A0;
  *(unsigned char *)(v20 + 16) = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100DB6CBC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100DB6D44()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10001D608((uint64_t)v7, (uint64_t)v8, (uint64_t *)&unk_101644360);
  if (!v8[3])
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101644360);
    return sub_1009304E8((uint64_t)_swiftEmptyArrayStorage);
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_1009304E8((uint64_t)_swiftEmptyArrayStorage);
  }
  sub_1000361E0(v5, v6);
  type metadata accessor for UUID();
  type metadata accessor for Date();
  sub_100DB1F50((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_100DB1F50((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v3 = Dictionary<>.init(dataRepresentation:)();
  sub_10001CFB8(v5, v6);
  return v3;
}

unint64_t sub_100DB7160()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10001D608((uint64_t)v7, (uint64_t)v8, (uint64_t *)&unk_101644360);
  if (!v8[3])
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101644360);
    return sub_100930760((uint64_t)_swiftEmptyArrayStorage);
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_100930760((uint64_t)_swiftEmptyArrayStorage);
  }
  sub_1000361E0(v5, v6);
  type metadata accessor for UUID();
  sub_100DB1F50((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v3 = Dictionary<>.init(dataRepresentation:)();
  sub_10001CFB8(v5, v6);
  return v3;
}

void sub_100DB751C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  unint64_t v8 = sub_100DB7160();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16[1] = v8;
  sub_10016FACC(a1, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v10 = [self standardUserDefaults];
  sub_100DB1F50((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v11 = Dictionary<>.dataRepresentation.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v11, v13);
  NSString v15 = String._bridgeToObjectiveC()();
  [v10 setObject:isa forKey:v15];
}

void sub_100DB7784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  unint64_t v27 = sub_100DB6D44();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
    sub_10016488C((uint64_t)v17, (uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    unint64_t v18 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v26 = v18;
    sub_10016E75C((uint64_t)v7, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  id v20 = [self standardUserDefaults];
  sub_100DB1F50((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_100DB1F50(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_100DB1F50((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v21 = Dictionary<>.dataRepresentation.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v21, v23);
  NSString v25 = String._bridgeToObjectiveC()();
  [v20 setObject:isa forKey:v25];
}

uint64_t sub_100DB7C18()
{
  NSString v1 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v24 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v4 + v1[7];
  uint64_t v9 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v7(v8 + *(int *)(v9 + 28), v6);
  }
  unint64_t v23 = v7;
  uint64_t v10 = v4 + v1[8];
  uint64_t v11 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v10, v12);
    uint64_t v14 = v10 + *(int *)(v11 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12)) {
      v21(v14, v12);
    }
  }
  uint64_t v15 = v2 | 7;
  uint64_t v16 = v4 + v1[9];
  uint64_t v17 = type metadata accessor for UUID();
  unint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = type metadata accessor for BeaconIdentifier();
  v18(v16 + *(int *)(v19 + 20), v17);
  v23(v4 + v1[10], v6);

  return _swift_deallocObject(v24, v3 + v22, v15);
}

uint64_t sub_100DB7F18()
{
  uint64_t v2 = *(void *)(type metadata accessor for DeviceEvent(0) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_100D53FB8(v3, v4);
}

uint64_t sub_100DB7FEC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4B9BC();
}

uint64_t sub_100DB8088()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4BA4C();
}

uint64_t sub_100DB8124()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4BADC();
}

uint64_t sub_100DB81C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4CDF4();
}

uint64_t sub_100DB825C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D4E8F8();
}

uint64_t sub_100DB82F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100DB8330()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100DB83FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100D8F028(a1, v5, v6);
}

uint64_t sub_100DB84E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100D91084(a1, v4, v5, v6);
}

uint64_t sub_100DB85A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100D4AF7C(a1, v4, v5, v6);
}

uint64_t sub_100DB865C()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocationsCachedSharingKey(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*v8, v9);
  }
  sub_10001CFB8(v8[2], v8[3]);
  unint64_t v10 = v8[5];
  if (v10 >> 60 != 15) {
    sub_10001CFB8(v8[4], v10);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100DB87F0()
{
  return sub_100DB5674(type metadata accessor for SecureLocationsCachedSharingKey, &qword_10165A778, (uint64_t)sub_100DB8838, type metadata accessor for SecureLocationsCachedSharingKey);
}

void sub_100DB8838()
{
  sub_100D482DC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100DB8854()
{
  uint64_t v1 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v3 + v1[6]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10001CFB8(*v7, v8);
  }
  unint64_t v9 = (uint64_t *)(v5 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_10001CFB8(*v9, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[11];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100DB8A58()
{
  return sub_100DB5674(type metadata accessor for SecureLocationsCachedSharedKey, &qword_10164A388, (uint64_t)sub_10060F3F4, type metadata accessor for SecureLocationsCachedSharedKey);
}

uint64_t sub_100DB8AA0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 248, 7);
}

uint64_t sub_100DB8B00()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void (**)(unsigned char *))(v0 + 232);
  long long v3 = *(_OWORD *)(v0 + 192);
  v10[10] = *(_OWORD *)(v0 + 176);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(v0 + 208);
  long long v4 = *(_OWORD *)(v0 + 128);
  v10[6] = *(_OWORD *)(v0 + 112);
  v10[7] = v4;
  long long v5 = *(_OWORD *)(v0 + 160);
  v10[8] = *(_OWORD *)(v0 + 144);
  v10[9] = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  v10[2] = *(_OWORD *)(v0 + 48);
  v10[3] = v6;
  long long v7 = *(_OWORD *)(v0 + 96);
  v10[4] = *(_OWORD *)(v0 + 80);
  v10[5] = v7;
  long long v8 = *(_OWORD *)(v0 + 32);
  v10[0] = *(_OWORD *)(v0 + 16);
  v10[1] = v8;
  return sub_100D35898(v10, v1, v2);
}

__n128 sub_100DB8B64()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(long long **)(v0 + 24);
  long long v3 = v2[11];
  v10[10] = v2[10];
  v10[11] = v3;
  v10[12] = v2[12];
  long long v4 = v2[7];
  v10[6] = v2[6];
  v10[7] = v4;
  long long v5 = v2[9];
  v10[8] = v2[8];
  v10[9] = v5;
  long long v6 = v2[3];
  v10[2] = v2[2];
  v10[3] = v6;
  long long v7 = v2[5];
  v10[4] = v2[4];
  v10[5] = v7;
  long long v8 = v2[1];
  v10[0] = *v2;
  v10[1] = v8;
  sub_100D46A64(v1, v10);
  return result;
}

uint64_t sub_100DB8BC4(uint64_t result)
{
  *(unsigned char *)(result + 208) = 1;
  return result;
}

uint64_t sub_100DB8BD0(uint64_t result)
{
  *(unsigned char *)(result + 208) = 0;
  return result;
}

unint64_t sub_100DB8BD8()
{
  unint64_t result = qword_10165EA08;
  if (!qword_10165EA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EA08);
  }
  return result;
}

uint64_t sub_100DB8C2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 224, 7);
}

void sub_100DB8C7C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v3 = *(_OWORD *)(v2 + 48);
  v5[2] = *(_OWORD *)(v2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(v2 + 64);
  uint64_t v6 = *(void *)(v2 + 80);
  long long v4 = *(_OWORD *)(v2 + 16);
  v5[0] = *(_OWORD *)v2;
  v5[1] = v4;
  sub_100D45E1C(v1, (uint64_t)v5);
}

uint64_t sub_100DB8CC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100DB8D1C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100DB8D74()
{
  unint64_t result = qword_10165EA10;
  if (!qword_10165EA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EA10);
  }
  return result;
}

unint64_t sub_100DB8DC8()
{
  unint64_t result = qword_10165EA18;
  if (!qword_10165EA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165EA18);
  }
  return result;
}

uint64_t sub_100DB8E1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100DB8E6C(uint64_t a1)
{
  return sub_100D8BDC4(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, char *, uint64_t))&unk_1015F3058, (uint64_t)&unk_1015F3080, (uint64_t)&unk_10165EA38, (uint64_t)&unk_10165EA48);
}

uint64_t sub_100DB8EC4()
{
  return sub_100DB9700(&qword_10165EA28, &qword_10163D210);
}

uint64_t sub_100DB8ED8()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v6;
  uint64_t v10 = *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100D8C1E4(v7, v8, v9, v10);
}

uint64_t sub_100DB904C()
{
  return sub_100DBA014(&qword_10165EA28);
}

uint64_t sub_100DB9058(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  uint64_t v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100D8E83C(a1, v5, v2 + v7, v10);
}

uint64_t sub_100DB91DC()
{
  return sub_100DB9700(&qword_10165EA28, &qword_10163D210);
}

uint64_t sub_100DB91F0(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100033F68;
  return sub_100D8C6FC(a1, v10, v1 + v6, v11);
}

uint64_t sub_100DB937C(uint64_t a1)
{
  return sub_100D8BDC4(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, char *, uint64_t))&unk_1015F30D0, (uint64_t)&unk_1015F30F8, (uint64_t)&unk_10165EA70, (uint64_t)&unk_10165EA80);
}

uint64_t sub_100DB93D4()
{
  return sub_100DB9700(&qword_10165EA28, &qword_10163D210);
}

uint64_t sub_100DB93E8()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v6;
  uint64_t v10 = *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100D84A44(v7, v8, v9, v10);
}

uint64_t sub_100DB955C()
{
  return sub_100DBA014(&qword_10165EA28);
}

uint64_t sub_100DB9568(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  uint64_t v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100D8AFE0(a1, v5, v2 + v7, v10);
}

uint64_t sub_100DB96EC()
{
  return sub_100DB9700(&qword_10165EA28, &qword_10163D210);
}

uint64_t sub_100DB9700(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000588C(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = sub_10000588C(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v13 = v6 | v11 | 7;
  unint64_t v14 = ((*(void *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2 + v12, v9);

  return _swift_deallocObject(v2, v14, v13);
}

uint64_t sub_100DB9864(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10165EA28) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100033F68;
  return sub_100D84E74(a1, v10, v1 + v6, v11);
}

uint64_t sub_100DB99F0(uint64_t a1)
{
  return sub_100D7EC1C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100DB99FC()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = sub_10000588C(&qword_101660970);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100DB9B70(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_101660970) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = *(void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  void *v16 = v3;
  v16[1] = sub_10001D2E4;
  return sub_100D7EF2C(a1, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_100DB9D10()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = sub_10000588C(&qword_101660970);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100DB9E88()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_101660970) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = v0 + v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100D7F648(v0 + v3, v7, v8);
}

uint64_t sub_100DBA008()
{
  return sub_100DBA014(&qword_101660970);
}

uint64_t sub_100DBA014(uint64_t *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = sub_10000588C(a1);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + v10) & ~v10;
  uint64_t v12 = v5 | v10 | 7;
  unint64_t v13 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);

  return _swift_deallocObject(v1, v13, v12);
}

uint64_t sub_100DBA178(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_10000588C(&qword_101660970) - 8);
  uint64_t v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100D83CCC(a1, v5, v2 + v7, v10);
}

uint64_t sub_100DBA300(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_101214DF8(a1, v4, v5, v6);
}

uint64_t sub_100DBA3B8()
{
  uint64_t v1 = sub_10000588C(&qword_10163D210);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100DBA494(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_10163D210) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100033F68;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165EAE8 + dword_10165EAE8);
  return v8(a1, v5, v6);
}

uint64_t sub_100DBA5C4()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocationsCachedPayload() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for SecureLocation() + 52);
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100DBA744()
{
  return sub_100DB5674((uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload, &qword_10164A378, (uint64_t)sub_100DBA78C, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
}

void sub_100DBA78C()
{
  sub_100D45200(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100DBA7A8()
{
  uint64_t v1 = (int *)(type metadata accessor for PairingErrorRecord(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100DBA914()
{
  return sub_100DB5674(type metadata accessor for PairingErrorRecord, &qword_10163D8E0, (uint64_t)sub_100DBA95C, type metadata accessor for PairingErrorRecord);
}

void sub_100DBA95C()
{
  sub_100D42DAC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100DBA97C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRetain();
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PencilPairingService.Error(uint64_t a1)
{
  return sub_100DBA9AC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100DBA9AC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRelease();
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s12searchpartyd20PencilPairingServiceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100DBA97C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PencilPairingService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100DBA97C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100DBA9AC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PencilPairingService.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100DBA9AC(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PencilPairingService.Error()
{
  return &type metadata for PencilPairingService.Error;
}

void sub_100DBAB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = v6 - 8;
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v23 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = dispatch_group_create();
  dispatch_group_enter(v10);
  sub_10000588C(&qword_10163BC50);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))(v14 + v13, a1 + *(int *)(v7 + 28), v11);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v10;
  uint64_t v16 = v10;
  sub_100A07010(v14, (uint64_t)sub_100DBE248, v15);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  sub_100DBD610(a1, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  unint64_t v18 = (v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DBD92C((uint64_t)v9, v19 + v17, type metadata accessor for SharedBeaconRecord);
  id v20 = (void *)(v19 + v18);
  uint64_t v21 = v25;
  *id v20 = v24;
  v20[1] = v21;
  *(void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = v4;
  swift_retain();
  swift_retain();
  sub_100390488(a1, (void (*)(void))sub_100DBD994, v19);
  swift_release();
}

uint64_t sub_100DBADC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v27 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v17 = v29;
  swift_getKeyPath();
  sub_1010AD23C(v17, (uint64_t)v16);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v1 + *(int *)(v18 + 20), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  uint64_t v19 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1003C5E38((uint64_t)v16, (uint64_t)v7);
  sub_1003C5E38((uint64_t)v14, v19);
  id v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v20((uint64_t)v7, 1, v2) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    int v21 = v20(v19, 1, v2);
    if (v21 == 1) {
      uint64_t v22 = &qword_101638CF0;
    }
    else {
      uint64_t v22 = (uint64_t *)&unk_10166EAF0;
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }
  else
  {
    sub_1003C5E38((uint64_t)v7, (uint64_t)v11);
    if (v20(v19, 1, v2) == 1)
    {
      sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      char v23 = 0;
      uint64_t v22 = (uint64_t *)&unk_10166EAF0;
    }
    else
    {
      uint64_t v24 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v28, v19, v2);
      sub_100DBDE04((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v24, v2);
      uint64_t v22 = &qword_101638CF0;
      sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
      v25(v11, v2);
    }
  }
  sub_10001DAB4((uint64_t)v7, v22);
  return v23 & 1;
}

uint64_t sub_100DBB224(uint64_t a1, int a2, int a3)
{
  int v72 = a2;
  int v73 = a3;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  unint64_t v64 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v69 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v70 = v7;
  uint64_t v71 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v63 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = v3;
  uint64_t v19 = *(void **)(v3 + 64);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.notOnQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    uint64_t v77 = a1;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    uint64_t v76 = (uint64_t *)(v21 + 16);
    uint64_t v22 = dispatch_group_create();
    dispatch_group_enter(v22);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    uint64_t v66 = v23;
    uint64_t v24 = v22;
    uint64_t v68 = v21;
    swift_retain_n();
    uint64_t v67 = v24;
    static os_log_type_t.default.getter();
    if (qword_101637260 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v25 = swift_allocObject();
  long long v65 = xmmword_101342130;
  *(_OWORD *)(v25 + 16) = xmmword_101342130;
  uint64_t v26 = v77 + *(int *)(v75 + 20);
  uint64_t v27 = type metadata accessor for UUID();
  sub_100DBDE04((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v75 = v26;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v30 = v29;
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_10000B4CC();
  *(void *)(v25 + 32) = v28;
  *(void *)(v25 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_100DBDE04((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v31 = v79;
  uint64_t v32 = v78;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
  v33(v12, v8);
  v33(v14, v8);
  os_log_type_t v34 = v67;
  if (v31 == v32)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    uint64_t v35 = swift_allocError();
    *uint64_t v36 = 0;
    uint64_t v37 = v76;
    swift_beginAccess();
    *uint64_t v37 = v35;
    swift_errorRetain();
    swift_errorRelease();
    dispatch_group_leave(v34);
    swift_errorRelease();
  }
  uint64_t v38 = dispatch_group_create();
  dispatch_group_enter(v38);
  sub_10000588C(&qword_10163BC50);
  uint64_t v39 = *(void *)(v27 - 8);
  unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v65;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 16))(v41 + v40, v75, v27);
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v38;
  uint64_t v43 = v38;
  uint64_t v44 = v74;
  sub_100A07010(v41, (uint64_t)sub_1003B44B8, v42);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v45 = v77;
  uint64_t v46 = v71;
  sub_100DBD610(v77, v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v47 = (*(unsigned __int8 *)(v69 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  unint64_t v48 = (v70 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  sub_100DBD92C(v46, v49 + v47, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  int v50 = (void (**)(uint64_t))(v49 + v48);
  uint64_t v51 = (void (*)(uint64_t))v66;
  *int v50 = sub_100DBDDFC;
  v50[1] = v51;
  unint64_t v52 = v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v52 = v44;
  *(unsigned char *)(v52 + 8) = v72 & 1;
  *(unsigned char *)(v52 + 9) = v73 & 1;
  swift_retain();
  swift_retain();
  sub_10038F420(v45, (void (*)(void))sub_1003B769C, v49);
  uint64_t v53 = v68;
  swift_release();

  swift_release();
  swift_release();

  OS_dispatch_group.wait()();
  swift_beginAccess();
  if (*(void *)(v53 + 16)
    || (uint64_t v54 = sub_100D1B318(), v55 >> 60 == 15)
    || (v56 = v54, unint64_t v57 = v55, v58 = sub_100DC86D8(v54, v55), sub_100037A24(v56, v57), !v58))
  {
  }
  else
  {
    uint64_t v59 = type metadata accessor for Date();
    uint64_t v60 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v64, 1, 1, v59);
    sub_10041311C(v75, v60);

    sub_10001DAB4(v60, (uint64_t *)&unk_10163AC90);
  }
  uint64_t v61 = *(void *)(v53 + 16);
  swift_errorRetain();
  swift_release();
  return v61;
}

void sub_100DBBA88(uint64_t a1, NSObject *a2, uint64_t a3)
{
  *(void *)(a3 + 16) = a1;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(a2);
}

void sub_100DBBAF4(int a1, int a2, dispatch_group_t group)
{
}

uint64_t sub_100DBBAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v40 = a6;
  int v41 = a7;
  uint64_t v42 = a5;
  uint64_t v46 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v45 = a3;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v24 = sub_10000B4CC();
    *(void *)(v20 + 64) = v24;
    *(void *)(v20 + 32) = v21;
    *(void *)(v20 + 40) = v23;
    aBlock[0] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v24;
    *(void *)(v20 + 72) = v25;
    *(void *)(v20 + 80) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    ((void (*)(uint64_t))v45)(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v38 = v10;
    uint64_t v28 = v42;
    uint64_t v39 = *(void *)(v42 + 64);
    sub_100DBD610(a2, (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v30 = v29 + v18;
    unint64_t v31 = (v29 + v18 + 9) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v28;
    sub_100DBD92C((uint64_t)v19, v32 + v29, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v33 = (unsigned char *)(v32 + v30);
    *uint64_t v33 = v40 & 1;
    v33[1] = v41 & 1;
    os_log_type_t v34 = (void *)(v32 + v31);
    *os_log_type_t v34 = a3;
    v34[1] = v46;
    aBlock[4] = sub_100DBCBA8;
    aBlock[5] = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015F3358;
    uint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v47 = _swiftEmptyArrayStorage;
    sub_100DBDE04((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    uint64_t v36 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v36);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
    return swift_release();
  }
}

uint64_t sub_100DBBFEC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  LODWORD(v45) = a4;
  LODWORD(v44) = a3;
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  int v50 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v42 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v43 = (char *)&v42 - v13;
  uint64_t v53 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v61 = v21;
  uint64_t v62 = sub_100DBDE04(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v22 = sub_10001D958(aBlock);
  uint64_t v46 = a2;
  sub_100DBD610(a2, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = v61;
  uint64_t v24 = v62;
  sub_10001CD44(aBlock, (uint64_t)v61);
  (*(void (**)(void *))(*(void *)(*(void *)(v24 + 8) + 8) + 32))(v23);
  type metadata accessor for Transaction();
  uint64_t v54 = v20;
  uint64_t v55 = a1;
  uint64_t v47 = a1;
  uint64_t v56 = aBlock;
  char v57 = v44;
  char v58 = v45;
  static Transaction.named<A>(_:with:)();
  uint64_t v44 = v18;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v45 = v17;
  v25(v20, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_10170E330;
  uint64_t v27 = v46 + v21[5];
  uint64_t v28 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v28);
  *(&v42 - 4) = v26;
  *(&v42 - 3) = v27;
  *(&v42 - 2) = (uint64_t)sub_1000054FC;
  *(&v42 - 1) = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  unint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v30 = v53;
  v29(v16, v53);
  if (sub_100DBADC8())
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_101342130;
    uint64_t v32 = UUID.uuidString.getter();
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_10000B4CC();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v35 = (uint64_t)v43;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v43, 1, 1, v45);
    sub_1000A5940();
    uint64_t v36 = v42;
    sub_1003C5E38(v35, v42);
    sub_100F175B0(v36);
    swift_release();
    sub_10001DAB4(v35, &qword_101638CF0);
    uint64_t v30 = v53;
  }
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(4);
  static Transaction.named<A>(_:with:)();
  sub_100AACCCC();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  static Transaction.asyncTask(name:block:)();
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v49;
  *(void *)(v37 + 16) = v48;
  *(void *)(v37 + 24) = v38;
  uint64_t v62 = (uint64_t)sub_1003C6214;
  uint64_t v63 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  uint64_t v61 = &unk_1015F33A8;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  int v40 = v50;
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_100DBDE04((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v39);
  v29(v16, v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
  return swift_release();
}

uint64_t sub_100DBC80C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 9) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100DBCBA8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  int v6 = *(unsigned __int8 *)(v0 + v3);
  int v7 = *(unsigned __int8 *)(v0 + v3 + 1);
  uint64_t v8 = (uint64_t *)(v0 + ((v3 + 9) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return sub_100DBBFEC(v4, v5, v6, v7, v9, v10);
}

uint64_t sub_100DBCC48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100DBCC58()
{
  return swift_release();
}

uint64_t sub_100DBCC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a5;
  uint64_t v37 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v36 = a3;
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101347BA0;
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v22 = sub_10000B4CC();
    *(void *)(v18 + 64) = v22;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    aBlock[0] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v22;
    *(void *)(v18 + 72) = v23;
    *(void *)(v18 + 80) = v24;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    ((void (*)(uint64_t))v36)(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v26 = v33;
    v32[1] = *(void *)(v33 + 64);
    sub_100DBD610(a2, (uint64_t)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    unint64_t v27 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    unint64_t v28 = (v16 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v26;
    sub_100DBD92C((uint64_t)v17, v29 + v27, type metadata accessor for SharedBeaconRecord);
    uint64_t v30 = (void *)(v29 + v28);
    *uint64_t v30 = a3;
    v30[1] = v37;
    aBlock[4] = sub_100DBDCF0;
    aBlock[5] = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    uint64_t aBlock[3] = &unk_1015F3448;
    uint64_t v31 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_100DBDE04((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    return swift_release();
  }
}

uint64_t sub_100DBD120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  int v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (void *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v36 = sub_100DBDE04(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v15 = sub_10001D958(aBlock);
  sub_100DBD610(a2, (uint64_t)v15, type metadata accessor for SharedBeaconRecord);
  uint64_t v17 = v35;
  uint64_t v16 = v36;
  sub_10001CD44(aBlock, (uint64_t)v35);
  (*(void (**)(void *))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
  type metadata accessor for Transaction();
  uint64_t v29 = v14;
  uint64_t v30 = a1;
  uint64_t v31 = aBlock;
  __int16 v32 = 257;
  static Transaction.named<A>(_:with:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(4);
  static Transaction.named<A>(_:with:)();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v24;
  *(void *)(v18 + 16) = v23;
  *(void *)(v18 + 24) = v19;
  uint64_t v36 = (uint64_t)sub_10041ED88;
  uint64_t v37 = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  uint64_t v35 = &unk_1015F3498;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100DBDE04((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  uint64_t v21 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  return swift_release();
}

uint64_t sub_100DBD5D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100DBD610(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DBD678()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = (v2 + 16) & ~v2;
  sub_10001CFB8(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v3 = v0 + v16 + v1[5];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v0 + v16 + v1[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v16 + v1[18];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v16 + v1[19];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v0 + v16 + v1[20];
  uint64_t v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4)) {
      v6(v13, v4);
    }
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100DBD92C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100DBD994(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);

  return sub_100DBCC60(a1, v1 + v4, v7, v8, v6);
}

uint64_t sub_100DBDA40()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100DBDCF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  return sub_100DBD120(v3, v4, v6, v7);
}

uint64_t sub_100DBDD84()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100DBDDBC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100DBDDFC(uint64_t a1)
{
  sub_100DBBA88(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100DBDE04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100DBDE4C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100DBDE84()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v2 | 7);
}

uint64_t *sub_100DBE24C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    unint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100DBE398(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100DBE460(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[9];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100DBE55C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100DBE688(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_100DBE75C(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DBE85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DBE870);
}

uint64_t sub_100DBE870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100DBE938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DBE94C);
}

uint64_t sub_100DBE94C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for BeaconNamingRecord()
{
  uint64_t result = qword_10165EB78;
  if (!qword_10165EB78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100DBEA5C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100DBEB18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v64 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v52 - v7;
  uint64_t v67 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v67 - 8);
  uint64_t v10 = __chkstk_darwin(v67);
  uint64_t v63 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v66 = (char *)&v52 - v12;
  uint64_t v62 = type metadata accessor for BeaconNamingRecord();
  uint64_t v13 = (uint64_t *)((char *)a2 + *(int *)(v62 + 36));
  *uint64_t v13 = 0;
  v13[1] = 0;
  if (CKRecord.recordType.getter() == 0xD000000000000012 && v14 == 0x800000010137DB50)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      sub_100DC0644();
      swift_allocError();
      *__int16 v32 = 0;
      swift_willThrow();

      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v60 = a2;
  long long v65 = v13;
  id v16 = [a1 recordID];
  id v17 = [v16 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v19 = v67;
  if (v18(v8, 1, v67) == 1)
  {
    sub_100270E18((uint64_t)v8);
    sub_100DC0644();
    swift_allocError();
    *uint64_t v20 = 1;
    swift_willThrow();

    return swift_bridgeObjectRelease();
  }
  char v58 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v59 = v9 + 32;
  v58(v66, v8, v19);
  id v21 = [a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  NSString v22 = String._bridgeToObjectiveC()();
  id v61 = v21;
  id v23 = [v21 objectForKeyedSubscript:v22];

  if (!v23 || (uint64_t v70 = (uint64_t)v23, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
LABEL_17:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_101342130;
    *(void *)(v33 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v33 + 64) = sub_1000A038C();
    *(void *)(v33 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v34 = a1;
    uint64_t v35 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100DC0644();
    swift_allocError();
    *uint64_t v36 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v66, v19);
    return swift_bridgeObjectRelease();
  }
  uint64_t v55 = v68;
  uint64_t v24 = v69;
  NSString v25 = String._bridgeToObjectiveC()();
  uint64_t v26 = (char *)[v61 objectForKeyedSubscript:v25];

  if (!v26
    || (uint64_t v56 = v24, v68 = v26, (swift_dynamicCast() & 1) == 0)
    || (uint64_t v54 = v70,
        NSString v27 = String._bridgeToObjectiveC()(),
        id v28 = [v61 objectForKeyedSubscript:v27],
        v27,
        !v28)
    || (uint64_t v70 = (uint64_t)v28, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v67;
    goto LABEL_17;
  }
  uint64_t v30 = v68;
  uint64_t v29 = v69;
  uint64_t v31 = (uint64_t)v64;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = v67;
  if (v18((char *)v31, 1, v67) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100270E18(v31);
    goto LABEL_17;
  }
  uint64_t v38 = v58;
  v58(v63, (char *)v31, v19);
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v64 = v68;
  uint64_t ObjectType = v69;
  id v39 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  uint64_t v56 = v29;
  int v40 = v39;
  [a1 encodeSystemFieldsWithCoder:v39];
  [v40 finishEncoding];
  id v41 = [v40 encodedData];
  uint64_t v53 = v30;
  id v42 = v41;
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  swift_unknownObjectRelease();

  uint64_t v46 = v60;
  *uint64_t v60 = v43;
  v46[1] = v45;
  uint64_t v47 = (int *)v62;
  v38((char *)v46 + *(int *)(v62 + 20), v66, v19);
  v38((char *)v46 + v47[6], v63, v19);
  *(uint64_t *)((char *)v46 + v47[7]) = v54;
  uint64_t v48 = (uint64_t *)((char *)v46 + v47[8]);
  uint64_t v49 = v56;
  *uint64_t v48 = v53;
  v48[1] = v49;
  int v50 = v65;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v51 = ObjectType;
  *int v50 = v64;
  v50[1] = v51;
  return result;
}

void sub_100DBF2A0()
{
  if (qword_1016370E8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170ED10);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  sub_100DC05A4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v5 = sub_10000B4CC();
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  uint64_t v6 = UUID.uuidString.getter();
  *(void *)(v1 + 96) = &type metadata for String;
  *(void *)(v1 + 104) = v5;
  *(void *)(v1 + 72) = v6;
  *(void *)(v1 + 80) = v7;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v8 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_100DBF454()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170ED10);
  sub_100010324(v0, (uint64_t)qword_10170ED10);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100DBF570()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = type metadata accessor for BeaconNamingRecord();
  type metadata accessor for UUID();
  sub_100DC05A4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(uint64_t *)((char *)v1 + *(int *)(v4 + 28)));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(uint64_t *)((char *)v1 + *(int *)(v4 + 36) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t sub_100DBF6FC(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x6449656C6F72;
      break;
    case 4:
      unint64_t result = 1701667182;
      break;
    case 5:
      unint64_t result = 0x696A6F6D65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100DBF7BC()
{
  return sub_100DBF6FC(*v0);
}

uint64_t sub_100DBF7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100DC0C1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100DBF7EC(uint64_t a1)
{
  unint64_t v2 = sub_100DC0698();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DBF828(uint64_t a1)
{
  unint64_t v2 = sub_100DC0698();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100DBF864()
{
  return Hasher._finalize()();
}

Swift::Int sub_100DBF8A8()
{
  return Hasher._finalize()();
}

uint64_t sub_100DBF8E8()
{
  return sub_100DC05A4((unint64_t *)&unk_10165EBC0, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100DBF930(id *a1)
{
  uint64_t v2 = v1;
  [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v3 = (int *)type metadata accessor for BeaconNamingRecord();
  uint64_t v4 = UUID.uuidString.getter();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (v17 == v4 && v18 == v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_9:
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v18 = v8;
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter();
  if ((v18 & 1) != 0 || v17 != *(void *)(v1 + v3[7]))
  {
    uint64_t v17 = *(void *)(v1 + v3[7]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v9 = (uint64_t *)(v1 + v3[8]);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (!v18) {
    goto LABEL_19;
  }
  if (v17 == v11 && v18 == v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_19:
    uint64_t v17 = v11;
    uint64_t v18 = v10;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_20:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = (void *)(v2 + v3[9]);
  uint64_t v14 = v13[1];
  if (!v18)
  {
    if (!v14) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_29;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if (v17 == *v13 && v18 == v14)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    goto LABEL_29;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100DBFCA0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10165EBF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100DC0698();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for BeaconNamingRecord();
    LOBYTE(v10) = 1;
    type metadata accessor for UUID();
    sub_100DC05A4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100DBFF40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = sub_10000588C(&qword_10165EBE8);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v35 = a1;
  uint64_t v36 = v14;
  sub_10001CD44(a1, a1[3]);
  sub_100DC0698();
  char v15 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = (int *)v10;
    char v39 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)uint64_t v13 = v38;
    LOBYTE(v38) = 1;
    sub_100DC05A4((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v16 = v8;
    uint64_t v17 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = &v13[v37[5]];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v29(v18, v16, v17);
    LOBYTE(v38) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29(&v13[v37[6]], v6, v17);
    LOBYTE(v38) = 3;
    *(void *)&v13[v37[7]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v38) = 4;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = (uint64_t *)&v13[v37[8]];
    *uint64_t v20 = v19;
    v20[1] = v21;
    LOBYTE(v38) = 5;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v23 = v36;
    uint64_t v24 = v22;
    uint64_t v26 = v25;
    (*(void (**)(void, uint64_t))(v33 + 8))(0, v34);
    swift_bridgeObjectRelease();
    *id v23 = v24;
    v23[1] = v26;
    sub_100DC06EC((uint64_t)v13, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
    return sub_100DC0750((uint64_t)v13);
  }
}

void sub_100DC048C()
{
  sub_100DBF2A0();
}

uint64_t sub_100DC04F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100DBFF40(a1, a2);
}

uint64_t sub_100DC0508(void *a1)
{
  return sub_100DBFCA0(a1);
}

uint64_t sub_100DC0520(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DC05A4(&qword_101660BE0, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
  uint64_t result = sub_100DC05A4(&qword_10165EBD0, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100DC05A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100DC05EC(uint64_t a1)
{
  uint64_t result = sub_100DC05A4(&qword_10165E808, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100DC0644()
{
  unint64_t result = qword_10165EBD8;
  if (!qword_10165EBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EBD8);
  }
  return result;
}

unint64_t sub_100DC0698()
{
  unint64_t result = qword_10165EBF0;
  if (!qword_10165EBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EBF0);
  }
  return result;
}

uint64_t sub_100DC06EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconNamingRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100DC0750(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100DC07AC(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = (int *)type metadata accessor for BeaconNamingRecord();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (static UUID.== infix(_:_:)() & 1) == 0
    || *(void *)(a1 + v4[7]) != *(void *)(a2 + v4[7]))
  {
    return 0;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[9];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    char v15 = (void *)(a2 + v12);
    uint64_t v16 = v15[1];
    if (v14)
    {
      if (v16)
      {
        BOOL v17 = *v13 == *v15 && v14 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BeaconNamingRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DC0980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.CodingKeys()
{
  return &type metadata for BeaconNamingRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BeaconNamingRecord.BeaconNamingRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DC0A84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.BeaconNamingRecordConversionError()
{
  return &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError;
}

unint64_t sub_100DC0AC0()
{
  unint64_t result = qword_10165EC08;
  if (!qword_10165EC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC08);
  }
  return result;
}

unint64_t sub_100DC0B18()
{
  unint64_t result = qword_10165EC10;
  if (!qword_10165EC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC10);
  }
  return result;
}

unint64_t sub_100DC0B70()
{
  unint64_t result = qword_10165EC18;
  if (!qword_10165EC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC18);
  }
  return result;
}

unint64_t sub_100DC0BC8()
{
  unint64_t result = qword_10165EC20;
  if (!qword_10165EC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC20);
  }
  return result;
}

uint64_t sub_100DC0C1C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EF430 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449656C6F72 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

ValueMetadata *type metadata accessor for AccessoryLatchSeparatedKeyResponsePayload()
{
  return &type metadata for AccessoryLatchSeparatedKeyResponsePayload;
}

uint64_t sub_100DC0E90@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v10, v11);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    *a2 = v8;
    a2[1] = v9;
  }
  return result;
}

unint64_t sub_100DC0F54(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DC0F84();
  unint64_t result = sub_1002A5868();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100DC0F84()
{
  unint64_t result = qword_10165EC30;
  if (!qword_10165EC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC30);
  }
  return result;
}

ValueMetadata *type metadata accessor for iCloudIdentifierResponsePayload()
{
  return &type metadata for iCloudIdentifierResponsePayload;
}

uint64_t sub_100DC0FE8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100DC1098(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_100DC1014(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DC1044();
  unint64_t result = sub_1005FD0F8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100DC1044()
{
  unint64_t result = qword_10165EC38;
  if (!qword_10165EC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC38);
  }
  return result;
}

uint64_t sub_100DC1098(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v11, v12);
  uint64_t v3 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v5 = v3;
  if (v1) {
    goto LABEL_8;
  }
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100DC11A8);
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      if (v6 != 60) {
        goto LABEL_11;
      }
LABEL_8:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v5;
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v6 = BYTE6(v4);
      goto LABEL_7;
  }
}

unint64_t sub_100DC11B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v44 = v5;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  BOOL v9 = (int *)type metadata accessor for LostModeAlertInfo();
  char v10 = (uint64_t *)(v1 + v9[5]);
  uint64_t v11 = v10[1];
  if (v11)
  {
    uint64_t v12 = *v10;
    uint64_t v43 = &type metadata for String;
    *(void *)&long long v42 = v12;
    *((void *)&v42 + 1) = v11;
    sub_100173E4C(&v42, v41);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v40 = v5;
    unint64_t v44 = 0x8000000000000000;
    sub_10016C700(v41, v6, v8, isUniquelyReferenced_nonNull_native);
    unint64_t v44 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100163B04(v6, v8, &v42);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v42, (uint64_t *)&unk_101644360);
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  uint64_t v18 = (uint64_t *)(v1 + v9[6]);
  uint64_t v19 = v18[1];
  if (v19)
  {
    uint64_t v20 = *v18;
    uint64_t v43 = &type metadata for String;
    *(void *)&long long v42 = v20;
    *((void *)&v42 + 1) = v19;
    sub_100173E4C(&v42, v41);
    swift_bridgeObjectRetain();
    unint64_t v21 = v44;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v40 = v21;
    unint64_t v44 = 0x8000000000000000;
    sub_10016C700(v41, v16, v17, v22);
    unint64_t v44 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100163B04(v14, v15, &v42);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v42, (uint64_t *)&unk_101644360);
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  sub_100020260(v1, (uint64_t)v4);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v26) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101649E40);
    sub_100163B04(v23, v25, &v42);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v42, (uint64_t *)&unk_101644360);
  }
  else
  {
    uint64_t v28 = URL.absoluteString.getter();
    uint64_t v43 = &type metadata for String;
    *(void *)&long long v42 = v28;
    *((void *)&v42 + 1) = v29;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v26);
    sub_100173E4C(&v42, v41);
    unint64_t v30 = v44;
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v40 = v30;
    unint64_t v44 = 0x8000000000000000;
    sub_10016C700(v41, v23, v25, v31);
    unint64_t v44 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v1 + v9[7]) == 1)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = &type metadata for String;
    *(void *)&long long v42 = v35;
    *((void *)&v42 + 1) = v36;
    sub_100173E4C(&v42, v41);
    unint64_t v37 = v44;
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v40 = v37;
    unint64_t v44 = 0x8000000000000000;
    sub_10016C700(v41, v32, v34, v38);
    unint64_t v44 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v44;
}

uint64_t sub_100DC15D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = (int *)sub_10000588C(&qword_1016518A8);
    uint64_t v8 = (char *)a1 + v7[12];
    BOOL v9 = (uint64_t *)((char *)a1 + v7[16]);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = (uint64_t *)((char *)a1 + v7[20]);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0);
    uint64_t v16 = a2 + v15[7];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16, v8, v17);
    *(_OWORD *)a2 = xmmword_101347BB0;
    *(_OWORD *)(a2 + 16) = xmmword_101347BB0;
  }
  else
  {
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[2];
    uint64_t v27 = a1[5];
    uint64_t v28 = a1[4];
    uint64_t v19 = (int *)sub_10000588C(&qword_1016518D0);
    uint64_t v20 = (char *)a1 + v19[20];
    unint64_t v21 = (uint64_t *)((char *)a1 + v19[24]);
    uint64_t v10 = *v21;
    uint64_t v11 = v21[1];
    char v22 = (uint64_t *)((char *)a1 + v19[28]);
    uint64_t v13 = *v22;
    uint64_t v14 = v22[1];
    uint64_t v15 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0);
    uint64_t v23 = a2 + v15[7];
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23, v20, v24);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    uint64_t v6 = v27;
    uint64_t v5 = v28;
    *(void *)(a2 + 16) = v30;
    *(void *)(a2 + 24) = v29;
  }
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  uint64_t v25 = (void *)(a2 + v15[8]);
  *uint64_t v25 = v10;
  v25[1] = v11;
  uint64_t v26 = (void *)(a2 + v15[9]);
  *uint64_t v26 = v13;
  v26[1] = v14;
  return result;
}

uint64_t sub_100DC1790(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_10165EDC8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100DC4154();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_10000588C(&qword_10163BD60);
  sub_100904FC8((unint64_t *)&qword_101651F28);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100DC195C(uint64_t a1)
{
  unint64_t v2 = sub_100DC4154();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DC1998(uint64_t a1)
{
  unint64_t v2 = sub_100DC4154();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100DC19D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100DC3EF8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100DC1A04(void *a1)
{
  return sub_100DC1790(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100DC1A24(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165EDD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100DC41A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v12 = v3[2];
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for AirPodsLostModeContent.Device(0);
    LOBYTE(v12) = 3;
    type metadata accessor for UUID();
    sub_100DC41FC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100DC1CD4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165ED90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100DC3E00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 72);
    v10[15] = 5;
    sub_10000588C(&qword_10165EDA0);
    sub_100DC3E54();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100DC1EF8()
{
  uint64_t result = 1684628325;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x644970696863;
      break;
    case 2:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      uint64_t result = 0x6449616E6D66;
      break;
    case 4:
      uint64_t result = 0x49746375646F7270;
      break;
    case 5:
      uint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100DC1FBC(uint64_t a1)
{
  unint64_t v2 = sub_100DC41A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DC1FF8(uint64_t a1)
{
  unint64_t v2 = sub_100DC41A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100DC2034(void *a1)
{
  return sub_100DC1A24(a1);
}

uint64_t sub_100DC204C()
{
  uint64_t result = 0x656C746974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6567617373656DLL;
      break;
    case 2:
      uint64_t result = 0x6C69616D65;
      break;
    case 3:
      uint64_t result = 0x6D754E72656E776FLL;
      break;
    case 4:
      uint64_t result = 0x65646F4D74736F6CLL;
      break;
    case 5:
      uint64_t result = 0x73656369766564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100DC211C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100DC4778(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100DC2144(uint64_t a1)
{
  unint64_t v2 = sub_100DC3E00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DC2180(uint64_t a1)
{
  unint64_t v2 = sub_100DC3E00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100DC21BC(void *a1)
{
  return sub_100DC1CD4(a1);
}

void sub_100DC21D4(long long *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v35 = v6;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v35;
  swift_bridgeObjectRelease();
  id v9 = [self currentDevice];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = [v9 serverFriendlyDescription];

    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      char v15 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v35 = v8;
      sub_10016C0FC(v12, v14, 0xD000000000000011, 0x80000001013F64E0, v15);
      uint64_t v16 = v35;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v17 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *(void *)&long long v35 = v17;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v20 = v19;
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v35 = v16;
      sub_10016C0FC(v18, v20, 0xD000000000000015, 0x80000001013F6500, v21);
      uint64_t v22 = v35;
      swift_bridgeObjectRelease();
      *(void *)&long long v35 = 1;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v25 = v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v35 = v22;
      sub_10016C0FC(v23, v25, 0xD000000000000013, 0x80000001013F6520, v26);
      uint64_t v27 = v35;
      swift_bridgeObjectRelease();
      id v28 = sub_100903ACC();
      uint64_t v30 = v29;
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v35 = v27;
      sub_10016C0FC((uint64_t)v28, v30, 0x6567412D72657355, 0xEA0000000000746ELL, v31);
      swift_bridgeObjectRelease();
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      long long v32 = a1[3];
      long long v37 = a1[2];
      long long v38 = v32;
      long long v39 = a1[4];
      long long v33 = a1[1];
      long long v35 = *a1;
      long long v36 = v33;
      sub_100DC263C();
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      sub_100DC2690((uint64_t)a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_100DC263C()
{
  unint64_t result = qword_10165EC40;
  if (!qword_10165EC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EC40);
  }
  return result;
}

uint64_t sub_100DC2690(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AirPodsLostModeContent.LostModeContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165ED58);
}

uint64_t type metadata accessor for AirPodsLostModeContent.Device(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165ECA0);
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest()
{
  return &type metadata for AirPodsLostModeRequest;
}

uint64_t getEnumTagSinglePayload for AirPodsLostModeContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLostModeContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent()
{
  return &type metadata for AirPodsLostModeContent;
}

_OWORD *sub_100DC27F8(_OWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }
    uint64_t v10 = a2 + 2;
    unint64_t v11 = a2[3];
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v12 = *v10;
      sub_1000361E0(*v10, a2[3]);
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }
    uint64_t v13 = a2[4];
    unint64_t v14 = a2[5];
    sub_1000361E0(v13, v14);
    *((void *)v4 + 4) = v13;
    *((void *)v4 + 5) = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    char v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *char v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)((char *)v4 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100DC2978(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_10001CFB8(a1[2], v5);
  }
  sub_10001CFB8(a1[4], a1[5]);
  unint64_t v6 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100DC2A48(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v11 = a2[4];
  unint64_t v12 = a2[5];
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (uint64_t *)((char *)a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100DC2B78(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *a2;
  sub_1000361E0(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = a2 + 2;
  unint64_t v12 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_1000361E0(*v11, a2[3]);
      uint64_t v15 = a1[2];
      unint64_t v16 = a1[3];
      a1[2] = v14;
      a1[3] = v12;
      sub_10001CFB8(v15, v16);
      goto LABEL_15;
    }
    sub_1001356D0((uint64_t)(a1 + 2));
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v13 = *v11;
  sub_1000361E0(*v11, a2[3]);
  a1[2] = v13;
  a1[3] = v12;
LABEL_15:
  uint64_t v17 = a2[4];
  unint64_t v18 = a2[5];
  sub_1000361E0(v17, v18);
  uint64_t v19 = a1[4];
  unint64_t v20 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  sub_10001CFB8(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[9];
  uint64_t v29 = (uint64_t *)((char *)a1 + v28);
  uint64_t v30 = (uint64_t *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100DC2D60(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t sub_100DC2E08(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v9;
      *(void *)(a1 + 24) = v11;
      sub_10001CFB8(v12, v10);
      goto LABEL_11;
    }
    sub_1001356D0(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[8];
  unint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *unint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DC2F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DC2F78);
}

uint64_t sub_100DC2F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100DC304C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DC3060);
}

uint64_t sub_100DC3060(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 28);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  }
  return result;
}

uint64_t sub_100DC3124()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100DC31D4(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      sub_1000361E0(*a2, v7);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = (int *)sub_10000588C(&qword_1016518A8);
      uint64_t v9 = v8[12];
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      uint64_t v13 = v8[16];
      unint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *unint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v8[20];
      uint64_t v18 = (void *)(a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v22 = a2[1];
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v23 = *a2;
        sub_1000361E0(*a2, a2[1]);
        *(void *)a1 = v23;
        *(void *)(a1 + 8) = v22;
      }
      uint64_t v24 = a2 + 2;
      unint64_t v25 = a2[3];
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
      }
      else
      {
        uint64_t v26 = *v24;
        sub_1000361E0(*v24, a2[3]);
        *(void *)(a1 + 16) = v26;
        *(void *)(a1 + 24) = v25;
      }
      uint64_t v27 = a2[4];
      unint64_t v28 = a2[5];
      sub_1000361E0(v27, v28);
      *(void *)(a1 + 32) = v27;
      *(void *)(a1 + 40) = v28;
      uint64_t v29 = (int *)sub_10000588C(&qword_1016518D0);
      uint64_t v30 = v29[20];
      uint64_t v31 = a1 + v30;
      long long v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
      uint64_t v34 = v29[24];
      long long v35 = (void *)(a1 + v34);
      long long v36 = (uint64_t *)((char *)a2 + v34);
      uint64_t v37 = v36[1];
      *long long v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v29[28];
      long long v39 = (void *)(a1 + v38);
      unint64_t v40 = (uint64_t *)((char *)a2 + v38);
      uint64_t v41 = v40[1];
      *long long v39 = *v40;
      v39[1] = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100DC343C(uint64_t *a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10001CFB8(*a1, a1[1]);
    unint64_t v2 = (char *)a1 + *(int *)(sub_10000588C(&qword_1016518A8) + 48);
    uint64_t v3 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v4 = a1[1];
    if (v4 >> 60 != 15) {
      sub_10001CFB8(*a1, v4);
    }
    unint64_t v5 = a1[3];
    if (v5 >> 60 != 15) {
      sub_10001CFB8(a1[2], v5);
    }
    sub_10001CFB8(a1[4], a1[5]);
    uint64_t v6 = (char *)a1 + *(int *)(sub_10000588C(&qword_1016518D0) + 80);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100DC3598(uint64_t a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    sub_1000361E0(*a2, v5);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = (int *)sub_10000588C(&qword_1016518A8);
    uint64_t v7 = v6[12];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = v6[16];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v6[20];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
  }
  else
  {
    unint64_t v19 = a2[1];
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v20 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v19;
    }
    uint64_t v21 = a2 + 2;
    unint64_t v22 = a2[3];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_1000361E0(*v21, a2[3]);
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v22;
    }
    uint64_t v24 = a2[4];
    unint64_t v25 = a2[5];
    sub_1000361E0(v24, v25);
    *(void *)(a1 + 32) = v24;
    *(void *)(a1 + 40) = v25;
    uint64_t v26 = (int *)sub_10000588C(&qword_1016518D0);
    uint64_t v27 = v26[20];
    uint64_t v28 = a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    uint64_t v31 = v26[24];
    long long v32 = (void *)(a1 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = v33[1];
    *long long v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = v26[28];
    long long v36 = (void *)(a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *long long v36 = *v37;
    v36[1] = v38;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100DC37A0(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_100DC39D8(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *a2;
      unint64_t v5 = a2[1];
      sub_1000361E0(*a2, v5);
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      uint64_t v6 = (int *)sub_10000588C(&qword_1016518A8);
      uint64_t v7 = v6[12];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      uint64_t v11 = v6[16];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      uint64_t v14 = v6[20];
      uint64_t v15 = (void *)(a1 + v14);
      uint64_t v16 = (uint64_t *)((char *)a2 + v14);
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
    }
    else
    {
      unint64_t v17 = a2[1];
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v18 = *a2;
        sub_1000361E0(*a2, a2[1]);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v17;
      }
      unint64_t v19 = a2 + 2;
      unint64_t v20 = a2[3];
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v19;
      }
      else
      {
        uint64_t v21 = *v19;
        sub_1000361E0(*v19, a2[3]);
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v20;
      }
      uint64_t v22 = a2[4];
      unint64_t v23 = a2[5];
      sub_1000361E0(v22, v23);
      *(void *)(a1 + 32) = v22;
      *(void *)(a1 + 40) = v23;
      uint64_t v24 = (int *)sub_10000588C(&qword_1016518D0);
      uint64_t v25 = v24[20];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = v24[24];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      *uint64_t v30 = *v31;
      v30[1] = v31[1];
      uint64_t v32 = v24[28];
      uint64_t v33 = (void *)(a1 + v32);
      uint64_t v34 = (uint64_t *)((char *)a2 + v32);
      *uint64_t v33 = *v34;
      v33[1] = v34[1];
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100DC39D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_100DC3A34(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    unint64_t v5 = (int *)sub_10000588C(&qword_1016518A8);
    uint64_t v6 = v5[12];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    *(_OWORD *)((char *)a1 + v5[16]) = *(_OWORD *)((char *)a2 + v5[16]);
    *(_OWORD *)((char *)a1 + v5[20]) = *(_OWORD *)((char *)a2 + v5[20]);
  }
  else
  {
    long long v10 = a2[2];
    a1[1] = a2[1];
    a1[2] = v10;
    uint64_t v11 = (int *)sub_10000588C(&qword_1016518D0);
    uint64_t v12 = v11[20];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    *(_OWORD *)((char *)a1 + v11[24]) = *(_OWORD *)((char *)a2 + v11[24]);
    *(_OWORD *)((char *)a1 + v11[28]) = *(_OWORD *)((char *)a2 + v11[28]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *sub_100DC3B94(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_100DC39D8((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      unint64_t v5 = (int *)sub_10000588C(&qword_1016518A8);
      uint64_t v6 = v5[12];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      *(_OWORD *)((char *)a1 + v5[16]) = *(_OWORD *)((char *)a2 + v5[16]);
      *(_OWORD *)((char *)a1 + v5[20]) = *(_OWORD *)((char *)a2 + v5[20]);
    }
    else
    {
      long long v10 = a2[2];
      a1[1] = a2[1];
      a1[2] = v10;
      uint64_t v11 = (int *)sub_10000588C(&qword_1016518D0);
      uint64_t v12 = v11[20];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)((char *)a1 + v11[24]) = *(_OWORD *)((char *)a2 + v11[24]);
      *(_OWORD *)((char *)a1 + v11[28]) = *(_OWORD *)((char *)a2 + v11[28]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100DC3D04()
{
  uint64_t v4 = &unk_10137E030;
  unint64_t v5 = &unk_10137E030;
  uint64_t v6 = &unk_10137E048;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    uint64_t v8 = &unk_10137E060;
    uint64_t v9 = &unk_10137E060;
    swift_getTupleTypeLayout();
    uint64_t v11 = &v10;
    uint64_t v4 = &unk_10137E048;
    unint64_t v5 = (void *)v2;
    uint64_t v6 = &unk_10137E088;
    uint64_t v7 = &unk_10137E088;
    swift_getTupleTypeLayout();
    uint64_t v12 = &v3;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_100DC3E00()
{
  unint64_t result = qword_10165ED98;
  if (!qword_10165ED98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165ED98);
  }
  return result;
}

unint64_t sub_100DC3E54()
{
  unint64_t result = qword_10165EDA8;
  if (!qword_10165EDA8)
  {
    sub_10000592C(&qword_10165EDA0);
    sub_100DC41FC(&qword_10165EDB0, (void (*)(uint64_t))type metadata accessor for AirPodsLostModeContent.Device);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDA8);
  }
  return result;
}

uint64_t sub_100DC3EF8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165EDB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_100DC4154();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10163BD60);
    char v14 = 0;
    sub_100904FC8(&qword_101651F18);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_100037AA0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v9, v10);
  }
  return v7;
}

unint64_t sub_100DC4154()
{
  unint64_t result = qword_10165EDC0;
  if (!qword_10165EDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDC0);
  }
  return result;
}

unint64_t sub_100DC41A8()
{
  unint64_t result = qword_10165EDD8;
  if (!qword_10165EDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDD8);
  }
  return result;
}

uint64_t sub_100DC41FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.Device.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.Device.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AirPodsLostModeRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DC4324);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest.CodingKeys()
{
  return &type metadata for AirPodsLostModeRequest.CodingKeys;
}

unsigned char *_s12searchpartyd22AirPodsLostModeContentV6DeviceV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DC4428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.CodingKeys;
}

unint64_t sub_100DC4464()
{
  unint64_t result = qword_10165EDE0;
  if (!qword_10165EDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDE0);
  }
  return result;
}

unint64_t sub_100DC44BC()
{
  unint64_t result = qword_10165EDE8;
  if (!qword_10165EDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDE8);
  }
  return result;
}

unint64_t sub_100DC4514()
{
  unint64_t result = qword_10165EDF0;
  if (!qword_10165EDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDF0);
  }
  return result;
}

unint64_t sub_100DC456C()
{
  unint64_t result = qword_10165EDF8;
  if (!qword_10165EDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EDF8);
  }
  return result;
}

unint64_t sub_100DC45C4()
{
  unint64_t result = qword_10165EE00;
  if (!qword_10165EE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE00);
  }
  return result;
}

unint64_t sub_100DC461C()
{
  unint64_t result = qword_10165EE08;
  if (!qword_10165EE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE08);
  }
  return result;
}

unint64_t sub_100DC4674()
{
  unint64_t result = qword_10165EE10;
  if (!qword_10165EE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE10);
  }
  return result;
}

unint64_t sub_100DC46CC()
{
  unint64_t result = qword_10165EE18;
  if (!qword_10165EE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE18);
  }
  return result;
}

unint64_t sub_100DC4724()
{
  unint64_t result = qword_10165EE20;
  if (!qword_10165EE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE20);
  }
  return result;
}

uint64_t sub_100DC4778(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

double sub_100DC4A28@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100DC4C60(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100DC4A6C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x100DC4B9CLL);
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 32) {
        goto LABEL_26;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_22;
          }
          uint64_t v11 = (int)v11;
LABEL_12:
          if (v11 != 113) {
            goto LABEL_27;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v14) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_24;
              }
              uint64_t v14 = (int)v14;
LABEL_18:
              if (v14 != 32) {
                goto LABEL_28;
              }
              *a7 = result;
              a7[1] = a2;
              a7[2] = a3;
              a7[3] = a4;
              a7[4] = a5;
              a7[5] = a6;
              return result;
            case 2uLL:
              uint64_t v16 = *(void *)(a5 + 16);
              uint64_t v15 = *(void *)(a5 + 24);
              BOOL v10 = __OFSUB__(v15, v16);
              uint64_t v14 = v15 - v16;
              if (!v10) {
                goto LABEL_18;
              }
              goto LABEL_25;
            case 3uLL:
              goto LABEL_28;
            default:
              uint64_t v14 = BYTE6(a6);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v13 = *(void *)(a3 + 16);
          uint64_t v12 = *(void *)(a3 + 24);
          BOOL v10 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 3uLL:
          goto LABEL_27;
        default:
          uint64_t v11 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_26;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

ValueMetadata *type metadata accessor for PencilInitiatePairingCommandPayload()
{
  return &type metadata for PencilInitiatePairingCommandPayload;
}

unint64_t sub_100DC4BDC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100DC4C0C();
  unint64_t result = sub_1001E2FE8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100DC4C0C()
{
  unint64_t result = qword_10165EE28;
  if (!qword_10165EE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EE28);
  }
  return result;
}

uint64_t sub_100DC4C60@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v15, v16);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v18 = v10;
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_100DC4A6C(v7, v8, v9, v18, v11, v12, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v14 = v17[1];
    *a2 = v17[0];
    a2[1] = v14;
    a2[2] = v17[2];
  }
  return result;
}

uint64_t *sub_100DC4DE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    unsigned int v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    unint64_t v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    sub_1001A1790(*v13, v15);
    *unint64_t v12 = v14;
    v12[1] = v15;
  }
  return v4;
}

uint64_t sub_100DC4EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return sub_1001A1AD8(v7, v8);
}

void *sub_100DC4F64(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  unint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  sub_1001A1790(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  return a1;
}

void *sub_100DC5010(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  unint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  sub_1001A1790(*v12, v14);
  uint64_t v15 = *v11;
  uint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_1001A1AD8(v15, v16);
  return a1;
}

void *sub_100DC50C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void *)((char *)a1 + v10);
  uint64_t v12 = *(void *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_1001A1AD8(v11, v12);
  return a1;
}

uint64_t sub_100DC5168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DC517C);
}

uint64_t sub_100DC517C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    return ((int)(v12 >> 29) >> 31) & (((int)(v12 >> 60 << 30) >> 31)
                                     - 2 * ((v12 & 0x1000000000000000) != 0)
                                     + 4);
  }
}

uint64_t sub_100DC5250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DC5264);
}

uint64_t sub_100DC5264(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v13 = (void *)(a1 + *(int *)(a4 + 24));
    *uint64_t v13 = 0;
    v13[1] = (unint64_t)((((-(int)a2 & 2) != 0) - 2 * (_BYTE)a2) & 3) << 60;
  }
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV1()
{
  uint64_t result = qword_10165EE88;
  if (!qword_10165EE88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100DC5380()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100DC5424(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165EEE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100DC5BAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FamilyCryptoKeysV1();
    LOBYTE(v12) = 1;
    type metadata accessor for DateInterval();
    sub_100902E9C(&qword_101651E28);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_100DC5D14();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100DC5610@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_10165EEC8);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FamilyCryptoKeysV1();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_100DC5BAC();
  uint64_t v11 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v26 = a1;
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  LOBYTE(v27) = 0;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v20 = v10;
  *uint64_t v10 = v15;
  LOBYTE(v27) = 1;
  sub_100902E9C(&qword_101651E18);
  uint64_t v16 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v20;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v20 + *(int *)(v8 + 20), v16, v14);
  char v28 = 2;
  sub_100DC5C00();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v25);
  *(_OWORD *)(v17 + *(int *)(v8 + 24)) = v27;
  sub_100DC5C54(v17, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return sub_100DC5CB8(v17);
}

uint64_t sub_100DC5978(char *a1, char *a2)
{
  return sub_10071D890(*a1, *a2);
}

Swift::Int sub_100DC5984()
{
  return Hasher._finalize()();
}

uint64_t sub_100DC59E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100DC5A20()
{
  return Hasher._finalize()();
}

unint64_t sub_100DC5A78@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100DC5F74(*a1);
  *a2 = result;
  return result;
}

void sub_100DC5AA8(void *a1@<X8>)
{
  *a1 = qword_10137E720[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100DC5AC4()
{
  return qword_10137E720[*v0];
}

unint64_t sub_100DC5ADC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100DC5F74(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100DC5B04(uint64_t a1)
{
  unint64_t v2 = sub_100DC5BAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DC5B40(uint64_t a1)
{
  unint64_t v2 = sub_100DC5BAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100DC5B7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100DC5610(a1, a2);
}

uint64_t sub_100DC5B94(void *a1)
{
  return sub_100DC5424(a1);
}

unint64_t sub_100DC5BAC()
{
  unint64_t result = qword_10165EED0;
  if (!qword_10165EED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EED0);
  }
  return result;
}

unint64_t sub_100DC5C00()
{
  unint64_t result = qword_10165EED8;
  if (!qword_10165EED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EED8);
  }
  return result;
}

uint64_t sub_100DC5C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FamilyCryptoKeysV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100DC5CB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FamilyCryptoKeysV1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100DC5D14()
{
  unint64_t result = qword_10165EEE8;
  if (!qword_10165EEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EEE8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FamilyCryptoKeysV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100DC5E34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV1.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV1.CodingKeys;
}

unint64_t sub_100DC5E70()
{
  unint64_t result = qword_10165EEF0;
  if (!qword_10165EEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EEF0);
  }
  return result;
}

unint64_t sub_100DC5EC8()
{
  unint64_t result = qword_10165EEF8;
  if (!qword_10165EEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EEF8);
  }
  return result;
}

unint64_t sub_100DC5F20()
{
  unint64_t result = qword_10165EF00;
  if (!qword_10165EF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165EF00);
  }
  return result;
}

unint64_t sub_100DC5F74(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3618, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100DC5FC0(uid_t a1)
{
  memset(uu, 0, sizeof(uu));
  mbr_uid_to_uuid(a1, uu);
  return UUID.init(uuid:)();
}

uint64_t sub_100DC6054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100DC618C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v3 = a3;
  Hasher.init(_seed:)();
  sub_1000361E0(a1, a2);
  Data.hash(into:)();
  sub_10001CFB8(a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v3 + 56;
  if (((*(void *)(v3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  unint64_t v10 = a2 >> 62;
  uint64_t v81 = ~v7;
  unint64_t v80 = a2 >> 62;
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v79 = v11;
  uint64_t v78 = v3 + 56;
  uint64_t v76 = (a1 >> 32) - (int)a1;
  uint64_t v77 = a1 >> 32;
  uint64_t v82 = v10;
  uint64_t v75 = v3;
  while (2)
  {
    BOOL v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_15:
        sub_1000361E0(v14, v13);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v14 + 16);
        uint64_t v16 = *(void *)(v14 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_15;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v13);
        break;
    }
    uint64_t v18 = BYTE6(a2);
    switch(v82)
    {
      case 1:
        uint64_t v18 = HIDWORD(a1) - (int)a1;
        if (v79) {
          goto LABEL_121;
        }
        goto LABEL_20;
      case 2:
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        uint64_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_20;
        }
        goto LABEL_122;
      case 3:
        if (v15) {
          goto LABEL_8;
        }
        goto LABEL_118;
      default:
LABEL_20:
        if (v15 != v18)
        {
LABEL_8:
          sub_10001CFB8(v14, v13);
          goto LABEL_9;
        }
        if (v15 >= 1)
        {
          switch(v13 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              sub_1000361E0(a1, a2);
              uint64_t v26 = __DataStorage._bytes.getter();
              if (v26)
              {
                uint64_t v27 = v26;
                uint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v28)) {
                  goto LABEL_125;
                }
                uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
              }
              else
              {
                uint64_t v29 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v10) = a2 >> 62;
              if (v80)
              {
                if (v80 == 1)
                {
                  if (v77 < (int)a1) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  unint64_t v44 = (char *)__DataStorage._bytes.getter();
                  if (v44)
                  {
                    uint64_t v45 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a1, v45)) {
                      goto LABEL_141;
                    }
                    v44 += (int)a1 - v45;
                  }
                  uint64_t v46 = __DataStorage._length.getter();
                  size_t v47 = (a1 >> 32) - (int)a1;
                  if (v46 < v76) {
                    size_t v47 = v46;
                  }
                  if (!v29) {
                    goto LABEL_146;
                  }
                  if (!v44) {
                    goto LABEL_147;
                  }
                  int v48 = memcmp(v29, v44, v47);
                  sub_10001CFB8(a1, a2);
                }
                else
                {
                  uint64_t v67 = *(void *)(a1 + 16);
                  uint64_t v66 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v68 = (char *)__DataStorage._bytes.getter();
                  if (v68)
                  {
                    uint64_t v69 = __DataStorage._offset.getter();
                    if (__OFSUB__(v67, v69)) {
                      goto LABEL_140;
                    }
                    v68 += v67 - v69;
                  }
                  BOOL v21 = __OFSUB__(v66, v67);
                  int64_t v70 = v66 - v67;
                  if (v21) {
                    goto LABEL_135;
                  }
                  uint64_t v71 = __DataStorage._length.getter();
                  if (v71 >= v70) {
                    size_t v72 = v70;
                  }
                  else {
                    size_t v72 = v71;
                  }
                  LODWORD(v10) = a2 >> 62;
                  if (!v29) {
                    goto LABEL_154;
                  }
                  uint64_t v3 = v75;
                  if (!v68) {
                    goto LABEL_155;
                  }
                  int v48 = memcmp(v29, v68, v72);
                  swift_release();
LABEL_114:
                  swift_release();
                }
              }
              else
              {
                *(void *)__s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v29) {
                  goto LABEL_153;
                }
                int v48 = memcmp(v29, __s1, BYTE6(a2));
              }
              sub_10001CFB8(a1, a2);
              sub_10001CFB8(v14, v13);
              uint64_t v9 = v78;
              if (!v48) {
                return 1;
              }
              break;
            case 2uLL:
              uint64_t v30 = *(void *)(v14 + 16);
              sub_1000361E0(a1, a2);
              swift_retain();
              swift_retain();
              uint64_t v31 = (char *)__DataStorage._bytes.getter();
              if (!v31) {
                goto LABEL_37;
              }
              uint64_t v32 = __DataStorage._offset.getter();
              if (__OFSUB__(v30, v32)) {
                goto LABEL_124;
              }
              v31 += v30 - v32;
LABEL_37:
              __DataStorage._length.getter();
              LODWORD(v10) = a2 >> 62;
              if (!v80)
              {
                *(void *)__s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v31) {
                  goto LABEL_150;
                }
                int v48 = memcmp(v31, __s1, BYTE6(a2));
                swift_release();
                goto LABEL_114;
              }
              if (v80 == 1)
              {
                if (v77 < (int)a1) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v33 = (char *)__DataStorage._bytes.getter();
                if (v33)
                {
                  uint64_t v34 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v34)) {
                    goto LABEL_139;
                  }
                  v33 += (int)a1 - v34;
                }
                uint64_t v35 = __DataStorage._length.getter();
                size_t v36 = (a1 >> 32) - (int)a1;
                if (v35 < v76) {
                  size_t v36 = v35;
                }
                if (!v31) {
                  goto LABEL_143;
                }
                if (!v33) {
                  goto LABEL_144;
                }
                int v37 = memcmp(v31, v33, v36);
                sub_10001CFB8(a1, a2);
                swift_release();
              }
              else
              {
                uint64_t v60 = *(void *)(a1 + 16);
                uint64_t v74 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                id v61 = (char *)__DataStorage._bytes.getter();
                if (v61)
                {
                  uint64_t v62 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v62)) {
                    goto LABEL_138;
                  }
                  v61 += v60 - v62;
                }
                BOOL v21 = __OFSUB__(v74, v60);
                int64_t v63 = v74 - v60;
                if (v21) {
                  goto LABEL_133;
                }
                uint64_t v64 = __DataStorage._length.getter();
                if (v64 >= v63) {
                  size_t v65 = v63;
                }
                else {
                  size_t v65 = v64;
                }
                if (!v31) {
                  goto LABEL_151;
                }
                uint64_t v3 = v75;
                if (!v61) {
                  goto LABEL_152;
                }
                int v37 = memcmp(v31, v61, v65);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10001CFB8(a1, a2);
              sub_10001CFB8(v14, v13);
              uint64_t v9 = v78;
              LODWORD(v10) = a2 >> 62;
              if (!v37) {
                return 1;
              }
              break;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v10) {
                goto LABEL_58;
              }
              if (v10 == 1)
              {
                if (v77 < (int)a1) {
                  goto LABEL_127;
                }
                sub_1000361E0(a1, a2);
                uint64_t v38 = __DataStorage._bytes.getter();
                if (!v38) {
                  goto LABEL_145;
                }
                uint64_t v23 = v38;
                uint64_t v39 = __DataStorage._offset.getter();
                uint64_t v25 = (int)a1 - v39;
                if (__OFSUB__((int)a1, v39)) {
                  goto LABEL_132;
                }
                goto LABEL_53;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v56 = *(void *)(a1 + 24);
              sub_1000361E0(a1, a2);
              swift_retain();
              swift_retain();
              uint64_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_137;
                }
                v51 += v55 - v57;
              }
              BOOL v21 = __OFSUB__(v56, v55);
              int64_t v53 = v56 - v55;
              if (v21) {
                goto LABEL_130;
              }
              uint64_t v54 = __DataStorage._length.getter();
              uint64_t v9 = v78;
              if (!v51) {
                goto LABEL_149;
              }
              goto LABEL_83;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v13;
              __s1[10] = BYTE2(v13);
              __s1[11] = BYTE3(v13);
              __s1[12] = BYTE4(v13);
              __s1[13] = BYTE5(v13);
              if (v10)
              {
                if (v10 == 1)
                {
                  if (v77 < (int)a1) {
                    goto LABEL_126;
                  }
                  sub_1000361E0(a1, a2);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
                    JUMPOUT(0x100DC6BA8);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = (int)a1 - v24;
                  if (__OFSUB__((int)a1, v24)) {
                    goto LABEL_131;
                  }
LABEL_53:
                  uint64_t v40 = __DataStorage._length.getter();
                  if (v40 >= v76) {
                    size_t v41 = (a1 >> 32) - (int)a1;
                  }
                  else {
                    size_t v41 = v40;
                  }
                  int v42 = memcmp(__s1, (const void *)(v23 + v25), v41);
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  uint64_t v3 = v75;
                  if (!v42) {
                    return 1;
                  }
                }
                else
                {
                  uint64_t v49 = *(void *)(a1 + 16);
                  uint64_t v50 = *(void *)(a1 + 24);
                  sub_1000361E0(a1, a2);
                  swift_retain();
                  swift_retain();
                  uint64_t v51 = (char *)__DataStorage._bytes.getter();
                  if (v51)
                  {
                    uint64_t v52 = __DataStorage._offset.getter();
                    if (__OFSUB__(v49, v52)) {
                      goto LABEL_136;
                    }
                    v51 += v49 - v52;
                  }
                  BOOL v21 = __OFSUB__(v50, v49);
                  int64_t v53 = v50 - v49;
                  if (v21) {
                    goto LABEL_129;
                  }
                  uint64_t v54 = __DataStorage._length.getter();
                  uint64_t v9 = v78;
                  if (!v51) {
                    goto LABEL_148;
                  }
LABEL_83:
                  if (v54 >= v53) {
                    size_t v58 = v53;
                  }
                  else {
                    size_t v58 = v54;
                  }
                  int v59 = memcmp(__s1, v51, v58);
                  swift_release();
                  swift_release();
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  LODWORD(v10) = a2 >> 62;
                  if (!v59) {
                    return 1;
                  }
                }
              }
              else
              {
LABEL_58:
                uint64_t __s2 = a1;
                __int16 v84 = a2;
                char v85 = BYTE2(a2);
                char v86 = BYTE3(a2);
                char v87 = BYTE4(a2);
                char v88 = BYTE5(a2);
                int v43 = memcmp(__s1, &__s2, BYTE6(a2));
                sub_10001CFB8(v14, v13);
                if (!v43) {
                  return 1;
                }
              }
              break;
          }
LABEL_9:
          unint64_t v8 = (v8 + 1) & v81;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_118:
        sub_10001CFB8(v14, v13);
        return 1;
    }
  }
}

uint64_t sub_100DC6BD8(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    sub_1012638E4(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x7972616D697270;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xE900000000000079;
            unint64_t v10 = 0x7261646E6F636573;
            break;
          case 2:
            unint64_t v10 = 0xD000000000000019;
            unint64_t v9 = 0x80000001013EF280;
            break;
          case 3:
            unint64_t v10 = 0xD00000000000001BLL;
            unint64_t v9 = 0x80000001013EF2A0;
            break;
          case 4:
            unint64_t v10 = 0x646E7542646C6977;
            unint64_t v9 = 0xEA0000000000656CLL;
            break;
          case 5:
            unint64_t v10 = 0x417972616D697270;
            unint64_t v9 = 0xEE00737365726464;
            break;
          case 6:
            unint64_t v9 = 0x80000001013EF2E0;
            goto LABEL_18;
          case 7:
            unint64_t v10 = 0xD000000000000012;
            unint64_t v9 = 0x80000001013EE1F0;
            break;
          case 8:
            unint64_t v10 = 0xD000000000000011;
            unint64_t v9 = 0x80000001013EE210;
            break;
          case 9:
            unint64_t v10 = 0x697463656E6E6F63;
            uint64_t v11 = 0x79654B6E6FLL;
            goto LABEL_22;
          case 0xA:
            unint64_t v10 = 0x656E774F7261656ELL;
            unint64_t v9 = 0xEC00000079654B72;
            break;
          case 0xB:
            unint64_t v10 = 0x656B6F546E696F6ALL;
            unint64_t v9 = 0xE90000000000006ELL;
            break;
          case 0xC:
            unint64_t v10 = 0xD000000000000015;
            unint64_t v9 = 0x80000001013EF310;
            break;
          case 0xD:
            unint64_t v9 = 0x80000001013EF330;
LABEL_18:
            unint64_t v10 = 0xD000000000000010;
            break;
          case 0xE:
            unint64_t v10 = 0x7461636F4C626577;
            unint64_t v9 = 0xEE0079654B6E6F69;
            break;
          case 0xF:
            unint64_t v10 = 0x646174654D626577;
            unint64_t v9 = 0xEB00000000617461;
            break;
          case 0x10:
            unint64_t v10 = 0x6D65744974736F6CLL;
            uint64_t v11 = 0x7365746144;
LABEL_22:
            unint64_t v9 = v11 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            break;
          default:
            break;
        }
        unint64_t v12 = 0xE700000000000000;
        uint64_t v13 = 0x7972616D697270;
        switch(v8)
        {
          case 1:
            unint64_t v12 = 0xE900000000000079;
            if (v10 == 0x7261646E6F636573) {
              goto LABEL_50;
            }
            goto LABEL_51;
          case 2:
            unint64_t v14 = 0xD000000000000019;
            uint64_t v15 = "elegatedShare";
            goto LABEL_40;
          case 3:
            unint64_t v14 = 0xD00000000000001BLL;
            uint64_t v15 = "primaryLocationDecryption";
            goto LABEL_40;
          case 4:
            unint64_t v12 = 0xEA0000000000656CLL;
            if (v10 != 0x646E7542646C6977) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 5:
            uint64_t v16 = 0x417972616D697270;
            uint64_t v17 = 0x737365726464;
            goto LABEL_46;
          case 6:
            unint64_t v12 = 0x80000001013EF2E0;
            goto LABEL_43;
          case 7:
            unint64_t v14 = 0xD000000000000012;
            uint64_t v15 = "ude";
            goto LABEL_40;
          case 8:
            unint64_t v14 = 0xD000000000000011;
            uint64_t v15 = "circleSharedSecret";
            goto LABEL_40;
          case 9:
            uint64_t v18 = 0x697463656E6E6F63;
            uint64_t v19 = 0x79654B6E6FLL;
            goto LABEL_55;
          case 10:
            unint64_t v12 = 0xEC00000079654B72;
            if (v10 != 0x656E774F7261656ELL) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 11:
            unint64_t v12 = 0xE90000000000006ELL;
            if (v10 != 0x656B6F546E696F6ALL) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 12:
            unint64_t v14 = 0xD000000000000015;
            uint64_t v15 = "";
LABEL_40:
            unint64_t v12 = (unint64_t)v15 | 0x8000000000000000;
            if (v10 != v14) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 13:
            unint64_t v12 = 0x80000001013EF330;
LABEL_43:
            if (v10 != 0xD000000000000010) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 14:
            uint64_t v16 = 0x7461636F4C626577;
            uint64_t v17 = 0x79654B6E6F69;
LABEL_46:
            unint64_t v12 = v17 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v10 != v16) {
              goto LABEL_51;
            }
            goto LABEL_50;
          case 15:
            uint64_t v13 = 0x646174654D626577;
            unint64_t v12 = 0xEB00000000617461;
            goto LABEL_49;
          case 16:
            uint64_t v18 = 0x6D65744974736F6CLL;
            uint64_t v19 = 0x7365746144;
LABEL_55:
            unint64_t v12 = v19 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v10 != v18) {
              goto LABEL_51;
            }
            goto LABEL_50;
          default:
LABEL_49:
            if (v10 != v13) {
              goto LABEL_51;
            }
LABEL_50:
            if (v9 == v12)
            {
              swift_bridgeObjectRelease_n();
              char v20 = 1;
              return v20 & 1;
            }
LABEL_51:
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v20) {
              return v20 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v20 & 1;
            }
            break;
        }
      }
    }
  }
  char v20 = 0;
  return v20 & 1;
}

BOOL sub_100DC71B4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100DC7280(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    unint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_100DF3A20((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100DC7494(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    sub_1012D5910(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE700000000000000;
        uint64_t v10 = 0x6E776F6E6B6E75;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0x80000001013EF140;
            uint64_t v10 = 0xD000000000000015;
            break;
          case 2:
            uint64_t v10 = 0xD000000000000016;
            unint64_t v9 = 0x80000001013EF160;
            break;
          case 3:
            unint64_t v9 = 0xE600000000000000;
            uint64_t v10 = 0x657461636F6CLL;
            break;
          case 4:
            unint64_t v9 = 0xEC000000676E6972;
            uint64_t v10 = 0x6168537472617473;
            break;
          case 5:
            uint64_t v10 = 0x72616853706F7473;
            goto LABEL_15;
          case 6:
            unsigned int v11 = 2036427888;
            goto LABEL_12;
          case 7:
            unsigned int v11 = 1886352499;
LABEL_12:
            uint64_t v10 = v11 | 0x6E756F5300000000;
            unint64_t v9 = 0xE900000000000064;
            break;
          case 8:
            uint64_t v10 = 0x61654C6E69676562;
            unint64_t v9 = 0xED0000676E696873;
            break;
          case 9:
            uint64_t v10 = 0x687361654C646E65;
LABEL_15:
            unint64_t v9 = 0xEB00000000676E69;
            break;
          case 0xA:
            uint64_t v10 = 0x4654426E69676562;
            uint64_t v12 = 0x676E69646E69;
            goto LABEL_28;
          case 0xB:
            uint64_t v10 = 0x6E69465442646E65;
            unint64_t v9 = 0xEC000000676E6964;
            break;
          case 0xC:
            unint64_t v9 = 0xEC000000676E6967;
            uint64_t v10 = 0x6E61526E69676562;
            break;
          case 0xD:
            uint64_t v10 = 0x69676E6152646E65;
            unint64_t v9 = 0xEA0000000000676ELL;
            break;
          case 0xE:
            uint64_t v10 = 0x6F4C656C62616E65;
            uint64_t v12 = 0x65646F4D7473;
            goto LABEL_28;
          case 0xF:
            uint64_t v10 = 0x4C656C6261736964;
            unint64_t v9 = 0xEF65646F4D74736FLL;
            break;
          case 0x10:
            unint64_t v9 = 0xE600000000000000;
            uint64_t v10 = 0x656D616E6572;
            break;
          case 0x11:
            uint64_t v10 = 0x7463656E6E6F63;
            break;
          case 0x12:
            unint64_t v9 = 0xEA00000000007463;
            uint64_t v10 = 0x656E6E6F63736964;
            break;
          case 0x13:
            uint64_t v10 = 0xD000000000000017;
            unint64_t v9 = 0x80000001013EF240;
            break;
          case 0x14:
            unint64_t v9 = 0xE600000000000000;
            uint64_t v10 = 0x726961706E75;
            break;
          case 0x15:
            uint64_t v10 = 0x65746167656C6564;
            uint64_t v12 = 0x657261685364;
LABEL_28:
            unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          default:
            break;
        }
        unint64_t v13 = 0xE700000000000000;
        uint64_t v14 = 0x6E776F6E6B6E75;
        switch(v8)
        {
          case 1:
            unint64_t v13 = 0x80000001013EF140;
            if (v10 == 0xD000000000000015) {
              goto LABEL_68;
            }
            goto LABEL_69;
          case 2:
            unint64_t v13 = 0x80000001013EF160;
            if (v10 != 0xD000000000000016) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 3:
            unint64_t v13 = 0xE600000000000000;
            if (v10 != 0x657461636F6CLL) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 4:
            unint64_t v13 = 0xEC000000676E6972;
            if (v10 != 0x6168537472617473) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 5:
            uint64_t v15 = 0x72616853706F7473;
            goto LABEL_46;
          case 6:
            unsigned int v16 = 2036427888;
            goto LABEL_41;
          case 7:
            unsigned int v16 = 1886352499;
LABEL_41:
            unint64_t v13 = 0xE900000000000064;
            if (v10 != (v16 | 0x6E756F5300000000)) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 8:
            unint64_t v13 = 0xED0000676E696873;
            if (v10 != 0x61654C6E69676562) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 9:
            uint64_t v15 = 0x687361654C646E65;
LABEL_46:
            unint64_t v13 = 0xEB00000000676E69;
            if (v10 != v15) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 10:
            uint64_t v17 = 0x4654426E69676562;
            uint64_t v18 = 0x676E69646E69;
            goto LABEL_73;
          case 11:
            unint64_t v13 = 0xEC000000676E6964;
            if (v10 != 0x6E69465442646E65) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 12:
            unint64_t v13 = 0xEC000000676E6967;
            if (v10 != 0x6E61526E69676562) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 13:
            unint64_t v13 = 0xEA0000000000676ELL;
            if (v10 != 0x69676E6152646E65) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 14:
            uint64_t v17 = 0x6F4C656C62616E65;
            uint64_t v18 = 0x65646F4D7473;
            goto LABEL_73;
          case 15:
            unint64_t v13 = 0xEF65646F4D74736FLL;
            if (v10 != 0x4C656C6261736964) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 16:
            unint64_t v13 = 0xE600000000000000;
            if (v10 != 0x656D616E6572) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 17:
            if (v10 != 0x7463656E6E6F63) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 18:
            unint64_t v13 = 0xEA00000000007463;
            if (v10 != 0x656E6E6F63736964) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 19:
            unint64_t v13 = 0x80000001013EF240;
            if (v10 != 0xD000000000000017) {
              goto LABEL_69;
            }
            goto LABEL_68;
          case 20:
            unint64_t v13 = 0xE600000000000000;
            uint64_t v14 = 0x726961706E75;
            goto LABEL_67;
          case 21:
            uint64_t v17 = 0x65746167656C6564;
            uint64_t v18 = 0x657261685364;
LABEL_73:
            unint64_t v13 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v10 != v17) {
              goto LABEL_69;
            }
            goto LABEL_68;
          default:
LABEL_67:
            if (v10 != v14) {
              goto LABEL_69;
            }
LABEL_68:
            if (v9 == v13)
            {
              swift_bridgeObjectRelease_n();
              char v19 = 1;
              return v19 & 1;
            }
LABEL_69:
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v19) {
              return v19 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v19 & 1;
            }
            break;
        }
      }
    }
  }
  char v19 = 0;
  return v19 & 1;
}

BOOL sub_100DC7BFC(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt v4 = qword_10137E740[a1];
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (qword_10137E740[*(char *)(v9 + v7)] == v4) {
    return 1;
  }
  uint64_t v11 = ~v6;
  unint64_t v12 = (v7 + 1) & v11;
  if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v13 = qword_10137E740[*(char *)(v9 + v12)];
    BOOL result = v13 == v4;
    if (v13 == v4) {
      break;
    }
    unint64_t v12 = (v12 + 1) & v11;
  }
  while (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  return result;
}

uint64_t sub_100DC7D04(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  Swift::UInt v7 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v11 = a4 + 56;
  if (((*(void *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = ~v9;
  uint64_t v13 = *(void *)(a4 + 48);
  while (1)
  {
    uint64_t v14 = (unsigned __int8 *)(v13 + 24 * v10);
    if (*v14 == v7)
    {
      BOOL v15 = *((void *)v14 + 1) == a2 && *((void *)v14 + 2) == a3;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
    }
    unint64_t v10 = (v10 + 1) & v12;
    if (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_100DC7E30(Swift::UInt8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100DC7F20(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt32 v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100DC8010(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100DC8100(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v4 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v5 = v3 & ~v4;
    uint64_t v6 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_18:
        char v20 = 1;
        return v20 & 1;
      }
      uint64_t v13 = ~v4;
      unint64_t v14 = (v5 + 1) & v13;
      if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
      {
        while (1)
        {
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
            break;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            unint64_t v14 = (v14 + 1) & v13;
            if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14)) {
              continue;
            }
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  char v20 = 0;
  return v20 & 1;
}

BOOL sub_100DC82C8(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  int v3 = a1;
  uint64_t v4 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100DC8398(int a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(_DWORD *)(v8 + 4 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100DC8468(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt v4 = qword_10137E8A0[a1];
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (qword_10137E8A0[*(char *)(v9 + v7)] == v4) {
    return 1;
  }
  uint64_t v11 = ~v6;
  unint64_t v12 = (v7 + 1) & v11;
  if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v13 = qword_10137E8A0[*(char *)(v9 + v12)];
    BOOL result = v13 == v4;
    if (v13 == v4) {
      break;
    }
    unint64_t v12 = (v12 + 1) & v11;
  }
  while (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  return result;
}

BOOL sub_100DC8570(uint64_t a1, unint64_t a2)
{
  return sub_100DC85B0(a1, a2, (uint64_t)&off_1015A0F78, sub_100DF1410);
}

BOOL sub_100DC8590(uint64_t a1, unint64_t a2)
{
  return sub_100DC85B0(a1, a2, (uint64_t)&off_1015A1360, sub_101158768);
}

BOOL sub_100DC85B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Endianness();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = a4(a3);
  if (sub_1002AA484(a1, a2) == 76)
  {
    sub_1002AA5D4(a1, a2);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v14) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v13;
    }
    BOOL v11 = sub_100DC71B4(v10, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

BOOL sub_100DC86D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  uint64_t v11 = sub_101158768((uint64_t)&off_10159F490);
  sub_100DD251C(&v10, 8216, &qword_10165EF10);
  sub_100DD251C(&v10, 8220, &qword_10165EF10);
  uint64_t v5 = sub_1002AA484(a1, a2);
  uint64_t v6 = v11;
  if (v5 == 76)
  {
    swift_bridgeObjectRetain();
    sub_1002AA5D4(a1, a2);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (BYTE4(v10)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (int)v10;
    }
    BOOL v8 = sub_100DC71B4(v7, v6);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

BOOL sub_100DC8844(uint64_t a1, unint64_t a2)
{
  return sub_100DC888C(a1, a2, (uint64_t)&off_1015A0580, sub_101158768, 8216);
}

BOOL sub_100DC8868(uint64_t a1, unint64_t a2)
{
  return sub_100DC888C(a1, a2, (uint64_t)&off_1015A05B0, sub_100DF1410, 8223);
}

BOOL sub_100DC888C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Endianness();
  __chkstk_darwin(v10 - 8);
  uint64_t v17 = a4(a3);
  sub_100DD251C(&v16, a5, &qword_10165EF10);
  uint64_t v11 = sub_1002AA484(a1, a2);
  uint64_t v12 = v17;
  if (v11 == 76)
  {
    swift_bridgeObjectRetain();
    sub_1002AA5D4(a1, a2);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (BYTE4(v16)) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (int)v16;
    }
    BOOL v14 = sub_100DC71B4(v13, v12);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v14;
}

uint64_t sub_100DC89E8@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1000361E0(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100DC8C4CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10001CFB8(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_100DC8C5C@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      uint64_t __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = __s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

uint64_t sub_100DC8CB8(uint64_t a1, char *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    char v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    int v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      int64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100DF3A20((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      size_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      int v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    int v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DDDE60((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100DC8FDC(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10165F1F0);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_1011235C8(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10166C2B0, (uint64_t *)&unk_10165F1F0, (unint64_t *)&unk_101666860);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_101124418(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F1F0);
  sub_100062734((unint64_t *)&unk_101666860, (uint64_t *)&unk_10165F1F0);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10166C2B0, (uint64_t *)&unk_10165F1F0, (unint64_t *)&unk_101666860, (unint64_t *)&unk_10165F200);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734((unint64_t *)&unk_10165F200, (uint64_t *)&unk_10165F1F0);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DC92F8(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165F1E0);
}

uint64_t sub_100DC930C(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100720198();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DDE11C(a2, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_36;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xE800000000000000;
    uint64_t v10 = 0x7265776F50776F6CLL;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        uint64_t v10 = 0x6F506D756964656DLL;
        unint64_t v9 = 0xEB00000000726577;
        break;
      case 2:
        uint64_t v10 = 0x65776F5068676968;
        unint64_t v9 = 0xE900000000000072;
        break;
      case 3:
        uint64_t v10 = 0x4F7265776F506E6FLL;
        unint64_t v9 = 0xED0000694669576ELL;
        break;
      case 4:
        uint64_t v10 = 0x4F7265776F506E6FLL;
        unint64_t v9 = 0xED00006C6C65436ELL;
        break;
      case 5:
        uint64_t v10 = 0x7265747461426E6FLL;
        unint64_t v9 = 0xEF694669576E4F79;
        break;
      case 6:
        uint64_t v10 = 0x7265747461426E6FLL;
        unint64_t v9 = 0xEF6C6C65436E4F79;
        break;
      case 7:
        uint64_t v10 = 0x6F696E61706D6F63;
        unint64_t v9 = 0xEF79627261654E6ELL;
        break;
      case 8:
        uint64_t v10 = 0x6857796669746F6ELL;
        unint64_t v9 = 0xEF646E756F466E65;
        break;
      default:
        break;
    }
    unint64_t v11 = 0xE800000000000000;
    uint64_t v12 = 0x7265776F50776F6CLL;
    switch((char)a2)
    {
      case 1:
        unint64_t v11 = 0xEB00000000726577;
        if (v10 == 0x6F506D756964656DLL) {
          goto LABEL_27;
        }
        goto LABEL_28;
      case 2:
        unint64_t v11 = 0xE900000000000072;
        if (v10 != 0x65776F5068676968) {
          goto LABEL_28;
        }
        goto LABEL_27;
      case 3:
        uint64_t v13 = 0x694669576ELL;
        goto LABEL_19;
      case 4:
        uint64_t v13 = 0x6C6C65436ELL;
LABEL_19:
        unint64_t v11 = v13 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        if (v10 != 0x4F7265776F506E6FLL) {
          goto LABEL_28;
        }
        goto LABEL_27;
      case 5:
        unint64_t v11 = 0xEF694669576E4F79;
        if (v10 != 0x7265747461426E6FLL) {
          goto LABEL_28;
        }
        goto LABEL_27;
      case 6:
        unint64_t v11 = 0xEF6C6C65436E4F79;
        if (v10 != 0x7265747461426E6FLL) {
          goto LABEL_28;
        }
        goto LABEL_27;
      case 7:
        uint64_t v12 = 0x6F696E61706D6F63;
        unint64_t v11 = 0xEF79627261654E6ELL;
        goto LABEL_26;
      case 8:
        unint64_t v11 = 0xEF646E756F466E65;
        if (v10 != 0x6857796669746F6ELL) {
          goto LABEL_28;
        }
        goto LABEL_27;
      default:
LABEL_26:
        if (v10 != v12) {
          goto LABEL_28;
        }
LABEL_27:
        if (v9 != v11)
        {
LABEL_28:
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v14) {
            goto LABEL_35;
          }
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_33;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_35:
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_36:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_100DC979C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100DDE5C4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100DC994C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  Data.hash(into:)();
  sub_10001CFB8(a2, a3);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_1000361E0(a2, a3);
    sub_100DDE760(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  unint64_t v11 = a3 >> 62;
  uint64_t v86 = ~v8;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  while (2)
  {
    BOOL v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_1000361E0(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    uint64_t v19 = BYTE6(a3);
    switch((int)v11)
    {
      case 1:
        uint64_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_10001CFB8(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              sub_1000361E0(a2, a3);
              uint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_10001CFB8(a2, a3);
                }
                else
                {
                  uint64_t v65 = *(void *)(a2 + 16);
                  uint64_t v78 = *(char **)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v66 = (char *)__DataStorage._bytes.getter();
                  if (v66)
                  {
                    uint64_t v67 = __DataStorage._offset.getter();
                    if (__OFSUB__(v65, v67)) {
                      goto LABEL_140;
                    }
                    v66 += v65 - v67;
                  }
                  BOOL v22 = __OFSUB__(v78, v65);
                  uint64_t v68 = &v78[-v65];
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v69 = __DataStorage._length.getter();
                  if (v69 >= (uint64_t)v68) {
                    size_t v70 = (size_t)v68;
                  }
                  else {
                    size_t v70 = v69;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  uint64_t v6 = v83;
                  if (!v66) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v66, v70);
                  swift_release();
                  swift_release();
                }
LABEL_114:
                sub_10001CFB8(a2, a3);
                sub_10001CFB8(v14, v15);
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                int v42 = memcmp(v27, __s1, BYTE6(a3));
LABEL_101:
                sub_10001CFB8(a2, a3);
LABEL_102:
                sub_10001CFB8(v14, v15);
                if (!v42) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              sub_1000361E0(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v35 = __DataStorage._bytes.getter();
              if (v35)
              {
                uint64_t v36 = v35;
                uint64_t v37 = __DataStorage._offset.getter();
                if (__OFSUB__(v34, v37)) {
                  goto LABEL_124;
                }
                uint64_t v77 = (void *)(v36 + v34 - v37);
              }
              else
              {
                uint64_t v77 = 0;
              }
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v77) {
                  goto LABEL_150;
                }
                int v42 = memcmp(v77, __s1, BYTE6(a3));
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                int v43 = (char *)__DataStorage._bytes.getter();
                if (v43)
                {
                  uint64_t v44 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v44)) {
                    goto LABEL_139;
                  }
                  v43 += (int)a2 - v44;
                }
                uint64_t v45 = __DataStorage._length.getter();
                size_t v46 = (a2 >> 32) - (int)a2;
                if (v45 < v79) {
                  size_t v46 = v45;
                }
                if (!v77) {
                  goto LABEL_146;
                }
                if (!v43) {
                  goto LABEL_147;
                }
                int v47 = memcmp(v77, v43, v46);
                sub_10001CFB8(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v76 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v76, v59);
                int64_t v62 = v76 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v77) {
                  goto LABEL_151;
                }
                uint64_t v10 = v85;
                if (!v60) {
                  goto LABEL_152;
                }
                int v47 = memcmp(v77, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10001CFB8(a2, a3);
              sub_10001CFB8(v14, v15);
              uint64_t v6 = v83;
              if (!v47) {
                goto LABEL_118;
              }
              break;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_56;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_1000361E0(a2, a3);
                uint64_t v38 = __DataStorage._bytes.getter();
                if (!v38) {
                  goto LABEL_145;
                }
                uint64_t v24 = v38;
                uint64_t v39 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v39;
                if (__OFSUB__((int)a2, v39)) {
                  goto LABEL_132;
                }
LABEL_52:
                uint64_t v40 = __DataStorage._length.getter();
                if (v40 >= v79) {
                  size_t v41 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v41 = v40;
                }
                int v33 = memcmp(__s1, (const void *)(v24 + v26), v41);
                goto LABEL_114;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              sub_1000361E0(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_80:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_10001CFB8(a2, a3);
              sub_10001CFB8(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_56:
                uint64_t __s2 = a2;
                __int16 v88 = a3;
                char v89 = BYTE2(a3);
                char v90 = BYTE3(a3);
                char v91 = BYTE4(a3);
                char v92 = BYTE5(a3);
                int v42 = memcmp(__s1, &__s2, BYTE6(a3));
                goto LABEL_102;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_1000361E0(a2, a3);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x100DCA3F4);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_52;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              sub_1000361E0(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_80;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_10001CFB8(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_10001CFB8(a2, a3);
        int v73 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v74 = *v73;
        unint64_t v75 = v73[1];
        *a1 = *v73;
        a1[1] = v75;
        sub_1000361E0(v74, v75);
        return 0;
    }
  }
}

uint64_t sub_100DCA424(uint64_t *a1, uint64_t a2)
{
  return sub_100DD251C(a1, a2, &qword_10165EF10);
}

uint64_t sub_100DCA438(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165EF98);
}

uint64_t sub_100DCA44C(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165EF80);
}

uint64_t sub_100DCA460(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10120EF7C();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v20 = v2;
    uint64_t v21 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100DF38F0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      BOOL v16 = sub_101212AE0((uint64_t)v9, a2);
      sub_100DF3958((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100DF3958(a2, type metadata accessor for SharedBeaconRecord);
    sub_100DF38F0(*(void *)(*v20 + 48) + v15 * v13, v21, type metadata accessor for SharedBeaconRecord);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100DF38F0(a2, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    uint64_t v22 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DDF374((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v22;
    swift_bridgeObjectRelease();
    sub_100DF39B8(a2, a1, type metadata accessor for SharedBeaconRecord);
    return 1;
  }
}

uint64_t sub_100DCA6C0(void *a1, void *a2)
{
  return sub_100DD1340(a1, a2, &qword_10165F128, type metadata accessor for SPDisabledReason);
}

uint64_t sub_100DCA6E0(unsigned char *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DDF668(a2, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DCA7E4(uint64_t a1, uint64_t *a2)
{
  int v3 = v2;
  uint64_t v101 = type metadata accessor for BeaconNamingRecord();
  uint64_t v6 = *(void *)(v101 - 8);
  uint64_t v7 = __chkstk_darwin(v101);
  unint64_t v9 = (void *)((char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v11 = (void *)((char *)v95 - v10);
  uint64_t v12 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100DBF570();
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v106 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  uint64_t v96 = v11;
  os_log_type_t v97 = v2;
  uint64_t v98 = a1;
  uint64_t v103 = ~v14;
  uint64_t v104 = v12;
  uint64_t v105 = *(void *)(v6 + 72);
  unint64_t v100 = a2;
  BOOL v16 = (int *)v101;
  while (2)
  {
    unint64_t v17 = v105 * v15;
    sub_100DF38F0(*(void *)(v12 + 48) + v105 * v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v19 = *v9;
    unint64_t v18 = v9[1];
    uint64_t v21 = *a2;
    unint64_t v20 = a2[1];
    uint64_t v22 = 0;
    switch(v18 >> 62)
    {
      case 1uLL:
        LODWORD(v22) = HIDWORD(v19) - v19;
        if (__OFSUB__(HIDWORD(v19), v19))
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
        }
        uint64_t v22 = (int)v22;
LABEL_10:
        unint64_t v102 = v17;
        unint64_t v26 = v20 >> 62;
        switch(v20 >> 62)
        {
          case 1uLL:
            LODWORD(v27) = HIDWORD(v21) - v21;
            if (__OFSUB__(HIDWORD(v21), v21)) {
              goto LABEL_136;
            }
            uint64_t v27 = (int)v27;
LABEL_15:
            if (v22 != v27) {
              goto LABEL_4;
            }
            if (v22 < 1) {
              goto LABEL_115;
            }
            break;
          case 2uLL:
            uint64_t v29 = *(void *)(v21 + 16);
            uint64_t v28 = *(void *)(v21 + 24);
            BOOL v25 = __OFSUB__(v28, v29);
            uint64_t v27 = v28 - v29;
            if (!v25) {
              goto LABEL_15;
            }
            goto LABEL_137;
          case 3uLL:
            if (v22) {
              goto LABEL_4;
            }
            goto LABEL_115;
          default:
            uint64_t v27 = BYTE6(v20);
            goto LABEL_15;
        }
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(v19 + 16);
        uint64_t v23 = *(void *)(v19 + 24);
        BOOL v25 = __OFSUB__(v23, v24);
        uint64_t v22 = v23 - v24;
        if (!v25) {
          goto LABEL_10;
        }
        goto LABEL_135;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v22 = BYTE6(v18);
        goto LABEL_10;
    }
    switch(v18 >> 62)
    {
      case 1uLL:
        if ((int)v19 > v19 >> 32) {
          goto LABEL_138;
        }
        sub_1000361E0(v19, v18);
        uint64_t v35 = __DataStorage._bytes.getter();
        if (v35)
        {
          uint64_t v36 = v35;
          uint64_t v37 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v19, v37)) {
            goto LABEL_140;
          }
          uint64_t v99 = (const void *)(v36 + (int)v19 - v37);
        }
        else
        {
          uint64_t v99 = 0;
        }
        a2 = v100;
        __DataStorage._length.getter();
        BOOL v16 = (int *)v101;
        if (!v26)
        {
          *(void *)__s1 = v21;
          *(_WORD *)&__s1[8] = v20;
          __s1[10] = BYTE2(v20);
          __s1[11] = BYTE3(v20);
          __s1[12] = BYTE4(v20);
          __s1[13] = BYTE5(v20);
          if (!v99) {
            goto LABEL_168;
          }
          int v76 = memcmp(v99, __s1, BYTE6(v20));
          goto LABEL_114;
        }
        if (v26 != 1)
        {
          uint64_t v77 = *(void *)(v21 + 16);
          uint64_t v78 = *(void *)(v21 + 24);
          swift_retain();
          swift_retain();
          uint64_t v79 = (char *)__DataStorage._bytes.getter();
          if (v79)
          {
            uint64_t v80 = __DataStorage._offset.getter();
            if (__OFSUB__(v77, v80)) {
              goto LABEL_155;
            }
            v79 += v77 - v80;
          }
          if (__OFSUB__(v78, v77)) {
            goto LABEL_150;
          }
          uint64_t v81 = __DataStorage._length.getter();
          if (v81 >= v78 - v77) {
            size_t v82 = v78 - v77;
          }
          else {
            size_t v82 = v81;
          }
          if (!v99) {
            goto LABEL_169;
          }
          a2 = v100;
          BOOL v16 = (int *)v101;
          if (!v79) {
            goto LABEL_170;
          }
          int v76 = memcmp(v99, v79, v82);
          swift_release();
          swift_release();
LABEL_114:
          sub_10001CFB8(v19, v18);
          if (v76) {
            goto LABEL_4;
          }
          goto LABEL_115;
        }
        if (v21 >> 32 < (int)v21) {
          goto LABEL_148;
        }
        swift_retain();
        uint64_t v53 = (char *)__DataStorage._bytes.getter();
        if (v53)
        {
          uint64_t v54 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v21, v54)) {
            goto LABEL_156;
          }
          v53 += (int)v21 - v54;
        }
        BOOL v16 = (int *)v101;
        uint64_t v55 = __DataStorage._length.getter();
        if (v55 >= (v21 >> 32) - (int)v21) {
          size_t v56 = (v21 >> 32) - (int)v21;
        }
        else {
          size_t v56 = v55;
        }
        if (!v99) {
          goto LABEL_161;
        }
        a2 = v100;
        if (!v53) {
          goto LABEL_162;
        }
        int v57 = memcmp(v99, v53, v56);
        sub_10001CFB8(v21, v20);
        sub_10001CFB8(v19, v18);
        if (v57) {
          goto LABEL_4;
        }
        goto LABEL_115;
      case 2uLL:
        uint64_t v38 = v18 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v39 = *(void *)(v19 + 16);
        swift_retain();
        swift_retain();
        uint64_t v40 = __DataStorage._bytes.getter();
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = __DataStorage._offset.getter();
          if (__OFSUB__(v39, v42)) {
            goto LABEL_139;
          }
          uint64_t v99 = (const void *)(v41 + v39 - v42);
        }
        else
        {
          uint64_t v99 = 0;
        }
        __DataStorage._length.getter();
        a2 = v100;
        BOOL v16 = (int *)v101;
        if (!v26)
        {
          *(void *)__s1 = v21;
          *(_WORD *)&__s1[8] = v20;
          __s1[10] = BYTE2(v20);
          __s1[11] = BYTE3(v20);
          __s1[12] = BYTE4(v20);
          __s1[13] = BYTE5(v20);
          if (!v99) {
            goto LABEL_165;
          }
          int v69 = memcmp(v99, __s1, BYTE6(v20));
          swift_release();
          goto LABEL_100;
        }
        if (v26 != 1)
        {
          uint64_t v70 = *(void *)(v21 + 16);
          uint64_t v71 = *(void *)(v21 + 24);
          swift_retain();
          swift_retain();
          size_t v72 = (char *)__DataStorage._bytes.getter();
          if (v72)
          {
            uint64_t v73 = __DataStorage._offset.getter();
            if (__OFSUB__(v70, v73)) {
              goto LABEL_153;
            }
            v72 += v70 - v73;
          }
          if (__OFSUB__(v71, v70)) {
            goto LABEL_149;
          }
          uint64_t v74 = __DataStorage._length.getter();
          if (v74 >= v71 - v70) {
            size_t v75 = v71 - v70;
          }
          else {
            size_t v75 = v74;
          }
          if (!v99) {
            goto LABEL_166;
          }
          a2 = v100;
          BOOL v16 = (int *)v101;
          if (!v72) {
            goto LABEL_167;
          }
          int v69 = memcmp(v99, v72, v75);
          swift_release();
          swift_release();
          swift_release();
LABEL_100:
          swift_release();
          if (v69) {
            goto LABEL_4;
          }
          goto LABEL_115;
        }
        v95[1] = v38;
        if (v21 >> 32 < (int)v21) {
          goto LABEL_143;
        }
        swift_retain();
        uint64_t v48 = (char *)__DataStorage._bytes.getter();
        if (v48)
        {
          uint64_t v49 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v21, v49)) {
            goto LABEL_154;
          }
          v48 += (int)v21 - v49;
        }
        uint64_t v50 = __DataStorage._length.getter();
        if (v50 >= (v21 >> 32) - (int)v21) {
          size_t v51 = (v21 >> 32) - (int)v21;
        }
        else {
          size_t v51 = v50;
        }
        if (!v99) {
          goto LABEL_159;
        }
        a2 = v100;
        if (!v48) {
          goto LABEL_160;
        }
        int v52 = memcmp(v99, v48, v51);
        sub_10001CFB8(v21, v20);
        swift_release();
        swift_release();
        if (v52) {
          goto LABEL_4;
        }
LABEL_115:
        if ((static UUID.== infix(_:_:)() & 1) != 0
          && (static UUID.== infix(_:_:)() & 1) != 0
          && *(uint64_t *)((char *)v9 + v16[7]) == *(uint64_t *)((char *)a2 + v16[7]))
        {
          uint64_t v83 = v16[8];
          uint64_t v84 = *(uint64_t *)((char *)v9 + v83);
          uint64_t v85 = *(uint64_t *)((char *)v9 + v83 + 8);
          uint64_t v86 = (uint64_t *)((char *)a2 + v83);
          BOOL v87 = v84 == *v86 && v85 == v86[1];
          if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v88 = v16[9];
            char v89 = (uint64_t *)((char *)v9 + v88);
            uint64_t v90 = *(uint64_t *)((char *)v9 + v88 + 8);
            char v91 = (uint64_t *)((char *)a2 + v88);
            uint64_t v92 = v91[1];
            if (v90)
            {
              if (v92 && (*v89 == *v91 && v90 == v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
LABEL_130:
                sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                swift_bridgeObjectRelease();
                sub_100DF3958((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                sub_100DF38F0(*(void *)(*v97 + 48) + v102, v98, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                return 0;
              }
            }
            else if (!v92)
            {
              goto LABEL_130;
            }
          }
        }
LABEL_4:
        sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        uint64_t v12 = v104;
        unint64_t v15 = (v15 + 1) & v103;
        if ((*(void *)(v106 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15)) {
          continue;
        }
        swift_bridgeObjectRelease();
        a1 = v98;
        int v3 = v97;
        uint64_t v11 = v96;
LABEL_133:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_100DF38F0((uint64_t)a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        *(void *)__s1 = *v3;
        *int v3 = 0x8000000000000000;
        sub_100DDF798(v11, v15, isUniquelyReferenced_nonNull_native);
        *int v3 = *(void *)__s1;
        swift_bridgeObjectRelease();
        sub_100DF39B8((uint64_t)a2, a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        return 1;
      case 3uLL:
        *(void *)&__s1[6] = 0;
        *(void *)__s1 = 0;
        if (!v26) {
          goto LABEL_42;
        }
        if (v26 == 1)
        {
          uint64_t v30 = (v21 >> 32) - (int)v21;
          if (v21 >> 32 < (int)v21) {
            goto LABEL_142;
          }
          swift_retain();
          uint64_t v43 = __DataStorage._bytes.getter();
          if (!v43) {
            goto LABEL_158;
          }
          uint64_t v32 = v43;
          uint64_t v44 = __DataStorage._offset.getter();
          uint64_t v34 = (int)v21 - v44;
          if (__OFSUB__((int)v21, v44)) {
            goto LABEL_147;
          }
          goto LABEL_37;
        }
        uint64_t v64 = *(void *)(v21 + 16);
        uint64_t v65 = *(void *)(v21 + 24);
        swift_retain();
        swift_retain();
        uint64_t v60 = (char *)__DataStorage._bytes.getter();
        if (v60)
        {
          uint64_t v66 = __DataStorage._offset.getter();
          if (__OFSUB__(v64, v66)) {
            goto LABEL_152;
          }
          v60 += v64 - v66;
        }
        int64_t v62 = v65 - v64;
        if (__OFSUB__(v65, v64)) {
          goto LABEL_145;
        }
        uint64_t v63 = __DataStorage._length.getter();
        if (!v60) {
          goto LABEL_164;
        }
        goto LABEL_83;
      default:
        *(void *)__s1 = v19;
        *(_WORD *)&__s1[8] = v18;
        __s1[10] = BYTE2(v18);
        __s1[11] = BYTE3(v18);
        __s1[12] = BYTE4(v18);
        __s1[13] = BYTE5(v18);
        if (v26)
        {
          if (v26 == 1)
          {
            uint64_t v30 = (v21 >> 32) - (int)v21;
            if (v21 >> 32 < (int)v21) {
              goto LABEL_141;
            }
            swift_retain();
            uint64_t v31 = __DataStorage._bytes.getter();
            if (!v31)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_158:
              __DataStorage._length.getter();
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
              JUMPOUT(0x100DCB3A0);
            }
            uint64_t v32 = v31;
            uint64_t v33 = __DataStorage._offset.getter();
            uint64_t v34 = (int)v21 - v33;
            if (__OFSUB__((int)v21, v33)) {
              goto LABEL_146;
            }
LABEL_37:
            uint64_t v45 = __DataStorage._length.getter();
            if (v45 >= v30) {
              size_t v46 = v30;
            }
            else {
              size_t v46 = v45;
            }
            int v47 = memcmp(__s1, (const void *)(v32 + v34), v46);
            sub_10001CFB8(v21, v20);
            BOOL v16 = (int *)v101;
            if (v47) {
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(v21 + 16);
            uint64_t v59 = *(void *)(v21 + 24);
            swift_retain();
            swift_retain();
            uint64_t v60 = (char *)__DataStorage._bytes.getter();
            if (v60)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v58, v61)) {
                goto LABEL_151;
              }
              v60 += v58 - v61;
            }
            int64_t v62 = v59 - v58;
            if (__OFSUB__(v59, v58)) {
              goto LABEL_144;
            }
            uint64_t v63 = __DataStorage._length.getter();
            if (!v60) {
              goto LABEL_163;
            }
LABEL_83:
            if (v63 >= v62) {
              size_t v67 = v62;
            }
            else {
              size_t v67 = v63;
            }
            int v68 = memcmp(__s1, v60, v67);
            swift_release();
            swift_release();
            BOOL v16 = (int *)v101;
            if (v68) {
              goto LABEL_4;
            }
          }
        }
        else
        {
LABEL_42:
          uint64_t __s2 = v21;
          __int16 v108 = v20;
          char v109 = BYTE2(v20);
          char v110 = BYTE3(v20);
          char v111 = BYTE4(v20);
          char v112 = BYTE5(v20);
          if (memcmp(__s1, &__s2, BYTE6(v20))) {
            goto LABEL_4;
          }
        }
        goto LABEL_115;
    }
  }
}

uint64_t sub_100DCB3D0(uint64_t a1, Swift::Int a2, uint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  int v10 = a4 & 1;
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(a4 & 1);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  BOOL v25 = v5;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v11 + 48);
    do
    {
      uint64_t v17 = v16 + 24 * v14;
      int v18 = *(unsigned __int8 *)(v17 + 16);
      if (*(void *)v17 == a2 && *(void *)(v17 + 8) == a3)
      {
        if ((v10 == 0) != v18) {
          goto LABEL_11;
        }
      }
      else if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && (((v10 == 0) ^ v18))
      {
LABEL_11:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v20 = *(void *)(*v25 + 48) + 24 * v14;
        uint64_t v22 = *(void *)v20;
        uint64_t v21 = *(void *)(v20 + 8);
        LOBYTE(v20) = *(unsigned char *)(v20 + 16);
        *(void *)a1 = v22;
        *(void *)(a1 + 8) = v21;
        *(unsigned char *)(a1 + 16) = v20;
        swift_bridgeObjectRetain();
        return 0;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *v25;
  *BOOL v25 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100DE033C(a2, a3, v10, v14, isUniquelyReferenced_nonNull_native);
  *BOOL v25 = v26;
  swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_100DCB5BC(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, &qword_10163B870);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1011235F8(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, &qword_10165EF88);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, &qword_10163B870);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10165EF88, &qword_10163B870);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DCB87C(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10163B860);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101123628(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10166C2D0, (uint64_t *)&unk_10163B860, &qword_10165F6F0);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_101124430(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10163B860);
  sub_100062734(&qword_10165F6F0, (uint64_t *)&unk_10163B860);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10166C2D0, (uint64_t *)&unk_10163B860, &qword_10165F6F0, &qword_10165F280);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734(&qword_10165F280, (uint64_t *)&unk_10163B860);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DCBB98(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_1000361E0(a2, a3);
    sub_100DE04FC(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_1000361E0(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_10001CFB8(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_10001CFB8(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  size_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_10001CFB8(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                int v47 = (uint64_t *)__s1;
                size_t v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_10001CFB8(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_10001CFB8(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10001CFB8(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_1000361E0(a2, a3);
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_10001CFB8(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_10001CFB8(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                size_t v46 = __s1;
                int v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_1000361E0(a2, a3);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x100DCC5B4);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_10001CFB8(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_10001CFB8(a2, a3);
        uint64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_1000361E0(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_100DCC5E4(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165EF90);
}

uint64_t sub_100DCC5F8(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123880(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, &qword_10165EFB0);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10165EFB0, (unint64_t *)&qword_10166BF90);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DCC8B8(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      id v15 = (unsigned __int8 *)(v14 + 24 * v12);
      if (*v15 == a2)
      {
        BOOL v16 = *((void *)v15 + 1) == a3 && *((void *)v15 + 2) == a4;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(*v4 + 48) + 24 * v12;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    *(unsigned char *)a1 = *(unsigned char *)v17;
    *(void *)(a1 + 8) = v19;
    *(void *)(a1 + 16) = v18;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_100DE10B4(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v4 = v22;
    swift_bridgeObjectRelease();
    *(unsigned char *)a1 = a2;
    uint64_t result = 1;
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = a4;
  }
  return result;
}

uint64_t sub_100DCCA90(uint64_t *a1, uint64_t a2)
{
  return sub_100DD251C(a1, a2, &qword_10165EFC8);
}

uint64_t sub_100DCCAA4(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RawSearchResult();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (unsigned __int8 *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100CC2EC0();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v20 = v2;
    uint64_t v21 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100DF38F0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      char v16 = sub_100CC4608(v9, a2);
      sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100DF3958((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DF38F0(*(void *)(*v20 + 48) + v15 * v13, v21, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100DF38F0((uint64_t)a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v22 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DE13A4(v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v22;
    swift_bridgeObjectRelease();
    sub_100DF39B8((uint64_t)a2, a1, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    return 1;
  }
}

uint64_t sub_100DCCD04(void *a1, void *a2)
{
  return sub_100DD1340(a1, a2, &qword_10165EF18, type metadata accessor for SPFinderDisabledReason);
}

uint64_t sub_100DCCD24(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123AB4(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10165EF40);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165EF40, (unint64_t *)&unk_10166BF70);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DCCFE4(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  sub_1012D5910(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DE18DC(a2, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v25;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_78;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xE700000000000000;
    uint64_t v10 = 0x6E776F6E6B6E75;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0x80000001013EF140;
        uint64_t v10 = 0xD000000000000015;
        break;
      case 2:
        uint64_t v10 = 0xD000000000000016;
        unint64_t v9 = 0x80000001013EF160;
        break;
      case 3:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v10 = 0x657461636F6CLL;
        break;
      case 4:
        unint64_t v9 = 0xEC000000676E6972;
        uint64_t v10 = 0x6168537472617473;
        break;
      case 5:
        uint64_t v10 = 0x72616853706F7473;
        goto LABEL_14;
      case 6:
        unsigned int v11 = 2036427888;
        goto LABEL_11;
      case 7:
        unsigned int v11 = 1886352499;
LABEL_11:
        uint64_t v10 = v11 | 0x6E756F5300000000;
        unint64_t v9 = 0xE900000000000064;
        break;
      case 8:
        uint64_t v10 = 0x61654C6E69676562;
        unint64_t v9 = 0xED0000676E696873;
        break;
      case 9:
        uint64_t v10 = 0x687361654C646E65;
LABEL_14:
        unint64_t v9 = 0xEB00000000676E69;
        break;
      case 0xA:
        uint64_t v10 = 0x4654426E69676562;
        uint64_t v12 = 0x676E69646E69;
        goto LABEL_27;
      case 0xB:
        uint64_t v10 = 0x6E69465442646E65;
        unint64_t v9 = 0xEC000000676E6964;
        break;
      case 0xC:
        unint64_t v9 = 0xEC000000676E6967;
        uint64_t v10 = 0x6E61526E69676562;
        break;
      case 0xD:
        uint64_t v10 = 0x69676E6152646E65;
        unint64_t v9 = 0xEA0000000000676ELL;
        break;
      case 0xE:
        uint64_t v10 = 0x6F4C656C62616E65;
        uint64_t v12 = 0x65646F4D7473;
        goto LABEL_27;
      case 0xF:
        uint64_t v10 = 0x4C656C6261736964;
        unint64_t v9 = 0xEF65646F4D74736FLL;
        break;
      case 0x10:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v10 = 0x656D616E6572;
        break;
      case 0x11:
        uint64_t v10 = 0x7463656E6E6F63;
        break;
      case 0x12:
        unint64_t v9 = 0xEA00000000007463;
        uint64_t v10 = 0x656E6E6F63736964;
        break;
      case 0x13:
        uint64_t v10 = 0xD000000000000017;
        unint64_t v9 = 0x80000001013EF240;
        break;
      case 0x14:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v10 = 0x726961706E75;
        break;
      case 0x15:
        uint64_t v10 = 0x65746167656C6564;
        uint64_t v12 = 0x657261685364;
LABEL_27:
        unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        break;
      default:
        break;
    }
    unint64_t v13 = 0xE700000000000000;
    uint64_t v14 = 0x6E776F6E6B6E75;
    switch((char)a2)
    {
      case 1:
        unint64_t v13 = 0x80000001013EF140;
        if (v10 == 0xD000000000000015) {
          goto LABEL_67;
        }
        goto LABEL_68;
      case 2:
        unint64_t v15 = 0xD000000000000016;
        char v16 = "enableNotifyWhenFound";
        goto LABEL_63;
      case 3:
        unint64_t v13 = 0xE600000000000000;
        if (v10 != 0x657461636F6CLL) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 4:
        unint64_t v13 = 0xEC000000676E6972;
        if (v10 != 0x6168537472617473) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 5:
        uint64_t v17 = 0x72616853706F7473;
        goto LABEL_44;
      case 6:
        unsigned int v18 = 2036427888;
        goto LABEL_39;
      case 7:
        unsigned int v18 = 1886352499;
LABEL_39:
        unint64_t v13 = 0xE900000000000064;
        if (v10 != (v18 | 0x6E756F5300000000)) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 8:
        unint64_t v13 = 0xED0000676E696873;
        if (v10 != 0x61654C6E69676562) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 9:
        uint64_t v17 = 0x687361654C646E65;
LABEL_44:
        unint64_t v13 = 0xEB00000000676E69;
        if (v10 != v17) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 10:
        uint64_t v19 = 0x4654426E69676562;
        uint64_t v20 = 0x676E69646E69;
        goto LABEL_72;
      case 11:
        unint64_t v13 = 0xEC000000676E6964;
        if (v10 != 0x6E69465442646E65) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 12:
        unint64_t v13 = 0xEC000000676E6967;
        if (v10 != 0x6E61526E69676562) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 13:
        unint64_t v13 = 0xEA0000000000676ELL;
        if (v10 != 0x69676E6152646E65) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 14:
        uint64_t v19 = 0x6F4C656C62616E65;
        uint64_t v20 = 0x65646F4D7473;
        goto LABEL_72;
      case 15:
        unint64_t v13 = 0xEF65646F4D74736FLL;
        if (v10 != 0x4C656C6261736964) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 16:
        unint64_t v13 = 0xE600000000000000;
        if (v10 != 0x656D616E6572) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 17:
        if (v10 != 0x7463656E6E6F63) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 18:
        unint64_t v13 = 0xEA00000000007463;
        if (v10 != 0x656E6E6F63736964) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 19:
        unint64_t v15 = 0xD000000000000017;
        char v16 = "onnect";
LABEL_63:
        unint64_t v13 = (unint64_t)v16 | 0x8000000000000000;
        if (v10 != v15) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 20:
        unint64_t v13 = 0xE600000000000000;
        uint64_t v14 = 0x726961706E75;
        goto LABEL_66;
      case 21:
        uint64_t v19 = 0x65746167656C6564;
        uint64_t v20 = 0x657261685364;
LABEL_72:
        unint64_t v13 = v20 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v10 != v19) {
          goto LABEL_68;
        }
        goto LABEL_67;
      default:
LABEL_66:
        if (v10 != v14) {
          goto LABEL_68;
        }
LABEL_67:
        if (v9 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_77;
        }
LABEL_68:
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v21 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_74;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_77:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_78:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_100DCD7C4(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123AE4(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10166C260);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10166C260, (unint64_t *)&unk_101653D70);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DCDA84(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Swift::UInt v6 = qword_10137E740[(char)a2];
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DE20D8(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v5 + 48);
  if (qword_10137E740[*(char *)(v10 + v9)] != v6)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (qword_10137E740[*(char *)(v10 + v9)] != v6);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v9);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DCDBC4(uint64_t a1, uint64_t *a2)
{
  int v3 = v2;
  Swift::UInt v6 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v105 = *((void *)v6 - 1);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (uint64_t *)((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v90 - v10);
  uint64_t v12 = *v2;
  Hasher.init(_seed:)();
  uint64_t v13 = *a2;
  unint64_t v14 = a2[1];
  swift_bridgeObjectRetain();
  sub_1000361E0(v13, v14);
  Data.hash(into:)();
  sub_10001CFB8(v13, v14);
  id v15 = (char *)a2 + v6[5];
  type metadata accessor for UUID();
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v101 = v15;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v98 = (char *)a2 + v6[6];
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v97 = v6[7];
  Hasher._combine(_:)(*((unsigned __int8 *)a2 + v97));
  uint64_t v95 = v6[8];
  uint64_t v16 = *(uint64_t *)((char *)a2 + v95);
  swift_bridgeObjectRetain();
  sub_100DF9434(__s1, v16);
  swift_bridgeObjectRelease();
  unint64_t v100 = v6;
  uint64_t v94 = v6[9];
  Hasher._combine(_:)(*((unsigned __int8 *)a2 + v94));
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = v12;
  uint64_t v19 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v20 = v17 & ~v19;
  uint64_t v106 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_123;
  }
  char v91 = v11;
  char v92 = v3;
  uint64_t v93 = a1;
  uint64_t v103 = ~v19;
  uint64_t v104 = v12;
  uint64_t v105 = *(void *)(v105 + 72);
  uint64_t v99 = a2;
  id v21 = v100;
  while (2)
  {
    unint64_t v22 = v105 * v20;
    sub_100DF38F0(*(void *)(v18 + 48) + v105 * v20, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v23 = *v9;
    unint64_t v24 = v9[1];
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1];
    uint64_t v27 = 0;
    switch(v24 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v23) - v23;
        if (__OFSUB__(HIDWORD(v23), v23))
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
        }
        uint64_t v27 = (int)v27;
LABEL_10:
        unint64_t v102 = v22;
        unint64_t v31 = v26 >> 62;
        switch(v26 >> 62)
        {
          case 1uLL:
            LODWORD(v32) = HIDWORD(v25) - v25;
            if (__OFSUB__(HIDWORD(v25), v25)) {
              goto LABEL_126;
            }
            uint64_t v32 = (int)v32;
LABEL_15:
            if (v27 != v32) {
              goto LABEL_4;
            }
            if (v27 < 1) {
              goto LABEL_115;
            }
            break;
          case 2uLL:
            uint64_t v34 = *(void *)(v25 + 16);
            uint64_t v33 = *(void *)(v25 + 24);
            BOOL v30 = __OFSUB__(v33, v34);
            uint64_t v32 = v33 - v34;
            if (!v30) {
              goto LABEL_15;
            }
            goto LABEL_127;
          case 3uLL:
            if (v27) {
              goto LABEL_4;
            }
            goto LABEL_115;
          default:
            uint64_t v32 = BYTE6(v26);
            goto LABEL_15;
        }
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v23 + 16);
        uint64_t v28 = *(void *)(v23 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_10;
        }
        goto LABEL_125;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v27 = BYTE6(v24);
        goto LABEL_10;
    }
    switch(v24 >> 62)
    {
      case 1uLL:
        if ((int)v23 > v23 >> 32) {
          goto LABEL_128;
        }
        sub_1000361E0(v23, v24);
        uint64_t v40 = __DataStorage._bytes.getter();
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v23, v42)) {
            goto LABEL_130;
          }
          uint64_t v96 = (const void *)(v41 + (int)v23 - v42);
        }
        else
        {
          uint64_t v96 = 0;
        }
        a2 = v99;
        __DataStorage._length.getter();
        id v21 = v100;
        if (!v31)
        {
          *(void *)&__s1[0] = v25;
          WORD4(__s1[0]) = v26;
          BYTE10(__s1[0]) = BYTE2(v26);
          BYTE11(__s1[0]) = BYTE3(v26);
          BYTE12(__s1[0]) = BYTE4(v26);
          BYTE13(__s1[0]) = BYTE5(v26);
          if (!v96) {
            goto LABEL_158;
          }
          int v62 = memcmp(v96, __s1, BYTE6(v26));
          goto LABEL_103;
        }
        if (v31 == 1)
        {
          if (v25 >> 32 < (int)v25) {
            goto LABEL_139;
          }
          swift_retain();
          int v58 = (char *)__DataStorage._bytes.getter();
          if (v58)
          {
            uint64_t v59 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v59)) {
              goto LABEL_146;
            }
            v58 += (int)v25 - v59;
          }
          id v21 = v100;
          uint64_t v60 = __DataStorage._length.getter();
          if (v60 >= (v25 >> 32) - (int)v25) {
            size_t v61 = (v25 >> 32) - (int)v25;
          }
          else {
            size_t v61 = v60;
          }
          if (!v96) {
            goto LABEL_151;
          }
          a2 = v99;
          if (!v58) {
            goto LABEL_152;
          }
          int v62 = memcmp(v96, v58, v61);
          sub_10001CFB8(v25, v26);
LABEL_103:
          sub_10001CFB8(v23, v24);
          if (v62) {
            goto LABEL_4;
          }
          goto LABEL_115;
        }
        uint64_t v81 = *(void *)(v25 + 16);
        uint64_t v82 = *(void *)(v25 + 24);
        swift_retain();
        swift_retain();
        uint64_t v83 = (char *)__DataStorage._bytes.getter();
        if (v83)
        {
          uint64_t v84 = __DataStorage._offset.getter();
          if (__OFSUB__(v81, v84)) {
            goto LABEL_145;
          }
          v83 += v81 - v84;
        }
        if (__OFSUB__(v82, v81)) {
          goto LABEL_140;
        }
        uint64_t v85 = __DataStorage._length.getter();
        if (v85 >= v82 - v81) {
          size_t v86 = v82 - v81;
        }
        else {
          size_t v86 = v85;
        }
        if (!v96) {
          goto LABEL_159;
        }
        a2 = v99;
        id v21 = v100;
        if (!v83) {
          goto LABEL_160;
        }
        int v87 = memcmp(v96, v83, v86);
        swift_release();
        swift_release();
        sub_10001CFB8(v23, v24);
        if (v87) {
          goto LABEL_4;
        }
        goto LABEL_115;
      case 2uLL:
        uint64_t v43 = v24 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v44 = *(void *)(v23 + 16);
        swift_retain();
        swift_retain();
        uint64_t v45 = __DataStorage._bytes.getter();
        if (v45)
        {
          uint64_t v46 = v45;
          uint64_t v47 = __DataStorage._offset.getter();
          if (__OFSUB__(v44, v47)) {
            goto LABEL_129;
          }
          uint64_t v96 = (const void *)(v46 + v44 - v47);
        }
        else
        {
          uint64_t v96 = 0;
        }
        __DataStorage._length.getter();
        a2 = v99;
        id v21 = v100;
        if (!v31)
        {
          *(void *)&__s1[0] = v25;
          WORD4(__s1[0]) = v26;
          BYTE10(__s1[0]) = BYTE2(v26);
          BYTE11(__s1[0]) = BYTE3(v26);
          BYTE12(__s1[0]) = BYTE4(v26);
          BYTE13(__s1[0]) = BYTE5(v26);
          if (!v96) {
            goto LABEL_155;
          }
          int v57 = memcmp(v96, __s1, BYTE6(v26));
          goto LABEL_88;
        }
        if (v31 == 1)
        {
          uint64_t v90 = v43;
          if (v25 >> 32 < (int)v25) {
            goto LABEL_133;
          }
          swift_retain();
          uint64_t v53 = (char *)__DataStorage._bytes.getter();
          if (v53)
          {
            uint64_t v54 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v54)) {
              goto LABEL_144;
            }
            v53 += (int)v25 - v54;
          }
          uint64_t v55 = __DataStorage._length.getter();
          if (v55 >= (v25 >> 32) - (int)v25) {
            size_t v56 = (v25 >> 32) - (int)v25;
          }
          else {
            size_t v56 = v55;
          }
          if (!v96) {
            goto LABEL_149;
          }
          a2 = v99;
          if (!v53) {
            goto LABEL_150;
          }
          int v57 = memcmp(v96, v53, v56);
          sub_10001CFB8(v25, v26);
LABEL_88:
          swift_release();
          swift_release();
          if (v57) {
            goto LABEL_4;
          }
          goto LABEL_115;
        }
        uint64_t v74 = *(void *)(v25 + 16);
        uint64_t v75 = *(void *)(v25 + 24);
        swift_retain();
        swift_retain();
        unint64_t v76 = (char *)__DataStorage._bytes.getter();
        if (v76)
        {
          uint64_t v77 = __DataStorage._offset.getter();
          if (__OFSUB__(v74, v77)) {
            goto LABEL_143;
          }
          v76 += v74 - v77;
        }
        if (__OFSUB__(v75, v74)) {
          goto LABEL_138;
        }
        uint64_t v78 = __DataStorage._length.getter();
        if (v78 >= v75 - v74) {
          size_t v79 = v75 - v74;
        }
        else {
          size_t v79 = v78;
        }
        if (!v96) {
          goto LABEL_156;
        }
        a2 = v99;
        id v21 = v100;
        if (!v76) {
          goto LABEL_157;
        }
        int v80 = memcmp(v96, v76, v79);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (v80) {
          goto LABEL_4;
        }
LABEL_115:
        if ((static UUID.== infix(_:_:)() & 1) != 0
          && (static UUID.== infix(_:_:)() & 1) != 0
          && *((unsigned __int8 *)v9 + v21[7]) == *((unsigned __int8 *)a2 + v97)
          && (sub_100DF62D4(*(uint64_t *)((char *)v9 + v21[8]), *(uint64_t *)((char *)a2 + v95)) & 1) != 0
          && *((unsigned __int8 *)v9 + v21[9]) == *((unsigned __int8 *)a2 + v94))
        {
          sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          swift_bridgeObjectRelease();
          sub_100DF3958((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          sub_100DF38F0(*(void *)(*v92 + 48) + v102, v93, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          return 0;
        }
LABEL_4:
        sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v18 = v104;
        unint64_t v20 = (v20 + 1) & v103;
        if ((*(void *)(v106 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20)) {
          continue;
        }
        swift_bridgeObjectRelease();
        a1 = v93;
        int v3 = v92;
        uint64_t v11 = v91;
LABEL_123:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_100DF38F0((uint64_t)a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(void *)&__s1[0] = *v3;
        *int v3 = 0x8000000000000000;
        sub_100DE2258(v11, v20, isUniquelyReferenced_nonNull_native);
        *int v3 = *(void *)&__s1[0];
        swift_bridgeObjectRelease();
        sub_100DF39B8((uint64_t)a2, a1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        return 1;
      case 3uLL:
        *(void *)((char *)__s1 + 6) = 0;
        *(void *)&__s1[0] = 0;
        if (!v31) {
          goto LABEL_42;
        }
        if (v31 == 1)
        {
          uint64_t v35 = (v25 >> 32) - (int)v25;
          if (v25 >> 32 < (int)v25) {
            goto LABEL_132;
          }
          swift_retain();
          uint64_t v48 = __DataStorage._bytes.getter();
          if (!v48) {
            goto LABEL_148;
          }
          uint64_t v37 = v48;
          uint64_t v49 = __DataStorage._offset.getter();
          uint64_t v39 = (int)v25 - v49;
          if (__OFSUB__((int)v25, v49)) {
            goto LABEL_137;
          }
          goto LABEL_37;
        }
        uint64_t v69 = *(void *)(v25 + 16);
        uint64_t v70 = *(void *)(v25 + 24);
        swift_retain();
        swift_retain();
        uint64_t v65 = (char *)__DataStorage._bytes.getter();
        if (v65)
        {
          uint64_t v71 = __DataStorage._offset.getter();
          if (__OFSUB__(v69, v71)) {
            goto LABEL_142;
          }
          v65 += v69 - v71;
        }
        int64_t v67 = v70 - v69;
        if (__OFSUB__(v70, v69)) {
          goto LABEL_135;
        }
        uint64_t v68 = __DataStorage._length.getter();
        if (!v65) {
          goto LABEL_154;
        }
        goto LABEL_81;
      default:
        *(void *)&__s1[0] = v23;
        WORD4(__s1[0]) = v24;
        BYTE10(__s1[0]) = BYTE2(v24);
        BYTE11(__s1[0]) = BYTE3(v24);
        BYTE12(__s1[0]) = BYTE4(v24);
        BYTE13(__s1[0]) = BYTE5(v24);
        if (v31)
        {
          if (v31 == 1)
          {
            uint64_t v35 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_131;
            }
            swift_retain();
            uint64_t v36 = __DataStorage._bytes.getter();
            if (!v36)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_148:
              __DataStorage._length.getter();
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
              JUMPOUT(0x100DCE870);
            }
            uint64_t v37 = v36;
            uint64_t v38 = __DataStorage._offset.getter();
            uint64_t v39 = (int)v25 - v38;
            if (__OFSUB__((int)v25, v38)) {
              goto LABEL_136;
            }
LABEL_37:
            uint64_t v50 = __DataStorage._length.getter();
            if (v50 >= v35) {
              size_t v51 = v35;
            }
            else {
              size_t v51 = v50;
            }
            int v52 = memcmp(__s1, (const void *)(v37 + v39), v51);
            sub_10001CFB8(v25, v26);
            a2 = v99;
            id v21 = v100;
            if (v52) {
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v63 = *(void *)(v25 + 16);
            uint64_t v64 = *(void *)(v25 + 24);
            swift_retain();
            swift_retain();
            uint64_t v65 = (char *)__DataStorage._bytes.getter();
            if (v65)
            {
              uint64_t v66 = __DataStorage._offset.getter();
              if (__OFSUB__(v63, v66)) {
                goto LABEL_141;
              }
              v65 += v63 - v66;
            }
            int64_t v67 = v64 - v63;
            if (__OFSUB__(v64, v63)) {
              goto LABEL_134;
            }
            uint64_t v68 = __DataStorage._length.getter();
            if (!v65) {
              goto LABEL_153;
            }
LABEL_81:
            if (v68 >= v67) {
              size_t v72 = v67;
            }
            else {
              size_t v72 = v68;
            }
            int v73 = memcmp(__s1, v65, v72);
            swift_release();
            swift_release();
            a2 = v99;
            id v21 = v100;
            if (v73) {
              goto LABEL_4;
            }
          }
        }
        else
        {
LABEL_42:
          uint64_t __s2 = v25;
          __int16 v108 = v26;
          char v109 = BYTE2(v26);
          char v110 = BYTE3(v26);
          char v111 = BYTE4(v26);
          char v112 = BYTE5(v26);
          if (memcmp(__s1, &__s2, BYTE6(v26))) {
            goto LABEL_4;
          }
        }
        goto LABEL_115;
    }
  }
}

uint64_t sub_100DCE8A0(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123B14(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10165F070);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F070, (unint64_t *)&qword_10163B900);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DCEB60(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  sub_1012638E4(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DE2F04(a2, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v26;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_60;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xE700000000000000;
    unint64_t v10 = 0x7972616D697270;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xE900000000000079;
        unint64_t v10 = 0x7261646E6F636573;
        break;
      case 2:
        unint64_t v10 = 0xD000000000000019;
        unint64_t v9 = 0x80000001013EF280;
        break;
      case 3:
        unint64_t v10 = 0xD00000000000001BLL;
        unint64_t v9 = 0x80000001013EF2A0;
        break;
      case 4:
        unint64_t v10 = 0x646E7542646C6977;
        unint64_t v9 = 0xEA0000000000656CLL;
        break;
      case 5:
        unint64_t v10 = 0x417972616D697270;
        unint64_t v9 = 0xEE00737365726464;
        break;
      case 6:
        Swift::Int v11 = "Bundle";
        goto LABEL_17;
      case 7:
        unint64_t v10 = 0xD000000000000012;
        unint64_t v9 = 0x80000001013EE1F0;
        break;
      case 8:
        unint64_t v10 = 0xD000000000000011;
        unint64_t v9 = 0x80000001013EE210;
        break;
      case 9:
        unint64_t v10 = 0x697463656E6E6F63;
        uint64_t v12 = 0x79654B6E6FLL;
        goto LABEL_21;
      case 0xA:
        unint64_t v10 = 0x656E774F7261656ELL;
        unint64_t v9 = 0xEC00000079654B72;
        break;
      case 0xB:
        unint64_t v10 = 0x656B6F546E696F6ALL;
        unint64_t v9 = 0xE90000000000006ELL;
        break;
      case 0xC:
        unint64_t v10 = 0xD000000000000015;
        unint64_t v9 = 0x80000001013EF310;
        break;
      case 0xD:
        Swift::Int v11 = "beaconGroupAttributes";
LABEL_17:
        unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
        unint64_t v10 = 0xD000000000000010;
        break;
      case 0xE:
        unint64_t v10 = 0x7461636F4C626577;
        unint64_t v9 = 0xEE0079654B6E6F69;
        break;
      case 0xF:
        unint64_t v10 = 0x646174654D626577;
        unint64_t v9 = 0xEB00000000617461;
        break;
      case 0x10:
        unint64_t v10 = 0x6D65744974736F6CLL;
        uint64_t v12 = 0x7365746144;
LABEL_21:
        unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        break;
      default:
        break;
    }
    unint64_t v13 = 0xE700000000000000;
    uint64_t v14 = 0x7972616D697270;
    switch((char)a2)
    {
      case 1:
        unint64_t v13 = 0xE900000000000079;
        if (v10 == 0x7261646E6F636573) {
          goto LABEL_49;
        }
        goto LABEL_50;
      case 2:
        unint64_t v15 = 0xD000000000000019;
        char v16 = "elegatedShare";
        goto LABEL_39;
      case 3:
        unint64_t v15 = 0xD00000000000001BLL;
        char v16 = "primaryLocationDecryption";
        goto LABEL_39;
      case 4:
        unint64_t v13 = 0xEA0000000000656CLL;
        if (v10 != 0x646E7542646C6977) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 5:
        uint64_t v17 = 0x417972616D697270;
        uint64_t v18 = 0x737365726464;
        goto LABEL_45;
      case 6:
        char v19 = "Bundle";
        goto LABEL_42;
      case 7:
        unint64_t v15 = 0xD000000000000012;
        char v16 = "ude";
        goto LABEL_39;
      case 8:
        unint64_t v15 = 0xD000000000000011;
        char v16 = "circleSharedSecret";
        goto LABEL_39;
      case 9:
        uint64_t v20 = 0x697463656E6E6F63;
        uint64_t v21 = 0x79654B6E6FLL;
        goto LABEL_54;
      case 10:
        unint64_t v13 = 0xEC00000079654B72;
        if (v10 != 0x656E774F7261656ELL) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 11:
        unint64_t v13 = 0xE90000000000006ELL;
        if (v10 != 0x656B6F546E696F6ALL) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 12:
        unint64_t v15 = 0xD000000000000015;
        char v16 = "";
LABEL_39:
        unint64_t v13 = (unint64_t)v16 | 0x8000000000000000;
        if (v10 != v15) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 13:
        char v19 = "beaconGroupAttributes";
LABEL_42:
        unint64_t v13 = (unint64_t)v19 | 0x8000000000000000;
        if (v10 != 0xD000000000000010) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 14:
        uint64_t v17 = 0x7461636F4C626577;
        uint64_t v18 = 0x79654B6E6F69;
LABEL_45:
        unint64_t v13 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v10 != v17) {
          goto LABEL_50;
        }
        goto LABEL_49;
      case 15:
        uint64_t v14 = 0x646174654D626577;
        unint64_t v13 = 0xEB00000000617461;
        goto LABEL_48;
      case 16:
        uint64_t v20 = 0x6D65744974736F6CLL;
        uint64_t v21 = 0x7365746144;
LABEL_54:
        unint64_t v13 = v21 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        if (v10 != v20) {
          goto LABEL_50;
        }
        goto LABEL_49;
      default:
LABEL_48:
        if (v10 != v14) {
          goto LABEL_50;
        }
LABEL_49:
        if (v9 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_59;
        }
LABEL_50:
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_56;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_59:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_60:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_100DCF1F8(void *a1, void *a2)
{
  return sub_100DD1340(a1, a2, (uint64_t *)&unk_10165EFD0, type metadata accessor for URLResourceKey);
}

uint64_t sub_100DCF218(_OWORD *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100E8EAB8();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v49 = v5 + 56;
  uint64_t v39 = v2;
  uint64_t v40 = a1;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v46 = ~v7;
    uint64_t v47 = *(void *)(v5 + 48);
    uint64_t v57 = *(void *)(a2 + 8);
    uint64_t v58 = *(void *)a2;
    while (1)
    {
      uint64_t v9 = v47 + 160 * v8;
      uint64_t v11 = *(void *)(v9 + 16);
      uint64_t v10 = *(void *)(v9 + 24);
      uint64_t v12 = *(void *)(v9 + 32);
      uint64_t v13 = *(void *)(v9 + 40);
      uint64_t v14 = *(void *)(v9 + 48);
      uint64_t v15 = *(void *)(v9 + 56);
      uint64_t v16 = *(void *)(v9 + 64);
      uint64_t v17 = *(void *)(v9 + 72);
      uint64_t v55 = *(void *)(v9 + 88);
      uint64_t v56 = *(void *)(v9 + 80);
      uint64_t v53 = *(void *)(v9 + 104);
      uint64_t v54 = *(void *)(v9 + 96);
      uint64_t v51 = *(void *)(v9 + 120);
      uint64_t v52 = *(void *)(v9 + 112);
      int v50 = *(unsigned __int8 *)(v9 + 128);
      int v48 = *(unsigned __int8 *)(v9 + 129);
      int v44 = *(unsigned __int8 *)(v9 + 131);
      int v45 = *(unsigned __int8 *)(v9 + 130);
      int v43 = *(unsigned __int8 *)(v9 + 136);
      BOOL v18 = *(void *)v9 == v58 && *(void *)(v9 + 8) == v57;
      uint64_t v41 = *(void *)(v9 + 152);
      uint64_t v42 = *(void *)(v9 + 144);
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (v11 == *(void *)(a2 + 16) && v10 == *(void *)(a2 + 24)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v12 == *(void *)(a2 + 32) && v13 == *(void *)(a2 + 40)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v14 == *(void *)(a2 + 48) && v15 == *(void *)(a2 + 56)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v16 == *(void *)(a2 + 64) && v17 == *(void *)(a2 + 72)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v56 == *(void *)(a2 + 80) && v55 == *(void *)(a2 + 88)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v54 == *(void *)(a2 + 96) && v53 == *(void *)(a2 + 104)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v52 == *(void *)(a2 + 112) && v51 == *(void *)(a2 + 120)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && ((v50 ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
        && ((v48 ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
        && ((v45 ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
        && ((v44 ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
        && v43 == *(unsigned __int8 *)(a2 + 136)
        && (v42 == *(void *)(a2 + 144) && v41 == *(void *)(a2 + 152)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        break;
      }
      unint64_t v8 = (v8 + 1) & v46;
      if (((*(void *)(v49 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000A3BB4(a2);
    char v19 = (_OWORD *)(*(void *)(*v39 + 48) + 160 * v8);
    long long v20 = v19[2];
    long long v21 = v19[3];
    long long v22 = v19[5];
    v59[4] = v19[4];
    v59[5] = v22;
    v59[3] = v21;
    long long v23 = v19[9];
    long long v25 = v19[6];
    long long v24 = v19[7];
    v59[8] = v19[8];
    v59[9] = v23;
    v59[6] = v25;
    v59[7] = v24;
    long long v26 = v19[1];
    v59[0] = *v19;
    v59[1] = v26;
    uint64_t v59[2] = v20;
    long long v27 = v19[7];
    v40[6] = v19[6];
    v40[7] = v27;
    long long v28 = v19[9];
    v40[8] = v19[8];
    v40[9] = v28;
    long long v29 = v19[3];
    uint64_t v40[2] = v19[2];
    v40[3] = v29;
    long long v30 = v19[5];
    v40[4] = v19[4];
    v40[5] = v30;
    long long v31 = v19[1];
    *uint64_t v40 = *v19;
    v40[1] = v31;
    sub_1000A3AA8((uint64_t)v59);
    return 0;
  }
  else
  {
LABEL_39:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v59[0] = *v39;
    *uint64_t v39 = 0x8000000000000000;
    sub_1000A3AA8(a2);
    sub_100DE3578(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v39 = *(void *)&v59[0];
    swift_bridgeObjectRelease();
    long long v34 = *(_OWORD *)(a2 + 112);
    v40[6] = *(_OWORD *)(a2 + 96);
    v40[7] = v34;
    long long v35 = *(_OWORD *)(a2 + 144);
    v40[8] = *(_OWORD *)(a2 + 128);
    v40[9] = v35;
    long long v36 = *(_OWORD *)(a2 + 48);
    uint64_t v40[2] = *(_OWORD *)(a2 + 32);
    v40[3] = v36;
    long long v37 = *(_OWORD *)(a2 + 80);
    v40[4] = *(_OWORD *)(a2 + 64);
    v40[5] = v37;
    long long v38 = *(_OWORD *)(a2 + 16);
    uint64_t result = 1;
    *uint64_t v40 = *(_OWORD *)a2;
    v40[1] = v38;
  }
  return result;
}

uint64_t sub_100DCF650(uint64_t a1, char *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100DF3A20((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    long long v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      long long v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100DF3A20((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DE3964((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100DCF974(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100DE3C20(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100DCFB24(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_100173F4C(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_1004268DC((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_1004268DC(a2);
    sub_100173F4C(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100173F4C(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DE3DBC((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_100DCFCA0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v105 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v94 - v10;
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  unint64_t v102 = (int *)v6;
  uint64_t v13 = a2 + *(int *)(v6 + 24);
  type metadata accessor for UUID();
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v99 = v13;
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v106 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v95 = v11;
    uint64_t v96 = v3;
    uint64_t v97 = a1;
    uint64_t v104 = ~v15;
    uint64_t v105 = *(void *)(v105 + 72);
    uint64_t v100 = a2;
    uint64_t v101 = v12;
    while (2)
    {
      unint64_t v17 = v105 * v16;
      sub_100DF38F0(*(void *)(v12 + 48) + v105 * v16, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      uint64_t v19 = *(void *)v9;
      unint64_t v18 = *((void *)v9 + 1);
      uint64_t v20 = *(void *)a2;
      unint64_t v21 = *(void *)(a2 + 8);
      uint64_t v22 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v22) = HIDWORD(v19) - v19;
          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
          }
          uint64_t v22 = (int)v22;
LABEL_10:
          unint64_t v103 = v17;
          unint64_t v26 = v21 >> 62;
          switch(v21 >> 62)
          {
            case 1uLL:
              LODWORD(v27) = HIDWORD(v20) - v20;
              if (__OFSUB__(HIDWORD(v20), v20)) {
                goto LABEL_136;
              }
              uint64_t v27 = (int)v27;
LABEL_15:
              if (v22 != v27) {
                goto LABEL_4;
              }
              if (v22 < 1) {
                goto LABEL_115;
              }
              break;
            case 2uLL:
              uint64_t v29 = *(void *)(v20 + 16);
              uint64_t v28 = *(void *)(v20 + 24);
              BOOL v25 = __OFSUB__(v28, v29);
              uint64_t v27 = v28 - v29;
              if (!v25) {
                goto LABEL_15;
              }
              goto LABEL_137;
            case 3uLL:
              if (v22) {
                goto LABEL_4;
              }
              goto LABEL_115;
            default:
              uint64_t v27 = BYTE6(v21);
              goto LABEL_15;
          }
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(v19 + 16);
          uint64_t v23 = *(void *)(v19 + 24);
          BOOL v25 = __OFSUB__(v23, v24);
          uint64_t v22 = v23 - v24;
          if (!v25) {
            goto LABEL_10;
          }
          goto LABEL_135;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v22 = BYTE6(v18);
          goto LABEL_10;
      }
      switch(v18 >> 62)
      {
        case 1uLL:
          if ((int)v19 > v19 >> 32) {
            goto LABEL_138;
          }
          sub_1000361E0(v19, v18);
          uint64_t v35 = __DataStorage._bytes.getter();
          if (v35)
          {
            uint64_t v36 = v35;
            uint64_t v37 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v19, v37)) {
              goto LABEL_140;
            }
            uint64_t v98 = (const void *)(v36 + (int)v19 - v37);
          }
          else
          {
            uint64_t v98 = 0;
          }
          a2 = v100;
          __DataStorage._length.getter();
          uint64_t v12 = v101;
          if (v26)
          {
            if (v26 == 1)
            {
              if (v20 >> 32 < (int)v20) {
                goto LABEL_149;
              }
              swift_retain();
              uint64_t v53 = (char *)__DataStorage._bytes.getter();
              if (v53)
              {
                uint64_t v54 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v20, v54)) {
                  goto LABEL_156;
                }
                v53 += (int)v20 - v54;
              }
              uint64_t v12 = v101;
              uint64_t v55 = __DataStorage._length.getter();
              if (v55 >= (v20 >> 32) - (int)v20) {
                size_t v56 = (v20 >> 32) - (int)v20;
              }
              else {
                size_t v56 = v55;
              }
              if (!v98) {
                goto LABEL_161;
              }
              a2 = v100;
              if (!v53) {
                goto LABEL_162;
              }
              int v57 = memcmp(v98, v53, v56);
              sub_10001CFB8(v20, v21);
              sub_10001CFB8(v19, v18);
              if (v57) {
                goto LABEL_4;
              }
            }
            else
            {
              uint64_t v78 = *(void *)(v20 + 16);
              uint64_t v79 = *(void *)(v20 + 24);
              swift_retain();
              swift_retain();
              int v80 = (char *)__DataStorage._bytes.getter();
              if (v80)
              {
                uint64_t v81 = __DataStorage._offset.getter();
                if (__OFSUB__(v78, v81)) {
                  goto LABEL_155;
                }
                v80 += v78 - v81;
              }
              if (__OFSUB__(v79, v78)) {
                goto LABEL_150;
              }
              uint64_t v82 = __DataStorage._length.getter();
              if (v82 >= v79 - v78) {
                size_t v83 = v79 - v78;
              }
              else {
                size_t v83 = v82;
              }
              if (!v98) {
                goto LABEL_169;
              }
              a2 = v100;
              uint64_t v12 = v101;
              if (!v80) {
                goto LABEL_170;
              }
              int v84 = memcmp(v98, v80, v83);
              swift_release();
              swift_release();
              sub_10001CFB8(v19, v18);
              if (v84) {
                goto LABEL_4;
              }
            }
          }
          else
          {
            *(void *)__s1 = v20;
            *(_WORD *)&__s1[8] = v21;
            __s1[10] = BYTE2(v21);
            __s1[11] = BYTE3(v21);
            __s1[12] = BYTE4(v21);
            __s1[13] = BYTE5(v21);
            if (!v98) {
              goto LABEL_168;
            }
            int v77 = memcmp(v98, __s1, BYTE6(v21));
            sub_10001CFB8(v19, v18);
            if (v77) {
              goto LABEL_4;
            }
          }
          goto LABEL_115;
        case 2uLL:
          uint64_t v38 = v18 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v39 = *(void *)(v19 + 16);
          swift_retain();
          swift_retain();
          uint64_t v40 = __DataStorage._bytes.getter();
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = __DataStorage._offset.getter();
            if (__OFSUB__(v39, v42)) {
              goto LABEL_139;
            }
            uint64_t v98 = (const void *)(v41 + v39 - v42);
          }
          else
          {
            uint64_t v98 = 0;
          }
          __DataStorage._length.getter();
          a2 = v100;
          uint64_t v12 = v101;
          if (v26)
          {
            if (v26 == 1)
            {
              uint64_t v94 = v38;
              if (v20 >> 32 < (int)v20) {
                goto LABEL_143;
              }
              swift_retain();
              int v48 = (char *)__DataStorage._bytes.getter();
              if (v48)
              {
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v20, v49)) {
                  goto LABEL_154;
                }
                v48 += (int)v20 - v49;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (v50 >= (v20 >> 32) - (int)v20) {
                size_t v51 = (v20 >> 32) - (int)v20;
              }
              else {
                size_t v51 = v50;
              }
              if (!v98) {
                goto LABEL_159;
              }
              a2 = v100;
              if (!v48) {
                goto LABEL_160;
              }
              int v52 = memcmp(v98, v48, v51);
              sub_10001CFB8(v20, v21);
              swift_release();
              swift_release();
              if (v52) {
                goto LABEL_4;
              }
            }
            else
            {
              uint64_t v70 = *(void *)(v20 + 16);
              uint64_t v71 = *(void *)(v20 + 24);
              swift_retain();
              swift_retain();
              size_t v72 = (char *)__DataStorage._bytes.getter();
              if (v72)
              {
                uint64_t v73 = __DataStorage._offset.getter();
                if (__OFSUB__(v70, v73)) {
                  goto LABEL_153;
                }
                v72 += v70 - v73;
              }
              if (__OFSUB__(v71, v70)) {
                goto LABEL_148;
              }
              uint64_t v74 = __DataStorage._length.getter();
              if (v74 >= v71 - v70) {
                size_t v75 = v71 - v70;
              }
              else {
                size_t v75 = v74;
              }
              if (!v98) {
                goto LABEL_166;
              }
              a2 = v100;
              uint64_t v12 = v101;
              if (!v72) {
                goto LABEL_167;
              }
              int v76 = memcmp(v98, v72, v75);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              if (v76) {
                goto LABEL_4;
              }
            }
          }
          else
          {
            *(void *)__s1 = v20;
            *(_WORD *)&__s1[8] = v21;
            __s1[10] = BYTE2(v21);
            __s1[11] = BYTE3(v21);
            __s1[12] = BYTE4(v21);
            __s1[13] = BYTE5(v21);
            if (!v98) {
              goto LABEL_165;
            }
            int v69 = memcmp(v98, __s1, BYTE6(v21));
            swift_release();
            swift_release();
            if (v69) {
              goto LABEL_4;
            }
          }
          goto LABEL_115;
        case 3uLL:
          *(void *)&__s1[6] = 0;
          *(void *)__s1 = 0;
          if (!v26) {
            goto LABEL_42;
          }
          if (v26 == 1)
          {
            uint64_t v30 = (v20 >> 32) - (int)v20;
            if (v20 >> 32 < (int)v20) {
              goto LABEL_142;
            }
            swift_retain();
            uint64_t v43 = __DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_158;
            }
            uint64_t v32 = v43;
            uint64_t v44 = __DataStorage._offset.getter();
            uint64_t v34 = (int)v20 - v44;
            if (__OFSUB__((int)v20, v44)) {
              goto LABEL_147;
            }
            goto LABEL_37;
          }
          uint64_t v64 = *(void *)(v20 + 16);
          uint64_t v65 = *(void *)(v20 + 24);
          swift_retain();
          swift_retain();
          uint64_t v60 = (char *)__DataStorage._bytes.getter();
          if (v60)
          {
            uint64_t v66 = __DataStorage._offset.getter();
            if (__OFSUB__(v64, v66)) {
              goto LABEL_152;
            }
            v60 += v64 - v66;
          }
          int64_t v62 = v65 - v64;
          if (__OFSUB__(v65, v64)) {
            goto LABEL_145;
          }
          uint64_t v63 = __DataStorage._length.getter();
          if (!v60) {
            goto LABEL_164;
          }
          goto LABEL_83;
        default:
          *(void *)__s1 = v19;
          *(_WORD *)&__s1[8] = v18;
          __s1[10] = BYTE2(v18);
          __s1[11] = BYTE3(v18);
          __s1[12] = BYTE4(v18);
          __s1[13] = BYTE5(v18);
          if (v26)
          {
            if (v26 == 1)
            {
              uint64_t v30 = (v20 >> 32) - (int)v20;
              if (v20 >> 32 < (int)v20) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v31 = __DataStorage._bytes.getter();
              if (!v31)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_158:
                __DataStorage._length.getter();
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
                JUMPOUT(0x100DD08E8);
              }
              uint64_t v32 = v31;
              uint64_t v33 = __DataStorage._offset.getter();
              uint64_t v34 = (int)v20 - v33;
              if (__OFSUB__((int)v20, v33)) {
                goto LABEL_146;
              }
LABEL_37:
              uint64_t v45 = __DataStorage._length.getter();
              if (v45 >= v30) {
                size_t v46 = v30;
              }
              else {
                size_t v46 = v45;
              }
              int v47 = memcmp(__s1, (const void *)(v32 + v34), v46);
              sub_10001CFB8(v20, v21);
              a2 = v100;
              uint64_t v12 = v101;
              if (v47) {
                goto LABEL_4;
              }
            }
            else
            {
              uint64_t v58 = *(void *)(v20 + 16);
              uint64_t v59 = *(void *)(v20 + 24);
              swift_retain();
              swift_retain();
              uint64_t v60 = (char *)__DataStorage._bytes.getter();
              if (v60)
              {
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v58, v61)) {
                  goto LABEL_151;
                }
                v60 += v58 - v61;
              }
              int64_t v62 = v59 - v58;
              if (__OFSUB__(v59, v58)) {
                goto LABEL_144;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (!v60) {
                goto LABEL_163;
              }
LABEL_83:
              if (v63 >= v62) {
                size_t v67 = v62;
              }
              else {
                size_t v67 = v63;
              }
              int v68 = memcmp(__s1, v60, v67);
              swift_release();
              swift_release();
              uint64_t v12 = v101;
              if (v68) {
                goto LABEL_4;
              }
            }
          }
          else
          {
LABEL_42:
            uint64_t __s2 = v20;
            __int16 v108 = v21;
            char v109 = BYTE2(v21);
            char v110 = BYTE3(v21);
            char v111 = BYTE4(v21);
            char v112 = BYTE5(v21);
            if (memcmp(__s1, &__s2, BYTE6(v21))) {
              goto LABEL_4;
            }
          }
LABEL_115:
          char v85 = *(unsigned char *)(a2 + 24);
          if (v9[24] == 1)
          {
            if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
              goto LABEL_4;
            }
          }
          else
          {
            if (*((void *)v9 + 2) != *(void *)(a2 + 16)) {
              char v85 = 1;
            }
            if (v85) {
              goto LABEL_4;
            }
          }
          if ((static UUID.== infix(_:_:)() & 1) != 0
            && (static MACAddress.== infix(_:_:)() & 1) != 0
            && v9[v102[8]] == *(unsigned char *)(a2 + v102[8]))
          {
            uint64_t v86 = v102[9];
            uint64_t v87 = *(void *)&v9[v86];
            uint64_t v88 = *(void *)&v9[v86 + 8];
            __int16 v89 = (void *)(a2 + v86);
            BOOL v90 = v87 == *v89 && v88 == v89[1];
            if (v90 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && (sub_100DF6750(*(void *)&v9[v102[10]], *(void *)(a2 + v102[10])) & 1) != 0)
            {
              sub_100DF3958((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
              swift_bridgeObjectRelease();
              sub_100DF3958(a2, type metadata accessor for OwnedBeaconGroup);
              sub_100DF38F0(*(void *)(*v96 + 48) + v103, v97, type metadata accessor for OwnedBeaconGroup);
              return 0;
            }
          }
LABEL_4:
          sub_100DF3958((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
          unint64_t v16 = (v16 + 1) & v104;
          if ((*(void *)(v106 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16)) {
            continue;
          }
          swift_bridgeObjectRelease();
          uint64_t v92 = v97;
          int v3 = v96;
          uint64_t v11 = v95;
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v92 = a1;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100DF38F0(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  *(void *)__s1 = *v3;
  *int v3 = 0x8000000000000000;
  sub_100DE3F28((uint64_t)v11, v16, isUniquelyReferenced_nonNull_native);
  *int v3 = *(void *)__s1;
  swift_bridgeObjectRelease();
  sub_100DF39B8(a2, v92, type metadata accessor for OwnedBeaconGroup);
  return 1;
}

uint64_t sub_100DD0918(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10165F190);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101123B44(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, &qword_10165F1A8, (uint64_t *)&unk_10165F190, (unint64_t *)&unk_101666830);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_101124520(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F190);
  sub_100062734((unint64_t *)&unk_101666830, (uint64_t *)&unk_10165F190);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, &qword_10165F1A8, (uint64_t *)&unk_10165F190, (unint64_t *)&unk_101666830, &qword_10165F1A0);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734(&qword_10165F1A0, (uint64_t *)&unk_10165F190);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD0C34(void *a1, void *a2)
{
  return sub_100DD1340(a1, a2, (uint64_t *)&unk_10165F0A0, type metadata accessor for SPBeaconType);
}

uint64_t sub_100DD0C54(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100E8AF6C(v17, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    char v10 = sub_10072A704(v9, a2);
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v11 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        break;
      }
      uint64_t v12 = swift_bridgeObjectRetain();
      char v13 = sub_10072A704(v12, a2);
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v17[0] = *v2;
  uint64_t *v2 = 0x8000000000000000;
  Swift::Int v16 = swift_bridgeObjectRetain();
  sub_100DE4B50(v16, v8, isUniquelyReferenced_nonNull_native);
  uint64_t *v2 = *(void *)&v17[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100DD0DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a1;
  uint64_t v4 = type metadata accessor for BeaconStatus(0);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  char v10 = (char *)&v41 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (char *)&v41 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v51 = (uint64_t)&v41 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v43 = v2;
  uint64_t v21 = *v2;
  Hasher.init(_seed:)();
  uint64_t v52 = type metadata accessor for UUID();
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v46 = v4;
  uint64_t v52 = a2;
  type metadata accessor for Date();
  sub_100DF3A20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v22 = Hasher._finalize()();
  uint64_t v23 = -1 << *(unsigned char *)(v21 + 32);
  unint64_t v24 = v22 & ~v23;
  uint64_t v25 = v21;
  uint64_t v50 = v21 + 56;
  uint64_t v26 = *(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24;
  uint64_t v42 = v20;
  if (v26)
  {
    uint64_t v47 = ~v23;
    uint64_t v48 = v21;
    uint64_t v49 = *(void *)(v49 + 72);
    uint64_t v45 = v13;
    uint64_t v27 = v52;
    while (1)
    {
      unint64_t v28 = v49 * v24;
      sub_100DF38F0(*(void *)(v25 + 48) + v49 * v24, (uint64_t)v18, type metadata accessor for BeaconStatus);
      char v29 = static UUID.== infix(_:_:)();
      uint64_t v30 = v51;
      sub_100DF38F0((uint64_t)v18, v51, type metadata accessor for BeaconStatus);
      sub_100DF38F0(v27, (uint64_t)v13, type metadata accessor for BeaconStatus);
      if ((v29 & 1) == 0) {
        break;
      }
      char v31 = static Date.== infix(_:_:)();
      sub_100DF3958((uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_100DF3958(v30, type metadata accessor for BeaconStatus);
      sub_100DF38F0((uint64_t)v18, (uint64_t)v10, type metadata accessor for BeaconStatus);
      sub_100DF38F0(v52, (uint64_t)v7, type metadata accessor for BeaconStatus);
      if ((v31 & 1) == 0) {
        goto LABEL_4;
      }
      uint64_t v32 = *(int *)(v46 + 20);
      int v33 = v10[v32];
      int v34 = v7[v32];
      sub_100DF3958((uint64_t)v7, type metadata accessor for BeaconStatus);
      sub_100DF3958((uint64_t)v10, type metadata accessor for BeaconStatus);
      sub_100DF3958((uint64_t)v18, type metadata accessor for BeaconStatus);
      char v13 = v45;
      uint64_t v25 = v48;
      if (v33 == v34)
      {
        swift_bridgeObjectRelease();
        sub_100DF3958(v52, type metadata accessor for BeaconStatus);
        sub_100DF38F0(*(void *)(*v43 + 48) + v28, v44, type metadata accessor for BeaconStatus);
        return 0;
      }
LABEL_5:
      unint64_t v24 = (v24 + 1) & v47;
      if (((*(void *)(v50 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_10;
      }
    }
    sub_100DF3958((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100DF3958(v30, type metadata accessor for BeaconStatus);
    sub_100DF38F0((uint64_t)v18, (uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_100DF38F0(v52, (uint64_t)v7, type metadata accessor for BeaconStatus);
LABEL_4:
    sub_100DF3958((uint64_t)v7, type metadata accessor for BeaconStatus);
    sub_100DF3958((uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_100DF3958((uint64_t)v18, type metadata accessor for BeaconStatus);
    uint64_t v25 = v48;
    goto LABEL_5;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v37 = v43;
  uint64_t v36 = v44;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v52;
  uint64_t v40 = (uint64_t)v42;
  sub_100DF38F0(v52, (uint64_t)v42, type metadata accessor for BeaconStatus);
  uint64_t v53 = *v37;
  *uint64_t v37 = 0x8000000000000000;
  sub_100DE4CE0(v40, v24, isUniquelyReferenced_nonNull_native);
  *uint64_t v37 = v53;
  swift_bridgeObjectRelease();
  sub_100DF39B8(v39, v36, type metadata accessor for BeaconStatus);
  return 1;
}

uint64_t sub_100DD1320(void *a1, void *a2)
{
  return sub_100DD1340(a1, a2, (uint64_t *)&unk_10165F0D0, type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_100DD1340(void *a1, void *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v5 = v4;
  uint64_t v8 = *v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    id v26 = a2;
    sub_100DE1698((uint64_t)v26, v11, isUniquelyReferenced_nonNull_native, a3, a4);
    *uint64_t v5 = v32;
    swift_bridgeObjectRelease();
    *a1 = v26;
    return 1;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = ~v10;
      do
      {
        unint64_t v11 = (v11 + 1) & v18;
        if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_16;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v28 = *(void **)(*(void *)(*v5 + 48) + 8 * v11);
  *a1 = v28;
  id v29 = v28;
  return 0;
}

uint64_t sub_100DD1574(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123B74(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10165F0B0);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F0B0, (unint64_t *)&unk_10164DC30);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD1834(uint64_t a1, char *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for Destination();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100DF3A20(&qword_10165F080, (void (*)(uint64_t))&type metadata accessor for Destination);
  swift_bridgeObjectRetain();
  int v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    id v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100DF3A20(&qword_10165F088, (void (*)(uint64_t))&type metadata accessor for Destination);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::Int v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DE551C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100DD1B58(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DE57D8(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DD1C78(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165EFB8);
}

uint64_t sub_100DD1C8C(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101123BA4(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_100DDB970();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1011246A4(a2, v17);
    *int v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  sub_100DF3A20((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE593C(v15, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100DF3A20((unint64_t *)&unk_10166C2C0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD1F88(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, &qword_10164DCA0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123DE0(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10165F230);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, &qword_10164DCA0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F230, &qword_10164DCA0);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD2248(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, &qword_10164DC58);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123E10(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, (uint64_t *)&unk_10165F220);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, &qword_10164DC58);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F220, &qword_10164DC58);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD2508(uint64_t *a1, uint64_t a2)
{
  return sub_100DD251C(a1, a2, (uint64_t *)&unk_10165F0E0);
}

uint64_t sub_100DD251C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static Hasher._hash(seed:_:)();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_100DE126C(a2, v11, isUniquelyReferenced_nonNull_native, a3);
    *uint64_t v5 = v16;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(v8 + 48);
  if (*(void *)(v12 + 8 * v11) != a2)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v13;
      if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v12 + 8 * v11) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DD2630(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, &qword_10164D830);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123E40(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, &qword_10165F240);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, &qword_10164D830);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10165F240, &qword_10164D830);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD28F0(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165F1E8);
}

uint64_t sub_100DD2904(unsigned char *a1, Swift::Int a2, uint64_t *a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DDF218(a2, v10, isUniquelyReferenced_nonNull_native, a3);
    *int v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(unsigned __int8 *)(v11 + v10) != a2)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v11 + v10) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v3 + 48) + v10);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DD2A3C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for BeaconIdentifier();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  Swift::Int v24 = (char *)&v20 - v10;
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    id v21 = v2;
    uint64_t v22 = a1;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v23 + 72);
    do
    {
      sub_100DF38F0(*(void *)(v11 + 48) + v16 * v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)())
      {
        sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        swift_bridgeObjectRelease();
        sub_100DF3958(a2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        sub_100DF38F0(*(void *)(*v21 + 48) + v16 * v14, v22, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        return 0;
      }
      sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    swift_bridgeObjectRelease();
    int v3 = v21;
    a1 = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)v24;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100DF38F0(a2, v18, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v25 = *v3;
  *int v3 = 0x8000000000000000;
  sub_100DE5B3C(v18, v14, isUniquelyReferenced_nonNull_native);
  *int v3 = v25;
  swift_bridgeObjectRelease();
  sub_100DF39B8(a2, a1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  return 1;
}

uint64_t sub_100DD2D64(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_100DD5448(a1, a2, a3, a4, (uint64_t *)&unk_10165EF60, &qword_101650650);
}

uint64_t sub_100DD2DCC(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10165F610);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101123E70(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10165F100, (uint64_t *)&unk_10165F610, &qword_10165F0F0);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_10112478C(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F610);
  sub_100062734(&qword_10165F0F0, (uint64_t *)&unk_10165F610);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F100, (uint64_t *)&unk_10165F610, &qword_10165F0F0, &qword_10165F0F8);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734(&qword_10165F0F8, (uint64_t *)&unk_10165F610);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD30E8(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&unk_10166BF80);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_101123EA0(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, &qword_10165EF70);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&unk_10166BF80);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10165EF70, (unint64_t *)&unk_10166BF80);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD33A8(_DWORD *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100DE5E44(a2, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100DD34AC(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10163F360);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101123ED0(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10165F1C0, (uint64_t *)&unk_10163F360, (unint64_t *)&unk_10165F1D0);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_1011247A0(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10163F360);
  sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F1C0, (uint64_t *)&unk_10163F360, (unint64_t *)&unk_10165F1D0, (unint64_t *)&unk_10166C2A0);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734((unint64_t *)&unk_10166C2A0, (uint64_t *)&unk_10163F360);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD37C8(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Service();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = sub_101123F00(v7, result + 1);
    Swift::Int v22 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      sub_100DDC620();
      uint64_t v19 = v22;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    sub_1011247B4(a2, v19);
    *int v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    NSObject.hash(into:)();
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v14 + 8 * v13) + 32) == v10)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v14 + 8 * v13) + 32) == v10) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v17 = swift_retain();
    sub_100DE5F6C(v17, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100DD3A38(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Characteristic();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = sub_101124114(v7, result + 1);
    Swift::Int v22 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      sub_100DDC8E8();
      uint64_t v19 = v22;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    sub_101124864(a2, v19);
    *int v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    NSObject.hash(into:)();
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v14 + 8 * v13) + 40) == v10)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v14 + 8 * v13) + 40) == v10) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v17 = swift_retain();
    sub_100DE60E4(v17, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100DD3CA8(unsigned char *a1, Swift::Int a2)
{
  return sub_100DD2904(a1, a2, &qword_10165F178);
}

uint64_t sub_100DD3CBC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v46 = v6 + 56;
  uint64_t v41 = v3;
  uint64_t v42 = a1;
  if ((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v43 = ~v10;
    uint64_t v44 = *(void *)(v6 + 48);
    do
    {
      uint64_t v12 = v44 + 88 * v11;
      uint64_t v14 = *(void *)(v12 + 16);
      uint64_t v13 = *(void *)(v12 + 24);
      int v15 = *(unsigned __int8 *)(v12 + 32);
      uint64_t v17 = *(void *)(v12 + 40);
      uint64_t v16 = *(void *)(v12 + 48);
      uint64_t v18 = *(void *)(v12 + 56);
      uint64_t v19 = *(void *)(v12 + 64);
      uint64_t v20 = *(void *)(v12 + 80);
      uint64_t v45 = *(void *)(v12 + 72);
      BOOL v21 = *(void *)v12 == v48 && *(void *)(v12 + 8) == v47;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_4;
      }
      BOOL v22 = v14 == *(void *)(a2 + 16) && v13 == *(void *)(a2 + 24);
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || ((v15 ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0)
      {
        goto LABEL_4;
      }
      uint64_t v23 = *(void *)(a2 + 48);
      if (v16)
      {
        if (!v23) {
          goto LABEL_4;
        }
        BOOL v24 = v17 == *(void *)(a2 + 40) && v16 == v23;
        if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_4;
        }
      }
      else if (v23)
      {
        goto LABEL_4;
      }
      uint64_t v25 = *(void *)(a2 + 64);
      if (v19)
      {
        if (!v25) {
          goto LABEL_4;
        }
        BOOL v26 = v18 == *(void *)(a2 + 56) && v19 == v25;
        if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_4;
        }
      }
      else if (v25)
      {
        goto LABEL_4;
      }
      uint64_t v27 = *(void *)(a2 + 80);
      if (v20)
      {
        if (v27)
        {
          BOOL v28 = v45 == *(void *)(a2 + 72) && v20 == v27;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_41:
            swift_bridgeObjectRelease();
            sub_100DF3884(a2);
            uint64_t v29 = *(void *)(*v41 + 48) + 88 * v11;
            uint64_t v30 = *(void *)(v29 + 8);
            uint64_t v31 = *(void *)(v29 + 16);
            uint64_t v32 = *(void *)(v29 + 24);
            char v33 = *(unsigned char *)(v29 + 32);
            uint64_t v34 = *(void *)(v29 + 40);
            uint64_t v35 = *(void *)(v29 + 80);
            *(void *)uint64_t v42 = *(void *)v29;
            *(void *)(v42 + 8) = v30;
            *(void *)(v42 + 16) = v31;
            *(void *)(v42 + 24) = v32;
            *(unsigned char *)(v42 + 32) = v33;
            *(void *)(v42 + 40) = v34;
            long long v36 = *(_OWORD *)(v29 + 64);
            *(_OWORD *)(v42 + 48) = *(_OWORD *)(v29 + 48);
            *(_OWORD *)(v42 + 64) = v36;
            *(void *)(v42 + 80) = v35;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            return 0;
          }
        }
      }
      else if (!v27)
      {
        goto LABEL_41;
      }
LABEL_4:
      unint64_t v11 = (v11 + 1) & v43;
    }
    while (((*(void *)(v46 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = *v41;
  *uint64_t v41 = 0x8000000000000000;
  sub_100DF3818(a2);
  sub_100DE625C(a2, v11, isUniquelyReferenced_nonNull_native);
  *uint64_t v41 = v49;
  swift_bridgeObjectRelease();
  long long v39 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v42 + 48) = v39;
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v42 + 80) = *(void *)(a2 + 80);
  long long v40 = *(_OWORD *)(a2 + 16);
  uint64_t result = 1;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)a2;
  *(_OWORD *)(v42 + 16) = v40;
  return result;
}

uint64_t sub_100DD3FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  v43[0] = a2[2];
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::UInt v7 = *(void *)(v43[0] + 16);
  Hasher._combine(_:)(v7);
  uint64_t v8 = *(void *)(v43[0] + 16);
  if (v8)
  {
    uint64_t v9 = v43[0] + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v9 += 16;
      --v8;
    }
    while (v8);
  }
  Swift::Int v34 = (Swift::Int)a2;
  uint64_t v37 = a2[4];
  uint64_t v38 = a2[3];
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v41 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = *v35;
    *uint64_t v35 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_10048307C((uint64_t)v43);
    swift_bridgeObjectRetain();
    sub_100DE6518(v34, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v35 = v42;
    swift_bridgeObjectRelease();
    long long v28 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v34;
    *(_OWORD *)(a1 + 16) = v28;
    *(void *)(a1 + 32) = *(void *)(v34 + 32);
    return 1;
  }
  uint64_t v39 = ~v11;
  uint64_t v40 = *(void *)(v6 + 48);
  while (1)
  {
    uint64_t v13 = (uint64_t *)(v40 + 40 * v12);
    uint64_t result = *v13;
    uint64_t v16 = (void *)v13[2];
    uint64_t v15 = v13[3];
    uint64_t v17 = v13[4];
    if (*v13 != v5 || v13[1] != v4)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_7;
      }
    }
    if (v16[2] != v7) {
      goto LABEL_7;
    }
    if (!v7 || v16 == (void *)v43[0]) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v43[0] + 16);
    if (!v19) {
      goto LABEL_47;
    }
    uint64_t result = v16[4];
    BOOL v20 = result == *(void *)(v43[0] + 32) && v16[5] == *(void *)(v43[0] + 40);
    if (v20 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      if (v7 == 1) {
        goto LABEL_30;
      }
      unint64_t v21 = v19 - 2;
      if (v19 < 2) {
        goto LABEL_48;
      }
      uint64_t result = v16[6];
      if (result == *(void *)(v43[0] + 48) && v16[7] == *(void *)(v43[0] + 56)) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v39;
    if (((*(void *)(v41 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_43;
    }
  }
  if (v7 == 2)
  {
LABEL_30:
    if (v15 == v38 && v17 == v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10025C634((uint64_t)v43);
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)(*(void *)(*v35 + 48) + 40 * v12);
      uint64_t v30 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v31 = v29[3];
      uint64_t v33 = v29[4];
      *(void *)a1 = *v29;
      *(void *)(a1 + 8) = v30;
      *(void *)(a1 + 16) = v32;
      *(void *)(a1 + 24) = v31;
      *(void *)(a1 + 32) = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    goto LABEL_7;
  }
  uint64_t v23 = v16 + 9;
  BOOL v24 = (void *)(v43[0] + 72);
  Swift::UInt v25 = v7 - 2;
  while (v25)
  {
    if (!v21) {
      goto LABEL_46;
    }
    uint64_t result = *(v23 - 1);
    if (result != *(v24 - 1) || *v23 != *v24)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_7;
      }
    }
    --v21;
    v24 += 2;
    v23 += 2;
    if (!--v25) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100DD4378(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C(&qword_10163D250);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101124328(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, &qword_10165EFC0, &qword_10163D250, (unint64_t *)&qword_101649B80);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_101124914(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_10163D250);
  sub_100062734((unint64_t *)&qword_101649B80, &qword_10163D250);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, &qword_10165EFC0, &qword_10163D250, (unint64_t *)&qword_101649B80, &qword_10165F248);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734(&qword_10165F248, &qword_10163D250);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD4694(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C(&qword_101656E30);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101124358(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, &qword_10165F120, &qword_101656E30, (unint64_t *)&qword_10165F110);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_101124928(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101656E30);
  sub_100062734((unint64_t *)&qword_10165F110, &qword_101656E30);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, &qword_10165F120, &qword_101656E30, (unint64_t *)&qword_10165F110, &qword_10165F118);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734(&qword_10165F118, &qword_101656E30);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD49B0(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10165F5F0);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_101124388(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10165F060, (uint64_t *)&unk_10165F5F0, (unint64_t *)&unk_10165F050);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_10112493C(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F5F0);
  sub_100062734((unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165F060, (uint64_t *)&unk_10165F5F0, (unint64_t *)&unk_10165F050, (unint64_t *)&unk_10166CFC0);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734((unint64_t *)&unk_10166CFC0, (uint64_t *)&unk_10165F5F0);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD4CCC(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1011243B8(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_100DDD5B4(v27, &qword_10165F038);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_10112442C(v8, v24);
    *int v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100DE0F20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10165F038, (unint64_t *)&unk_10165F040);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100DD4F8C(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10166BF50);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_1011243E8(v7, result + 1);
    uint64_t v22 = v16;
    unint64_t v17 = *(void *)(v16 + 16);
    if (*(void *)(v16 + 24) <= v17)
    {
      uint64_t v19 = v17 + 1;
      swift_retain();
      sub_100DD77E8(v19, (uint64_t *)&unk_10165EF20, (uint64_t *)&unk_10166BF50, (unint64_t *)&unk_10165EF30);
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v16;
      swift_retain();
    }
    sub_1011249D4(a2, v18);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10166BF50);
  sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100DE6864(v15, v12, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10165EF20, (uint64_t *)&unk_10166BF50, (unint64_t *)&unk_10165EF30, (unint64_t *)&unk_10166BF60);
    uint64_t *v2 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100062734((unint64_t *)&unk_10166BF60, (uint64_t *)&unk_10166BF50);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100DD52A8(_DWORD *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      uint64_t v11 = (int *)(*(void *)(v6 + 48) + 8 * v9);
      int v13 = *v11;
      int v12 = v11[1];
      if (v13 == v3 && v12 == v5) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    unint64_t v17 = (_DWORD *)(*(void *)(*v2 + 48) + 8 * v9);
    LODWORD(v3) = *v17;
    LODWORD(v5) = v17[1];
  }
  else
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100DE6A54(v3, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t sub_100DD53E0(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_100DD5448(a1, a2, a3, a4, (uint64_t *)&unk_10165EFE0, &qword_1016506A0);
}

uint64_t sub_100DD5448(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  Data.hash(into:)();
  sub_10001CFB8(a2, a3);
  Hasher._combine(_:)(a4);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v95 = v12;
  uint64_t v93 = v12 + 56;
  Swift::UInt32 v91 = a4;
  char v85 = a6;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    unint64_t v16 = a3 >> 62;
    uint64_t v92 = ~v14;
    BOOL v17 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v88 = v17;
    size_t __n = BYTE6(a3);
    unint64_t v90 = a3;
    uint64_t v83 = (a2 >> 32) - (int)a2;
    uint64_t v84 = a2 >> 32;
    while (1)
    {
      uint64_t v18 = *(void *)(v95 + 48) + 24 * v15;
      uint64_t v20 = *(void *)v18;
      unint64_t v19 = *(void *)(v18 + 8);
      int v21 = *(_DWORD *)(v18 + 16);
      uint64_t v22 = 0;
      switch(v19 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v20), v20))
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
          }
          uint64_t v22 = HIDWORD(v20) - (int)v20;
LABEL_14:
          sub_1000361E0(v20, v19);
          sub_1000361E0(v20, v19);
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(v20 + 16);
          uint64_t v23 = *(void *)(v20 + 24);
          uint64_t v22 = v23 - v24;
          if (!__OFSUB__(v23, v24)) {
            goto LABEL_14;
          }
          goto LABEL_121;
        case 3uLL:
          break;
        default:
          uint64_t v22 = BYTE6(v19);
          break;
      }
      size_t v25 = __n;
      switch((int)v16)
      {
        case 1:
          size_t v25 = HIDWORD(a2) - (int)a2;
          if (v88) {
            goto LABEL_122;
          }
          goto LABEL_19;
        case 2:
          uint64_t v27 = *(void *)(a2 + 16);
          uint64_t v26 = *(void *)(a2 + 24);
          BOOL v28 = __OFSUB__(v26, v27);
          size_t v25 = v26 - v27;
          if (!v28) {
            goto LABEL_19;
          }
          goto LABEL_123;
        case 3:
          if (v22) {
            goto LABEL_7;
          }
          goto LABEL_29;
        default:
LABEL_19:
          if (v22 == v25)
          {
            if (v22 < 1)
            {
LABEL_29:
              sub_10001CFB8(v20, v19);
              sub_10001CFB8(v20, v19);
              if (v21 == v91) {
                goto LABEL_118;
              }
            }
            else
            {
              int v89 = v21;
              switch(v19 >> 62)
              {
                case 1uLL:
                  if ((int)v20 > v20 >> 32) {
                    goto LABEL_124;
                  }
                  sub_1000361E0(a2, v90);
                  uint64_t v33 = (char *)__DataStorage._bytes.getter();
                  if (!v33) {
                    goto LABEL_35;
                  }
                  uint64_t v34 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v20, v34)) {
                    goto LABEL_126;
                  }
                  v33 += (int)v20 - v34;
LABEL_35:
                  __DataStorage._length.getter();
                  a3 = v90;
                  if (!v16)
                  {
                    *(void *)__s1 = a2;
                    *(_WORD *)&__s1[8] = v90;
                    *(_DWORD *)&__s1[10] = *(_DWORD *)((char *)&v90 + 2);
                    if (!v33) {
                      goto LABEL_154;
                    }
                    int v39 = memcmp(v33, __s1, __n);
                    goto LABEL_102;
                  }
                  if (v16 == 1)
                  {
                    if (v84 < (int)a2) {
                      goto LABEL_135;
                    }
                    swift_retain();
                    uint64_t v35 = (char *)__DataStorage._bytes.getter();
                    if (v35)
                    {
                      uint64_t v36 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)a2, v36)) {
                        goto LABEL_142;
                      }
                      v35 += (int)a2 - v36;
                    }
                    uint64_t v37 = __DataStorage._length.getter();
                    size_t v38 = (a2 >> 32) - (int)a2;
                    if (v37 < v83) {
                      size_t v38 = v37;
                    }
                    if (!v33) {
                      goto LABEL_144;
                    }
                    if (!v35) {
                      goto LABEL_145;
                    }
                    int v39 = memcmp(v33, v35, v38);
                    a3 = v90;
                    sub_10001CFB8(a2, v90);
                    goto LABEL_102;
                  }
                  uint64_t v69 = *(void *)(a2 + 16);
                  uint64_t v82 = *(char **)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v70 = (char *)__DataStorage._bytes.getter();
                  if (v70)
                  {
                    uint64_t v71 = __DataStorage._offset.getter();
                    if (__OFSUB__(v69, v71)) {
                      goto LABEL_141;
                    }
                    v70 += v69 - v71;
                  }
                  BOOL v28 = __OFSUB__(v82, v69);
                  size_t v72 = &v82[-v69];
                  if (v28) {
                    goto LABEL_136;
                  }
                  uint64_t v73 = __DataStorage._length.getter();
                  if (v73 >= (uint64_t)v72) {
                    size_t v74 = (size_t)v72;
                  }
                  else {
                    size_t v74 = v73;
                  }
                  if (!v33) {
                    goto LABEL_155;
                  }
                  if (!v70) {
                    goto LABEL_156;
                  }
                  int v39 = memcmp(v33, v70, v74);
LABEL_113:
                  swift_release();
                  swift_release();
LABEL_114:
                  uint64_t v68 = a2;
                  a3 = v90;
                  goto LABEL_115;
                case 2uLL:
                  uint64_t v40 = *(void *)(v20 + 16);
                  sub_1000361E0(a2, a3);
                  swift_retain();
                  swift_retain();
                  uint64_t v41 = __DataStorage._bytes.getter();
                  if (v41)
                  {
                    uint64_t v42 = v41;
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v40, v43)) {
                      goto LABEL_125;
                    }
                    uint64_t v81 = (void *)(v42 + v40 - v43);
                  }
                  else
                  {
                    uint64_t v81 = 0;
                  }
                  __DataStorage._length.getter();
                  a3 = v90;
                  if (!v16)
                  {
                    *(void *)__s1 = a2;
                    *(_WORD *)&__s1[8] = v90;
                    *(_DWORD *)&__s1[10] = *(_DWORD *)((char *)&v90 + 2);
                    if (!v81) {
                      goto LABEL_151;
                    }
                    int v39 = memcmp(v81, __s1, __n);
LABEL_88:
                    swift_release();
                    goto LABEL_99;
                  }
                  if (v16 == 1)
                  {
                    if (v84 < (int)a2) {
                      goto LABEL_131;
                    }
                    swift_retain();
                    uint64_t v48 = (char *)__DataStorage._bytes.getter();
                    if (v48)
                    {
                      uint64_t v49 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)a2, v49)) {
                        goto LABEL_140;
                      }
                      v48 += (int)a2 - v49;
                    }
                    uint64_t v50 = __DataStorage._length.getter();
                    size_t v51 = (a2 >> 32) - (int)a2;
                    if (v50 < v83) {
                      size_t v51 = v50;
                    }
                    if (!v81) {
                      goto LABEL_147;
                    }
                    if (!v48) {
                      goto LABEL_148;
                    }
                    int v39 = memcmp(v81, v48, v51);
                    sub_10001CFB8(a2, v90);
                    goto LABEL_88;
                  }
                  uint64_t v62 = *(void *)(a2 + 16);
                  uint64_t v80 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v63 = (char *)__DataStorage._bytes.getter();
                  if (v63)
                  {
                    uint64_t v64 = __DataStorage._offset.getter();
                    if (__OFSUB__(v62, v64)) {
                      goto LABEL_139;
                    }
                    v63 += v62 - v64;
                  }
                  BOOL v28 = __OFSUB__(v80, v62);
                  int64_t v65 = v80 - v62;
                  if (v28) {
                    goto LABEL_134;
                  }
                  uint64_t v66 = __DataStorage._length.getter();
                  if (v66 >= v65) {
                    size_t v67 = v65;
                  }
                  else {
                    size_t v67 = v66;
                  }
                  if (!v81) {
                    goto LABEL_152;
                  }
                  a3 = v90;
                  if (!v63) {
                    goto LABEL_153;
                  }
                  int v39 = memcmp(v81, v63, v67);
                  swift_release();
                  swift_release();
                  swift_release();
LABEL_99:
                  swift_release();
LABEL_102:
                  uint64_t v68 = a2;
LABEL_115:
                  sub_10001CFB8(v68, a3);
LABEL_116:
                  sub_10001CFB8(v20, v19);
                  sub_10001CFB8(v20, v19);
                  if (!v39 && v89 == v91)
                  {
LABEL_118:
                    swift_bridgeObjectRelease();
                    sub_10001CFB8(a2, a3);
                    uint64_t v75 = *(void *)(*(void *)v86 + 48) + 24 * v15;
                    uint64_t v76 = *(void *)v75;
                    unint64_t v77 = *(void *)(v75 + 8);
                    LODWORD(v75) = *(_DWORD *)(v75 + 16);
                    *(void *)a1 = v76;
                    *(void *)(a1 + 8) = v77;
                    *(_DWORD *)(a1 + 16) = v75;
                    sub_1000361E0(v76, v77);
                    return 0;
                  }
                  break;
                case 3uLL:
                  *(void *)&__s1[6] = 0;
                  *(void *)__s1 = 0;
                  if (!v16) {
                    goto LABEL_58;
                  }
                  if (v16 == 1)
                  {
                    if (v84 < (int)a2) {
                      goto LABEL_128;
                    }
                    sub_1000361E0(a2, v90);
                    uint64_t v44 = __DataStorage._bytes.getter();
                    if (!v44) {
                      goto LABEL_146;
                    }
                    uint64_t v30 = v44;
                    uint64_t v45 = __DataStorage._offset.getter();
                    uint64_t v32 = (int)a2 - v45;
                    if (__OFSUB__((int)a2, v45)) {
                      goto LABEL_130;
                    }
LABEL_54:
                    uint64_t v46 = __DataStorage._length.getter();
                    if (v46 >= v83) {
                      size_t v47 = (a2 >> 32) - (int)a2;
                    }
                    else {
                      size_t v47 = v46;
                    }
                    int v39 = memcmp(__s1, (const void *)(v30 + v32), v47);
                    goto LABEL_114;
                  }
                  uint64_t v58 = *(void *)(a2 + 16);
                  uint64_t v59 = *(void *)(a2 + 24);
                  sub_1000361E0(a2, v90);
                  swift_retain();
                  swift_retain();
                  uint64_t v54 = (char *)__DataStorage._bytes.getter();
                  if (v54)
                  {
                    uint64_t v60 = __DataStorage._offset.getter();
                    if (__OFSUB__(v58, v60)) {
                      goto LABEL_138;
                    }
                    v54 += v58 - v60;
                  }
                  BOOL v28 = __OFSUB__(v59, v58);
                  int64_t v56 = v59 - v58;
                  if (v28) {
                    goto LABEL_133;
                  }
                  uint64_t v57 = __DataStorage._length.getter();
                  if (!v54) {
                    goto LABEL_150;
                  }
LABEL_82:
                  if (v57 >= v56) {
                    size_t v61 = v56;
                  }
                  else {
                    size_t v61 = v57;
                  }
                  int v39 = memcmp(__s1, v54, v61);
                  goto LABEL_113;
                default:
                  *(void *)__s1 = v20;
                  *(_WORD *)&__s1[8] = v19;
                  __s1[10] = BYTE2(v19);
                  __s1[11] = BYTE3(v19);
                  __s1[12] = BYTE4(v19);
                  __s1[13] = BYTE5(v19);
                  if (!v16)
                  {
LABEL_58:
                    uint64_t __s2 = a2;
                    __int16 v97 = a3;
                    char v98 = BYTE2(a3);
                    char v99 = BYTE3(a3);
                    char v100 = BYTE4(a3);
                    char v101 = BYTE5(a3);
                    int v39 = memcmp(__s1, &__s2, __n);
                    goto LABEL_116;
                  }
                  if (v16 == 1)
                  {
                    if (v84 < (int)a2) {
                      goto LABEL_127;
                    }
                    sub_1000361E0(a2, v90);
                    uint64_t v29 = __DataStorage._bytes.getter();
                    if (!v29)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_144:
                      __break(1u);
LABEL_145:
                      __break(1u);
LABEL_146:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_147:
                      __break(1u);
LABEL_148:
                      __break(1u);
LABEL_149:
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
LABEL_152:
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
LABEL_155:
                      __break(1u);
LABEL_156:
                      __break(1u);
                      JUMPOUT(0x100DD5F10);
                    }
                    uint64_t v30 = v29;
                    uint64_t v31 = __DataStorage._offset.getter();
                    uint64_t v32 = (int)a2 - v31;
                    if (__OFSUB__((int)a2, v31)) {
                      goto LABEL_129;
                    }
                    goto LABEL_54;
                  }
                  uint64_t v52 = *(void *)(a2 + 16);
                  uint64_t v53 = *(void *)(a2 + 24);
                  sub_1000361E0(a2, v90);
                  swift_retain();
                  swift_retain();
                  uint64_t v54 = (char *)__DataStorage._bytes.getter();
                  if (v54)
                  {
                    uint64_t v55 = __DataStorage._offset.getter();
                    if (__OFSUB__(v52, v55)) {
                      goto LABEL_137;
                    }
                    v54 += v52 - v55;
                  }
                  BOOL v28 = __OFSUB__(v53, v52);
                  int64_t v56 = v53 - v52;
                  if (v28) {
                    goto LABEL_132;
                  }
                  uint64_t v57 = __DataStorage._length.getter();
                  if (!v54) {
                    goto LABEL_149;
                  }
                  goto LABEL_82;
              }
            }
          }
          else
          {
LABEL_7:
            sub_10001CFB8(v20, v19);
            sub_10001CFB8(v20, v19);
          }
          unint64_t v15 = (v15 + 1) & v92;
          if (((*(void *)(v93 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            goto LABEL_119;
          }
          break;
      }
    }
  }
LABEL_119:
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)__s1 = *(void *)v86;
  *(void *)uint64_t v86 = 0x8000000000000000;
  sub_1000361E0(a2, a3);
  sub_100DE6BB8(a2, a3, v91, v15, isUniquelyReferenced_nonNull_native, a5, v85);
  *(void *)uint64_t v86 = *(void *)__s1;
  swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t result = 1;
  *(_DWORD *)(a1 + 16) = v91;
  return result;
}

uint64_t sub_100DD5F40()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000588C(&qword_101659178);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100DD633C(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10166C2B0, (uint64_t *)&unk_10165F1F0, (unint64_t *)&unk_101666860);
}

uint64_t sub_100DD6358()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F288);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x100DD6740);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD6764()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F030);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD6A44()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F150);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      sub_1000361E0(v20, v21);
      Data.hash(into:)();
      sub_10001CFB8(v20, v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD6D3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EF50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD6FD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  uint64_t v37 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F018);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v35 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v33 = v0;
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v34) {
          goto LABEL_36;
        }
        unint64_t v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v34) {
              goto LABEL_36;
            }
            unint64_t v19 = v35[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v33;
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v35 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v34) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v35[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v5 + 48);
      uint64_t v22 = *(void *)(v37 + 72);
      sub_100DF39B8(v21 + v22 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      Hasher.init(_seed:)();
      uint64_t v23 = *v4;
      unint64_t v24 = v4[1];
      sub_1000361E0(*v4, v24);
      Data.hash(into:)();
      sub_10001CFB8(v23, v24);
      type metadata accessor for UUID();
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(*(uint64_t *)((char *)v4 + *(int *)(v2 + 28)));
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (*(uint64_t *)((char *)v4 + *(int *)(v2 + 36) + 8))
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v22, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DD74A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_1016591B0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v31 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v16 = v32[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      Swift::UInt v22 = *(unsigned __int8 *)(v19 + 16);
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      *(unsigned char *)(v12 + 16) = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD77C0(uint64_t a1)
{
  return sub_100DDD5B4(a1, &qword_10165EF88);
}

uint64_t sub_100DD77CC(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10166C2D0, (uint64_t *)&unk_10163B860, &qword_10165F6F0);
}

uint64_t sub_100DD77E8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v7 = *v4;
  sub_10000588C(a2);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v33 = (void *)(v7 + 56);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v7 + 56);
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = v33[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v20 = v33[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v20 = v33[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v6 = v4;
                uint64_t v31 = 1 << *(unsigned char *)(v7 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v31;
                }
                *(void *)(v7 + 16) = 0;
                break;
              }
              unint64_t v20 = v33[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v33[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = v7;
      uint64_t v23 = *(void *)(*(void *)(v7 + 48) + 8 * v18);
      sub_10000588C(a3);
      sub_100062734(a4, a3);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v24 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v9 + 48) + 8 * v16) = v23;
      ++*(void *)(v9 + 16);
      uint64_t v7 = v22;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v6 = v9;
  return result;
}

uint64_t sub_100DD7B0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_1016592F8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD7DEC(uint64_t a1)
{
  return sub_100DDD5B4(a1, &qword_10165EFB0);
}

uint64_t sub_100DD7DF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_1016592F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v31 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v16 = v32[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      int64_t v19 = (unsigned __int8 *)(*(void *)(v2 + 48) + 24 * v14);
      Swift::UInt v20 = *v19;
      uint64_t v21 = *((void *)v19 + 1);
      uint64_t v22 = *((void *)v19 + 2);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(unsigned char *)uint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      *(void *)(v12 + 16) = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD8124(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), void (*a5)(char *))
{
  uint64_t v35 = a5;
  uint64_t v8 = v5;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *v5;
  sub_10000588C(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (*(void *)(v13 + 16))
  {
    uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
    uint64_t v17 = *(void *)(v13 + 56);
    int64_t v32 = v5;
    uint64_t v33 = (void *)(v13 + 56);
    if (v16 < 64) {
      uint64_t v18 = ~(-1 << v16);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & v17;
    int64_t v34 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v20 = v14 + 56;
    uint64_t result = swift_retain();
    int64_t v22 = 0;
    while (1)
    {
      if (v19)
      {
        unint64_t v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v24 = v23 | (v22 << 6);
      }
      else
      {
        int64_t v27 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v27 >= v34) {
          goto LABEL_23;
        }
        unint64_t v28 = v33[v27];
        ++v22;
        if (!v28)
        {
          int64_t v22 = v27 + 1;
          if (v27 + 1 >= v34) {
            goto LABEL_23;
          }
          unint64_t v28 = v33[v22];
          if (!v28)
          {
            int64_t v22 = v27 + 2;
            if (v27 + 2 >= v34) {
              goto LABEL_23;
            }
            unint64_t v28 = v33[v22];
            if (!v28)
            {
              int64_t v29 = v27 + 3;
              if (v29 >= v34)
              {
LABEL_23:
                swift_release();
                uint64_t v30 = 1 << *(unsigned char *)(v13 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v30;
                }
                uint64_t v8 = v32;
                *(void *)(v13 + 16) = 0;
                break;
              }
              unint64_t v28 = v33[v29];
              if (!v28)
              {
                while (1)
                {
                  int64_t v22 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_29;
                  }
                  if (v22 >= v34) {
                    goto LABEL_23;
                  }
                  unint64_t v28 = v33[v22];
                  ++v29;
                  if (v28) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v22 = v29;
            }
          }
        }
LABEL_22:
        unint64_t v19 = (v28 - 1) & v28;
        unint64_t v24 = __clz(__rbit64(v28)) + (v22 << 6);
      }
      uint64_t v25 = *(void *)(v10 + 72);
      sub_100DF39B8(*(void *)(v13 + 48) + v25 * v24, (uint64_t)v12, a4);
      Hasher.init(_seed:)();
      v35(v36);
      Hasher._finalize()();
      unint64_t v26 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v20 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      uint64_t result = sub_100DF39B8((uint64_t)v12, *(void *)(v15 + 48) + v26 * v25, a4);
      ++*(void *)(v15 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v8 = v15;
  return result;
}

uint64_t sub_100DD8440(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10165EF40);
}

uint64_t sub_100DD844C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_101659328);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x100DD89B8);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD8A10(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10166C260);
}

uint64_t sub_100DD8A1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EFA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(char *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(qword_10137E740[v18]);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD8CD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v32 = *((void *)v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *v0;
  sub_10000588C(&qword_1016592B8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    unint64_t v28 = v0;
    int64_t v29 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v30 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v31 = v6 + 56;
    uint64_t v33 = v5;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v22 >= v30) {
          goto LABEL_23;
        }
        unint64_t v23 = v29[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v30) {
            goto LABEL_23;
          }
          unint64_t v23 = v29[v13];
          if (!v23)
          {
            int64_t v13 = v22 + 2;
            if (v22 + 2 >= v30) {
              goto LABEL_23;
            }
            unint64_t v23 = v29[v13];
            if (!v23)
            {
              int64_t v24 = v22 + 3;
              if (v24 >= v30)
              {
LABEL_23:
                uint64_t v25 = v33;
                swift_release();
                uint64_t v26 = 1 << *(unsigned char *)(v25 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v29 = -1 << v26;
                }
                uint64_t v1 = v28;
                *(void *)(v25 + 16) = 0;
                break;
              }
              unint64_t v23 = v29[v24];
              if (!v23)
              {
                while (1)
                {
                  int64_t v13 = v24 + 1;
                  if (__OFADD__(v24, 1)) {
                    goto LABEL_30;
                  }
                  if (v13 >= v30) {
                    goto LABEL_23;
                  }
                  unint64_t v23 = v29[v13];
                  ++v24;
                  if (v23) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v13 = v24;
            }
          }
        }
LABEL_22:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v15 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v16 = *(void *)(v32 + 72);
      sub_100DF39B8(*(void *)(v33 + 48) + v16 * v15, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      Hasher.init(_seed:)();
      uint64_t v17 = *v4;
      unint64_t v18 = v4[1];
      sub_1000361E0(*v4, v18);
      Data.hash(into:)();
      sub_10001CFB8(v17, v18);
      type metadata accessor for UUID();
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(*((unsigned __int8 *)v4 + v2[7]));
      uint64_t v19 = *(uint64_t *)((char *)v4 + v2[8]);
      swift_bridgeObjectRetain();
      sub_100DF9434(v34, v19);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*((unsigned __int8 *)v4 + v2[9]));
      Hasher._finalize()();
      uint64_t v20 = v31;
      unint64_t v21 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v20 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v21 * v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DD90E4(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10165F070);
}

uint64_t sub_100DD90F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F170);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x100DD9608);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_100DD964C()
{
  uint64_t v1 = *v0;
  sub_10000588C(&qword_10165F168);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v4 = (void *)(v1 + 56);
    if (v3 < 64) {
      uint64_t v5 = ~(-1 << v3);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v7 = (unint64_t)(v3 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v14 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v7) {
          goto LABEL_23;
        }
        unint64_t v15 = v4[v14];
        ++v9;
        if (!v15)
        {
          int64_t v9 = v14 + 1;
          if (v14 + 1 >= v7) {
            goto LABEL_23;
          }
          unint64_t v15 = v4[v9];
          if (!v15)
          {
            int64_t v9 = v14 + 2;
            if (v14 + 2 >= v7) {
              goto LABEL_23;
            }
            unint64_t v15 = v4[v9];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v7)
              {
LABEL_23:
                swift_release();
                uint64_t v17 = 1 << *(unsigned char *)(v1 + 32);
                if (v17 > 63) {
                  bzero((void *)(v1 + 56), ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v4 = -1 << v17;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v15 = v4[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v9 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_29;
                  }
                  if (v9 >= v7) {
                    goto LABEL_23;
                  }
                  unint64_t v15 = v4[v9];
                  ++v16;
                  if (v15) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v9 = v16;
            }
          }
        }
LABEL_22:
        unint64_t v6 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v9 << 6);
      }
      Swift::Int v12 = (long long *)(*(void *)(v1 + 48) + 160 * v11);
      long long v24 = v12[6];
      long long v25 = v12[7];
      long long v26 = v12[8];
      long long v27 = v12[9];
      long long v20 = v12[2];
      long long v21 = v12[3];
      long long v22 = v12[4];
      long long v23 = v12[5];
      long long v18 = *v12;
      long long v19 = v12[1];
      Hasher.init(_seed:)();
      sub_100E8EAB8();
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v13 = (_OWORD *)(*(void *)(v2 + 48) + 160 * result);
      v13[6] = v24;
      v13[7] = v25;
      v13[8] = v26;
      v13[9] = v27;
      v13[2] = v20;
      v13[3] = v21;
      v13[4] = v22;
      v13[5] = v23;
      *uint64_t v13 = v18;
      v13[1] = v19;
      ++*(void *)(v2 + 16);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v0 = v2;
  return result;
}

uint64_t sub_100DD98F0()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000588C(&qword_10165F140);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      long long v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100DF3A20((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100DD9CEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F270);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DD9FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_101647E78);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDA298()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F148);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    long long v30 = v0;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    BOOL v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      sub_100DF39B8(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, type metadata accessor for OwnedBeaconGroup);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DDA690(uint64_t a1)
{
  return sub_100DD77E8(a1, &qword_10165F1A8, (uint64_t *)&unk_10165F190, (unint64_t *)&unk_101666830);
}

unint64_t sub_100DDA6AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F0C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_23;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_23:
                swift_release();
                uint64_t v19 = 1 << *(unsigned char *)(v2 + 32);
                if (v19 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v19;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_29;
                  }
                  if (v12 >= v9) {
                    goto LABEL_23;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_22:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v14 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      sub_100E8AF6C(v20, v15);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDA8F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconStatus(0);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F0C8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    BOOL v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    long long v30 = v0;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      sub_100DF39B8(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for BeaconStatus);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Date();
      sub_100DF3A20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, type metadata accessor for BeaconStatus);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DDAD3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v29 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v31 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v30 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v30) {
          goto LABEL_33;
        }
        unint64_t v17 = v31[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v17 = v31[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v30) {
              goto LABEL_33;
            }
            unint64_t v17 = v31[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v30)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v31 = -1 << v28;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v30) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v31[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = v20 & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100DDB04C(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10165F0B0);
}

uint64_t sub_100DDB058()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (Swift::UInt64 *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  sub_10000588C(&qword_10165F028);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v6 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
    unint64_t v9 = (void *)(v6 + 56);
    uint64_t v10 = -1;
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    unint64_t v11 = v10 & *(void *)(v6 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }
      else
      {
        int64_t v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_22;
        }
        unint64_t v18 = v9[v17];
        ++v14;
        if (!v18)
        {
          int64_t v14 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_22;
          }
          unint64_t v18 = v9[v14];
          if (!v18)
          {
            int64_t v14 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_22;
            }
            unint64_t v18 = v9[v14];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_22:
                swift_release();
                uint64_t v20 = 1 << *(unsigned char *)(v6 + 32);
                if (v20 > 63) {
                  bzero((void *)(v6 + 56), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v9 = -1 << v20;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v18 = v9[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v14 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_28;
                  }
                  if (v14 >= v12) {
                    goto LABEL_22;
                  }
                  unint64_t v18 = v9[v14];
                  ++v19;
                  if (v18) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v14 = v19;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      sub_100DF39B8(*(void *)(v6 + 48) + *(void *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for WildModeTrackingLocation);
      uint64_t result = sub_101124534(v5, v7);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DDB2C8()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Destination();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F090);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100DF3A20(&qword_10165F080, (void (*)(uint64_t))&type metadata accessor for Destination);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100DDB6C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F180);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt32 v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDB970()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F260);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      sub_100DF3A20((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDBC98(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10165F230);
}

uint64_t sub_100DDBCA4(uint64_t a1)
{
  return sub_100DDD5B4(a1, (uint64_t *)&unk_10165F220);
}

uint64_t sub_100DDBCB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(v4 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v28 = -1 << v9;
    unint64_t v29 = v3;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                if (v30 >= 64) {
                  bzero((void *)(v4 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                uint64_t v3 = v29;
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100DDBF30(uint64_t a1)
{
  return sub_100DDD5B4(a1, &qword_10165F240);
}

uint64_t sub_100DDBF3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconIdentifier();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_101659180);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v34 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    BOOL v32 = v0;
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_33;
        }
        unint64_t v19 = v34[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v19 = v34[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v19 = v34[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v32;
                uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 > 63) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v34[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v34[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = v5;
      uint64_t v22 = *(void *)(v5 + 48);
      uint64_t v23 = *(void *)(v35 + 72);
      sub_100DF39B8(v22 + v23 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v23, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100DDC354(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10165F100, (uint64_t *)&unk_10165F610, &qword_10165F0F0);
}

uint64_t sub_100DDC370(uint64_t a1)
{
  return sub_100DDD5B4(a1, &qword_10165EF70);
}

uint64_t sub_100DDC37C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165EF78);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    char v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDC604(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10165F1C0, (uint64_t *)&unk_10163F360, (unint64_t *)&unk_10165F1D0);
}

uint64_t sub_100DDC620()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10166C280);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v29 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      id v20 = *(id *)(v19 + 32);
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDC8E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F1B0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v29 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      id v20 = *(id *)(v19 + 40);
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDCBB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    unint64_t v8 = (void *)(v4 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v8 = -1 << v28;
                }
                uint64_t v3 = v2;
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100DDCE58()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F160);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v36 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v34 = v1;
    int64_t v35 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v37 = v2;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v43 = v10;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v35) {
          goto LABEL_33;
        }
        unint64_t v16 = v36[v15];
        int64_t v17 = v10 + 1;
        if (!v16)
        {
          int64_t v17 = v10 + 2;
          if (v10 + 2 >= v35) {
            goto LABEL_33;
          }
          unint64_t v16 = v36[v17];
          if (!v16)
          {
            int64_t v17 = v10 + 3;
            if (v10 + 3 >= v35) {
              goto LABEL_33;
            }
            unint64_t v16 = v36[v17];
            if (!v16)
            {
              uint64_t v18 = v10 + 4;
              if (v10 + 4 >= v35)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v34;
                uint64_t v33 = 1 << *(unsigned char *)(v2 + 32);
                if (v33 > 63) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v33;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v36[v18];
              if (!v16)
              {
                while (1)
                {
                  int64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v35) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v36[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v10 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        int64_t v43 = v17;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      uint64_t v19 = *(void *)(v2 + 48) + 88 * v14;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      uint64_t v22 = *(void *)(v19 + 24);
      char v23 = *(unsigned char *)(v19 + 32);
      uint64_t v25 = *(void *)(v19 + 40);
      uint64_t v24 = *(void *)(v19 + 48);
      uint64_t v41 = *(void *)(v19 + 56);
      uint64_t v42 = *(void *)(v19 + 16);
      uint64_t v39 = *(void *)(v19 + 72);
      uint64_t v40 = *(void *)(v19 + 64);
      uint64_t v38 = *(void *)(v19 + 80);
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v8 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v11 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 88 * v11;
      *(void *)uint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      int64_t v10 = v43;
      *(void *)(v12 + 16) = v42;
      *(void *)(v12 + 24) = v22;
      *(unsigned char *)(v12 + 32) = v23;
      *(void *)(v12 + 40) = v25;
      *(void *)(v12 + 48) = v24;
      *(void *)(v12 + 56) = v41;
      *(void *)(v12 + 64) = v40;
      *(void *)(v12 + 72) = v39;
      uint64_t v2 = v37;
      *(void *)(v12 + 80) = v38;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDD1C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F000);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v34 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v35 = v2;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v36 = v10;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v33) {
          goto LABEL_36;
        }
        unint64_t v16 = v34[v15];
        int64_t v17 = v10 + 1;
        if (!v16)
        {
          int64_t v17 = v10 + 2;
          if (v10 + 2 >= v33) {
            goto LABEL_36;
          }
          unint64_t v16 = v34[v17];
          if (!v16)
          {
            int64_t v17 = v10 + 3;
            if (v10 + 3 >= v33) {
              goto LABEL_36;
            }
            unint64_t v16 = v34[v17];
            if (!v16)
            {
              uint64_t v18 = v10 + 4;
              if (v10 + 4 >= v33)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v34[v18];
              if (!v16)
              {
                while (1)
                {
                  int64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_42;
                  }
                  if (v17 >= v33) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v34[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v10 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        int64_t v36 = v17;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      uint64_t v19 = *(void *)(v2 + 48) + 40 * v14;
      uint64_t v20 = *(void *)v19;
      long long v37 = *(_OWORD *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 32);
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(*(void *)(*((void *)&v37 + 1) + 16));
      uint64_t v23 = *(void *)(*((void *)&v37 + 1) + 16);
      if (v23)
      {
        uint64_t v24 = *((void *)&v37 + 1) + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v24 += 16;
          --v23;
        }
        while (v23);
      }
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v8 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 40 * v11;
      *(void *)uint64_t v12 = v20;
      *(_OWORD *)(v12 + 8) = v37;
      *(void *)(v12 + 24) = v21;
      *(void *)(v12 + 32) = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v35;
      int64_t v10 = v36;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DDD554(uint64_t a1)
{
  return sub_100DD77E8(a1, &qword_10165EFC0, &qword_10163D250, (unint64_t *)&qword_101649B80);
}

uint64_t sub_100DDD570(uint64_t a1)
{
  return sub_100DD77E8(a1, &qword_10165F120, &qword_101656E30, (unint64_t *)&qword_10165F110);
}

uint64_t sub_100DDD58C(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10165F060, (uint64_t *)&unk_10165F5F0, (unint64_t *)&unk_10165F050);
}

uint64_t sub_100DDD5A8(uint64_t a1)
{
  return sub_100DDD5B4(a1, &qword_10165F038);
}

uint64_t sub_100DDD5B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    BOOL v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100DDD850(uint64_t a1)
{
  return sub_100DD77E8(a1, (uint64_t *)&unk_10165EF20, (uint64_t *)&unk_10166BF50, (unint64_t *)&unk_10165EF30);
}

uint64_t sub_100DDD86C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EFF0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v6 = 0;
    uint64_t v7 = (void *)(v2 + 56);
    uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v2 + 56);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = result + 56;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v6 << 6);
      }
      else
      {
        int64_t v16 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_33;
        }
        unint64_t v17 = v7[v16];
        ++v6;
        if (!v17)
        {
          int64_t v6 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v17 = v7[v6];
          if (!v17)
          {
            int64_t v6 = v16 + 2;
            if (v16 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v17 = v7[v6];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v11)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v7 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v7[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v6 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v6 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v7[v6];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v6 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v6 << 6);
      }
      *(void *)&long long v4 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      long long v27 = v4;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(DWORD1(v27));
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *((void *)&v4 + 1) = *((void *)&v27 + 1);
      *(void *)(*(void *)(v5 + 48) + 8 * v13) = v27;
      ++*(void *)(v5 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v5;
  return result;
}

uint64_t sub_100DDDB30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v34 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v33 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v33) {
          goto LABEL_33;
        }
        unint64_t v18 = v34[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v18 = v34[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v18 = v34[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v2;
                uint64_t v32 = 1 << *(unsigned char *)(v4 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v34[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v34[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = v4;
      uint64_t v21 = *(void *)(v4 + 48) + 24 * v16;
      uint64_t v22 = *(void *)v21;
      unint64_t v23 = *(void *)(v21 + 8);
      Swift::UInt32 v24 = *(_DWORD *)(v21 + 16);
      Hasher.init(_seed:)();
      sub_1000361E0(v22, v23);
      Data.hash(into:)();
      sub_10001CFB8(v22, v23);
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
      *(void *)uint64_t v14 = v22;
      *(void *)(v14 + 8) = v23;
      *(_DWORD *)(v14 + 16) = v24;
      ++*(void *)(v6 + 16);
      uint64_t v4 = v20;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100DDDE60(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100DD5F40();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101659178);
      goto LABEL_12;
    }
    sub_100DE9C5C();
  }
  uint64_t v12 = *v3;
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    int64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100DF3A20((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DDE11C(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DD6358();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_100DE9780(&qword_10165F288);
        goto LABEL_40;
      }
      sub_100DEA00C();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    sub_100720198();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xE800000000000000;
        uint64_t v12 = 0x7265776F50776F6CLL;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            uint64_t v12 = 0x6F506D756964656DLL;
            unint64_t v11 = 0xEB00000000726577;
            break;
          case 2:
            uint64_t v12 = 0x65776F5068676968;
            unint64_t v11 = 0xE900000000000072;
            break;
          case 3:
            uint64_t v12 = 0x4F7265776F506E6FLL;
            unint64_t v11 = 0xED0000694669576ELL;
            break;
          case 4:
            uint64_t v12 = 0x4F7265776F506E6FLL;
            unint64_t v11 = 0xED00006C6C65436ELL;
            break;
          case 5:
            uint64_t v12 = 0x7265747461426E6FLL;
            unint64_t v11 = 0xEF694669576E4F79;
            break;
          case 6:
            uint64_t v12 = 0x7265747461426E6FLL;
            unint64_t v11 = 0xEF6C6C65436E4F79;
            break;
          case 7:
            uint64_t v12 = 0x6F696E61706D6F63;
            unint64_t v11 = 0xEF79627261654E6ELL;
            break;
          case 8:
            uint64_t v12 = 0x6857796669746F6ELL;
            unint64_t v11 = 0xEF646E756F466E65;
            break;
          default:
            break;
        }
        unint64_t v13 = 0xE800000000000000;
        uint64_t v14 = 0x7265776F50776F6CLL;
        switch(v5)
        {
          case 1:
            unint64_t v13 = 0xEB00000000726577;
            if (v12 != 0x6F506D756964656DLL) {
              goto LABEL_35;
            }
            goto LABEL_34;
          case 2:
            unint64_t v13 = 0xE900000000000072;
            if (v12 != 0x65776F5068676968) {
              goto LABEL_35;
            }
            goto LABEL_34;
          case 3:
            uint64_t v15 = 0x694669576ELL;
            goto LABEL_26;
          case 4:
            uint64_t v15 = 0x6C6C65436ELL;
LABEL_26:
            unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v12 != 0x4F7265776F506E6FLL) {
              goto LABEL_35;
            }
            goto LABEL_34;
          case 5:
            unint64_t v13 = 0xEF694669576E4F79;
            if (v12 != 0x7265747461426E6FLL) {
              goto LABEL_35;
            }
            goto LABEL_34;
          case 6:
            uint64_t v14 = 0x7265747461426E6FLL;
            unint64_t v13 = 0xEF6C6C65436E4F79;
            goto LABEL_33;
          case 7:
            unint64_t v13 = 0xEF79627261654E6ELL;
            if (v12 != 0x6F696E61706D6F63) {
              goto LABEL_35;
            }
            goto LABEL_34;
          case 8:
            unint64_t v13 = 0xEF646E756F466E65;
            if (v12 != 0x6857796669746F6ELL) {
              goto LABEL_35;
            }
            goto LABEL_34;
          default:
LABEL_33:
            if (v12 != v14) {
              goto LABEL_35;
            }
LABEL_34:
            if (v11 == v13) {
              goto LABEL_43;
            }
LABEL_35:
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v16) {
              goto LABEL_44;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_40:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v5;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_43:
    swift_bridgeObjectRelease_n();
LABEL_44:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100DDE57CLL);
  }
  *(void *)(v17 + 16) = v20;
  return result;
}

Swift::Int sub_100DDE5C4(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  char v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100DD6764();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100DE76E8();
      goto LABEL_22;
    }
    sub_100DEA3E4();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *char v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100DDE760(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_100DD6A44();
    }
    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)sub_100DE789C();
        goto LABEL_122;
      }
      sub_100DEA694();
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)();
    sub_1000361E0(v7, a2);
    Data.hash(into:)();
    sub_10001CFB8(v7, a2);
    uint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
    a3 = result & ~v11;
    uint64_t v12 = v10 + 56;
    if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v13 = ~v11;
      uint64_t v79 = v10;
      uint64_t v83 = ~v11;
      BOOL v14 = __OFSUB__(HIDWORD(v7), v7);
      BOOL v82 = v14;
      unint64_t v84 = a2 >> 62;
      uint64_t v80 = v10 + 56;
      uint64_t v77 = (v7 >> 32) - (int)v7;
      uint64_t v78 = v7 >> 32;
      while (1)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v10 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_1000361E0(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v7) - (int)v7;
                if (v82) {
                  goto LABEL_126;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v7 + 16);
                uint64_t v22 = *(void *)(v7 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_127;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_162;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_10001CFB8(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_162;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_125;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_129;
            }
            sub_1000361E0(v7, a2);
            uint64_t v41 = (char *)__DataStorage._bytes.getter();
            if (!v41) {
              goto LABEL_63;
            }
            uint64_t v42 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v42)) {
              goto LABEL_131;
            }
            v41 += (int)v17 - v42;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v13 = v83;
            if (!v84)
            {
              *(void *)__s1 = v7;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v41) {
                goto LABEL_157;
              }
              int v47 = memcmp(v41, __s1, BYTE6(a2));
              sub_10001CFB8(v7, a2);
LABEL_106:
              uint64_t result = sub_10001CFB8(v17, v16);
              if (!v47) {
                goto LABEL_163;
              }
              goto LABEL_15;
            }
            if (v84 == 1)
            {
              if (v78 < (int)v7) {
                goto LABEL_140;
              }
              swift_retain();
              int64_t v43 = (char *)__DataStorage._bytes.getter();
              if (v43)
              {
                uint64_t v44 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v7, v44)) {
                  goto LABEL_147;
                }
                v43 += (int)v7 - v44;
              }
              uint64_t v45 = __DataStorage._length.getter();
              size_t v46 = (v7 >> 32) - (int)v7;
              if (v45 < v77) {
                size_t v46 = v45;
              }
              if (!v41) {
                goto LABEL_152;
              }
              if (!v43) {
                goto LABEL_153;
              }
              int v36 = memcmp(v41, v43, v46);
              sub_10001CFB8(v7, a2);
              goto LABEL_119;
            }
            uint64_t v65 = *(void *)(v7 + 16);
            uint64_t v66 = *(void *)(v7 + 24);
            swift_retain();
            swift_retain();
            size_t v67 = (char *)__DataStorage._bytes.getter();
            if (v67)
            {
              uint64_t v68 = __DataStorage._offset.getter();
              if (__OFSUB__(v65, v68)) {
                goto LABEL_146;
              }
              v67 += v65 - v68;
            }
            BOOL v24 = __OFSUB__(v66, v65);
            int64_t v69 = v66 - v65;
            if (v24) {
              goto LABEL_141;
            }
            uint64_t v70 = __DataStorage._length.getter();
            if (v70 >= v69) {
              size_t v71 = v69;
            }
            else {
              size_t v71 = v70;
            }
            uint64_t v10 = v79;
            if (!v41) {
              goto LABEL_160;
            }
            uint64_t v12 = v80;
            if (!v67) {
              goto LABEL_161;
            }
            int v36 = memcmp(v41, v67, v71);
            swift_release();
            goto LABEL_118;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            sub_1000361E0(v7, a2);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)__DataStorage._bytes.getter();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = __DataStorage._offset.getter();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_130;
            }
            v30 += v29 - v31;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v12 = v80;
            if (!v84)
            {
              *(void *)__s1 = v7;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_156;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_118:
              swift_release();
              goto LABEL_119;
            }
            if (v84 == 1)
            {
              if (v78 < (int)v7) {
                goto LABEL_134;
              }
              swift_retain();
              uint64_t v32 = (char *)__DataStorage._bytes.getter();
              if (v32)
              {
                uint64_t v33 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v7, v33)) {
                  goto LABEL_145;
                }
                v32 += (int)v7 - v33;
              }
              uint64_t v34 = __DataStorage._length.getter();
              size_t v35 = (v7 >> 32) - (int)v7;
              if (v34 < v77) {
                size_t v35 = v34;
              }
              if (!v30) {
                goto LABEL_149;
              }
              if (!v32) {
                goto LABEL_150;
              }
              int v36 = memcmp(v30, v32, v35);
              sub_10001CFB8(v7, a2);
              swift_release();
            }
            else
            {
              uint64_t v59 = *(void *)(v7 + 16);
              uint64_t v76 = *(void *)(v7 + 24);
              swift_retain();
              swift_retain();
              uint64_t v60 = (char *)__DataStorage._bytes.getter();
              if (v60)
              {
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v59, v61)) {
                  goto LABEL_144;
                }
                v60 += v59 - v61;
              }
              BOOL v24 = __OFSUB__(v76, v59);
              int64_t v62 = v76 - v59;
              if (v24) {
                goto LABEL_139;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (v63 >= v62) {
                size_t v64 = v62;
              }
              else {
                size_t v64 = v63;
              }
              if (!v30) {
                goto LABEL_158;
              }
              uint64_t v12 = v80;
              if (!v60) {
                goto LABEL_159;
              }
              int v36 = memcmp(v30, v60, v64);
              swift_release();
              swift_release();
              swift_release();
            }
            swift_release();
            sub_10001CFB8(v7, a2);
            uint64_t result = sub_10001CFB8(v17, v16);
            uint64_t v10 = v79;
            goto LABEL_120;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v84) {
              goto LABEL_74;
            }
            if (v84 == 1)
            {
              if (v78 < (int)v7) {
                goto LABEL_133;
              }
              sub_1000361E0(v7, a2);
              uint64_t v37 = __DataStorage._bytes.getter();
              if (!v37) {
                goto LABEL_151;
              }
              uint64_t v26 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v7 - v38;
              if (__OFSUB__((int)v7, v38)) {
                goto LABEL_138;
              }
              goto LABEL_55;
            }
            uint64_t v54 = *(void *)(v7 + 16);
            uint64_t v55 = *(void *)(v7 + 24);
            sub_1000361E0(v7, a2);
            swift_retain();
            swift_retain();
            uint64_t v50 = (char *)__DataStorage._bytes.getter();
            if (v50)
            {
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__(v54, v56)) {
                goto LABEL_143;
              }
              v50 += v54 - v56;
            }
            BOOL v24 = __OFSUB__(v55, v54);
            int64_t v52 = v55 - v54;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v53 = __DataStorage._length.getter();
            uint64_t v10 = v79;
            if (!v50) {
              goto LABEL_155;
            }
            goto LABEL_86;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v84)
            {
LABEL_74:
              uint64_t __s2 = v7;
              __int16 v86 = a2;
              char v87 = BYTE2(a2);
              char v88 = BYTE3(a2);
              char v89 = BYTE4(a2);
              char v90 = BYTE5(a2);
              int v47 = memcmp(__s1, &__s2, BYTE6(a2));
              goto LABEL_106;
            }
            if (v84 == 1)
            {
              if (v78 < (int)v7) {
                goto LABEL_132;
              }
              sub_1000361E0(v7, a2);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __DataStorage._length.getter();
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                sub_10001CFB8(v17, v16);
LABEL_163:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x100DDF1D4);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v7 - v27;
              if (__OFSUB__((int)v7, v27)) {
                goto LABEL_137;
              }
LABEL_55:
              uint64_t v39 = __DataStorage._length.getter();
              if (v39 >= v77) {
                size_t v40 = (v7 >> 32) - (int)v7;
              }
              else {
                size_t v40 = v39;
              }
              int v36 = memcmp(__s1, (const void *)(v26 + v28), v40);
LABEL_119:
              sub_10001CFB8(v7, a2);
              uint64_t result = sub_10001CFB8(v17, v16);
LABEL_120:
              uint64_t v13 = v83;
              if (!v36) {
                goto LABEL_163;
              }
              goto LABEL_15;
            }
            uint64_t v48 = *(void *)(v7 + 16);
            uint64_t v49 = *(void *)(v7 + 24);
            sub_1000361E0(v7, a2);
            swift_retain();
            swift_retain();
            uint64_t v50 = (char *)__DataStorage._bytes.getter();
            if (v50)
            {
              uint64_t v51 = __DataStorage._offset.getter();
              if (__OFSUB__(v48, v51)) {
                goto LABEL_142;
              }
              v50 += v48 - v51;
            }
            BOOL v24 = __OFSUB__(v49, v48);
            int64_t v52 = v49 - v48;
            if (v24) {
              goto LABEL_135;
            }
            uint64_t v53 = __DataStorage._length.getter();
            uint64_t v10 = v79;
            if (!v50) {
              goto LABEL_154;
            }
LABEL_86:
            if (v53 >= v52) {
              size_t v57 = v52;
            }
            else {
              size_t v57 = v53;
            }
            int v58 = memcmp(__s1, v50, v57);
            swift_release();
            swift_release();
            sub_10001CFB8(v7, a2);
            uint64_t result = sub_10001CFB8(v17, v16);
            uint64_t v13 = v83;
            if (!v58) {
              goto LABEL_163;
            }
LABEL_15:
            a3 = (a3 + 1) & v13;
            if (((*(void *)(v12 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_122;
            }
            break;
        }
      }
    }
  }
LABEL_122:
  uint64_t v72 = *v81;
  *(void *)(*v81 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v73 = (uint64_t *)(*(void *)(v72 + 48) + 16 * a3);
  *uint64_t v73 = v7;
  v73[1] = a2;
  uint64_t v74 = *(void *)(v72 + 16);
  BOOL v24 = __OFADD__(v74, 1);
  uint64_t v75 = v74 + 1;
  if (v24) {
    goto LABEL_128;
  }
  *(void *)(v72 + 16) = v75;
  return result;
}

uint64_t sub_100DDF204(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100DE126C(a1, a2, a3, &qword_10165EF10);
}

Swift::Int sub_100DDF218(Swift::Int result, unint64_t a2, char a3, uint64_t *a4)
{
  Swift::UInt v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    sub_100DDCBB0(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100DE9780(a4);
      goto LABEL_14;
    }
    sub_100DF012C(v9, a4);
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == v6)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v12 + a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v14 + 48) + a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t sub_100DDF374(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v8;
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    sub_100DD8124(v13, type metadata accessor for SharedBeaconRecord, &qword_10165F020, type metadata accessor for SharedBeaconRecord, (void (*)(char *))sub_10120EF7C);
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    sub_100DEBBD4(v13, type metadata accessor for SharedBeaconRecord, &qword_10165F020, type metadata accessor for SharedBeaconRecord, (void (*)(char *))sub_10120EF7C);
LABEL_8:
    uint64_t v15 = *v3;
    Hasher.init(_seed:)();
    sub_10120EF7C();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      v26[1] = v7;
      uint64_t v18 = ~v17;
      uint64_t v14 = v8;
      uint64_t v19 = *(void *)(v8 + 72);
      while (1)
      {
        sub_100DF38F0(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
        BOOL v20 = sub_101212AE0((uint64_t)v10, a1);
        sub_100DF3958((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v8;
  sub_100DE7A90(type metadata accessor for SharedBeaconRecord, &qword_10165F020, type metadata accessor for SharedBeaconRecord);
LABEL_14:
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, type metadata accessor for SharedBeaconRecord);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100DDF668(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100DD6D3C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100DE9780((uint64_t *)&unk_10165EF50);
      goto LABEL_14;
    }
    sub_100DEA960();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_100DDF798(uint64_t *a1, unint64_t a2, char a3)
{
  unint64_t v7 = (int *)type metadata accessor for BeaconNamingRecord();
  uint64_t v8 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v97 = v8;
  char v98 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DD6FD4();
    }
    else
    {
      if (v12 > v11)
      {
        sub_100DE7A90((uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, &qword_10165F018, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        goto LABEL_140;
      }
      sub_100DEABC8();
    }
    uint64_t v13 = *v3;
    Hasher.init(_seed:)();
    sub_100DBF570();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
    a2 = v14 & ~v15;
    uint64_t v103 = v13 + 56;
    uint64_t v104 = v13;
    if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      char v100 = v7;
      uint64_t v101 = ~v15;
      uint64_t v102 = *(void *)(v8 + 72);
      char v99 = a1;
      while (1)
      {
        sub_100DF38F0(*(void *)(v104 + 48) + v102 * a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        uint64_t v17 = *(void *)v10;
        unint64_t v16 = *((void *)v10 + 1);
        uint64_t v18 = *a1;
        unint64_t v19 = a1[1];
        uint64_t v20 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(v17) - v17;
            if (__OFSUB__(HIDWORD(v17), v17)) {
              goto LABEL_143;
            }
            uint64_t v20 = (int)v20;
LABEL_17:
            unint64_t v24 = v19 >> 62;
            switch(v19 >> 62)
            {
              case 1uLL:
                LODWORD(v25) = HIDWORD(v18) - v18;
                if (__OFSUB__(HIDWORD(v18), v18)) {
                  goto LABEL_145;
                }
                uint64_t v25 = (int)v25;
LABEL_24:
                if (v20 != v25) {
                  goto LABEL_11;
                }
                if (v20 < 1) {
                  goto LABEL_124;
                }
                break;
              case 2uLL:
                uint64_t v27 = *(void *)(v18 + 16);
                uint64_t v26 = *(void *)(v18 + 24);
                BOOL v23 = __OFSUB__(v26, v27);
                uint64_t v25 = v26 - v27;
                if (!v23) {
                  goto LABEL_24;
                }
                goto LABEL_144;
              case 3uLL:
                if (v20) {
                  goto LABEL_11;
                }
                goto LABEL_124;
              default:
                uint64_t v25 = BYTE6(v19);
                goto LABEL_24;
            }
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v17 + 16);
            uint64_t v21 = *(void *)(v17 + 24);
            BOOL v23 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v23) {
              goto LABEL_17;
            }
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            goto LABEL_146;
          case 3uLL:
            goto LABEL_17;
          default:
            uint64_t v20 = BYTE6(v16);
            goto LABEL_17;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_147;
            }
            sub_1000361E0(*(void *)v10, *((void *)v10 + 1));
            uint64_t v43 = __DataStorage._bytes.getter();
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v45 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v17, v45)) {
                goto LABEL_149;
              }
              uint64_t v96 = (const void *)(v44 + (int)v17 - v45);
            }
            else
            {
              uint64_t v96 = 0;
            }
            unint64_t v7 = v100;
            __DataStorage._length.getter();
            a1 = v99;
            if (!v24)
            {
              *(void *)__s1 = v18;
              *(_WORD *)&__s1[8] = v19;
              __s1[10] = BYTE2(v19);
              __s1[11] = BYTE3(v19);
              __s1[12] = BYTE4(v19);
              __s1[13] = BYTE5(v19);
              if (!v96) {
                goto LABEL_176;
              }
              int v55 = memcmp(v96, __s1, BYTE6(v19));
              goto LABEL_112;
            }
            if (v24 == 1)
            {
              if (v18 >> 32 < (int)v18) {
                goto LABEL_158;
              }
              swift_retain();
              uint64_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v52 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v18, v52)) {
                  goto LABEL_165;
                }
                v51 += (int)v18 - v52;
              }
              a1 = v99;
              uint64_t v53 = __DataStorage._length.getter();
              if (v53 >= (v18 >> 32) - (int)v18) {
                size_t v54 = (v18 >> 32) - (int)v18;
              }
              else {
                size_t v54 = v53;
              }
              if (!v96) {
                goto LABEL_169;
              }
              unint64_t v7 = v100;
              if (!v51) {
                goto LABEL_170;
              }
              int v55 = memcmp(v96, v51, v54);
              sub_10001CFB8(v18, v19);
LABEL_112:
              sub_10001CFB8(v17, v16);
              if (v55) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v74 = *(void *)(v18 + 16);
            uint64_t v75 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            uint64_t v76 = (char *)__DataStorage._bytes.getter();
            if (v76)
            {
              uint64_t v77 = __DataStorage._offset.getter();
              if (__OFSUB__(v74, v77)) {
                goto LABEL_163;
              }
              v76 += v74 - v77;
            }
            if (__OFSUB__(v75, v74)) {
              goto LABEL_159;
            }
            uint64_t v78 = __DataStorage._length.getter();
            if (v78 >= v75 - v74) {
              size_t v79 = v75 - v74;
            }
            else {
              size_t v79 = v78;
            }
            unint64_t v7 = v100;
            if (!v96) {
              goto LABEL_177;
            }
            a1 = v99;
            if (!v76) {
              goto LABEL_178;
            }
            int v80 = memcmp(v96, v76, v79);
            swift_release();
            swift_release();
            sub_10001CFB8(v17, v16);
            if (v80) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 2uLL:
            uint64_t v33 = v16 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v34 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v35 = __DataStorage._bytes.getter();
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v37)) {
                goto LABEL_148;
              }
              uint64_t v96 = (const void *)(v36 + v34 - v37);
            }
            else
            {
              uint64_t v96 = 0;
            }
            __DataStorage._length.getter();
            a1 = v99;
            unint64_t v7 = v100;
            if (!v24)
            {
              *(void *)__s1 = v18;
              *(_WORD *)&__s1[8] = v19;
              __s1[10] = BYTE2(v19);
              __s1[11] = BYTE3(v19);
              __s1[12] = BYTE4(v19);
              __s1[13] = BYTE5(v19);
              if (!v96) {
                goto LABEL_173;
              }
              int v50 = memcmp(v96, __s1, BYTE6(v19));
              goto LABEL_97;
            }
            if (v24 == 1)
            {
              v95[1] = v33;
              if (v18 >> 32 < (int)v18) {
                goto LABEL_152;
              }
              swift_retain();
              size_t v46 = (char *)__DataStorage._bytes.getter();
              if (v46)
              {
                uint64_t v47 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v18, v47)) {
                  goto LABEL_164;
                }
                v46 += (int)v18 - v47;
              }
              uint64_t v48 = __DataStorage._length.getter();
              if (v48 >= (v18 >> 32) - (int)v18) {
                size_t v49 = (v18 >> 32) - (int)v18;
              }
              else {
                size_t v49 = v48;
              }
              if (!v96) {
                goto LABEL_167;
              }
              unint64_t v7 = v100;
              if (!v46) {
                goto LABEL_168;
              }
              int v50 = memcmp(v96, v46, v49);
              sub_10001CFB8(v18, v19);
LABEL_97:
              swift_release();
              swift_release();
              if (v50) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v67 = *(void *)(v18 + 16);
            uint64_t v68 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            int64_t v69 = (char *)__DataStorage._bytes.getter();
            if (v69)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v67, v70)) {
                goto LABEL_162;
              }
              v69 += v67 - v70;
            }
            if (__OFSUB__(v68, v67)) {
              goto LABEL_157;
            }
            uint64_t v71 = __DataStorage._length.getter();
            if (v71 >= v68 - v67) {
              size_t v72 = v68 - v67;
            }
            else {
              size_t v72 = v71;
            }
            unint64_t v7 = v100;
            if (!v96) {
              goto LABEL_174;
            }
            a1 = v99;
            if (!v69) {
              goto LABEL_175;
            }
            int v73 = memcmp(v96, v69, v72);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v73) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v24) {
              goto LABEL_51;
            }
            if (v24 == 1)
            {
              uint64_t v28 = (v18 >> 32) - (int)v18;
              if (v18 >> 32 < (int)v18) {
                goto LABEL_151;
              }
              swift_retain();
              uint64_t v38 = __DataStorage._bytes.getter();
              if (!v38)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __DataStorage._length.getter();
                __break(1u);
                JUMPOUT(0x100DE030CLL);
              }
              uint64_t v30 = v38;
              uint64_t v39 = __DataStorage._offset.getter();
              uint64_t v32 = (int)v18 - v39;
              if (__OFSUB__((int)v18, v39)) {
                goto LABEL_156;
              }
              goto LABEL_42;
            }
            uint64_t v56 = *(void *)(v18 + 16);
            uint64_t v57 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            int v58 = (char *)__DataStorage._bytes.getter();
            if (v58)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v56, v59)) {
                goto LABEL_161;
              }
              v58 += v56 - v59;
            }
            int64_t v60 = v57 - v56;
            if (__OFSUB__(v57, v56)) {
              goto LABEL_153;
            }
            uint64_t v61 = __DataStorage._length.getter();
            unint64_t v7 = v100;
            if (!v58) {
              goto LABEL_172;
            }
            goto LABEL_90;
          default:
            *(void *)__s1 = *(void *)v10;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (v24)
            {
              if (v24 == 1)
              {
                uint64_t v28 = (v18 >> 32) - (int)v18;
                if (v18 >> 32 < (int)v18) {
                  goto LABEL_150;
                }
                swift_retain();
                uint64_t v29 = __DataStorage._bytes.getter();
                if (!v29) {
                  goto LABEL_179;
                }
                uint64_t v30 = v29;
                uint64_t v31 = __DataStorage._offset.getter();
                uint64_t v32 = (int)v18 - v31;
                if (__OFSUB__((int)v18, v31)) {
                  goto LABEL_155;
                }
LABEL_42:
                uint64_t v40 = __DataStorage._length.getter();
                if (v40 >= v28) {
                  size_t v41 = v28;
                }
                else {
                  size_t v41 = v40;
                }
                int v42 = memcmp(__s1, (const void *)(v30 + v32), v41);
                sub_10001CFB8(v18, v19);
                a1 = v99;
                unint64_t v7 = v100;
                if (v42) {
                  goto LABEL_11;
                }
              }
              else
              {
                uint64_t v62 = *(void *)(v18 + 16);
                uint64_t v63 = *(void *)(v18 + 24);
                swift_retain();
                swift_retain();
                int v58 = (char *)__DataStorage._bytes.getter();
                if (v58)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_160;
                  }
                  v58 += v62 - v64;
                }
                int64_t v60 = v63 - v62;
                if (__OFSUB__(v63, v62)) {
                  goto LABEL_154;
                }
                uint64_t v61 = __DataStorage._length.getter();
                unint64_t v7 = v100;
                if (!v58) {
                  goto LABEL_171;
                }
LABEL_90:
                if (v61 >= v60) {
                  size_t v65 = v60;
                }
                else {
                  size_t v65 = v61;
                }
                int v66 = memcmp(__s1, v58, v65);
                swift_release();
                swift_release();
                a1 = v99;
                if (v66) {
                  goto LABEL_11;
                }
              }
            }
            else
            {
LABEL_51:
              uint64_t __s2 = v18;
              __int16 v106 = v19;
              char v107 = BYTE2(v19);
              char v108 = BYTE3(v19);
              char v109 = BYTE4(v19);
              char v110 = BYTE5(v19);
              if (memcmp(__s1, &__s2, BYTE6(v19))) {
                goto LABEL_11;
              }
            }
LABEL_124:
            if ((static UUID.== infix(_:_:)() & 1) != 0
              && (static UUID.== infix(_:_:)() & 1) != 0
              && *(void *)&v10[v7[7]] == *(uint64_t *)((char *)a1 + v7[7]))
            {
              uint64_t v81 = v7[8];
              uint64_t v82 = *(void *)&v10[v81];
              uint64_t v83 = *(void *)&v10[v81 + 8];
              unint64_t v84 = (uint64_t *)((char *)a1 + v81);
              BOOL v85 = v82 == *v84 && v83 == v84[1];
              if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                uint64_t v86 = v7[9];
                char v87 = &v10[v86];
                uint64_t v88 = *(void *)&v10[v86 + 8];
                char v89 = (uint64_t *)((char *)a1 + v86);
                uint64_t v90 = v89[1];
                if (v88)
                {
                  if (v90
                    && (*(void *)v87 == *v89 && v88 == v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                  {
LABEL_139:
                    sub_100DF3958((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    goto LABEL_140;
                  }
                }
                else if (!v90)
                {
                  goto LABEL_139;
                }
              }
            }
LABEL_11:
            sub_100DF3958((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
            a2 = (a2 + 1) & v101;
            if (((*(void *)(v103 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_140;
            }
            break;
        }
      }
    }
  }
LABEL_140:
  uint64_t v91 = *v98;
  *(void *)(*v98 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8((uint64_t)a1, *(void *)(v91 + 48) + *(void *)(v97 + 72) * a2, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v93 = *(void *)(v91 + 16);
  BOOL v23 = __OFADD__(v93, 1);
  uint64_t v94 = v93 + 1;
  if (v23)
  {
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
  }
  *(void *)(v91 + 16) = v94;
  return result;
}

Swift::Int sub_100DE033C(Swift::Int result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  Swift::Int v8 = result;
  Swift::UInt v9 = a3 & 1;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_19;
  }
  if (a5)
  {
    sub_100DD74A4();
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (Swift::Int)sub_100DE7CF0();
      goto LABEL_19;
    }
    sub_100DEB060();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v9);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v12 + 48);
    do
    {
      uint64_t v17 = v16 + 24 * a4;
      uint64_t result = *(void *)v17;
      int v18 = *(unsigned __int8 *)(v17 + 16);
      if (*(void *)v17 == v8 && *(void *)(v17 + 8) == a2)
      {
        if ((v9 == 0) != v18) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result & 1) != 0 && (((v9 == 0) ^ v18))
        {
LABEL_18:
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a4 = (a4 + 1) & v15;
    }
    while (((*(void *)(v14 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_19:
  uint64_t v20 = *v25;
  *(void *)(*v25 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v21 = *(void *)(v20 + 48) + 24 * a4;
  *(void *)uint64_t v21 = v8;
  *(void *)(v21 + 8) = a2;
  *(unsigned char *)(v21 + 16) = v9;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100DE04FC(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  int v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_100DD7B0C();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_100DE7EBC();
        goto LABEL_123;
      }
      sub_100DEB630();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v88 = ~v12;
      uint64_t v84 = v11;
      uint64_t v86 = v11 + 56;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v85 = v14;
      unint64_t v87 = a2 >> 62;
      uint64_t v82 = (v8 >> 32) - (int)v8;
      uint64_t v83 = v8 >> 32;
      uint64_t v81 = v4;
      while (1)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_1000361E0(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v85) {
                  goto LABEL_127;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_128;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_163;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_10001CFB8(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_163;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_130;
            }
            uint64_t v43 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_63;
            }
            uint64_t v44 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v17 - v44;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v13 = v86;
            if (!v87)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v43) {
                goto LABEL_158;
              }
              int v50 = (uint64_t *)__s1;
              size_t v49 = v43;
LABEL_107:
              int v68 = memcmp(v49, v50, BYTE6(a2));
              uint64_t result = sub_10001CFB8(v17, v16);
              if (!v68) {
                goto LABEL_164;
              }
              goto LABEL_15;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v8 - v46;
              }
              uint64_t v47 = __DataStorage._length.getter();
              uint64_t v48 = (v8 >> 32) - (int)v8;
              if (v47 < v82) {
                uint64_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_153;
              }
              if (!v45) {
                goto LABEL_154;
              }
              size_t v41 = v48;
              int v42 = v43;
              uint64_t v40 = (const void *)v45;
              goto LABEL_74;
            }
            uint64_t v69 = *(void *)(v8 + 16);
            uint64_t v70 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v71 = (char *)__DataStorage._bytes.getter();
            if (v71)
            {
              uint64_t v72 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v72)) {
                goto LABEL_147;
              }
              v71 += v69 - v72;
            }
            BOOL v24 = __OFSUB__(v70, v69);
            int64_t v73 = v70 - v69;
            if (v24) {
              goto LABEL_142;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= v73) {
              size_t v75 = v73;
            }
            else {
              size_t v75 = v74;
            }
            int v5 = v81;
            if (!v43) {
              goto LABEL_161;
            }
            uint64_t v11 = v84;
            if (!v71) {
              goto LABEL_162;
            }
            int v36 = memcmp(v43, v71, v75);
            swift_release();
            goto LABEL_119;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)__DataStorage._bytes.getter();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = __DataStorage._offset.getter();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_131;
            }
            v30 += v29 - v31;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (v87)
            {
              if (v87 == 1)
              {
                if (v83 < (int)v8) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v32 = (char *)__DataStorage._bytes.getter();
                if (v32)
                {
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v33)) {
                    goto LABEL_146;
                  }
                  v32 += (int)v8 - v33;
                }
                uint64_t v34 = __DataStorage._length.getter();
                size_t v35 = (v8 >> 32) - (int)v8;
                if (v34 < v82) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_150;
                }
                if (!v32) {
                  goto LABEL_151;
                }
                int v36 = memcmp(v30, v32, v35);
                sub_10001CFB8(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v62 = *(void *)(v8 + 16);
                uint64_t v80 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_145;
                  }
                  v63 += v62 - v64;
                }
                BOOL v24 = __OFSUB__(v80, v62);
                int64_t v65 = v80 - v62;
                if (v24) {
                  goto LABEL_140;
                }
                uint64_t v66 = __DataStorage._length.getter();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v30) {
                  goto LABEL_159;
                }
                uint64_t v11 = v84;
                if (!v63) {
                  goto LABEL_160;
                }
                int v36 = memcmp(v30, v63, v67);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_10001CFB8(v17, v16);
              int v5 = v81;
            }
            else
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_157;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              uint64_t result = sub_10001CFB8(v17, v16);
            }
            uint64_t v13 = v86;
            if (!v36) {
              goto LABEL_164;
            }
            goto LABEL_15;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v87) {
              goto LABEL_75;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_134;
              }
              sub_1000361E0(v8, a2);
              uint64_t v37 = __DataStorage._bytes.getter();
              if (!v37) {
                goto LABEL_152;
              }
              uint64_t v26 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v38;
              if (__OFSUB__((int)v8, v38)) {
                goto LABEL_139;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v8 + 16);
            uint64_t v58 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_144;
              }
              v53 += v57 - v59;
            }
            BOOL v24 = __OFSUB__(v58, v57);
            int64_t v55 = v58 - v57;
            if (v24) {
              goto LABEL_137;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_156;
            }
            goto LABEL_87;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v87)
            {
LABEL_75:
              uint64_t v89 = v8;
              __int16 v90 = a2;
              char v91 = BYTE2(a2);
              char v92 = BYTE3(a2);
              char v93 = BYTE4(a2);
              char v94 = BYTE5(a2);
              size_t v49 = __s1;
              int v50 = &v89;
              goto LABEL_107;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_133;
              }
              sub_1000361E0(v8, a2);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                sub_10001CFB8(v17, v16);
LABEL_164:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x100DE0EF0);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_138;
              }
LABEL_55:
              uint64_t v39 = __DataStorage._length.getter();
              uint64_t v40 = (const void *)(v26 + v28);
              if (v39 >= v82) {
                size_t v41 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v41 = v39;
              }
              int v42 = __s1;
LABEL_74:
              int v36 = memcmp(v42, v40, v41);
              sub_10001CFB8(v8, a2);
              goto LABEL_120;
            }
            uint64_t v51 = *(void *)(v8 + 16);
            uint64_t v52 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_143;
              }
              v53 += v51 - v54;
            }
            BOOL v24 = __OFSUB__(v52, v51);
            int64_t v55 = v52 - v51;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_155;
            }
LABEL_87:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            int v61 = memcmp(__s1, v53, v60);
            swift_release();
            swift_release();
            uint64_t result = sub_10001CFB8(v17, v16);
            uint64_t v13 = v86;
            if (!v61) {
              goto LABEL_164;
            }
LABEL_15:
            a3 = (a3 + 1) & v88;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_123;
            }
            break;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
  *uint64_t v77 = v8;
  v77[1] = a2;
  uint64_t v78 = *(void *)(v76 + 16);
  BOOL v24 = __OFADD__(v78, 1);
  uint64_t v79 = v78 + 1;
  if (v24) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v79;
  return result;
}

void sub_100DE0F20(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_100DDD5B4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100DE89A0(a4);
      goto LABEL_14;
    }
    sub_100DF0A64(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10001D4B0(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_100DE10B4(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  Swift::UInt v10 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    sub_100DD7DF8();
  }
  else
  {
    if (v12 > v11)
    {
      uint64_t result = (Swift::Int)sub_100DE8070();
      goto LABEL_18;
    }
    sub_100DEB8E4();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v14;
  uint64_t v15 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v13 + 48);
    while (1)
    {
      id v18 = (unsigned __int8 *)(v17 + 24 * a4);
      if (*v18 == v10)
      {
        if (*((void *)v18 + 1) == a2 && *((void *)v18 + 2) == a3) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
      }
      a4 = (a4 + 1) & v16;
      if (((*(void *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_18:
  uint64_t v20 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v21 = *(void *)(v20 + 48) + 24 * a4;
  *(unsigned char *)uint64_t v21 = v10;
  *(void *)(v21 + 8) = a2;
  *(void *)(v21 + 16) = a3;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100DE126C(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    sub_100DDBCB0(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_100DE8E20(a4);
      goto LABEL_14;
    }
    sub_100DEF354(v9, a4);
  }
  uint64_t v10 = *v4;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (*(void *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t sub_100DE13A4(unsigned __int8 *a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for RawSearchResult();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (unsigned __int8 *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v8;
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    sub_100DD8124(v13, (uint64_t (*)(void))type metadata accessor for RawSearchResult, &qword_101659580, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (void (*)(char *))sub_100CC2EC0);
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    sub_100DEBBD4(v13, (uint64_t (*)(void))type metadata accessor for RawSearchResult, &qword_101659580, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (void (*)(char *))sub_100CC2EC0);
LABEL_8:
    uint64_t v15 = *v3;
    Hasher.init(_seed:)();
    sub_100CC2EC0();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      v26[1] = v7;
      uint64_t v18 = ~v17;
      uint64_t v14 = v8;
      uint64_t v19 = *(void *)(v8 + 72);
      while (1)
      {
        sub_100DF38F0(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        char v20 = sub_100CC4608(v10, a1);
        sub_100DF3958((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v8;
  sub_100DE7A90((uint64_t (*)(void))type metadata accessor for RawSearchResult, &qword_101659580, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
LABEL_14:
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8((uint64_t)a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100DE1698(uint64_t result, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = v5;
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v12 = v10 + 1;
  if (a3)
  {
    sub_100DDAD3C(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)sub_100DE89A0(a4);
LABEL_22:
      uint64_t v29 = *v7;
      *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v29 + 48) + 8 * a2) = v9;
      uint64_t v30 = *(void *)(v29 + 16);
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (!v31)
      {
        *(void *)(v29 + 16) = v32;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_100DEE510(v12, a4);
  }
  uint64_t v13 = *v5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = ~v15;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
      if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26) {
        goto LABEL_25;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v28 & 1) == 0);
  }
LABEL_26:
  a5(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE18DC(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DD844C();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_100DE9780(&qword_101659328);
        goto LABEL_81;
      }
      sub_100DEBEB8();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    sub_1012D5910(v5);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xE700000000000000;
        uint64_t v12 = 0x6E776F6E6B6E75;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v11 = 0x80000001013EF140;
            uint64_t v12 = 0xD000000000000015;
            break;
          case 2:
            uint64_t v12 = 0xD000000000000016;
            uint64_t v13 = "enableNotifyWhenFound";
            goto LABEL_34;
          case 3:
            unint64_t v11 = 0xE600000000000000;
            uint64_t v12 = 0x657461636F6CLL;
            break;
          case 4:
            unint64_t v11 = 0xEC000000676E6972;
            uint64_t v12 = 0x6168537472617473;
            break;
          case 5:
            uint64_t v12 = 0x72616853706F7473;
            goto LABEL_23;
          case 6:
            unsigned int v14 = 2036427888;
            goto LABEL_29;
          case 7:
            unsigned int v14 = 1886352499;
LABEL_29:
            uint64_t v12 = v14 | 0x6E756F5300000000;
            unint64_t v11 = 0xE900000000000064;
            break;
          case 8:
            uint64_t v12 = 0x61654C6E69676562;
            unint64_t v11 = 0xED0000676E696873;
            break;
          case 9:
            uint64_t v12 = 0x687361654C646E65;
LABEL_23:
            unint64_t v11 = 0xEB00000000676E69;
            break;
          case 0xA:
            uint64_t v12 = 0x4654426E69676562;
            unint64_t v11 = 0xEE00676E69646E69;
            break;
          case 0xB:
            uint64_t v12 = 0x6E69465442646E65;
            unint64_t v11 = 0xEC000000676E6964;
            break;
          case 0xC:
            unint64_t v11 = 0xEC000000676E6967;
            uint64_t v12 = 0x6E61526E69676562;
            break;
          case 0xD:
            uint64_t v12 = 0x69676E6152646E65;
            unint64_t v11 = 0xEA0000000000676ELL;
            break;
          case 0xE:
            uint64_t v12 = 0x6F4C656C62616E65;
            unint64_t v11 = 0xEE0065646F4D7473;
            break;
          case 0xF:
            uint64_t v12 = 0x4C656C6261736964;
            unint64_t v11 = 0xEF65646F4D74736FLL;
            break;
          case 0x10:
            unint64_t v11 = 0xE600000000000000;
            uint64_t v12 = 0x656D616E6572;
            break;
          case 0x11:
            uint64_t v12 = 0x7463656E6E6F63;
            break;
          case 0x12:
            unint64_t v11 = 0xEA00000000007463;
            uint64_t v12 = 0x656E6E6F63736964;
            break;
          case 0x13:
            uint64_t v12 = 0xD000000000000017;
            uint64_t v13 = "onnect";
LABEL_34:
            unint64_t v11 = (unint64_t)v13 | 0x8000000000000000;
            break;
          case 0x14:
            unint64_t v11 = 0xE600000000000000;
            uint64_t v12 = 0x726961706E75;
            break;
          case 0x15:
            uint64_t v12 = 0x65746167656C6564;
            unint64_t v11 = 0xEE00657261685364;
            break;
          default:
            break;
        }
        unint64_t v15 = 0xE700000000000000;
        uint64_t v16 = 0x6E776F6E6B6E75;
        switch(v5)
        {
          case 1:
            unint64_t v15 = 0x80000001013EF140;
            if (v12 != 0xD000000000000015) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 2:
            unint64_t v19 = 0xD000000000000016;
            char v20 = "enableNotifyWhenFound";
            goto LABEL_79;
          case 3:
            unint64_t v15 = 0xE600000000000000;
            if (v12 != 0x657461636F6CLL) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 4:
            unint64_t v15 = 0xEC000000676E6972;
            if (v12 != 0x6168537472617473) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 5:
            uint64_t v21 = 0x72616853706F7473;
            goto LABEL_55;
          case 6:
            unsigned int v22 = 2036427888;
            goto LABEL_65;
          case 7:
            unsigned int v22 = 1886352499;
LABEL_65:
            unint64_t v15 = 0xE900000000000064;
            if (v12 != (v22 | 0x6E756F5300000000)) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 8:
            unint64_t v15 = 0xED0000676E696873;
            if (v12 != 0x61654C6E69676562) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 9:
            uint64_t v21 = 0x687361654C646E65;
LABEL_55:
            unint64_t v15 = 0xEB00000000676E69;
            if (v12 != v21) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 10:
            uint64_t v17 = 0x4654426E69676562;
            uint64_t v18 = 0x676E69646E69;
            goto LABEL_70;
          case 11:
            unint64_t v15 = 0xEC000000676E6964;
            if (v12 != 0x6E69465442646E65) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 12:
            unint64_t v15 = 0xEC000000676E6967;
            if (v12 != 0x6E61526E69676562) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 13:
            unint64_t v15 = 0xEA0000000000676ELL;
            if (v12 != 0x69676E6152646E65) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 14:
            uint64_t v17 = 0x6F4C656C62616E65;
            uint64_t v18 = 0x65646F4D7473;
            goto LABEL_70;
          case 15:
            unint64_t v15 = 0xEF65646F4D74736FLL;
            if (v12 != 0x4C656C6261736964) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 16:
            unint64_t v15 = 0xE600000000000000;
            if (v12 != 0x656D616E6572) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 17:
            if (v12 != 0x7463656E6E6F63) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 18:
            unint64_t v15 = 0xEA00000000007463;
            uint64_t v16 = 0x656E6E6F63736964;
            goto LABEL_73;
          case 19:
            unint64_t v19 = 0xD000000000000017;
            char v20 = "onnect";
LABEL_79:
            unint64_t v15 = (unint64_t)v20 | 0x8000000000000000;
            if (v12 != v19) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 20:
            unint64_t v15 = 0xE600000000000000;
            if (v12 != 0x726961706E75) {
              goto LABEL_75;
            }
            goto LABEL_74;
          case 21:
            uint64_t v17 = 0x65746167656C6564;
            uint64_t v18 = 0x657261685364;
LABEL_70:
            unint64_t v15 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v12 != v17) {
              goto LABEL_75;
            }
            goto LABEL_74;
          default:
LABEL_73:
            if (v12 != v16) {
              goto LABEL_75;
            }
LABEL_74:
            if (v11 == v15) {
              goto LABEL_84;
            }
LABEL_75:
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v23) {
              goto LABEL_85;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_81:
  uint64_t v24 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v24 + 48) + a2) = v5;
  uint64_t v25 = *(void *)(v24 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
LABEL_84:
    swift_bridgeObjectRelease_n();
LABEL_85:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100DE2028);
  }
  *(void *)(v24 + 16) = v27;
  return result;
}

Swift::Int sub_100DE20D8(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100DD8A1C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100DE9780((uint64_t *)&unk_10165EFA0);
      goto LABEL_14;
    }
    sub_100DEC448();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v9 = qword_10137E740[v5];
  Hasher._combine(_:)(v9);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (qword_10137E740[*(char *)(v11 + a2)] == v9)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (qword_10137E740[*(char *)(v11 + a2)] == v9) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v13 + 48) + a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t sub_100DE2258(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t v101 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v7 = *((void *)v101 - 1);
  __chkstk_darwin(v101);
  Swift::UInt v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v96 = v7;
  uint64_t v97 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DD8CD4();
    }
    else
    {
      if (v11 > v10)
      {
        sub_100DE7A90((uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, &qword_1016592B8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        goto LABEL_130;
      }
      sub_100DEC6D0();
    }
    uint64_t v12 = *v3;
    Hasher.init(_seed:)();
    uint64_t v13 = *a1;
    unint64_t v14 = a1[1];
    sub_1000361E0(*a1, v14);
    Data.hash(into:)();
    sub_10001CFB8(v13, v14);
    BOOL v15 = v101;
    uint64_t v16 = (char *)a1 + v101[5];
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v100 = v16;
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v95 = (char *)a1 + v15[6];
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v94 = v15[7];
    Hasher._combine(_:)(*((unsigned __int8 *)a1 + v94));
    uint64_t v92 = v15[8];
    uint64_t v17 = *(uint64_t *)((char *)a1 + v92);
    swift_bridgeObjectRetain();
    sub_100DF9434(__s1, v17);
    swift_bridgeObjectRelease();
    uint64_t v91 = v15[9];
    Hasher._combine(_:)(*((unsigned __int8 *)a1 + v91));
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v12 + 32);
    a2 = v18 & ~v19;
    uint64_t v99 = v12;
    uint64_t v104 = v12 + 56;
    if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v102 = ~v19;
      uint64_t v103 = *(void *)(v7 + 72);
      char v98 = a1;
      uint64_t v20 = v99;
      while (1)
      {
        sub_100DF38F0(*(void *)(v20 + 48) + v103 * a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v21 = *(void *)v9;
        unint64_t v22 = *((void *)v9 + 1);
        uint64_t v24 = *a1;
        unint64_t v23 = a1[1];
        uint64_t v25 = 0;
        switch(v22 >> 62)
        {
          case 1uLL:
            LODWORD(v25) = HIDWORD(v21) - v21;
            if (__OFSUB__(HIDWORD(v21), v21)) {
              goto LABEL_133;
            }
            uint64_t v25 = (int)v25;
LABEL_17:
            unint64_t v29 = v23 >> 62;
            switch(v23 >> 62)
            {
              case 1uLL:
                LODWORD(v30) = HIDWORD(v24) - v24;
                if (__OFSUB__(HIDWORD(v24), v24)) {
                  goto LABEL_135;
                }
                uint64_t v30 = (int)v30;
LABEL_24:
                if (v25 != v30) {
                  goto LABEL_11;
                }
                if (v25 < 1) {
                  goto LABEL_124;
                }
                break;
              case 2uLL:
                uint64_t v32 = *(void *)(v24 + 16);
                uint64_t v31 = *(void *)(v24 + 24);
                BOOL v28 = __OFSUB__(v31, v32);
                uint64_t v30 = v31 - v32;
                if (!v28) {
                  goto LABEL_24;
                }
                goto LABEL_134;
              case 3uLL:
                if (v25) {
                  goto LABEL_11;
                }
                goto LABEL_124;
              default:
                uint64_t v30 = BYTE6(v23);
                goto LABEL_24;
            }
            break;
          case 2uLL:
            uint64_t v27 = *(void *)(v21 + 16);
            uint64_t v26 = *(void *)(v21 + 24);
            BOOL v28 = __OFSUB__(v26, v27);
            uint64_t v25 = v26 - v27;
            if (!v28) {
              goto LABEL_17;
            }
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
            goto LABEL_136;
          case 3uLL:
            goto LABEL_17;
          default:
            uint64_t v25 = BYTE6(v22);
            goto LABEL_17;
        }
        switch(v22 >> 62)
        {
          case 1uLL:
            if ((int)v21 > v21 >> 32) {
              goto LABEL_137;
            }
            sub_1000361E0(*(void *)v9, *((void *)v9 + 1));
            uint64_t v48 = __DataStorage._bytes.getter();
            if (v48)
            {
              uint64_t v49 = v48;
              uint64_t v50 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v21, v50)) {
                goto LABEL_139;
              }
              char v93 = (const void *)(v49 + (int)v21 - v50);
            }
            else
            {
              char v93 = 0;
            }
            uint64_t v20 = v99;
            __DataStorage._length.getter();
            a1 = v98;
            if (!v29)
            {
              *(void *)&__s1[0] = v24;
              WORD4(__s1[0]) = v23;
              BYTE10(__s1[0]) = BYTE2(v23);
              BYTE11(__s1[0]) = BYTE3(v23);
              BYTE12(__s1[0]) = BYTE4(v23);
              BYTE13(__s1[0]) = BYTE5(v23);
              if (!v93) {
                goto LABEL_166;
              }
              int v60 = memcmp(v93, __s1, BYTE6(v23));
              goto LABEL_112;
            }
            if (v29 == 1)
            {
              if (v24 >> 32 < (int)v24) {
                goto LABEL_148;
              }
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v24, v57)) {
                  goto LABEL_155;
                }
                v56 += (int)v24 - v57;
              }
              a1 = v98;
              uint64_t v58 = __DataStorage._length.getter();
              if (v58 >= (v24 >> 32) - (int)v24) {
                size_t v59 = (v24 >> 32) - (int)v24;
              }
              else {
                size_t v59 = v58;
              }
              if (!v93) {
                goto LABEL_159;
              }
              uint64_t v20 = v99;
              if (!v56) {
                goto LABEL_160;
              }
              int v60 = memcmp(v93, v56, v59);
              sub_10001CFB8(v24, v23);
LABEL_112:
              sub_10001CFB8(v21, v22);
              if (v60) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v79 = *(void *)(v24 + 16);
            uint64_t v80 = *(void *)(v24 + 24);
            swift_retain();
            swift_retain();
            uint64_t v81 = (char *)__DataStorage._bytes.getter();
            if (v81)
            {
              uint64_t v82 = __DataStorage._offset.getter();
              if (__OFSUB__(v79, v82)) {
                goto LABEL_153;
              }
              v81 += v79 - v82;
            }
            if (__OFSUB__(v80, v79)) {
              goto LABEL_149;
            }
            uint64_t v83 = __DataStorage._length.getter();
            if (v83 >= v80 - v79) {
              size_t v84 = v80 - v79;
            }
            else {
              size_t v84 = v83;
            }
            uint64_t v20 = v99;
            if (!v93) {
              goto LABEL_167;
            }
            a1 = v98;
            if (!v81) {
              goto LABEL_168;
            }
            int v85 = memcmp(v93, v81, v84);
            swift_release();
            swift_release();
            sub_10001CFB8(v21, v22);
            if (v85) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 2uLL:
            uint64_t v38 = v22 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v39 = *(void *)(v21 + 16);
            swift_retain();
            swift_retain();
            uint64_t v40 = __DataStorage._bytes.getter();
            if (v40)
            {
              uint64_t v41 = v40;
              uint64_t v42 = __DataStorage._offset.getter();
              if (__OFSUB__(v39, v42)) {
                goto LABEL_138;
              }
              char v93 = (const void *)(v41 + v39 - v42);
            }
            else
            {
              char v93 = 0;
            }
            __DataStorage._length.getter();
            a1 = v98;
            uint64_t v20 = v99;
            if (!v29)
            {
              *(void *)&__s1[0] = v24;
              WORD4(__s1[0]) = v23;
              BYTE10(__s1[0]) = BYTE2(v23);
              BYTE11(__s1[0]) = BYTE3(v23);
              BYTE12(__s1[0]) = BYTE4(v23);
              BYTE13(__s1[0]) = BYTE5(v23);
              if (!v93) {
                goto LABEL_163;
              }
              int v55 = memcmp(v93, __s1, BYTE6(v23));
              goto LABEL_97;
            }
            if (v29 == 1)
            {
              uint64_t v90 = v38;
              if (v24 >> 32 < (int)v24) {
                goto LABEL_142;
              }
              swift_retain();
              uint64_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v52 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v24, v52)) {
                  goto LABEL_154;
                }
                v51 += (int)v24 - v52;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (v53 >= (v24 >> 32) - (int)v24) {
                size_t v54 = (v24 >> 32) - (int)v24;
              }
              else {
                size_t v54 = v53;
              }
              if (!v93) {
                goto LABEL_157;
              }
              uint64_t v20 = v99;
              if (!v51) {
                goto LABEL_158;
              }
              int v55 = memcmp(v93, v51, v54);
              sub_10001CFB8(v24, v23);
LABEL_97:
              swift_release();
              swift_release();
              if (v55) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v72 = *(void *)(v24 + 16);
            uint64_t v73 = *(void *)(v24 + 24);
            swift_retain();
            swift_retain();
            uint64_t v74 = (char *)__DataStorage._bytes.getter();
            if (v74)
            {
              uint64_t v75 = __DataStorage._offset.getter();
              if (__OFSUB__(v72, v75)) {
                goto LABEL_152;
              }
              v74 += v72 - v75;
            }
            if (__OFSUB__(v73, v72)) {
              goto LABEL_147;
            }
            uint64_t v76 = __DataStorage._length.getter();
            if (v76 >= v73 - v72) {
              size_t v77 = v73 - v72;
            }
            else {
              size_t v77 = v76;
            }
            uint64_t v20 = v99;
            if (!v93) {
              goto LABEL_164;
            }
            a1 = v98;
            if (!v74) {
              goto LABEL_165;
            }
            int v78 = memcmp(v93, v74, v77);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v78) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 3uLL:
            *(void *)((char *)__s1 + 6) = 0;
            *(void *)&__s1[0] = 0;
            if (!v29) {
              goto LABEL_51;
            }
            if (v29 == 1)
            {
              uint64_t v33 = (v24 >> 32) - (int)v24;
              if (v24 >> 32 < (int)v24) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v43 = __DataStorage._bytes.getter();
              if (!v43)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __DataStorage._length.getter();
                __break(1u);
                JUMPOUT(0x100DE2ED4);
              }
              uint64_t v35 = v43;
              uint64_t v44 = __DataStorage._offset.getter();
              uint64_t v37 = (int)v24 - v44;
              if (__OFSUB__((int)v24, v44)) {
                goto LABEL_146;
              }
              goto LABEL_42;
            }
            uint64_t v61 = *(void *)(v24 + 16);
            uint64_t v62 = *(void *)(v24 + 24);
            swift_retain();
            swift_retain();
            uint64_t v63 = (char *)__DataStorage._bytes.getter();
            if (v63)
            {
              uint64_t v64 = __DataStorage._offset.getter();
              if (__OFSUB__(v61, v64)) {
                goto LABEL_151;
              }
              v63 += v61 - v64;
            }
            int64_t v65 = v62 - v61;
            if (__OFSUB__(v62, v61)) {
              goto LABEL_143;
            }
            uint64_t v66 = __DataStorage._length.getter();
            uint64_t v20 = v99;
            if (!v63) {
              goto LABEL_162;
            }
            goto LABEL_90;
          default:
            *(void *)&__s1[0] = *(void *)v9;
            WORD4(__s1[0]) = v22;
            BYTE10(__s1[0]) = BYTE2(v22);
            BYTE11(__s1[0]) = BYTE3(v22);
            BYTE12(__s1[0]) = BYTE4(v22);
            BYTE13(__s1[0]) = BYTE5(v22);
            if (v29)
            {
              if (v29 == 1)
              {
                uint64_t v33 = (v24 >> 32) - (int)v24;
                if (v24 >> 32 < (int)v24) {
                  goto LABEL_140;
                }
                swift_retain();
                uint64_t v34 = __DataStorage._bytes.getter();
                if (!v34) {
                  goto LABEL_169;
                }
                uint64_t v35 = v34;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v37 = (int)v24 - v36;
                if (__OFSUB__((int)v24, v36)) {
                  goto LABEL_145;
                }
LABEL_42:
                uint64_t v45 = __DataStorage._length.getter();
                if (v45 >= v33) {
                  size_t v46 = v33;
                }
                else {
                  size_t v46 = v45;
                }
                int v47 = memcmp(__s1, (const void *)(v35 + v37), v46);
                sub_10001CFB8(v24, v23);
                a1 = v98;
                uint64_t v20 = v99;
                if (v47) {
                  goto LABEL_11;
                }
              }
              else
              {
                uint64_t v67 = *(void *)(v24 + 16);
                uint64_t v68 = *(void *)(v24 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_150;
                  }
                  v63 += v67 - v69;
                }
                int64_t v65 = v68 - v67;
                if (__OFSUB__(v68, v67)) {
                  goto LABEL_144;
                }
                uint64_t v66 = __DataStorage._length.getter();
                uint64_t v20 = v99;
                if (!v63) {
                  goto LABEL_161;
                }
LABEL_90:
                if (v66 >= v65) {
                  size_t v70 = v65;
                }
                else {
                  size_t v70 = v66;
                }
                int v71 = memcmp(__s1, v63, v70);
                swift_release();
                swift_release();
                a1 = v98;
                if (v71) {
                  goto LABEL_11;
                }
              }
            }
            else
            {
LABEL_51:
              uint64_t __s2 = v24;
              __int16 v106 = v23;
              char v107 = BYTE2(v23);
              char v108 = BYTE3(v23);
              char v109 = BYTE4(v23);
              char v110 = BYTE5(v23);
              if (memcmp(__s1, &__s2, BYTE6(v23))) {
                goto LABEL_11;
              }
            }
LABEL_124:
            if ((static UUID.== infix(_:_:)() & 1) != 0
              && (static UUID.== infix(_:_:)() & 1) != 0
              && v9[v101[7]] == *((unsigned char *)a1 + v94)
              && (sub_100DF62D4(*(void *)&v9[v101[8]], *(uint64_t *)((char *)a1 + v92)) & 1) != 0
              && v9[v101[9]] == *((unsigned char *)a1 + v91))
            {
              sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
              ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_130;
            }
LABEL_11:
            sub_100DF3958((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
            a2 = (a2 + 1) & v102;
            if (((*(void *)(v104 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_130;
            }
            break;
        }
      }
    }
  }
LABEL_130:
  uint64_t v86 = *v97;
  *(void *)(*v97 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8((uint64_t)a1, *(void *)(v86 + 48) + *(void *)(v96 + 72) * a2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v88 = *(void *)(v86 + 16);
  BOOL v28 = __OFADD__(v88, 1);
  uint64_t v89 = v88 + 1;
  if (v28)
  {
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
  }
  *(void *)(v86 + 16) = v89;
  return result;
}

Swift::Int sub_100DE2F04(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  char v30 = result;
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DD90F0();
    }
    else
    {
      if (v8 > v7)
      {
        uint64_t result = (Swift::Int)sub_100DE9780(&qword_10165F170);
        goto LABEL_62;
      }
      sub_100DECA9C();
    }
    uint64_t v9 = *v3;
    Hasher.init(_seed:)();
    sub_1012638E4(v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
    a2 = result & ~v10;
    if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      uint64_t v12 = v6;
      while (2)
      {
        unint64_t v13 = 0xE700000000000000;
        unint64_t v14 = 0x7972616D697270;
        switch(*(unsigned char *)(*(void *)(v9 + 48) + a2))
        {
          case 1:
            unint64_t v13 = 0xE900000000000079;
            unint64_t v14 = 0x7261646E6F636573;
            break;
          case 2:
            unint64_t v14 = 0xD000000000000019;
            unint64_t v13 = 0x80000001013EF280;
            break;
          case 3:
            unint64_t v14 = 0xD00000000000001BLL;
            unint64_t v13 = 0x80000001013EF2A0;
            break;
          case 4:
            unint64_t v14 = 0x646E7542646C6977;
            unint64_t v13 = 0xEA0000000000656CLL;
            break;
          case 5:
            unint64_t v14 = 0x417972616D697270;
            unint64_t v13 = 0xEE00737365726464;
            break;
          case 6:
            BOOL v15 = "Bundle";
            goto LABEL_27;
          case 7:
            unint64_t v14 = 0xD000000000000012;
            unint64_t v13 = 0x80000001013EE1F0;
            break;
          case 8:
            unint64_t v14 = 0xD000000000000011;
            unint64_t v13 = 0x80000001013EE210;
            break;
          case 9:
            unint64_t v14 = 0x697463656E6E6F63;
            unint64_t v13 = 0xED000079654B6E6FLL;
            break;
          case 0xA:
            unint64_t v14 = 0x656E774F7261656ELL;
            unint64_t v13 = 0xEC00000079654B72;
            break;
          case 0xB:
            unint64_t v14 = 0x656B6F546E696F6ALL;
            unint64_t v13 = 0xE90000000000006ELL;
            break;
          case 0xC:
            unint64_t v14 = 0xD000000000000015;
            unint64_t v13 = 0x80000001013EF310;
            break;
          case 0xD:
            BOOL v15 = "beaconGroupAttributes";
LABEL_27:
            unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
            unint64_t v14 = 0xD000000000000010;
            break;
          case 0xE:
            unint64_t v14 = 0x7461636F4C626577;
            unint64_t v13 = 0xEE0079654B6E6F69;
            break;
          case 0xF:
            unint64_t v14 = 0x646174654D626577;
            unint64_t v13 = 0xEB00000000617461;
            break;
          case 0x10:
            unint64_t v14 = 0x6D65744974736F6CLL;
            unint64_t v13 = 0xED00007365746144;
            break;
          default:
            break;
        }
        unint64_t v16 = 0xE700000000000000;
        uint64_t v17 = 0x7972616D697270;
        switch(v12)
        {
          case 1:
            unint64_t v16 = 0xE900000000000079;
            if (v14 != 0x7261646E6F636573) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 2:
            unint64_t v22 = 0xD000000000000019;
            unint64_t v23 = "elegatedShare";
            goto LABEL_51;
          case 3:
            unint64_t v22 = 0xD00000000000001BLL;
            unint64_t v23 = "primaryLocationDecryption";
            goto LABEL_51;
          case 4:
            unint64_t v16 = 0xEA0000000000656CLL;
            if (v14 != 0x646E7542646C6977) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 5:
            uint64_t v20 = 0x417972616D697270;
            uint64_t v21 = 0x737365726464;
            goto LABEL_47;
          case 6:
            uint64_t v24 = "Bundle";
            goto LABEL_60;
          case 7:
            unint64_t v22 = 0xD000000000000012;
            unint64_t v23 = "ude";
            goto LABEL_51;
          case 8:
            unint64_t v22 = 0xD000000000000011;
            unint64_t v23 = "circleSharedSecret";
            goto LABEL_51;
          case 9:
            uint64_t v18 = 0x697463656E6E6F63;
            uint64_t v19 = 0x79654B6E6FLL;
            goto LABEL_38;
          case 10:
            uint64_t v17 = 0x656E774F7261656ELL;
            unint64_t v16 = 0xEC00000079654B72;
            goto LABEL_54;
          case 11:
            unint64_t v16 = 0xE90000000000006ELL;
            if (v14 != 0x656B6F546E696F6ALL) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 12:
            unint64_t v22 = 0xD000000000000015;
            unint64_t v23 = "";
LABEL_51:
            unint64_t v16 = (unint64_t)v23 | 0x8000000000000000;
            if (v14 != v22) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 13:
            uint64_t v24 = "beaconGroupAttributes";
LABEL_60:
            unint64_t v16 = (unint64_t)v24 | 0x8000000000000000;
            if (v14 != 0xD000000000000010) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 14:
            uint64_t v20 = 0x7461636F4C626577;
            uint64_t v21 = 0x79654B6E6F69;
LABEL_47:
            unint64_t v16 = v21 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v14 != v20) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 15:
            unint64_t v16 = 0xEB00000000617461;
            if (v14 != 0x646174654D626577) {
              goto LABEL_56;
            }
            goto LABEL_55;
          case 16:
            uint64_t v18 = 0x6D65744974736F6CLL;
            uint64_t v19 = 0x7365746144;
LABEL_38:
            unint64_t v16 = v19 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v14 != v18) {
              goto LABEL_56;
            }
            goto LABEL_55;
          default:
LABEL_54:
            if (v14 != v17) {
              goto LABEL_56;
            }
LABEL_55:
            if (v13 == v16) {
              goto LABEL_65;
            }
LABEL_56:
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v25) {
              goto LABEL_66;
            }
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_62:
  uint64_t v26 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v26 + 48) + a2) = v30;
  uint64_t v27 = *(void *)(v26 + 16);
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease_n();
LABEL_66:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100DE34F0);
  }
  *(void *)(v26 + 16) = v29;
  return result;
}

Swift::Int sub_100DE3578(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_46;
  }
  if (a3)
  {
    sub_100DD964C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100DE8248();
      goto LABEL_46;
    }
    sub_100DECFC4();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  sub_100E8EAB8();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  uint64_t v41 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v39 = ~v9;
    uint64_t v38 = *(void *)(v8 + 48);
    uint64_t v51 = *(void *)(v5 + 8);
    uint64_t v52 = *(void *)v5;
    int v32 = *(unsigned __int8 *)(v5 + 131);
    int v33 = *(unsigned __int8 *)(v5 + 129);
    uint64_t v30 = *(void *)(v5 + 152);
    uint64_t v31 = *(void *)(v5 + 144);
    while (1)
    {
      uint64_t v10 = v38 + 160 * a2;
      uint64_t result = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v11 = *(void *)(v10 + 24);
      uint64_t v13 = *(void *)(v10 + 32);
      uint64_t v14 = *(void *)(v10 + 40);
      uint64_t v15 = *(void *)(v10 + 48);
      uint64_t v16 = *(void *)(v10 + 56);
      uint64_t v17 = *(void *)(v10 + 64);
      uint64_t v18 = *(void *)(v10 + 72);
      uint64_t v49 = *(void *)(v10 + 88);
      uint64_t v50 = *(void *)(v10 + 80);
      uint64_t v47 = *(void *)(v10 + 104);
      uint64_t v48 = *(void *)(v10 + 96);
      uint64_t v45 = *(void *)(v10 + 120);
      uint64_t v46 = *(void *)(v10 + 112);
      int v43 = *(unsigned __int8 *)(v10 + 129);
      int v44 = *(unsigned __int8 *)(v10 + 128);
      int v42 = *(unsigned __int8 *)(v10 + 130);
      int v40 = *(unsigned __int8 *)(v10 + 131);
      int v37 = *(unsigned __int8 *)(v10 + 136);
      BOOL v19 = *(void *)v10 == v52 && *(void *)(v10 + 8) == v51;
      uint64_t v35 = *(void *)(v10 + 152);
      uint64_t v36 = *(void *)(v10 + 144);
      if (v19 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v12 == *(void *)(v5 + 16) && v11 == *(void *)(v5 + 24)
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v13 == *(void *)(v5 + 32) && v14 == *(void *)(v5 + 40)
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            if (v15 == *(void *)(v5 + 48) && v16 == *(void *)(v5 + 56)
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              if (v17 == *(void *)(v5 + 64) && v18 == *(void *)(v5 + 72)
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                if (v50 == *(void *)(v5 + 80) && v49 == *(void *)(v5 + 88)
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  if (v48 == *(void *)(v5 + 96) && v47 == *(void *)(v5 + 104)
                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    if (v46 == *(void *)(v5 + 112) && v45 == *(void *)(v5 + 120)
                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
                      if (((v44 ^ *(unsigned __int8 *)(v5 + 128)) & 1) == 0
                        && ((v43 ^ v33) & 1) == 0
                        && ((v42 ^ *(unsigned __int8 *)(v5 + 130)) & 1) == 0
                        && ((v40 ^ v32) & 1) == 0
                        && v37 == *(unsigned __int8 *)(v5 + 136))
                      {
                        if (v36 == v31 && v35 == v30) {
                          break;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      a2 = (a2 + 1) & v39;
      if (((*(void *)(v41 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_46;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_46:
  uint64_t v20 = *v34;
  *(void *)(*v34 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v21 = (_OWORD *)(*(void *)(v20 + 48) + 160 * a2);
  long long v22 = *(_OWORD *)(v5 + 80);
  v21[4] = *(_OWORD *)(v5 + 64);
  v21[5] = v22;
  long long v23 = *(_OWORD *)(v5 + 48);
  uint64_t v21[2] = *(_OWORD *)(v5 + 32);
  v21[3] = v23;
  long long v24 = *(_OWORD *)(v5 + 144);
  v21[8] = *(_OWORD *)(v5 + 128);
  v21[9] = v24;
  long long v25 = *(_OWORD *)(v5 + 112);
  v21[6] = *(_OWORD *)(v5 + 96);
  v21[7] = v25;
  long long v26 = *(_OWORD *)(v5 + 16);
  *uint64_t v21 = *(_OWORD *)v5;
  v21[1] = v26;
  uint64_t v27 = *(void *)(v20 + 16);
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v29;
  }
  return result;
}

uint64_t sub_100DE3964(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100DD98F0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for MACAddress, &qword_10165F140);
      goto LABEL_12;
    }
    sub_100DED23C();
  }
  uint64_t v12 = *v3;
  sub_100DF3A20((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100DF3A20((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE3C20(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100DD9CEC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100DE8458();
      goto LABEL_22;
    }
    sub_100DED5EC();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *char v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100DE3DBC(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100DD9FCC();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100DE860C();
      goto LABEL_12;
    }
    sub_100DED89C();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_100173F4C(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_1004268DC((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100DE3F28(uint64_t a1, unint64_t a2, char a3)
{
  char v98 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v7 = *((void *)v98 - 1);
  __chkstk_darwin(v98);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v94 = v7;
  uint64_t v95 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DDA298();
    }
    else
    {
      if (v11 > v10)
      {
        sub_100DE7A90(type metadata accessor for OwnedBeaconGroup, &qword_10165F148, type metadata accessor for OwnedBeaconGroup);
        goto LABEL_140;
      }
      sub_100DEDB30();
    }
    uint64_t v12 = *v3;
    Hasher.init(_seed:)();
    uint64_t v13 = a1 + v98[6];
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v93 = v13;
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
    a2 = v14 & ~v15;
    uint64_t v101 = v12 + 56;
    if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v99 = ~v15;
      uint64_t v100 = *(void *)(v7 + 72);
      uint64_t v96 = a1;
      uint64_t v97 = v12;
      while (1)
      {
        sub_100DF38F0(*(void *)(v12 + 48) + v100 * a2, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
        uint64_t v17 = *(void *)v9;
        unint64_t v16 = *((void *)v9 + 1);
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(v17) - v17;
            if (__OFSUB__(HIDWORD(v17), v17)) {
              goto LABEL_143;
            }
            uint64_t v20 = (int)v20;
LABEL_17:
            unint64_t v24 = v19 >> 62;
            switch(v19 >> 62)
            {
              case 1uLL:
                LODWORD(v25) = HIDWORD(v18) - v18;
                if (__OFSUB__(HIDWORD(v18), v18)) {
                  goto LABEL_145;
                }
                uint64_t v25 = (int)v25;
LABEL_24:
                if (v20 != v25) {
                  goto LABEL_11;
                }
                if (v20 < 1) {
                  goto LABEL_124;
                }
                break;
              case 2uLL:
                uint64_t v27 = *(void *)(v18 + 16);
                uint64_t v26 = *(void *)(v18 + 24);
                BOOL v23 = __OFSUB__(v26, v27);
                uint64_t v25 = v26 - v27;
                if (!v23) {
                  goto LABEL_24;
                }
                goto LABEL_144;
              case 3uLL:
                if (v20) {
                  goto LABEL_11;
                }
                goto LABEL_124;
              default:
                uint64_t v25 = BYTE6(v19);
                goto LABEL_24;
            }
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v17 + 16);
            uint64_t v21 = *(void *)(v17 + 24);
            BOOL v23 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v23) {
              goto LABEL_17;
            }
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            goto LABEL_146;
          case 3uLL:
            goto LABEL_17;
          default:
            uint64_t v20 = BYTE6(v16);
            goto LABEL_17;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_147;
            }
            sub_1000361E0(*(void *)v9, *((void *)v9 + 1));
            uint64_t v43 = __DataStorage._bytes.getter();
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v45 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v17, v45)) {
                goto LABEL_149;
              }
              uint64_t v92 = (const void *)(v44 + (int)v17 - v45);
            }
            else
            {
              uint64_t v92 = 0;
            }
            uint64_t v12 = v97;
            __DataStorage._length.getter();
            a1 = v96;
            if (!v24)
            {
              *(void *)__s1 = v18;
              *(_WORD *)&__s1[8] = v19;
              __s1[10] = BYTE2(v19);
              __s1[11] = BYTE3(v19);
              __s1[12] = BYTE4(v19);
              __s1[13] = BYTE5(v19);
              if (!v92) {
                goto LABEL_176;
              }
              int v55 = memcmp(v92, __s1, BYTE6(v19));
              goto LABEL_112;
            }
            if (v24 == 1)
            {
              if (v18 >> 32 < (int)v18) {
                goto LABEL_158;
              }
              swift_retain();
              uint64_t v51 = (char *)__DataStorage._bytes.getter();
              if (v51)
              {
                uint64_t v52 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v18, v52)) {
                  goto LABEL_165;
                }
                v51 += (int)v18 - v52;
              }
              a1 = v96;
              uint64_t v53 = __DataStorage._length.getter();
              if (v53 >= (v18 >> 32) - (int)v18) {
                size_t v54 = (v18 >> 32) - (int)v18;
              }
              else {
                size_t v54 = v53;
              }
              if (!v92) {
                goto LABEL_169;
              }
              uint64_t v12 = v97;
              if (!v51) {
                goto LABEL_170;
              }
              int v55 = memcmp(v92, v51, v54);
              sub_10001CFB8(v18, v19);
LABEL_112:
              sub_10001CFB8(v17, v16);
              if (v55) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v74 = *(void *)(v18 + 16);
            uint64_t v75 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            uint64_t v76 = (char *)__DataStorage._bytes.getter();
            if (v76)
            {
              uint64_t v77 = __DataStorage._offset.getter();
              if (__OFSUB__(v74, v77)) {
                goto LABEL_163;
              }
              v76 += v74 - v77;
            }
            if (__OFSUB__(v75, v74)) {
              goto LABEL_159;
            }
            uint64_t v78 = __DataStorage._length.getter();
            if (v78 >= v75 - v74) {
              size_t v79 = v75 - v74;
            }
            else {
              size_t v79 = v78;
            }
            uint64_t v12 = v97;
            if (!v92) {
              goto LABEL_177;
            }
            a1 = v96;
            if (!v76) {
              goto LABEL_178;
            }
            int v80 = memcmp(v92, v76, v79);
            swift_release();
            swift_release();
            sub_10001CFB8(v17, v16);
            if (v80) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 2uLL:
            uint64_t v33 = v16 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v34 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v35 = __DataStorage._bytes.getter();
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v37)) {
                goto LABEL_148;
              }
              uint64_t v92 = (const void *)(v36 + v34 - v37);
            }
            else
            {
              uint64_t v92 = 0;
            }
            __DataStorage._length.getter();
            a1 = v96;
            uint64_t v12 = v97;
            if (!v24)
            {
              *(void *)__s1 = v18;
              *(_WORD *)&__s1[8] = v19;
              __s1[10] = BYTE2(v19);
              __s1[11] = BYTE3(v19);
              __s1[12] = BYTE4(v19);
              __s1[13] = BYTE5(v19);
              if (!v92) {
                goto LABEL_173;
              }
              int v50 = memcmp(v92, __s1, BYTE6(v19));
              goto LABEL_97;
            }
            if (v24 == 1)
            {
              uint64_t v91 = v33;
              if (v18 >> 32 < (int)v18) {
                goto LABEL_152;
              }
              swift_retain();
              uint64_t v46 = (char *)__DataStorage._bytes.getter();
              if (v46)
              {
                uint64_t v47 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v18, v47)) {
                  goto LABEL_164;
                }
                v46 += (int)v18 - v47;
              }
              uint64_t v48 = __DataStorage._length.getter();
              if (v48 >= (v18 >> 32) - (int)v18) {
                size_t v49 = (v18 >> 32) - (int)v18;
              }
              else {
                size_t v49 = v48;
              }
              if (!v92) {
                goto LABEL_167;
              }
              uint64_t v12 = v97;
              if (!v46) {
                goto LABEL_168;
              }
              int v50 = memcmp(v92, v46, v49);
              sub_10001CFB8(v18, v19);
LABEL_97:
              swift_release();
              swift_release();
              if (v50) {
                goto LABEL_11;
              }
              goto LABEL_124;
            }
            uint64_t v67 = *(void *)(v18 + 16);
            uint64_t v68 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            uint64_t v69 = (char *)__DataStorage._bytes.getter();
            if (v69)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v67, v70)) {
                goto LABEL_162;
              }
              v69 += v67 - v70;
            }
            if (__OFSUB__(v68, v67)) {
              goto LABEL_157;
            }
            uint64_t v71 = __DataStorage._length.getter();
            if (v71 >= v68 - v67) {
              size_t v72 = v68 - v67;
            }
            else {
              size_t v72 = v71;
            }
            uint64_t v12 = v97;
            if (!v92) {
              goto LABEL_174;
            }
            a1 = v96;
            if (!v69) {
              goto LABEL_175;
            }
            int v73 = memcmp(v92, v69, v72);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v73) {
              goto LABEL_11;
            }
            goto LABEL_124;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v24) {
              goto LABEL_51;
            }
            if (v24 == 1)
            {
              uint64_t v28 = (v18 >> 32) - (int)v18;
              if (v18 >> 32 < (int)v18) {
                goto LABEL_151;
              }
              swift_retain();
              uint64_t v38 = __DataStorage._bytes.getter();
              if (!v38)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __DataStorage._length.getter();
                __break(1u);
                JUMPOUT(0x100DE4B20);
              }
              uint64_t v30 = v38;
              uint64_t v39 = __DataStorage._offset.getter();
              uint64_t v32 = (int)v18 - v39;
              if (__OFSUB__((int)v18, v39)) {
                goto LABEL_156;
              }
              goto LABEL_42;
            }
            uint64_t v56 = *(void *)(v18 + 16);
            uint64_t v57 = *(void *)(v18 + 24);
            swift_retain();
            swift_retain();
            uint64_t v58 = (char *)__DataStorage._bytes.getter();
            if (v58)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v56, v59)) {
                goto LABEL_161;
              }
              v58 += v56 - v59;
            }
            int64_t v60 = v57 - v56;
            if (__OFSUB__(v57, v56)) {
              goto LABEL_153;
            }
            uint64_t v61 = __DataStorage._length.getter();
            uint64_t v12 = v97;
            if (!v58) {
              goto LABEL_172;
            }
            goto LABEL_90;
          default:
            *(void *)__s1 = *(void *)v9;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (v24)
            {
              if (v24 == 1)
              {
                uint64_t v28 = (v18 >> 32) - (int)v18;
                if (v18 >> 32 < (int)v18) {
                  goto LABEL_150;
                }
                swift_retain();
                uint64_t v29 = __DataStorage._bytes.getter();
                if (!v29) {
                  goto LABEL_179;
                }
                uint64_t v30 = v29;
                uint64_t v31 = __DataStorage._offset.getter();
                uint64_t v32 = (int)v18 - v31;
                if (__OFSUB__((int)v18, v31)) {
                  goto LABEL_155;
                }
LABEL_42:
                uint64_t v40 = __DataStorage._length.getter();
                if (v40 >= v28) {
                  size_t v41 = v28;
                }
                else {
                  size_t v41 = v40;
                }
                int v42 = memcmp(__s1, (const void *)(v30 + v32), v41);
                sub_10001CFB8(v18, v19);
                a1 = v96;
                uint64_t v12 = v97;
                if (v42) {
                  goto LABEL_11;
                }
              }
              else
              {
                uint64_t v62 = *(void *)(v18 + 16);
                uint64_t v63 = *(void *)(v18 + 24);
                swift_retain();
                swift_retain();
                uint64_t v58 = (char *)__DataStorage._bytes.getter();
                if (v58)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_160;
                  }
                  v58 += v62 - v64;
                }
                int64_t v60 = v63 - v62;
                if (__OFSUB__(v63, v62)) {
                  goto LABEL_154;
                }
                uint64_t v61 = __DataStorage._length.getter();
                uint64_t v12 = v97;
                if (!v58) {
                  goto LABEL_171;
                }
LABEL_90:
                if (v61 >= v60) {
                  size_t v65 = v60;
                }
                else {
                  size_t v65 = v61;
                }
                int v66 = memcmp(__s1, v58, v65);
                swift_release();
                swift_release();
                a1 = v96;
                if (v66) {
                  goto LABEL_11;
                }
              }
            }
            else
            {
LABEL_51:
              uint64_t __s2 = v18;
              __int16 v103 = v19;
              char v104 = BYTE2(v19);
              char v105 = BYTE3(v19);
              char v106 = BYTE4(v19);
              char v107 = BYTE5(v19);
              if (memcmp(__s1, &__s2, BYTE6(v19))) {
                goto LABEL_11;
              }
            }
LABEL_124:
            char v81 = *(unsigned char *)(a1 + 24);
            if (v9[24] == 1)
            {
              if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
                goto LABEL_11;
              }
            }
            else
            {
              if (*((void *)v9 + 2) != *(void *)(a1 + 16)) {
                char v81 = 1;
              }
              if (v81) {
                goto LABEL_11;
              }
            }
            if ((static UUID.== infix(_:_:)() & 1) != 0
              && (static MACAddress.== infix(_:_:)() & 1) != 0
              && v9[v98[8]] == *(unsigned char *)(a1 + v98[8]))
            {
              uint64_t v82 = v98[9];
              uint64_t v83 = *(void *)&v9[v82];
              uint64_t v84 = *(void *)&v9[v82 + 8];
              int v85 = (void *)(a1 + v82);
              BOOL v86 = v83 == *v85 && v84 == v85[1];
              if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)())
                && (sub_100DF6750(*(void *)&v9[v98[10]], *(void *)(a1 + v98[10])) & 1) != 0)
              {
                sub_100DF3958((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_140;
              }
            }
LABEL_11:
            sub_100DF3958((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
            a2 = (a2 + 1) & v99;
            if (((*(void *)(v101 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_140;
            }
            break;
        }
      }
    }
  }
LABEL_140:
  uint64_t v87 = *v95;
  *(void *)(*v95 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8(a1, *(void *)(v87 + 48) + *(void *)(v94 + 72) * a2, type metadata accessor for OwnedBeaconGroup);
  uint64_t v89 = *(void *)(v87 + 16);
  BOOL v23 = __OFADD__(v89, 1);
  uint64_t v90 = v89 + 1;
  if (v23)
  {
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
  }
  *(void *)(v87 + 16) = v90;
  return result;
}

Swift::Int sub_100DE4B50(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100DDA6AC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100DE87E8();
      goto LABEL_14;
    }
    sub_100DEDEEC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  sub_100E8AF6C(v19, v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    char v11 = sub_10072A704(v10, v5);
    uint64_t result = swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_13:
      sub_10000588C((uint64_t *)&unk_101653DC0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v13 = swift_bridgeObjectRetain();
        char v14 = sub_10072A704(v13, v5);
        uint64_t result = swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v15 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v5;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

uint64_t sub_100DE4CE0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for BeaconStatus(0);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v38 - v20;
  unint64_t v22 = *(void *)(*v3 + 16);
  unint64_t v23 = *(void *)(*v3 + 24);
  uint64_t v38 = v3;
  if (v23 > v22 && (a3 & 1) != 0) {
    goto LABEL_18;
  }
  if (a3)
  {
    sub_100DDA8F4();
  }
  else
  {
    if (v23 > v22)
    {
      sub_100DE7A90(type metadata accessor for BeaconStatus, &qword_10165F0C8, type metadata accessor for BeaconStatus);
      goto LABEL_18;
    }
    sub_100DEE100();
  }
  uint64_t v24 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  sub_100DF3A20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v25 = Hasher._finalize()();
  uint64_t v26 = -1 << *(unsigned char *)(v24 + 32);
  a2 = v25 & ~v26;
  uint64_t v43 = v24 + 56;
  uint64_t v44 = v24;
  if ((*(void *)(v24 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v42 = ~v26;
    uint64_t v41 = *(void *)(v39 + 72);
    while (1)
    {
      sub_100DF38F0(*(void *)(v44 + 48) + v41 * a2, (uint64_t)v21, type metadata accessor for BeaconStatus);
      char v27 = static UUID.== infix(_:_:)();
      sub_100DF38F0((uint64_t)v21, (uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_100DF38F0(a1, (uint64_t)v16, type metadata accessor for BeaconStatus);
      if ((v27 & 1) == 0) {
        break;
      }
      char v28 = static Date.== infix(_:_:)();
      sub_100DF3958((uint64_t)v16, type metadata accessor for BeaconStatus);
      sub_100DF3958((uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_100DF38F0((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_100DF38F0(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
      if ((v28 & 1) == 0) {
        goto LABEL_11;
      }
      uint64_t v29 = *(int *)(v7 + 20);
      int v40 = v13[v29];
      uint64_t v30 = v7;
      int v31 = v10[v29];
      sub_100DF3958((uint64_t)v10, type metadata accessor for BeaconStatus);
      sub_100DF3958((uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_100DF3958((uint64_t)v21, type metadata accessor for BeaconStatus);
      BOOL v32 = v40 == v31;
      uint64_t v7 = v30;
      if (v32)
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_18;
      }
LABEL_12:
      a2 = (a2 + 1) & v42;
      if (((*(void *)(v43 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_18;
      }
    }
    sub_100DF3958((uint64_t)v16, type metadata accessor for BeaconStatus);
    sub_100DF3958((uint64_t)v19, type metadata accessor for BeaconStatus);
    sub_100DF38F0((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100DF38F0(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
LABEL_11:
    sub_100DF3958((uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_100DF3958((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100DF3958((uint64_t)v21, type metadata accessor for BeaconStatus);
    goto LABEL_12;
  }
LABEL_18:
  uint64_t v33 = *v38;
  *(void *)(*v38 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8(a1, *(void *)(v33 + 48) + *(void *)(v39 + 72) * a2, type metadata accessor for BeaconStatus);
  uint64_t v35 = *(void *)(v33 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36) {
    __break(1u);
  }
  else {
    *(void *)(v33 + 16) = v37;
  }
  return result;
}

uint64_t sub_100DE51D8(Swift::UInt64 *a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (double *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v26 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DDB058();
    }
    else
    {
      if (v12 > v11)
      {
        uint64_t v13 = v8;
        sub_100DE7A90(type metadata accessor for WildModeTrackingLocation, &qword_10165F028, type metadata accessor for WildModeTrackingLocation);
        goto LABEL_26;
      }
      sub_100DEE7EC();
    }
    uint64_t v14 = *v3;
    Hasher.init(_seed:)();
    if ((*a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = *a1;
    }
    else {
      Swift::UInt64 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    if ((a1[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v16 = a1[1];
    }
    else {
      Swift::UInt64 v16 = 0;
    }
    Hasher._combine(_:)(v16);
    if ((a1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = a1[2];
    }
    else {
      Swift::UInt64 v17 = 0;
    }
    Hasher._combine(_:)(v17);
    type metadata accessor for Date();
    sub_100DF3A20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v14 + 32);
    a2 = v18 & ~v19;
    if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v20 = ~v19;
      uint64_t v13 = v8;
      uint64_t v8 = *(void *)(v8 + 72);
      while (1)
      {
        sub_100DF38F0(*(void *)(v14 + 48) + v8 * a2, (uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
        if (*v10 == *(double *)a1
          && v10[1] == *((double *)a1 + 1)
          && v10[2] == *((double *)a1 + 2)
          && (static Date.== infix(_:_:)() & 1) != 0)
        {
          break;
        }
        sub_100DF3958((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
        a2 = (a2 + 1) & v20;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_26;
        }
      }
      sub_100DF3958((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  uint64_t v13 = v8;
LABEL_26:
  uint64_t v21 = *v26;
  *(void *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8((uint64_t)a1, *(void *)(v21 + 48) + *(void *)(v13 + 72) * a2, type metadata accessor for WildModeTrackingLocation);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

uint64_t sub_100DE551C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Destination();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100DDB2C8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for Destination, (uint64_t *)&unk_10165F090);
      goto LABEL_12;
    }
    sub_100DEEA28();
  }
  uint64_t v12 = *v3;
  sub_100DF3A20(&qword_10165F080, (void (*)(uint64_t))&type metadata accessor for Destination);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    Swift::UInt64 v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100DF3A20(&qword_10165F088, (void (*)(uint64_t))&type metadata accessor for Destination);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE57D8(Swift::Int result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100DDB6C4();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100DE9780((uint64_t *)&unk_10165F180);
      goto LABEL_14;
    }
    sub_100DEEDD8();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(unsigned __int8 *)(v11 + a2) == v6)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v11 + a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v13 + 48) + a2) = v6;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t sub_100DE593C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100DDB970();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100DE95DC((uint64_t *)&unk_10165F260);
      goto LABEL_12;
    }
    sub_100DEF054();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  sub_100DF3A20((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100DF3A20((unint64_t *)&unk_10166C2C0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE5B28(Swift::Int a1, unint64_t a2, char a3)
{
  return sub_100DDF218(a1, a2, a3, &qword_10165F1E8);
}

uint64_t sub_100DE5B3C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v23 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100DDBF3C();
    }
    else
    {
      if (v12 > v11)
      {
        uint64_t v13 = v8;
        sub_100DE7A90((uint64_t (*)(void))type metadata accessor for BeaconIdentifier, &qword_101659180, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        goto LABEL_15;
      }
      sub_100DEF5B4();
    }
    uint64_t v14 = *v3;
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v15 = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
    a2 = v15 & ~v16;
    if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v17 = ~v16;
      uint64_t v13 = v8;
      uint64_t v8 = *(void *)(v8 + 72);
      while (1)
      {
        sub_100DF38F0(*(void *)(v14 + 48) + v8 * a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_100DF3958((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_15;
        }
      }
      sub_100DF3958((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  uint64_t v13 = v8;
LABEL_15:
  uint64_t v18 = *v23;
  *(void *)(*v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100DF39B8(a1, *(void *)(v18 + 48) + *(void *)(v13 + 72) * a2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v22;
  }
  return result;
}

uint64_t sub_100DE5E44(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100DDC37C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100DE8FF0();
      goto LABEL_14;
    }
    sub_100DEF98C();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_100DE5F6C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    sub_100DDC620();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100DE95DC(&qword_10166C280);
      goto LABEL_13;
    }
    sub_100DEFBF4();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  id v10 = *(id *)(v6 + 32);
  NSObject.hash(into:)();

  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for Service();
    uint64_t v12 = *(void *)(v9 + 48);
    uint64_t v13 = *(void *)(v6 + 32);
    if (*(void *)(*(void *)(v12 + 8 * a2) + 32) == v13)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v11;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v12 + 8 * a2) + 32) == v13) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

Swift::Int sub_100DE60E4(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    sub_100DDC8E8();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100DE95DC((uint64_t *)&unk_10165F1B0);
      goto LABEL_13;
    }
    sub_100DEFE90();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  id v10 = *(id *)(v6 + 40);
  NSObject.hash(into:)();

  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for Characteristic();
    uint64_t v12 = *(void *)(v9 + 48);
    uint64_t v13 = *(void *)(v6 + 40);
    if (*(void *)(*(void *)(v12 + 8 * a2) + 40) == v13)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v11;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v12 + 8 * a2) + 40) == v13) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

Swift::Int sub_100DE625C(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_49;
  }
  if (a3)
  {
    sub_100DDCE58();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100DE9194();
      goto LABEL_49;
    }
    sub_100DF03A4();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v41 = *(void *)v5;
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  uint64_t v39 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v37 = ~v10;
    uint64_t v36 = *(void *)(v8 + 48);
    do
    {
      uint64_t v11 = v36 + 88 * a2;
      uint64_t result = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v12 = *(void *)(v11 + 24);
      int v14 = *(unsigned __int8 *)(v11 + 32);
      uint64_t v15 = *(void *)(v11 + 40);
      uint64_t v16 = *(void *)(v11 + 48);
      uint64_t v18 = *(void *)(v11 + 56);
      uint64_t v17 = *(void *)(v11 + 64);
      uint64_t v38 = *(void *)(v11 + 72);
      uint64_t v40 = *(void *)(v11 + 80);
      if (*(void *)v11 != v41 || *(void *)(v11 + 8) != v9)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_11;
        }
      }
      if (v13 != *(void *)(v5 + 16) || v12 != *(void *)(v5 + 24))
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_11;
        }
      }
      if ((v14 ^ *(unsigned __int8 *)(v5 + 32))) {
        goto LABEL_11;
      }
      uint64_t v21 = *(void *)(v5 + 48);
      if (v16)
      {
        if (!v21) {
          goto LABEL_11;
        }
        if (v15 != *(void *)(v5 + 40) || v16 != v21)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
      }
      else if (v21)
      {
        goto LABEL_11;
      }
      uint64_t v23 = *(void *)(v5 + 64);
      if (v17)
      {
        if (!v23) {
          goto LABEL_11;
        }
        if (v18 != *(void *)(v5 + 56) || v17 != v23)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }
      }
      else if (v23)
      {
        goto LABEL_11;
      }
      uint64_t v25 = *(void *)(v5 + 80);
      if (v40)
      {
        if (v25)
        {
          BOOL v26 = v38 == *(void *)(v5 + 72) && v40 == v25;
          if (v26 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
LABEL_48:
            uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!v25)
      {
        goto LABEL_48;
      }
LABEL_11:
      a2 = (a2 + 1) & v37;
    }
    while (((*(void *)(v39 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_49:
  uint64_t v27 = *v35;
  *(void *)(*v35 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v28 = *(void *)(v27 + 48) + 88 * a2;
  long long v29 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v5;
  *(_OWORD *)(v28 + 16) = v29;
  *(void *)(v28 + 80) = *(void *)(v5 + 80);
  long long v30 = *(_OWORD *)(v5 + 64);
  long long v31 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v28 + 64) = v30;
  *(_OWORD *)(v28 + 32) = v31;
  uint64_t v32 = *(void *)(v27 + 16);
  BOOL v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (v33) {
    __break(1u);
  }
  else {
    *(void *)(v27 + 16) = v34;
  }
  return result;
}

Swift::Int sub_100DE6518(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = (uint64_t *)result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  Swift::Int v36 = result;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_50;
  }
  if (a3)
  {
    sub_100DDD1C4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100DE93B4();
      goto LABEL_50;
    }
    sub_100DF06F0();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = *v5;
  uint64_t v10 = v5[1];
  uint64_t v11 = (void *)v5[2];
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::UInt v12 = v11[2];
  Hasher._combine(_:)(v12);
  uint64_t v38 = v11;
  uint64_t v13 = v11[2];
  if (v13)
  {
    int v14 = v38 + 5;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  uint64_t v39 = v5[3];
  uint64_t v37 = v5[4];
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v15;
  uint64_t v42 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v40 = ~v15;
    uint64_t v41 = *(void *)(v8 + 48);
    while (1)
    {
      uint64_t v16 = (Swift::Int *)(v41 + 40 * a2);
      uint64_t result = *v16;
      uint64_t v18 = (void *)v16[2];
      Swift::Int v17 = v16[3];
      Swift::Int v19 = v16[4];
      if (*v16 != v9 || v16[1] != v10)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (v18[2] != v12) {
        goto LABEL_14;
      }
      if (!v12 || v18 == v38) {
        goto LABEL_37;
      }
      unint64_t v21 = v38[2];
      if (!v21) {
        goto LABEL_54;
      }
      if (v18[4] == v38[4] && v18[5] == v38[5]) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
LABEL_14:
      a2 = (a2 + 1) & v40;
      if (((*(void *)(v42 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_50;
      }
    }
    if (v12 != 1)
    {
      unint64_t v23 = v21 - 2;
      if (v21 < 2) {
        goto LABEL_56;
      }
      if (v18[6] != v38[6] || v18[7] != v38[7])
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (v12 != 2)
      {
        uint64_t v25 = v18 + 9;
        BOOL v26 = v38 + 9;
        Swift::UInt v27 = v12 - 2;
        while (v27)
        {
          if (!v23) {
            goto LABEL_53;
          }
          if (*(v25 - 1) != *(v26 - 1) || *v25 != *v26)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_14;
            }
          }
          --v23;
          v26 += 2;
          v25 += 2;
          if (!--v27) {
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
    }
LABEL_37:
    if (v17 == v39 && v19 == v37) {
      goto LABEL_57;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_57;
    }
    goto LABEL_14;
  }
LABEL_50:
  uint64_t v29 = *v35;
  *(void *)(*v35 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v30 = *(void *)(v29 + 48) + 40 * a2;
  long long v31 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v36;
  *(_OWORD *)(v30 + 16) = v31;
  *(void *)(v30 + 32) = *(void *)(v36 + 32);
  uint64_t v32 = *(void *)(v29 + 16);
  BOOL v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (v33) {
    goto LABEL_55;
  }
  *(void *)(v29 + 16) = v34;
  return result;
}

uint64_t sub_100DE6864(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t v12 = result;
  unint64_t v13 = *(void *)(*v7 + 16);
  unint64_t v14 = *(void *)(*v7 + 24);
  if (v14 > v13 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v15 = v13 + 1;
  if (a3)
  {
    sub_100DD77E8(v15, a4, a5, a6);
  }
  else
  {
    if (v14 > v13)
    {
      uint64_t result = (uint64_t)sub_100DE95DC(a4);
      goto LABEL_12;
    }
    sub_100DEB344(v15, a4, a5, a6);
  }
  uint64_t v16 = *v7;
  sub_10000588C(a5);
  sub_100062734(a6, a5);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v17 = -1 << *(unsigned char *)(v16 + 32);
  a2 = result & ~v17;
  if ((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v18 = ~v17;
    sub_100062734(a7, a5);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v19 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = v12;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v19 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE6A40(Swift::Int a1, unint64_t a2, char a3)
{
  return sub_100DDF218(a1, a2, a3, &qword_10165F010);
}

unint64_t sub_100DE6A54(unint64_t result, unint64_t a2, char a3)
{
  Swift::UInt32 v5 = result;
  unint64_t v6 = HIDWORD(result);
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    sub_100DDD86C();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (unint64_t)sub_100DE990C();
      goto LABEL_15;
    }
    sub_100DF0CDC();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      uint64_t v12 = (int *)(*(void *)(v9 + 48) + 8 * a2);
      int v14 = *v12;
      int v13 = v12[1];
      if (v14 == v5 && v13 == v6) {
        goto LABEL_18;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v17 = (Swift::UInt32 *)(*(void *)(v16 + 48) + 8 * a2);
  Swift::UInt32 *v17 = v5;
  v17[1] = v6;
  uint64_t v18 = *(void *)(v16 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v16 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_18:
  sub_10000588C(&qword_101650680);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100DE6BB8(Swift::Int result, unint64_t a2, Swift::UInt32 a3, unint64_t a4, char a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v12 = result;
  unint64_t v13 = *(void *)(*v7 + 16);
  unint64_t v14 = *(void *)(*v7 + 24);
  if (v14 <= v13 || (a5 & 1) == 0)
  {
    uint64_t v15 = v13 + 1;
    if (a5)
    {
      sub_100DDDB30(v15, a6);
    }
    else
    {
      if (v14 > v13)
      {
        uint64_t result = (Swift::Int)sub_100DE9AA4(a6);
        goto LABEL_125;
      }
      sub_100DF0F70(v15, a6);
    }
    uint64_t v16 = *v7;
    Hasher.init(_seed:)();
    sub_1000361E0(v12, a2);
    Data.hash(into:)();
    sub_10001CFB8(v12, a2);
    Hasher._combine(_:)(a3);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v16 + 32);
    a4 = result & ~v17;
    uint64_t v99 = v16 + 56;
    uint64_t v100 = v16;
    if ((*(void *)(v16 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
    {
      uint64_t v88 = a7;
      unint64_t v18 = a2 >> 62;
      uint64_t v98 = ~v17;
      BOOL v19 = __OFSUB__(HIDWORD(v12), v12);
      BOOL v95 = v19;
      size_t __n = BYTE6(a2);
      unint64_t v96 = a2;
      uint64_t v90 = (v12 >> 32) - (int)v12;
      uint64_t v91 = v12 >> 32;
      while (1)
      {
        uint64_t v20 = *(void *)(v100 + 48) + 24 * a4;
        uint64_t v21 = *(void *)v20;
        unint64_t v22 = *(void *)(v20 + 8);
        int v23 = *(_DWORD *)(v20 + 16);
        uint64_t v24 = 0;
        switch(v22 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v21), v21))
            {
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
              goto LABEL_131;
            }
            uint64_t v24 = HIDWORD(v21) - (int)v21;
LABEL_21:
            sub_1000361E0(v21, v22);
            sub_1000361E0(v21, v22);
LABEL_22:
            size_t v27 = __n;
            switch((int)v18)
            {
              case 1:
                size_t v27 = HIDWORD(v12) - (int)v12;
                if (v95) {
                  goto LABEL_129;
                }
                goto LABEL_26;
              case 2:
                uint64_t v29 = *(void *)(v12 + 16);
                uint64_t v28 = *(void *)(v12 + 24);
                BOOL v30 = __OFSUB__(v28, v29);
                size_t v27 = v28 - v29;
                if (!v30) {
                  goto LABEL_26;
                }
                goto LABEL_130;
              case 3:
                if (v24) {
                  goto LABEL_14;
                }
                goto LABEL_36;
              default:
LABEL_26:
                if (v24 != v27)
                {
LABEL_14:
                  sub_10001CFB8(v21, v22);
                  uint64_t result = sub_10001CFB8(v21, v22);
                  goto LABEL_15;
                }
                if (v24 < 1)
                {
LABEL_36:
                  sub_10001CFB8(v21, v22);
                  uint64_t result = sub_10001CFB8(v21, v22);
                }
                else
                {
                  switch(v22 >> 62)
                  {
                    case 1uLL:
                      if ((int)v21 > v21 >> 32) {
                        goto LABEL_132;
                      }
                      sub_1000361E0(v12, v96);
                      uint64_t v44 = __DataStorage._bytes.getter();
                      if (v44)
                      {
                        uint64_t v45 = v44;
                        uint64_t v46 = __DataStorage._offset.getter();
                        if (__OFSUB__((int)v21, v46)) {
                          goto LABEL_134;
                        }
                        uint64_t v47 = (const void *)(v45 + (int)v21 - v46);
                        __DataStorage._length.getter();
                        if (v18)
                        {
LABEL_53:
                          if (v18 == 1)
                          {
                            if (v91 < (int)v12) {
                              goto LABEL_143;
                            }
                            swift_retain();
                            uint64_t v48 = (char *)__DataStorage._bytes.getter();
                            if (v48)
                            {
                              uint64_t v49 = __DataStorage._offset.getter();
                              if (__OFSUB__((int)v12, v49)) {
                                goto LABEL_150;
                              }
                              v48 += (int)v12 - v49;
                            }
                            uint64_t v50 = __DataStorage._length.getter();
                            size_t v51 = (v12 >> 32) - (int)v12;
                            if (v50 < v90) {
                              size_t v51 = v50;
                            }
                            if (!v47) {
                              goto LABEL_153;
                            }
                            if (!v48) {
                              goto LABEL_154;
                            }
                            int v43 = memcmp(v47, v48, v51);
                            a2 = v96;
                            sub_10001CFB8(v12, v96);
                            uint64_t v52 = v12;
                            goto LABEL_120;
                          }
                          uint64_t v78 = *(void *)(v12 + 16);
                          uint64_t v93 = *(char **)(v12 + 24);
                          swift_retain();
                          swift_retain();
                          size_t v79 = (char *)__DataStorage._bytes.getter();
                          if (v79)
                          {
                            uint64_t v80 = __DataStorage._offset.getter();
                            if (__OFSUB__(v78, v80)) {
                              goto LABEL_148;
                            }
                            v79 += v78 - v80;
                          }
                          BOOL v30 = __OFSUB__(v93, v78);
                          char v81 = &v93[-v78];
                          if (v30) {
                            goto LABEL_144;
                          }
                          uint64_t v82 = __DataStorage._length.getter();
                          if (v82 >= (uint64_t)v81) {
                            size_t v83 = (size_t)v81;
                          }
                          else {
                            size_t v83 = v82;
                          }
                          if (!v47) {
                            goto LABEL_163;
                          }
                          if (!v79) {
                            goto LABEL_164;
                          }
                          int v43 = memcmp(v47, v79, v83);
LABEL_118:
                          swift_release();
                          swift_release();
LABEL_119:
                          uint64_t v52 = v12;
                          a2 = v96;
LABEL_120:
                          unint64_t v57 = a2;
                          goto LABEL_121;
                        }
                      }
                      else
                      {
                        uint64_t v47 = 0;
                        __DataStorage._length.getter();
                        if (v18) {
                          goto LABEL_53;
                        }
                      }
                      *(void *)__s1 = v12;
                      unint64_t v58 = v96;
                      *(_DWORD *)&__s1[8] = v96;
                      *(_WORD *)&__s1[12] = WORD2(v96);
                      if (!v47) {
                        goto LABEL_157;
                      }
                      int v59 = memcmp(v47, __s1, __n);
                      break;
                    case 2uLL:
                      uint64_t v35 = *(void *)(v21 + 16);
                      sub_1000361E0(v12, a2);
                      swift_retain();
                      swift_retain();
                      uint64_t v36 = __DataStorage._bytes.getter();
                      if (v36)
                      {
                        uint64_t v37 = v36;
                        uint64_t v38 = __DataStorage._offset.getter();
                        if (__OFSUB__(v35, v38)) {
                          goto LABEL_133;
                        }
                        uint64_t v92 = (void *)(v37 + v35 - v38);
                      }
                      else
                      {
                        uint64_t v92 = 0;
                      }
                      __DataStorage._length.getter();
                      if (v18)
                      {
                        if (v18 != 1)
                        {
                          uint64_t v72 = *(void *)(v12 + 16);
                          uint64_t v89 = *(void *)(v12 + 24);
                          swift_retain();
                          swift_retain();
                          int v73 = (char *)__DataStorage._bytes.getter();
                          if (v73)
                          {
                            uint64_t v74 = __DataStorage._offset.getter();
                            if (__OFSUB__(v72, v74)) {
                              goto LABEL_147;
                            }
                            v73 += v72 - v74;
                          }
                          BOOL v30 = __OFSUB__(v89, v72);
                          int64_t v75 = v89 - v72;
                          if (v30) {
                            goto LABEL_142;
                          }
                          uint64_t v76 = __DataStorage._length.getter();
                          if (v76 >= v75) {
                            size_t v77 = v75;
                          }
                          else {
                            size_t v77 = v76;
                          }
                          if (!v92) {
                            goto LABEL_161;
                          }
                          if (!v73) {
                            goto LABEL_162;
                          }
                          int v43 = memcmp(v92, v73, v77);
                          swift_release();
                          swift_release();
                          goto LABEL_118;
                        }
                        if (v91 < (int)v12) {
                          goto LABEL_137;
                        }
                        swift_retain();
                        uint64_t v53 = (char *)__DataStorage._bytes.getter();
                        if (v53)
                        {
                          uint64_t v54 = __DataStorage._offset.getter();
                          if (__OFSUB__((int)v12, v54)) {
                            goto LABEL_149;
                          }
                          v53 += (int)v12 - v54;
                        }
                        uint64_t v55 = __DataStorage._length.getter();
                        size_t v56 = (v12 >> 32) - (int)v12;
                        if (v55 < v90) {
                          size_t v56 = v55;
                        }
                        if (!v92) {
                          goto LABEL_155;
                        }
                        if (!v53) {
                          goto LABEL_156;
                        }
                        int v43 = memcmp(v92, v53, v56);
                        sub_10001CFB8(v12, v96);
                        a2 = v96;
                        swift_release();
                        swift_release();
                        uint64_t v52 = v12;
                        unint64_t v57 = v96;
LABEL_121:
                        sub_10001CFB8(v52, v57);
LABEL_122:
                        sub_10001CFB8(v21, v22);
                        uint64_t result = sub_10001CFB8(v21, v22);
                        if (v43) {
                          goto LABEL_15;
                        }
                        goto LABEL_123;
                      }
                      *(void *)__s1 = v12;
                      unint64_t v58 = v96;
                      *(_DWORD *)&__s1[8] = v96;
                      *(_WORD *)&__s1[12] = WORD2(v96);
                      if (!v92) {
                        goto LABEL_160;
                      }
                      int v59 = memcmp(v92, __s1, __n);
                      swift_release();
                      swift_release();
                      break;
                    case 3uLL:
                      *(void *)&__s1[6] = 0;
                      *(void *)__s1 = 0;
                      if (!v18) {
                        goto LABEL_63;
                      }
                      if (v18 == 1)
                      {
                        if (v91 < (int)v12) {
                          goto LABEL_136;
                        }
                        sub_1000361E0(v12, a2);
                        uint64_t v39 = __DataStorage._bytes.getter();
                        if (!v39) {
                          goto LABEL_152;
                        }
                        uint64_t v32 = v39;
                        uint64_t v40 = __DataStorage._offset.getter();
                        uint64_t v34 = (int)v12 - v40;
                        if (__OFSUB__((int)v12, v40)) {
                          goto LABEL_141;
                        }
LABEL_45:
                        uint64_t v41 = __DataStorage._length.getter();
                        if (v41 >= v90) {
                          size_t v42 = (v12 >> 32) - (int)v12;
                        }
                        else {
                          size_t v42 = v41;
                        }
                        int v43 = memcmp(__s1, (const void *)(v32 + v34), v42);
                        goto LABEL_119;
                      }
                      unint64_t v67 = a2;
                      uint64_t v68 = *(void *)(v12 + 16);
                      uint64_t v69 = *(void *)(v12 + 24);
                      sub_1000361E0(v12, v67);
                      swift_retain();
                      swift_retain();
                      uint64_t v63 = (char *)__DataStorage._bytes.getter();
                      if (v63)
                      {
                        uint64_t v70 = __DataStorage._offset.getter();
                        if (__OFSUB__(v68, v70)) {
                          goto LABEL_146;
                        }
                        v63 += v68 - v70;
                      }
                      BOOL v30 = __OFSUB__(v69, v68);
                      int64_t v65 = v69 - v68;
                      if (v30) {
                        goto LABEL_139;
                      }
                      uint64_t v66 = __DataStorage._length.getter();
                      if (!v63) {
                        goto LABEL_159;
                      }
LABEL_90:
                      if (v66 >= v65) {
                        size_t v71 = v65;
                      }
                      else {
                        size_t v71 = v66;
                      }
                      int v43 = memcmp(__s1, v63, v71);
                      goto LABEL_118;
                    default:
                      *(void *)__s1 = v21;
                      *(_WORD *)&__s1[8] = v22;
                      __s1[10] = BYTE2(v22);
                      __s1[11] = BYTE3(v22);
                      __s1[12] = BYTE4(v22);
                      __s1[13] = BYTE5(v22);
                      if (!v18)
                      {
LABEL_63:
                        uint64_t __s2 = v12;
                        __int16 v103 = a2;
                        char v104 = BYTE2(a2);
                        char v105 = BYTE3(a2);
                        char v106 = BYTE4(a2);
                        char v107 = BYTE5(a2);
                        int v43 = memcmp(__s1, &__s2, __n);
                        goto LABEL_122;
                      }
                      if (v18 == 1)
                      {
                        if (v91 < (int)v12) {
                          goto LABEL_135;
                        }
                        sub_1000361E0(v12, a2);
                        uint64_t v31 = __DataStorage._bytes.getter();
                        if (!v31)
                        {
                          __DataStorage._length.getter();
                          __break(1u);
LABEL_152:
                          __DataStorage._length.getter();
                          __break(1u);
LABEL_153:
                          __break(1u);
LABEL_154:
                          __break(1u);
LABEL_155:
                          __break(1u);
LABEL_156:
                          __break(1u);
LABEL_157:
                          __break(1u);
LABEL_158:
                          __break(1u);
LABEL_159:
                          __break(1u);
LABEL_160:
                          __break(1u);
LABEL_161:
                          __break(1u);
LABEL_162:
                          __break(1u);
LABEL_163:
                          __break(1u);
LABEL_164:
                          __break(1u);
                          JUMPOUT(0x100DE768CLL);
                        }
                        uint64_t v32 = v31;
                        uint64_t v33 = __DataStorage._offset.getter();
                        uint64_t v34 = (int)v12 - v33;
                        if (__OFSUB__((int)v12, v33)) {
                          goto LABEL_140;
                        }
                        goto LABEL_45;
                      }
                      unint64_t v60 = a2;
                      uint64_t v61 = *(void *)(v12 + 16);
                      uint64_t v62 = *(void *)(v12 + 24);
                      sub_1000361E0(v12, v60);
                      swift_retain();
                      swift_retain();
                      uint64_t v63 = (char *)__DataStorage._bytes.getter();
                      if (v63)
                      {
                        uint64_t v64 = __DataStorage._offset.getter();
                        if (__OFSUB__(v61, v64)) {
                          goto LABEL_145;
                        }
                        v63 += v61 - v64;
                      }
                      BOOL v30 = __OFSUB__(v62, v61);
                      int64_t v65 = v62 - v61;
                      if (v30) {
                        goto LABEL_138;
                      }
                      uint64_t v66 = __DataStorage._length.getter();
                      if (!v63) {
                        goto LABEL_158;
                      }
                      goto LABEL_90;
                  }
                  sub_10001CFB8(v12, v58);
                  sub_10001CFB8(v21, v22);
                  uint64_t result = sub_10001CFB8(v21, v22);
                  a2 = v58;
                  if (v59) {
                    goto LABEL_15;
                  }
                }
LABEL_123:
                if (v23 == a3)
                {
                  sub_10000588C(v88);
                  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  goto LABEL_125;
                }
LABEL_15:
                a4 = (a4 + 1) & v98;
                if (((*(void *)(v99 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
                  goto LABEL_125;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v26 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            uint64_t v24 = v25 - v26;
            if (!__OFSUB__(v25, v26)) {
              goto LABEL_21;
            }
            goto LABEL_128;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v24 = BYTE6(v22);
            goto LABEL_22;
        }
      }
    }
  }
LABEL_125:
  uint64_t v84 = *v94;
  *(void *)(*v94 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v85 = *(void *)(v84 + 48) + 24 * a4;
  *(void *)uint64_t v85 = v12;
  *(void *)(v85 + 8) = a2;
  *(_DWORD *)(v85 + 16) = a3;
  uint64_t v86 = *(void *)(v84 + 16);
  BOOL v30 = __OFADD__(v86, 1);
  uint64_t v87 = v86 + 1;
  if (v30)
  {
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
  }
  *(void *)(v84 + 16) = v87;
  return result;
}

void *sub_100DE76BC()
{
  return sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101659178);
}

void *sub_100DE76DC()
{
  return sub_100DE95DC((uint64_t *)&unk_10166C2B0);
}

void *sub_100DE76E8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165F030);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE789C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165F150);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000361E0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE7A50()
{
  return sub_100DE7A90(type metadata accessor for SharedBeaconRecord, &qword_10165F020, type metadata accessor for SharedBeaconRecord);
}

id sub_100DE7A84()
{
  return sub_100DE89A0(&qword_10165F128);
}

void *sub_100DE7A90(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3;
  uint64_t v7 = a1(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v29 - v9;
  sub_10000588C(a2);
  uint64_t v11 = *v3;
  uint64_t v12 = static _SetStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v6 = v13;
    return result;
  }
  BOOL v30 = v6;
  uint64_t result = (void *)(v12 + 56);
  uint64_t v15 = v11 + 56;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 56 + 8 * v16) {
    uint64_t result = memmove(result, (const void *)(v11 + 56), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 56);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v26 >= v22) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v15 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v22) {
        goto LABEL_28;
      }
      unint64_t v27 = *(void *)(v15 + 8 * v18);
      if (!v27)
      {
        int64_t v18 = v26 + 2;
        if (v26 + 2 >= v22) {
          goto LABEL_28;
        }
        unint64_t v27 = *(void *)(v15 + 8 * v18);
        if (!v27) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v8 + 72) * v24;
    sub_100DF38F0(*(void *)(v11 + 48) + v25, (uint64_t)v10, a3);
    uint64_t result = (void *)sub_100DF39B8((uint64_t)v10, *(void *)(v13 + 48) + v25, a3);
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v22)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_30;
  }
  unint64_t v27 = *(void *)(v15 + 8 * v28);
  if (v27)
  {
    int64_t v18 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v15 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100DE7CF0()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016591B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    LOBYTE(v17) = *(unsigned char *)(v17 + 16);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v20 = v19;
    *(void *)(v20 + 8) = v18;
    *(unsigned char *)(v20 + 16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE7EB0()
{
  return sub_100DE95DC((uint64_t *)&unk_10166C2D0);
}

void *sub_100DE7EBC()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016592F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000361E0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE8070()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_1016592F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(unsigned char *)uint64_t v20 = *(unsigned char *)v17;
    *(void *)(v20 + 8) = v19;
    *(void *)(v20 + 16) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE8230()
{
  return sub_100DE9780(&qword_101659328);
}

id sub_100DE823C()
{
  return sub_100DE89A0((uint64_t *)&unk_10165F070);
}

void *sub_100DE8248()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165F168);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26)
      {
        int64_t v9 = v25 + 2;
        if (v25 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v6 + 8 * v9);
        if (!v26) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 160 * v15;
    uint64_t v17 = (_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v18 = v17[2];
    long long v19 = v17[3];
    long long v20 = v17[5];
    v28[4] = v17[4];
    v28[5] = v20;
    v28[3] = v19;
    long long v21 = v17[6];
    long long v22 = v17[7];
    long long v23 = v17[9];
    v28[8] = v17[8];
    v28[9] = v23;
    v28[6] = v21;
    v28[7] = v22;
    long long v24 = v17[1];
    v28[0] = *v17;
    v28[1] = v24;
    uint64_t v28[2] = v18;
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0xA0uLL);
    uint64_t result = (void *)sub_1000A3AA8((uint64_t)v28);
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v13) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE8438()
{
  return sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for MACAddress, &qword_10165F140);
}

void *sub_100DE8458()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_10165F270);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    long long v19 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE860C()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101647E78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_100173F4C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE87DC()
{
  return sub_100DE95DC(&qword_10165F1A8);
}

void *sub_100DE87E8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165F0C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100DE8994()
{
  return sub_100DE89A0((uint64_t *)&unk_10165F0D0);
}

id sub_100DE89A0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE8B44()
{
  return sub_100DE8B64((uint64_t (*)(void))&type metadata accessor for CorrelationIdentifier, &qword_1016592E8);
}

void *sub_100DE8B64(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - v7;
  sub_10000588C(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  unint64_t v26 = v4;
  int64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100DE8E14()
{
  return sub_100DE95DC((uint64_t *)&unk_10165F260);
}

void *sub_100DE8E20(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE8FB0()
{
  return sub_100DE7A90((uint64_t (*)(void))type metadata accessor for BeaconIdentifier, &qword_101659180, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
}

void *sub_100DE8FE4()
{
  return sub_100DE95DC((uint64_t *)&unk_10165F100);
}

void *sub_100DE8FF0()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_10165EF78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE9188()
{
  return sub_100DE95DC((uint64_t *)&unk_10165F1C0);
}

void *sub_100DE9194()
{
  sub_10000588C(&qword_10165F160);
  uint64_t v29 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v29 = v3;
    return result;
  }
  id result = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6) {
    id result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v12) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v5 + 8 * v26);
    ++v8;
    if (!v27)
    {
      int64_t v8 = v26 + 1;
      if (v26 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v27 = *(void *)(v5 + 8 * v8);
      if (!v27)
      {
        int64_t v8 = v26 + 2;
        if (v26 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v27 = *(void *)(v5 + 8 * v8);
        if (!v27) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v11 = (v27 - 1) & v27;
    unint64_t v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 88 * v14;
    uint64_t v16 = *(void *)(v1 + 48) + v15;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 24);
    char v20 = *(unsigned char *)(v16 + 32);
    uint64_t v21 = *(void *)(v16 + 40);
    uint64_t v22 = *(void *)(v16 + 80);
    uint64_t v23 = *(void *)(v3 + 48) + v15;
    long long v24 = *(_OWORD *)(v16 + 48);
    long long v25 = *(_OWORD *)(v16 + 64);
    *(void *)uint64_t v23 = *(void *)v16;
    *(void *)(v23 + 8) = v17;
    *(void *)(v23 + 16) = v18;
    *(void *)(v23 + 24) = v19;
    *(unsigned char *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v21;
    *(_OWORD *)(v23 + 48) = v24;
    *(_OWORD *)(v23 + 64) = v25;
    *(void *)(v23 + 80) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v12) {
    goto LABEL_28;
  }
  unint64_t v27 = *(void *)(v5 + 8 * v28);
  if (v27)
  {
    int64_t v8 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v8 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v5 + 8 * v8);
    ++v28;
    if (v27) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE93B4()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_10165F000);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t v19 = *(void *)(v17 + 32);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    long long v21 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v20 = *(void *)v17;
    *(_OWORD *)(v20 + 8) = v21;
    *(void *)(v20 + 24) = v18;
    *(void *)(v20 + 32) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE95A0()
{
  return sub_100DE95DC(&qword_10165EFC0);
}

void *sub_100DE95AC()
{
  return sub_100DE95DC(&qword_10165F120);
}

void *sub_100DE95B8()
{
  return sub_100DE95DC((uint64_t *)&unk_10165F060);
}

id sub_100DE95C4()
{
  return sub_100DE89A0(&qword_10165F038);
}

void *sub_100DE95D0()
{
  return sub_100DE95DC((uint64_t *)&unk_10165EF20);
}

void *sub_100DE95DC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    id result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE9780(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE990C()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_10165EFF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100DE9AA4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000588C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v14) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v7 + 8 * v10);
      if (!v23)
      {
        int64_t v10 = v22 + 2;
        if (v22 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v7 + 8 * v10);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 24 * v16;
    uint64_t v18 = *(void *)(v3 + 48) + v17;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    LODWORD(v18) = *(_DWORD *)(v18 + 16);
    uint64_t v21 = *(void *)(v5 + 48) + v17;
    *(void *)uint64_t v21 = v19;
    *(void *)(v21 + 8) = v20;
    *(_DWORD *)(v21 + 16) = v18;
    id result = (void *)sub_1000361E0(v19, v20);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v14) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v7 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100DE9C5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000588C(&qword_101659178);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEA00C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F288);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100DEA3C0);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DEA3E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F030);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEA694()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F150);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_1000361E0(v20, v21);
    sub_1000361E0(v20, v21);
    Data.hash(into:)();
    sub_10001CFB8(v20, v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEA960()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EF50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEABC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  uint64_t v36 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F018);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v32 = v0;
  uint64_t v33 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v34) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v33 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v33 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v34) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v33 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v5 + 48);
    uint64_t v22 = *(void *)(v36 + 72);
    sub_100DF38F0(v21 + v22 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    Hasher.init(_seed:)();
    uint64_t v23 = *v4;
    unint64_t v24 = v4[1];
    sub_1000361E0(*v4, v24);
    Data.hash(into:)();
    sub_10001CFB8(v23, v24);
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(*(uint64_t *)((char *)v4 + *(int *)(v2 + 28)));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(uint64_t *)((char *)v4 + *(int *)(v2 + 36) + 8))
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v22, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v34)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v32;
    goto LABEL_38;
  }
  unint64_t v19 = *(void *)(v33 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v34) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v33 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100DEB060()
{
  uint64_t v1 = *v0;
  sub_10000588C(&qword_1016591B0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v28 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v29 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v9);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(v1 + 48) + 24 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    Swift::UInt v20 = *(unsigned __int8 *)(v17 + 16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v3 + 48) + 24 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 16) = v20;
    ++*(void *)(v3 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEB344(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v6 = v4;
  uint64_t v7 = *v4;
  sub_10000588C(a2);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v6 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v30 = v7 + 56;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & *(void *)(v7 + 56);
  int64_t v31 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v31) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v30 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v30 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v30 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(*(void *)(v7 + 48) + 8 * v18);
    swift_retain();
    sub_10000588C(a3);
    sub_100062734(a4, a3);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(void *)(*(void *)(v9 + 48) + 8 * v16) = v22;
    ++*(void *)(v9 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v6 = v4;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v30 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v31) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v30 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEB630()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_1016592F8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_1000361E0(v20, v21);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEB8E4()
{
  uint64_t v1 = *v0;
  sub_10000588C(&qword_1016592F0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v28 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v29 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v9);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    unint64_t v17 = (unsigned __int8 *)(*(void *)(v1 + 48) + 24 * v13);
    Swift::UInt v18 = *v17;
    uint64_t v19 = *((void *)v17 + 1);
    uint64_t v20 = *((void *)v17 + 2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v3 + 48) + 24 * v10;
    *(unsigned char *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(void *)(v11 + 16) = v20;
    ++*(void *)(v3 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEBBD4(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), void (*a5)(char *))
{
  int64_t v34 = a5;
  unint64_t v8 = v5;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = *v5;
  sub_10000588C(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release();
LABEL_25:
    *unint64_t v8 = v15;
    return result;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  int64_t v31 = v5;
  uint64_t v32 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  int64_t v33 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_7;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v33) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v27);
    ++v22;
    if (!v28)
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v33) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v32 + 8 * v22);
      if (!v28)
      {
        int64_t v22 = v27 + 2;
        if (v27 + 2 >= v33) {
          goto LABEL_23;
        }
        unint64_t v28 = *(void *)(v32 + 8 * v22);
        if (!v28) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v28 - 1) & v28;
    unint64_t v24 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_7:
    uint64_t v25 = *(void *)(v10 + 72);
    sub_100DF38F0(*(void *)(v13 + 48) + v25 * v24, (uint64_t)v12, a4);
    Hasher.init(_seed:)();
    v34(v35);
    Hasher._finalize()();
    unint64_t v26 = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v20 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = sub_100DF39B8((uint64_t)v12, *(void *)(v15 + 48) + v26 * v25, a4);
    ++*(void *)(v15 + 16);
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v33)
  {
LABEL_23:
    uint64_t result = swift_release_n();
    unint64_t v8 = v31;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v32 + 8 * v29);
  if (v28)
  {
    int64_t v22 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v22 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v22 >= v33) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v22);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100DEBEB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_101659328);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100DEC3F0);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100DEC448()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EFA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(char *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(qword_10137E740[v18]);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEC6D0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v29 = *((void *)v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = v0;
  uint64_t v4 = *v0;
  sub_10000588C(&qword_1016592B8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_25:
    *uint64_t v25 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = *(void *)(v4 + 56);
  uint64_t v26 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v8;
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v28 = v5 + 56;
  uint64_t v30 = v4;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v12);
      if (!v22)
      {
        int64_t v12 = v21 + 2;
        if (v21 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v26 + 8 * v12);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_7:
    uint64_t v15 = *(void *)(v29 + 72);
    sub_100DF38F0(*(void *)(v30 + 48) + v15 * v14, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)();
    uint64_t v17 = *v3;
    unint64_t v16 = v3[1];
    sub_1000361E0(*v3, v16);
    Data.hash(into:)();
    sub_10001CFB8(v17, v16);
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(*((unsigned __int8 *)v3 + v1[7]));
    uint64_t v18 = *(uint64_t *)((char *)v3 + v1[8]);
    swift_bridgeObjectRetain();
    sub_100DF9434(v31, v18);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*((unsigned __int8 *)v3 + v1[9]));
    Hasher._finalize()();
    uint64_t v19 = v28;
    unint64_t v20 = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = sub_100DF39B8((uint64_t)v3, *(void *)(v6 + 48) + v20 * v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    ++*(void *)(v6 + 16);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v27)
  {
LABEL_23:
    uint64_t result = swift_release_n();
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100DECA9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F170);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100DECF80);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_100DECFC4()
{
  uint64_t v1 = *v0;
  sub_10000588C(&qword_10165F168);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16))
  {
    unint64_t result = swift_release();
LABEL_25:
    *uint64_t v0 = v2;
    return result;
  }
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = v1 + 56;
  if (v3 < 64) {
    uint64_t v5 = ~(-1 << v3);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v7 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v7) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v4 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v4 + 8 * v9);
      if (!v29)
      {
        int64_t v9 = v28 + 2;
        if (v28 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v29 = *(void *)(v4 + 8 * v9);
        if (!v29) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v29 - 1) & v29;
    unint64_t v11 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_7:
    Swift::Int v12 = (long long *)(*(void *)(v1 + 48) + 160 * v11);
    long long v13 = v12[5];
    long long v15 = v12[2];
    long long v14 = v12[3];
    long long v35 = v12[4];
    long long v36 = v13;
    long long v33 = v15;
    long long v34 = v14;
    long long v16 = v12[6];
    long long v17 = v12[7];
    long long v18 = v12[9];
    long long v39 = v12[8];
    long long v40 = v18;
    long long v37 = v16;
    long long v38 = v17;
    long long v19 = v12[1];
    long long v31 = *v12;
    long long v32 = v19;
    Hasher.init(_seed:)();
    sub_1000A3AA8((uint64_t)&v31);
    sub_100E8EAB8();
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v20 = (_OWORD *)(*(void *)(v2 + 48) + 160 * result);
    long long v21 = v32;
    *unint64_t v20 = v31;
    v20[1] = v21;
    long long v22 = v36;
    long long v24 = v33;
    long long v23 = v34;
    long long v20[4] = v35;
    v20[5] = v22;
    v20[2] = v24;
    v20[3] = v23;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v40;
    v20[8] = v39;
    v20[9] = v27;
    v20[6] = v25;
    v20[7] = v26;
    ++*(void *)(v2 + 16);
  }
  int64_t v30 = v28 + 3;
  if (v30 >= v7)
  {
LABEL_23:
    unint64_t result = swift_release_n();
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v4 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v4 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100DED23C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000588C(&qword_10165F140);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  long long v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100DF3A20((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DED5EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F270);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DED89C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_101647E78);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_100173F4C(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEDB30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F148);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  int64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    sub_100DF38F0(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, type metadata accessor for OwnedBeaconGroup);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_100DEDEEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F0C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_7:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    sub_100E8AF6C(v19, v15);
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    uint64_t v1 = v0;
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100DEE100()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconStatus(0);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_10165F0C8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  int64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    sub_100DF38F0(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for BeaconStatus);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Date();
    sub_100DF3A20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, type metadata accessor for BeaconStatus);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEE510(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  int64_t v29 = v2;
  uint64_t v30 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void **)(*(void *)(v4 + 48) + 8 * v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v20 = v19;
    String.hash(into:)();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v29;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEE7EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (Swift::UInt64 *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  sub_10000588C(&qword_10165F028);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_24:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v6 + 56;
  uint64_t v10 = -1;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  unint64_t v11 = v10 & *(void *)(v6 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v12) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_22;
      }
      unint64_t v18 = *(void *)(v9 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_22;
        }
        unint64_t v18 = *(void *)(v9 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    sub_100DF38F0(*(void *)(v6 + 48) + *(void *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for WildModeTrackingLocation);
    uint64_t result = sub_101124534(v5, v7);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_22:
    uint64_t result = swift_release_n();
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100DEEA28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Destination();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F090);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100DF3A20(&qword_10165F080, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEEDD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F180);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt32 v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEF054()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F260);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    sub_100DF3A20((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEF354(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t v28 = v3;
  int64_t v7 = 0;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v28;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEF5B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconIdentifier();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000588C(&qword_101659180);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  char v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    sub_100DF38F0(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_100DF39B8((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEF98C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165EF78);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEFBF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10166C280);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  char v29 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    unint64_t v20 = *(void **)(v19 + 32);
    swift_retain();
    id v21 = v20;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DEFE90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F1B0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  char v29 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    unint64_t v20 = *(void **)(v19 + 40);
    swift_retain();
    id v21 = v20;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DF012C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  int64_t v7 = 0;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(unsigned char *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DF03A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C(&qword_10165F160);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v33 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v35 = v2;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v41 = v10;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v34) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    int64_t v17 = v10 + 1;
    if (!v16)
    {
      int64_t v17 = v10 + 2;
      if (v10 + 2 >= v34) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v10 + 3;
        if (v10 + 3 >= v34) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    int64_t v41 = v17;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v2 + 48) + 88 * v14;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 24);
    uint64_t v40 = *(void *)(v19 + 16);
    char v39 = *(unsigned char *)(v19 + 32);
    uint64_t v23 = *(void *)(v19 + 48);
    uint64_t v24 = *(void *)(v19 + 64);
    uint64_t v37 = *(void *)(v19 + 56);
    uint64_t v38 = *(void *)(v19 + 40);
    uint64_t v25 = *(void *)(v19 + 80);
    uint64_t v36 = *(void *)(v19 + 72);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v8 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v11 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 88 * v11;
    *(void *)uint64_t v12 = v20;
    *(void *)(v12 + 8) = v21;
    int64_t v10 = v41;
    *(void *)(v12 + 16) = v40;
    *(void *)(v12 + 24) = v22;
    *(unsigned char *)(v12 + 32) = v39;
    *(void *)(v12 + 40) = v38;
    *(void *)(v12 + 48) = v23;
    *(void *)(v12 + 56) = v37;
    *(void *)(v12 + 64) = v24;
    uint64_t v2 = v35;
    *(void *)(v12 + 72) = v36;
    *(void *)(v12 + 80) = v25;
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v10 + 4;
  if (v10 + 4 >= v34)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v34) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DF06F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165F000);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v34 = v2;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v35 = v10;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v33) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v15);
    int64_t v17 = v10 + 1;
    if (!v16)
    {
      int64_t v17 = v10 + 2;
      if (v10 + 2 >= v33) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v10 + 3;
        if (v10 + 3 >= v33) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v32 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    int64_t v35 = v17;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v2 + 48) + 40 * v14;
    uint64_t v20 = *(void *)v19;
    long long v36 = *(_OWORD *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v19 + 32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(*(void *)(*((void *)&v36 + 1) + 16));
    uint64_t v23 = *(void *)(*((void *)&v36 + 1) + 16);
    if (v23)
    {
      uint64_t v24 = *((void *)&v36 + 1) + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v24 += 16;
        --v23;
      }
      while (v23);
    }
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v8 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 40 * v11;
    *(void *)uint64_t v12 = v20;
    *(_OWORD *)(v12 + 8) = v36;
    *(void *)(v12 + 24) = v21;
    *(void *)(v12 + 32) = v22;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v34;
    int64_t v10 = v35;
  }
  uint64_t v18 = v10 + 4;
  if (v10 + 4 >= v33)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v33) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100DF0A64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000588C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  BOOL v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DF0CDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000588C((uint64_t *)&unk_10165EFF0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v5;
    return result;
  }
  int64_t v6 = 0;
  uint64_t v7 = v2 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v2 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v6 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v11) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v7 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v7 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_24:
    *(void *)&long long v4 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    long long v26 = v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v26);
    Hasher._combine(_:)(DWORD1(v26));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v12 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *((void *)&v4 + 1) = *((void *)&v26 + 1);
    *(void *)(*(void *)(v5 + 48) + 8 * v13) = v26;
    ++*(void *)(v5 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100DF0F70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *v2;
  sub_10000588C(a2);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v30 = v3 + 56;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v31 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v4 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v3 + 48) + 24 * v15;
    uint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    Swift::UInt32 v22 = *(_DWORD *)(v19 + 16);
    Hasher.init(_seed:)();
    sub_1000361E0(v20, v21);
    sub_1000361E0(v20, v21);
    Data.hash(into:)();
    sub_10001CFB8(v20, v21);
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = *(void *)(v5 + 48) + 24 * v12;
    *(void *)uint64_t v13 = v20;
    *(void *)(v13 + 8) = v21;
    *(_DWORD *)(v13 + 16) = v22;
    ++*(void *)(v5 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int sub_100DF126C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C(&qword_10165F030);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        int64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      unint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *unint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100DF1410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C(&qword_10165EF10);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v10 = result & v7;
      unint64_t v11 = (result & (unint64_t)v7) >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * v11);
      uint64_t v13 = 1 << (result & v7);
      uint64_t v14 = *(void *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(void *)(v14 + 8 * v10) != v8)
        {
          unint64_t v10 = (v10 + 1) & v7;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v11) = v13 | v12;
        *(void *)(v14 + 8 * v10) = v8;
        uint64_t v15 = *(void *)(v3 + 16);
        BOOL v16 = __OFADD__(v15, 1);
        uint64_t v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v17;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

BOOL sub_100DF1520(uint64_t a1, uint64_t a2)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v4 = sub_1010AC02C(v9);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_101158768(v4);
  swift_bridgeObjectRelease();
  uint64_t v9 = v5;
  sub_100DD251C(v8, 8212, &qword_10165EF10);
  sub_100DD251C(v8, 8213, &qword_10165EF10);
  sub_100DD251C(v8, 8216, &qword_10165EF10);
  sub_100DD251C(v8, 8219, &qword_10165EF10);
  sub_100DD251C(v8, 8220, &qword_10165EF10);
  sub_100DD251C(v8, 8223, &qword_10165EF10);
  BOOL v6 = a1 == 76 && sub_100DC71B4(a2, v9);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_100DF16C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_10000588C(&qword_101659328);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v30 = v1;
  uint64_t v31 = a1 + 32;
  do
  {
    int v6 = *(unsigned __int8 *)(v31 + v4++);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xE700000000000000;
        uint64_t v14 = 0x6E776F6E6B6E75;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            unint64_t v13 = 0x80000001013EF140;
            uint64_t v14 = 0xD000000000000015;
            break;
          case 2:
            uint64_t v14 = 0xD000000000000016;
            unint64_t v13 = 0x80000001013EF160;
            break;
          case 3:
            unint64_t v13 = 0xE600000000000000;
            uint64_t v14 = 0x657461636F6CLL;
            break;
          case 4:
            unint64_t v13 = 0xEC000000676E6972;
            uint64_t v14 = 0x6168537472617473;
            break;
          case 5:
            uint64_t v14 = 0x72616853706F7473;
            goto LABEL_17;
          case 6:
            unsigned int v15 = 2036427888;
            goto LABEL_14;
          case 7:
            unsigned int v15 = 1886352499;
LABEL_14:
            uint64_t v14 = v15 | 0x6E756F5300000000;
            unint64_t v13 = 0xE900000000000064;
            break;
          case 8:
            uint64_t v14 = 0x61654C6E69676562;
            unint64_t v13 = 0xED0000676E696873;
            break;
          case 9:
            uint64_t v14 = 0x687361654C646E65;
LABEL_17:
            unint64_t v13 = 0xEB00000000676E69;
            break;
          case 0xA:
            uint64_t v14 = 0x4654426E69676562;
            uint64_t v16 = 0x676E69646E69;
            goto LABEL_30;
          case 0xB:
            uint64_t v14 = 0x6E69465442646E65;
            unint64_t v13 = 0xEC000000676E6964;
            break;
          case 0xC:
            unint64_t v13 = 0xEC000000676E6967;
            uint64_t v14 = 0x6E61526E69676562;
            break;
          case 0xD:
            uint64_t v14 = 0x69676E6152646E65;
            unint64_t v13 = 0xEA0000000000676ELL;
            break;
          case 0xE:
            uint64_t v14 = 0x6F4C656C62616E65;
            uint64_t v16 = 0x65646F4D7473;
            goto LABEL_30;
          case 0xF:
            uint64_t v14 = 0x4C656C6261736964;
            unint64_t v13 = 0xEF65646F4D74736FLL;
            break;
          case 0x10:
            unint64_t v13 = 0xE600000000000000;
            uint64_t v14 = 0x656D616E6572;
            break;
          case 0x11:
            uint64_t v14 = 0x7463656E6E6F63;
            break;
          case 0x12:
            unint64_t v13 = 0xEA00000000007463;
            uint64_t v14 = 0x656E6E6F63736964;
            break;
          case 0x13:
            uint64_t v14 = 0xD000000000000017;
            unint64_t v13 = 0x80000001013EF240;
            break;
          case 0x14:
            unint64_t v13 = 0xE600000000000000;
            uint64_t v14 = 0x726961706E75;
            break;
          case 0x15:
            uint64_t v14 = 0x65746167656C6564;
            uint64_t v16 = 0x657261685364;
LABEL_30:
            unint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          default:
            break;
        }
        unint64_t v17 = 0xE700000000000000;
        uint64_t v18 = 0x6E776F6E6B6E75;
        switch(v6)
        {
          case 1:
            unint64_t v17 = 0x80000001013EF140;
            if (v14 == 0xD000000000000015) {
              goto LABEL_70;
            }
            goto LABEL_71;
          case 2:
            unint64_t v19 = 0xD000000000000016;
            uint64_t v20 = "enableNotifyWhenFound";
            goto LABEL_66;
          case 3:
            unint64_t v17 = 0xE600000000000000;
            if (v14 != 0x657461636F6CLL) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 4:
            unint64_t v17 = 0xEC000000676E6972;
            if (v14 != 0x6168537472617473) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 5:
            uint64_t v21 = 0x72616853706F7473;
            goto LABEL_47;
          case 6:
            unsigned int v22 = 2036427888;
            goto LABEL_42;
          case 7:
            unsigned int v22 = 1886352499;
LABEL_42:
            unint64_t v17 = 0xE900000000000064;
            if (v14 != (v22 | 0x6E756F5300000000)) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 8:
            unint64_t v17 = 0xED0000676E696873;
            if (v14 != 0x61654C6E69676562) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 9:
            uint64_t v21 = 0x687361654C646E65;
LABEL_47:
            unint64_t v17 = 0xEB00000000676E69;
            if (v14 != v21) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 10:
            uint64_t v23 = 0x4654426E69676562;
            uint64_t v24 = 0x676E69646E69;
            goto LABEL_75;
          case 11:
            unint64_t v17 = 0xEC000000676E6964;
            if (v14 != 0x6E69465442646E65) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 12:
            unint64_t v17 = 0xEC000000676E6967;
            if (v14 != 0x6E61526E69676562) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 13:
            unint64_t v17 = 0xEA0000000000676ELL;
            if (v14 != 0x69676E6152646E65) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 14:
            uint64_t v23 = 0x6F4C656C62616E65;
            uint64_t v24 = 0x65646F4D7473;
            goto LABEL_75;
          case 15:
            unint64_t v17 = 0xEF65646F4D74736FLL;
            if (v14 != 0x4C656C6261736964) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 16:
            unint64_t v17 = 0xE600000000000000;
            if (v14 != 0x656D616E6572) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 17:
            if (v14 != 0x7463656E6E6F63) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 18:
            unint64_t v17 = 0xEA00000000007463;
            if (v14 != 0x656E6E6F63736964) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 19:
            unint64_t v19 = 0xD000000000000017;
            uint64_t v20 = "onnect";
LABEL_66:
            unint64_t v17 = (unint64_t)v20 | 0x8000000000000000;
            if (v14 != v19) {
              goto LABEL_71;
            }
            goto LABEL_70;
          case 20:
            unint64_t v17 = 0xE600000000000000;
            uint64_t v18 = 0x726961706E75;
            goto LABEL_69;
          case 21:
            uint64_t v23 = 0x65746167656C6564;
            uint64_t v24 = 0x657261685364;
LABEL_75:
            unint64_t v17 = v24 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v14 != v23) {
              goto LABEL_71;
            }
            goto LABEL_70;
          default:
LABEL_69:
            if (v14 != v18) {
              goto LABEL_71;
            }
LABEL_70:
            if (v13 == v17)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_71:
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v25) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_77;
            }
            break;
        }
      }
    }
LABEL_77:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v26 = *(void *)(v3 + 16);
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
      JUMPOUT(0x100DF2044);
    }
    *(void *)(v3 + 16) = v28;
LABEL_4:
    ;
  }
  while (v4 != v30);
  return (void *)v3;
}

void *sub_100DF214C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_10000588C(&qword_10165F170);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v32 = a1 + 32;
  uint64_t v31 = v1;
  do
  {
    int v6 = *(unsigned __int8 *)(v32 + v4++);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xE700000000000000;
        unint64_t v14 = 0x7972616D697270;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            unint64_t v13 = 0xE900000000000079;
            unint64_t v14 = 0x7261646E6F636573;
            break;
          case 2:
            unint64_t v14 = 0xD000000000000019;
            unint64_t v13 = 0x80000001013EF280;
            break;
          case 3:
            unint64_t v14 = 0xD00000000000001BLL;
            unint64_t v13 = 0x80000001013EF2A0;
            break;
          case 4:
            unint64_t v14 = 0x646E7542646C6977;
            unint64_t v13 = 0xEA0000000000656CLL;
            break;
          case 5:
            unint64_t v14 = 0x417972616D697270;
            unint64_t v13 = 0xEE00737365726464;
            break;
          case 6:
            unsigned int v15 = "Bundle";
            goto LABEL_20;
          case 7:
            unint64_t v14 = 0xD000000000000012;
            unint64_t v13 = 0x80000001013EE1F0;
            break;
          case 8:
            unint64_t v14 = 0xD000000000000011;
            unint64_t v13 = 0x80000001013EE210;
            break;
          case 9:
            unint64_t v14 = 0x697463656E6E6F63;
            uint64_t v16 = 0x79654B6E6FLL;
            goto LABEL_24;
          case 0xA:
            unint64_t v14 = 0x656E774F7261656ELL;
            unint64_t v13 = 0xEC00000079654B72;
            break;
          case 0xB:
            unint64_t v14 = 0x656B6F546E696F6ALL;
            unint64_t v13 = 0xE90000000000006ELL;
            break;
          case 0xC:
            unint64_t v14 = 0xD000000000000015;
            unint64_t v13 = 0x80000001013EF310;
            break;
          case 0xD:
            unsigned int v15 = "beaconGroupAttributes";
LABEL_20:
            unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
            unint64_t v14 = 0xD000000000000010;
            break;
          case 0xE:
            unint64_t v14 = 0x7461636F4C626577;
            unint64_t v13 = 0xEE0079654B6E6F69;
            break;
          case 0xF:
            unint64_t v14 = 0x646174654D626577;
            unint64_t v13 = 0xEB00000000617461;
            break;
          case 0x10:
            unint64_t v14 = 0x6D65744974736F6CLL;
            uint64_t v16 = 0x7365746144;
LABEL_24:
            unint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            break;
          default:
            break;
        }
        unint64_t v17 = 0xE700000000000000;
        uint64_t v18 = 0x7972616D697270;
        switch(v6)
        {
          case 1:
            unint64_t v17 = 0xE900000000000079;
            if (v14 == 0x7261646E6F636573) {
              goto LABEL_52;
            }
            goto LABEL_53;
          case 2:
            unint64_t v19 = 0xD000000000000019;
            uint64_t v20 = "elegatedShare";
            goto LABEL_42;
          case 3:
            unint64_t v19 = 0xD00000000000001BLL;
            uint64_t v20 = "primaryLocationDecryption";
            goto LABEL_42;
          case 4:
            unint64_t v17 = 0xEA0000000000656CLL;
            if (v14 != 0x646E7542646C6977) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 5:
            uint64_t v21 = 0x417972616D697270;
            uint64_t v22 = 0x737365726464;
            goto LABEL_48;
          case 6:
            uint64_t v23 = "Bundle";
            goto LABEL_45;
          case 7:
            unint64_t v19 = 0xD000000000000012;
            uint64_t v20 = "ude";
            goto LABEL_42;
          case 8:
            unint64_t v19 = 0xD000000000000011;
            uint64_t v20 = "circleSharedSecret";
            goto LABEL_42;
          case 9:
            uint64_t v24 = 0x697463656E6E6F63;
            uint64_t v25 = 0x79654B6E6FLL;
            goto LABEL_57;
          case 10:
            unint64_t v17 = 0xEC00000079654B72;
            if (v14 != 0x656E774F7261656ELL) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 11:
            unint64_t v17 = 0xE90000000000006ELL;
            if (v14 != 0x656B6F546E696F6ALL) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 12:
            unint64_t v19 = 0xD000000000000015;
            uint64_t v20 = "";
LABEL_42:
            unint64_t v17 = (unint64_t)v20 | 0x8000000000000000;
            if (v14 != v19) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 13:
            uint64_t v23 = "beaconGroupAttributes";
LABEL_45:
            unint64_t v17 = (unint64_t)v23 | 0x8000000000000000;
            if (v14 != 0xD000000000000010) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 14:
            uint64_t v21 = 0x7461636F4C626577;
            uint64_t v22 = 0x79654B6E6F69;
LABEL_48:
            unint64_t v17 = v22 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v14 != v21) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 15:
            uint64_t v18 = 0x646174654D626577;
            unint64_t v17 = 0xEB00000000617461;
            goto LABEL_51;
          case 16:
            uint64_t v24 = 0x6D65744974736F6CLL;
            uint64_t v25 = 0x7365746144;
LABEL_57:
            unint64_t v17 = v25 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            if (v14 != v24) {
              goto LABEL_53;
            }
            goto LABEL_52;
          default:
LABEL_51:
            if (v14 != v18) {
              goto LABEL_53;
            }
LABEL_52:
            if (v13 == v17)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_53:
            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v26) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_59;
            }
            break;
        }
      }
    }
LABEL_59:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v27 = *(void *)(v3 + 16);
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
      JUMPOUT(0x100DF292CLL);
    }
    *(void *)(v3 + 16) = v29;
LABEL_4:
    ;
  }
  while (v4 != v31);
  return (void *)v3;
}

void *sub_100DF29F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10000588C(&qword_101659178);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unsigned int v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100DF3A20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100DF3A20((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

Swift::Int sub_100DF2D10(uint64_t a1)
{
  return sub_100DF357C(a1, &qword_10165EF90);
}

Swift::Int sub_100DF2D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000588C(&qword_10165EF98);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}