void sub_10016EF70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10016EFB0(a1, a2, a3, a4, (void (*)(void))sub_100E82BE8, (void (*)(void))sub_100E6EC70, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

void sub_10016EFB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  v10 = v7;
  uint64_t v15 = *v7;
  uint64_t v17 = sub_100723FF4(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);

      *(void *)(v24 + 8 * v17) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  uint64_t v25 = sub_100723FF4(a2, a3);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v17 = v25;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  swift_bridgeObjectRetain();
}

uint64_t sub_10016F124(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E82DA0();
    goto LABEL_7;
  }
  sub_100E6EF88(v15, a4 & 1);
  uint64_t v21 = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7BF90(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10016F264(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_100724970(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100E82F58();
    goto LABEL_7;
  }
  sub_100E6F2A0(v16, a3 & 1);
  unint64_t v22 = sub_100724970(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100173FF0(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return sub_100E7CD94(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_10016F3E4(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_100724AE4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_release();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100E82FA0();
    goto LABEL_7;
  }
  sub_100E6F5F8(v16, a3 & 1);
  uint64_t v22 = sub_100724AE4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100173FF0(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  return sub_100E7CE48(v13, (uint64_t)v10, a1, v19);
}

unint64_t sub_10016F564(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1007248D8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100E832C4();
    goto LABEL_7;
  }
  sub_100E70028(v13, a3 & 1);
  uint64_t v19 = sub_1007248D8(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for SPBTRSSIChannel(0);
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7CC40(v10, a2, a1, v16);
}

void sub_10016F68C(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1007248D8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100E83468();
    goto LABEL_7;
  }
  sub_100E70304(v13, a3 & 1);
  uint64_t v18 = sub_1007248D8(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for ShutdownReason(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  sub_100E7CC40(v10, a2, a1, v16);
}

uint64_t sub_10016F7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_10016F7F4(a1, a2, a3, a4, a5, (void (*)(void))sub_100E8360C, (void (*)(void))sub_100E705D8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7C5FC);
}

uint64_t sub_10016F7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = v8;
  uint64_t v16 = *v8;
  uint64_t v18 = sub_100723FF4(a3, a4);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = (void *)(*(void *)(v24 + 56) + 16 * v18);
      uint64_t result = swift_release();
      *uint64_t v25 = a1;
      v25[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a5 & 1) == 0)
  {
    a6();
    goto LABEL_7;
  }
  a7();
  uint64_t v27 = sub_100723FF4(a3, a4);
  if ((v22 & 1) != (v28 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v18 = v27;
  uint64_t v24 = *v11;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  a8(v18, a3, a4, a1, a2, v24);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10016F96C(char a1, char a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1007245A4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E83A84();
    goto LABEL_7;
  }
  sub_100E70DC4(result, a3 & 1);
  uint64_t result = sub_1007245A4(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7CE74(v10, a2, a1 & 1, v16);
}

uint64_t sub_10016FA8C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E83C10, (void (*)(void))sub_100E71078, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10016FACC(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E83C1C();
    goto LABEL_7;
  }
  sub_100E71084(result, a3 & 1);
  uint64_t result = sub_1007240CC(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7CEB8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016FC68(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for BeaconEstimatedLocation();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E841B0();
    goto LABEL_7;
  }
  sub_100E718C8(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7CED0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016FE3C(char a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E845A4();
    goto LABEL_7;
  }
  sub_100E71FD4(result, a3 & 1);
  uint64_t result = sub_1007240CC(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7C8E4(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_10016FFDC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E84834, (void (*)(void))sub_100E723FC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

void sub_10017001C(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10017005C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E8484C, (void (*)(void))sub_100E72840, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_10017009C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E8486C, (void (*)(void))sub_100E7284C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

unint64_t sub_1001700DC(uint64_t a1, uint64_t a2, Swift::UInt64 a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100724E50(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      unint64_t result = sub_10001CFB8(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E8488C();
    goto LABEL_7;
  }
  sub_100E72D6C(v15, a4 & 1);
  unint64_t v21 = sub_100724E50(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7C600(v12, a3, a1, a2, v18);
}

uint64_t sub_10017020C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E84A3C, (void (*)(void))sub_100E73048, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10017024C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E84A48, (void (*)(void))sub_100E73054, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10017028C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E84A54, (void (*)(void))sub_100E73060, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_1001702CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100E84A60();
      goto LABEL_7;
    }
    sub_100E7306C(v15, a4 & 1);
    uint64_t v21 = sub_100723FF4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return sub_100173E94(a1, v19);
  }
LABEL_13:
  sub_100E7CFFC(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100170418(char a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E84C4C();
    goto LABEL_7;
  }
  sub_100E73394(result, a4 & 1);
  uint64_t result = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D06C(v12, a2, a3, a1 & 1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100170550(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for SecureLocation();
      return sub_100174120(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E84DF8();
    goto LABEL_7;
  }
  sub_100E736A0(v15, a4 & 1);
  uint64_t v22 = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D0B4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001706BC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E84E40, (void (*)(void))sub_100E736E8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_1001706FC(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E84E58();
    goto LABEL_7;
  }
  sub_100E73700(v17, a3 & 1);
  unint64_t v23 = sub_1007240CC(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7CEB8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1001708A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for SecureLocationsSubscription();
      return sub_100174120(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E850F0();
    goto LABEL_7;
  }
  sub_100E73B28(v15, a4 & 1);
  uint64_t v22 = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D19C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100170A10(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E853AC, (void (*)(void))sub_100E73F28, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100170A50(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E853CC, (void (*)(void))sub_100E73F34, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100170A90(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E853EC, (void (*)(void))sub_100E73F40, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100170AD0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E85794, (void (*)(void))sub_100E744DC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100170B10(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for BeaconState(0);
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for BeaconState);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E857D4();
    goto LABEL_7;
  }
  sub_100E747D8(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7D280(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100170CE4(uint64_t *a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[2];
  uint64_t v29 = a1[1];
  uint64_t v30 = v8;
  uint64_t v31 = a1[3];
  int v32 = *((unsigned __int8 *)a1 + 32);
  uint64_t v33 = a1[5];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_1007240CC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 48 * v15;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v29;
      *(void *)uint64_t v22 = v7;
      *(void *)(v22 + 8) = v24;
      uint64_t v25 = v31;
      *(void *)(v22 + 16) = v30;
      *(void *)(v22 + 24) = v25;
      *(unsigned char *)(v22 + 32) = v32;
      *(void *)(v22 + 40) = v33;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100E85AE8();
    goto LABEL_7;
  }
  sub_100E74CB8(v18, a3 & 1);
  unint64_t v26 = sub_1007240CC(a2);
  if ((v19 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v26;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  *(void *)&long long v34 = v7;
  *((void *)&v34 + 1) = v29;
  uint64_t v35 = v30;
  uint64_t v36 = v31;
  char v37 = v32;
  uint64_t v38 = v33;
  return sub_100E7D2AC(v15, (uint64_t)v12, &v34, v21);
}

void sub_100170F10(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ManagedCBPeripheralManager.KeyType();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_100724EBC(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];

      *(void *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100E85E18();
    goto LABEL_7;
  }
  sub_100E75168(v16, a3 & 1);
  unint64_t v21 = sub_100724EBC(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v21;
  char v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100173FF0(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
  sub_100E7D39C(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_100171090(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E86950, (void (*)(void))sub_100E768AC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_1001710D0(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v8 = v6;
  uint64_t v31 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_1007240CC(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v24 + 8 * v17) = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v29();
  unint64_t v26 = sub_1007240CC(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v30(v17, v14, v31, v23);
}

uint64_t sub_100171298(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E81214, (void (*)(void))sub_100E6B74C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_1001712D8(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for BeaconNamingRecord();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E8695C();
    goto LABEL_7;
  }
  sub_100E768B8(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7D474(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1001714AC(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  int v32 = a6;
  uint64_t v33 = a7;
  uint64_t v31 = a5;
  uint64_t v9 = v7;
  uint64_t v34 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  unint64_t v18 = sub_1007240CC(a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v9;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = *(void *)(v24 + 56);
      uint64_t v26 = v32;
      uint64_t v27 = sub_10000588C(v32);
      return sub_100062604(v34, v25 + *(void *)(*(void *)(v27 - 8) + 72) * v18, v26);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v31();
  unint64_t v29 = sub_1007240CC(a2);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v29;
  uint64_t v24 = *v9;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  return v33(v18, v15, v34, v24);
}

uint64_t sub_100171694(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100173490(a1, a2, a3, a4, (void (*)(void))sub_100E87020, (void (*)(void))sub_100E775C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

uint64_t sub_1001716D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100724CDC(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_10001CFB8(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100E8702C();
    goto LABEL_7;
  }
  sub_100E775CC(v17, a5 & 1);
  uint64_t v23 = sub_100724CDC(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  BOOL v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C0E8(v14, a3, a4, a1, a2, v20);

  return sub_1000361E0(a3, a4);
}

uint64_t sub_10017182C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_100724804(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 16 * v15;
      uint64_t result = sub_10001CFB8(*(void *)v22, *(void *)(v22 + 8));
      uint64_t v24 = v28;
      *(void *)uint64_t v22 = a1;
      *(void *)(v22 + 8) = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100E87228();
    goto LABEL_7;
  }
  sub_100E77918(v18, a4 & 1);
  unint64_t v25 = sub_100724804(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100E7D680(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_1001719E4(char a1, uint64_t a2, unint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1007241A0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E87528();
    goto LABEL_7;
  }
  sub_100E77D64(result, a4 & 1);
  uint64_t result = sub_1007241A0(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D06C(v12, a2, a3, a1, v18);

  return sub_1000361E0(a2, a3);
}

uint64_t sub_100171B1C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E876D4, (void (*)(void))sub_100E78094, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100171B5C(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for SafeLocation();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for SafeLocation);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E876F4();
    goto LABEL_7;
  }
  sub_100E780A0(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7D740(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100171D30(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100724500(a2, a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100E8773C();
    goto LABEL_7;
  }
  sub_100E780E8(v17, a5 & 1);
  unint64_t v23 = sub_100724500(a2, a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D76C(v14, a2, a3, a4, a1, v20);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100171E8C(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = sub_10000588C(&qword_10163D210);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100725314(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for BeaconScanner.AISLookupState(0);
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for BeaconScanner.AISLookupState);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E87900();
    goto LABEL_7;
  }
  sub_100E7842C(v17, a3 & 1);
  unint64_t v24 = sub_100725314(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7D7BC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100172064(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v36 = a6;
  char v37 = a7;
  uint64_t v35 = a5;
  uint64_t v9 = v7;
  uint64_t v38 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  unint64_t v18 = sub_1007240CC(a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a3 & 1) == 0)
  {
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v35();
    unint64_t v33 = sub_1007240CC(a2);
    if ((v22 & 1) == (v34 & 1))
    {
      unint64_t v18 = v33;
      uint64_t v24 = *v9;
      if (v22) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
      return v37(v18, v15, v38, v24);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v9;
  if ((v22 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v25 = *(void *)(v24 + 56);
  uint64_t v26 = sub_10000588C(v36);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  uint64_t v29 = v26;
  uint64_t v30 = v25 + *(void *)(v27 + 72) * v18;
  uint64_t v31 = v38;

  return v28(v30, v31, v29);
}

void sub_100172288(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_1001722C8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E88214, (void (*)(void))sub_100E78C7C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100172308(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_1007240CC(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100E88234();
    goto LABEL_7;
  }
  sub_100E78C88(v18, a4 & 1);
  unint64_t v25 = sub_1007240CC(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100E7D9B4(v15, (uint64_t)v12, a1, v28, v21);
}

void sub_1001724C0(uint64_t a1, void *a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1007253EC((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100E884DC();
    goto LABEL_7;
  }
  sub_100E790B8(v12, a3 & 1);
  unint64_t v17 = sub_1007253EC((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  unint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C4C4(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

id sub_100172600(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_1001726A8(a1, a2, a3, a4, (void (*)(void))sub_100E884E8, (void (*)(void))sub_100E790C4, (uint64_t (*)(void, void))sub_100173E88, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))sub_100E7DA74);
}

id sub_100172654(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_1001726A8(a1, a2, a3, a4, (void (*)(void))sub_100E88508, (void (*)(void))sub_100E790E4, (uint64_t (*)(void, void))sub_100173E7C, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))sub_100E7DA74);
}

id sub_1001726A8(uint64_t a1, char a2, void *a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void, void), void (*a8)(unint64_t, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = sub_100724354((uint64_t)a3);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_9;
    }
    a6();
    unint64_t v24 = sub_100724354((uint64_t)a3);
    if ((v22 & 1) == (v25 & 1))
    {
      unint64_t v18 = v24;
      goto LABEL_9;
    }
LABEL_15:
    sub_10001D4B0(0, &qword_10163CB60);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  uint64_t v26 = a2 & 1;
  uint64_t v27 = *v12;
  if (v22)
  {
    BOOL v28 = v26 != 0;
    uint64_t v29 = *(void *)(v27 + 56) + 16 * v18;
    id result = (id)a7(*(void *)v29, *(unsigned __int8 *)(v29 + 8));
    *(void *)uint64_t v29 = a1;
    *(unsigned char *)(v29 + 8) = v28;
  }
  else
  {
    a8(v18, a3, a1, v26, v27);
    return a3;
  }
  return result;
}

uint64_t sub_100172834(char a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E886F4();
    goto LABEL_7;
  }
  sub_100E79400(result, a4 & 1);
  uint64_t result = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7D06C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

void sub_100172968(uint64_t a1, void *a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10072543C((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100E888A0();
    goto LABEL_7;
  }
  sub_100E7970C(v12, a3 & 1);
  unint64_t v17 = sub_10072543C((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    sub_10001D4B0(0, (unint64_t *)&qword_1016608B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  unint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C4C4(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

uint64_t sub_100172AA8(uint64_t a1, uint64_t a2, Swift::UInt32 a3, Swift::UInt a4, char a5)
{
  v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100723F30(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E88DA8();
    goto LABEL_7;
  }
  sub_100E79F7C(result, a5 & 1);
  uint64_t result = sub_100723F30(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  BOOL v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7DAC8(v14, a3, a4, a1, a2, v20);
}

uint64_t sub_100172BEC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E88F48, (void (*)(void))sub_100E7A278, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100172C2C(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(updated - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E88F68();
    goto LABEL_7;
  }
  sub_100E7A284(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7DB1C(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100172E00(uint64_t a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(updated - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E88FB0();
    goto LABEL_7;
  }
  sub_100E7A2CC(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  BOOL v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7DB48(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100172FD4(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(_WORD *)(v18[7] + 2 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E88FF8();
    goto LABEL_7;
  }
  sub_100E7A314(result, a4 & 1);
  uint64_t result = sub_100723FF4(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7DB74(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100173108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  BOOL v14 = (void *)*v6;
  unint64_t v16 = sub_100723FF4(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v23 = a1;
      v23[1] = a2;
      v23[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_100E891A8();
    goto LABEL_7;
  }
  sub_100E7A634(v19, a6 & 1);
  uint64_t v25 = sub_100723FF4(a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7DBBC(v16, a4, a5, a1, a2, a3, v22);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100173274(uint64_t a1, unsigned __int8 *a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_10072548C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100E89390();
      goto LABEL_7;
    }
    sub_100E7A978(v16, a3 & 1);
    unint64_t v27 = sub_10072548C(a2);
    if ((v17 & 1) == (v28 & 1))
    {
      unint64_t v13 = v27;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100173FF0((uint64_t)a2, (uint64_t)v10, type metadata accessor for ShareAttemptTracker.AttemptKey);
      return sub_100E7DC10(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40);
  uint64_t v24 = v21;
  uint64_t v25 = v20 + *(void *)(v22 + 72) * v13;

  return v23(v25, a1, v24);
}

uint64_t sub_100173450(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100173490(a1, a2, a3, a4, (void (*)(void))sub_100E896D0, (void (*)(void))sub_100E7AE9C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

uint64_t sub_100173490(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v15 = *v7;
  uint64_t v17 = sub_100723FF4(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  uint64_t v26 = sub_100723FF4(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

void sub_100173604(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100173644(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001736C4(a1, a2, a3, (void (*)(void))sub_100E89D44, (void (*)(void))sub_100E7B560, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7DD00);
}

uint64_t sub_100173684(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001736C4(a1, a2, a3, (void (*)(void))sub_100E89D8C, (void (*)(void))sub_100E7B56C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7DD00);
}

uint64_t sub_1001736C4(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  char v28 = a5;
  uint64_t v29 = a6;
  uint64_t v8 = v6;
  uint64_t v12 = type metadata accessor for BeaconKeyManager.FileKey(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_100725124(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v28();
  unint64_t v26 = sub_100725124(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100173FF0(a2, (uint64_t)v14, type metadata accessor for BeaconKeyManager.FileKey);
  return v29(v17, v14, a1, v23);
}

void sub_100173864(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1001738A4(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  char v28 = a5;
  uint64_t v29 = a6;
  uint64_t v8 = v6;
  uint64_t v30 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_1007240CC(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);

      *(void *)(v24 + 8 * v17) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v28();
  unint64_t v25 = sub_1007240CC(a2);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v25;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v29(v17, v14, v30, v23);
}

uint64_t sub_100173A6C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E8A074, (void (*)(void))sub_100E7BA34, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_100173AAC(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v8 = v6;
  uint64_t v31 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_1007240CC(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v29();
  unint64_t v26 = sub_1007240CC(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v30(v17, v14, v31, v23);
}

uint64_t sub_100173C74(char a1, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void **)v4;
  uint64_t v27 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_1007240CC(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    char v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 16 * v15;
      uint64_t result = swift_release();
      *(unsigned char *)uint64_t v22 = a1 & 1;
      *(void *)(v22 + 8) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100E8A32C();
    goto LABEL_7;
  }
  sub_100E7BA40(v18, a4 & 1);
  unint64_t v24 = sub_1007240CC(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  char v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100E7DDE8(v15, (uint64_t)v12, a1 & 1, v27, v21);
}

uint64_t sub_100173E34()
{
  return 4;
}

void sub_100173E3C(id a1, char a2)
{
  if (!a2) {
}
  }

_OWORD *sub_100173E4C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100173E5C(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRelease();
  }
  if (!(result >> 62)) {
    return swift_release();
  }
  return result;
}

void sub_100173E7C(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100173E88(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100173E94(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100173EF0()
{
  unint64_t result = qword_10163CB90;
  if (!qword_10163CB90)
  {
    sub_10000592C(&qword_10163D210);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CB90);
  }
  return result;
}

uint64_t sub_100173F4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100173FA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100173FF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100174058(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001740B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100174120(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for BeaconKeyManagerURLChangeSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for BeaconKeyManagerURLChangeSubscriber()
{
  return swift_release();
}

void *assignWithCopy for BeaconKeyManagerURLChangeSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for BeaconKeyManagerURLChangeSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerURLChangeSubscriber()
{
  return &type metadata for BeaconKeyManagerURLChangeSubscriber;
}

uint64_t sub_1001742EC(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_10000588C(&qword_10163CBE8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, a1, v9);
  v7[v8] = *(unsigned char *)(a1 + v8);
  a2(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v7, v9);
}

uint64_t sub_100174404(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163CCC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100176D4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_100176DA0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent();
    LOBYTE(v12) = *(unsigned char *)(v3 + v9[5]);
    char v13 = 1;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + v9[7]);
    char v13 = 3;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + v9[8]);
    char v13 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001746A4()
{
  unint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      unint64_t result = 1701869940;
      break;
    case 2:
      unint64_t result = 0x64497265626D656DLL;
      break;
    case 3:
      unint64_t result = 0x7265747369676572;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100174758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100175584(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100174780(uint64_t a1)
{
  unint64_t v2 = sub_100176D4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001747BC(uint64_t a1)
{
  unint64_t v2 = sub_100176D4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001747F8(void *a1)
{
  return sub_100174404(a1);
}

uint64_t sub_100174810()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1000361E0(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100174844()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10017484C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*sub_100174878())()
{
  return SharingCircleWildAdvertisementKey.init(key:);
}

uint64_t sub_1001748A4()
{
  return 0x746C75736572;
}

uint64_t sub_1001748B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100174948(uint64_t a1)
{
  unint64_t v2 = sub_100176CF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100174984(uint64_t a1)
{
  unint64_t v2 = sub_100176CF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001749C0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10163CCB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100176CF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_100174B20(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163CCE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100176CF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100174C54(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 96) = a6;
  *(void *)(v7 + 104) = v6;
  *(void *)(v7 + 80) = a4;
  *(void *)(v7 + 88) = a5;
  *(unsigned char *)(v7 + 200) = a2;
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a3;
  type metadata accessor for String.Encoding();
  *(void *)(v7 + 112) = swift_task_alloc();
  type metadata accessor for KeyDropJoinToken(0);
  *(void *)(v7 + 120) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v7 + 128) = v8;
  *(void *)(v7 + 136) = *(void *)(v8 - 8);
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_100174D88, v6, 0);
}

uint64_t sub_100174D88()
{
  uint64_t v33 = v0;
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v27 = *(void *)(v0 + 96);
  uint64_t v28 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 16);
  int v30 = *(unsigned __int8 *)(v0 + 200);
  v7(v1, *(void *)(v0 + 64), v3);
  v7(v2, v6, v3);
  sub_100175520(v27, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1001757B4(v1, v30, v2, v5, v4, v28);
  *(void *)(v0 + 160) = v8;
  *(void *)(v0 + 168) = v9;
  *(void *)(v0 + 176) = v10;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  unint64_t v13 = v10;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F7C8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v12, v13);
  swift_bridgeObjectRetain();
  sub_1000361E0(v12, v13);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v29 = v16;
    BOOL v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)BOOL v17 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000361E0(v12, v13);
    sub_1000361E0(v12, v13);
    static String.Encoding.utf8.getter();
    uint64_t v18 = String.init(data:encoding:)();
    if (v19)
    {
      uint64_t v20 = v18;
      unint64_t v21 = v19;
      sub_10001CFB8(v12, v13);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v12, v13);
    }
    else
    {
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Empty description for request body.", v24, 2u);
        swift_slowDealloc();
      }

      sub_10001CFB8(v12, v13);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v12, v13);
      unint64_t v21 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    *(void *)(v0 + 56) = sub_1008FA0F0(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v13);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v29, "KeyDropRegisterAPNSTokenRequest: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v13);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v13);
  }
  *(void *)(v0 + 40) = &type metadata for KeyDropRegisterAPNSTokenRequest;
  *(void *)(v0 + 48) = sub_1001760D4();
  *(void *)(v0 + 16) = v11;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = v13;
  swift_bridgeObjectRetain();
  sub_1000361E0(v12, v13);
  uint64_t v31 = (uint64_t (*)(uint64_t, char))((char *)&dword_101668388 + dword_101668388);
  char v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v25;
  *char v25 = v0;
  v25[1] = sub_10017527C;
  return v31(v0 + 16, 6);
}

uint64_t sub_10017527C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 104);
    uint64_t v6 = sub_100175470;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 104);
    *(unsigned char *)(v4 + 201) = a1 & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 16);
    uint64_t v6 = sub_1001753C0;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001753C0()
{
  uint64_t v1 = *(void *)(v0 + 168);
  unint64_t v2 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 201);
  return v3(v4);
}

uint64_t sub_100175470()
{
  uint64_t v2 = v0[21];
  unint64_t v1 = v0[22];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t sub_100175520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyDropJoinToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100175584(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64497265626D656DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265747369676572 && a2 == 0xEE00736E656B6F54 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F42C0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

int *sub_1001757B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a6;
  LODWORD(v78) = a2;
  uint64_t v9 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  __chkstk_darwin(v9);
  v74 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v69 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v73 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent();
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  BOOL v17 = (uint64_t *)((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v18 = JSONEncoder.init()();
  *BOOL v17 = sub_1003B9190;
  v17[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v14);
  uint64_t v82 = v18;
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  int64_t v19 = *(void *)(a4 + 16);
  uint64_t v85 = a1;
  uint64_t v76 = a3;
  uint64_t v70 = v11;
  if (v19)
  {
    v83 = (int *)_swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v19, 0);
    uint64_t v20 = v83;
    uint64_t v75 = a4;
    unint64_t v21 = (unint64_t *)(a4 + 40);
    int64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      unint64_t v24 = *v21;
      sub_1000361E0(v23, *v21);
      uint64_t v25 = Data.hexString.getter();
      uint64_t v27 = v26;
      sub_10001CFB8(v23, v24);
      v83 = v20;
      unint64_t v29 = *((void *)v20 + 2);
      unint64_t v28 = *((void *)v20 + 3);
      if (v29 >= v28 >> 1)
      {
        sub_1000B6ED0(v28 > 1, v29 + 1, 1);
        uint64_t v20 = v83;
      }
      v21 += 2;
      *((void *)v20 + 2) = v29 + 1;
      int v30 = &v20[4 * v29];
      *((void *)v30 + 4) = v25;
      *((void *)v30 + 5) = v27;
      --v22;
    }
    while (v22);
    v83 = (int *)_swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v19, 0);
    uint64_t v31 = v83;
    uint64_t v32 = (unint64_t *)(v75 + 40);
    do
    {
      uint64_t v33 = *(v32 - 1);
      unint64_t v34 = *v32;
      sub_1000361E0(v33, *v32);
      uint64_t v35 = Data.hexString.getter();
      uint64_t v37 = v36;
      sub_10001CFB8(v33, v34);
      v83 = v31;
      unint64_t v39 = *((void *)v31 + 2);
      unint64_t v38 = *((void *)v31 + 3);
      if (v39 >= v38 >> 1)
      {
        sub_1000B6ED0(v38 > 1, v39 + 1, 1);
        uint64_t v31 = v83;
      }
      v32 += 2;
      *((void *)v31 + 2) = v39 + 1;
      v40 = &v31[4 * v39];
      *((void *)v40 + 4) = v35;
      *((void *)v40 + 5) = v37;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    a1 = v85;
    uint64_t v41 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = a3;
    uint64_t v31 = (int *)_swiftEmptyArrayStorage;
    uint64_t v20 = (int *)_swiftEmptyArrayStorage;
  }
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v42 - 8);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  uint64_t v45 = v80;
  v44(v80, a1, v42);
  v46 = (int *)v77;
  v44(v45 + *(int *)(v77 + 24), v41, v42);
  *(unsigned char *)(v45 + v46[5]) = v78;
  *(void *)(v45 + v46[7]) = v20;
  *(void *)(v45 + v46[8]) = v31;
  sub_100176DA0(&qword_10163CC00, (void (*)(uint64_t))type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent);
  v47 = v79;
  uint64_t v48 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v47)
  {
    swift_release();
    sub_100176174(v81, type metadata accessor for KeyDropJoinToken);
    v50 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v50(v41, v42);
    v50(v85, v42);
    sub_100176174(v45, (uint64_t (*)(void))type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent);
  }
  else
  {
    unint64_t v51 = v49;
    v79 = (void *)v48;
    uint64_t v52 = v81 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
    unint64_t v53 = *(void *)(v52 + 8);
    v83 = *(int **)v52;
    unint64_t v84 = v53;
    sub_1000361E0((uint64_t)v83, v53);
    v54 = v74;
    P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
    v83 = (int *)v79;
    unint64_t v84 = v51;
    sub_1000362FC();
    P256.Signing.PrivateKey.signature<A>(for:)();
    uint64_t v78 = v43;
    uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v54, v72);
    v46 = (int *)sub_1005F52D4(v56);
    if (qword_101637188 != -1) {
      swift_once();
    }
    v57 = (void *)qword_10170EE68;
    id v58 = [self sharedInstance];
    unsigned int v59 = [v58 isInternalBuild];

    if (v59
      && (NSString v60 = String._bridgeToObjectiveC()(),
          unsigned __int8 v61 = [v57 BOOLForKey:v60],
          v60,
          (v61 & 1) != 0))
    {
      swift_release();
      v62 = v73;
    }
    else
    {
      v62 = v73;
      uint64_t v63 = P256.Signing.ECDSASignature.derRepresentation.getter();
      unint64_t v65 = v64;
      Swift::String v66 = Data.base64EncodedString(options:)(0);
      sub_10001CFB8(v63, v65);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v83 = v46;
      sub_10016C0FC(v66._countAndFlagsBits, (uint64_t)v66._object, 0xD000000000000012, 0x80000001013F42A0, isUniquelyReferenced_nonNull_native);
      v46 = v83;
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_100176174(v81, type metadata accessor for KeyDropJoinToken);
    v68 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v68(v76, v42);
    v68(v85, v42);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v70);
    sub_100176174(v80, (uint64_t (*)(void))type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent);
  }
  return v46;
}

unint64_t sub_1001760D4()
{
  unint64_t result = qword_10163CBF8;
  if (!qword_10163CBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CBF8);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent()
{
  uint64_t result = qword_10163CC60;
  if (!qword_10163CC60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100176174(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1001761D4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    v8((void *)((char *)a1 + v9), (void *)((char *)a2 + v9), v7);
    uint64_t v10 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001762E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 24), v4);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100176390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100176450(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  v7(a1 + a3[6], a2 + a3[6], v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10017652C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_1001765E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001766A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001766BC);
}

uint64_t sub_1001766BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10017677C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100176790);
}

uint64_t sub_100176790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10017684C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KeyDropRegisterAPNSTokenResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyDropRegisterAPNSTokenResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100176A60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropRegisterAPNSTokenResponse()
{
  return &type metadata for KeyDropRegisterAPNSTokenResponse;
}

uint64_t destroy for KeyDropRegisterAPNSTokenRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);

  return sub_10001CFB8(v2, v3);
}

void *_s12searchpartyd31KeyDropRegisterAPNSTokenRequestVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_1000361E0(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for KeyDropRegisterAPNSTokenRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_1000361E0(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_10001CFB8(v6, v7);
  return a1;
}

__n128 initializeWithTake for MessagingDestination(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for KeyDropRegisterAPNSTokenRequest(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_10001CFB8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDropRegisterAPNSTokenRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropRegisterAPNSTokenRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropRegisterAPNSTokenRequest()
{
  return &type metadata for KeyDropRegisterAPNSTokenRequest;
}

unint64_t sub_100176C7C(uint64_t a1)
{
  unint64_t result = sub_100176CA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100176CA4()
{
  unint64_t result = qword_10163CCA8;
  if (!qword_10163CCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCA8);
  }
  return result;
}

unint64_t sub_100176CF8()
{
  unint64_t result = qword_10163CCB8;
  if (!qword_10163CCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCB8);
  }
  return result;
}

unint64_t sub_100176D4C()
{
  unint64_t result = qword_10163CCC8;
  if (!qword_10163CCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCC8);
  }
  return result;
}

uint64_t sub_100176DA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100176DE8()
{
  unint64_t result = qword_10163CCD0;
  if (!qword_10163CCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCD0);
  }
  return result;
}

unint64_t sub_100176E3C()
{
  unint64_t result = qword_10163CCD8;
  if (!qword_10163CCD8)
  {
    sub_10000592C(&qword_101654A30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCD8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100176F74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent.CodingKeys()
{
  return &type metadata for KeyDropRegisterAPNSTokenRequest.KeyDropRegisterAPNSTokenContent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropRegisterAPNSTokenResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100177048);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropRegisterAPNSTokenResponse.CodingKeys()
{
  return &type metadata for KeyDropRegisterAPNSTokenResponse.CodingKeys;
}

unint64_t sub_100177084()
{
  unint64_t result = qword_10163CCE8;
  if (!qword_10163CCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCE8);
  }
  return result;
}

unint64_t sub_1001770DC()
{
  unint64_t result = qword_10163CCF0;
  if (!qword_10163CCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCF0);
  }
  return result;
}

unint64_t sub_100177134()
{
  unint64_t result = qword_10163CCF8;
  if (!qword_10163CCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CCF8);
  }
  return result;
}

unint64_t sub_10017718C()
{
  unint64_t result = qword_10163CD00;
  if (!qword_10163CD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD00);
  }
  return result;
}

unint64_t sub_1001771E4()
{
  unint64_t result = qword_10163CD08;
  if (!qword_10163CD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD08);
  }
  return result;
}

unint64_t sub_10017723C()
{
  unint64_t result = qword_10163CD10;
  if (!qword_10163CD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD10);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PublishingPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017735CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PublishingPolicy()
{
  return &type metadata for PublishingPolicy;
}

unint64_t sub_100177398()
{
  unint64_t result = qword_10163CD18;
  if (!qword_10163CD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD18);
  }
  return result;
}

uint64_t sub_1001773EC(char a1)
{
  uint64_t result = 0x7265776F50776F6CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6F506D756964656DLL;
      break;
    case 2:
      uint64_t result = 0x65776F5068676968;
      break;
    case 3:
    case 4:
      uint64_t result = 0x4F7265776F506E6FLL;
      break;
    case 5:
    case 6:
      uint64_t result = 0x7265747461426E6FLL;
      break;
    case 7:
      uint64_t result = 0x6F696E61706D6F63;
      break;
    case 8:
      uint64_t result = 0x6857796669746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10017753C(unsigned __int8 *a1, char *a2)
{
  return sub_10071D9B4(*a1, *a2);
}

Swift::Int sub_100177548()
{
  return Hasher._finalize()();
}

uint64_t sub_100177590()
{
  return sub_100720198();
}

Swift::Int sub_100177598()
{
  return Hasher._finalize()();
}

unint64_t sub_1001775DC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001776C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10017760C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001773EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_100177638(char *a1, char *a2)
{
  return qword_10134CB10[*a1] < qword_10134CB10[*a2];
}

BOOL sub_10017765C(char *a1, char *a2)
{
  return qword_10134CB10[*a2] >= qword_10134CB10[*a1];
}

BOOL sub_100177680(char *a1, char *a2)
{
  return qword_10134CB10[*a1] >= qword_10134CB10[*a2];
}

BOOL sub_1001776A4(char *a1, char *a2)
{
  return qword_10134CB10[*a2] < qword_10134CB10[*a1];
}

unint64_t sub_1001776C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10159F2C8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t destroy for PencilSendPairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  uint64_t v2 = a1[16];
  unint64_t v3 = a1[17];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for PencilSendPairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = a2[8];
  unint64_t v13 = a2[9];
  sub_1000361E0(v12, v13);
  a1[8] = v12;
  a1[9] = v13;
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_1000361E0(v14, v15);
  a1[10] = v14;
  a1[11] = v15;
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  a1[12] = v16;
  a1[13] = v17;
  uint64_t v18 = a2[14];
  unint64_t v19 = a2[15];
  sub_1000361E0(v18, v19);
  a1[14] = v18;
  a1[15] = v19;
  uint64_t v21 = a2[16];
  unint64_t v20 = a2[17];
  sub_1000361E0(v21, v20);
  a1[16] = v21;
  a1[17] = v20;
  return a1;
}

uint64_t *assignWithCopy for PencilSendPairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[8];
  unint64_t v21 = a2[9];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[10];
  unint64_t v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[12];
  unint64_t v29 = a2[13];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[12];
  unint64_t v31 = a1[13];
  a1[12] = v28;
  a1[13] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[14];
  unint64_t v33 = a2[15];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[14];
  unint64_t v35 = a1[15];
  a1[14] = v32;
  a1[15] = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v37 = a2[16];
  unint64_t v36 = a2[17];
  sub_1000361E0(v37, v36);
  uint64_t v38 = a1[16];
  unint64_t v39 = a1[17];
  a1[16] = v37;
  a1[17] = v36;
  sub_10001CFB8(v38, v39);
  return a1;
}

__n128 initializeWithTake for PencilSendPairingCommandPayload(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t *assignWithTake for PencilSendPairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  *((_OWORD *)a1 + 5) = a2[5];
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a1[12];
  unint64_t v17 = a1[13];
  *((_OWORD *)a1 + 6) = a2[6];
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a1[14];
  unint64_t v19 = a1[15];
  *((_OWORD *)a1 + 7) = a2[7];
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a1[16];
  unint64_t v21 = a1[17];
  *((_OWORD *)a1 + 8) = a2[8];
  sub_10001CFB8(v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSendPairingCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PencilSendPairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSendPairingCommandPayload()
{
  return &type metadata for PencilSendPairingCommandPayload;
}

uint64_t sub_100177B5C(void *a1)
{
  unsigned int v3 = v1;
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  long long v50 = *v1;
  sub_1000BD078((uint64_t)v51, v52);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v2)
  {
    long long v50 = v1[1];
    sub_1000BD078((uint64_t)v51, v52);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    long long v50 = v1[2];
    sub_1000BD078((uint64_t)v51, v52);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    long long v50 = v1[3];
    sub_1000BD078((uint64_t)v51, v52);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    long long v50 = v1[4];
    sub_1000BD078((uint64_t)v51, v52);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    long long v57 = v1[5];
    sub_1000620BC((uint64_t)&v57, (uint64_t)v58);
    sub_1000620BC((uint64_t)v58, (uint64_t)&v61);
    switch(v62 >> 62)
    {
      case 1uLL:
        v62 &= 0x3FFFFFFFFFFFFFFFuLL;
        LODWORD(v4) = HIDWORD(v61) - v61;
        if (__OFSUB__(HIDWORD(v61), v61)) {
          goto LABEL_48;
        }
        unint64_t v4 = (int)v4;
LABEL_7:
        if ((v4 & 0x8000000000000000) != 0 || v4 >= 0x10000) {
          goto LABEL_62;
        }
LABEL_9:
        sub_100179818();
        uint64_t v8 = FixedWidthInteger.data.getter();
        unint64_t v10 = v9;
        sub_1000BD078((uint64_t)v51, v52);
        dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
        sub_10001CFB8(v8, v10);
        long long v50 = v57;
        sub_1000620BC((uint64_t)v58, (uint64_t)&v59);
        unsigned __int8 v11 = BYTE6(v60);
        uint64_t v12 = 0;
        switch(v60 >> 62)
        {
          case 1uLL:
            v60 &= 0x3FFFFFFFFFFFFFFFuLL;
            if (__OFSUB__(HIDWORD(v59), v59)) {
              goto LABEL_50;
            }
            uint64_t v12 = HIDWORD(v59) - (int)v59;
LABEL_14:
            sub_100061E54((uint64_t)&v57);
LABEL_15:
            if (__OFSUB__(1900, v12))
            {
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1001784DCLL);
            }
            *(void *)&long long v49 = sub_10085E9A4(1900 - v12);
            *((void *)&v49 + 1) = v15;
            sub_10072AD40((uint64_t *)&v49, 0);
            long long v16 = v49;
            Data.append(_:)();
            sub_10001CFB8(v16, *((unint64_t *)&v16 + 1));
            long long v17 = v50;
            long long v49 = v50;
            sub_1000BD078((uint64_t)v51, v52);
            dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
            long long v55 = v3[6];
            sub_1000620BC((uint64_t)&v55, (uint64_t)v56);
            sub_1000620BC((uint64_t)v56, (uint64_t)&v65);
            unsigned __int8 v19 = BYTE6(v66);
            LOWORD(v20) = 0;
            unint64_t v71 = *((void *)&v17 + 1);
            switch(v66 >> 62)
            {
              case 1uLL:
                v66 &= 0x3FFFFFFFFFFFFFFFuLL;
                LODWORD(v20) = HIDWORD(v65) - v65;
                if (__OFSUB__(HIDWORD(v65), v65)) {
                  goto LABEL_53;
                }
                unint64_t v20 = (int)v20;
LABEL_23:
                if ((v20 & 0x8000000000000000) != 0 || v20 >= 0x10000) {
                  goto LABEL_62;
                }
LABEL_25:
                LOWORD(v49) = v20;
                uint64_t v23 = FixedWidthInteger.data.getter();
                unint64_t v25 = v24;
                *(void *)&long long v49 = v23;
                *((void *)&v49 + 1) = v24;
                sub_1000BD078((uint64_t)v51, v52);
                dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
                sub_10001CFB8(v23, v25);
                long long v49 = v55;
                sub_1000620BC((uint64_t)v56, (uint64_t)&v63);
                unsigned __int8 v26 = BYTE6(v64);
                uint64_t v27 = 0;
                switch(v64 >> 62)
                {
                  case 1uLL:
                    v64 &= 0x3FFFFFFFFFFFFFFFuLL;
                    if (__OFSUB__(HIDWORD(v63), v63)) {
                      goto LABEL_55;
                    }
                    uint64_t v27 = HIDWORD(v63) - (int)v63;
LABEL_30:
                    sub_100061E54((uint64_t)&v55);
LABEL_31:
                    if (__OFSUB__(600, v27)) {
                      goto LABEL_52;
                    }
                    *(void *)&long long v48 = sub_10085E9A4(600 - v27);
                    *((void *)&v48 + 1) = v30;
                    sub_10072AD40((uint64_t *)&v48, 0);
                    long long v31 = v48;
                    Data.append(_:)();
                    sub_10001CFB8(v31, *((unint64_t *)&v31 + 1));
                    long long v32 = v49;
                    long long v48 = v49;
                    sub_1000BD078((uint64_t)v51, v52);
                    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
                    long long v53 = v3[7];
                    sub_1000620BC((uint64_t)&v53, (uint64_t)v54);
                    sub_1000620BC((uint64_t)v54, (uint64_t)&v69);
                    char v33 = BYTE6(v70);
                    LOBYTE(v34) = 0;
                    switch(v70 >> 62)
                    {
                      case 1uLL:
                        v70 &= 0x3FFFFFFFFFFFFFFFuLL;
                        LODWORD(v34) = HIDWORD(v69) - v69;
                        if (__OFSUB__(HIDWORD(v69), v69)) {
                          goto LABEL_58;
                        }
                        unint64_t v34 = (int)v34;
LABEL_37:
                        if ((v34 & 0x8000000000000000) != 0 || v34 >= 0x100) {
                          goto LABEL_62;
                        }
LABEL_39:
                        LOBYTE(v48) = v34;
                        sub_10006145C();
                        uint64_t v37 = FixedWidthInteger.data.getter();
                        unint64_t v39 = v38;
                        *(void *)&long long v48 = v37;
                        *((void *)&v48 + 1) = v38;
                        sub_1000BD078((uint64_t)v51, v52);
                        dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
                        sub_10001CFB8(v37, v39);
                        long long v48 = v53;
                        sub_1000620BC((uint64_t)v54, (uint64_t)&v67);
                        unsigned __int8 v40 = BYTE6(v68);
                        uint64_t v41 = 0;
                        switch(v68 >> 62)
                        {
                          case 1uLL:
                            v68 &= 0x3FFFFFFFFFFFFFFFuLL;
                            if (__OFSUB__(HIDWORD(v67), v67)) {
                              goto LABEL_60;
                            }
                            uint64_t v41 = HIDWORD(v67) - (int)v67;
LABEL_44:
                            sub_100061E54((uint64_t)&v53);
LABEL_45:
                            if (__OFSUB__(100, v41)) {
                              goto LABEL_57;
                            }
                            *(void *)&long long v47 = sub_10085E9A4(100 - v41);
                            *((void *)&v47 + 1) = v44;
                            sub_10072AD40((uint64_t *)&v47, 0);
                            long long v45 = v47;
                            Data.append(_:)();
                            sub_10001CFB8(v45, *((unint64_t *)&v45 + 1));
                            long long v46 = v48;
                            long long v47 = v48;
                            sub_1000BD078((uint64_t)v51, v52);
                            dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
                            long long v47 = v3[8];
                            sub_1000BD078((uint64_t)v51, v52);
                            dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
                            sub_10001CFB8(v46, *((unint64_t *)&v46 + 1));
                            sub_10001CFB8(v32, *((unint64_t *)&v32 + 1));
                            sub_10001CFB8(v17, v71);
                            break;
                          case 2uLL:
                            v68 &= 0x3FFFFFFFFFFFFFFFuLL;
                            uint64_t v42 = *(void *)(v67 + 16);
                            uint64_t v43 = *(void *)(v67 + 24);
                            uint64_t v41 = v43 - v42;
                            if (!__OFSUB__(v43, v42)) {
                              goto LABEL_44;
                            }
                            goto LABEL_61;
                          case 3uLL:
                            goto LABEL_45;
                          default:
                            v68 &= 0x3FFFFFFFFFFFFFFFuLL;
                            uint64_t v41 = v40;
                            goto LABEL_45;
                        }
                        break;
                      case 2uLL:
                        v70 &= 0x3FFFFFFFFFFFFFFFuLL;
                        uint64_t v35 = *(void *)(v69 + 16);
                        uint64_t v36 = *(void *)(v69 + 24);
                        BOOL v7 = __OFSUB__(v36, v35);
                        unint64_t v34 = v36 - v35;
                        if (!v7) {
                          goto LABEL_37;
                        }
                        goto LABEL_59;
                      case 3uLL:
                        goto LABEL_39;
                      default:
                        v70 &= 0x3FFFFFFFFFFFFFFFuLL;
                        LOBYTE(v34) = v33;
                        goto LABEL_39;
                    }
                    break;
                  case 2uLL:
                    v64 &= 0x3FFFFFFFFFFFFFFFuLL;
                    uint64_t v28 = *(void *)(v63 + 16);
                    uint64_t v29 = *(void *)(v63 + 24);
                    uint64_t v27 = v29 - v28;
                    if (!__OFSUB__(v29, v28)) {
                      goto LABEL_30;
                    }
                    goto LABEL_56;
                  case 3uLL:
                    goto LABEL_31;
                  default:
                    v64 &= 0x3FFFFFFFFFFFFFFFuLL;
                    uint64_t v27 = v26;
                    goto LABEL_31;
                }
                break;
              case 2uLL:
                v66 &= 0x3FFFFFFFFFFFFFFFuLL;
                uint64_t v21 = *(void *)(v65 + 16);
                uint64_t v22 = *(void *)(v65 + 24);
                BOOL v7 = __OFSUB__(v22, v21);
                unint64_t v20 = v22 - v21;
                if (!v7) {
                  goto LABEL_23;
                }
                goto LABEL_54;
              case 3uLL:
                goto LABEL_25;
              default:
                v66 &= 0x3FFFFFFFFFFFFFFFuLL;
                LOWORD(v20) = v19;
                goto LABEL_25;
            }
            break;
          case 2uLL:
            v60 &= 0x3FFFFFFFFFFFFFFFuLL;
            uint64_t v13 = *(void *)(v59 + 16);
            uint64_t v14 = *(void *)(v59 + 24);
            uint64_t v12 = v14 - v13;
            if (!__OFSUB__(v14, v13)) {
              goto LABEL_14;
            }
            goto LABEL_51;
          case 3uLL:
            goto LABEL_15;
          default:
            v60 &= 0x3FFFFFFFFFFFFFFFuLL;
            uint64_t v12 = v11;
            goto LABEL_15;
        }
        break;
      case 2uLL:
        v62 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v5 = *(void *)(v61 + 16);
        uint64_t v6 = *(void *)(v61 + 24);
        BOOL v7 = __OFSUB__(v6, v5);
        unint64_t v4 = v6 - v5;
        if (!v7) {
          goto LABEL_7;
        }
        goto LABEL_49;
      case 3uLL:
        goto LABEL_9;
      default:
        v62 &= 0x3FFFFFFFFFFFFFFFuLL;
        goto LABEL_9;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
}

__n128 sub_10017853C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100178894(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100178598(void *a1)
{
  return sub_100177B5C(a1);
}

unint64_t sub_1001785B0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001785E0();
  unint64_t result = sub_100178634();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001785E0()
{
  unint64_t result = qword_10163CD20;
  if (!qword_10163CD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD20);
  }
  return result;
}

unint64_t sub_100178634()
{
  unint64_t result = qword_10163CD28;
  if (!qword_10163CD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD28);
  }
  return result;
}

uint64_t sub_100178688@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v19) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x100178854);
      }
      uint64_t v19 = (int)v19;
LABEL_6:
      if (v19 != 16) {
        goto LABEL_34;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v23) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_28;
          }
          uint64_t v23 = (int)v23;
LABEL_12:
          if (v23 != 16) {
            goto LABEL_35;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v26) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_30;
              }
              uint64_t v26 = (int)v26;
LABEL_18:
              if (v26 != 18) {
                goto LABEL_36;
              }
              switch(a11 >> 62)
              {
                case 1uLL:
                  LODWORD(v29) = HIDWORD(a10) - a10;
                  if (__OFSUB__(HIDWORD(a10), a10)) {
                    goto LABEL_32;
                  }
                  uint64_t v29 = (int)v29;
LABEL_24:
                  if (v29 != 64) {
                    goto LABEL_37;
                  }
                  *a9 = result;
                  a9[1] = a2;
                  a9[2] = a3;
                  a9[3] = a4;
                  a9[4] = a5;
                  a9[5] = a6;
                  a9[6] = a7;
                  a9[7] = a8;
                  a9[8] = a10;
                  a9[9] = a11;
                  a9[10] = a12;
                  a9[11] = a13;
                  a9[12] = a14;
                  a9[13] = a15;
                  a9[14] = a16;
                  a9[15] = a17;
                  a9[16] = a18;
                  a9[17] = a19;
                  return result;
                case 2uLL:
                  uint64_t v31 = *(void *)(a10 + 16);
                  uint64_t v30 = *(void *)(a10 + 24);
                  BOOL v22 = __OFSUB__(v30, v31);
                  uint64_t v29 = v30 - v31;
                  if (!v22) {
                    goto LABEL_24;
                  }
                  goto LABEL_33;
                case 3uLL:
                  goto LABEL_37;
                default:
                  uint64_t v29 = BYTE6(a11);
                  goto LABEL_24;
              }
            case 2uLL:
              uint64_t v28 = *(void *)(a5 + 16);
              uint64_t v27 = *(void *)(a5 + 24);
              BOOL v22 = __OFSUB__(v27, v28);
              uint64_t v26 = v27 - v28;
              if (!v22) {
                goto LABEL_18;
              }
              goto LABEL_31;
            case 3uLL:
              goto LABEL_36;
            default:
              uint64_t v26 = BYTE6(a6);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v25 = *(void *)(a3 + 16);
          uint64_t v24 = *(void *)(a3 + 24);
          BOOL v22 = __OFSUB__(v24, v25);
          uint64_t v23 = v24 - v25;
          if (!v22) {
            goto LABEL_12;
          }
          goto LABEL_29;
        case 3uLL:
          goto LABEL_35;
        default:
          uint64_t v23 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v21 = *(void *)(result + 16);
      uint64_t v20 = *(void *)(result + 24);
      BOOL v22 = __OFSUB__(v20, v21);
      uint64_t v19 = v20 - v21;
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_34;
    default:
      uint64_t v19 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100178894@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness();
  __chkstk_darwin(v5 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v86, v87);
  uint64_t v6 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v82 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v83 = v10;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v80 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v81 = v11;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v78 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v79 = v12;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v76 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v77 = v13;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v74 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v75 = v14;
    sub_1000BD078((uint64_t)v86, v87);
    uint64_t v73 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v72 = v15;
    uint64_t v16 = v74;
    unint64_t v17 = v75;
    sub_1000361E0(v74, v75);
    static Endianness.current.getter();
    sub_100179818();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (BYTE2(v84) == 1)
    {
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100010324(v18, (uint64_t)qword_10170F098);
      sub_1000361E0(v74, v75);
      sub_1000361E0(v74, v75);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v22 = Data.hexString.getter();
        uint64_t v89 = sub_1008FA0F0(v22, v23, &v84);
        unint64_t v17 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v16 = v74;
        swift_bridgeObjectRelease();
        sub_10001CFB8(v74, v75);
        sub_10001CFB8(v74, v75);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Invalid certs length: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10001CFB8(v74, v75);
        sub_10001CFB8(v74, v75);
      }

      uint64_t v24 = type metadata accessor for BinaryEncodingError();
      sub_10017986C();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for BinaryEncodingError.encodingError(_:), v24);
      swift_willThrow();
      sub_10001CFB8(v73, v72);
      uint64_t v26 = v16;
      unint64_t v27 = v17;
    }
    else
    {
      sub_1000361E0(v73, v72);
      sub_100435A9C((unsigned __int16)v84, v73, v72, &v84);
      uint64_t v68 = v84;
      unint64_t v69 = v85;
      sub_1000BD078((uint64_t)v86, v87);
      uint64_t v67 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
      unint64_t v70 = v28;
      sub_1000BD078((uint64_t)v86, v87);
      uint64_t v65 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
      unint64_t v66 = v29;
      sub_1000361E0(v67, v70);
      static Endianness.current.getter();
      FixedWidthInteger.init(data:ofEndianness:)();
      if (BYTE2(v84) == 1)
      {
        if (qword_101637320 != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        sub_100010324(v30, (uint64_t)qword_10170F098);
        sub_1000361E0(v67, v70);
        sub_1000361E0(v67, v70);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          char v33 = (uint8_t *)swift_slowAlloc();
          uint64_t v84 = swift_slowAlloc();
          *(_DWORD *)char v33 = 136315138;
          uint64_t v34 = Data.hexString.getter();
          uint64_t v89 = sub_1008FA0F0(v34, v35, &v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v67, v70);
          sub_10001CFB8(v67, v70);
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "Invalid CSR length: %s", v33, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001CFB8(v67, v70);
          sub_10001CFB8(v67, v70);
        }

        uint64_t v45 = type metadata accessor for BinaryEncodingError();
        sub_10017986C();
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v45 - 8) + 104))(v46, enum case for BinaryEncodingError.encodingError(_:), v45);
        swift_willThrow();
      }
      else
      {
        uint64_t v36 = (unsigned __int16)v84;
        sub_1000361E0(v65, v66);
        sub_100435A9C(v36, v65, v66, &v84);
        uint64_t v64 = v84;
        unint64_t v71 = v85;
        sub_1000BD078((uint64_t)v86, v87);
        uint64_t v62 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
        unint64_t v63 = v37;
        sub_1000BD078((uint64_t)v86, v87);
        uint64_t v60 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
        unint64_t v61 = v38;
        sub_1000361E0(v62, v63);
        static Endianness.current.getter();
        sub_10006145C();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE1(v84) != 1)
        {
          uint64_t v47 = v84;
          sub_1000361E0(v60, v61);
          sub_100435A9C(v47, v60, v61, &v84);
          uint64_t v59 = v84;
          uint64_t v48 = v85;
          sub_1000BD078((uint64_t)v86, v87);
          uint64_t v51 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
          uint64_t v53 = v52;
          sub_10001CFB8(v60, v61);
          sub_10001CFB8(v62, v63);
          sub_10001CFB8(v65, v66);
          sub_10001CFB8(v67, v70);
          sub_10001CFB8(v73, v72);
          sub_10001CFB8(v74, v75);
          sub_100178688(v8, v9, v82, v83, v80, v81, v78, v79, v88, v76, v77, v68, v69, v64, v71, v59, v48, v51, v53);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v86);
          uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
          long long v55 = v88[7];
          a2[6] = v88[6];
          a2[7] = v55;
          a2[8] = v88[8];
          long long v56 = v88[3];
          a2[2] = v88[2];
          a2[3] = v56;
          long long v57 = v88[5];
          a2[4] = v88[4];
          a2[5] = v57;
          long long v58 = v88[1];
          *a2 = v88[0];
          a2[1] = v58;
          return result;
        }
        if (qword_101637320 != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100010324(v39, (uint64_t)qword_10170F098);
        sub_1000361E0(v62, v63);
        sub_1000361E0(v62, v63);
        unsigned __int8 v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          uint64_t v84 = swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 136315138;
          uint64_t v43 = Data.hexString.getter();
          uint64_t v89 = sub_1008FA0F0(v43, v44, &v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v62, v63);
          sub_10001CFB8(v62, v63);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Invalid signature length: %s", v42, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001CFB8(v62, v63);
          sub_10001CFB8(v62, v63);
        }

        uint64_t v49 = type metadata accessor for BinaryEncodingError();
        sub_10017986C();
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v49 - 8) + 104))(v50, enum case for BinaryEncodingError.encodingError(_:), v49);
        swift_willThrow();
        sub_10001CFB8(v60, v61);
        sub_10001CFB8(v62, v63);
        sub_10001CFB8(v64, v71);
      }
      sub_10001CFB8(v65, v66);
      sub_10001CFB8(v67, v70);
      sub_10001CFB8(v68, v69);
      sub_10001CFB8(v73, v72);
      uint64_t v26 = v74;
      unint64_t v27 = v75;
    }
    sub_10001CFB8(v26, v27);
    sub_10001CFB8(v76, v77);
    sub_10001CFB8(v78, v79);
    sub_10001CFB8(v80, v81);
    sub_10001CFB8(v82, v83);
    sub_10001CFB8(v8, v9);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v86);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

unint64_t sub_100179818()
{
  unint64_t result = qword_10163CD30;
  if (!qword_10163CD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD30);
  }
  return result;
}

unint64_t sub_10017986C()
{
  unint64_t result = qword_101639620;
  if (!qword_101639620)
  {
    type metadata accessor for BinaryEncodingError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639620);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FinderActiveCache(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100179990);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinderActiveCache()
{
  return &type metadata for FinderActiveCache;
}

Swift::Int sub_1001799C8()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 1;
  }
  else {
    Swift::UInt v2 = -1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100179A18()
{
  if (*v0) {
    Swift::UInt v1 = 1;
  }
  else {
    Swift::UInt v1 = -1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100179A50()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 1;
  }
  else {
    Swift::UInt v2 = -1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100179A9C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100179AFC()
{
  return RawRepresentable<>.encode(to:)();
}

void *sub_100179B4C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == -1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_100179B6C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (!*v1) {
    uint64_t v2 = -1;
  }
  *a1 = v2;
}

unint64_t sub_100179B88()
{
  unint64_t result = qword_10163CD38;
  if (!qword_10163CD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD38);
  }
  return result;
}

unint64_t sub_100179BDC()
{
  unint64_t result = qword_10163CD40;
  if (!qword_10163CD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CD40);
  }
  return result;
}

uint64_t sub_100179C30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D7B8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170D7B8);
  if (qword_1016368D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170D7D0);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100179CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v29 = sub_10000588C(&qword_10163CE48);
  __chkstk_darwin(v29);
  unint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = sub_10000588C(&qword_10163CE50);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101657D00);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = *(void *)(a2 + 128);
  uint64_t v15 = *(void *)(result + 16);
  if (v15)
  {
    unint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    uint64_t v16 = v11 + 16;
    unint64_t v18 = result + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v19 = *(void *)(v16 + 56);
    v23[1] = v3;
    uint64_t v24 = v19;
    os_log_type_t v20 = (void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v25 = v17;
    uint64_t v26 = v16;
    uint64_t v21 = (void (**)(char *, uint64_t))(v16 - 8);
    v23[0] = result;
    swift_bridgeObjectRetain();
    do
    {
      v25(v13, v18, v10);
      uint64_t v22 = (uint64_t)v7 + *(int *)(v29 + 48);
      void *v7 = a1;
      sub_10017AC40(v27, v22);
      swift_retain();
      AsyncStream.Continuation.yield(_:)();
      (*v20)(v9, v28);
      (*v21)(v13, v10);
      v18 += v24;
      --v15;
    }
    while (v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100179F84()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LeechScanningService()
{
  return self;
}

unint64_t sub_100179FE8(uint64_t a1)
{
  unint64_t result = sub_10017A010();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017A010()
{
  unint64_t result = qword_10163CE30;
  if (!qword_10163CE30)
  {
    type metadata accessor for LeechScanningService();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163CE30);
  }
  return result;
}

uint64_t sub_10017A064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101657D00);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_10163CE60, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10017A23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101657D00);
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10017A304, a4, 0);
}

uint64_t sub_10017A304()
{
  uint64_t v1 = v0[5];
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = (unint64_t *)(v1 + 128);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 128) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_100A6FA80(0, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_100A6FA80(v5 > 1, v6 + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  *(void *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v6, v8, v9);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10017A458(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 88) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  sub_10000588C(&qword_10163CE40);
  *(void *)(v3 + 48) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DiscoveredObject(0);
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v4 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_10017A55C, 0, 0);
}

uint64_t sub_10017A55C()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  int v4 = *(_DWORD *)(v0 + 88);
  unint64_t v5 = swift_bridgeObjectRetain();
  sub_1002612D4(v5, v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10017AAF4(*(void *)(v0 + 48));
    if (qword_1016368C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D7B8);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v10 = Dictionary.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = sub_1008FA0F0(v10, v12, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to parse: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    sub_10017ABDC(*(void *)(v0 + 48), *(void *)(v0 + 80));
    if (qword_1016368C8 != -1) {
      swift_once();
    }
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170D7B8);
    sub_10017AC40(v13, v14);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 72);
    if (v18)
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v20 = 136446210;
      uint64_t v27 = v21;
      uint64_t v22 = sub_100264550();
      *(void *)(v0 + 24) = sub_1008FA0F0(v22, v23, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10017ACA4(v19);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Discovered: %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10017ACA4(*(void *)(v0 + 72));
    }

    uint64_t v26 = *(void *)(v0 + 40);
    return _swift_task_switch(sub_10017A9A0, v26, 0);
  }
}

uint64_t sub_10017A9A0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 40);
  type metadata accessor for Transaction();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  static Transaction.named<A>(_:with:)();
  swift_task_dealloc();
  return _swift_task_switch(sub_10017AA78, 0, 0);
}

uint64_t sub_10017AA78()
{
  sub_10017ACA4(*(void *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10017AAF4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163CE40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017AB54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D7D0);
  sub_100010324(v0, (uint64_t)qword_10170D7D0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10017ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017AC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017ACA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017AD00(uint64_t a1)
{
  return sub_100179CF8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10017AD1C()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_101657D00);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10017ADF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_101657D00) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001D2E4;
  return sub_10017A23C(a1, v5, v6, v7, v8);
}

ValueMetadata *type metadata accessor for ObservationStore()
{
  return &type metadata for ObservationStore;
}

void *sub_10017AF04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v6 = (unsigned char *)(v4 + a1 + 8);
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v6 & 1) == 0)
    {
      uint64_t v8 = *((void *)v6 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_100A6FA94(0, v7[2] + 1, 1, v7);
      }
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1) {
        uint64_t v7 = sub_100A6FA94((void *)(v9 > 1), v10 + 1, 1, v7);
      }
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }
    v6 += v5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

void *sub_10017B05C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[1] = v1;
    BOOL v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for BeaconIdentifier();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    unint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v14[2] = v4 + 32;
    uint64_t v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 20), v3);
      BOOL v18 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_10017B274()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D7E8);
  sub_100010324(v0, (uint64_t)qword_10170D7E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10017B2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16)
    && (uint64_t v12 = v5, sub_100723FF4(0xD000000000000015, 0x80000001013EE0F0), v5 = v12, (v8 & 1) != 0))
  {
    static Date.trustedNow.getter((uint64_t)v7);
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v4);
  }
  else
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v10(a2, 1, 1, v4);
  }
}

uint64_t sub_10017B484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1009FCF40();
  if (v8)
  {
    uint64_t v9 = __chkstk_darwin(v8);
    v12[-4] = a1;
    v12[-3] = a2;
    v12[-2] = v9;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Connection.TransactionMode.deferred(_:), v4);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10017B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v214 = a3;
  uint64_t v209 = a2;
  uint64_t v4 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v4 - 8);
  uint64_t v173 = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v172 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v188 = (uint64_t)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for OnConflict();
  uint64_t v200 = *(void *)(v192 - 8);
  __chkstk_darwin(v192);
  v191 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v8 - 8);
  uint64_t v187 = (uint64_t)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v186 = *(void *)(v198 - 8);
  __chkstk_darwin(v198);
  v171 = (uint64_t *)((char *)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v217 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v11 = __chkstk_darwin(v217);
  uint64_t v190 = (uint64_t)&v161 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v180 = (uint64_t)&v161 - v13;
  uint64_t v182 = type metadata accessor for Setter();
  uint64_t v202 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  v196 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for Insert();
  uint64_t v193 = *(void *)(v194 - 8);
  uint64_t v15 = __chkstk_darwin(v194);
  v166 = (char *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v170 = (char *)&v161 - v18;
  __chkstk_darwin(v17);
  v181 = (char *)&v161 - v19;
  uint64_t v20 = sub_10000588C(&qword_10163CEA8);
  __chkstk_darwin(v20 - 8);
  v197 = (char *)&v161 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = type metadata accessor for Row();
  uint64_t v201 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  v195 = (char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = sub_10000588C(&qword_10163CE68);
  uint64_t v218 = *(void *)(v210 - 8);
  uint64_t v23 = __chkstk_darwin(v210);
  v203 = (char *)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v161 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v161 - v29;
  __chkstk_darwin(v28);
  v207 = (char *)&v161 - v31;
  uint64_t v216 = type metadata accessor for Table();
  uint64_t v213 = *(void *)(v216 - 8);
  uint64_t v32 = __chkstk_darwin(v216);
  v168 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  v206 = (char *)&v161 - v35;
  __chkstk_darwin(v34);
  v212 = (char *)&v161 - v36;
  uint64_t v37 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  unsigned __int8 v40 = (char *)&v161 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v161 - v41;
  uint64_t v43 = type metadata accessor for MACAddress();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = __chkstk_darwin(v43);
  v219 = (char *)&v161 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = a1;
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(a1 + 24);
  uint64_t v205 = v45;
  uint64_t v211 = v47;
  if ((v47 & 0x2000000000000000) == 0)
  {
    sub_1000361E0(v48, v47);
    sub_1000361E0(v48, v47);
    sub_1000361E0(v48, v47);
    sub_100435A9C(6, v48, v47, (uint64_t *)&v221);
    uint64_t v49 = (uint64_t)v221;
    unint64_t v50 = v222;
    sub_1000361E0((uint64_t)v221, v222);
    MACAddress.init(addressToSanitize:type:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v219, v42, v43);
      sub_1001A1AD8(v48, v47);
      sub_10001CFB8(v49, v50);
      uint64_t v51 = v48;
      goto LABEL_6;
    }
    __break(1u);
LABEL_74:
    __break(1u);
    JUMPOUT(0x10017DA10);
  }
  uint64_t v52 = v47;
  v47 &= ~0x2000000000000000uLL;
  sub_1000361E0(v48, v47);
  sub_1000361E0(v48, v47);
  sub_1000361E0(v48, v47);
  MACAddress.init(addressToSanitize:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v40, 1, v43) == 1) {
    goto LABEL_74;
  }
  uint64_t v51 = v48;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v219, v40, v43);
  sub_1001A1AD8(v48, v52);
LABEL_6:
  uint64_t v53 = v30;
  uint64_t v54 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v55 = v220;
  if (qword_101637510 != -1) {
    swift_once();
  }
  uint64_t v56 = v209 + v54;
  uint64_t v184 = sub_10000588C(&qword_10163CE78);
  uint64_t v57 = sub_100010324(v184, (uint64_t)qword_10170F488);
  LOBYTE(v221) = *(unsigned char *)(v55 + 9);
  unint64_t v58 = sub_1001A1448();
  uint64_t v174 = v57;
  == infix<A>(_:_:)();
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v208 = v44;
  uint64_t v175 = sub_10000588C(&qword_10163CF58);
  uint64_t v59 = sub_100010324(v175, (uint64_t)qword_10170F530);
  v215 = (char *)v51;
  v221 = (char *)v51;
  unint64_t v222 = v47;
  unint64_t v189 = v47;
  sub_1001A1E54((unint64_t *)&qword_10163CFE8, (void (*)(uint64_t))&type metadata accessor for Blob);
  uint64_t v60 = v203;
  uint64_t v176 = v59;
  == infix<A>(_:_:)();
  && infix(_:_:)();
  unint64_t v61 = *(void (**)(char *, uint64_t))(v218 + 8);
  uint64_t v62 = v218 + 8;
  uint64_t v63 = v210;
  v61(v60, v210);
  v61(v27, v63);
  if (qword_101637578 != -1) {
    swift_once();
  }
  unint64_t v185 = v58;
  uint64_t v169 = sub_10000588C(&qword_10163CE98);
  uint64_t v64 = sub_100010324(v169, (uint64_t)qword_10170F5C0);
  uint64_t v65 = v220 + *(int *)(v217 + 44);
  uint64_t v66 = type metadata accessor for Date();
  uint64_t v178 = v64;
  uint64_t v177 = v65;
  v203 = (char *)v66;
  == infix<A>(_:_:)();
  uint64_t v67 = v207;
  && infix(_:_:)();
  v61(v27, v63);
  v61(v53, v63);
  uint64_t v68 = v206;
  uint64_t v69 = v216;
  uint64_t v179 = v56;
  QueryType.filter(_:)();
  uint64_t v218 = v62;
  v167 = v61;
  v61(v67, v63);
  if (qword_1016374E0 != -1) {
    swift_once();
  }
  uint64_t v70 = sub_10000588C(&qword_10163CF00);
  uint64_t v71 = sub_100010324(v70, (uint64_t)qword_10170F3F8);
  uint64_t v223 = v70;
  v224 = (void *)sub_100062734(&qword_10163CF38, &qword_10163CF00);
  unint64_t v72 = sub_10001D958((uint64_t *)&v221);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v72, v71, v70);
  uint64_t v73 = v212;
  SchemaType.select(_:_:)();
  uint64_t v74 = v213;
  uint64_t v76 = v213 + 8;
  unint64_t v75 = *(void (**)(char *, uint64_t))(v213 + 8);
  v75(v68, v69);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v221);
  uint64_t v223 = v69;
  v224 = &protocol witness table for Table;
  unint64_t v77 = sub_10001D958((uint64_t *)&v221);
  uint64_t v80 = *(void (**)(uint64_t *, char *, uint64_t))(v74 + 16);
  uint64_t v78 = v74 + 16;
  unint64_t v79 = v80;
  v80(v77, v73, v69);
  uint64_t v81 = v204;
  Connection.prepare(_:)();
  if (v81)
  {
    sub_1001A1AD8((uint64_t)v215, v211);
    v75(v73, v69);
LABEL_16:
    (*(void (**)(char *, uint64_t))(v208 + 8))(v219, v205);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v221);
  }
  v162 = v79;
  uint64_t v163 = v71;
  v164 = v75;
  uint64_t v165 = v76;
  uint64_t v213 = v78;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v221);
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v83 = (uint64_t)v197;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  swift_release();
  uint64_t v84 = v201;
  uint64_t v85 = v199;
  int v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v83, 1, v199);
  uint64_t v204 = 0;
  if (v86 == 1)
  {
    sub_10001DAB4(v83, &qword_10163CEA8);
    LOBYTE(v221) = *(unsigned char *)(v220 + 9);
    <- infix<A>(_:_:)();
    sub_10000588C(&qword_10163CF10);
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = xmmword_10134CDD0;
    uint64_t v201 = v87;
    if (qword_101637540 != -1) {
      swift_once();
    }
    sub_100010324(v175, (uint64_t)qword_10170F518);
    uint64_t v88 = MACAddress.data.getter();
    unint64_t v90 = v89;
    v221 = (char *)v88;
    unint64_t v222 = v89;
    <- infix<A>(_:_:)();
    sub_10001CFB8(v88, v90);
    v221 = v215;
    unint64_t v222 = v189;
    <- infix<A>(_:_:)();
    if (qword_101637550 != -1) {
      swift_once();
    }
    uint64_t v91 = v184;
    sub_100010324(v184, (uint64_t)qword_10170F548);
    uint64_t v92 = v220;
    LOBYTE(v221) = *(unsigned char *)(v220 + 32);
    <- infix<A>(_:_:)();
    uint64_t v93 = v216;
    uint64_t v94 = v217;
    if (qword_101637558 != -1) {
      swift_once();
    }
    sub_100010324(v91, (uint64_t)qword_10170F560);
    LOBYTE(v221) = sub_1000D07F4(*(unsigned char *)(v92 + 32) & 0xB);
    <- infix<A>(_:_:)();
    if (qword_101637560 != -1) {
      swift_once();
    }
    sub_100010324(v91, (uint64_t)qword_10170F578);
    LOBYTE(v221) = *(unsigned char *)(v92 + 33);
    <- infix<A>(_:_:)();
    if (qword_101637568 != -1) {
      swift_once();
    }
    uint64_t v95 = sub_10000588C(&qword_10163CF60);
    sub_100010324(v95, (uint64_t)qword_10170F590);
    char v96 = *(unsigned char *)(v92 + 35);
    LOBYTE(v221) = *(unsigned char *)(v92 + 34);
    BYTE1(v221) = v96;
    <- infix<A>(_:_:)();
    v97 = v181;
    if (qword_101637570 != -1) {
      swift_once();
    }
    uint64_t v98 = sub_10000588C(&qword_10163CF68);
    sub_100010324(v98, (uint64_t)qword_10170F5A8);
    LODWORD(v221) = *(_DWORD *)(v92 + 36);
    sub_1001A1AE0();
    <- infix<A>(_:_:)();
    <- infix<A>(_:_:)();
    if (qword_101637588 != -1) {
      swift_once();
    }
    uint64_t v99 = v210;
    sub_100010324(v210, (uint64_t)qword_10170F5F0);
    LOBYTE(v221) = *(unsigned char *)(v92 + *(int *)(v94 + 56));
    <- infix<A>(_:_:)();
    uint64_t v100 = v202;
    if (qword_101637580 != -1) {
      swift_once();
    }
    sub_100010324(v99, (uint64_t)qword_10170F5D8);
    LOBYTE(v221) = 0;
    <- infix<A>(_:_:)();
    v101 = v196;
    QueryType.insert(_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v182);
    uint64_t v102 = v204;
    uint64_t v103 = Connection.run(_:)();
    uint64_t v104 = v208;
    uint64_t v105 = v200;
    if (v102)
    {
      sub_1001A1AD8((uint64_t)v215, v211);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v97, v194);
      v164(v212, v93);
      return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v219, v205);
    }
    v197 = (char *)v103;
    uint64_t v204 = 0;
    (*(void (**)(char *, uint64_t))(v193 + 8))(v97, v194);
    uint64_t v117 = v217;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v195, v83, v85);
    Row.subscript.getter();
    v197 = v221;
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v106 = type metadata accessor for Logger();
    sub_100010324(v106, (uint64_t)qword_10170E858);
    uint64_t v92 = v220;
    uint64_t v107 = v180;
    sub_1001A1C50(v220, v180, type metadata accessor for ObservedAdvertisement);
    uint64_t v108 = v190;
    sub_1001A1C50(v92, v190, type metadata accessor for ObservedAdvertisement);
    uint64_t v109 = (uint64_t)v215;
    uint64_t v110 = v211;
    sub_1001A1790((uint64_t)v215, v211);
    sub_1001A1790(v109, v110);
    v111 = Logger.logObject.getter();
    LODWORD(v196) = static os_log_type_t.info.getter();
    BOOL v112 = os_log_type_enabled(v111, (os_log_type_t)v196);
    uint64_t v113 = v200;
    if (v112)
    {
      uint64_t v114 = swift_slowAlloc();
      uint64_t v182 = swift_slowAlloc();
      v221 = (char *)v182;
      *(_DWORD *)uint64_t v114 = 136315906;
      unint64_t v115 = 0xE800000000000000;
      uint64_t v116 = 0x6E776F6E6B6E752ELL;
      switch(*(unsigned char *)(v107 + 9))
      {
        case 1:
          unint64_t v115 = 0xEA00000000007265;
          uint64_t v116 = 0x747365767261682ELL;
          break;
        case 2:
          unint64_t v115 = 0xED000072656E6E61;
          uint64_t v116 = 0x6353686365656C2ELL;
          break;
        case 3:
          unint64_t v115 = 0xE500000000000000;
          uint64_t v116 = 0x6E7363612ELL;
          break;
        default:
          break;
      }
      uint64_t v225 = sub_1008FA0F0(v116, v115, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A1D4C(v107, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v114 + 12) = 2080;
      uint64_t v118 = (uint64_t)v215;
      uint64_t v119 = Data.hexString.getter();
      uint64_t v225 = sub_1008FA0F0(v119, v120, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v121 = v211;
      sub_1001A1AD8(v118, v211);
      sub_1001A1AD8(v118, v121);
      *(_WORD *)(v114 + 22) = 2080;
      uint64_t v122 = v217;
      uint64_t v123 = v190;
      sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v225 = sub_1008FA0F0(v124, v125, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v126 = v123;
      uint64_t v117 = v122;
      sub_1001A1D4C(v126, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v114 + 32) = 2048;
      uint64_t v225 = (uint64_t)v197;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v196, "ObservedAdvertisement for %s/%s/%salready exists (advId=%lld).", (uint8_t *)v114, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v201 + 8))(v195, v199);
      uint64_t v105 = v200;
      uint64_t v93 = v216;
      uint64_t v92 = v220;
    }
    else
    {

      sub_1001A1D4C(v108, type metadata accessor for ObservedAdvertisement);
      sub_1001A1AD8(v109, v110);
      sub_1001A1AD8(v109, v110);
      sub_1001A1D4C(v107, type metadata accessor for ObservedAdvertisement);
      (*(void (**)(char *, uint64_t))(v201 + 8))(v195, v85);
      uint64_t v93 = v216;
      uint64_t v117 = v217;
      uint64_t v105 = v113;
    }
  }
  uint64_t v127 = v187;
  sub_10001D074(v92 + *(int *)(v117 + 48), v187, &qword_10163CF50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v127, 1, v198) == 1)
  {
    uint64_t v128 = v117;
    sub_10001DAB4(v127, &qword_10163CF50);
    uint64_t v129 = v183;
    uint64_t v130 = v208;
  }
  else
  {
    v131 = v171;
    sub_1001A1CE4(v127, (uint64_t)v171, type metadata accessor for ObservedAdvertisement.Location);
    (*(void (**)(char *, void, uint64_t))(v105 + 104))(v191, enum case for OnConflict.ignore(_:), v192);
    sub_10000588C(&qword_10163CF10);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10134CDE0;
    v221 = v197;
    <- infix<A>(_:_:)();
    if (qword_101637590 != -1) {
      swift_once();
    }
    uint64_t v132 = sub_10000588C(&qword_10163CF18);
    sub_100010324(v132, (uint64_t)qword_10170F608);
    v221 = (char *)*v131;
    <- infix<A>(_:_:)();
    if (qword_101637598 != -1) {
      swift_once();
    }
    sub_100010324(v132, (uint64_t)qword_10170F620);
    v221 = (char *)v131[1];
    <- infix<A>(_:_:)();
    if (qword_1016375A0 != -1) {
      swift_once();
    }
    sub_100010324(v132, (uint64_t)qword_10170F638);
    v221 = (char *)v131[2];
    <- infix<A>(_:_:)();
    uint64_t v133 = v192;
    v134 = v170;
    if (qword_1016375A8 != -1) {
      swift_once();
    }
    sub_100010324(v169, (uint64_t)qword_10170F650);
    <- infix<A>(_:_:)();
    v135 = v191;
    uint64_t v93 = v216;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v135, v133);
    uint64_t v136 = v204;
    Connection.run(_:)();
    uint64_t v128 = v217;
    uint64_t v204 = v136;
    uint64_t v130 = v208;
    if (v136)
    {
      sub_1001A1AD8((uint64_t)v215, v211);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v134, v194);
      sub_1001A1D4C((uint64_t)v131, type metadata accessor for ObservedAdvertisement.Location);
      v164(v212, v93);
      return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v219, v205);
    }
    (*(void (**)(char *, uint64_t))(v193 + 8))(v134, v194);
    sub_1001A1D4C((uint64_t)v131, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v129 = v183;
  }
  uint64_t v137 = v211;
  uint64_t v138 = v220 + *(int *)(v128 + 52);
  uint64_t v139 = v173;
  sub_10001D074(v138, v173, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v139, 1, v129) == 1)
  {
    sub_1001A1AD8((uint64_t)v215, v137);
    v164(v212, v93);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v219, v205);
    return sub_10001DAB4(v139, &qword_10164E760);
  }
  else
  {
    sub_1001A1CE4(v139, v188, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v140 = sub_10000588C(&qword_10163CE70);
    uint64_t v141 = sub_100010324(v140, (uint64_t)qword_10170F410);
    type metadata accessor for UUID();
    v142 = v207;
    uint64_t v220 = v141;
    == infix<A>(_:_:)();
    v143 = v206;
    QueryType.filter(_:)();
    v167(v142, v210);
    v144 = v168;
    QueryType.limit(_:)();
    v145 = v164;
    v164(v143, v93);
    uint64_t v223 = v93;
    v224 = &protocol witness table for Table;
    v146 = sub_10001D958((uint64_t *)&v221);
    v162(v146, v144, v93);
    uint64_t v147 = v204;
    Connection.prepare(_:)();
    if (v147)
    {
      sub_1001A1AD8((uint64_t)v215, v211);
      v145(v144, v93);
      sub_1001A1D4C(v188, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v145(v212, v93);
      goto LABEL_16;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v221);
    uint64_t v148 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    uint64_t v149 = *(void *)(v148 + 16);
    swift_release();
    if (v149)
    {
      uint64_t v218 = v209 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
      uint64_t v150 = v200;
      (*(void (**)(char *, void, uint64_t))(v200 + 104))(v191, enum case for OnConflict.ignore(_:), v192);
      sub_10000588C(&qword_10163CF10);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10134BF90;
      v221 = v197;
      <- infix<A>(_:_:)();
      uint64_t v151 = v188;
      <- infix<A>(_:_:)();
      if (qword_1016374F8 != -1) {
        swift_once();
      }
      sub_100010324(v184, (uint64_t)qword_10170F440);
      uint64_t v152 = v183;
      LOBYTE(v221) = *(unsigned char *)(v151 + *(int *)(v183 + 20));
      <- infix<A>(_:_:)();
      if (qword_1016374F0 != -1) {
        swift_once();
      }
      uint64_t v153 = sub_10000588C(&qword_10163CEC8);
      sub_100010324(v153, (uint64_t)qword_10170F428);
      v221 = *(char **)(v151 + *(int *)(v152 + 24));
      sub_1001A1544();
      <- infix<A>(_:_:)();
      v154 = v166;
      v155 = v191;
      uint64_t v156 = v216;
      QueryType.insert(or:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v150 + 8))(v155, v192);
      Connection.run(_:)();
      v157 = v212;
      v158 = v168;
      v159 = v164;
      sub_1001A1AD8((uint64_t)v215, v211);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v154, v194);
      v159(v158, v156);
      sub_1001A1D4C(v151, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v159(v157, v156);
    }
    else
    {
      sub_1001A1BC4();
      swift_allocError();
      swift_willThrow();
      sub_1001A1AD8((uint64_t)v215, v211);
      v160 = v164;
      v164(v168, v93);
      sub_1001A1D4C(v188, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v160(v212, v93);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v219, v205);
  }
}

uint64_t sub_10017DA20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v44 - v14;
  if (a1)
  {
    sub_10017B2FC(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
      sub_1001A1B70();
      swift_allocError();
      *uint64_t v16 = 0;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
      uint64_t v17 = sub_10017E424((uint64_t)v15, a2);
      uint64_t v48 = v15;
      if (v2)
      {
        if (qword_1016368D8 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_100010324(v18, (uint64_t)qword_10170D7E8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v47 = a1;
          uint64_t v21 = swift_slowAlloc();
          uint64_t v46 = v10;
          uint64_t v22 = (uint8_t *)v21;
          uint64_t v23 = swift_slowAlloc();
          uint64_t v45 = a2;
          uint64_t v24 = (void *)v23;
          *(_DWORD *)uint64_t v22 = 138543362;
          swift_errorRetain();
          uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v51 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v24 = v25;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Purge failed to delete advertisements: %{public}@.", v22, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          a2 = v45;
          swift_slowDealloc();
          uint64_t v10 = v46;
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = (uint64_t)v17;
        if (qword_1016368D8 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100010324(v27, (uint64_t)qword_10170D7E8);
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        int v30 = v29;
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v31 = swift_slowAlloc();
          uint64_t v45 = a2;
          uint64_t v32 = v31;
          uint64_t v47 = swift_slowAlloc();
          uint64_t v51 = v47;
          *(_DWORD *)uint64_t v32 = 134218242;
          uint64_t v49 = v26;
          v44[2] = &v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 2082;
          v44[1] = v32 + 14;
          sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          LODWORD(v46) = v30;
          uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v49 = sub_1008FA0F0(v33, v34, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v46, "Purge deleted %ld advertisements older than %{public}s.", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          a2 = v45;
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        }
      }
      uint64_t v35 = sub_10017E954(a2);
      if (qword_1016368D8 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100010324(v36, (uint64_t)qword_10170D7E8);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v47 = v26;
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 134217984;
        uint64_t v26 = v47;
        uint64_t v51 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Purge deleted %ld reconciled advertisements.", v39, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v40 = v10 + 8;
      v41(v48, v9);
      BOOL v42 = __OFADD__(v26, v35);
      uint64_t v3 = v26 + v35;
      if (v42)
      {
        __break(1u);

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v9);
      }
    }
  }
  else
  {
    sub_10017E2BC();
    if (!v2) {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_10017E2BC()
{
  return sub_10019D830();
}

uint64_t sub_10017E334()
{
  return sub_10019F46C();
}

uint64_t sub_10017E3AC()
{
  return sub_10019E634();
}

char *sub_10017E424(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v38 = (char *)&v33 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v36 = (char *)&v33 - v13;
  uint64_t v14 = type metadata accessor for Table();
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Delete();
  uint64_t v42 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v39 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1009FCF40();
  if (v19)
  {
    uint64_t v20 = sub_10017EF64(v19, a2);
    if (v2)
    {
      swift_release();
    }
    else
    {
      uint64_t v21 = v20;
      uint64_t v33 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_101637578 != -1) {
        swift_once();
      }
      uint64_t v34 = v17;
      uint64_t v35 = v4;
      uint64_t v22 = sub_10000588C(&qword_10163CE98);
      sub_100010324(v22, (uint64_t)qword_10170F5C0);
      type metadata accessor for Date();
      < infix<A>(_:_:)();
      uint64_t v45 = v21;
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_10000588C(&qword_10163CF00);
      sub_100010324(v23, (uint64_t)qword_10170F3F8);
      sub_10000588C(&qword_10163CF88);
      sub_100062734(&qword_10163CF90, &qword_10163CF88);
      Collection<>.contains(_:)();
      swift_bridgeObjectRelease();
      char v44 = 0;
      uint64_t v24 = v38;
      == infix<A>(_:_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v43 + 8);
      uint64_t v26 = v7;
      uint64_t v27 = v35;
      v25(v26, v35);
      uint64_t v28 = v36;
      && infix(_:_:)();
      v25(v24, v27);
      v25(v12, v27);
      uint64_t v29 = v41;
      QueryType.filter(_:)();
      v25(v28, v27);
      int v30 = v39;
      QueryType.delete()();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v29);
      uint64_t v16 = (char *)Connection.run(_:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v34);
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = 2;
    *(unsigned char *)(v31 + 4) = 1;
    swift_willThrow();
  }
  return v16;
}

uint64_t sub_10017E954(uint64_t a1)
{
  uint64_t v40 = sub_10000588C(&qword_10163CE68);
  os_log_type_t v38 = *(void (**)(char *, uint64_t))(v40 - 8);
  uint64_t v3 = __chkstk_darwin(v40);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v32 - v6;
  uint64_t v8 = type metadata accessor for Delete();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Table();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v47 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v32 - v14;
  uint64_t v16 = sub_1009FCF40();
  if (v16)
  {
    uint64_t v17 = sub_10017EF64(v16, a1);
    if (v1)
    {
      swift_release();
    }
    else
    {
      uint64_t v35 = v7;
      uint64_t v36 = v17;
      uint64_t v37 = (void (*)(char *, uint64_t))(a1
                                                 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_10000588C(&qword_10163CF00);
      v32[1] = sub_100010324(v18, (uint64_t)qword_10170F3F8);
      uint64_t v45 = v18;
      uint64_t v46 = sub_100062734(&qword_10163CF38, &qword_10163CF00);
      sub_10001D958(&v43);
      QueryType.subscript.getter();
      SchemaType.select(_:_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v43);
      Swift::String v19 = Expressible.asSQL()();
      object = v19._object;
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
      v32[2] = v11 + 8;
      uint64_t v37 = v20;
      v20(v15, v10);
      v32[0] = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      uint64_t v43 = v36;
      sub_10000588C(&qword_10163CF88);
      sub_100062734(&qword_10163CF90, &qword_10163CF88);
      Collection<>.contains(_:)();
      swift_bridgeObjectRelease();
      LOBYTE(v43) = 0;
      uint64_t v21 = v35;
      == infix<A>(_:_:)();
      uint64_t v22 = (void (*)(char *, uint64_t))*((void *)v38 + 1);
      uint64_t v23 = v5;
      uint64_t v24 = v40;
      v22(v23, v40);
      os_log_type_t v38 = v22;
      QueryType.filter(_:)();
      v22(v21, v24);
      uint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      uint64_t v43 = 0xD000000000000028;
      unint64_t v44 = 0x80000001013F43B0;
      v25._uint64_t countAndFlagsBits = countAndFlagsBits;
      v25._object = object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      sub_100062734(&qword_10163CFC8, &qword_10163CE68);
      ExpressionType.init(literal:)();
      uint64_t v27 = v47;
      QueryType.filter(_:)();
      v38(v21, v24);
      uint64_t v28 = v37;
      v37(v27, v10);
      uint64_t v29 = v39;
      QueryType.delete()();
      v28(v15, v10);
      uint64_t v11 = Connection.run(_:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v30 = 2;
    *(unsigned char *)(v30 + 4) = 1;
    swift_willThrow();
  }
  return v11;
}

uint64_t sub_10017EF64(uint64_t a1, uint64_t a2)
{
  uint64_t v258 = a1;
  uint64_t v216 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v214 = (char *)v186 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = sub_10000588C(&qword_10163CF98);
  uint64_t v221 = *(void *)(v249 - 8);
  __chkstk_darwin(v249);
  v244 = (char *)v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  v243 = (char *)v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = type metadata accessor for Date();
  uint64_t v220 = *(char **)(v242 - 8);
  uint64_t v7 = __chkstk_darwin(v242);
  v235 = (char *)v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v241 = (char *)v186 - v9;
  uint64_t v253 = sub_10000588C(&qword_10163CF00);
  v219 = *(char **)(v253 - 8);
  uint64_t v10 = __chkstk_darwin(v253);
  v246 = (char *)v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v228 = (char *)v186 - v13;
  __chkstk_darwin(v12);
  v227 = (char *)v186 - v14;
  uint64_t v233 = sub_10000588C(&qword_10163CE68);
  uint64_t v218 = *(void (***)(char *, uint64_t))(v233 - 8);
  __chkstk_darwin(v233);
  v232 = (char *)v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = type metadata accessor for UUID();
  uint64_t v217 = *(void *)(v240 - 8);
  uint64_t v16 = __chkstk_darwin(v240);
  v234 = (char *)v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v254 = (char *)v186 - v18;
  uint64_t v19 = type metadata accessor for Row();
  uint64_t v251 = *(void *)(v19 - 8);
  uint64_t v252 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  v248 = (char *)v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v250 = (char *)v186 - v22;
  uint64_t v23 = sub_10000588C(&qword_10163CEA8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  v247 = (char *)v186 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v229 = (char *)v186 - v26;
  uint64_t v27 = type metadata accessor for Table();
  uint64_t v238 = *(void *)(v27 - 8);
  uint64_t v28 = __chkstk_darwin(v27);
  v231 = (char *)v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  v226 = (char *)v186 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v225 = (char *)v186 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v230 = (char *)v186 - v35;
  __chkstk_darwin(v34);
  v237 = (char *)v186 - v36;
  uint64_t v236 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v239 = *(void *)(v236 - 8);
  uint64_t v37 = __chkstk_darwin(v236);
  v224 = (char *)v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v222 = (char *)v186 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v223 = (char *)v186 - v42;
  __chkstk_darwin(v41);
  v245 = (char *)v186 - v43;
  v259 = sub_10000588C(&qword_10163CFA0);
  Class isa = v259[-1].isa;
  uint64_t v45 = __chkstk_darwin(v259);
  uint64_t v47 = (void (**)(char *, uint64_t))((char *)v186 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)v186 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)v186 - v51;
  uint64_t v53 = type metadata accessor for ContinuousClock();
  uint64_t v54 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v56 = (char *)v186 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContinuousClock.init()();
  uint64_t v255 = a2;
  uint64_t v57 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v256 = v27;
  SchemaType.count.getter();
  uint64_t v58 = v257;
  Connection.scalar<A>(_:)();
  if (v58)
  {
    (*((void (**)(char *, NSObject *))isa + 1))(v52, v259);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  }
  else
  {
    uint64_t v210 = v47;
    uint64_t v211 = v57;
    uint64_t v213 = v56;
    uint64_t v212 = v53;
    uint64_t v257 = v54;
    uint64_t v60 = (void (*)(char *, NSObject *))*((void *)isa + 1);
    v60(v52, v259);
    uint64_t v61 = v261;
    uint64_t v62 = v255;
    uint64_t v63 = v256;
    SchemaType.count.getter();
    Connection.scalar<A>(_:)();
    uint64_t v209 = v61;
    v60(v50, v259);
    uint64_t v64 = v261;
    uint64_t v65 = (v62 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo);
    uint64_t v66 = v210;
    SchemaType.count.getter();
    Connection.scalar<A>(_:)();
    uint64_t v255 = 0;
    v60((char *)v66, v259);
    uint64_t v67 = v261;
    if (qword_1016368D8 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    uint64_t v207 = sub_100010324(v68, (uint64_t)qword_10170D7E8);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    v259 = v65;
    uint64_t v72 = v209;
    if (v71)
    {
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 134218496;
      uint64_t v261 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 12) = 2048;
      uint64_t v261 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 22) = 2048;
      uint64_t v261 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "rowCounts: %ld/%ld/%ld", (uint8_t *)v73, 0x20u);
      swift_slowDealloc();
    }

    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Gathering high-value owned observations.", v76, 2u);
      swift_slowDealloc();
    }

    v264 = &_swiftEmptySetSingleton;
    ContinuousClock.now.getter();
    uint64_t v77 = v239;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v78 = sub_10000588C(&qword_10163CE70);
    uint64_t v79 = sub_100010324(v78, (uint64_t)qword_10170F410);
    uint64_t v262 = v78;
    v263 = (void *)sub_100062734(&qword_10163CFA8, &qword_10163CE70);
    uint64_t v80 = sub_10001D958(&v261);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v78 - 8) + 16))(v80, v79, v78);
    uint64_t v81 = v237;
    SchemaType.select(distinct:_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
    uint64_t v262 = v63;
    v263 = &protocol witness table for Table;
    uint64_t v82 = sub_10001D958(&v261);
    uint64_t v83 = v238;
    uint64_t v84 = v238 + 16;
    uint64_t v85 = *(void (**)(uint64_t *, char *, uint64_t))(v238 + 16);
    v85(v82, v81, v63);
    uint64_t v86 = v255;
    Connection.prepare(_:)();
    uint64_t v255 = v86;
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v63);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v245, v236);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v257 + 8))(v213, v212);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
    }
    else
    {
      uint64_t v192 = (void (*)(uint64_t *, NSObject *, uint64_t))v85;
      uint64_t v193 = v84;
      uint64_t v194 = v79;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
      uint64_t v87 = dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      swift_retain();
      uint64_t v88 = v229;
      uint64_t v200 = v87;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v89 = v251;
      unint64_t v90 = *(unsigned int (**)(void, void, void))(v251 + 48);
      uint64_t v209 = v251 + 48;
      uint64_t v208 = (uint64_t (*)(char *, uint64_t, uint64_t))v90;
      if (v90(v88, 1, v252) == 1)
      {
        uint64_t v91 = v77;
        uint64_t v92 = v236;
LABEL_16:
        uint64_t v93 = v91;
        swift_release();
        uint64_t v94 = v223;
        uint64_t v95 = v213;
        ContinuousClock.now.getter();
        char v96 = v264;
        uint64_t v97 = v93;
        uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
        uint64_t v99 = v222;
        v98(v222, v245, v92);
        v98(v224, v94, v92);
        swift_bridgeObjectRetain();
        uint64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.default.getter();
        int v102 = v101;
        v259 = v100;
        uint64_t v103 = v92;
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v104 = swift_slowAlloc();
          LODWORD(v254) = v102;
          uint64_t v105 = v104;
          uint64_t v106 = swift_slowAlloc();
          uint64_t v258 = v106;
          *(_DWORD *)uint64_t v105 = 134218242;
          uint64_t v260 = v96[2];
          uint64_t v261 = v106;
          uint64_t v107 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v105 + 12) = 2082;
          uint64_t v253 = v105 + 14;
          uint64_t v108 = v99;
          uint64_t v109 = v214;
          static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
          sub_1001A1E54(&qword_101653DE0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
          uint64_t v110 = v224;
          uint64_t v111 = static Duration.description<A>(_:_:units:)();
          unint64_t v113 = v112;
          (*(void (**)(char *, uint64_t))(v215 + 8))(v109, v216);
          uint64_t v260 = sub_1008FA0F0(v111, v113, &v261);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v114 = v257;
          unint64_t v115 = *(void (**)(char *, uint64_t))(v107 + 8);
          v115(v108, v103);
          v115(v110, v103);
          uint64_t v116 = v259;
          _os_log_impl((void *)&_mh_execute_header, v259, (os_log_type_t)v254, "Found high-value owned observations count: %ld. Duration: %{public}s", (uint8_t *)v105, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          v115(v223, v103);
          (*(void (**)(char *, uint64_t))(v238 + 8))(v237, v256);
          v115(v245, v103);
          (*(void (**)(char *, uint64_t))(v114 + 8))(v213, v212);
        }
        else
        {

          uint64_t v183 = *(void (**)(char *, uint64_t))(v97 + 8);
          v183(v99, v92);
          v183(v224, v92);
          swift_release();
          swift_bridgeObjectRelease();
          v183(v94, v92);
          (*(void (**)(char *, uint64_t))(v238 + 8))(v237, v256);
          v183(v245, v92);
          (*(void (**)(char *, uint64_t))(v257 + 8))(v95, v212);
        }
        swift_beginAccess();
        return (uint64_t)v264;
      }
      else
      {
        uint64_t v119 = *(void (**)(void, void, void))(v89 + 32);
        uint64_t v118 = v89 + 32;
        uint64_t v117 = (void (*)(char *, char *, uint64_t))v119;
        uint64_t v210 = (void (**)(char *, uint64_t))(v219 + 8);
        uint64_t v190 = (char **)(v218 + 1);
        v186[0] = v219 + 16;
        uint64_t v188 = (void (**)(char *, uint64_t))(v238 + 8);
        v203 = (void (**)(char *, uint64_t))(v221 + 8);
        uint64_t v202 = (unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48);
        uint64_t v198 = (void (**)(char *, char *, uint64_t))(v220 + 32);
        v197 = (void (**)(char *, char *, uint64_t))(v217 + 16);
        v196 = (void (**)(char *, char *, uint64_t))(v220 + 16);
        v195 = (void (**)(char *, uint64_t))(v220 + 8);
        uint64_t v201 = (void (**)(char *, uint64_t))(v217 + 8);
        uint64_t v218 = (void (**)(char *, uint64_t))(v118 - 24);
        unint64_t v120 = &qword_101637000;
        *((void *)&v121 + 1) = 2;
        long long v189 = xmmword_101342130;
        *(void *)&long long v121 = 141558787;
        long long v187 = v121;
        v186[1] = (char *)&type metadata for Any + 8;
        uint64_t v122 = v250;
        uint64_t v123 = v252;
        uint64_t v251 = v118;
        v206 = v119;
        while (1)
        {
          v117(v122, v88, v123);
          Row.subscript.getter();
          uint64_t v124 = v256;
          uint64_t v262 = v256;
          v263 = &protocol witness table for Table;
          unint64_t v125 = sub_10001D958(&v261);
          v192(v125, v259, v124);
          if (v120[156] != -1) {
            swift_once();
          }
          uint64_t v126 = v253;
          uint64_t v127 = sub_100010324(v253, (uint64_t)qword_10170F3F8);
          uint64_t v128 = v227;
          QueryType.subscript.getter();
          uint64_t v129 = v228;
          uint64_t v221 = v127;
          QueryType.subscript.getter();
          uint64_t v130 = v232;
          == infix<A>(_:_:)();
          v131 = (char *)*v210;
          (*v210)(v129, v126);
          uint64_t v220 = v131;
          ((void (*)(char *, uint64_t))v131)(v128, v126);
          QueryType.join(_:on:)();
          v219 = *v190;
          ((void (*)(char *, uint64_t))v219)(v130, v233);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
          uint64_t v132 = v124;
          if (qword_101637578 != -1) {
            swift_once();
          }
          uint64_t v133 = sub_10000588C(&qword_10163CE98);
          uint64_t v134 = sub_100010324(v133, (uint64_t)qword_10170F5C0);
          uint64_t v262 = v249;
          v263 = (void *)sub_100062734(&qword_10163CFB0, &qword_10163CF98);
          sub_10001D958(&v261);
          uint64_t v135 = sub_100062734(&qword_10163CEA0, &qword_10163CE98);
          uint64_t v217 = v133;
          uint64_t v204 = v135;
          uint64_t v205 = v134;
          ExpressionType<>.max.getter();
          sub_10000588C(&qword_10163CE90);
          uint64_t v136 = swift_allocObject();
          *(_OWORD *)(v136 + 16) = v189;
          uint64_t v137 = v253;
          (*(void (**)(char *, uint64_t, uint64_t))v186[0])(v128, v221, v253);
          *(void *)(v136 + 56) = v137;
          *(void *)(v136 + 64) = sub_100062734(&qword_10163CF38, &qword_10163CF00);
          sub_10001D958((uint64_t *)(v136 + 32));
          QueryType.subscript.getter();
          ((void (*)(char *, uint64_t))v220)(v128, v137);
          uint64_t v138 = v226;
          uint64_t v139 = v231;
          SchemaType.select(_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v140 = *v188;
          (*v188)(v139, v132);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
          uint64_t v141 = v232;
          v142 = v254;
          == infix<A>(_:_:)();
          v143 = v225;
          QueryType.where(_:)();
          ((void (*)(char *, uint64_t))v219)(v141, v233);
          uint64_t v199 = v140;
          v140(v138, v132);
          uint64_t v144 = swift_allocObject();
          *(_OWORD *)(v144 + 16) = v189;
          if (qword_101637558 != -1) {
            swift_once();
          }
          uint64_t v145 = sub_10000588C(&qword_10163CE78);
          uint64_t v146 = sub_100010324(v145, (uint64_t)qword_10170F560);
          *(void *)(v144 + 56) = v145;
          *(void *)(v144 + 64) = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
          uint64_t v147 = sub_10001D958((uint64_t *)(v144 + 32));
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v145 - 8) + 16))(v147, v146, v145);
          uint64_t v148 = v230;
          QueryType.group(_:)();
          swift_bridgeObjectRelease();
          uint64_t v149 = v199;
          v199(v143, v132);
          uint64_t v262 = v132;
          v263 = &protocol witness table for Table;
          uint64_t v150 = sub_10001D958(&v261);
          v192(v150, v148, v132);
          uint64_t v151 = v255;
          Connection.prepare(_:)();
          uint64_t v255 = v151;
          uint64_t v152 = v132;
          uint64_t v153 = v245;
          v154 = v248;
          if (v151)
          {
            swift_release();
            v149(v148, v132);
            (*v201)(v142, v240);
            (*v218)(v250, v252);
            v149(v237, v132);
            (*(void (**)(char *, uint64_t))(v239 + 8))(v153, v236);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v257 + 8))(v213, v212);
            swift_release();
            return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v261);
          uint64_t v155 = dispatch thunk of _AnySequenceBox._makeIterator()();
          swift_release();
          swift_retain();
          uint64_t v156 = v247;
          v219 = (char *)v155;
          dispatch thunk of _AnyIteratorBoxBase.next()();
          v157 = v156;
          uint64_t v158 = v252;
          int v159 = v208(v156, 1, v252);
          uint64_t v122 = v250;
          if (v159 != 1) {
            break;
          }
LABEL_27:
          swift_release();
          v199(v230, v152);
          (*v201)(v142, v240);
          (*v218)(v122, v158);
          swift_release();
          uint64_t v88 = v229;
          dispatch thunk of _AnyIteratorBoxBase.next()();
          int v160 = v208(v88, 1, v158);
          uint64_t v123 = v158;
          uint64_t v91 = v239;
          uint64_t v92 = v236;
          uint64_t v117 = (void (*)(char *, char *, uint64_t))v206;
          unint64_t v120 = &qword_101637000;
          if (v160 == 1) {
            goto LABEL_16;
          }
        }
        uint64_t v161 = v246;
        while (1)
        {
          v206(v154, v157, v158);
          QueryType.subscript.getter();
          uint64_t v166 = v255;
          Row.get<A>(_:)();
          if (v166) {
            break;
          }
          ((void (*)(char *, uint64_t))v220)(v161, v253);
          uint64_t v167 = v261;
          uint64_t v168 = v242;
          uint64_t v169 = v244;
          ExpressionType<>.max.getter();
          v170 = v243;
          Row.get<A>(_:)();
          uint64_t v255 = 0;
          (*v203)(v169, v249);
          if ((*v202)(v170, 1, v168) == 1)
          {
            v162 = v248;
            uint64_t v158 = v252;
            (*v218)(v248, v252);
            uint64_t v163 = (uint64_t)v170;
            v154 = v162;
            sub_10001DAB4(v163, (uint64_t *)&unk_10163AC90);
          }
          else
          {
            v171 = v241;
            (*v198)(v241, v170, v168);
            sub_100DCCA90(&v261, v167);
            uint64_t v172 = v234;
            uint64_t v173 = v240;
            (*v197)(v234, v254, v240);
            uint64_t v174 = v235;
            (*v196)(v235, v171, v168);
            uint64_t v175 = Logger.logObject.getter();
            os_log_type_t v176 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v175, v176))
            {
              uint64_t v177 = swift_slowAlloc();
              uint64_t v191 = swift_slowAlloc();
              uint64_t v261 = v191;
              *(_DWORD *)uint64_t v177 = v187;
              *(void *)(v177 + 4) = 1752392040;
              *(_WORD *)(v177 + 12) = 2081;
              sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v178 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v177 + 14) = sub_1008FA0F0(v178, v179, &v261);
              swift_bridgeObjectRelease();
              (*v201)(v172, v173);
              *(_WORD *)(v177 + 22) = 2080;
              sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
              uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v177 + 24) = sub_1008FA0F0(v180, v181, &v261);
              swift_bridgeObjectRelease();
              uint64_t v182 = *v195;
              (*v195)(v174, v168);
              *(_WORD *)(v177 + 32) = 2048;
              *(void *)(v177 + 34) = v167;
              _os_log_impl((void *)&_mh_execute_header, v175, v176, "Adding high-value Owned Observations for beacon: %{private,mask.hash}s, scanDate: %s, advId: %lld.", (uint8_t *)v177, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v152 = v256;
              swift_slowDealloc();
            }
            else
            {

              uint64_t v182 = *v195;
              (*v195)(v174, v168);
              (*v201)(v172, v173);
            }
            v182(v241, v168);
            v154 = v248;
            uint64_t v158 = v252;
            (*v218)(v248, v252);
          }
          v142 = v254;
          uint64_t v122 = v250;
          v164 = v247;
          dispatch thunk of _AnyIteratorBoxBase.next()();
          v157 = v164;
          int v165 = v208(v164, 1, v158);
          uint64_t v161 = v246;
          if (v165 == 1) {
            goto LABEL_27;
          }
        }
        swift_release();
        swift_release();
        ((void (*)(char *, uint64_t))v220)(v161, v253);
        uint64_t v184 = *v218;
        (*v218)(v154, v158);
        unint64_t v185 = v199;
        v199(v230, v152);
        (*v201)(v254, v240);
        v184(v122, v158);
        v185(v237, v152);
        (*(void (**)(char *, uint64_t))(v239 + 8))(v245, v236);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v257 + 8))(v213, v212);
        swift_release();
        return swift_release();
      }
    }
  }
}

uint64_t sub_100181384(uint64_t a1, uint64_t a2)
{
  v2[33] = a1;
  v2[34] = a2;
  uint64_t v3 = sub_10000588C(&qword_10163CE98);
  v2[35] = v3;
  v2[36] = *(void *)(v3 - 8);
  v2[37] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163CF00);
  v2[38] = v4;
  v2[39] = *(void *)(v4 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for JoinType();
  v2[42] = v5;
  v2[43] = *(void *)(v5 - 8);
  v2[44] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[45] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[46] = v6;
  v2[47] = *(void *)(v6 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  sub_10000588C(&qword_10163CEA8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Row();
  v2[52] = v7;
  v2[53] = *(void *)(v7 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10163CE68);
  v2[56] = v8;
  v2[57] = *(void *)(v8 - 8);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Table();
  v2[61] = v9;
  v2[62] = *(void *)(v9 - 8);
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Delete();
  v2[70] = v10;
  v2[71] = *(void *)(v10 - 8);
  v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  return _swift_task_switch(sub_1001817EC, 0, 0);
}

uint64_t sub_1001817EC()
{
  if (sub_1009FCF40())
  {
    *(void *)(v0 + 256) = *(void *)(v0 + 264);
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 552);
    uint64_t v2 = *(void *)(v0 + 488);
    uint64_t v154 = *(void *)(v0 + 496);
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v148 = *(void *)(v0 + 448);
    uint64_t v140 = sub_10000588C(&qword_10163CE70);
    uint64_t v6 = sub_100010324(v140, (uint64_t)qword_10170F410);
    sub_10000588C((uint64_t *)&unk_1016636E0);
    sub_100062734(&qword_10163D080, (uint64_t *)&unk_1016636E0);
    uint64_t v147 = v6;
    Collection<>.contains(_:)();
    *(unsigned char *)(v0 + 592) = 0;
    == infix<A>(_:_:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v4, v148);
    QueryType.filter(_:)();
    uint64_t v8 = v3;
    uint64_t v9 = v7;
    v7(v8, v148);
    QueryType.delete()();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
    v10(v1, v2);
    uint64_t v152 = 0;
    uint64_t v134 = v9;
    uint64_t v112 = Connection.run(_:)();
    uint64_t v145 = v10;
    uint64_t v12 = (uint64_t *)(v0 + 96);
    uint64_t v149 = (uint64_t *)(v0 + 136);
    if (qword_101637510 != -1) {
      goto LABEL_52;
    }
    while (1)
    {
      uint64_t v137 = *(void *)(v0 + 552);
      uint64_t v141 = *(void *)(v0 + 544);
      uint64_t v13 = *(void *)(v0 + 488);
      uint64_t v146 = *(void *)(v0 + 496);
      uint64_t v14 = sub_10000588C(&qword_10163CE78);
      uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170F488);
      *(void *)(v0 + 120) = v14;
      uint64_t v16 = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
      *(void *)(v0 + 128) = v16;
      uint64_t v17 = sub_10001D958(v12);
      uint64_t v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
      v18(v17, v15, v14);
      SchemaType.select(_:_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
      sub_10000588C(&qword_10163CE90);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_101342130;
      *(void *)(v19 + 56) = v14;
      *(void *)(v19 + 64) = v16;
      uint64_t v20 = sub_10001D958((uint64_t *)(v19 + 32));
      v18(v20, v15, v14);
      QueryType.group(_:)();
      swift_bridgeObjectRelease();
      v145(v137, v13);
      *(void *)(v0 + 160) = v13;
      *(void *)(v0 + 168) = &protocol witness table for Table;
      uint64_t v21 = sub_10001D958(v149);
      uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v146 + 16);
      v22(v21, v141, v13);
      Connection.prepare(_:)();
      if (v152)
      {
        uint64_t v23 = *(void *)(v0 + 584);
        uint64_t v24 = *(void *)(v0 + 568);
        uint64_t v25 = *(void *)(v0 + 560);
        uint64_t v26 = *(void *)(v0 + 544);
        uint64_t v27 = *(void *)(v0 + 488);
        swift_release();
        v145(v26, v27);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v149);
        goto LABEL_34;
      }
      uint64_t v133 = v22;
      uint64_t v135 = (uint64_t *)(v0 + 176);
      uint64_t v138 = (uint64_t *)(v0 + 16);
      uint64_t v29 = *(void *)(v0 + 416);
      uint64_t v28 = *(void *)(v0 + 424);
      uint64_t v30 = *(void *)(v0 + 408);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v149);
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      sub_1000B700C(0, 0, 0);
      swift_retain();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      if (v150(v30, 1, v29) != 1)
      {
        uint64_t v40 = *(void *)(v0 + 424);
        uint64_t v41 = *(void (**)(uint64_t, void, uint64_t))(v40 + 32);
        do
        {
          uint64_t v42 = *(void *)(v0 + 440);
          uint64_t v43 = *(void *)(v0 + 416);
          v41(v42, *(void *)(v0 + 408), v43);
          sub_1001A1448();
          Row.subscript.getter();
          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v43);
          char v44 = *(unsigned char *)(v0 + 594);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B700C(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v46 = _swiftEmptyArrayStorage[2];
          unint64_t v45 = _swiftEmptyArrayStorage[3];
          if (v46 >= v45 >> 1) {
            sub_1000B700C(v45 > 1, v46 + 1, 1);
          }
          uint64_t v48 = *(void *)(v0 + 408);
          uint64_t v47 = *(void *)(v0 + 416);
          _swiftEmptyArrayStorage[2] = v46 + 1;
          *((unsigned char *)&_swiftEmptyArrayStorage[4] + v46) = v44;
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }
        while (v150(v48, 1, v47) != 1);
      }
      uint64_t v31 = *(void *)(v0 + 552);
      uint64_t v142 = *(void *)(v0 + 536);
      uint64_t v32 = *(void *)(v0 + 488);
      uint64_t v33 = *(void *)(v0 + 408);
      swift_release();
      sub_10001DAB4(v33, &qword_10163CEA8);
      *(void *)(v0 + 200) = v140;
      uint64_t v34 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
      *(void *)(v0 + 208) = v34;
      uint64_t v35 = sub_10001D958(v135);
      uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16);
      v36(v35, v147, v140);
      SchemaType.select(_:_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v135);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_101342130;
      *(void *)(v37 + 56) = v140;
      *(void *)(v37 + 64) = v34;
      uint64_t v38 = sub_10001D958((uint64_t *)(v37 + 32));
      v36(v38, v147, v140);
      QueryType.group(_:)();
      swift_bridgeObjectRelease();
      v145(v31, v32);
      *(void *)(v0 + 40) = v32;
      *(void *)(v0 + 48) = &protocol witness table for Table;
      uint64_t v39 = sub_10001D958(v138);
      v133(v39, v142, v32);
      Connection.prepare(_:)();
      uint64_t v49 = *(void *)(v0 + 416);
      uint64_t v50 = *(void *)(v0 + 400);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v138);
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      uint64_t v155 = _swiftEmptyArrayStorage;
      sub_1000B7034(0, 0, 0);
      swift_retain();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      unsigned int v51 = v150(v50, 1, v49);
      if (v51 == 1)
      {
        uint64_t v52 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v86 = *(void *)(v0 + 424);
        uint64_t v87 = *(void *)(v0 + 376);
        uint64_t v144 = *(void (**)(uint64_t, void, uint64_t))(v86 + 32);
        uint64_t v52 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v88 = *(void *)(v0 + 432);
          uint64_t v89 = *(void *)(v0 + 416);
          v144(v88, *(void *)(v0 + 400), v89);
          Row.subscript.getter();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v88, v89);
          unint64_t v90 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7034(0, v52[2] + 1, 1);
            unint64_t v90 = v155;
          }
          unint64_t v92 = v90[2];
          unint64_t v91 = v90[3];
          if (v92 >= v91 >> 1)
          {
            sub_1000B7034(v91 > 1, v92 + 1, 1);
            unint64_t v90 = v155;
          }
          uint64_t v93 = *(void *)(v0 + 416);
          uint64_t v94 = *(void *)(v0 + 392);
          uint64_t v95 = *(void *)(v0 + 400);
          uint64_t v96 = *(void *)(v0 + 368);
          v90[2] = v92 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 32))((unint64_t)v90+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v92, v94, v96);
          uint64_t v155 = v90;
          uint64_t v52 = v90;
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }
        while (v150(v95, 1, v93) != 1);
      }
      uint64_t v53 = *(void *)(v0 + 400);
      swift_release();
      uint64_t result = sub_10001DAB4(v53, &qword_10163CEA8);
      uint64_t v106 = v52[2];
      uint64_t v111 = v52;
      if (!v106) {
        break;
      }
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      uint64_t v128 = (uint64_t *)(v0 + 216);
      uint64_t v129 = (uint64_t *)(v0 + 56);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v115 = v57 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
      uint64_t v58 = *(void *)(v0 + 376);
      uint64_t v109 = (char *)v52 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      uint64_t v108 = (void (**)(void, void, void))(v58 + 32);
      uint64_t v59 = *(void *)(v0 + 344);
      uint64_t v127 = (void (**)(uint64_t, uint64_t))(v59 + 8);
      unint64_t v113 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
      uint64_t v114 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 312) + 8);
      uint64_t v116 = (void (**)(void, void))(*(void *)(v0 + 568) + 8);
      uint64_t v110 = v58;
      uint64_t v107 = (uint64_t (**)(void, void))(v58 + 8);
      uint64_t v60 = v145;
      uint64_t v132 = v57 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
      uint64_t v130 = (void (**)(uint64_t, void, uint64_t))(v59 + 104);
      unsigned int v131 = enum case for JoinType.leftOuter(_:);
      while (1)
      {
        if (v56 >= v52[2])
        {
          __break(1u);
          goto LABEL_54;
        }
        unint64_t v63 = v56;
        uint64_t v64 = *(void *)(v0 + 360);
        uint64_t v65 = *(void *)(v0 + 368);
        (*(void (**)(uint64_t, char *, uint64_t))(v110 + 16))(v64, &v109[*(void *)(v110 + 72) * v56], v65);
        uint64_t v105 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56);
        v105(v64, 0, 1, v65);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v64, 1, v65) == 1)
        {
          uint64_t v125 = v55;
          goto LABEL_45;
        }
        (*v108)(*(void *)(v0 + 384), *(void *)(v0 + 360), *(void *)(v0 + 368));
        uint64_t v66 = v132;
        uint64_t v67 = v131;
        uint64_t v117 = _swiftEmptyArrayStorage[2];
        if (v117) {
          break;
        }
LABEL_22:
        unint64_t v61 = v63 + 1;
        uint64_t result = (*v107)(*(void *)(v0 + 384), *(void *)(v0 + 368));
        BOOL v62 = v61 == v106;
        unint64_t v56 = v61;
        uint64_t v52 = v111;
        if (v62)
        {
          uint64_t v125 = v55;
          v105(*(void *)(v0 + 360), 1, 1, *(void *)(v0 + 368));
          goto LABEL_45;
        }
      }
      unint64_t v104 = v63;
      uint64_t v68 = *v130;
      swift_retain();
      uint64_t v69 = 0;
      uint64_t v126 = v68;
      while (1)
      {
        uint64_t v124 = v55;
        uint64_t v70 = *(void *)(v0 + 488);
        uint64_t v118 = v69;
        char v123 = *((unsigned char *)&_swiftEmptyArrayStorage[4] + v69);
        v68(*(void *)(v0 + 352), v67, *(void *)(v0 + 336));
        *(void *)(v0 + 240) = v70;
        *(void *)(v0 + 248) = &protocol witness table for Table;
        BOOL v71 = sub_10001D958(v128);
        v133(v71, v66, v70);
        if (qword_1016375C8 != -1) {
          swift_once();
        }
        uint64_t v153 = *(void *)(v0 + 512);
        uint64_t v143 = *(void *)(v0 + 504);
        uint64_t v72 = *(void *)(v0 + 488);
        uint64_t v136 = *(void *)(v0 + 480);
        uint64_t v121 = *(void *)(v0 + 472);
        uint64_t v122 = *(void *)(v0 + 464);
        uint64_t v151 = *(void *)(v0 + 448);
        uint64_t v73 = *(void *)(v0 + 328);
        uint64_t v139 = *(void *)(v0 + 352);
        uint64_t v140 = *(void *)(v0 + 336);
        uint64_t v74 = *(void *)(v0 + 320);
        uint64_t v75 = *(void *)(v0 + 304);
        sub_100010324(v75, (uint64_t)qword_10170F6B0);
        QueryType.subscript.getter();
        QueryType.subscript.getter();
        == infix<A>(_:_:)();
        uint64_t v76 = *v114;
        uint64_t v119 = *v114;
        (*v114)(v74, v75);
        v76(v73, v75);
        QueryType.join(_:_:on:)();
        v134(v136, v151);
        unint64_t v120 = *v127;
        (*v127)(v139, v140);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v128);
        v126(v139, v131, v140);
        *(void *)(v0 + 80) = v72;
        *(void *)(v0 + 88) = &protocol witness table for Table;
        uint64_t v77 = sub_10001D958(v129);
        v133(v77, v115, v72);
        QueryType.subscript.getter();
        QueryType.subscript.getter();
        == infix<A>(_:_:)();
        v119(v74, v75);
        v119(v73, v75);
        QueryType.join(_:_:on:)();
        v134(v136, v151);
        v120(v139, v140);
        v145(v143, v72);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v129);
        *(unsigned char *)(v0 + 593) = v123;
        sub_1001A1448();
        == infix<A>(_:_:)();
        == infix<A>(_:_:)();
        && infix(_:_:)();
        v134(v122, v151);
        v134(v121, v151);
        QueryType.filter(_:)();
        v134(v136, v151);
        v145(v153, v72);
        uint64_t v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = xmmword_101342130;
        if (qword_1016375A8 != -1) {
          swift_once();
        }
        uint64_t v149 = (uint64_t *)(v78 + 32);
        uint64_t v152 = *(void *)(v0 + 576);
        uint64_t v79 = *(void *)(v0 + 552);
        uint64_t v80 = *(void *)(v0 + 528);
        uint64_t v12 = *(uint64_t **)(v0 + 520);
        uint64_t v81 = *(void *)(v0 + 488);
        uint64_t v82 = *(void *)(v0 + 296);
        uint64_t v83 = *(void *)(v0 + 280);
        sub_100010324(v83, (uint64_t)qword_10170F650);
        type metadata accessor for Date();
        QueryType.subscript.getter();
        sub_100062734(&qword_10163CEA0, &qword_10163CE98);
        ExpressionType.desc.getter();
        (*v113)(v82, v83);
        QueryType.order(_:)();
        swift_bridgeObjectRelease();
        v145((uint64_t)v12, v81);
        QueryType.limit(_:offset:)();
        v145(v80, v81);
        QueryType.delete()();
        v145(v79, v81);
        uint64_t v84 = Connection.run(_:)();
        (*v116)(*(void *)(v0 + 576), *(void *)(v0 + 560));
        uint64_t v55 = v124 + v84;
        if (__OFADD__(v124, v84)) {
          break;
        }
        uint64_t v69 = v118 + 1;
        uint64_t v66 = v132;
        uint64_t v67 = v131;
        uint64_t v68 = v126;
        if (v117 == v118 + 1)
        {
          swift_release();
          uint64_t v60 = v145;
          unint64_t v63 = v104;
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_52:
      swift_once();
    }
    uint64_t v125 = 0;
    uint64_t v60 = v145;
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 376) + 56))(*(void *)(v0 + 360), 1, 1, *(void *)(v0 + 368));
LABEL_45:
    uint64_t v97 = *(void *)(v0 + 584);
    uint64_t v98 = *(void *)(v0 + 568);
    uint64_t v99 = *(void *)(v0 + 560);
    uint64_t v100 = *(void *)(v0 + 544);
    uint64_t v101 = *(void *)(v0 + 536);
    uint64_t v102 = *(void *)(v0 + 488);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v60(v101, v102);
    v60(v100, v102);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
    if (__OFADD__(v125, v112))
    {
LABEL_54:
      __break(1u);
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v103 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v103(v125 + v112);
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    swift_willThrow();
LABEL_34:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v85 = *(uint64_t (**)(void))(v0 + 8);
    return v85();
  }
  return result;
}

uint64_t sub_100182F78(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = sub_10000588C(&qword_10163CF00);
  uint64_t v48 = *(void *)(v62 - 8);
  uint64_t v3 = __chkstk_darwin(v62);
  uint64_t v58 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unsigned int v51 = (char *)&v47 - v5;
  uint64_t v6 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v64 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v59 = (uint64_t)&v47 - v9;
  uint64_t v10 = sub_10000588C(&qword_10163CEA8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v52 = (char *)&v47 - v14;
  uint64_t v15 = type metadata accessor for Row();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v50 = (char *)&v47 - v21;
  __chkstk_darwin(v20);
  uint64_t v49 = (char *)&v47 - v22;
  uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  uint64_t v67 = _swiftEmptyArrayStorage;
  sub_1000B773C(0, v23 & ~(v23 >> 63), 0);
  swift_retain();
  uint64_t v63 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t result = swift_release();
  if (v23 < 0)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v61 = a2;
  uint64_t v53 = v16;
  if (v23)
  {
    uint64_t v54 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v55 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v56 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v57 = (uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v25 = v19;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t result = (*v57)(v13, 1, v15);
      if (result == 1) {
        goto LABEL_29;
      }
      uint64_t v26 = v15;
      (*v55)(v25, v13, v15);
      uint64_t v27 = (uint64_t)v25;
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      uint64_t v28 = v62;
      sub_100010324(v62, (uint64_t)qword_10170F3F8);
      type metadata accessor for Table();
      uint64_t v29 = v58;
      QueryType.subscript.getter();
      Row.subscript.getter();
      (*v54)(v29, v28);
      uint64_t v30 = v65;
      sub_100189C50(v27, v66, (uint64_t)v64);
      if (v30)
      {
        swift_release();
        swift_release();
        (*v56)(v13, v26);
        return swift_release();
      }
      uint64_t v25 = (char *)v27;
      uint64_t v15 = v26;
      (*v56)(v13, v26);
      uint64_t v31 = v67;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = 0;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B773C(0, v31[2] + 1, 1);
        uint64_t v31 = v67;
      }
      unint64_t v34 = v31[2];
      unint64_t v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000B773C(v33 > 1, v34 + 1, 1);
        uint64_t v31 = v67;
      }
      v31[2] = v34 + 1;
      sub_1001A1CE4((uint64_t)v64, (uint64_t)v31+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v34, type metadata accessor for ObservedAdvertisement);
    }
    while (--v23);
  }
  uint64_t v35 = (uint64_t)v52;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v36 = v53;
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v64(v35, 1, v15) == 1)
  {
LABEL_14:
    swift_release();
    sub_10001DAB4(v35, &qword_10163CEA8);
    swift_release();
    return (uint64_t)v67;
  }
  else
  {
    uint64_t v38 = *(char **)(v36 + 32);
    uint64_t v37 = v36 + 32;
    uint64_t v57 = (uint64_t (**)(char *, uint64_t, uint64_t))(v37 - 16);
    uint64_t v58 = v38;
    uint64_t v39 = v49;
    uint64_t v53 = v37;
    uint64_t v55 = (void (**)(char *, char *, uint64_t))(v37 - 24);
    unint64_t v56 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v40 = (uint64_t)v50;
    uint64_t v41 = v62;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v58)(v39, v35, v15);
      (*v57)((char *)v40, (uint64_t)v39, v15);
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      sub_100010324(v41, (uint64_t)qword_10170F3F8);
      type metadata accessor for Table();
      uint64_t v42 = v51;
      QueryType.subscript.getter();
      Row.subscript.getter();
      (*v56)(v42, v41);
      uint64_t v43 = v65;
      sub_100189C50(v40, v66, v59);
      uint64_t v65 = v43;
      if (v43) {
        break;
      }
      ((void (*)(char *, uint64_t))*v55)(v39, v15);
      char v44 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B773C(0, v44[2] + 1, 1);
        char v44 = v67;
      }
      uint64_t v35 = (uint64_t)v52;
      unint64_t v46 = v44[2];
      unint64_t v45 = v44[3];
      if (v46 >= v45 >> 1)
      {
        sub_1000B773C(v45 > 1, v46 + 1, 1);
        char v44 = v67;
      }
      v44[2] = v46 + 1;
      sub_1001A1CE4(v59, (uint64_t)v44+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v46, type metadata accessor for ObservedAdvertisement);
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (v64(v35, 1, v15) == 1) {
        goto LABEL_14;
      }
    }
    ((void (*)(char *, uint64_t))*v55)(v39, v15);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1001837D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DeviceEvent(0);
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v44 = (uint64_t)&v41 - v9;
  uint64_t v10 = sub_10000588C(&qword_10163CEA8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v45 = (char *)&v41 - v14;
  uint64_t v15 = type metadata accessor for Row();
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v49 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v43 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  uint64_t v42 = (char *)&v41 - v20;
  uint64_t v21 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  uint64_t v53 = _swiftEmptyArrayStorage;
  sub_1000B77B4(0, v21 & ~(v21 >> 63), 0);
  swift_retain();
  uint64_t v52 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t result = swift_release();
  if (v21 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v51 = a2;
  if (v21)
  {
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v41 + 16);
    uint64_t v47 = (void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v48 = (void (*)(void))(v41 + 48);
    unint64_t v46 = v8;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))v48)(v13, 1, v15);
      if (result == 1) {
        goto LABEL_25;
      }
      uint64_t v24 = (uint64_t)v49;
      (*v23)(v49, v13, v15);
      swift_retain();
      sub_100195B80(v24, a2, (uint64_t)v8);
      if (v2)
      {
        swift_release();
        swift_release();
        (*v47)(v13, v15);
        return swift_release();
      }
      (*v47)(v13, v15);
      uint64_t v25 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B77B4(0, v25[2] + 1, 1);
        uint64_t v25 = v53;
      }
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000B77B4(v26 > 1, v27 + 1, 1);
        uint64_t v25 = v53;
      }
      v25[2] = v27 + 1;
      uint64_t v28 = (uint64_t)v25
          + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
          + *(void *)(v50 + 72) * v27;
      uint64_t v8 = v46;
      sub_1001A1CE4((uint64_t)v46, v28, type metadata accessor for DeviceEvent);
      --v21;
      a2 = v51;
    }
    while (v21);
  }
  uint64_t v29 = (uint64_t)v45;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v30 = v41;
  uint64_t v49 = *(char **)(v41 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v29, 1, v15) == 1)
  {
LABEL_12:
    swift_release();
    sub_10001DAB4(v29, &qword_10163CEA8);
    swift_release();
    return (uint64_t)v53;
  }
  else
  {
    uint64_t v32 = *(void (**)(void))(v30 + 32);
    uint64_t v31 = v30 + 32;
    uint64_t v48 = v32;
    unint64_t v33 = (void (**)(char *, uint64_t))(v31 - 24);
    uint64_t v34 = v44;
    while (1)
    {
      uint64_t v35 = v42;
      v48();
      uint64_t v36 = (uint64_t)v43;
      (*(void (**)(char *, char *, uint64_t))(v31 - 16))(v43, v35, v15);
      uint64_t v37 = v51;
      swift_retain();
      sub_100195B80(v36, v37, v34);
      if (v3) {
        break;
      }
      (*v33)(v35, v15);
      uint64_t v38 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B77B4(0, v38[2] + 1, 1);
        uint64_t v38 = v53;
      }
      unint64_t v40 = v38[2];
      unint64_t v39 = v38[3];
      if (v40 >= v39 >> 1)
      {
        sub_1000B77B4(v39 > 1, v40 + 1, 1);
        uint64_t v38 = v53;
      }
      v38[2] = v40 + 1;
      uint64_t v34 = v44;
      sub_1001A1CE4(v44, (uint64_t)v38+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v40, type metadata accessor for DeviceEvent);
      uint64_t v29 = (uint64_t)v45;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v49)(v29, 1, v15) == 1) {
        goto LABEL_12;
      }
    }
    (*v33)(v35, v15);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100183DDC(uint64_t a1)
{
  uint64_t v503 = type metadata accessor for Delete();
  uint64_t v2 = *(char **)(v503 - 8);
  __chkstk_darwin(v503);
  v515 = (char *)v428 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v4 - 8);
  uint64_t v492 = (uint64_t)v428 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v554 = type metadata accessor for ObservedAdvertisement(0);
  unint64_t v499 = *(void *)(v554 - 8);
  uint64_t v6 = __chkstk_darwin(v554);
  uint64_t v538 = (uint64_t)v428 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v539 = (char *)v428 - v8;
  uint64_t v520 = type metadata accessor for Date();
  v498 = *(void (***)(char *, uint64_t))(v520 - 8);
  uint64_t v9 = __chkstk_darwin(v520);
  v534 = (char *)v428 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  v536 = (char *)v428 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v527 = (char *)v428 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v489 = (char *)v428 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v491 = (char *)v428 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v487 = (char *)v428 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v495 = (char *)v428 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v502 = (char *)v428 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v490 = (char *)v428 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v501 = (char *)v428 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v506 = (char *)v428 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v500 = (char *)v428 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v522 = (char *)v428 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v526 = (char *)v428 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v514 = (char *)v428 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v553 = (char *)v428 - v40;
  __chkstk_darwin(v39);
  v542 = (char *)v428 - v41;
  uint64_t v42 = sub_10000588C(&qword_10163EB60);
  uint64_t v43 = __chkstk_darwin(v42 - 8);
  uint64_t v535 = (uint64_t)v428 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  unint64_t v46 = (char *)v428 - v45;
  uint64_t v525 = type metadata accessor for JoinType();
  uint64_t v497 = *(void *)(v525 - 8);
  __chkstk_darwin(v525);
  v512 = (char *)v428 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v531 = sub_10000588C(&qword_10163CF00);
  uint64_t v496 = *(void *)(v531 - 8);
  uint64_t v48 = __chkstk_darwin(v531);
  v511 = (char *)v428 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v530 = (char *)v428 - v50;
  uint64_t v551 = type metadata accessor for Row();
  uint64_t v549 = *(void *)(v551 - 8);
  uint64_t v51 = __chkstk_darwin(v551);
  v537 = (char *)v428 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v51);
  v541 = (char *)v428 - v54;
  __chkstk_darwin(v53);
  unint64_t v56 = (char *)v428 - v55;
  uint64_t v57 = sub_10000588C(&qword_10163CEA8);
  uint64_t v58 = __chkstk_darwin(v57 - 8);
  v540 = (char *)v428 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v58);
  v493 = (char *)v428 - v61;
  __chkstk_darwin(v60);
  v518 = (char *)v428 - v62;
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v557 = *(void *)(v63 - 8);
  uint64_t v64 = __chkstk_darwin(v63);
  v504 = (char *)v428 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __chkstk_darwin(v64);
  v505 = (char *)v428 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v507 = (char *)v428 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v533 = (char *)v428 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v488 = (char *)v428 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  v494 = (char *)v428 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v513 = (char *)v428 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v521 = (char *)v428 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v516 = (char *)v428 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v486 = (char *)v428 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v517 = (char *)v428 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  v519 = (char *)v428 - v87;
  __chkstk_darwin(v86);
  uint64_t v528 = (uint64_t)v428 - v88;
  uint64_t v547 = sub_10000588C(&qword_10163CF58);
  uint64_t v556 = *(void *)(v547 - 8);
  __chkstk_darwin(v547);
  v543 = (char *)v428 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v545 = sub_10000588C(&qword_10163CFA0);
  uint64_t v544 = *(void *)(v545 - 8);
  uint64_t v90 = __chkstk_darwin(v545);
  v529 = (char *)v428 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v90);
  v550 = (char *)v428 - v92;
  uint64_t v93 = sub_10000588C(&qword_10163CF78);
  v565 = *(char **)(v93 - 8);
  __chkstk_darwin(v93);
  v546 = (char *)v428 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v560 = sub_10000588C(&qword_10163CE68);
  uint64_t v564 = *(void *)(v560 - 8);
  uint64_t v95 = __chkstk_darwin(v560);
  v510 = (char *)v428 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = __chkstk_darwin(v95);
  v509 = (char *)v428 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v508 = (char *)v428 - v100;
  __chkstk_darwin(v99);
  v552 = (char *)v428 - v101;
  uint64_t v563 = type metadata accessor for Table();
  uint64_t v555 = *(void *)(v563 - 8);
  uint64_t v102 = __chkstk_darwin(v563);
  v524 = (char *)v428 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = __chkstk_darwin(v102);
  v523 = (char *)v428 - v105;
  uint64_t v106 = __chkstk_darwin(v104);
  v532 = (char *)v428 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v548 = (char *)v428 - v109;
  uint64_t v110 = __chkstk_darwin(v108);
  v559 = (char *)v428 - v111;
  __chkstk_darwin(v110);
  v558 = (char *)v428 - v112;
  if (qword_1016368D8 != -1) {
    swift_once();
  }
  uint64_t v113 = sub_100010324(v63, (uint64_t)qword_10170D7E8);
  uint64_t v114 = Logger.logObject.getter();
  os_log_type_t v115 = static os_log_type_t.default.getter();
  BOOL v116 = os_log_type_enabled(v114, v115);
  uint64_t v561 = v63;
  if (v116)
  {
    uint64_t v117 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v117 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "Decimation - starting to decimate low-value observations.", v117, 2u);
    swift_slowDealloc();
  }

  uint64_t v118 = sub_1009FCF40();
  if (!v118)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v124 = 2;
    *(unsigned char *)(v124 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v119 = v118;
  v478 = v2;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v120 = v562;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v121 = sub_1010AB6B0(v567);
  swift_bridgeObjectRelease();
  uint64_t v122 = sub_10017EF64(v119, a1);
  if (v120) {
    return swift_release();
  }
  uint64_t v469 = v121;
  uint64_t v474 = v122;
  uint64_t v480 = v113;
  uint64_t v482 = v119;
  uint64_t v562 = 0;
  uint64_t v484 = v93;
  v479 = v46;
  v468 = v56;
  uint64_t v465 = a1;
  uint64_t v125 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v126 = v547;
  uint64_t v127 = sub_100010324(v547, (uint64_t)qword_10170F530);
  uint64_t v569 = v126;
  v472 = (void (*)(void, void))sub_100062734(&qword_10163CFE0, &qword_10163CF58);
  v570 = v472;
  uint64_t v128 = sub_10001D958(&v567);
  uint64_t v129 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v556 + 16);
  v470 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v556 + 16);
  v471 = v129;
  v129(v128, v127, v126);
  uint64_t v130 = v548;
  uint64_t v131 = v563;
  SchemaType.select(_:_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
  uint64_t v473 = sub_100062734(&qword_10163CF80, &qword_10163CF58);
  uint64_t v132 = v546;
  ExpressionType<>.length.getter();
  uint64_t v567 = 28;
  uint64_t v476 = v125;
  uint64_t v133 = v552;
  == infix<A>(_:_:)();
  v483 = (void (*)(char *, uint64_t))*((void *)v565 + 1);
  v565 += 8;
  v483(v132, v484);
  QueryType.filter(_:)();
  uint64_t v134 = *(void (**)(char *, uint64_t))(v564 + 8);
  v564 += 8;
  v475 = v134;
  v134(v133, v560);
  uint64_t v135 = v555 + 8;
  v485 = *(void (**)(char *, uint64_t))(v555 + 8);
  v485(v130, v131);
  uint64_t v467 = sub_10000588C(&qword_10163CE90);
  uint64_t v136 = swift_allocObject();
  long long v466 = xmmword_101342130;
  *(_OWORD *)(v136 + 16) = xmmword_101342130;
  uint64_t v137 = v472;
  *(void *)(v136 + 56) = v126;
  *(void *)(v136 + 64) = v137;
  uint64_t v138 = sub_10001D958((uint64_t *)(v136 + 32));
  uint64_t v477 = v127;
  v471(v138, v127, v126);
  uint64_t v139 = v559;
  QueryType.group(_:)();
  uint64_t v481 = v135;
  swift_bridgeObjectRelease();
  v485(v139, v131);
  ExpressionType<>.length.getter();
  uint64_t v567 = 28;
  == infix<A>(_:_:)();
  uint64_t v140 = v484;
  v483(v132, v484);
  uint64_t v141 = v563;
  QueryType.filter(_:)();
  v475(v133, v560);
  uint64_t v142 = v543;
  ExpressionType<>.distinct.getter();
  ExpressionType<>.count.getter();
  (*(void (**)(char *, uint64_t))(v556 + 8))(v142, v126);
  uint64_t v143 = v550;
  SchemaType.select<A>(_:)();
  uint64_t v144 = v132;
  uint64_t v145 = v485;
  v483(v144, v140);
  v145(v139, v141);
  uint64_t v146 = v562;
  Connection.scalar<A>(_:)();
  uint64_t v562 = v146;
  if (v146)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v544 + 8))(v143, v545);
    return ((uint64_t (*)(char *, uint64_t))v145)(v558, v141);
  }
  uint64_t v147 = v567;
  uint64_t v148 = v557;
  uint64_t v149 = *(char **)(v557 + 16);
  uint64_t v150 = v528;
  uint64_t v151 = v561;
  uint64_t v556 = v557 + 16;
  v543 = v149;
  ((void (*)(uint64_t, uint64_t, uint64_t))v149)(v528, v480, v561);
  uint64_t v152 = Logger.logObject.getter();
  os_log_type_t v153 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v152, v153))
  {
    uint64_t v154 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v154 = 134217984;
    uint64_t v148 = v557;
    uint64_t v567 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v152, v153, "Decimation - uniqueAdvertisements count: %ld.", v154, 0xCu);
    uint64_t v145 = v485;
    swift_slowDealloc();
  }

  uint64_t v155 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
  v155(v150, v151);
  uint64_t v156 = v148 + 8;
  uint64_t v157 = v563;
  uint64_t v569 = v563;
  v570 = &protocol witness table for Table;
  uint64_t v158 = sub_10001D958(&v567);
  uint64_t v159 = v555 + 16;
  int v160 = *(void (**)(uint64_t *, char *, uint64_t))(v555 + 16);
  uint64_t v161 = v558;
  v160(v158, v558, v157);
  uint64_t v162 = v562;
  Connection.prepare(_:)();
  uint64_t v562 = v162;
  if (v162)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v544 + 8))(v550, v545);
    v145(v161, v157);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
  }
  uint64_t v557 = v156;
  v472 = v155;
  v452 = (void (*)(uint64_t *, uint64_t, uint64_t))v160;
  uint64_t v163 = v549;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
  uint64_t v164 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v165 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  swift_retain();
  uint64_t v166 = v518;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  swift_release();
  uint64_t v167 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48);
  uint64_t v168 = v551;
  v471 = (void (*)(uint64_t *, uint64_t, uint64_t))(v163 + 48);
  v470 = v167;
  if (((unsigned int (*)(char *, uint64_t))v167)(v166, 1) == 1)
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v544 + 8))(v550, v545);
    return ((uint64_t (*)(char *, uint64_t))v485)(v558, v563);
  }
  uint64_t v555 = v159;
  uint64_t v436 = v465 + v165;
  v170 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
  v455 = &v567;
  unsigned int v435 = enum case for JoinType.leftOuter(_:);
  v434 = (void (**)(char *, void, uint64_t))(v497 + 104);
  v445 = (void (**)(char *, uint64_t))(v496 + 8);
  v433 = (void (**)(char *, uint64_t))(v497 + 8);
  v464 = (char **)(v163 + 8);
  v462 = (char **)(v499 + 56);
  v460 = (void (**)(char *, char *, uint64_t))(v163 + 16);
  v463 = (void (**)(char *, uint64_t, uint64_t))(v498 + 2);
  v458 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v499 + 48);
  v454 = (void (**)(char *, char *, uint64_t))(v498 + 4);
  ++v498;
  v430 = (void (**)(char *, uint64_t))(v478 + 8);
  v438 = (void (**)(char *, uint64_t))(v544 + 8);
  *(void *)&long long v169 = 141558275;
  long long v432 = v169;
  v428[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v169 = 134218499;
  long long v441 = v169;
  *(void *)&long long v169 = 134218755;
  long long v429 = v169;
  *(void *)&long long v169 = 141558787;
  long long v442 = v169;
  *(void *)&long long v169 = 134219011;
  long long v431 = v169;
  v171 = v519;
  uint64_t v172 = v562;
  uint64_t v173 = v168;
  uint64_t v549 = v163 + 32;
  uint64_t v437 = v164;
  v461 = v170;
  while (1)
  {
    v170(v468, v166, v173);
    Row.get<A>(_:)();
    if (v172)
    {
      swift_bridgeObjectRelease();
      swift_release();
      ((void (*)(char *, uint64_t))*v464)(v468, v551);
      swift_release();
      (*v438)(v550, v545);
      return ((uint64_t (*)(char *, uint64_t))v485)(v558, v563);
    }
    uint64_t v174 = v567;
    unint64_t v175 = v568;
    sub_1000361E0(v567, v568);
    uint64_t v457 = v174;
    sub_100435A9C(6, v174, v175, &v567);
    uint64_t v176 = v567;
    unint64_t v177 = v568;
    uint64_t v178 = Data.hexString.getter();
    unint64_t v180 = v179;
    sub_10001CFB8(v176, v177);
    uint64_t v181 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v171, v480, v561);
    swift_bridgeObjectRetain_n();
    uint64_t v182 = Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.info.getter();
    BOOL v184 = os_log_type_enabled(v182, v183);
    unint64_t v499 = v180;
    uint64_t v562 = 0;
    uint64_t v456 = v178;
    if (v184)
    {
      uint64_t v185 = swift_slowAlloc();
      uint64_t v186 = swift_slowAlloc();
      *(_DWORD *)uint64_t v185 = v432;
      uint64_t v566 = 1752392040;
      uint64_t v567 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v185 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v178, v180, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "Decimation - advertisementRow decimation within advertisement: %{private,mask.hash}s.", (uint8_t *)v185, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      long long v187 = v519;
      uint64_t v188 = v561;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      long long v187 = v171;
      uint64_t v188 = v181;
    }
    v472(v187, v188);
    uint64_t v567 = v457;
    unint64_t v568 = v175;
    uint64_t v189 = sub_1001A1E54((unint64_t *)&qword_10163CFE8, (void (*)(uint64_t))&type metadata accessor for Blob);
    uint64_t v190 = v552;
    uint64_t v528 = v189;
    == infix<A>(_:_:)();
    uint64_t v191 = v563;
    QueryType.filter(_:)();
    v475(v190, v560);
    *(_OWORD *)(swift_allocObject() + 16) = v466;
    unint64_t v192 = v175;
    if (qword_101637578 != -1) {
      swift_once();
    }
    uint64_t v193 = sub_10000588C(&qword_10163CE98);
    sub_100010324(v193, (uint64_t)qword_10170F5C0);
    sub_100062734(&qword_10163CEA0, &qword_10163CE98);
    ExpressionType.desc.getter();
    uint64_t v194 = v559;
    QueryType.order(_:)();
    swift_bridgeObjectRelease();
    v195 = v485;
    v485(v194, v191);
    uint64_t v567 = v457;
    unint64_t v568 = v192;
    unint64_t v451 = v192;
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    v475(v190, v560);
    v196 = v546;
    ExpressionType<>.count.getter();
    SchemaType.select<A>(_:)();
    v483(v196, v484);
    v195(v194, v191);
    uint64_t v197 = v562;
    Connection.scalar<A>(_:)();
    if (v197) {
      break;
    }
    uint64_t v198 = v567;
    uint64_t v199 = v517;
    uint64_t v200 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v517, v480, v561);
    unint64_t v201 = v499;
    swift_bridgeObjectRetain_n();
    uint64_t v202 = Logger.logObject.getter();
    os_log_type_t v203 = static os_log_type_t.info.getter();
    BOOL v204 = os_log_type_enabled(v202, v203);
    uint64_t v444 = v198;
    if (v204)
    {
      uint64_t v205 = swift_slowAlloc();
      uint64_t v206 = swift_slowAlloc();
      uint64_t v566 = v198;
      uint64_t v567 = v206;
      *(_DWORD *)uint64_t v205 = v441;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v205 + 12) = 2160;
      uint64_t v566 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v205 + 22) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v201, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v202, v203, "Decimation - byAdvertisement start count: %ld within advertisement: %{private,mask.hash}s.", (uint8_t *)v205, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v207 = v517;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v207 = v199;
    }
    v472(v207, v200);
    uint64_t v562 = 0;
    uint64_t v208 = v452;
    if (qword_1016374E0 != -1) {
      swift_once();
    }
    uint64_t v209 = sub_100010324(v531, (uint64_t)qword_10170F3F8);
    uint64_t v210 = v563;
    QueryType.subscript.getter();
    uint64_t v211 = v512;
    (*v434)(v512, v435, v525);
    uint64_t v569 = v210;
    v570 = &protocol witness table for Table;
    uint64_t v212 = sub_10001D958(&v567);
    v208(v212, v436, v210);
    uint64_t v213 = v511;
    uint64_t v497 = v209;
    QueryType.subscript.getter();
    uint64_t v214 = v552;
    == infix<A>(_:_:)();
    v443 = *v445;
    v443(v213, v531);
    QueryType.join(_:_:on:)();
    uint64_t v215 = v560;
    uint64_t v216 = v475;
    v475(v214, v560);
    (*v433)(v211, v525);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
    uint64_t v567 = v457;
    unint64_t v568 = v451;
    uint64_t v217 = v508;
    == infix<A>(_:_:)();
    uint64_t v567 = v474;
    uint64_t v218 = sub_10000588C(&qword_10163CF88);
    uint64_t v219 = sub_100062734(&qword_10163CF90, &qword_10163CF88);
    uint64_t v220 = v510;
    uint64_t v440 = v218;
    uint64_t v439 = v219;
    Collection<>.contains(_:)();
    LOBYTE(v567) = 0;
    uint64_t v221 = v509;
    == infix<A>(_:_:)();
    v216(v220, v215);
    && infix(_:_:)();
    v216(v221, v215);
    v216(v217, v215);
    unint64_t v222 = v548;
    uint64_t v223 = v524;
    QueryType.filter(_:)();
    v224 = v214;
    uint64_t v225 = v210;
    v216(v224, v215);
    v226 = v485;
    v485(v223, v210);
    *(_OWORD *)(swift_allocObject() + 16) = v466;
    if (qword_1016375A0 != -1) {
      swift_once();
    }
    uint64_t v227 = sub_10000588C(&qword_10163CF18);
    sub_100010324(v227, (uint64_t)qword_10170F638);
    sub_100062734(&qword_10163CFF0, &qword_10163CF18);
    ExpressionType.desc.getter();
    v228 = v559;
    QueryType.order(_:)();
    swift_bridgeObjectRelease();
    v226(v222, v210);
    v229 = v523;
    QueryType.limit(_:offset:)();
    v226(v228, v225);
    uint64_t v569 = v225;
    v570 = &protocol witness table for Table;
    v230 = sub_10001D958(&v567);
    v452(v230, (uint64_t)v229, v225);
    uint64_t v231 = v562;
    Connection.prepare(_:)();
    uint64_t v232 = v551;
    if (v231)
    {
      swift_errorRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
LABEL_41:
      v234 = v516;
      unint64_t v235 = v499;
      uint64_t v236 = v561;
      ((void (*)(char *, uint64_t, uint64_t))v543)(v516, v480, v561);
      swift_bridgeObjectRetain_n();
      v237 = Logger.logObject.getter();
      os_log_type_t v238 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v237, v238))
      {
        uint64_t v239 = swift_slowAlloc();
        uint64_t v240 = swift_slowAlloc();
        *(_DWORD *)uint64_t v239 = v432;
        uint64_t v566 = 1752392040;
        uint64_t v567 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v239 + 12) = 2081;
        swift_bridgeObjectRetain();
        *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v235, &v567));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v237, v238, "Decimation - not found - lowerHalfMedianAccuracy: decimating all lower or equal,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v239, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v241 = v516;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v241 = v234;
      }
      v472(v241, v236);
      double v242 = 0.0;
      goto LABEL_45;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    uint64_t v233 = (uint64_t)v493;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    if (v470(v233, 1, v232) == 1)
    {
      sub_10001DAB4(v233, &qword_10163CEA8);
      goto LABEL_41;
    }
    Row.get<A>(_:)();
    uint64_t v407 = v480;
    unint64_t v408 = v499;
    ((void (*)(uint64_t, uint64_t))*v464)(v233, v232);
    double v242 = *(double *)&v566;
    v409 = v486;
    uint64_t v410 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v486, v407, v561);
    swift_bridgeObjectRetain_n();
    v411 = Logger.logObject.getter();
    os_log_type_t v412 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v411, v412))
    {
      uint64_t v413 = swift_slowAlloc();
      uint64_t v567 = swift_slowAlloc();
      *(_DWORD *)uint64_t v413 = v441;
      *(double *)&uint64_t v566 = v242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v413 + 12) = 2160;
      uint64_t v566 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v413 + 22) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v408, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v411, v412, "Decimation - found - lowerHalfMedianAccuracy: %f,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v413, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v414 = v486;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v414 = v409;
    }
    v472(v414, v410);
LABEL_45:
    uint64_t v243 = v554;
    uint64_t v244 = (uint64_t)v539;
    v245 = v540;
    v246 = v541;
    uint64_t v247 = swift_allocObject();
    uint64_t v450 = v247;
    *(void *)(v247 + 16) = &_swiftEmptySetSingleton;
    v449 = (uint64_t *)(v247 + 16);
    uint64_t v248 = swift_allocObject();
    uint64_t v448 = v248;
    *(void *)(v248 + 16) = &_swiftEmptySetSingleton;
    uint64_t v249 = v248 + 16;
    v478 = *v462;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v478)(v479, 1, 1, v243);
    static Date.distantPast.getter();
    uint64_t v250 = v563;
    uint64_t v569 = v563;
    v570 = &protocol witness table for Table;
    uint64_t v251 = sub_10001D958(&v567);
    v452(v251, (uint64_t)v532, v250);
    Connection.prepare(_:)();
    uint64_t v172 = 0;
    uint64_t v252 = v520;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v567);
    uint64_t v253 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_beginAccess();
    swift_retain();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v496 = v253;
    swift_release();
    if (v470((uint64_t)v245, 1, v551) != 1)
    {
      uint64_t v459 = v249;
      uint64_t v265 = v551;
      while (1)
      {
        v461(v246, v245, v265);
        uint64_t v273 = (uint64_t)v537;
        (*v460)(v537, v246, v265);
        Row.subscript.getter();
        sub_100189C50(v273, v567, v244);
        if (v172)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001CFB8(v457, v451);
          swift_bridgeObjectRelease();
          v565 = *v464;
          uint64_t v415 = v551;
          ((void (*)(char *, uint64_t))v565)(v246, v551);
          swift_release();
          (*v498)(v542, v252);
          sub_10001DAB4((uint64_t)v479, &qword_10163EB60);
          uint64_t v416 = v563;
          uint64_t v417 = v415;
          v418 = v485;
          v485(v523, v563);
          v443(v530, v531);
          v419 = *v438;
          uint64_t v420 = v545;
          (*v438)(v529, v545);
          v418(v532, v416);
          ((void (*)(char *, uint64_t))v565)(v468, v417);
          swift_release();
          v419(v550, v420);
          v418(v558, v416);
          goto LABEL_96;
        }
        Row.get<A>(_:)();
        uint64_t v528 = v567;
        uint64_t v274 = v554;
        v275 = *v463;
        v276 = v553;
        (*v463)(v553, v244 + *(int *)(v554 + 44), v252);
        uint64_t v277 = v535;
        sub_10001D074((uint64_t)v479, v535, &qword_10163EB60);
        int v278 = (*v458)(v277, 1, v274);
        uint64_t v562 = 0;
        if (v278 == 1) {
          break;
        }
        sub_1001A1CE4(v277, v538, type metadata accessor for ObservedAdvertisement);
        if (*(void *)(*(void *)v459 + 16) >= v469)
        {
          swift_beginAccess();
          sub_100DCCA90(&v566, v528);
          swift_endAccess();
          v324 = v521;
          ((void (*)(char *, uint64_t, uint64_t))v543)(v521, v480, v561);
          v325 = v514;
          v326 = v553;
          v275(v514, (uint64_t)v553, v252);
          v327 = v526;
          v275(v526, (uint64_t)v325, v252);
          v328 = v522;
          (*v454)(v522, v325, v252);
          unint64_t v329 = v499;
          swift_bridgeObjectRetain_n();
          v330 = Logger.logObject.getter();
          os_log_type_t v331 = static os_log_type_t.info.getter();
          int v332 = v331;
          if (os_log_type_enabled(v330, v331))
          {
            uint64_t v266 = swift_slowAlloc();
            uint64_t v267 = swift_slowAlloc();
            *(_DWORD *)uint64_t v266 = v431;
            uint64_t v566 = v469;
            uint64_t v567 = v267;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v266 + 12) = 2048;
            uint64_t v566 = v528;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v266 + 22) = 2080;
            LODWORD(v528) = v332;
            sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v268 = dispatch thunk of CustomStringConvertible.description.getter();
            *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v268, v269, &v567));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v270 = *v498;
            v453 = v270;
            v270(v522, v252);
            v270(v526, v252);
            *(_WORD *)(v266 + 32) = 2160;
            uint64_t v566 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v266 + 42) = 2081;
            swift_bridgeObjectRetain();
            *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v329, &v567));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v330, (os_log_type_t)v528, "Decimation - remove all above limit - >= maxPayloads %ld currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v266, 0x34u);
            swift_arrayDestroy();
            uint64_t v265 = v551;
            uint64_t v271 = v554;
            swift_slowDealloc();
            swift_slowDealloc();

            v472(v521, v561);
            sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
            v453(v553, v252);
            uint64_t v244 = (uint64_t)v539;
            v246 = v541;
            v245 = v540;
            uint64_t v172 = v562;
          }
          else
          {
            swift_bridgeObjectRelease_n();

            v333 = *v498;
            (*v498)(v328, v252);
            v333(v327, v252);
            v472(v324, v561);
            sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
            v333(v326, v252);
            uint64_t v244 = (uint64_t)v539;
            v246 = v541;
            v245 = v540;
            uint64_t v172 = v562;
            uint64_t v271 = v554;
            uint64_t v265 = v551;
          }
          goto LABEL_50;
        }
        v296 = v542;
        v297 = v553;
        Date.timeIntervalSince(_:)();
        double v299 = fabs(v298);
        uint64_t v300 = v562;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v562 = v300;
        uint64_t v301 = v567;
        double v302 = (double)sub_1010AAFA8(v567);
        uint64_t v303 = sub_1010AB6B0(v301);
        swift_bridgeObjectRelease();
        if (v302 * 60.0 / (double)v303 >= v299)
        {
          int v334 = sub_1000D07F4(*(unsigned char *)(v244 + 32) & 0xB);
          unsigned __int8 v335 = sub_1000D07F4(*(unsigned char *)(v538 + 32) & 0xB);
          v336 = v502;
          if (v334 == v335)
          {
            uint64_t v337 = v492;
            sub_10001D074(v244 + *(int *)(v554 + 48), v492, &qword_10163CF50);
            uint64_t v338 = type metadata accessor for ObservedAdvertisement.Location(0);
            int v339 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v338 - 8) + 48))(v337, 1, v338);
            v340 = v491;
            v341 = v498;
            if (v339 == 1)
            {
              sub_10001DAB4(v337, &qword_10163CF50);
              BOOL v342 = v242 > 1.79769313e308;
            }
            else
            {
              double v360 = *(double *)(v337 + 16);
              sub_1001A1D4C(v337, type metadata accessor for ObservedAdvertisement.Location);
              BOOL v342 = v242 > v360;
            }
            uint64_t v361 = v528;
            if (v342)
            {
              sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
              (*v341)(v553, v252);
            }
            else
            {
              swift_beginAccess();
              sub_100DCCA90(&v566, v361);
              swift_endAccess();
              v362 = v488;
              ((void (*)(char *, uint64_t, uint64_t))v543)(v488, v480, v561);
              v363 = v487;
              v364 = v340;
              v365 = v553;
              v275(v487, (uint64_t)v553, v252);
              v275(v364, (uint64_t)v363, v252);
              uint64_t v366 = v361;
              v367 = v489;
              (*v454)(v489, v363, v252);
              unint64_t v368 = v499;
              swift_bridgeObjectRetain_n();
              v369 = v365;
              v370 = Logger.logObject.getter();
              os_log_type_t v371 = static os_log_type_t.info.getter();
              LODWORD(v528) = v371;
              if (os_log_type_enabled(v370, v371))
              {
                uint64_t v373 = swift_slowAlloc();
                v453 = (void (*)(char *, uint64_t))swift_slowAlloc();
                uint64_t v566 = v366;
                uint64_t v567 = (uint64_t)v453;
                *(_DWORD *)uint64_t v373 = v429;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v373 + 12) = 2080;
                v374 = v370;
                sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
                uint64_t v375 = dispatch thunk of CustomStringConvertible.description.getter();
                *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v375, v376, &v567));
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                v377 = *v498;
                (*v498)(v489, v252);
                v377(v364, v252);
                *(_WORD *)(v373 + 22) = 2160;
                uint64_t v566 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v373 + 32) = 2081;
                swift_bridgeObjectRetain();
                *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v368, &v567));
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v374, (os_log_type_t)v528, "Decimation - remove - worse than median accuracy currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v373, 0x2Au);
                swift_arrayDestroy();
                uint64_t v271 = v554;
                swift_slowDealloc();
                swift_slowDealloc();

                v472(v488, v561);
                sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
                v377(v553, v252);
                goto LABEL_69;
              }
              swift_bridgeObjectRelease_n();

              v378 = *v498;
              (*v498)(v367, v252);
              v378(v364, v252);
              v472(v362, v561);
              sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
              v378(v369, v252);
              uint64_t v244 = (uint64_t)v539;
            }
            v246 = v541;
            v245 = v540;
            uint64_t v172 = v562;
            uint64_t v265 = v551;
            goto LABEL_62;
          }
          swift_beginAccess();
          uint64_t v343 = v528;
          sub_100DCCA90(&v566, v528);
          swift_endAccess();
          v344 = *v498;
          v345 = v542;
          uint64_t v282 = v252;
          (*v498)(v542, v252);
          v346 = v553;
          v275(v345, (uint64_t)v553, v282);
          v347 = v494;
          ((void (*)(char *, uint64_t, uint64_t))v543)(v494, v480, v561);
          v348 = v490;
          v275(v490, (uint64_t)v346, v282);
          v275(v336, (uint64_t)v348, v282);
          v349 = v495;
          (*v454)(v495, v348, v282);
          unint64_t v350 = v499;
          swift_bridgeObjectRetain_n();
          v351 = v336;
          v352 = Logger.logObject.getter();
          os_log_type_t v353 = static os_log_type_t.info.getter();
          int v354 = v353;
          if (!os_log_type_enabled(v352, v353))
          {
            swift_bridgeObjectRelease_n();

            v344(v349, v282);
            v344(v351, v282);
            v472(v347, v561);
            sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
            v344(v553, v282);
            uint64_t v265 = v551;
            uint64_t v244 = (uint64_t)v539;
            v246 = v541;
            v245 = v540;
            uint64_t v172 = v562;
LABEL_61:
            uint64_t v252 = v282;
LABEL_62:
            uint64_t v271 = v554;
            goto LABEL_50;
          }
          uint64_t v355 = swift_slowAlloc();
          LODWORD(v447) = v354;
          unint64_t v356 = v350;
          uint64_t v357 = v355;
          v453 = (void (*)(char *, uint64_t))swift_slowAlloc();
          uint64_t v566 = v343;
          uint64_t v567 = (uint64_t)v453;
          *(_DWORD *)uint64_t v357 = v429;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v357 + 12) = 2080;
          sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v358 = dispatch thunk of CustomStringConvertible.description.getter();
          *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v358, v359, &v567));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v344(v495, v282);
          v344(v351, v282);
          *(_WORD *)(v357 + 22) = 2160;
          uint64_t v566 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v357 + 32) = 2081;
          swift_bridgeObjectRetain();
          *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v356, &v567));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v352, (os_log_type_t)v447, "Decimation - keep - multipart changed currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v357, 0x2Au);
          swift_arrayDestroy();
          uint64_t v271 = v554;
          swift_slowDealloc();
          swift_slowDealloc();

          v472(v494, v561);
          sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
          v344(v553, v282);
          uint64_t v265 = v551;
          goto LABEL_55;
        }
        swift_beginAccess();
        sub_100DCCA90(&v566, v528);
        swift_endAccess();
        v304 = *v498;
        (*v498)(v296, v252);
        v275(v296, (uint64_t)v297, v252);
        uint64_t v305 = v561;
        ((void (*)(char *, uint64_t, uint64_t))v543)(v513, v480, v561);
        v306 = v500;
        v275(v500, (uint64_t)v297, v252);
        v307 = v506;
        v275(v506, (uint64_t)v306, v252);
        v308 = v501;
        (*v454)(v501, v306, v252);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        v309 = Logger.logObject.getter();
        os_log_type_t v310 = static os_log_type_t.info.getter();
        int v311 = v310;
        if (!os_log_type_enabled(v309, v310))
        {
          swift_bridgeObjectRelease_n();

          v304(v308, v252);
          v304(v307, v252);
          swift_release_n();
          v472(v513, v305);
          sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
          v304(v553, v252);
          uint64_t v271 = v554;
LABEL_69:
          uint64_t v244 = (uint64_t)v539;
          v246 = v541;
          v245 = v540;
          uint64_t v172 = v562;
          uint64_t v265 = v551;
          goto LABEL_50;
        }
        uint64_t v312 = swift_slowAlloc();
        v453 = (void (*)(char *, uint64_t))swift_slowAlloc();
        uint64_t v567 = (uint64_t)v453;
        *(_DWORD *)uint64_t v312 = v431;
        v446 = v304;
        LODWORD(v447) = v311;
        uint64_t v313 = v562;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v314 = v566;
        double v315 = (double)sub_1010AAFA8(v566);
        uint64_t v316 = sub_1010AB6B0(v314);
        swift_bridgeObjectRelease();
        double v317 = (double)v316;
        uint64_t v172 = v313;
        *(double *)&uint64_t v566 = v315 * 60.0 / v317;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_release();
        *(_WORD *)(v312 + 12) = 2048;
        uint64_t v566 = v528;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v312 + 22) = 2080;
        sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        v318 = v506;
        uint64_t v319 = dispatch thunk of CustomStringConvertible.description.getter();
        *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v319, v320, &v567));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v321 = v446;
        v446(v308, v252);
        v321(v318, v252);
        *(_WORD *)(v312 + 32) = 2160;
        uint64_t v566 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v312 + 42) = 2081;
        unint64_t v322 = v499;
        swift_bridgeObjectRetain();
        *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v322, &v567));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v309, (os_log_type_t)v447, "Decimation - keep - > locationTimeResolution %f currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v312, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v472(v513, v561);
        sub_1001A1D4C(v538, type metadata accessor for ObservedAdvertisement);
        v321(v553, v252);
        uint64_t v265 = v551;
        uint64_t v271 = v554;
        uint64_t v244 = (uint64_t)v539;
        v246 = v541;
        v245 = v540;
LABEL_50:
        uint64_t v272 = (uint64_t)v479;
        sub_10001DAB4((uint64_t)v479, &qword_10163EB60);
        sub_1001A1C50(v244, v272, type metadata accessor for ObservedAdvertisement);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v478)(v272, 0, 1, v271);
        sub_1001A1D4C(v244, type metadata accessor for ObservedAdvertisement);
        ((void (*)(char *, uint64_t))*v464)(v246, v265);
        swift_retain();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        swift_release();
        if (v470((uint64_t)v245, 1, v265) == 1) {
          goto LABEL_46;
        }
      }
      sub_10001DAB4(v277, &qword_10163EB60);
      swift_beginAccess();
      sub_100DCCA90(&v566, v528);
      swift_endAccess();
      v279 = v542;
      v453 = *v498;
      v453(v542, v252);
      v275(v279, (uint64_t)v276, v252);
      v280 = v533;
      ((void (*)(char *, uint64_t, uint64_t))v543)(v533, v480, v561);
      v281 = v527;
      v275(v527, (uint64_t)v276, v252);
      v275(v536, (uint64_t)v281, v252);
      uint64_t v282 = v252;
      v283 = v534;
      (*v454)(v534, v281, v282);
      unint64_t v284 = v499;
      swift_bridgeObjectRetain_n();
      v285 = Logger.logObject.getter();
      os_log_type_t v286 = static os_log_type_t.info.getter();
      int v287 = v286;
      if (!os_log_type_enabled(v285, v286))
      {

        v323 = v453;
        v453(v283, v282);
        v323(v536, v282);
        swift_bridgeObjectRelease_n();
        v472(v280, v561);
        v323(v276, v282);
        uint64_t v244 = (uint64_t)v539;
        v246 = v541;
        v245 = v540;
        uint64_t v172 = v562;
        uint64_t v265 = v551;
        goto LABEL_61;
      }
      unint64_t v288 = v284;
      uint64_t v289 = swift_slowAlloc();
      uint64_t v290 = swift_slowAlloc();
      uint64_t v447 = v290;
      *(_DWORD *)uint64_t v289 = v442;
      uint64_t v566 = 1752392040;
      uint64_t v567 = v290;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v289 + 12) = 2081;
      LODWORD(v446) = v287;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v288, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v289 + 22) = 2080;
      sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      v291 = v536;
      uint64_t v292 = dispatch thunk of CustomStringConvertible.description.getter();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v292, v293, &v567));
      uint64_t v294 = v551;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v295 = v453;
      v453(v534, v282);
      v295(v291, v282);
      *(_WORD *)(v289 + 32) = 2048;
      uint64_t v566 = v528;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v285, (os_log_type_t)v446, "Decimation - preserveByKey (latest for advertisement): %{private,mask.hash}s,\npreserving scanDate: %s, advId: %lld.", (uint8_t *)v289, 0x2Au);
      swift_arrayDestroy();
      uint64_t v271 = v554;
      swift_slowDealloc();
      swift_slowDealloc();

      v472(v533, v561);
      v295(v553, v282);
      uint64_t v265 = v294;
LABEL_55:
      uint64_t v244 = (uint64_t)v539;
      v246 = v541;
      v245 = v540;
      uint64_t v172 = v562;
      uint64_t v252 = v282;
      goto LABEL_50;
    }
LABEL_46:
    swift_release();
    uint64_t v254 = v448;
    uint64_t v255 = swift_bridgeObjectRetain();
    uint64_t v474 = sub_1009DD288(v255, v474);
    uint64_t v256 = v507;
    uint64_t v257 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v507, v480, v561);
    unint64_t v258 = v499;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v259 = Logger.logObject.getter();
    os_log_type_t v260 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v259, v260))
    {
      uint64_t v261 = swift_slowAlloc();
      uint64_t v567 = swift_slowAlloc();
      *(_DWORD *)uint64_t v261 = v441;
      uint64_t v262 = *(void *)(*(void *)(v254 + 16) + 16);
      swift_release();
      uint64_t v566 = v262;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v261 + 12) = 2160;
      uint64_t v566 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v261 + 22) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v258, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v259, v260, "Decimation - byAdvertisement preserving count: %ld,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v261, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v263 = v507;
      uint64_t v264 = v561;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
      v263 = v256;
      uint64_t v264 = v257;
    }
    v379 = (void (*)(char *, uint64_t))v472;
    v472(v263, v264);
    uint64_t v380 = v563;
    v381 = v559;
    v382 = v548;
    v452((uint64_t *)v548, v476, v563);
    v383 = v449;
    swift_beginAccess();
    uint64_t v567 = *v383;
    swift_bridgeObjectRetain();
    v384 = v552;
    Collection<>.contains(_:)();
    swift_bridgeObjectRelease();
    QueryType.filter(_:)();
    v475(v384, v560);
    v385 = v381;
    v386 = v485;
    v485(v382, v380);
    QueryType.delete()();
    v386(v385, v380);
    Connection.run(_:)();
    if (v172)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001CFB8(v457, v451);
      swift_bridgeObjectRelease();
      (*v430)(v515, v503);
      (*v498)(v542, v520);
      sub_10001DAB4((uint64_t)v479, &qword_10163EB60);
      v425 = v485;
      v485(v523, v380);
      v443(v530, v531);
      v426 = *v438;
      uint64_t v427 = v545;
      (*v438)(v529, v545);
      v425(v532, v380);
      ((void (*)(char *, uint64_t))*v464)(v468, v551);
      swift_release();
      v426(v550, v427);
      v425(v558, v380);
LABEL_96:
      swift_release();
      return swift_release();
    }
    v387 = v505;
    uint64_t v388 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v505, v480, v561);
    unint64_t v389 = v499;
    swift_bridgeObjectRetain_n();
    uint64_t v390 = v450;
    swift_retain_n();
    v391 = Logger.logObject.getter();
    os_log_type_t v392 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v391, v392))
    {
      uint64_t v393 = swift_slowAlloc();
      uint64_t v567 = swift_slowAlloc();
      *(_DWORD *)uint64_t v393 = v441;
      uint64_t v394 = *(void *)(*(void *)(v390 + 16) + 16);
      swift_release();
      uint64_t v566 = v394;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v393 + 12) = 2160;
      uint64_t v566 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v393 + 22) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v499, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v391, v392, "Decimation - remove - decimate count: %ld,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v393, 0x20u);
      swift_arrayDestroy();
      unint64_t v389 = v499;
      swift_slowDealloc();
      swift_slowDealloc();

      v379(v505, v388);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
      v379(v387, v388);
    }
    v395 = v504;
    Connection.scalar<A>(_:)();
    uint64_t v396 = v457;
    uint64_t v397 = v567;
    uint64_t v398 = v561;
    ((void (*)(char *, uint64_t, uint64_t))v543)(v395, v480, v561);
    swift_bridgeObjectRetain();
    v399 = Logger.logObject.getter();
    os_log_type_t v400 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v399, v400))
    {
      double v401 = (double)v397 / (double)v444 * 100.0;
      uint64_t v402 = swift_slowAlloc();
      uint64_t v403 = swift_slowAlloc();
      uint64_t v566 = v397;
      uint64_t v567 = v403;
      *(_DWORD *)uint64_t v402 = v429;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v402 + 12) = 2160;
      uint64_t v566 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v402 + 22) = 2081;
      swift_bridgeObjectRetain();
      *(double *)&uint64_t v566 = COERCE_DOUBLE(sub_1008FA0F0(v456, v389, &v567));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v402 + 32) = 2048;
      *(double *)&uint64_t v566 = v401;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v399, v400, "Decimation - byAdvertisement end count: %ld\nwithin advertisement: %{private,mask.hash}s kept %f%%.", (uint8_t *)v402, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v457, v451);
      v472(v504, v398);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_10001CFB8(v396, v451);
      v472(v395, v398);
    }
    (*v430)(v515, v503);
    (*v498)(v542, v520);
    sub_10001DAB4((uint64_t)v479, &qword_10163EB60);
    uint64_t v404 = v563;
    v405 = v485;
    v485(v523, v563);
    v443(v530, v531);
    (*v438)(v529, v545);
    v405(v532, v404);
    uint64_t v173 = v551;
    ((void (*)(char *, uint64_t))*v464)(v468, v551);
    swift_release();
    swift_release();
    uint64_t v166 = v518;
    v171 = v519;
    swift_retain();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    unsigned int v406 = v470((uint64_t)v166, 1, v173);
    v170 = v461;
    if (v406 == 1) {
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001CFB8(v457, v451);
  swift_bridgeObjectRelease();
  v421 = *v438;
  uint64_t v422 = v545;
  (*v438)(v529, v545);
  uint64_t v423 = v563;
  v424 = (uint64_t (*)(char *, uint64_t))v485;
  v485(v532, v563);
  ((void (*)(char *, uint64_t))*v464)(v468, v551);
  swift_release();
  v421(v550, v422);
  return v424(v558, v423);
}

uint64_t sub_100189C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v73 = a3;
  uint64_t Error = type metadata accessor for QueryError();
  uint64_t v6 = *(void *)(Error - 8);
  uint64_t v7 = __chkstk_darwin(Error);
  uint64_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v70 - v9;
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v77 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v15 - 8);
  uint64_t v75 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v17 - 8);
  uint64_t v79 = (uint64_t *)((char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101637590 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000588C(&qword_10163CF18);
  sub_100010324(v19, (uint64_t)qword_10170F608);
  Row.get<A>(_:)();
  if (!v3)
  {
    uint64_t v20 = v80;
    if (qword_101637598 != -1) {
      swift_once();
    }
    sub_100010324(v19, (uint64_t)qword_10170F620);
    Row.get<A>(_:)();
    uint64_t v21 = v80;
    if (qword_1016375A0 != -1) {
      swift_once();
    }
    sub_100010324(v19, (uint64_t)qword_10170F638);
    Row.get<A>(_:)();
    uint64_t v22 = v80;
    if (qword_1016375A8 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10000588C(&qword_10163CE98);
    sub_100010324(v23, (uint64_t)qword_10170F650);
    uint64_t v24 = v72;
    Row.get<A>(_:)();
    uint64_t v64 = type metadata accessor for ObservedAdvertisement.Location(0);
    uint64_t v65 = v14;
    uint64_t v66 = v79;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))((uint64_t)v79 + *(int *)(v64 + 28), v65, v24);
    *uint64_t v66 = v20;
    v66[1] = v21;
    v66[2] = v22;
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v66, 0, 1, v64);
    uint64_t v67 = v6;
    goto LABEL_17;
  }
  uint64_t v67 = v6;
  uint64_t v80 = v3;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (!swift_dynamicCast()) {
    goto LABEL_26;
  }
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v10, Error);
  if (v25 != enum case for QueryError.noSuchColumn(_:))
  {
    uint64_t v27 = (uint64_t)v79;
    if (v25 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
      swift_bridgeObjectRelease();
      uint64_t v28 = type metadata accessor for ObservedAdvertisement.Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, Error);
LABEL_26:
    swift_errorRelease();
    swift_willThrow();
    uint64_t v35 = type metadata accessor for Row();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
  }
  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v79, 1, 1, v26);
LABEL_16:
  swift_errorRelease();
LABEL_17:
  uint64_t v30 = v77;
  uint64_t v29 = v78;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v31, (uint64_t)qword_10170F410);
  Row.get<A>(_:)();
  uint64_t v32 = 0;
  if (qword_1016374F8 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v33, (uint64_t)qword_10170F440);
  sub_1001A1448();
  Row.get<A>(_:)();
  LOBYTE(v41) = v80;
  uint64_t v42 = v76;
  if (v80 > 2u)
  {
    sub_1001A14F0();
    uint64_t v32 = swift_allocError();
    *uint64_t v63 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v30, v29);
    uint64_t v41 = (uint64_t)v79;
  }
  else
  {
    if (qword_1016374F0 != -1) {
LABEL_66:
    }
      swift_once();
    uint64_t v43 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v43, (uint64_t)qword_10170F428);
    sub_1001A1544();
    Row.get<A>(_:)();
    if (!v32)
    {
      uint64_t v68 = v80;
      uint64_t Error = v75;
      (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v75, v77, v78);
      uint64_t v69 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      *(unsigned char *)(Error + *(int *)(v69 + 20)) = v41;
      *(void *)(Error + *(int *)(v69 + 24)) = v68;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(Error, 0, 1, v69);
      LOBYTE(v41) = (_BYTE)v79;
LABEL_30:
      if (qword_101637548 != -1) {
        swift_once();
      }
      uint64_t v38 = sub_10000588C(&qword_10163CF58);
      sub_100010324(v38, (uint64_t)qword_10170F530);
      Row.subscript.getter();
      uint64_t v67 = v80;
      unint64_t v39 = v81;
      switch(v81 >> 62)
      {
        case 1uLL:
          LODWORD(v40) = HIDWORD(v80) - v80;
          if (!__OFSUB__(HIDWORD(v80), v80))
          {
            uint64_t v40 = (int)v40;
            goto LABEL_43;
          }
          __break(1u);
          goto LABEL_65;
        case 2uLL:
          uint64_t v46 = *(void *)(v80 + 16);
          uint64_t v45 = *(void *)(v80 + 24);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v40 = v45 - v46;
          if (!v47) {
            goto LABEL_43;
          }
LABEL_65:
          __break(1u);
          goto LABEL_66;
        case 3uLL:
          goto LABEL_45;
        default:
          uint64_t v40 = BYTE6(v81);
LABEL_43:
          if (v40 == 6)
          {
            sub_1000361E0(v80, v81);
            sub_1004353E8(v67, v39, &v80);
            uint64_t v48 = v80;
            unint64_t v49 = v81 | 0x2000000000000000;
          }
          else
          {
LABEL_45:
            sub_1000361E0(v80, v81);
            sub_100434E0C(v67, v39, &v80);
            uint64_t v48 = v80;
            unint64_t v49 = v81;
          }
          uint64_t v50 = v73;
          *(void *)uint64_t v73 = v71;
          *(unsigned char *)(v50 + 8) = 0;
          *(void *)(v50 + 16) = v48;
          *(void *)(v50 + 24) = v49;
          uint64_t v78 = v48;
          sub_1001A1790(v48, v49);
          if (qword_101637510 != -1) {
            swift_once();
          }
          uint64_t v51 = sub_10000588C(&qword_10163CE78);
          sub_100010324(v51, (uint64_t)qword_10170F488);
          sub_1001A1448();
          Row.subscript.getter();
          char v52 = sub_1000C3918(v80);
          if (v52 == 4)
          {
            sub_1001A1AD8(v78, v49);
            __break(1u);
            JUMPOUT(0x10018AC40);
          }
          uint64_t v53 = v73;
          *(unsigned char *)(v73 + 9) = v52;
          if (qword_101637550 != -1) {
            swift_once();
          }
          sub_100010324(v51, (uint64_t)qword_10170F548);
          Row.subscript.getter();
          *(unsigned char *)(v53 + 32) = v80;
          if (qword_101637560 != -1) {
            swift_once();
          }
          sub_100010324(v51, (uint64_t)qword_10170F578);
          Row.subscript.getter();
          *(unsigned char *)(v53 + 33) = v80;
          if (qword_101637568 != -1) {
            swift_once();
          }
          uint64_t v54 = sub_10000588C(&qword_10163CF60);
          sub_100010324(v54, (uint64_t)qword_10170F590);
          Row.subscript.getter();
          char v55 = BYTE1(v80);
          *(unsigned char *)(v53 + 34) = v80;
          *(unsigned char *)(v53 + 35) = v55;
          if (qword_101637570 != -1) {
            swift_once();
          }
          uint64_t v56 = sub_10000588C(&qword_10163CF68);
          sub_100010324(v56, (uint64_t)qword_10170F5A8);
          sub_1001A1AE0();
          Row.subscript.getter();
          *(_DWORD *)(v53 + 36) = v80;
          if (qword_101637578 != -1) {
            swift_once();
          }
          uint64_t v57 = sub_10000588C(&qword_10163CE98);
          sub_100010324(v57, (uint64_t)qword_10170F5C0);
          uint64_t v58 = (int *)type metadata accessor for ObservedAdvertisement(0);
          Row.subscript.getter();
          uint64_t v59 = (uint64_t)v79;
          sub_10001D074((uint64_t)v79, v53 + v58[12], &qword_10163CF50);
          uint64_t v60 = v75;
          sub_10001D074(v75, v53 + v58[13], &qword_10164E760);
          if (qword_101637588 != -1) {
            swift_once();
          }
          uint64_t v61 = sub_10000588C(&qword_10163CE68);
          sub_100010324(v61, (uint64_t)qword_10170F5F0);
          Row.subscript.getter();
          sub_10001CFB8(v67, v39);
          sub_1001A1AD8(v78, v49);
          uint64_t v62 = type metadata accessor for Row();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(a1, v62);
          sub_10001DAB4(v60, &qword_10164E760);
          uint64_t result = sub_10001DAB4(v59, &qword_10163CF50);
          *(unsigned char *)(v53 + v58[14]) = v80;
          return result;
      }
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v77, v78);
    uint64_t v41 = (uint64_t)v79;
    uint64_t v42 = v76;
  }
  uint64_t v80 = v32;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    int v34 = (*(uint64_t (**)(char *, uint64_t))(v67 + 88))(v42, Error);
    if (v34 == enum case for QueryError.noSuchColumn(_:))
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v67 + 96))(v42, Error);
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      uint64_t v37 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      uint64_t Error = v75;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v75, 1, 1, v37);
      swift_errorRelease();
      goto LABEL_30;
    }
    if (v34 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v67 + 96))(v42, Error);
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v42, Error);
  }
  swift_errorRelease();
  swift_willThrow();
  uint64_t v44 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(a1, v44);
  return sub_10001DAB4(v41, &qword_10163CF50);
}

uint64_t sub_10018AC50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v92 = a3;
  uint64_t v94 = a2;
  uint64_t v84 = a1;
  uint64_t v5 = sub_10000588C(&qword_10163CF00);
  uint64_t v97 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v79 - v9;
  uint64_t v96 = sub_10000588C(&qword_10163CE68);
  uint64_t v106 = *(void *)(v96 - 8);
  uint64_t v11 = __chkstk_darwin(v96);
  uint64_t v88 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v86 = (char *)&v79 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v79 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v87 = (char *)&v79 - v18;
  __chkstk_darwin(v17);
  uint64_t v100 = (char *)&v79 - v19;
  uint64_t v20 = type metadata accessor for Table();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v95 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v99 = (char *)&v79 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v90 = (char *)&v79 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v103 = (char *)&v79 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v91 = (char *)&v79 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v93 = (char *)&v79 - v33;
  uint64_t v34 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v104 = a4;
  uint64_t v35 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v108 = v32;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v36 = sub_10001D958(v107);
  uint64_t v105 = v21;
  uint64_t v101 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v102 = v21 + 16;
  v101(v36, v35, v20);
  if (qword_1016374E0 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_100010324(v5, (uint64_t)qword_10170F3F8);
  uint64_t v98 = (void (*)(void, void))v5;
  uint64_t v83 = v37;
  uint64_t v81 = v34;
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  uint64_t v38 = v100;
  == infix<A>(_:_:)();
  unint64_t v39 = *(void (**)(char *, void))(v97 + 8);
  uint64_t v82 = v39;
  uint64_t v40 = v98;
  v39(v8, v98);
  uint64_t v80 = v10;
  v39(v10, v40);
  QueryType.join(_:on:)();
  uint64_t v41 = v106 + 8;
  uint64_t v97 = *(void *)(v106 + 8);
  ((void (*)(char *, uint64_t))v97)(v38, v96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v107);
  uint64_t v42 = v104 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  uint64_t v108 = v20;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v43 = sub_10001D958(v107);
  v101(v43, v42, v20);
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  uint64_t v44 = v80;
  == infix<A>(_:_:)();
  uint64_t v45 = v8;
  uint64_t v46 = v98;
  BOOL v47 = v82;
  v82(v45, v98);
  uint64_t v48 = v20;
  v47(v44, v46);
  unint64_t v49 = v95;
  QueryType.join(_:on:)();
  uint64_t v50 = v96;
  uint64_t v106 = v41;
  ((void (*)(char *, uint64_t))v97)(v38, v96);
  uint64_t v51 = v105 + 8;
  uint64_t v98 = *(void (**)(void, void))(v105 + 8);
  v98(v49, v48);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v107);
  char v52 = v85;
  uint64_t v53 = sub_10017B05C(v84);
  uint64_t v95 = v52;
  uint64_t v54 = sub_101158244((uint64_t)v53);
  swift_bridgeObjectRelease();
  v107[0] = v54;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v85 = (char *)v48;
  uint64_t v105 = v51;
  uint64_t v55 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v55, (uint64_t)qword_10170F410);
  sub_10000588C((uint64_t *)&unk_101653DC0);
  sub_100062734(&qword_10163D018, (uint64_t *)&unk_101653DC0);
  uint64_t v56 = v87;
  Collection<>.contains(_:)();
  swift_bridgeObjectRelease();
  if (qword_101637510 != -1) {
    swift_once();
  }
  uint64_t v57 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v57, (uint64_t)qword_10170F488);
  LOBYTE(v107[0]) = 1;
  sub_1001A1448();
  uint64_t v58 = v86;
  == infix<A>(_:_:)();
  LOBYTE(v107[0]) = 2;
  uint64_t v59 = v88;
  == infix<A>(_:_:)();
  uint64_t v60 = v89;
  || infix(_:_:)();
  uint64_t v61 = v59;
  uint64_t v62 = v50;
  uint64_t v63 = (void (*)(char *, uint64_t))v97;
  ((void (*)(char *, uint64_t))v97)(v61, v50);
  v63(v58, v50);
  uint64_t v64 = v100;
  && infix(_:_:)();
  v63(v60, v50);
  v63(v56, v50);
  uint64_t v65 = v90;
  uint64_t v66 = v85;
  uint64_t v67 = v99;
  QueryType.filter(_:)();
  v63(v64, v62);
  uint64_t v68 = (void (*)(char *, char *))v98;
  v98(v67, v66);
  if (qword_101637580 != -1) {
    swift_once();
  }
  sub_100010324(v62, (uint64_t)qword_10170F5D8);
  LOBYTE(v107[0]) = v92 & 1;
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  v63(v64, v62);
  v68(v65, v66);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  uint64_t v69 = (uint64_t)v66;
  if (qword_101637578 != -1) {
    swift_once();
  }
  uint64_t v70 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v70, (uint64_t)qword_10170F5C0);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  uint64_t v71 = v91;
  uint64_t v72 = v103;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v73 = v66;
  uint64_t v74 = (void (*)(char *, uint64_t))v98;
  v98(v72, v73);
  uint64_t v75 = v93;
  QueryType.limit(_:)();
  v74(v71, v69);
  uint64_t v108 = v69;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v76 = sub_10001D958(v107);
  v101(v76, (uint64_t)v75, v69);
  uint64_t v77 = sub_10019714C((uint64_t)v107, v104, sub_100182F78, &qword_10163CF48);
  v74(v75, v69);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v107);
  return v77;
}

uint64_t sub_10018B7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  unint64_t v39 = (char *)&v34 - v14;
  uint64_t v15 = type metadata accessor for Table();
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Delete();
  uint64_t v43 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10017AF04(a1);
  if (!v21[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v22 = sub_1009FCF40();
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = sub_10017EF64(v22, a2);
    if (v2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = v24;
      uint64_t v37 = v23;
      uint64_t v38 = v18;
      uint64_t v36 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      uint64_t v46 = v21;
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_10000588C(&qword_10163CF00);
      sub_100010324(v27, (uint64_t)qword_10170F3F8);
      sub_10000588C(&qword_10163D020);
      sub_100062734(&qword_10163D028, &qword_10163D020);
      Collection<>.contains(_:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = (void *)v35;
      sub_10000588C(&qword_10163CF88);
      sub_100062734(&qword_10163CF90, &qword_10163CF88);
      Collection<>.contains(_:)();
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 0;
      uint64_t v28 = v40;
      == infix<A>(_:_:)();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v30 = v8;
      uint64_t v31 = v45;
      v29(v30, v45);
      uint64_t v32 = v39;
      && infix(_:_:)();
      v29(v28, v31);
      v29(v13, v31);
      uint64_t v33 = v42;
      QueryType.filter(_:)();
      v29(v32, v31);
      QueryType.delete()();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v33);
      Connection.run(_:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v38);
    }
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = 2;
    *(unsigned char *)(v26 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10018BCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Table();
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Update();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10017AF04(a1);
  if (!v14[2]) {
    return swift_bridgeObjectRelease();
  }
  if (sub_1009FCF40())
  {
    uint64_t v20 = v11;
    uint64_t v21 = v10;
    uint64_t v19 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    uint64_t v27 = v14;
    if (qword_1016374E0 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_10000588C(&qword_10163CF00);
    sub_100010324(v15, (uint64_t)qword_10170F3F8);
    sub_10000588C(&qword_10163D020);
    sub_100062734(&qword_10163D028, &qword_10163D020);
    Collection<>.contains(_:)();
    swift_bridgeObjectRelease();
    QueryType.filter(_:)();
    uint64_t v16 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);
    sub_10000588C(&qword_10163CF10);
    type metadata accessor for Setter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
    if (qword_101637580 != -1) {
      swift_once();
    }
    sub_100010324(v16, (uint64_t)qword_10170F5D8);
    char v26 = 1;
    <- infix<A>(_:_:)();
    QueryType.update(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
    Connection.run(_:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v21);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 2;
    *(unsigned char *)(v18 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10018C150(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163CF78);
  uint64_t v37 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163CE68);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v40 = (char *)v35 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v35 - v13;
  __chkstk_darwin(v12);
  uint64_t v38 = (char *)v35 - v15;
  uint64_t v16 = type metadata accessor for Table();
  uint64_t v41 = *(void *)(v16 - 8);
  uint64_t v42 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Delete();
  uint64_t v43 = *(void *)(v19 - 8);
  uint64_t v44 = v19;
  __chkstk_darwin(v19);
  unint64_t v39 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1009FCF40();
  if (v21)
  {
    uint64_t v22 = sub_10017EF64(v21, a1);
    if (!v1)
    {
      v35[0] = v22;
      uint64_t v36 = v6;
      v35[1] = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_101637548 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_10000588C(&qword_10163CF58);
      sub_100010324(v23, (uint64_t)qword_10170F530);
      sub_100062734(&qword_10163CF80, &qword_10163CF58);
      ExpressionType<>.length.getter();
      uint64_t v46 = 28;
      uint64_t v24 = v14;
      == infix<A>(_:_:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
      uint64_t v46 = v35[0];
      if (qword_1016374E0 != -1) {
        swift_once();
      }
      uint64_t v25 = sub_10000588C(&qword_10163CF00);
      sub_100010324(v25, (uint64_t)qword_10170F3F8);
      sub_10000588C(&qword_10163CF88);
      sub_100062734(&qword_10163CF90, &qword_10163CF88);
      Collection<>.contains(_:)();
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 0;
      char v26 = v40;
      == infix<A>(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v45 + 8);
      uint64_t v28 = v9;
      uint64_t v29 = v36;
      v27(v28, v36);
      uint64_t v30 = v38;
      && infix(_:_:)();
      v27(v26, v29);
      v27(v24, v29);
      uint64_t v31 = v42;
      QueryType.filter(_:)();
      v27(v30, v29);
      uint64_t v32 = v39;
      QueryType.delete()();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v31);
      Connection.run(_:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
    }
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v34 = 2;
    *(unsigned char *)(v34 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10018C724(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = sub_10000588C(&qword_10163CF00);
  uint64_t v80 = *(void *)(v82 - 8);
  uint64_t v4 = __chkstk_darwin(v82);
  uint64_t v75 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v74 = (char *)v67 - v6;
  uint64_t v87 = sub_10000588C(&qword_10163CE68);
  uint64_t v7 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v83 = (char *)v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for JoinType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = type metadata accessor for Table();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v81 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v76 = (char *)v67 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v77 = (char *)v67 - v20;
  __chkstk_darwin(v19);
  uint64_t v78 = (char *)v67 - v21;
  int64_t v22 = *(void *)(a1 + 16);
  uint64_t v85 = v9;
  uint64_t v86 = a2;
  uint64_t v79 = v14;
  uint64_t v88 = v10;
  uint64_t v89 = v7;
  uint64_t v84 = v12;
  if (v22)
  {
    unint64_t v73 = v13;
    v91[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B765C(0, v22, 0);
    uint64_t v23 = v91[0];
    uint64_t v24 = sub_10115FE18(a1);
    uint64_t v26 = v25;
    int v28 = v27 & 1;
    uint64_t v90 = (char *)(a1 + 56);
    while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)&v90[((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v24) & 1) == 0) {
        goto LABEL_19;
      }
      if (*(_DWORD *)(a1 + 36) != v26) {
        goto LABEL_20;
      }
      LODWORD(v94) = v28;
      uint64_t v29 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v24);
      uint64_t v7 = a1;
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      sub_1001A1790(*v29, v30);
      v91[0] = v23;
      unint64_t v13 = *(void *)(v23 + 16);
      unint64_t v32 = *(void *)(v23 + 24);
      if (v13 >= v32 >> 1)
      {
        sub_1000B765C(v32 > 1, v13 + 1, 1);
        uint64_t v23 = v91[0];
      }
      *(void *)(v23 + 16) = v13 + 1;
      unint64_t v33 = v23 + 16 * v13;
      *(void *)(v33 + 32) = v31;
      *(void *)(v33 + 40) = v30 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v34 = sub_10052CB9C(v24, v26, v94 & 1, v7);
      uint64_t v24 = v34;
      uint64_t v26 = v35;
      int v28 = v36 & 1;
      --v22;
      a1 = v7;
      if (!v22)
      {
        v67[0] = v23;
        sub_1001A1CB8(v34, v35, v28);
        a2 = v86;
        unint64_t v13 = v73;
        uint64_t v14 = v79;
        uint64_t v10 = v88;
        uint64_t v12 = v84;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v67[0] = _swiftEmptyArrayStorage;
LABEL_12:
  uint64_t v7 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v37 = *(void (**)(void))(v10 + 104);
  LODWORD(v73) = enum case for JoinType.leftOuter(_:);
  uint64_t v72 = v10 + 104;
  uint64_t v71 = (void (*)(char *, void, uint64_t))v37;
  v37(v12);
  uint64_t v38 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  unint64_t v92 = v13;
  uint64_t v93 = &protocol witness table for Table;
  unint64_t v39 = sub_10001D958(v91);
  uint64_t v40 = *(char **)(v14 + 16);
  uint64_t v94 = v14 + 16;
  uint64_t v90 = v40;
  ((void (*)(uint64_t *, uint64_t, unint64_t))v40)(v39, v38, v13);
  if (qword_1016374E0 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v41 = v82;
  uint64_t v42 = sub_100010324(v82, (uint64_t)qword_10170F3F8);
  uint64_t v43 = v74;
  uint64_t v70 = v42;
  v67[1] = v7;
  QueryType.subscript.getter();
  uint64_t v44 = v75;
  QueryType.subscript.getter();
  uint64_t v45 = v83;
  == infix<A>(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v69 = v46;
  v46(v44, v41);
  v46(v43, v41);
  BOOL v47 = v84;
  QueryType.join(_:_:on:)();
  uint64_t v80 = *(void *)(v89 + 8);
  v89 += 8;
  ((void (*)(char *, uint64_t))v80)(v45, v87);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v88 + 8);
  v88 += 8;
  uint64_t v48 = v85;
  v68(v47, v85);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
  v71(v47, v73, v48);
  uint64_t v49 = v86 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  unint64_t v92 = v13;
  uint64_t v93 = &protocol witness table for Table;
  uint64_t v50 = sub_10001D958(v91);
  ((void (*)(uint64_t *, uint64_t, unint64_t))v90)(v50, v49, v13);
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v51 = v44;
  uint64_t v52 = v82;
  uint64_t v53 = v69;
  v69(v51, v82);
  v53(v43, v52);
  uint64_t v54 = v76;
  uint64_t v55 = v84;
  uint64_t v56 = v81;
  QueryType.join(_:_:on:)();
  ((void (*)(char *, uint64_t))v80)(v45, v87);
  v68(v55, v85);
  uint64_t v57 = *(void (**)(char *, unint64_t))(v79 + 8);
  v57(v56, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
  v91[0] = v67[0];
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v58 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v58, (uint64_t)qword_10170F530);
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  sub_100062734(&qword_10163D008, (uint64_t *)&unk_10164DBD0);
  uint64_t v59 = v83;
  Collection<>.contains(_:)();
  swift_bridgeObjectRelease();
  uint64_t v60 = v77;
  QueryType.filter(_:)();
  ((void (*)(char *, uint64_t))v80)(v59, v87);
  v57(v54, v13);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  uint64_t v61 = v57;
  if (qword_101637578 != -1) {
    swift_once();
  }
  uint64_t v62 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v62, (uint64_t)qword_10170F5C0);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  uint64_t v63 = v78;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  v61(v60, v13);
  unint64_t v92 = v13;
  uint64_t v93 = &protocol witness table for Table;
  uint64_t v64 = sub_10001D958(v91);
  ((void (*)(uint64_t *, char *, unint64_t))v90)(v64, v63, v13);
  uint64_t v65 = sub_10019714C((uint64_t)v91, v86, sub_100182F78, &qword_10163CF48);
  v61(v63, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
  return v65;
}

uint64_t sub_10018D1D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2);
  uint64_t v61 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CF78);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163CF00);
  uint64_t v67 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v52 - v10;
  uint64_t v55 = sub_10000588C(&qword_10163CE68);
  uint64_t v68 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v53 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Table();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v54 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v57 = (char *)v52 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v60 = (char *)v52 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v64 = (char *)v52 - v22;
  uint64_t v65 = a1;
  uint64_t v23 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v70 = v21;
  uint64_t v71 = &protocol witness table for Table;
  uint64_t v24 = sub_10001D958(v69);
  uint64_t v66 = v14;
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
  v52[3] = v23;
  v52[1] = v14 + 16;
  v52[0] = v25;
  v25(v24, v23, v13);
  if (qword_1016374E0 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170F3F8);
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  uint64_t v26 = v53;
  == infix<A>(_:_:)();
  char v27 = *(void (**)(char *, uint64_t))(v67 + 8);
  v27(v9, v6);
  v27(v11, v6);
  int v28 = v54;
  QueryType.join(_:on:)();
  uint64_t v29 = v68 + 8;
  uint64_t v30 = v55;
  uint64_t v67 = *(void *)(v68 + 8);
  ((void (*)(char *, uint64_t))v67)(v26, v55);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
  uint64_t v31 = v13;
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v32 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v32, (uint64_t)qword_10170F530);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  unint64_t v33 = v56;
  ExpressionType<>.length.getter();
  v69[0] = 6;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v59);
  uint64_t v34 = v57;
  QueryType.filter(_:)();
  ((void (*)(char *, uint64_t))v67)(v26, v30);
  uint64_t v68 = v29;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v66 + 8);
  v35(v28, v13);
  char v36 = v60;
  if (qword_101637578 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v37, (uint64_t)qword_10170F5C0);
  uint64_t v38 = v61;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v39 = v63;
  >= infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v39);
  QueryType.filter(_:)();
  ((void (*)(char *, uint64_t))v67)(v26, v30);
  v35(v34, v31);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v40 = sub_10000588C(&qword_10163CE70);
  uint64_t v41 = sub_100010324(v40, (uint64_t)qword_10170F410);
  uint64_t v70 = v40;
  uint64_t v71 = (void *)sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v42 = sub_10001D958(v69);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v42, v41, v40);
  uint64_t v43 = v64;
  SchemaType.select(_:_:)();
  v35(v36, v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
  uint64_t v44 = v65;
  uint64_t v45 = sub_10018DC68();
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v70 = v31;
    uint64_t v71 = &protocol witness table for Table;
    BOOL v47 = sub_10001D958(v69);
    ((void (*)(uint64_t *, char *, uint64_t))v52[0])(v47, v43, v31);
    uint64_t v44 = v46;
    uint64_t v48 = v52[2];
    Connection.prepare(_:)();
    if (v48)
    {
      v35(v43, v31);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
      type metadata accessor for UUID();
      uint64_t v50 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
      swift_release();
      uint64_t v44 = sub_101158244(v50);
      swift_release();
      swift_bridgeObjectRelease();
      v35(v43, v31);
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v49 = 2;
    *(unsigned char *)(v49 + 4) = 1;
    swift_willThrow();
    v35(v43, v31);
  }
  return v44;
}

uint64_t sub_10018DB8C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 16);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10018DC68()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 16);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10018DD44()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = 0;
  if (v6 == 1)
  {
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v6)
    {
      uint64_t v4 = *(void *)(v6 + 16);
      swift_retain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10018DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163CF00);
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v51 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)v48 - v6;
  uint64_t v7 = sub_10000588C(&qword_10163CE68);
  uint64_t v55 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v54 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Table();
  uint64_t v60 = *(void *)(v58 - 8);
  uint64_t v9 = __chkstk_darwin(v58);
  uint64_t v59 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  uint64_t v57 = (char *)v48 - v12;
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v56 = v15;
  if (v13)
  {
    v64[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B765C(0, v13, 0);
    uint64_t v14 = (void *)v64[0];
    uint64_t v16 = sub_10115FE18(a1);
    uint64_t v18 = v17;
    int v20 = v19 & 1;
    uint64_t v62 = v7;
    uint64_t v63 = a1 + 56;
    while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v63 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_18;
      }
      if (*(_DWORD *)(a1 + 36) != v18) {
        goto LABEL_19;
      }
      LODWORD(v67) = v20;
      uint64_t v21 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      sub_1001A1790(*v21, v22);
      v64[0] = (uint64_t)v14;
      unint64_t v25 = v14[2];
      unint64_t v24 = v14[3];
      if (v25 >= v24 >> 1)
      {
        sub_1000B765C(v24 > 1, v25 + 1, 1);
        uint64_t v14 = (void *)v64[0];
      }
      v14[2] = v25 + 1;
      uint64_t v26 = &v14[2 * v25];
      v26[4] = v23;
      v26[5] = v22 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v27 = sub_10052CB9C(v16, v18, v67 & 1, a1);
      uint64_t v16 = v27;
      uint64_t v18 = v28;
      int v20 = v29 & 1;
      --v13;
      uint64_t v7 = v62;
      if (!v13)
      {
        sub_1001A1CB8(v27, v28, v20);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v67 = (uint64_t)v14;
    uint64_t v30 = (char *)(v61 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
    int64_t v13 = v58;
    uint64_t v65 = v58;
    uint64_t v66 = &protocol witness table for Table;
    uint64_t v31 = sub_10001D958(v64);
    uint64_t v32 = *(void (**)(uint64_t *, char *, int64_t))(v60 + 16);
    v48[1] = v30;
    uint64_t v63 = v60 + 16;
    uint64_t v49 = v32;
    v32(v31, v30, v13);
    if (qword_1016374E0 == -1) {
      goto LABEL_12;
    }
  }
  swift_once();
LABEL_12:
  uint64_t v33 = v53;
  sub_100010324(v53, (uint64_t)qword_10170F3F8);
  uint64_t v34 = v50;
  QueryType.subscript.getter();
  uint64_t v35 = v51;
  QueryType.subscript.getter();
  char v36 = v54;
  == infix<A>(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v52 + 8);
  v37(v35, v33);
  v37(v34, v33);
  QueryType.join(_:on:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v55 + 8);
  v38(v36, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
  v64[0] = v67;
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v39, (uint64_t)qword_10170F530);
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  sub_100062734(&qword_10163D008, (uint64_t *)&unk_10164DBD0);
  Collection<>.contains(_:)();
  swift_bridgeObjectRelease();
  uint64_t v40 = v56;
  uint64_t v41 = v59;
  QueryType.filter(_:)();
  v38(v36, v7);
  uint64_t v67 = *(void *)(v60 + 8);
  ((void (*)(char *, int64_t))v67)(v41, v13);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v42, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  uint64_t v43 = v57;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v44 = (void (*)(char *, int64_t))v67;
  ((void (*)(uint64_t, int64_t))v67)(v40, v13);
  uint64_t v65 = v13;
  uint64_t v66 = &protocol witness table for Table;
  uint64_t v45 = sub_10001D958(v64);
  v49(v45, v43, v13);
  uint64_t v46 = sub_10018E590();
  v44(v43, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
  return v46;
}

uint64_t sub_10018E590()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v68 = *(void (***)(char *, char *, uint64_t))(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v74 = (char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v60 - v4;
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v80 = (uint64_t)v60 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v79 = (char *)v60 - v13;
  __chkstk_darwin(v12);
  uint64_t v72 = (uint64_t)v60 - v14;
  uint64_t v15 = sub_10000588C(&qword_10163CEA8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v71 = (char *)v60 - v19;
  uint64_t v20 = type metadata accessor for Row();
  uint64_t v69 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v70 = (char *)v60 - v25;
  __chkstk_darwin(v24);
  unint64_t v73 = (char *)v60 - v26;
  uint64_t v27 = sub_10018DC68();
  if (!v27)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v41 = 2;
    *(unsigned char *)(v41 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v28 = v27;
  uint64_t v76 = v1;
  uint64_t v29 = Connection.prepare(_:)();
  if (v0) {
    return swift_release();
  }
  uint64_t v30 = v29;
  v60[0] = v28;
  swift_retain();
  uint64_t v31 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  uint64_t v82 = _swiftEmptyArrayStorage;
  sub_1000B7778(0, v31 & ~(v31 >> 63), 0);
  swift_retain();
  uint64_t v75 = dispatch thunk of _AnySequenceBox._makeIterator()();
  v60[1] = v30;
  uint64_t result = swift_release();
  if (v31 < 0)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }
  uint64_t v33 = v76;
  uint64_t v61 = v5;
  if (v31)
  {
    uint64_t v66 = (void (**)(char *, char *, uint64_t))(v69 + 16);
    uint64_t v67 = (uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
    uint64_t v64 = v9;
    uint64_t v65 = (void (**)(char *, uint64_t))(v69 + 8);
    uint64_t v62 = v68 + 4;
    uint64_t v63 = v23;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t result = (*v67)(v18, 1, v20);
      if (result == 1) {
        goto LABEL_41;
      }
      (*v66)(v23, v18, v20);
      if (qword_101637590 != -1) {
        swift_once();
      }
      uint64_t v34 = sub_10000588C(&qword_10163CF18);
      sub_100010324(v34, (uint64_t)qword_10170F608);
      Row.get<A>(_:)();
      *uint64_t v9 = v81;
      if (qword_101637598 != -1) {
        swift_once();
      }
      sub_100010324(v34, (uint64_t)qword_10170F620);
      Row.get<A>(_:)();
      v9[1] = v81;
      if (qword_1016375A0 != -1) {
        swift_once();
      }
      sub_100010324(v34, (uint64_t)qword_10170F638);
      Row.get<A>(_:)();
      v9[2] = v81;
      if (qword_1016375A8 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_10000588C(&qword_10163CE98);
      sub_100010324(v35, (uint64_t)qword_10170F650);
      char v36 = v74;
      Row.get<A>(_:)();
      uint64_t v37 = *v65;
      (*v65)(v23, v20);
      (*v62)((char *)v9 + *(int *)(v78 + 28), v36, v33);
      sub_1001A1CE4((uint64_t)v9, v80, type metadata accessor for ObservedAdvertisement.Location);
      v37(v18, v20);
      uint64_t v38 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7778(0, v38[2] + 1, 1);
        uint64_t v38 = v82;
      }
      unint64_t v40 = v38[2];
      unint64_t v39 = v38[3];
      if (v40 >= v39 >> 1)
      {
        sub_1000B7778(v39 > 1, v40 + 1, 1);
        uint64_t v38 = v82;
      }
      v38[2] = v40 + 1;
      sub_1001A1CE4(v80, (uint64_t)v38+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v40, type metadata accessor for ObservedAdvertisement.Location);
      --v31;
      uint64_t v33 = v76;
      uint64_t v23 = v63;
      uint64_t v9 = v64;
    }
    while (v31);
  }
  uint64_t v42 = (uint64_t)v71;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v43 = v69;
  uint64_t v44 = *(char **)(v69 + 48);
  uint64_t v80 = v69 + 48;
  uint64_t v74 = v44;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v44)(v42, 1, v20) != 1)
  {
    uint64_t v47 = *(void *)(v43 + 32);
    uint64_t v46 = v43 + 32;
    uint64_t v66 = (void (**)(char *, char *, uint64_t))(v46 - 24);
    uint64_t v67 = (uint64_t (**)(char *, uint64_t, uint64_t))(v46 - 16);
    v68 += 4;
    uint64_t v69 = v47;
    do
    {
      uint64_t v48 = v73;
      ((void (*)(char *, uint64_t, uint64_t))v69)(v73, v42, v20);
      uint64_t v49 = v70;
      (*v67)(v70, (uint64_t)v48, v20);
      if (qword_101637590 != -1) {
        swift_once();
      }
      uint64_t v50 = sub_10000588C(&qword_10163CF18);
      sub_100010324(v50, (uint64_t)qword_10170F608);
      Row.get<A>(_:)();
      *(void *)uint64_t v79 = v81;
      if (qword_101637598 != -1) {
        swift_once();
      }
      sub_100010324(v50, (uint64_t)qword_10170F620);
      Row.get<A>(_:)();
      *((void *)v79 + 1) = v81;
      if (qword_1016375A0 != -1) {
        swift_once();
      }
      sub_100010324(v50, (uint64_t)qword_10170F638);
      Row.get<A>(_:)();
      *((void *)v79 + 2) = v81;
      if (qword_1016375A8 != -1) {
        swift_once();
      }
      uint64_t v51 = sub_10000588C(&qword_10163CE98);
      sub_100010324(v51, (uint64_t)qword_10170F650);
      uint64_t v52 = v61;
      Row.get<A>(_:)();
      uint64_t v53 = v46;
      uint64_t v54 = *v66;
      ((void (*)(char *, uint64_t))*v66)(v49, v20);
      uint64_t v55 = (uint64_t)v79;
      (*v68)(&v79[*(int *)(v78 + 28)], v52, v33);
      sub_1001A1CE4(v55, v72, type metadata accessor for ObservedAdvertisement.Location);
      ((void (*)(char *, uint64_t))v54)(v73, v20);
      uint64_t v56 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7778(0, v56[2] + 1, 1);
        uint64_t v56 = v82;
      }
      uint64_t v42 = (uint64_t)v71;
      uint64_t v46 = v53;
      unint64_t v58 = v56[2];
      unint64_t v57 = v56[3];
      if (v58 >= v57 >> 1)
      {
        sub_1000B7778(v57 > 1, v58 + 1, 1);
        uint64_t v56 = v82;
      }
      v56[2] = v58 + 1;
      sub_1001A1CE4(v72, (uint64_t)v56+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v58, type metadata accessor for ObservedAdvertisement.Location);
      dispatch thunk of _AnyIteratorBoxBase.next()();
      int v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v74)(v42, 1, v20);
      uint64_t v33 = v76;
    }
    while (v59 != 1);
  }
  swift_release();
  sub_10001DAB4(v42, &qword_10163CEA8);
  swift_release();
  swift_release_n();
  uint64_t v45 = v82;
  sub_10000588C(&qword_10163D010);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v45;
  return result;
}

uint64_t sub_10018F1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v106 = a2;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v90 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000588C(&qword_10163CFF8);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v89 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000588C(&qword_10163CF78);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v81 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000588C(&qword_10163CF00);
  uint64_t v95 = *(void *)(v97 - 8);
  uint64_t v6 = __chkstk_darwin(v97);
  uint64_t v77 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v79 = (char *)&v70 - v8;
  uint64_t v99 = sub_10000588C(&qword_10163CE68);
  uint64_t v110 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v101 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for JoinType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v96 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v100 = (char *)&v70 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v80 = (char *)&v70 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v84 = (char *)&v70 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v85 = (char *)&v70 - v25;
  __chkstk_darwin(v24);
  uint64_t v86 = (char *)&v70 - v26;
  uint64_t v27 = sub_10000588C(&qword_10163CF40);
  uint64_t v87 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062734(&qword_10163D000, &qword_10163CF40);
  uint64_t v104 = v29;
  uint64_t v88 = v27;
  ExpressionType.init(_:)();
  uint64_t v30 = v106;
  uint64_t v31 = v106 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v105 = v11;
  uint64_t v32 = *(void (**)(void))(v11 + 104);
  uint64_t v94 = v13;
  unsigned int v76 = enum case for JoinType.leftOuter(_:);
  uint64_t v98 = v10;
  uint64_t v75 = v11 + 104;
  uint64_t v74 = (void (*)(char *, void, uint64_t))v32;
  v32(v13);
  uint64_t v33 = (void (*)(char *, uint64_t))(v30
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  uint64_t v108 = v14;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v34 = sub_10001D958(&v107);
  uint64_t v78 = v15;
  uint64_t v35 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v72 = v33;
  uint64_t v102 = v35;
  uint64_t v103 = v15 + 16;
  v35(v34, (uint64_t)v33, v14);
  if (qword_1016374E0 != -1) {
    swift_once();
  }
  uint64_t v36 = v97;
  uint64_t v73 = sub_100010324(v97, (uint64_t)qword_10170F3F8);
  uint64_t v37 = v79;
  uint64_t v70 = v31;
  QueryType.subscript.getter();
  uint64_t v38 = v77;
  QueryType.subscript.getter();
  unint64_t v39 = v101;
  == infix<A>(_:_:)();
  unint64_t v40 = *(void (**)(char *, uint64_t))(v95 + 8);
  uint64_t v72 = v40;
  v40(v38, v36);
  v40(v37, v36);
  uint64_t v41 = v94;
  QueryType.join(_:_:on:)();
  uint64_t v42 = v41;
  uint64_t v95 = *(void *)(v110 + 8);
  v110 += 8;
  ((void (*)(char *, uint64_t))v95)(v39, v99);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v105 + 8);
  v105 += 8;
  uint64_t v71 = v43;
  uint64_t v44 = v41;
  uint64_t v45 = v98;
  v43(v44, v98);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v107);
  v74(v42, v76, v45);
  uint64_t v46 = v106 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v108 = v14;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v47 = sub_10001D958(&v107);
  v102(v47, v46, v14);
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v48 = v97;
  uint64_t v49 = v72;
  v72(v38, v97);
  v49(v37, v48);
  uint64_t v50 = v94;
  uint64_t v51 = v96;
  QueryType.join(_:_:on:)();
  uint64_t v52 = v39;
  uint64_t v53 = v99;
  ((void (*)(char *, uint64_t))v95)(v52, v99);
  v71(v50, v98);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v78 + 8);
  v54(v51, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v107);
  if (qword_101637548 != -1) {
    swift_once();
  }
  uint64_t v55 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v55, (uint64_t)qword_10170F530);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  uint64_t v56 = v81;
  ExpressionType<>.length.getter();
  uint64_t v107 = 28;
  unint64_t v57 = v101;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v56, v83);
  unint64_t v58 = v80;
  int v59 = v100;
  QueryType.filter(_:)();
  ((void (*)(char *, uint64_t))v95)(v57, v53);
  v54(v59, v14);
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v61 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v90, 1, 1, v60);
  uint64_t v62 = v89;
  == infix<A>(_:_:)();
  sub_10001DAB4(v61, &qword_101638CF0);
  uint64_t v63 = v84;
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v62, v92);
  v54(v58, v14);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_101637578 != -1) {
    swift_once();
  }
  uint64_t v64 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v64, (uint64_t)qword_10170F5C0);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.asc.getter();
  uint64_t v65 = v85;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  v54(v63, v14);
  uint64_t v66 = v86;
  QueryType.limit(_:)();
  v54(v65, v14);
  uint64_t v108 = v14;
  uint64_t v109 = &protocol witness table for Table;
  uint64_t v67 = sub_10001D958(&v107);
  v102(v67, (uint64_t)v66, v14);
  uint64_t v68 = sub_10019714C((uint64_t)&v107, v106, sub_100182F78, &qword_10163CF48);
  v54(v66, v14);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v104, v88);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v107);
  return v68;
}

uint64_t sub_10018FF20(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v3 = sub_10000588C(&qword_10163CEA8);
  __chkstk_darwin(v3 - 8);
  uint64_t v62 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Row();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163CF00);
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v58 - v13;
  uint64_t v79 = sub_10000588C(&qword_10163CE68);
  uint64_t v71 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v78 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Table();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v69 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v70 = (char *)&v58 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v72 = (char *)&v58 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v74 = (char *)&v58 - v25;
  __chkstk_darwin(v24);
  uint64_t v77 = (char *)&v58 - v26;
  if (sub_10018DC68())
  {
    int v59 = v8;
    uint64_t v60 = v6;
    uint64_t v61 = v5;
    uint64_t v64 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    uint64_t v27 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo);
    uint64_t v81 = v16;
    uint64_t v82 = &protocol witness table for Table;
    uint64_t v28 = sub_10001D958(v80);
    uint64_t v67 = v17;
    uint64_t v29 = *(void (**)(uint64_t *, char *, uint64_t))(v17 + 16);
    uint64_t v63 = v27;
    uint64_t v65 = v29;
    uint64_t v66 = v17 + 16;
    v29(v28, v27, v16);
    if (qword_1016374E0 != -1) {
      swift_once();
    }
    sub_100010324(v9, (uint64_t)qword_10170F3F8);
    QueryType.subscript.getter();
    QueryType.subscript.getter();
    uint64_t v30 = v78;
    == infix<A>(_:_:)();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v68 + 8);
    v31(v12, v9);
    v31(v14, v9);
    uint64_t v32 = v69;
    QueryType.join(_:on:)();
    uint64_t v71 = *(void *)(v71 + 8);
    ((void (*)(char *, uint64_t))v71)(v30, v79);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
    uint64_t v33 = v16;
    if (qword_101637550 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_10000588C(&qword_10163CE78);
    uint64_t v35 = sub_100010324(v34, (uint64_t)qword_10170F548);
    uint64_t v81 = v34;
    uint64_t v82 = (void *)sub_100062734(&qword_10163CFB8, &qword_10163CE78);
    uint64_t v36 = sub_10001D958(v80);
    uint64_t v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
    uint64_t v68 = v35;
    v37(v36, v35, v34);
    uint64_t v38 = v70;
    SchemaType.select(_:_:)();
    unint64_t v39 = v32;
    unint64_t v40 = *(void (**)(char *, uint64_t))(v67 + 8);
    v40(v39, v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
    uint64_t v41 = v72;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v42, (uint64_t)qword_10170F410);
    type metadata accessor for BeaconIdentifier();
    type metadata accessor for UUID();
    uint64_t v43 = v78;
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    ((void (*)(char *, uint64_t))v71)(v43, v79);
    v40(v38, v33);
    sub_10000588C(&qword_10163CE90);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
    uint64_t v44 = v41;
    if (qword_101637578 != -1) {
      swift_once();
    }
    uint64_t v45 = sub_10000588C(&qword_10163CE98);
    sub_100010324(v45, (uint64_t)qword_10170F5C0);
    sub_100062734(&qword_10163CEA0, &qword_10163CE98);
    ExpressionType.desc.getter();
    uint64_t v46 = v74;
    QueryType.order(_:)();
    swift_bridgeObjectRelease();
    v40(v44, v33);
    uint64_t v47 = v77;
    QueryType.limit(_:)();
    v40(v46, v33);
    uint64_t v81 = v33;
    uint64_t v82 = &protocol witness table for Table;
    uint64_t v48 = sub_10001D958(v80);
    v65(v48, v47, v33);
    uint64_t v49 = v75;
    Connection.prepare(_:)();
    if (v49)
    {
      v40(v47, v33);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      uint64_t v52 = (uint64_t)v62;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      swift_release();
      uint64_t v53 = v60;
      uint64_t v54 = v61;
      int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v52, 1, v61);
      if (v55 == 1)
      {
        v40(v77, v33);
        swift_release();
        sub_10001DAB4(v52, &qword_10163CEA8);
        int v56 = 0;
      }
      else
      {
        unint64_t v57 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v59, v52, v54);
        sub_1001A1448();
        Row.subscript.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v57, v54);
        v40(v77, v33);
        int v56 = LOBYTE(v80[0]);
      }
      return v56 | ((v55 == 1) << 8);
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v51 = 2;
    *(unsigned char *)(v51 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100190910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = a1;
  v52[1] = a3;
  uint64_t v71 = sub_10000588C(&qword_10163CF00);
  uint64_t v69 = *(void *)(v71 - 8);
  uint64_t v4 = __chkstk_darwin(v71);
  uint64_t v6 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v52 - v7;
  uint64_t v73 = sub_10000588C(&qword_10163CE68);
  uint64_t v77 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v82 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for JoinType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v70 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v60 = (char *)v52 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v63 = (char *)v52 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v65 = (char *)v52 - v23;
  __chkstk_darwin(v22);
  uint64_t v66 = (char *)v52 - v24;
  uint64_t v68 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v78 = v11;
  uint64_t v25 = *(void (**)(void))(v11 + 104);
  uint64_t v61 = v13;
  unsigned int v59 = enum case for JoinType.leftOuter(_:);
  uint64_t v72 = v10;
  uint64_t v58 = v11 + 104;
  unint64_t v57 = (void (*)(char *, void, uint64_t))v25;
  v25(v13);
  uint64_t v76 = a2;
  uint64_t v26 = (void (*)(char *, uint64_t))(a2
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  uint64_t v80 = v14;
  uint64_t v81 = &protocol witness table for Table;
  uint64_t v27 = sub_10001D958(v79);
  uint64_t v62 = v15;
  uint64_t v28 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  int v55 = v26;
  uint64_t v74 = v28;
  uint64_t v75 = v15 + 16;
  v28(v27, (uint64_t)v26, v14);
  if (qword_1016374E0 != -1) {
    swift_once();
  }
  uint64_t v29 = v71;
  uint64_t v56 = sub_100010324(v71, (uint64_t)qword_10170F3F8);
  QueryType.subscript.getter();
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v53 = v6;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v69 + 8);
  int v55 = v30;
  v30(v6, v29);
  v30(v8, v29);
  uint64_t v31 = v61;
  QueryType.join(_:_:on:)();
  uint64_t v69 = *(void *)(v77 + 8);
  v77 += 8;
  ((void (*)(char *, uint64_t))v69)(v82, v73);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v78 + 8);
  v78 += 8;
  uint64_t v54 = v32;
  uint64_t v33 = v72;
  v32(v31, v72);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
  v57(v31, v59, v33);
  uint64_t v34 = v76 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v80 = v14;
  uint64_t v81 = &protocol witness table for Table;
  uint64_t v35 = sub_10001D958(v79);
  v74(v35, v34, v14);
  QueryType.subscript.getter();
  uint64_t v36 = v53;
  QueryType.subscript.getter();
  == infix<A>(_:_:)();
  uint64_t v37 = v71;
  uint64_t v38 = v55;
  v55(v36, v71);
  v38(v8, v37);
  unint64_t v39 = v82;
  unint64_t v40 = v60;
  uint64_t v41 = v70;
  QueryType.join(_:_:on:)();
  uint64_t v42 = v73;
  ((void (*)(char *, uint64_t))v69)(v39, v73);
  v54(v31, v72);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v62 + 8);
  v43(v41, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v44 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v44, (uint64_t)qword_10170F410);
  type metadata accessor for BeaconIdentifier();
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  uint64_t v45 = v63;
  QueryType.filter(_:)();
  ((void (*)(char *, uint64_t))v69)(v39, v42);
  v43(v40, v14);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_101637578 != -1) {
    swift_once();
  }
  uint64_t v46 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v46, (uint64_t)qword_10170F5C0);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  uint64_t v47 = v65;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  v43(v45, v14);
  uint64_t v48 = v66;
  QueryType.limit(_:)();
  v43(v47, v14);
  uint64_t v80 = v14;
  uint64_t v81 = &protocol witness table for Table;
  uint64_t v49 = sub_10001D958(v79);
  v74(v49, (uint64_t)v48, v14);
  uint64_t v50 = v67;
  sub_10019714C((uint64_t)v79, v76, sub_100182F78, &qword_10163CF48);
  if (v50)
  {
    v43(v48, v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v43)(v48, v14);
  }
}

uint64_t sub_1001912C4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163CF78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000588C(&qword_10163CF00);
  uint64_t v88 = *(void *)(v99 - 8);
  uint64_t v6 = __chkstk_darwin(v99);
  uint64_t v87 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v86 = (char *)v67 - v8;
  uint64_t v96 = sub_10000588C(&qword_10163CE68);
  uint64_t v101 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v95 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for JoinType();
  uint64_t v100 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163CFA0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v91 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v94 = (char *)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v89 = (char *)v67 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v67 - v20;
  uint64_t v90 = sub_10018DC68();
  if (v90)
  {
    uint64_t v81 = v12;
    uint64_t v82 = v11;
    uint64_t v83 = v5;
    uint64_t v84 = v3;
    uint64_t v85 = v2;
    uint64_t v22 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
    uint64_t v23 = a1;
    if (qword_1016374E0 != -1) {
      swift_once();
    }
    uint64_t v24 = v99;
    uint64_t v25 = sub_100010324(v99, (uint64_t)qword_10170F3F8);
    uint64_t v103 = v24;
    uint64_t v104 = (void *)sub_100062734(&qword_10163CF38, &qword_10163CF00);
    sub_10001D958(v102);
    QueryType.subscript.getter();
    uint64_t v93 = v21;
    SchemaType.select(_:_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v102);
    Swift::String v26 = Expressible.asSQL()();
    uint64_t countAndFlagsBits = v26._countAndFlagsBits;
    object = v26._object;
    uint64_t v76 = v22;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v77 = v15 + 8;
    uint64_t v78 = v27;
    v27(v21, v14);
    uint64_t v28 = v23 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    unsigned int v75 = enum case for JoinType.leftOuter(_:);
    uint64_t v29 = *(void (**)(void))(v100 + 104);
    uint64_t v71 = v100 + 104;
    uint64_t v74 = (void (*)(char *, void, uint64_t))v29;
    v29(v97);
    uint64_t v30 = v23 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
    uint64_t v103 = v14;
    uint64_t v104 = &protocol witness table for Table;
    uint64_t v31 = sub_10001D958(v102);
    uint64_t v32 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v72 = v15 + 16;
    uint64_t v73 = v32;
    v32(v31, v30, v14);
    uint64_t v33 = v86;
    uint64_t v69 = v25;
    v67[1] = v28;
    QueryType.subscript.getter();
    uint64_t v34 = v87;
    QueryType.subscript.getter();
    uint64_t v35 = v95;
    == infix<A>(_:_:)();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v88 + 8);
    uint64_t v68 = v36;
    uint64_t v37 = v99;
    v36(v34, v99);
    v36(v33, v37);
    uint64_t v38 = v97;
    QueryType.join(_:_:on:)();
    uint64_t v88 = *(void *)(v101 + 8);
    v101 += 8;
    ((void (*)(char *, uint64_t))v88)(v35, v96);
    unint64_t v39 = *(void (**)(char *, uint64_t))(v100 + 8);
    v100 += 8;
    uint64_t v70 = v39;
    uint64_t v40 = v98;
    v39(v38, v98);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v102);
    v74(v38, v75, v40);
    uint64_t v103 = v14;
    uint64_t v104 = &protocol witness table for Table;
    uint64_t v41 = sub_10001D958(v102);
    v73(v41, v76, v14);
    QueryType.subscript.getter();
    QueryType.subscript.getter();
    uint64_t v42 = v95;
    == infix<A>(_:_:)();
    uint64_t v43 = v99;
    uint64_t v44 = v68;
    v68(v34, v99);
    v44(v33, v43);
    uint64_t v45 = v89;
    uint64_t v46 = v97;
    uint64_t v47 = v94;
    QueryType.join(_:_:on:)();
    uint64_t v48 = v96;
    uint64_t v49 = (void (*)(char *, uint64_t))v88;
    ((void (*)(char *, uint64_t))v88)(v42, v96);
    v70(v46, v98);
    uint64_t v50 = v78;
    v78(v47, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v102);
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v51._object = (void *)0x80000001013F4360;
    v51._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v51);
    uint64_t v105 = 28;
    v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v53._object = (void *)0x80000001013F4380;
    String.append(_:)(v53);
    v54._uint64_t countAndFlagsBits = countAndFlagsBits;
    v54._object = object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._uint64_t countAndFlagsBits = 41;
    v55._object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    sub_100062734(&qword_10163CFC8, &qword_10163CE68);
    ExpressionType.init(literal:)();
    QueryType.filter(_:)();
    uint64_t v56 = v42;
    unint64_t v57 = v50;
    v49(v56, v48);
    v50(v45, v14);
    if (qword_101637548 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_10000588C(&qword_10163CF58);
    sub_100010324(v58, (uint64_t)qword_10170F530);
    sub_100062734(&qword_10163CF80, &qword_10163CF58);
    unsigned int v59 = v83;
    ExpressionType<>.count.getter();
    uint64_t v60 = v91;
    uint64_t v61 = v93;
    SchemaType.select<A>(_:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v59, v85);
    v57(v61, v14);
    a1 = v90;
    uint64_t v62 = v92;
    Connection.scalar<A>(_:)();
    uint64_t v63 = v82;
    uint64_t v64 = v81;
    if (v62)
    {
      (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v82);
      swift_release();
    }
    else
    {
      swift_release();
      a1 = v102[0];
      (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v63);
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v65 = 2;
    *(unsigned char *)(v65 + 4) = 1;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_100191E80@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v40 = a2;
  v39[0] = a4;
  v39[1] = a1;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v39 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v39 - v13;
  uint64_t v15 = type metadata accessor for Table();
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v39 - v20;
  __chkstk_darwin(v19);
  uint64_t v45 = (char *)v39 - v22;
  uint64_t v42 = a3;
  v39[2] = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v23, (uint64_t)qword_10170F410);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  if (qword_1016375B0 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v24, (uint64_t)qword_10170F668);
  LOBYTE(v44[0]) = v40;
  sub_1001A1448();
  == infix<A>(_:_:)();
  && infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v9, v5);
  v25(v12, v5);
  QueryType.filter(_:)();
  v25(v14, v5);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v26, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v41;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v28(v18, v15);
  uint64_t v29 = v45;
  QueryType.limit(_:)();
  v28(v21, v15);
  void v44[3] = v15;
  v44[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v30 = sub_10001D958(v44);
  (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(v30, v29, v15);
  uint64_t v31 = v43;
  sub_100192424();
  if (v31)
  {
    v28(v29, v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    uint64_t v33 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = type metadata accessor for KeySyncMetadata();
    uint64_t v36 = *(void *)(v35 - 8);
    if (v34)
    {
      uint64_t v37 = v39[0];
      sub_1001A1C50(v33+ ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v35 - 8) + 80)), v39[0], (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = 1;
      uint64_t v37 = v39[0];
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, v38, 1, v35);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v28)(v29, v15);
  }
}

uint64_t sub_100192424()
{
  uint64_t v1 = type metadata accessor for KeySyncMetadata();
  uint64_t v56 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v45 - v5;
  uint64_t v7 = sub_10000588C(&qword_10163CEA8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v45 - v11;
  uint64_t v13 = type metadata accessor for Row();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  Swift::String v54 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v49 = (char *)v45 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v45 - v18;
  uint64_t v20 = sub_10018DC68();
  if (!v20)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = 2;
    *(unsigned char *)(v23 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v21 = v20;
  uint64_t v48 = v19;
  uint64_t v22 = Connection.prepare(_:)();
  if (v0) {
    return swift_release();
  }
  uint64_t v24 = v22;
  v45[2] = v21;
  uint64_t v47 = v12;
  swift_retain();
  uint64_t v25 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  unint64_t v57 = _swiftEmptyArrayStorage;
  sub_1000B6FD0(0, v25 & ~(v25 >> 63), 0);
  swift_retain();
  uint64_t v55 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t result = swift_release();
  if (v25 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v45[1] = v24;
  uint64_t v46 = v6;
  if (v25)
  {
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v53 + 16);
    Swift::String v51 = (void (**)(char *, uint64_t))(v53 + 8);
    Swift::String v52 = (uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
    uint64_t v50 = v4;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t result = (*v52)(v10, 1, v13);
      if (result == 1) {
        goto LABEL_25;
      }
      uint64_t v27 = (uint64_t)v54;
      (*v26)(v54, v10, v13);
      sub_10019CB30(v27, (uint64_t)v4);
      (*v51)(v10, v13);
      uint64_t v28 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6FD0(0, v28[2] + 1, 1);
        uint64_t v28 = v57;
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        sub_1000B6FD0(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v57;
      }
      v28[2] = v30 + 1;
      uint64_t v31 = (uint64_t)v28
          + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))
          + *(void *)(v56 + 72) * v30;
      uint64_t v4 = v50;
      sub_1001A1CE4((uint64_t)v50, v31, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    }
    while (--v25);
  }
  uint64_t v32 = v47;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v33 = v53;
  Swift::String v54 = *(char **)(v53 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v54)(v32, 1, v13) == 1)
  {
    uint64_t v34 = (uint64_t)v47;
  }
  else
  {
    Swift::String v52 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v33 + 32);
    uint64_t v53 = v33 + 32;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v33 + 16);
    uint64_t v37 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v38 = (uint64_t)v46;
    uint64_t v34 = (uint64_t)v47;
    unint64_t v39 = v48;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v52)(v39, v34, v13);
      uint64_t v40 = (uint64_t)v49;
      (*v36)(v49, v39, v13);
      sub_10019CB30(v40, v38);
      (*v37)(v39, v13);
      uint64_t v41 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6FD0(0, v41[2] + 1, 1);
        uint64_t v41 = v57;
      }
      unint64_t v43 = v41[2];
      unint64_t v42 = v41[3];
      if (v43 >= v42 >> 1)
      {
        sub_1000B6FD0(v42 > 1, v43 + 1, 1);
        uint64_t v41 = v57;
      }
      v41[2] = v43 + 1;
      uint64_t v38 = (uint64_t)v46;
      sub_1001A1CE4((uint64_t)v46, (uint64_t)v41+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v43, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v34 = (uint64_t)v47;
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v54)(v34, 1, v13) != 1);
  }
  swift_release();
  sub_10001DAB4(v34, &qword_10163CEA8);
  swift_release();
  swift_release_n();
  uint64_t v35 = v57;
  sub_10000588C(&qword_10163CEB8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v35;
  return result;
}

uint64_t sub_100192AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for KeySyncMetadata();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10166CF60);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  sub_100191E80(a1, *(unsigned __int8 *)(a1 + *(int *)(v5 + 20)), a2, (uint64_t)v12);
  if (v2)
  {
    if (qword_1016368D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170D7E8);
    sub_1001A1C50(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v32 = v6;
      uint64_t v20 = v19;
      unint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)uint64_t v20 = 141558531;
      uint64_t v33 = 1752392040;
      int v29 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2081;
      v27[1] = v20 + 14;
      type metadata accessor for UUID();
      sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v28 = v16;
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = sub_1008FA0F0(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A1D4C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      *(_WORD *)(v20 + 22) = 2114;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v33 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v30 = v23;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v24 = v28;
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Last key sync value could not be read for beacon %{private,mask.hash}s, %{public}@", (uint8_t *)v20, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v32;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1001A1D4C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  }
  else
  {
    sub_10001D608((uint64_t)v12, (uint64_t)v14, (uint64_t *)&unk_10166CF60);
  }
  char v25 = sub_1010F2604(a1, (uint64_t)v14);
  sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10166CF60);
  return v25 & 1;
}

uint64_t sub_100192F74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for KeySyncMetadata();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v45 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t)&v45 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = type metadata accessor for Connection.TransactionMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  int v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1009FCF40();
  if (v19)
  {
    uint64_t v50 = v5;
    Swift::String v51 = v8;
    uint64_t v20 = __chkstk_darwin(v19);
    *(&v45 - 4) = a2;
    *(&v45 - 3) = a1;
    *(&v45 - 2) = v20;
    uint64_t v21 = v20;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Connection.TransactionMode.deferred(_:), v15);
    Connection.transaction(_:block:)();
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return swift_release();
    }
    else
    {
      uint64_t v49 = v21;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (qword_1016368D8 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170D7E8);
      sub_1001A1C50(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v25 = v53;
      sub_1001A1C50(a1, v53, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v26 = v52;
      sub_1001A1C50(a1, v52, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v27 = (uint64_t)v51;
      sub_1001A1C50(a1, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      os_log_t v28 = Logger.logObject.getter();
      int v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, (os_log_type_t)v29))
      {
        int v47 = v29;
        os_log_t v48 = v28;
        uint64_t v30 = swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v55 = v46;
        *(_DWORD *)uint64_t v30 = 141559043;
        uint64_t v54 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v54 = sub_1008FA0F0(v31, v32, &v55);
        uint64_t v33 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v30 + 22) = 2082;
        uint64_t v34 = v50;
        unint64_t v35 = 0xE800000000000000;
        uint64_t v36 = 0x6E776F6E6B6E752ELL;
        switch(*(unsigned char *)(v33 + *(int *)(v50 + 20)))
        {
          case 1:
            unint64_t v35 = 0xEA00000000007265;
            uint64_t v36 = 0x6E774F7261656E2ELL;
            break;
          case 2:
            unint64_t v35 = 0xEF64657461726170;
            uint64_t v36 = 0x6553686374616C2ELL;
            break;
          case 3:
            uint64_t v36 = 0xD00000000000001CLL;
            unint64_t v35 = 0x80000001013F2A30;
            break;
          case 4:
            unint64_t v35 = 0x80000001013F2A10;
            uint64_t v36 = 0xD000000000000018;
            break;
          case 5:
            unint64_t v35 = 0xEC0000007972616DLL;
            uint64_t v36 = 0x697250646C69772ELL;
            break;
          case 6:
            unint64_t v35 = 0xEE00797261646E6FLL;
            uint64_t v36 = 0x636553646C69772ELL;
            break;
          case 7:
            uint64_t v36 = 0x736142746E69682ELL;
            unint64_t v35 = 0xEA00000000006465;
            break;
          case 8:
            unint64_t v35 = 0xED0000746E656D6ELL;
            uint64_t v36 = 0x67696C4179656B2ELL;
            break;
          default:
            break;
        }
        uint64_t v54 = sub_1008FA0F0(v36, v35, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C(v33, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v30 + 32) = 2082;
        uint64_t v37 = (void *)(v26 + *(int *)(v34 + 24));
        uint64_t v38 = v37[3];
        sub_10001CD44(v37, v38);
        uint64_t v39 = sub_1010EC7E8(v38);
        uint64_t v54 = sub_1008FA0F0(v39, v40, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C(v26, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v30 + 42) = 2082;
        uint64_t v41 = (uint64_t)v51;
        type metadata accessor for Date();
        sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v54 = sub_1008FA0F0(v42, v43, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        os_log_t v44 = v48;
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v47, "Updated key sync metadata for %{private,mask.hash}s, type: %{public}s, %{public}s, %{public}s.", (uint8_t *)v30, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001A1D4C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        sub_1001A1D4C(v25, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        sub_1001A1D4C(v26, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        sub_1001A1D4C(v27, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      }
      return swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = 2;
    *(unsigned char *)(v23 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100193768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v94 = a1;
  uint64_t v91 = a3;
  uint64_t v87 = type metadata accessor for KeySyncMetadata();
  uint64_t v4 = __chkstk_darwin(v87);
  uint64_t v90 = (void (*)(char *, uint64_t))((char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v92 = (uint64_t)&v75 - v7;
  __chkstk_darwin(v6);
  uint64_t v89 = (uint64_t)&v75 - v8;
  uint64_t v84 = type metadata accessor for OnConflict();
  uint64_t v86 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v85 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Insert();
  uint64_t v83 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163CE68);
  uint64_t v88 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Table();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v75 - v21;
  uint64_t v23 = v93;
  uint64_t result = sub_100192AD4(a2, v94);
  if (!v23)
  {
    uint64_t v78 = v20;
    uint64_t v79 = v17;
    uint64_t v80 = v13;
    uint64_t v81 = v22;
    uint64_t v76 = v12;
    uint64_t v82 = v16;
    uint64_t v77 = v10;
    uint64_t v93 = a2;
    if (result)
    {
      uint64_t v92 = 0;
      uint64_t v25 = v93;
      if (qword_1016374E8 != -1) {
        swift_once();
      }
      uint64_t v26 = sub_10000588C(&qword_10163CE70);
      uint64_t v27 = sub_100010324(v26, (uint64_t)qword_10170F410);
      uint64_t v28 = type metadata accessor for UUID();
      == infix<A>(_:_:)();
      int v29 = v78;
      uint64_t v30 = v82;
      QueryType.filter(_:)();
      uint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v15, v80);
      unint64_t v32 = v81;
      QueryType.limit(_:)();
      uint64_t v33 = v79;
      uint64_t v34 = *(void (**)(char *, uint64_t))(v79 + 8);
      unint64_t v35 = v29;
      uint64_t v36 = v79 + 8;
      v34(v35, v31);
      v95[3] = v31;
      v95[4] = (uint64_t)&protocol witness table for Table;
      uint64_t v37 = sub_10001D958(v95);
      (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v37, v32, v31);
      uint64_t v38 = v92;
      Connection.prepare(_:)();
      uint64_t v92 = v38;
      if (v38)
      {
        v34(v32, v31);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v95);
      }
      else
      {
        uint64_t v88 = v28;
        uint64_t v89 = v27;
        uint64_t v90 = v34;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v95);
        uint64_t v53 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
        swift_release();
        uint64_t v54 = *(void *)(v53 + 16);
        swift_release();
        if (v54)
        {
          uint64_t v79 = v36;
          uint64_t v75 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
          (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, enum case for OnConflict.replace(_:), v84);
          sub_10000588C(&qword_10163CF10);
          type metadata accessor for Setter();
          uint64_t v55 = swift_allocObject();
          *(_OWORD *)(v55 + 16) = xmmword_10134BFA0;
          uint64_t v78 = (char *)v55;
          <- infix<A>(_:_:)();
          if (qword_1016375B0 != -1) {
            swift_once();
          }
          uint64_t v56 = sub_10000588C(&qword_10163CE78);
          sub_100010324(v56, (uint64_t)qword_10170F668);
          uint64_t v57 = v87;
          LOBYTE(v95[0]) = *(unsigned char *)(v25 + *(int *)(v87 + 20));
          sub_1001A1448();
          <- infix<A>(_:_:)();
          if (qword_1016374F8 != -1) {
            swift_once();
          }
          sub_100010324(v56, (uint64_t)qword_10170F440);
          uint64_t v58 = (void *)(v25 + *(int *)(v57 + 24));
          uint64_t v60 = v58[3];
          uint64_t v59 = v58[4];
          sub_10001CD44(v58, v60);
          LOBYTE(v95[0]) = sub_100EB7B8C(v60, v59);
          <- infix<A>(_:_:)();
          if (qword_101637500 != -1) {
            swift_once();
          }
          sub_100010324(v80, (uint64_t)qword_10170F458);
          uint64_t v61 = v58[3];
          sub_10001CD44(v58, v61);
          LOBYTE(v95[0]) = sub_1009D0F1C(v61) & 1;
          <- infix<A>(_:_:)();
          uint64_t v62 = v86;
          if (qword_1016374F0 != -1) {
            swift_once();
          }
          uint64_t v63 = sub_10000588C(&qword_10163CEC8);
          sub_100010324(v63, (uint64_t)qword_10170F428);
          sub_10001CD44(v58, v58[3]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v96 = v95[0];
          sub_1001A1544();
          <- infix<A>(_:_:)();
          if (qword_1016375A8 != -1) {
            swift_once();
          }
          uint64_t v64 = sub_10000588C(&qword_10163CE98);
          sub_100010324(v64, (uint64_t)qword_10170F650);
          type metadata accessor for Date();
          <- infix<A>(_:_:)();
          uint64_t v65 = v76;
          uint64_t v66 = v85;
          uint64_t v67 = v82;
          QueryType.insert(or:_:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v84);
          Connection.run(_:)();
          uint64_t v68 = v81;
          uint64_t v69 = (uint64_t (*)(char *, uint64_t))v90;
          (*(void (**)(char *, uint64_t))(v83 + 8))(v65, v77);
          return v69(v68, v67);
        }
        else
        {
          sub_1001A1BC4();
          swift_allocError();
          swift_willThrow();
          return ((uint64_t (*)(char *, uint64_t))v90)(v32, v31);
        }
      }
    }
    else
    {
      uint64_t v39 = v93;
      if (qword_1016368D8 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170D7E8);
      uint64_t v41 = v89;
      sub_1001A1C50(v39, v89, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v42 = v92;
      sub_1001A1C50(v39, v92, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      unint64_t v43 = v90;
      sub_1001A1C50(v39, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      os_log_t v44 = Logger.logObject.getter();
      int v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, (os_log_type_t)v45))
      {
        LODWORD(v94) = v45;
        uint64_t v46 = swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        v95[0] = v93;
        *(_DWORD *)uint64_t v46 = 141558787;
        uint64_t v96 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v46 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v96 = sub_1008FA0F0(v47, v48, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v46 + 22) = 2082;
        uint64_t v49 = v87;
        uint64_t v50 = *(unsigned __int8 *)(v42 + *(int *)(v87 + 20));
        unint64_t v51 = 0xE800000000000000;
        uint64_t v52 = 0x6E776F6E6B6E752ELL;
        switch(v50)
        {
          case 1:
            unint64_t v51 = 0xEA00000000007265;
            uint64_t v52 = 0x6E774F7261656E2ELL;
            break;
          case 2:
            unint64_t v51 = 0xEF64657461726170;
            uint64_t v52 = 0x6553686374616C2ELL;
            break;
          case 3:
            uint64_t v52 = 0xD00000000000001CLL;
            unint64_t v51 = 0x80000001013F2A30;
            break;
          case 4:
            unint64_t v51 = 0x80000001013F2A10;
            uint64_t v52 = 0xD000000000000018;
            break;
          case 5:
            unint64_t v51 = 0xEC0000007972616DLL;
            uint64_t v52 = 0x697250646C69772ELL;
            break;
          case 6:
            unint64_t v51 = 0xEE00797261646E6FLL;
            uint64_t v52 = 0x636553646C69772ELL;
            break;
          case 7:
            uint64_t v52 = 0x736142746E69682ELL;
            unint64_t v51 = 0xEA00000000006465;
            break;
          case 8:
            unint64_t v51 = 0xED0000746E656D6ELL;
            uint64_t v52 = 0x67696C4179656B2ELL;
            break;
          default:
            break;
        }
        uint64_t v96 = sub_1008FA0F0(v52, v51, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C(v92, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v46 + 32) = 2082;
        uint64_t v70 = (char *)v43 + *(int *)(v49 + 24);
        uint64_t v71 = *((void *)v70 + 3);
        sub_10001CD44(v70, v71);
        uint64_t v72 = sub_1010EC7E8(v71);
        uint64_t v96 = sub_1008FA0F0(v72, v73, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1D4C((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v94, "Skipping to update key sync metadata for %{private,mask.hash}s, type: %{public}s, %{public}s.", (uint8_t *)v46, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001A1D4C(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        sub_1001A1D4C(v42, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
        sub_1001A1D4C((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      }

      sub_1001A1B70();
      swift_allocError();
      unsigned char *v74 = 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1001945D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Delete();
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Table();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v31 = a1;
  if (sub_1009FCF40())
  {
    uint64_t v21 = v6;
    uint64_t v22 = v2;
    uint64_t v23 = v5;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v14, (uint64_t)qword_10170F410);
    uint64_t v29 = v14;
    uint64_t v30 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
    sub_10001D958(&v27);
    type metadata accessor for UUID();
    QueryType.subscript.getter();
    SchemaType.select(_:_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v27);
    Swift::String v15 = Expressible.asSQL()();
    uint64_t v24 = *(void *)(v24 + 8);
    ((void (*)(char *, uint64_t))v24)(v13, v8);
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    uint64_t v27 = 0xD00000000000002DLL;
    unint64_t v28 = 0x80000001013F4330;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    sub_100062734(&qword_10163CFC8, &qword_10163CE68);
    uint64_t v17 = v25;
    uint64_t v18 = v23;
    ExpressionType.init(literal:)();
    QueryType.filter(_:)();
    QueryType.delete()();
    Connection.run(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v22);
    ((void (*)(char *, uint64_t))v24)(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v17, v18);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 2;
    *(unsigned char *)(v20 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100194A8C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v118 = a3;
  int v116 = a2;
  uint64_t v115 = a1;
  uint64_t v106 = a5;
  uint64_t v6 = sub_10000588C(&qword_10163CEA8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Row();
  uint64_t v105 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v104 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v101 - v12;
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v117 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v125 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000588C(&qword_10163CF00);
  uint64_t v128 = *(void *)(v126 - 8);
  uint64_t v17 = __chkstk_darwin(v126);
  uint64_t v127 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v101 - v19;
  uint64_t v21 = sub_10000588C(&qword_10163CE68);
  uint64_t v132 = *(void **)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = (void *)type metadata accessor for JoinType();
  uint64_t v138 = *(v134 - 1);
  __chkstk_darwin(v134);
  uint64_t v133 = (uint64_t)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Table();
  uint64_t v137 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v121 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v142 = (char *)&v101 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v135 = (char *)&v101 - v31;
  __chkstk_darwin(v30);
  uint64_t v124 = (char *)&v101 - v32;
  if (sub_10018DC68())
  {
    uint64_t v129 = v23;
    uint64_t v136 = v21;
    uint64_t v102 = v8;
    uint64_t v101 = v13;
    uint64_t v103 = v9;
    uint64_t v33 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
    uint64_t v34 = *(void (**)(void))(v138 + 104);
    unsigned int v113 = enum case for JoinType.leftOuter(_:);
    uint64_t v112 = v138 + 104;
    uint64_t v111 = (void (*)(uint64_t, void, void *))v34;
    v34(v133);
    uint64_t v114 = a4;
    uint64_t v35 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
    uint64_t v140 = v25;
    uint64_t v141 = &protocol witness table for Table;
    uint64_t v36 = sub_10001D958(&v139);
    uint64_t v130 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v137 + 16);
    uint64_t v131 = v137 + 16;
    v130(v36, v35, v25);
    if (qword_1016375C8 != -1) {
      swift_once();
    }
    uint64_t v37 = v126;
    uint64_t v38 = sub_100010324(v126, (uint64_t)qword_10170F6B0);
    uint64_t v39 = v20;
    uint64_t v108 = v20;
    uint64_t v110 = v38;
    QueryType.subscript.getter();
    uint64_t v40 = v127;
    QueryType.subscript.getter();
    uint64_t v41 = v129;
    == infix<A>(_:_:)();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v109 = v42;
    v42(v40, v37);
    v42(v39, v37);
    uint64_t v107 = v33;
    uint64_t v43 = v133;
    QueryType.join(_:_:on:)();
    os_log_t v44 = (char *)(v132 + 1);
    uint64_t v128 = v132[1];
    ((void (*)(char *, uint64_t))v128)(v41, v136);
    uint64_t v45 = v25;
    uint64_t v46 = *(void **)(v138 + 8);
    v138 += 8;
    uint64_t v132 = v46;
    uint64_t v47 = v134;
    ((void (*)(uint64_t, void *))v46)(v43, v134);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
    v111(v43, v113, v47);
    uint64_t v48 = v114 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
    uint64_t v140 = v25;
    uint64_t v141 = &protocol witness table for Table;
    uint64_t v49 = sub_10001D958(&v139);
    v130(v49, v48, v25);
    uint64_t v50 = v108;
    QueryType.subscript.getter();
    unint64_t v51 = v127;
    QueryType.subscript.getter();
    uint64_t v52 = v129;
    uint64_t v53 = v50;
    == infix<A>(_:_:)();
    uint64_t v54 = v126;
    uint64_t v55 = v109;
    v109(v51, v126);
    v55(v53, v54);
    uint64_t v56 = v135;
    uint64_t v57 = v133;
    uint64_t v58 = v142;
    QueryType.join(_:_:on:)();
    ((void (*)(char *, uint64_t))v128)(v52, v136);
    ((void (*)(uint64_t, void *))v132)(v57, v134);
    uint64_t v60 = v137 + 8;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v137 + 8);
    v59(v58, v45);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
    uint64_t v61 = v45;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v133 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v133, (uint64_t)qword_10170F410);
    type metadata accessor for BeaconIdentifier();
    uint64_t v62 = v120;
    == infix<A>(_:_:)();
    uint64_t v63 = v52;
    uint64_t v64 = v124;
    QueryType.filter(_:)();
    uint64_t v132 = v44;
    ((void (*)(char *, uint64_t))v128)(v63, v136);
    uint64_t v138 = v60;
    uint64_t v134 = v59;
    v59(v56, v61);
    unsigned __int8 v65 = v116;
    uint64_t v66 = v125;
    uint64_t v67 = (uint64_t)v117;
    if (v116 != 8)
    {
      uint64_t v68 = v142;
      v130((uint64_t *)v142, (uint64_t)v64, v61);
      if (qword_1016375B8 != -1) {
        swift_once();
      }
      uint64_t v69 = sub_10000588C(&qword_10163CF28);
      sub_100010324(v69, (uint64_t)qword_10170F680);
      LODWORD(v139) = v65;
      sub_1001A1720();
      uint64_t v70 = v129;
      == infix<A>(_:_:)();
      uint64_t v71 = v135;
      QueryType.filter(_:)();
      ((void (*)(char *, uint64_t))v128)(v70, v136);
      uint64_t v72 = v68;
      unint64_t v73 = (void (*)(char *, uint64_t))v134;
      ((void (*)(char *, uint64_t))v134)(v72, v61);
      v73(v64, v61);
      (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v64, v71, v61);
      uint64_t v66 = v125;
    }
    sub_10001D074(v118, v67, &qword_101638CF0);
    uint64_t v74 = v119;
    int v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v67, 1, v62);
    uint64_t v76 = v142;
    if (v75 == 1)
    {
      sub_10001DAB4(v67, &qword_101638CF0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v66, v67, v62);
      v130((uint64_t *)v76, (uint64_t)v64, v61);
      if (qword_1016375D0 != -1) {
        swift_once();
      }
      sub_100010324(v133, (uint64_t)qword_10170F6C8);
      uint64_t v79 = v129;
      == infix<A>(_:_:)();
      uint64_t v80 = v135;
      QueryType.filter(_:)();
      ((void (*)(char *, uint64_t))v128)(v79, v136);
      uint64_t v81 = v76;
      uint64_t v82 = (void (*)(char *, uint64_t))v134;
      ((void (*)(char *, uint64_t))v134)(v81, v61);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v66, v62);
      v82(v64, v61);
      (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v64, v80, v61);
    }
    uint64_t v83 = v121;
    uint64_t v84 = (void (*)(uint64_t *, char *, uint64_t))v130;
    v130((uint64_t *)v121, (uint64_t)v64, v61);
    sub_10000588C(&qword_10163CE90);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
    if (qword_1016375A8 != -1) {
      swift_once();
    }
    uint64_t v85 = sub_10000588C(&qword_10163CE98);
    sub_100010324(v85, (uint64_t)qword_10170F650);
    sub_100062734(&qword_10163CEA0, &qword_10163CE98);
    ExpressionType.desc.getter();
    uint64_t v86 = v142;
    QueryType.order(_:)();
    swift_bridgeObjectRelease();
    uint64_t v87 = v83;
    uint64_t v88 = (void (*)(char *, uint64_t))v134;
    ((void (*)(char *, uint64_t))v134)(v87, v61);
    uint64_t v89 = v135;
    QueryType.limit(_:)();
    v88(v86, v61);
    v88(v64, v61);
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v64, v89, v61);
    uint64_t v140 = v61;
    uint64_t v141 = &protocol witness table for Table;
    uint64_t v90 = sub_10001D958(&v139);
    v84(v90, v64, v61);
    uint64_t v91 = v122;
    Connection.prepare(_:)();
    if (v91)
    {
      v88(v64, v61);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      uint64_t v92 = (uint64_t)v102;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      swift_release();
      uint64_t v93 = v105;
      uint64_t v94 = v103;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v92, 1, v103) == 1)
      {
        v88(v124, v61);
        swift_release();
        sub_10001DAB4(v92, &qword_10163CEA8);
        uint64_t v95 = type metadata accessor for DeviceEvent(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v106, 1, 1, v95);
      }
      else
      {
        uint64_t v96 = v101;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v101, v92, v94);
        uint64_t v97 = (uint64_t)v104;
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v104, v96, v94);
        uint64_t v98 = v114;
        swift_retain();
        uint64_t v99 = v106;
        sub_100195B80(v97, v98, v106);
        swift_release();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
        v88(v124, v61);
        uint64_t v100 = type metadata accessor for DeviceEvent(0);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 0, 1, v100);
      }
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v77 = 2;
    *(unsigned char *)(v77 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100195B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v89 = a3;
  uint64_t Error = type metadata accessor for QueryError();
  uint64_t v79 = *(void *)(Error - 8);
  uint64_t v5 = __chkstk_darwin(Error);
  uint64_t v83 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v73 - v7;
  uint64_t v87 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000588C(&qword_10163CE98);
  uint64_t v93 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v84 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v11 - 8);
  uint64_t v78 = v11;
  __chkstk_darwin(v11);
  uint64_t v76 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000588C(&qword_10163CF00);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unint64_t v73 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163CF20);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v82 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v88 = (uint64_t)&v73 - v17;
  uint64_t v18 = type metadata accessor for Row();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v81 = (void (*)(uint64_t, char *, uint64_t))((char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v73 - v22;
  uint64_t v24 = sub_10000588C(&qword_10164E880);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v73 - v28;
  uint64_t v92 = v19;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v95 = v18;
  uint64_t v80 = v30;
  v30(v23, a1, v18);
  swift_retain();
  uint64_t v31 = (uint64_t)v23;
  uint64_t v32 = a2;
  uint64_t v33 = v90;
  sub_10019CFB0(v31, v27);
  if (v33)
  {
    uint64_t v96 = v33;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v34 = Error;
    uint64_t v35 = a1;
    if (swift_dynamicCast())
    {
      uint64_t v36 = v79;
      int v37 = (*(uint64_t (**)(char *, uint64_t))(v79 + 88))(v8, v34);
      if (v37 == enum case for QueryError.noSuchColumn(_:))
      {
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v36 + 96))(v8, v34);
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v39 = type metadata accessor for DeviceEvent.Location(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v29, 1, 1, v39);
        swift_errorRelease();
        goto LABEL_9;
      }
      if (v37 == enum case for QueryError.unexpectedNullValue(_:))
      {
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v36 + 96))(v8, v34);
        goto LABEL_8;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v34);
    }
    swift_errorRelease();
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(a1, v95);
  }
  uint64_t v38 = type metadata accessor for DeviceEvent.Location(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v27, 0, 1, v38);
  sub_10001D608((uint64_t)v27, (uint64_t)v29, &qword_10164E880);
  uint64_t v35 = a1;
LABEL_9:
  uint64_t v40 = (uint64_t)v81;
  v80((char *)v81, v35, v95);
  swift_retain();
  uint64_t v41 = (uint64_t)v82;
  sub_10019D424(v40, v32, (uint64_t)v82);
  uint64_t v43 = v88;
  uint64_t v42 = v89;
  sub_10001D608(v41, v88, &qword_10163CF20);
  uint64_t v44 = type metadata accessor for DeviceEvent(0);
  sub_10001D074(v43, v42 + *(int *)(v44 + 32), &qword_10163CF20);
  uint64_t v83 = (char *)v32;
  uint64_t v45 = v32 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
  if (qword_1016375C8 != -1) {
    swift_once();
  }
  uint64_t v82 = v29;
  uint64_t v46 = v75;
  sub_100010324(v75, (uint64_t)qword_10170F6B0);
  uint64_t v47 = type metadata accessor for Table();
  uint64_t v48 = v73;
  uint64_t v90 = v47;
  QueryType.subscript.getter();
  Row.subscript.getter();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v48, v46);
  *(void *)uint64_t v42 = v96;
  *(unsigned char *)(v42 + 8) = 0;
  uint64_t v49 = v76;
  if (qword_101637518 != -1) {
    swift_once();
  }
  uint64_t Error = v45;
  uint64_t v50 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v50, (uint64_t)qword_10170F4A0);
  uint64_t v51 = v78;
  Row.subscript.getter();
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  sub_100010324(v50, (uint64_t)qword_10170F410);
  uint64_t v52 = v44;
  uint64_t v53 = v89;
  uint64_t v54 = v89 + *(int *)(v44 + 36);
  type metadata accessor for BeaconIdentifier();
  Row.subscript.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v54, v49, v51);
  uint64_t v55 = v35;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v56 = v85;
  sub_100010324(v85, (uint64_t)qword_10170F650);
  uint64_t v57 = v84;
  uint64_t v58 = v87;
  QueryType.subscript.getter();
  uint64_t v59 = v86;
  Row.subscript.getter();
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 8);
  v93 += 8;
  uint64_t v80 = v60;
  ((void (*)(char *, uint64_t))v60)(v57, v56);
  uint64_t v61 = v53 + *(int *)(v52 + 24);
  uint64_t v81 = *(void (**)(uint64_t, char *, uint64_t))(v94 + 32);
  v94 += 32;
  v81(v61, v59, v58);
  uint64_t v62 = v52;
  if (qword_1016375B8 != -1) {
    swift_once();
  }
  uint64_t v63 = sub_10000588C(&qword_10163CF28);
  sub_100010324(v63, (uint64_t)qword_10170F680);
  sub_1001A1720();
  Row.subscript.getter();
  char v64 = sub_1004C69B8(v96);
  if (v64 == 8) {
    char v65 = 0;
  }
  else {
    char v65 = v64;
  }
  *(unsigned char *)(v53 + 9) = v65;
  uint64_t v66 = v53 + *(int *)(v52 + 28);
  uint64_t v67 = (uint64_t)v82;
  sub_10001D074((uint64_t)v82, v66, &qword_10164E880);
  uint64_t v79 = v62;
  if (qword_1016375C0 != -1) {
    swift_once();
  }
  uint64_t v68 = v85;
  sub_100010324(v85, (uint64_t)qword_10170F698);
  uint64_t v69 = v84;
  uint64_t v70 = v87;
  QueryType.subscript.getter();
  uint64_t v71 = v86;
  Row.subscript.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v55, v95);
  ((void (*)(char *, uint64_t))v80)(v69, v68);
  sub_10001DAB4(v88, &qword_10163CF20);
  sub_10001DAB4(v67, &qword_10164E880);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v81)(v53 + *(int *)(v79 + 40), v71, v70);
}

uint64_t sub_1001968A0(uint64_t a1)
{
  uint64_t v63 = sub_10000588C(&qword_10163CF00);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v63 - 8);
  uint64_t v2 = __chkstk_darwin(v63);
  uint64_t v59 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v48 - v4;
  uint64_t v65 = sub_10000588C(&qword_10163CE68);
  uint64_t v74 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v61 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JoinType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Table();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v68 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  uint64_t v58 = (char *)&v48 - v17;
  uint64_t v60 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
  uint64_t v70 = v8;
  uint64_t v18 = *(void (**)(void))(v8 + 104);
  uint64_t v55 = v10;
  unsigned int v54 = enum case for JoinType.leftOuter(_:);
  uint64_t v64 = v7;
  uint64_t v53 = v8 + 104;
  uint64_t v52 = (void (*)(char *, void, uint64_t))v18;
  v18(v10);
  uint64_t v69 = a1;
  uint64_t v19 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
  uint64_t v72 = v11;
  unint64_t v73 = &protocol witness table for Table;
  uint64_t v20 = sub_10001D958(v71);
  uint64_t v56 = v12;
  uint64_t v66 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v67 = v12 + 16;
  v66(v20, v19, v11);
  if (qword_1016375C8 != -1) {
    swift_once();
  }
  uint64_t v21 = v63;
  uint64_t v50 = sub_100010324(v63, (uint64_t)qword_10170F6B0);
  QueryType.subscript.getter();
  uint64_t v22 = v59;
  QueryType.subscript.getter();
  uint64_t v23 = v61;
  == infix<A>(_:_:)();
  uint64_t v24 = v22;
  uint64_t v25 = (void (*)(char *, uint64_t))*((void *)v57 + 1);
  uint64_t v49 = v25;
  v25(v24, v21);
  v25(v5, v21);
  uint64_t v26 = v55;
  QueryType.join(_:_:on:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v74 + 8);
  v74 += 8;
  uint64_t v57 = v27;
  v27(v23, v65);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v70 + 8);
  v70 += 8;
  uint64_t v51 = v28;
  uint64_t v29 = v64;
  v28(v26, v64);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v71);
  v52(v26, v54, v29);
  uint64_t v30 = v69 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
  uint64_t v72 = v11;
  unint64_t v73 = &protocol witness table for Table;
  uint64_t v31 = sub_10001D958(v71);
  v66(v31, v30, v11);
  QueryType.subscript.getter();
  uint64_t v32 = v59;
  QueryType.subscript.getter();
  uint64_t v33 = v61;
  == infix<A>(_:_:)();
  uint64_t v34 = v63;
  uint64_t v35 = v49;
  v49(v32, v63);
  v35(v5, v34);
  uint64_t v36 = v62;
  QueryType.join(_:_:on:)();
  v57(v33, v65);
  v51(v26, v64);
  int v37 = *(void (**)(char *, uint64_t))(v56 + 8);
  v37(v36, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v71);
  sub_10000588C(&qword_10163CE90);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101347BA0;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_10000588C(&qword_10163CE70);
  uint64_t v40 = sub_100010324(v39, (uint64_t)qword_10170F410);
  *(void *)(v38 + 56) = v39;
  *(void *)(v38 + 64) = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v41 = sub_10001D958((uint64_t *)(v38 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v41, v40, v39);
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v42, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  uint64_t v43 = v58;
  uint64_t v44 = v68;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  v37(v44, v11);
  uint64_t v72 = v11;
  unint64_t v73 = &protocol witness table for Table;
  uint64_t v45 = sub_10001D958(v71);
  v66(v45, (uint64_t)v43, v11);
  uint64_t v46 = sub_10019714C((uint64_t)v71, v69, sub_1001837D0, &qword_10163CFC0);
  v37(v43, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v71);
  return v46;
}

uint64_t sub_10019714C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t *a4)
{
  if (sub_10018DC68())
  {
    Connection.prepare(_:)();
    if (v4)
    {
      return swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v10 = swift_retain();
      uint64_t v11 = a3(v10, a2);
      swift_release();
      swift_release_n();
      sub_10000588C(a4);
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v11;
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10019725C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v129 = (char *)a2;
  uint64_t v131 = a3;
  uint64_t v127 = a4;
  uint64_t v5 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v5 - 8);
  uint64_t v124 = (uint64_t *)((char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v115 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v117 = (char *)&v102 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v119 = (char *)&v102 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v120 = (char *)&v102 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v121 = (char *)&v102 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v122 = (char *)&v102 - v19;
  __chkstk_darwin(v18);
  char v123 = (char *)&v102 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v125 = *(void *)(v21 - 8);
  uint64_t v126 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v114 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v128 = (char *)&v102 - v24;
  uint64_t v25 = sub_10000588C(&qword_10163D030);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v113 = (uint64_t)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v112 = (uint64_t)&v102 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v111 = (uint64_t)&v102 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v110 = (uint64_t)&v102 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v109 = (uint64_t)&v102 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v108 = (uint64_t)&v102 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v116 = (uint64_t)&v102 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v118 = (uint64_t)&v102 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v102 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v102 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v102 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)&v102 - v52;
  __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v102 - v54;
  uint64_t v56 = type metadata accessor for DeviceEvent(0);
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v102 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v130;
  uint64_t result = sub_100194A8C(a1, 8, (uint64_t)v129, v131, (uint64_t)v55);
  if (!v60)
  {
    uint64_t v104 = v44;
    uint64_t v105 = v47;
    uint64_t v106 = v50;
    uint64_t v107 = v53;
    uint64_t v129 = v59;
    uint64_t v130 = 0;
    uint64_t v63 = v127;
    uint64_t v62 = v128;
    uint64_t v64 = v126;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) == 1)
    {
      uint64_t v65 = &qword_10163D030;
      uint64_t v66 = (uint64_t)v55;
LABEL_8:
      sub_10001DAB4(v66, v65);
      uint64_t v73 = sub_10000588C((uint64_t *)&unk_10164E870);
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v63, 1, 1, v73);
    }
    uint64_t v67 = (uint64_t)v129;
    sub_1001A1CE4((uint64_t)v55, (uint64_t)v129, type metadata accessor for DeviceEvent);
    uint64_t v68 = (void (*)(void, void, void, void))v124;
    sub_10001D074(v67 + *(int *)(v56 + 32), (uint64_t)v124, &qword_10163CF20);
    uint64_t v69 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(void (*)(void, void, void, void), uint64_t, uint64_t))(*(void *)(v69 - 8) + 48))(v68, 1, v69) == 1)
    {
      sub_10001DAB4((uint64_t)v68, &qword_10163CF20);
      uint64_t v70 = v123;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56))(v123, 1, 1, v64);
LABEL_7:
      sub_1001A1D4C((uint64_t)v129, type metadata accessor for DeviceEvent);
      uint64_t v65 = &qword_101638CF0;
      uint64_t v66 = (uint64_t)v70;
      goto LABEL_8;
    }
    uint64_t v71 = v125;
    uint64_t v70 = v123;
    uint64_t v103 = *(void (**)(void))(v125 + 16);
    ((void (*)(char *, void (*)(void, void, void, void), uint64_t))v103)(v123, v68, v64);
    sub_1001A1D4C((uint64_t)v68, type metadata accessor for DeviceEvent.AttachmentInfo);
    uint64_t v72 = *(uint64_t **)(v71 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v72)(v70, 0, 1, v64);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v70, 1, v64) == 1) {
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v62, v70, v64);
    uint64_t v74 = v72;
    uint64_t v75 = (uint64_t)v122;
    ((void (*)(char *, char *, uint64_t))v103)(v122, v62, v64);
    uint64_t v124 = v74;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v75, 0, 1, v64);
    uint64_t v102 = a1;
    uint64_t v76 = a1;
    uint64_t v77 = v131;
    uint64_t v78 = v130;
    sub_100194A8C(v76, 3, v75, v131, (uint64_t)v107);
    if (v78)
    {
      sub_10001DAB4(v75, &qword_101638CF0);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v128, v64);
      return sub_1001A1D4C((uint64_t)v129, type metadata accessor for DeviceEvent);
    }
    else
    {
      sub_10001DAB4(v75, &qword_101638CF0);
      uint64_t v79 = (uint64_t)v121;
      ((void (*)(char *, char *, uint64_t))v103)(v121, v128, v64);
      uint64_t v80 = (void (*)(uint64_t, void, uint64_t, uint64_t))v124;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v124)(v79, 0, 1, v64);
      sub_100194A8C(v102, 4, v79, v77, (uint64_t)v106);
      sub_10001DAB4(v79, &qword_101638CF0);
      uint64_t v81 = (uint64_t)v120;
      ((void (*)(char *, char *, uint64_t))v103)(v120, v128, v64);
      v80(v81, 0, 1, v64);
      sub_100194A8C(v102, 1, v81, v77, (uint64_t)v105);
      sub_10001DAB4(v81, &qword_101638CF0);
      uint64_t v82 = (uint64_t)v119;
      ((void (*)(char *, char *, uint64_t))v103)(v119, v128, v64);
      v80(v82, 0, 1, v64);
      sub_100194A8C(v102, 2, v82, v77, (uint64_t)v104);
      uint64_t v83 = v128;
      uint64_t v84 = v82;
      uint64_t v85 = v77;
      sub_10001DAB4(v84, &qword_101638CF0);
      uint64_t v86 = (uint64_t)v117;
      ((void (*)(char *, char *, uint64_t))v103)(v117, v83, v64);
      v80(v86, 0, 1, v64);
      sub_100194A8C(v102, 5, v86, v85, v118);
      sub_10001DAB4(v86, &qword_101638CF0);
      uint64_t v87 = (uint64_t)v115;
      v103(v115);
      v80(v87, 0, 1, v64);
      uint64_t v88 = v116;
      sub_100194A8C(v102, 6, v87, v131, v116);
      uint64_t v130 = 0;
      sub_10001DAB4(v87, &qword_101638CF0);
      uint64_t v89 = v108;
      sub_10001D074((uint64_t)v107, v108, &qword_10163D030);
      uint64_t v90 = v109;
      sub_10001D074((uint64_t)v106, v109, &qword_10163D030);
      uint64_t v91 = v110;
      sub_10001D074((uint64_t)v105, v110, &qword_10163D030);
      uint64_t v92 = v111;
      sub_10001D074((uint64_t)v104, v111, &qword_10163D030);
      uint64_t v93 = v112;
      sub_10001D074(v118, v112, &qword_10163D030);
      uint64_t v94 = v88;
      uint64_t v95 = v113;
      sub_10001D074(v94, v113, &qword_10163D030);
      uint64_t v96 = (uint64_t)v114;
      static SystemInfo.bootSessionUUID.getter();
      uint64_t v97 = v130;
      sub_100198108(v89, v90, v91, v92, v93, v95, v96, v63);
      uint64_t v98 = v125;
      uint64_t v99 = (uint64_t)v129;
      if (v97)
      {
        swift_errorRelease();
        sub_10001DAB4(v116, &qword_10163D030);
        sub_10001DAB4(v118, &qword_10163D030);
        sub_10001DAB4((uint64_t)v104, &qword_10163D030);
        sub_10001DAB4((uint64_t)v105, &qword_10163D030);
        sub_10001DAB4((uint64_t)v106, &qword_10163D030);
        sub_10001DAB4((uint64_t)v107, &qword_10163D030);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v128, v64);
        sub_1001A1D4C(v99, type metadata accessor for DeviceEvent);
        uint64_t v100 = sub_10000588C((uint64_t *)&unk_10164E870);
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v63, 1, 1, v100);
      }
      else
      {
        uint64_t v130 = 0;
        sub_10001DAB4(v116, &qword_10163D030);
        sub_10001DAB4(v118, &qword_10163D030);
        sub_10001DAB4((uint64_t)v104, &qword_10163D030);
        sub_10001DAB4((uint64_t)v105, &qword_10163D030);
        sub_10001DAB4((uint64_t)v106, &qword_10163D030);
        sub_10001DAB4((uint64_t)v107, &qword_10163D030);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v128, v64);
        sub_1001A1D4C(v99, type metadata accessor for DeviceEvent);
        uint64_t v101 = sub_10000588C((uint64_t *)&unk_10164E870);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v63, 0, 1, v101);
      }
    }
  }
  return result;
}

uint64_t sub_100198108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v85 = a7;
  uint64_t v87 = a6;
  uint64_t v88 = a5;
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  uint64_t v91 = a2;
  uint64_t v82 = a8;
  uint64_t v9 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v9 - 8);
  uint64_t v95 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v104 = (uint64_t)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for Date();
  uint64_t v114 = *(void **)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v110 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for DeviceEvent(0);
  uint64_t v106 = *(void *)(v98 - 8);
  uint64_t v14 = __chkstk_darwin(v98);
  uint64_t v109 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v108 = (uint64_t)&v81 - v16;
  uint64_t v17 = sub_10000588C(&qword_10163D038);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000588C(&qword_10163A790);
  uint64_t v97 = *(void *)(v113 - 8);
  uint64_t v20 = __chkstk_darwin(v113);
  uint64_t v107 = (uint64_t)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v94 = (uint64_t)&v81 - v22;
  uint64_t v23 = sub_10000588C(&qword_10163D040);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v105 = (uint64_t)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v112 = (char *)&v81 - v28;
  __chkstk_darwin(v27);
  uint64_t v96 = (char *)&v81 - v29;
  sub_10000588C(&qword_10163D048);
  uint64_t v30 = *(void *)(v24 + 72);
  unint64_t v31 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v115 = 6;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_10134BFA0;
  uint64_t v84 = v32;
  uint64_t v33 = v32 + v31;
  unint64_t v34 = v32 + v31 + *(int *)(v23 + 48);
  uint64_t v86 = a1;
  sub_10001D074(a1, v32 + v31, &qword_10163D030);
  uint64_t v35 = sub_10000588C(&qword_10163D050);
  *(void *)(v34 + 24) = v35;
  *(void *)(v34 + 32) = &off_1015BEFA8;
  *(unsigned char *)unint64_t v34 = 0;
  uint64_t v36 = v33 + v30 + *(int *)(v23 + 48);
  sub_10001D074(v91, v33 + v30, &qword_10163D030);
  *(void *)(v36 + 24) = v35;
  *(void *)(v36 + 32) = &off_1015BEFA8;
  *(unsigned char *)uint64_t v36 = 1;
  uint64_t v37 = v33 + 2 * v30;
  uint64_t v38 = v37 + *(int *)(v23 + 48);
  sub_10001D074(v90, v37, &qword_10163D030);
  uint64_t v39 = sub_10000588C(&qword_10163D058);
  *(void *)(v38 + 24) = v39;
  *(void *)(v38 + 32) = &off_1015BEF80;
  *(unsigned char *)uint64_t v38 = 0;
  uint64_t v40 = v33 + 3 * v30;
  uint64_t v41 = v40 + *(int *)(v23 + 48);
  sub_10001D074(v89, v40, &qword_10163D030);
  *(void *)(v41 + 24) = v39;
  *(void *)(v41 + 32) = &off_1015BEF80;
  *(unsigned char *)uint64_t v41 = 1;
  uint64_t v42 = v33 + 4 * v30;
  uint64_t v43 = v42 + *(int *)(v23 + 48);
  sub_10001D074(v88, v42, &qword_10163D030);
  uint64_t v44 = sub_10000588C(&qword_10163D060);
  *(void *)(v43 + 24) = v44;
  *(void *)(v43 + 32) = &off_1015BEF58;
  *(unsigned char *)uint64_t v43 = 0;
  uint64_t v45 = v112;
  uint64_t v102 = v30;
  uint64_t v46 = v33 + 5 * v30;
  uint64_t v47 = v46 + *(int *)(v23 + 48);
  sub_10001D074(v87, v46, &qword_10163D030);
  *(void *)(v47 + 24) = v44;
  *(void *)(v47 + 32) = &off_1015BEF58;
  uint64_t v48 = v23;
  uint64_t v49 = (uint64_t)v96;
  uint64_t v50 = v98;
  uint64_t v51 = v113;
  uint64_t v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  uint64_t v93 = (void (**)(char *, uint64_t, uint64_t))(v114 + 2);
  uint64_t v92 = (void (**)(uint64_t, char *, uint64_t))(v114 + 4);
  uint64_t v52 = v97;
  *(unsigned char *)uint64_t v47 = 1;
  uint64_t v99 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  uint64_t v100 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  uint64_t v83 = v33;
  uint64_t v53 = v33;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v106 = v48;
  uint64_t v103 = v19;
  do
  {
    uint64_t v114 = v54;
    sub_10001D074(v53, v49, &qword_10163D040);
    uint64_t v55 = *(int *)(v48 + 48);
    uint64_t v56 = v48;
    uint64_t v57 = (uint64_t)&v45[v55];
    uint64_t v58 = v49;
    uint64_t v59 = (uint64_t)v45;
    uint64_t v60 = v58 + v55;
    sub_10001D074(v58, v59, &qword_10163D030);
    sub_10001D010(v60, v57);
    if ((*v101)(v59, 1, v50) == 1)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
      uint64_t v61 = 1;
      uint64_t v62 = v59;
      uint64_t v63 = (uint64_t)v103;
      uint64_t v45 = (char *)v59;
      uint64_t v49 = v58;
      uint64_t v54 = v114;
    }
    else
    {
      uint64_t v64 = v104;
      uint64_t v65 = v59;
      uint64_t v66 = v108;
      sub_1001A1CE4(v65, v108, type metadata accessor for DeviceEvent);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
      sub_1001A1C50(v66, v109, type metadata accessor for DeviceEvent);
      (*v93)(v110, v66 + *(int *)(v50 + 24), v111);
      uint64_t v67 = (long long *)(v105 + *(int *)(v56 + 48));
      sub_10001D074(v58, v105, &qword_10163D030);
      sub_10001D010(v60, (uint64_t)v67);
      uint64_t v68 = v66 + *(int *)(v50 + 32);
      uint64_t v69 = v95;
      sub_10001D074(v68, v95, &qword_10163CF20);
      uint64_t v70 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v69, 1, v70) == 1)
      {
        sub_10001DAB4(v69, &qword_10163CF20);
        uint64_t v71 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v64, 1, 1, v71);
      }
      else
      {
        sub_10001D074(v69 + *(int *)(v70 + 20), v64, &qword_101638CF0);
        sub_1001A1D4C(v69, type metadata accessor for DeviceEvent.AttachmentInfo);
      }
      uint64_t v63 = (uint64_t)v103;
      uint64_t v54 = v114;
      sub_1001A1D4C(v108, type metadata accessor for DeviceEvent);
      sub_1001A1CE4(v109, v63, type metadata accessor for DeviceEvent);
      uint64_t v51 = v113;
      (*v92)(v63 + *(int *)(v113 + 36), v110, v111);
      sub_10001CEB0(v67, v63 + *(int *)(v51 + 40));
      sub_10001D608(v104, v63 + *(int *)(v51 + 44), &qword_101638CF0);
      uint64_t v61 = 0;
      uint64_t v62 = v105;
      uint64_t v50 = v98;
      uint64_t v45 = v112;
      uint64_t v49 = (uint64_t)v96;
    }
    sub_10001DAB4(v62, &qword_10163D030);
    (*v100)(v63, v61, 1, v51);
    sub_10001DAB4(v49, &qword_10163D040);
    if ((*v99)(v63, 1, v51) == 1)
    {
      sub_10001DAB4(v63, &qword_10163D038);
      uint64_t v48 = v106;
    }
    else
    {
      uint64_t v72 = v94;
      sub_10001D608(v63, v94, &qword_10163A790);
      sub_10001D608(v72, v107, &qword_10163A790);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = (void *)sub_100A6FBAC(0, v54[2] + 1, 1, (unint64_t)v54);
      }
      unint64_t v74 = v54[2];
      unint64_t v73 = v54[3];
      uint64_t v51 = v113;
      if (v74 >= v73 >> 1) {
        uint64_t v54 = (void *)sub_100A6FBAC(v73 > 1, v74 + 1, 1, (unint64_t)v54);
      }
      v54[2] = v74 + 1;
      sub_10001D608(v107, (uint64_t)v54+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(void *)(v97 + 72) * v74, &qword_10163A790);
      uint64_t v48 = v106;
      uint64_t v45 = v112;
    }
    v53 += v102;
    --v115;
  }
  while (v115);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v54[2])
  {
    sub_10001DAB4(v87, &qword_10163D030);
    sub_10001DAB4(v88, &qword_10163D030);
    sub_10001DAB4(v89, &qword_10163D030);
    sub_10001DAB4(v90, &qword_10163D030);
    sub_10001DAB4(v91, &qword_10163D030);
    sub_10001DAB4(v86, &qword_10163D030);
    uint64_t v75 = sub_10000588C((uint64_t *)&unk_10164E870);
    uint64_t v76 = v82;
    uint64_t v77 = (char *)v82 + *(int *)(v75 + 36);
    uint64_t v78 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v78 - 8) + 32))(v77, v85, v78);
    *uint64_t v76 = v54;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000588C(&qword_10163D068);
    sub_100062734(&qword_10163D070, &qword_10163D068);
    swift_allocError();
    swift_willThrow();
    uint64_t v80 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v85, v80);
    sub_10001DAB4(v87, &qword_10163D030);
    sub_10001DAB4(v88, &qword_10163D030);
    sub_10001DAB4(v89, &qword_10163D030);
    sub_10001DAB4(v90, &qword_10163D030);
    sub_10001DAB4(v91, &qword_10163D030);
    return sub_10001DAB4(v86, &qword_10163D030);
  }
  return result;
}

uint64_t sub_100198D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1009FCF40();
  if (v8)
  {
    __chkstk_darwin(v8);
    v11[-2] = a2;
    v11[-1] = a1;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Connection.TransactionMode.deferred(_:), v4);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100198EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10164E880);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_1001990C4(a2, a1);
  if (!v2)
  {
    uint64_t v13 = result;
    uint64_t v14 = type metadata accessor for DeviceEvent(0);
    sub_10001D074(a2 + *(int *)(v14 + 28), (uint64_t)v7, &qword_10164E880);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      return sub_10001DAB4((uint64_t)v7, &qword_10164E880);
    }
    else
    {
      sub_1001A1CE4((uint64_t)v7, (uint64_t)v11, type metadata accessor for DeviceEvent.Location);
      sub_10019AB58(v11, v13, a1);
      return sub_1001A1D4C((uint64_t)v11, type metadata accessor for DeviceEvent.Location);
    }
  }
  return result;
}

uint64_t sub_1001990C4(uint64_t a1, uint64_t a2)
{
  uint64_t v176 = a1;
  uint64_t v3 = sub_10000588C(&qword_10163CF20);
  __chkstk_darwin(v3 - 8);
  uint64_t v146 = (uint64_t)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v142 = (uint64_t)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v152 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v150 = (uint64_t)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for OnConflict();
  uint64_t v151 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v159 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for Insert();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  os_log_type_t v153 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for DeviceEvent(0);
  uint64_t v10 = __chkstk_darwin(v173);
  uint64_t v147 = (uint64_t)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v143 = (uint64_t)&v131 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v154 = (uint64_t)&v131 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v156 = (uint64_t)&v131 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v155 = (uint64_t)&v131 - v19;
  __chkstk_darwin(v18);
  uint64_t v158 = (uint64_t)&v131 - v20;
  uint64_t v21 = sub_10000588C(&qword_10163CEA8);
  __chkstk_darwin(v21 - 8);
  uint64_t v157 = (char *)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Row();
  uint64_t v163 = *(void *)(v23 - 8);
  uint64_t v164 = v23;
  __chkstk_darwin(v23);
  uint64_t v161 = (char *)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_10163CE68);
  uint64_t v169 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v131 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26);
  unint64_t v31 = (char *)&v131 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  unint64_t v34 = (char *)&v131 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v168 = (char *)&v131 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v131 - v37;
  uint64_t v39 = type metadata accessor for Table();
  v171 = *(void (**)(char *, uint64_t))(v39 - 8);
  uint64_t v40 = __chkstk_darwin(v39);
  v170 = (char *)&v131 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  unint64_t v175 = (char *)&v131 - v42;
  uint64_t v174 = sub_1009FCF40();
  if (v174)
  {
    uint64_t v43 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
    if (qword_1016375B8 != -1) {
      swift_once();
    }
    uint64_t v162 = v38;
    uint64_t v166 = v6;
    uint64_t v167 = v39;
    uint64_t v44 = sub_10000588C(&qword_10163CF28);
    uint64_t v45 = sub_100010324(v44, (uint64_t)qword_10170F680);
    uint64_t v46 = v176;
    LODWORD(v177) = *(unsigned __int8 *)(v176 + 9);
    unint64_t v47 = sub_1001A1720();
    uint64_t v140 = v45;
    unint64_t v139 = v47;
    == infix<A>(_:_:)();
    if (qword_1016375A8 != -1) {
      swift_once();
    }
    uint64_t v131 = a2;
    uint64_t v165 = a2 + v43;
    uint64_t v141 = sub_10000588C(&qword_10163CE98);
    uint64_t v48 = sub_100010324(v141, (uint64_t)qword_10170F650);
    uint64_t v49 = v173;
    uint64_t v50 = v46 + *(int *)(v173 + 24);
    uint64_t v138 = v48;
    uint64_t v137 = v50;
    == infix<A>(_:_:)();
    && infix(_:_:)();
    uint64_t v51 = v46;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v169 + 8);
    v52(v28, v25);
    v52(v31, v25);
    uint64_t v53 = v25;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v169 = sub_10000588C(&qword_10163CE70);
    uint64_t v54 = sub_100010324(v169, (uint64_t)qword_10170F410);
    uint64_t v55 = v51 + *(int *)(v49 + 36);
    uint64_t v132 = type metadata accessor for BeaconIdentifier();
    uint64_t v56 = v55 + *(int *)(v132 + 20);
    uint64_t v57 = type metadata accessor for UUID();
    uint64_t v135 = v54;
    uint64_t v134 = v56;
    == infix<A>(_:_:)();
    uint64_t v58 = (uint64_t)v168;
    && infix(_:_:)();
    v52(v31, v53);
    v52(v34, v53);
    if (qword_101637518 != -1) {
      swift_once();
    }
    uint64_t v133 = sub_100010324(v169, (uint64_t)qword_10170F4A0);
    uint64_t v136 = v55;
    uint64_t v169 = v57;
    == infix<A>(_:_:)();
    uint64_t v59 = v162;
    && infix(_:_:)();
    v52(v34, v53);
    v52((char *)v58, v53);
    uint64_t v60 = v170;
    uint64_t v61 = v167;
    QueryType.filter(_:)();
    v52(v59, v53);
    if (qword_1016375C8 != -1) {
      swift_once();
    }
    uint64_t v62 = sub_10000588C(&qword_10163CF00);
    uint64_t v63 = sub_100010324(v62, (uint64_t)qword_10170F6B0);
    uint64_t v178 = v62;
    unint64_t v179 = (void *)sub_100062734(&qword_10163CF38, &qword_10163CF00);
    uint64_t v64 = sub_10001D958((uint64_t *)&v177);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v64, v63, v62);
    uint64_t v65 = v175;
    SchemaType.select(_:_:)();
    uint64_t v66 = (void (**)(uint64_t *, char *, uint64_t))v171;
    uint64_t v67 = v60;
    uint64_t v28 = (char *)v171 + 8;
    uint64_t v68 = (void (*)(char *, uint64_t))*((void *)v171 + 1);
    v68(v67, v61);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v177);
    uint64_t v178 = v61;
    unint64_t v179 = &protocol witness table for Table;
    uint64_t v69 = sub_10001D958((uint64_t *)&v177);
    v66[2](v69, v65, v61);
    uint64_t v70 = v172;
    Connection.prepare(_:)();
    uint64_t v71 = v61;
    if (v70)
    {
      v68(v65, v61);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v177);
    }
    else
    {
      v170 = v28;
      v171 = v68;
      uint64_t v172 = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v177);
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      uint64_t v73 = (uint64_t)v157;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      swift_release();
      uint64_t v75 = v163;
      uint64_t v74 = v164;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v73, 1, v164) == 1)
      {
        sub_10001DAB4(v73, &qword_10163CEA8);
        uint64_t v76 = v151;
        (*(void (**)(char *, void, uint64_t))(v151 + 104))(v159, enum case for OnConflict.ignore(_:), v160);
        sub_10000588C(&qword_10163CF10);
        type metadata accessor for Setter();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_10134CDE0;
        LODWORD(v177) = *(unsigned __int8 *)(v176 + 9);
        <- infix<A>(_:_:)();
        uint64_t v77 = v166;
        <- infix<A>(_:_:)();
        <- infix<A>(_:_:)();
        <- infix<A>(_:_:)();
        if (qword_1016375C0 != -1) {
          swift_once();
        }
        sub_100010324(v141, (uint64_t)qword_10170F698);
        uint64_t v78 = v150;
        static Date.trustedNow.getter(v150);
        <- infix<A>(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v78, v77);
        uint64_t v79 = v153;
        uint64_t v80 = v159;
        uint64_t v81 = v167;
        QueryType.insert(or:_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v80, v160);
        uint64_t v28 = (char *)v174;
        uint64_t v82 = v172;
        uint64_t v83 = Connection.run(_:)();
        uint64_t v84 = v175;
        uint64_t v85 = v154;
        if (v82)
        {
          swift_release();
          (*(void (**)(char *, uint64_t))(v148 + 8))(v79, v149);
          v171(v84, v81);
        }
        else
        {
          uint64_t v168 = (char *)v83;
          uint64_t v172 = 0;
          if (qword_1016368D8 != -1) {
            swift_once();
          }
          uint64_t v99 = type metadata accessor for Logger();
          sub_100010324(v99, (uint64_t)qword_10170D7E8);
          uint64_t v100 = v176;
          sub_1001A1C50(v176, v85, type metadata accessor for DeviceEvent);
          uint64_t v101 = v143;
          sub_1001A1C50(v100, v143, type metadata accessor for DeviceEvent);
          uint64_t v102 = v147;
          sub_1001A1C50(v100, v147, type metadata accessor for DeviceEvent);
          uint64_t v103 = Logger.logObject.getter();
          int v104 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v103, (os_log_type_t)v104))
          {
            LODWORD(v165) = v104;
            uint64_t v105 = 0x6E776F6E6B6E752ELL;
            uint64_t v106 = swift_slowAlloc();
            uint64_t v164 = swift_slowAlloc();
            unint64_t v177 = (char *)v164;
            *(_DWORD *)uint64_t v106 = 141559043;
            uint64_t v180 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v106 + 12) = 2081;
            uint64_t v107 = v173;
            uint64_t v108 = v154;
            sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v180 = sub_1008FA0F0(v109, v110, (uint64_t *)&v177);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001A1D4C(v108, type metadata accessor for DeviceEvent);
            *(_WORD *)(v106 + 22) = 2082;
            unint64_t v111 = 0xE800000000000000;
            switch(*(unsigned char *)(v101 + 9))
            {
              case 1:
                uint64_t v105 = 0x7463656E6E6F632ELL;
                break;
              case 2:
                uint64_t v105 = 0x6E6E6F637369642ELL;
                unint64_t v111 = 0xEB00000000746365;
                break;
              case 3:
                unint64_t v111 = 0xE700000000000000;
                unsigned int v120 = 1953784110;
                goto LABEL_45;
              case 4:
                unint64_t v111 = 0xE700000000000000;
                unsigned int v120 = 1952801838;
LABEL_45:
                uint64_t v105 = v120 | 0x68636100000000;
                break;
              case 5:
                uint64_t v105 = 0x657463657465642ELL;
                unint64_t v111 = 0xEF79627261654E64;
                break;
              case 6:
                uint64_t v105 = 0x657070617369642ELL;
                unint64_t v111 = 0xEC00000064657261;
                break;
              case 7:
                unint64_t v111 = 0xE500000000000000;
                uint64_t v105 = 0x726961702ELL;
                break;
              default:
                break;
            }
            uint64_t v180 = sub_1008FA0F0(v105, v111, (uint64_t *)&v177);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001A1D4C(v101, type metadata accessor for DeviceEvent);
            *(_WORD *)(v106 + 32) = 2082;
            uint64_t v121 = v147;
            sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v180 = sub_1008FA0F0(v122, v123, (uint64_t *)&v177);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001A1D4C(v121, type metadata accessor for DeviceEvent);
            *(_WORD *)(v106 + 42) = 2048;
            uint64_t v180 = (uint64_t)v168;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v165, "Stored new device event for beacon: %{private,mask.hash}s,\nevent: %{public}s, ts: %{public}s (eventId=%lld).", (uint8_t *)v106, 0x34u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v112 = v107;
            uint64_t v81 = v167;
            uint64_t v28 = (char *)v174;
            uint64_t v84 = v175;
            uint64_t v79 = v153;
          }
          else
          {
            sub_1001A1D4C(v154, type metadata accessor for DeviceEvent);
            sub_1001A1D4C(v101, type metadata accessor for DeviceEvent);
            sub_1001A1D4C(v102, type metadata accessor for DeviceEvent);

            uint64_t v112 = v173;
          }
          uint64_t v124 = v146;
          sub_10001D074(v176 + *(int *)(v112 + 32), v146, &qword_10163CF20);
          int v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v124, 1, v145);
          uint64_t v127 = v171;
          uint64_t v126 = v172;
          if (v125 == 1)
          {
            swift_release();
            (*(void (**)(char *, uint64_t))(v148 + 8))(v79, v149);
            v127(v84, v81);
            sub_10001DAB4(v124, &qword_10163CF20);
            return (uint64_t)v168;
          }
          else
          {
            uint64_t v128 = v124;
            uint64_t v129 = v142;
            sub_1001A1CE4(v128, v142, type metadata accessor for DeviceEvent.AttachmentInfo);
            uint64_t v130 = (uint64_t)v168;
            sub_10019C5E4(v129, (uint64_t)v168);
            swift_release();
            sub_1001A1D4C(v129, type metadata accessor for DeviceEvent.AttachmentInfo);
            (*(void (**)(char *, uint64_t))(v148 + 8))(v79, v149);
            v127(v84, v81);
            if (!v126) {
              return v130;
            }
          }
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v161, v73, v74);
        Row.subscript.getter();
        uint64_t v28 = v177;
        if (qword_1016368D8 != -1) {
          swift_once();
        }
        uint64_t v86 = type metadata accessor for Logger();
        sub_100010324(v86, (uint64_t)qword_10170D7E8);
        uint64_t v87 = v176;
        sub_1001A1C50(v176, v158, type metadata accessor for DeviceEvent);
        uint64_t v88 = v155;
        sub_1001A1C50(v87, v155, type metadata accessor for DeviceEvent);
        uint64_t v89 = v156;
        sub_1001A1C50(v87, v156, type metadata accessor for DeviceEvent);
        uint64_t v90 = Logger.logObject.getter();
        int v91 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v90, (os_log_type_t)v91))
        {
          LODWORD(v176) = v91;
          uint64_t v168 = v28;
          uint64_t v92 = 0x6E776F6E6B6E752ELL;
          uint64_t v93 = swift_slowAlloc();
          uint64_t v165 = swift_slowAlloc();
          unint64_t v177 = (char *)v165;
          *(_DWORD *)uint64_t v93 = 136447235;
          uint64_t v94 = v158;
          unint64_t v95 = 0xE800000000000000;
          uint64_t v96 = v155;
          switch(*(unsigned char *)(v158 + 9))
          {
            case 1:
              uint64_t v92 = 0x7463656E6E6F632ELL;
              break;
            case 2:
              uint64_t v92 = 0x6E6E6F637369642ELL;
              unint64_t v95 = 0xEB00000000746365;
              break;
            case 3:
              unint64_t v95 = 0xE700000000000000;
              unsigned int v113 = 1953784110;
              goto LABEL_35;
            case 4:
              unint64_t v95 = 0xE700000000000000;
              unsigned int v113 = 1952801838;
LABEL_35:
              uint64_t v92 = v113 | 0x68636100000000;
              break;
            case 5:
              uint64_t v92 = 0x657463657465642ELL;
              unint64_t v95 = 0xEF79627261654E64;
              break;
            case 6:
              uint64_t v92 = 0x657070617369642ELL;
              unint64_t v95 = 0xEC00000064657261;
              break;
            case 7:
              unint64_t v95 = 0xE500000000000000;
              uint64_t v92 = 0x726961702ELL;
              break;
            default:
              break;
          }
          uint64_t v180 = sub_1008FA0F0(v92, v95, (uint64_t *)&v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001A1D4C(v94, type metadata accessor for DeviceEvent);
          *(_WORD *)(v93 + 12) = 2082;
          sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v180 = sub_1008FA0F0(v114, v115, (uint64_t *)&v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001A1D4C(v96, type metadata accessor for DeviceEvent);
          *(_WORD *)(v93 + 22) = 2160;
          uint64_t v180 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v93 + 32) = 2081;
          uint64_t v116 = v156;
          sub_1001A1E54((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v180 = sub_1008FA0F0(v117, v118, (uint64_t *)&v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001A1D4C(v116, type metadata accessor for DeviceEvent);
          *(_WORD *)(v93 + 42) = 2048;
          uint64_t v28 = v168;
          uint64_t v180 = (uint64_t)v168;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v176, "Device event for %{public}s/%{public}s/%{private,mask.hash}s already exists (eventId=%lld).", (uint8_t *)v93, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release();
          (*(void (**)(char *, uint64_t))(v163 + 8))(v161, v164);
          uint64_t v97 = v175;
          uint64_t v98 = v167;
        }
        else
        {

          swift_release();
          sub_1001A1D4C(v89, type metadata accessor for DeviceEvent);
          sub_1001A1D4C(v88, type metadata accessor for DeviceEvent);
          sub_1001A1D4C(v158, type metadata accessor for DeviceEvent);
          (*(void (**)(char *, uint64_t))(v163 + 8))(v161, v164);
          uint64_t v97 = v65;
          uint64_t v98 = v71;
        }
        v171(v97, v98);
      }
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v72 = 2;
    *(unsigned char *)(v72 + 4) = 1;
    swift_willThrow();
  }
  return (uint64_t)v28;
}

uint64_t sub_10019AB58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a2;
  uint64_t v82 = type metadata accessor for DeviceEvent.Location(0);
  __chkstk_darwin(v82);
  uint64_t v75 = (uint64_t)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Date();
  uint64_t v77 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v76 = (uint64_t)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Update();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for OnConflict();
  uint64_t v79 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Insert();
  uint64_t v80 = *(void *)(v11 - 8);
  uint64_t v81 = v11;
  __chkstk_darwin(v11);
  uint64_t v84 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000588C(&qword_10163CE68);
  uint64_t v13 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v15 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Table();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10163CEA8);
  __chkstk_darwin(v20 - 8);
  uint64_t v87 = (uint64_t)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_1009FCF40())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v34 = 2;
    *(unsigned char *)(v34 + 4) = 1;
    return swift_willThrow();
  }
  uint64_t v71 = v7;
  uint64_t v69 = a3;
  uint64_t v22 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
  if (qword_1016375C8 != -1) {
    swift_once();
  }
  uint64_t v74 = a1;
  uint64_t v70 = v8;
  uint64_t v23 = sub_10000588C(&qword_10163CF00);
  uint64_t v24 = sub_100010324(v23, (uint64_t)qword_10170F6B0);
  v91[0] = v90;
  uint64_t v73 = v24;
  == infix<A>(_:_:)();
  uint64_t v72 = v22;
  QueryType.filter(_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v66 = v15;
  uint64_t v68 = v13 + 8;
  uint64_t v67 = v25;
  v25(v15, v89);
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10000588C(&qword_10163CE98);
  uint64_t v27 = sub_100010324(v26, (uint64_t)qword_10170F650);
  uint64_t v91[3] = v26;
  v91[4] = sub_100062734(&qword_10163CF08, &qword_10163CE98);
  uint64_t v28 = sub_10001D958(v91);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  v92[3] = v16;
  v92[4] = (uint64_t)&protocol witness table for Table;
  sub_10001D958(v92);
  SchemaType.select(_:_:)();
  unint64_t v31 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v29 = v17 + 8;
  uint64_t v30 = v31;
  v31(v19, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
  uint64_t v32 = v88;
  Connection.prepare(_:)();
  if (v32)
  {
    swift_release();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
  }
  uint64_t v61 = v26;
  uint64_t v62 = v19;
  uint64_t v65 = v27;
  uint64_t v63 = v30;
  uint64_t v64 = v29;
  uint64_t v88 = 0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v35 = v87;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  swift_release();
  uint64_t v36 = type metadata accessor for Row();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v35, 1, v36) == 1)
  {
    uint64_t v37 = v79;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v85, enum case for OnConflict.replace(_:), v86);
    uint64_t v38 = sub_10000588C(&qword_10163CF10);
    uint64_t v39 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Setter() - 8) + 80);
    uint64_t v40 = (v39 + 32) & ~v39;
    v60[3] = v38;
    v60[1] = v39 | 7;
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_10134CDE0;
    void v60[2] = v40;
    v60[4] = v41;
    v92[0] = v90;
    <- infix<A>(_:_:)();
    if (qword_101637590 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_10000588C(&qword_10163CF18);
    sub_100010324(v42, (uint64_t)qword_10170F608);
    uint64_t v43 = v74;
    v92[0] = *v74;
    <- infix<A>(_:_:)();
    if (qword_101637598 != -1) {
      swift_once();
    }
    sub_100010324(v42, (uint64_t)qword_10170F620);
    v92[0] = v43[1];
    <- infix<A>(_:_:)();
    if (qword_1016375A0 != -1) {
      swift_once();
    }
    sub_100010324(v42, (uint64_t)qword_10170F638);
    v92[0] = v43[2];
    <- infix<A>(_:_:)();
    <- infix<A>(_:_:)();
    uint64_t v44 = v84;
    uint64_t v45 = v85;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v45, v86);
    uint64_t v46 = v88;
    Connection.run(_:)();
    if (v46)
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v44, v81);
      swift_release();
      return sub_10001DAB4(v87, &qword_10163CEA8);
    }
    v92[0] = v90;
    unint64_t v47 = v66;
    == infix<A>(_:_:)();
    uint64_t v48 = v62;
    QueryType.filter(_:)();
    v67(v47, v89);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
    if (qword_1016375C0 != -1) {
      swift_once();
    }
    sub_100010324(v61, (uint64_t)qword_10170F698);
    uint64_t v49 = v76;
    static Date.trustedNow.getter(v76);
    uint64_t v50 = v83;
    <- infix<A>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v49, v50);
    uint64_t v51 = v78;
    QueryType.update(_:)();
    swift_bridgeObjectRelease();
    v63(v48, v16);
    Connection.run(_:)();
    uint64_t v88 = 0;
    uint64_t v52 = (uint64_t)v74;
    if (qword_1016368D8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100010324(v53, (uint64_t)qword_10170D7E8);
    uint64_t v54 = v75;
    sub_1001A1C50(v52, v75, type metadata accessor for DeviceEvent.Location);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      v92[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136446466;
      sub_1001A1E54((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      v91[0] = sub_1008FA0F0(v58, v59, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A1D4C(v54, type metadata accessor for DeviceEvent.Location);
      *(_WORD *)(v57 + 12) = 2048;
      v91[0] = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Updated location for device event ts: %{public}s (eventId=%lld).", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release();
      sub_1001A1D4C(v54, type metadata accessor for DeviceEvent.Location);
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v71);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v84, v81);
  }
  else
  {
    swift_release();
  }
  return sub_10001DAB4(v87, &qword_10163CEA8);
}

uint64_t sub_10019B9D4(uint64_t a1, uint64_t a2)
{
  v21[6] = a1;
  uint64_t v3 = sub_10000588C(&qword_10163CE68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Table();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v20 - v12;
  v20[1] = a2;
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v14, (uint64_t)qword_10170F410);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v15, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v21[3] = v7;
  v21[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v17 = sub_10001D958(v21);
  (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(v17, v13, v7);
  uint64_t v18 = sub_100192424();
  v16(v13, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
  return v18;
}

uint64_t sub_10019BD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a3;
  uint64_t v41 = sub_10000588C(&qword_10163CE68);
  uint64_t v5 = *(void *)(v41 - 8);
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v37 - v11;
  uint64_t v12 = type metadata accessor for Table();
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v44 = (char *)&v37 - v15;
  int64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (v16)
  {
    uint64_t v37 = a1;
    uint64_t v38 = v8;
    v45[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B700C(0, v16, 0);
    uint64_t v17 = (void *)v45[0];
    uint64_t v18 = (char *)(a2 + 32);
    unint64_t v19 = *(void *)(v45[0] + 16);
    do
    {
      char v21 = *v18++;
      char v20 = v21;
      v45[0] = (uint64_t)v17;
      unint64_t v22 = v17[3];
      if (v19 >= v22 >> 1)
      {
        sub_1000B700C(v22 > 1, v19 + 1, 1);
        uint64_t v17 = (void *)v45[0];
      }
      v17[2] = v19 + 1;
      *((unsigned char *)v17 + v19++ + 32) = v20;
      --v16;
    }
    while (v16);
    uint64_t v8 = v38;
  }
  uint64_t v38 = (char *)(v46 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata);
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v23, (uint64_t)qword_10170F410);
  type metadata accessor for UUID();
  uint64_t v24 = v39;
  == infix<A>(_:_:)();
  v45[0] = (uint64_t)v17;
  if (qword_1016375B0 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v25, (uint64_t)qword_10170F668);
  sub_10000588C(&qword_10163C618);
  sub_100062734(&qword_10163CE80, &qword_10163C618);
  sub_1001A1448();
  Collection<>.contains(_:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = v40;
  && infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v41;
  v27(v8, v41);
  v27(v24, v28);
  uint64_t v29 = v42;
  QueryType.filter(_:)();
  v27(v26, v28);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v30, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  unint64_t v31 = v44;
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = v43;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  v33(v29, v12);
  void v45[3] = v12;
  v45[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v34 = sub_10001D958(v45);
  (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(v34, v31, v12);
  uint64_t v35 = sub_100192424();
  v33(v31, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  return v35;
}

uint64_t sub_10019C2B4(uint64_t a1)
{
  v14[1] = a1;
  uint64_t v1 = type metadata accessor for Delete();
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1009FCF40())
  {
    v14[0] = v1;
    if (qword_1016374E8 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v11, (uint64_t)qword_10170F410);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    QueryType.delete()();
    Connection.run(_:)();
    swift_release();
    (*(void (**)(char *, void))(v16 + 8))(v3, v14[0]);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v10, v8);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10019C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = type metadata accessor for OnConflict();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Insert();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1009FCF40())
  {
    uint64_t v26 = v2;
    uint64_t v28 = v11;
    uint64_t v29 = v9;
    uint64_t v30 = v8;
    uint64_t v12 = *(void (**)(char *, void, uint64_t))(v5 + 104);
    uint64_t v25 = v4;
    v12(v7, enum case for OnConflict.ignore(_:), v4);
    sub_10000588C(&qword_10163CF10);
    type metadata accessor for Setter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_101347500;
    if (qword_1016375C8 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10000588C(&qword_10163CF00);
    sub_100010324(v13, (uint64_t)qword_10170F6B0);
    uint64_t v27 = a2;
    uint64_t v33 = a2;
    <- infix<A>(_:_:)();
    if (qword_1016375D0 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v14, (uint64_t)qword_10170F6C8);
    type metadata accessor for UUID();
    <- infix<A>(_:_:)();
    if (qword_1016375D8 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_10000588C(&qword_10163CF40);
    sub_100010324(v15, (uint64_t)qword_10170F6E0);
    type metadata accessor for DeviceEvent.AttachmentInfo(0);
    <- infix<A>(_:_:)();
    type metadata accessor for Table();
    uint64_t v16 = v28;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v25);
    uint64_t v17 = v26;
    Connection.run(_:)();
    uint64_t v18 = v27;
    if (v17)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
      return swift_release();
    }
    else
    {
      if (qword_1016368D8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170D7E8);
      unint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134217984;
        uint64_t v33 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Stored attachment info for device event (eventId=%lld).", v24, 0xCu);
        swift_slowDealloc();
      }

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v16, v30);
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 2;
    *(unsigned char *)(v20 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10019CB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v4, (uint64_t)qword_10170F410);
  uint64_t v5 = type metadata accessor for UUID();
  Row.subscript.getter();
  if (qword_1016375B0 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v6, (uint64_t)qword_10170F668);
  sub_1001A1448();
  Row.subscript.getter();
  char v7 = sub_1009D23F4(v20);
  if (v7 == 9) {
    char v8 = 0;
  }
  else {
    char v8 = v7;
  }
  uint64_t v9 = (int *)type metadata accessor for KeySyncMetadata();
  *(unsigned char *)(a2 + v9[5]) = v8;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v10, (uint64_t)qword_10170F650);
  uint64_t v11 = a2 + v9[7];
  uint64_t v12 = type metadata accessor for Date();
  Row.subscript.getter();
  if (qword_1016374F8 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170F440);
  Row.get<A>(_:)();
  if (v23) {
    goto LABEL_22;
  }
  if (v20 > 2u)
  {
    sub_1001A14F0();
    swift_allocError();
    *uint64_t v16 = 0;
    swift_willThrow();
LABEL_22:
    uint64_t v17 = type metadata accessor for Row();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  if (qword_1016374F0 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v13, (uint64_t)qword_10170F428);
  sub_1001A1544();
  Row.subscript.getter();
  if (qword_101637500 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CE68);
  sub_100010324(v14, (uint64_t)qword_10170F458);
  Row.subscript.getter();
  if ((_BYTE)v20)
  {
    if (v20 == 1)
    {
      uint64_t v21 = &type metadata for SecondaryIndex;
      unint64_t v15 = sub_1001A15EC();
    }
    else
    {
      uint64_t v21 = &type metadata for SecureLocationsIndex;
      unint64_t v15 = sub_1001A1598();
    }
  }
  else
  {
    uint64_t v21 = &type metadata for PrimaryIndex;
    unint64_t v15 = sub_1001A1640();
  }
  unint64_t v22 = v15;
  uint64_t v19 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  return sub_10001CEB0(&v20, a2 + v9[6]);
}

uint64_t sub_10019CFB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = sub_10000588C(&qword_10163CE98);
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637590 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000588C(&qword_10163CF18);
  sub_100010324(v10, (uint64_t)qword_10170F608);
  Row.get<A>(_:)();
  if (v2)
  {
    swift_release();
    uint64_t v11 = type metadata accessor for Row();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  }
  else
  {
    *(void *)uint64_t v18 = v19;
    if (qword_101637598 != -1) {
      swift_once();
    }
    sub_100010324(v10, (uint64_t)qword_10170F620);
    Row.get<A>(_:)();
    *((void *)v18 + 1) = v19;
    if (qword_1016375A0 != -1) {
      swift_once();
    }
    sub_100010324(v10, (uint64_t)qword_10170F638);
    Row.get<A>(_:)();
    *((void *)v18 + 2) = v19;
    if (qword_1016375A8 != -1) {
      swift_once();
    }
    sub_100010324(v4, (uint64_t)qword_10170F650);
    type metadata accessor for Table();
    QueryType.subscript.getter();
    Row.get<A>(_:)();
    swift_release();
    uint64_t v13 = type metadata accessor for Row();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
    uint64_t v14 = type metadata accessor for DeviceEvent.Location(0);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v18[*(int *)(v14 + 28)], v9, v7);
  }
}

uint64_t sub_10019D424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v22[1] = a2;
  uint64_t v23 = a3;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016375D0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v16, (uint64_t)qword_10170F6C8);
  Row.get<A>(_:)();
  if (v3)
  {
    swift_release();
    uint64_t v17 = type metadata accessor for Row();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v23, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v11, v8);
    if (qword_1016375D8 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_10000588C(&qword_10163CF40);
    sub_100010324(v18, (uint64_t)qword_10170F6E0);
    Row.get<A>(_:)();
    swift_release();
    uint64_t v20 = type metadata accessor for Row();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
    sub_10001D608((uint64_t)v7, (uint64_t)&v15[*(int *)(v12 + 20)], &qword_101638CF0);
    uint64_t v21 = v23;
    sub_1001A1C50((uint64_t)v15, v23, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
    return sub_1001A1D4C((uint64_t)v15, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
}

uint64_t sub_10019D830()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)v0;
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v52 - v10;
  if (*(unsigned char *)(v0 + 57) == 1)
  {
    static SystemInfo.lockState.getter();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
    sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v62 = v63;
    uint64_t v12 = v65;
    uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
    v13(v9, v5);
    v13(v11, v5);
    uint64_t v2 = v1;
    if (v62 == v12)
    {
      sub_1001A149C();
      swift_allocError();
      int v15 = 4;
LABEL_6:
      *(_DWORD *)uint64_t v14 = v15;
      *(unsigned char *)(v14 + 4) = 1;
      return swift_willThrow();
    }
  }
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v16 = v63;
  swift_release();
  if (v16)
  {
    sub_1001A149C();
    swift_allocError();
    int v15 = 3;
    goto LABEL_6;
  }
  if (qword_1016374D8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = (void *)sub_100010324(v18, (uint64_t)qword_10166E618);
  unsigned int v20 = *(unsigned __int8 *)(v3 + 56);
  uint64_t v21 = sub_1001A1E54(&qword_10163D088, (void (*)(uint64_t))type metadata accessor for ObservationDatabase);
  uint64_t result = static Database.establishConnection(logger:temporary:)(v19, v20, v4, v21);
  if (!v2)
  {
    uint64_t v62 = v3;
    uint64_t v22 = __chkstk_darwin(result);
    v52[-2] = v62;
    v52[-1] = v22;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
    uint64_t v23 = v62;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (!v63)
    {
      sub_1001A149C();
      swift_allocError();
      int v15 = 2;
      goto LABEL_6;
    }
    uint64_t v24 = *(void *)(v63 + 24);
    swift_retain();
    swift_release();
    v25._uint64_t countAndFlagsBits = 0xD000000000000019;
    v25._object = (void *)0x80000001013F43E0;
    Connection.execute(_:)(v25);
    if (v26) {
      return swift_release();
    }
    sub_1001A0B80();
    Connection.handle.getter();
    _sqlite3_maintain_load_factor();
    LODWORD(v61) = Connection.userVersion.getter();
    if ((int)v61 > 13)
    {
      if (qword_101636DE0 != -1) {
LABEL_38:
      }
        swift_once();
      sub_100010324(v18, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446722;
        uint64_t v31 = sub_1001A02A4();
        uint64_t v65 = sub_1008FA0F0(v31, v32, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 1024;
        LODWORD(v65) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 18) = 1024;
        swift_release();
        LODWORD(v65) = 13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s Schema too new! (%d) -- expected <= %d", (uint8_t *)v30, 0x18u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v38 = v61;
      *(unsigned char *)(v38 + 4) = 0;
      swift_willThrow();
      return swift_release();
    }
    if (v61 == 13)
    {
      if (qword_101636DE0 == -1)
      {
LABEL_20:
        sub_100010324(v18, (uint64_t)qword_10170E5E0);
        swift_retain_n();
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136446466;
          uint64_t v36 = sub_1001A02A4();
          uint64_t v65 = sub_1008FA0F0(v36, v37, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v35 + 12) = 1024;
          swift_release();
          LODWORD(v65) = 13;
          uint64_t v23 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s is available. [schema version %d]", (uint8_t *)v35, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v49 = *(os_unfair_lock_s **)(v23 + 24);
        uint64_t v50 = v49 + 4;
        uint64_t v51 = v49 + 5;
        os_unfair_lock_lock(v49 + 5);
        sub_1002B65AC(v50);
        os_unfair_lock_unlock(v51);
        LOBYTE(v63) = 1;
        AsyncStreamProvider.yield(value:transaction:)();
        return swift_release();
      }
    }
    else
    {
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      uint64_t v54 = (char *)&v65 + 4;
      uint64_t v55 = &v66;
      *(void *)&long long v27 = 136446722;
      long long v53 = v27;
      v52[1] = (char *)&type metadata for Any + 8;
      unint64_t v58 = 0x80000001013F4400;
      int v39 = v61;
      do
      {
        if (v39 < (int)v61)
        {
          __break(1u);
          goto LABEL_38;
        }
        int v40 = v39 + 1;
        uint64_t v41 = sub_100010324(v18, (uint64_t)qword_10170E5E0);
        swift_retain();
        uint64_t v59 = v41;
        int v42 = v39;
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          uint64_t v63 = v56;
          *(_DWORD *)uint64_t v45 = v53;
          int v57 = v40;
          LODWORD(v60) = v42;
          uint64_t v46 = sub_1001A02A4();
          uint64_t v65 = sub_1008FA0F0(v46, v47, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v45 + 12) = 1024;
          LODWORD(v65) = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 18) = 1024;
          int v40 = v57;
          LODWORD(v65) = v57;
          int v42 = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s migrating schema %d -> %d", (uint8_t *)v45, 0x18u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        sub_1011F9074(v42, v40, v24);
        uint64_t v63 = 0;
        unint64_t v64 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        uint64_t v63 = 0xD000000000000016;
        unint64_t v64 = v58;
        LODWORD(v65) = v40;
        v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        Connection.run(_:_:)();
        swift_bridgeObjectRelease();
        swift_release();
        int v39 = v40;
      }
      while (v40 != 13);
      sub_1001A1798((void (*)(void))type metadata accessor for ObservationDatabase, (void (*)(char *, char *, char *))sub_1011F8E8C);
      if (qword_101636DE0 == -1) {
        goto LABEL_20;
      }
    }
    swift_once();
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10019E634()
{
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v53 - v8;
  uint64_t v62 = v0;
  if (*((unsigned char *)v0 + 53) == 1)
  {
    static SystemInfo.lockState.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v3);
    sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v10 = v63;
    uint64_t v11 = v65;
    uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
    v12(v7, v3);
    v12(v9, v3);
    if (v10 == v11)
    {
      sub_1001A149C();
      swift_allocError();
      int v14 = 4;
LABEL_6:
      *(_DWORD *)uint64_t v13 = v14;
      *(unsigned char *)(v13 + 4) = 1;
      return swift_willThrow();
    }
  }
  int v15 = v62;
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v16 = v63;
  uint64_t v17 = swift_release();
  if (v16)
  {
    sub_1001A149C();
    swift_allocError();
    int v14 = 3;
    goto LABEL_6;
  }
  __chkstk_darwin(v17);
  v53[-2] = v15;
  v53[-1] = v2;
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (!v1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (!v63)
    {
      sub_1001A149C();
      swift_allocError();
      int v14 = 2;
      goto LABEL_6;
    }
    uint64_t v19 = *(char **)(v63 + 24);
    swift_retain();
    swift_release();
    v20._uint64_t countAndFlagsBits = 0xD000000000000019;
    v20._object = (void *)0x80000001013F43E0;
    Connection.execute(_:)(v20);
    if (v21) {
      return swift_release();
    }
    sub_1001A0E38();
    Connection.handle.getter();
    _sqlite3_maintain_load_factor();
    int v22 = Connection.userVersion.getter();
    int v23 = v22;
    int v58 = v22;
    if (v22 > 11)
    {
      if (qword_101636DE0 != -1) {
LABEL_40:
      }
        swift_once();
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      Swift::String v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136446722;
        uint64_t v28 = sub_1001A0598();
        uint64_t v65 = sub_1008FA0F0(v28, v29, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 1024;
        LODWORD(v65) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 18) = 1024;
        int v23 = v58;
        swift_release();
        LODWORD(v65) = 11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Schema too new! (%d) -- expected <= %d", (uint8_t *)v27, 0x18u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v23;
      *(unsigned char *)(v36 + 4) = 0;
      swift_willThrow();
      return swift_release();
    }
    if (v22 == 11)
    {
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100010324(v30, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v34 = sub_1001A0598();
        uint64_t v65 = sub_1008FA0F0(v34, v35, &v63);
        int v15 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        swift_release();
        LODWORD(v65) = 11;
LABEL_21:
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s is available. [schema version %d]", (uint8_t *)v33, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_37;
      }
    }
    else
    {
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      uint64_t v55 = (char *)&v65 + 4;
      uint64_t v56 = &v66;
      *(void *)&long long v37 = 136446722;
      long long v54 = v37;
      v53[1] = (char *)&type metadata for Any + 8;
      unint64_t v59 = 0x80000001013F4400;
      int v38 = v23;
      do
      {
        if (v38 < v23)
        {
          __break(1u);
          goto LABEL_40;
        }
        LODWORD(v62) = v38 + 1;
        uint64_t v39 = sub_100010324(v61, (uint64_t)qword_10170E5E0);
        swift_retain();
        uint64_t v60 = v39;
        int v40 = v15;
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc();
          uint64_t v57 = swift_slowAlloc();
          uint64_t v63 = v57;
          *(_DWORD *)uint64_t v43 = v54;
          uint64_t v44 = sub_1001A0598();
          uint64_t v65 = sub_1008FA0F0(v44, v45, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 12) = 1024;
          LODWORD(v65) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v43 + 18) = 1024;
          LODWORD(v65) = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s migrating schema %d -> %d", (uint8_t *)v43, 0x18u);
          swift_arrayDestroy();
          swift_slowDealloc();
          int v23 = v58;
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        int v15 = v40;
        int v46 = (int)v62;
        sub_1002B65B8(v38, (int)v62, v19);
        uint64_t v63 = 0;
        unint64_t v64 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        uint64_t v63 = 0xD000000000000016;
        unint64_t v64 = v59;
        LODWORD(v65) = v46;
        v47._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        Connection.run(_:_:)();
        swift_bridgeObjectRelease();
        swift_release();
        int v38 = v46;
      }
      while (v46 != 11);
      sub_1001A1798((void (*)(void))type metadata accessor for ItemSharingKeyDatabase, (void (*)(char *, char *, char *))sub_1002B6318);
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      sub_100010324(v61, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v48 = sub_1001A0598();
        uint64_t v65 = sub_1008FA0F0(v48, v49, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        swift_release();
        LODWORD(v65) = 11;
        goto LABEL_21;
      }
    }

    swift_release_n();
LABEL_37:
    uint64_t v50 = (os_unfair_lock_s *)v15[4];
    uint64_t v51 = v50 + 4;
    uint64_t v52 = v50 + 5;
    os_unfair_lock_lock(v50 + 5);
    sub_1002B65AC(v51);
    os_unfair_lock_unlock(v52);
    LOBYTE(v63) = 1;
    AsyncStreamProvider.yield(value:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10019F46C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v53 - v8;
  uint64_t v62 = v0;
  if (*((unsigned char *)v0 + 49) == 1)
  {
    static SystemInfo.lockState.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v3);
    sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v10 = v63;
    uint64_t v11 = v65;
    uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
    v12(v7, v3);
    v12(v9, v3);
    if (v10 == v11)
    {
      sub_1001A149C();
      swift_allocError();
      int v14 = 4;
LABEL_6:
      *(_DWORD *)uint64_t v13 = v14;
      *(unsigned char *)(v13 + 4) = 1;
      return swift_willThrow();
    }
  }
  int v15 = v62;
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v16 = v63;
  uint64_t v17 = swift_release();
  if (v16)
  {
    sub_1001A149C();
    swift_allocError();
    int v14 = 3;
    goto LABEL_6;
  }
  __chkstk_darwin(v17);
  v53[-2] = v15;
  v53[-1] = v2;
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (!v1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (!v63)
    {
      sub_1001A149C();
      swift_allocError();
      int v14 = 2;
      goto LABEL_6;
    }
    uint64_t v19 = *(void *)(v63 + 24);
    swift_retain();
    swift_release();
    v20._uint64_t countAndFlagsBits = 0xD000000000000019;
    v20._object = (void *)0x80000001013F43E0;
    Connection.execute(_:)(v20);
    if (v21) {
      return swift_release();
    }
    sub_1001A10F0();
    Connection.handle.getter();
    _sqlite3_maintain_load_factor();
    int v22 = Connection.userVersion.getter();
    int v23 = v22;
    int v58 = v22;
    if (v22 > 1)
    {
      if (qword_101636DE0 != -1) {
LABEL_40:
      }
        swift_once();
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      Swift::String v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136446722;
        uint64_t v28 = sub_1001A088C();
        uint64_t v65 = sub_1008FA0F0(v28, v29, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 1024;
        LODWORD(v65) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 18) = 1024;
        int v23 = v58;
        swift_release();
        LODWORD(v65) = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Schema too new! (%d) -- expected <= %d", (uint8_t *)v27, 0x18u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v36 = v23;
      *(unsigned char *)(v36 + 4) = 0;
      swift_willThrow();
      return swift_release();
    }
    if (v22 == 1)
    {
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100010324(v30, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v34 = sub_1001A088C();
        uint64_t v65 = sub_1008FA0F0(v34, v35, &v63);
        int v15 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        swift_release();
        LODWORD(v65) = 1;
LABEL_21:
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s is available. [schema version %d]", (uint8_t *)v33, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_37;
      }
    }
    else
    {
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      uint64_t v55 = (char *)&v65 + 4;
      uint64_t v56 = &v66;
      *(void *)&long long v37 = 136446722;
      long long v54 = v37;
      v53[1] = (char *)&type metadata for Any + 8;
      unint64_t v59 = 0x80000001013F4400;
      int v38 = v23;
      do
      {
        if (v38 < v23)
        {
          __break(1u);
          goto LABEL_40;
        }
        LODWORD(v62) = v38 + 1;
        uint64_t v39 = sub_100010324(v61, (uint64_t)qword_10170E5E0);
        swift_retain();
        uint64_t v60 = v39;
        int v40 = v15;
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc();
          uint64_t v57 = swift_slowAlloc();
          uint64_t v63 = v57;
          *(_DWORD *)uint64_t v43 = v54;
          uint64_t v44 = sub_1001A088C();
          uint64_t v65 = sub_1008FA0F0(v44, v45, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 12) = 1024;
          LODWORD(v65) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v43 + 18) = 1024;
          LODWORD(v65) = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s migrating schema %d -> %d", (uint8_t *)v43, 0x18u);
          swift_arrayDestroy();
          swift_slowDealloc();
          int v23 = v58;
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        int v15 = v40;
        int v46 = (int)v62;
        sub_10086CFE8(v38, (int)v62, v19);
        uint64_t v63 = 0;
        unint64_t v64 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        uint64_t v63 = 0xD000000000000016;
        unint64_t v64 = v59;
        LODWORD(v65) = v46;
        v47._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        Connection.run(_:_:)();
        swift_bridgeObjectRelease();
        swift_release();
        int v38 = v46;
      }
      while (v46 != 1);
      sub_1001A1798((void (*)(void))type metadata accessor for StandaloneBeaconDatabase, (void (*)(char *, char *, char *))sub_10086CD54);
      if (qword_101636DE0 != -1) {
        swift_once();
      }
      sub_100010324(v61, (uint64_t)qword_10170E5E0);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v48 = sub_1001A088C();
        uint64_t v65 = sub_1008FA0F0(v48, v49, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        swift_release();
        LODWORD(v65) = 1;
        goto LABEL_21;
      }
    }

    swift_release_n();
LABEL_37:
    uint64_t v50 = (os_unfair_lock_s *)v15[2];
    uint64_t v51 = v50 + 4;
    uint64_t v52 = v50 + 5;
    os_unfair_lock_lock(v50 + 5);
    sub_1002B65AC(v51);
    os_unfair_lock_unlock(v52);
    LOBYTE(v63) = 1;
    AsyncStreamProvider.yield(value:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A02A4()
{
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v15)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    type metadata accessor for ObservationDatabase();
    sub_1001A1E54(&qword_10163D090, (void (*)(uint64_t))type metadata accessor for ObservationDatabase);
    v0._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = 8250;
    v1._object = (void *)0xE200000000000000;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 0x206574694C515320;
    v3._object = (void *)0xE900000000000076;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = 0x322E33342E33;
    v4._object = (void *)0xE600000000000000;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = Connection.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 62;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    type metadata accessor for ObservationDatabase();
    sub_1001A1E54(&qword_10163D090, (void (*)(uint64_t))type metadata accessor for ObservationDatabase);
    v8._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x206574694C515320;
    v11._object = (void *)0xE900000000000076;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x322E33342E33;
    v12._object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001013F4420;
    v13._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
  }
  return 60;
}

uint64_t sub_1001A0598()
{
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v15)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    type metadata accessor for ItemSharingKeyDatabase();
    sub_1001A1E54(&qword_10163D0A0, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
    v0._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = 8250;
    v1._object = (void *)0xE200000000000000;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 0x206574694C515320;
    v3._object = (void *)0xE900000000000076;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = 0x322E33342E33;
    v4._object = (void *)0xE600000000000000;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = Connection.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 62;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    type metadata accessor for ItemSharingKeyDatabase();
    sub_1001A1E54(&qword_10163D0A0, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
    v8._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x206574694C515320;
    v11._object = (void *)0xE900000000000076;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x322E33342E33;
    v12._object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001013F4420;
    v13._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
  }
  return 60;
}

uint64_t sub_1001A088C()
{
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v15)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    type metadata accessor for StandaloneBeaconDatabase();
    sub_1001A1E54(&qword_10163D098, (void (*)(uint64_t))type metadata accessor for StandaloneBeaconDatabase);
    v0._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = 8250;
    v1._object = (void *)0xE200000000000000;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 0x206574694C515320;
    v3._object = (void *)0xE900000000000076;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = 0x322E33342E33;
    v4._object = (void *)0xE600000000000000;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = Connection.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 62;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    type metadata accessor for StandaloneBeaconDatabase();
    sub_1001A1E54(&qword_10163D098, (void (*)(uint64_t))type metadata accessor for StandaloneBeaconDatabase);
    v8._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x206574694C515320;
    v11._object = (void *)0xE900000000000076;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x322E33342E33;
    v12._object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001013F4420;
    v13._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
  }
  return 60;
}

uint64_t sub_1001A0B80()
{
  uint64_t v1 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  Swift::String v7 = (char *)v15 - v6;
  if (*(unsigned char *)(v0 + 57) != 1) {
    goto LABEL_4;
  }
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v1);
  sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v16;
  uint64_t v9 = v15[1];
  Swift::String v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v5, v1);
  v10(v7, v1);
  if (v8 == v9)
  {
    sub_1001A149C();
    swift_allocError();
    int v12 = 4;
  }
  else
  {
LABEL_4:
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v16)
    {
      swift_retain();
      swift_release();
      v13._object = (void *)0x80000001013F4440;
      v13._uint64_t countAndFlagsBits = 0xD000000000000010;
      Connection.execute(_:)(v13);
      return swift_release();
    }
    sub_1001A149C();
    swift_allocError();
    int v12 = 2;
  }
  *(_DWORD *)uint64_t v11 = v12;
  *(unsigned char *)(v11 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1001A0E38()
{
  uint64_t v1 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  Swift::String v7 = (char *)v15 - v6;
  if (*(unsigned char *)(v0 + 53) != 1) {
    goto LABEL_4;
  }
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v1);
  sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v16;
  uint64_t v9 = v15[1];
  Swift::String v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v5, v1);
  v10(v7, v1);
  if (v8 == v9)
  {
    sub_1001A149C();
    swift_allocError();
    int v12 = 4;
  }
  else
  {
LABEL_4:
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v16)
    {
      swift_retain();
      swift_release();
      v13._object = (void *)0x80000001013F4440;
      v13._uint64_t countAndFlagsBits = 0xD000000000000010;
      Connection.execute(_:)(v13);
      return swift_release();
    }
    sub_1001A149C();
    swift_allocError();
    int v12 = 2;
  }
  *(_DWORD *)uint64_t v11 = v12;
  *(unsigned char *)(v11 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1001A10F0()
{
  uint64_t v1 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  Swift::String v7 = (char *)v15 - v6;
  if (*(unsigned char *)(v0 + 49) != 1) {
    goto LABEL_4;
  }
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v1);
  sub_1001A1E54((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = v16;
  uint64_t v9 = v15[1];
  Swift::String v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v5, v1);
  v10(v7, v1);
  if (v8 == v9)
  {
    sub_1001A149C();
    swift_allocError();
    int v12 = 4;
  }
  else
  {
LABEL_4:
    sub_10000588C(&qword_10163CEF8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (v16)
    {
      swift_retain();
      swift_release();
      v13._object = (void *)0x80000001013F4440;
      v13._uint64_t countAndFlagsBits = 0xD000000000000010;
      Connection.execute(_:)(v13);
      return swift_release();
    }
    sub_1001A149C();
    swift_allocError();
    int v12 = 2;
  }
  *(_DWORD *)uint64_t v11 = v12;
  *(unsigned char *)(v11 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1001A13A8()
{
  if (qword_1016374E8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v0, (uint64_t)qword_10170F410);
  type metadata accessor for UUID();
  return Row.subscript.getter();
}

unint64_t sub_1001A1448()
{
  unint64_t result = qword_10163CE88;
  if (!qword_10163CE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CE88);
  }
  return result;
}

unint64_t sub_1001A149C()
{
  unint64_t result = qword_10163CEB0;
  if (!qword_10163CEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CEB0);
  }
  return result;
}

unint64_t sub_1001A14F0()
{
  unint64_t result = qword_10163CEC0;
  if (!qword_10163CEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CEC0);
  }
  return result;
}

unint64_t sub_1001A1544()
{
  unint64_t result = qword_10163CED0;
  if (!qword_10163CED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CED0);
  }
  return result;
}

unint64_t sub_1001A1598()
{
  unint64_t result = qword_10163CED8;
  if (!qword_10163CED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CED8);
  }
  return result;
}

unint64_t sub_1001A15EC()
{
  unint64_t result = qword_10163CEE0;
  if (!qword_10163CEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CEE0);
  }
  return result;
}

unint64_t sub_1001A1640()
{
  unint64_t result = qword_10163CEE8;
  if (!qword_10163CEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CEE8);
  }
  return result;
}

unint64_t sub_1001A1694()
{
  unint64_t result = qword_10163CEF0;
  if (!qword_10163CEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CEF0);
  }
  return result;
}

uint64_t sub_1001A16E8@<X0>(void *a1@<X8>)
{
  return sub_1011F6F40(v1, a1);
}

uint64_t sub_1001A1704()
{
  return sub_100198EF4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1001A1720()
{
  unint64_t result = qword_10163CF30;
  if (!qword_10163CF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CF30);
  }
  return result;
}

uint64_t sub_1001A1774@<X0>(void *a1@<X8>)
{
  return sub_10086BFAC(v1, a1);
}

uint64_t sub_1001A1790(uint64_t a1, uint64_t a2)
{
  return sub_1000361E0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001A1798(void (*a1)(void), void (*a2)(char *, char *, char *))
{
  uint64_t v4 = type metadata accessor for URLResourceValues();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  int v14 = (char *)&v27 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  id v17 = [self defaultManager];
  a1(0);
  a2(v16, v14, v11);
  URLResourceValues.init()();
  URLResourceValues.isExcludedFromBackup.setter();
  URL.path.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(a1) = [v17 fileExistsAtPath:v18];

  if (a1)
  {
    uint64_t v19 = v29;
    URL.setResourceValues(_:)();
    if (v19) {
      goto LABEL_9;
    }
    uint64_t v29 = 0;
  }
  URL.path.getter();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v21 = [v17 fileExistsAtPath:v20];

  if (v21)
  {
    uint64_t v22 = v29;
    URL.setResourceValues(_:)();
    if (v22) {
      goto LABEL_9;
    }
    uint64_t v29 = 0;
  }
  URL.path.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v24 = [v17 fileExistsAtPath:v23];

  if (v24) {
    URL.setResourceValues(_:)();
  }
LABEL_9:

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  Swift::String v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v25(v14, v7);
  return ((uint64_t (*)(char *, uint64_t))v25)(v16, v7);
}

uint64_t sub_1001A1AD8(uint64_t a1, uint64_t a2)
{
  return sub_10001CFB8(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

unint64_t sub_1001A1AE0()
{
  unint64_t result = qword_10163CF70;
  if (!qword_10163CF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CF70);
  }
  return result;
}

uint64_t sub_1001A1B34@<X0>(void *a1@<X8>)
{
  return sub_1002B3D58(v1, a1);
}

uint64_t sub_1001A1B50()
{
  return sub_100193768(v0[2], v0[3], v0[4]);
}

unint64_t sub_1001A1B70()
{
  unint64_t result = qword_10163CFD0;
  if (!qword_10163CFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CFD0);
  }
  return result;
}

unint64_t sub_1001A1BC4()
{
  unint64_t result = qword_10163CFD8;
  if (!qword_10163CFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CFD8);
  }
  return result;
}

uint64_t sub_1001A1C18()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A1C50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A1CB8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001A1CC4()
{
  return sub_10017B638(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001A1CE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A1D4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001A1DAC()
{
  return sub_1011F8964(*(void *)(v0 + 16));
}

uint64_t sub_1001A1DC8()
{
  return sub_1011F9038(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001A1DE4()
{
  return sub_10086C82C(*(void *)(v0 + 16));
}

uint64_t sub_1001A1E00()
{
  return sub_10086CEFC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001A1E1C()
{
  return sub_1002B5DF0(*(void *)(v0 + 16));
}

uint64_t sub_1001A1E38()
{
  return sub_1002B64C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001A1E54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ObservationStore.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001A1F38);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.Error()
{
  return &type metadata for ObservationStore.Error;
}

unsigned char *storeEnumTagSinglePayload for ObservationStore.ObservationStoreError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A203CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.ObservationStoreError()
{
  return &type metadata for ObservationStore.ObservationStoreError;
}

unint64_t sub_1001A2078()
{
  unint64_t result = qword_10163D0A8;
  if (!qword_10163D0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D0A8);
  }
  return result;
}

unint64_t sub_1001A20D0()
{
  unint64_t result = qword_10163D0B0;
  if (!qword_10163D0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D0B0);
  }
  return result;
}

uint64_t sub_1001A2124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v39 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v13 = v40;
  if (!v40[2] || (unint64_t v14 = sub_1007240CC(a1), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    NSString v20 = _swiftEmptyArrayStorage;
    uint64_t v22 = v38;
LABEL_17:
    if (v20[2])
    {
      sub_1001A2590((uint64_t)v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)), (uint64_t)v11);
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v11, v29, 1, v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v11, 1, v4) == 1)
    {
      sub_1001A25F4((uint64_t)v11);
      uint64_t v30 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a2, 1, 1, v30);
    }
    else
    {
      uint64_t v31 = &v11[*(int *)(v4 + 20)];
      uint64_t v32 = type metadata accessor for Date();
      uint64_t v33 = *(void *)(v32 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(a2, v31, v32);
      sub_1001A2654((uint64_t)v11);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(a2, 0, 1, v32);
    }
  }
  uint64_t v16 = *(void *)(v13[7] + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v17 = sub_1007100C0(v16);
  swift_bridgeObjectRelease();
  size_t v18 = sub_100B752E8((uint64_t)v17);
  uint64_t result = swift_release();
  NSString v20 = _swiftEmptyArrayStorage;
  int v40 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v22 = v38;
  if (!v21)
  {
LABEL_16:
    swift_release();
    goto LABEL_17;
  }
  unint64_t v35 = v12;
  uint64_t v36 = v11;
  uint64_t v37 = a2;
  unint64_t v23 = 0;
  while (v23 < *(void *)(v18 + 16))
  {
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = *(void *)(v22 + 72);
    sub_1001A2590(v18 + v24 + v25 * v23, (uint64_t)v8);
    if (v8[*(int *)(v4 + 24)] < 0x2Bu)
    {
      uint64_t result = sub_1001A2654((uint64_t)v8);
    }
    else
    {
      uint64_t v26 = v4;
      sub_1001A26B0((uint64_t)v8, v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v20[2] + 1, 1);
      }
      NSString v20 = v40;
      unint64_t v28 = v40[2];
      unint64_t v27 = v40[3];
      if (v28 >= v27 >> 1)
      {
        sub_1000B77F0(v27 > 1, v28 + 1, 1);
        NSString v20 = v40;
      }
      void v20[2] = v28 + 1;
      uint64_t result = sub_1001A26B0(v39, (uint64_t)v20 + v24 + v28 * v25);
      uint64_t v4 = v26;
      uint64_t v22 = v38;
    }
    if (v21 == ++v23)
    {
      NSString v20 = v40;
      uint64_t v11 = v36;
      a2 = v37;
      uint64_t v12 = v35;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A2590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A25F4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101655530);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A2654(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A26B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A2714()
{
  uint64_t v0 = sub_10000588C(&qword_10163D0B8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163D0C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  size_t v18 = (char *)&v30 - v17;
  uint64_t v19 = type metadata accessor for UTHardwareColor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v2, 1, 1, v19);
  swift_bridgeObjectRetain();
  UTType.init(_deviceModelCode:enclosureColor:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    static UTType._computer.getter();
    sub_1001A2CBC((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v5, v6);
  }
  static UTType._iPhone.getter();
  char v20 = UTType.conforms(to:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v16, v6);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v22(v13, v18, v6);
  if (v20)
  {
    v21(v13, v6);
    v22(v10, v18, v6);
LABEL_7:
    v21(v10, v6);
LABEL_8:
    v21(v18, v6);
    return 1;
  }
  static UTType._iPad.getter();
  char v23 = UTType.conforms(to:)();
  v21(v16, v6);
  v21(v13, v6);
  v22(v10, v18, v6);
  if (v23) {
    goto LABEL_7;
  }
  static UTType._iPodTouch.getter();
  char v25 = UTType.conforms(to:)();
  v21(v16, v6);
  v21(v10, v6);
  if (v25) {
    goto LABEL_8;
  }
  static UTType._appleWatch.getter();
  char v26 = UTType.conforms(to:)();
  v21(v16, v6);
  if (v26)
  {
    v21(v18, v6);
    return 2;
  }
  else
  {
    static UTType._appleTV.getter();
    char v27 = UTType.conforms(to:)();
    v21(v16, v6);
    if (v27 & 1) != 0 || (static UTType._appleTV.getter(), char v28 = UTType.conforms(to:)(), v21(v16, v6), (v28))
    {
      v21(v18, v6);
      return 3;
    }
    else
    {
      static UTType._mac.getter();
      char v29 = UTType.conforms(to:)();
      v21(v16, v6);
      v21(v18, v6);
      if (v29) {
        return 4;
      }
      else {
        return 0;
      }
    }
  }
}

BOOL sub_1001A2BE0()
{
  uint64_t v1 = sub_1001A2714();
  BOOL result = 0;
  switch(v1)
  {
    case 1:
    case 3:
      uint64_t v3 = *(void *)(v0 + 64);
      uint64_t v4 = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
      unint64_t v5 = sub_1009CDB04(v3, v4);
      BOOL v6 = (v5 & (unint64_t)&_mh_execute_header) == 0 && (unsigned __int16)v5 > 0xEu;
      goto LABEL_8;
    case 2:
      uint64_t v10 = *(void *)(v0 + 64);
      uint64_t v11 = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_1009CDB04(v10, v11);
      BOOL result = (v12 & 0xFFF8) != 0 && (v12 & (unint64_t)&_mh_execute_header) == 0;
      break;
    case 4:
      uint64_t v7 = *(void *)(v0 + 64);
      uint64_t v8 = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1009CDB04(v7, v8);
      BOOL v6 = (v9 & (unint64_t)&_mh_execute_header) == 0 && (unsigned __int16)v9 > 0xBu;
LABEL_8:
      BOOL result = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A2CBC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163D0C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A2D1C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D800);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170D800);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170ED40);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001A2DE4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  BOOL v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v6[5] = v1;
  swift_retain();
  sub_1000212B0((uint64_t)v4, (uint64_t)&unk_10163D208, (uint64_t)v6);
  swift_release();
  return sub_1001A5838((uint64_t)v4);
}

uint64_t sub_1001A2F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[42] = a4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[43] = v5;
  v4[44] = *(void *)(v5 - 8);
  v4[45] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[46] = v6;
  v4[47] = *(void *)(v6 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = sub_10000588C(&qword_10163D218);
  v4[54] = swift_task_alloc();
  sub_10000588C(&qword_10163D220);
  v4[55] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163D228);
  v4[56] = v7;
  v4[57] = *(void *)(v7 - 8);
  v4[58] = swift_task_alloc();
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163D230);
  v4[59] = v8;
  v4[60] = *(void *)(v8 - 8);
  v4[61] = swift_task_alloc();
  return _swift_task_switch(sub_1001A31A4, 0, 0);
}

uint64_t sub_1001A31A4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 176);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
    sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001A32D8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A32D8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 504) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A33D8, 0, 0);
}

uint64_t sub_1001A33D8()
{
  uint64_t v1 = *(void *)(v0 + 504);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 504);
    return _swift_task_switch(sub_1001A35AC, v2, 0);
  }
  else
  {
    if (qword_1016368E0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D800);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing PencilPairingService!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1001A35AC()
{
  sub_100D4E988();
  return _swift_task_switch(sub_1001A3618, 0, 0);
}

uint64_t sub_1001A3618()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[64] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001A36C8;
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[56];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_1001A36C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A37C4, 0, 0);
}

uint64_t sub_1001A37C4()
{
  uint64_t v1 = (void *)v0[55];
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163D240);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[60];
    uint64_t v3 = v0[61];
    uint64_t v6 = v0[58];
    uint64_t v5 = v0[59];
    uint64_t v7 = v0[56];
    uint64_t v8 = v0[57];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[54];
    v0[65] = *v1;
    sub_1001A5898((uint64_t)v1 + *(int *)(v2 + 48), v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v0[84] = *(void *)v0[54];
      unint64_t v12 = (void *)swift_task_alloc();
      v0[85] = v12;
      uint64_t v13 = sub_10000588C((uint64_t *)&unk_101649B70);
      *unint64_t v12 = v0;
      v12[1] = sub_1001A4E78;
      uint64_t v14 = v0[42];
      uint64_t v15 = v0 + 30;
    }
    else
    {
      uint64_t v16 = v0[51];
      uint64_t v17 = v0[52];
      uint64_t v18 = v0[47];
      sub_1001A5964(v0[54], v17);
      sub_1001A59C8(v17, v16);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      char v20 = *(void (**)(void, uint64_t, void))(v18 + 32);
      uint64_t v21 = v0[51];
      uint64_t v22 = v0[45];
      uint64_t v23 = v0[43];
      unint64_t v24 = (void (**)(uint64_t, uint64_t))(v0[44] + 8);
      if (EnumCaseMultiPayload == 1)
      {
        char v25 = v0 + 34;
        v20(v0[48], v21, v0[46]);
        id v26 = [objc_allocWithZone((Class)SPDiscoveredAccessory) init];
        v0[75] = v26;
        Identifier.id.getter();
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*v24)(v22, v23);
        [v26 setIdentifier:isa];

        char v28 = (void *)swift_task_alloc();
        v0[76] = v28;
        uint64_t v13 = sub_10000588C((uint64_t *)&unk_101649B70);
        *char v28 = v0;
        v28[1] = sub_1001A457C;
      }
      else
      {
        char v25 = v0 + 38;
        v20(v0[49], v21, v0[46]);
        id v29 = [objc_allocWithZone((Class)SPDiscoveredAccessory) init];
        v0[66] = v29;
        Identifier.id.getter();
        Class v30 = UUID._bridgeToObjectiveC()().super.isa;
        (*v24)(v22, v23);
        [v29 setIdentifier:v30];

        uint64_t v31 = (void *)swift_task_alloc();
        v0[67] = v31;
        uint64_t v13 = sub_10000588C((uint64_t *)&unk_101649B70);
        *uint64_t v31 = v0;
        v31[1] = sub_1001A3C78;
      }
      uint64_t v14 = v0[42];
      uint64_t v15 = v25;
    }
    return withCheckedContinuation<A>(isolation:function:_:)(v15, 0, 0, 0x736553636E797361, 0xED0000736E6F6973, sub_1001A5900, v14, v13);
  }
}

uint64_t sub_1001A3C78()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A3D74, 0, 0);
}

uint64_t sub_1001A3D74(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 304);
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_10163D250);
    sub_1001A5908();
    a1 = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = *(void *)(v3 + 96);
    uint64_t v5 = *(void *)(v3 + 104);
    uint64_t v6 = *(void *)(v3 + 112);
    uint64_t v7 = *(void *)(v3 + 120);
    unint64_t v8 = *(void *)(v3 + 128);
    *(void *)(v3 + 560) = v6;
    *(void *)(v3 + 552) = v5;
    *(void *)(v3 + 544) = v4;
    if (v4 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_30;
      }
      *(void *)(v3 + 328) = v23;
      swift_unknownObjectRetain();
      sub_10000588C(&qword_10163D250);
      swift_dynamicCast();
      uint64_t v12 = *(void *)(v3 + 320);
      swift_unknownObjectRelease();
      uint64_t v11 = v7;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v6 = ~v15;
    uint64_t v5 = v4 + 56;
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = -v15;
    BOOL v18 = v17 < 64;
    uint64_t v19 = -1 << v17;
    *(void *)(v3 + 560) = v6;
    if (v18) {
      uint64_t v14 = ~v19;
    }
    unint64_t v8 = v14 & v16;
    *(void *)(v3 + 552) = v5;
    *(void *)(v3 + 544) = v4;
    if ((v14 & v16) != 0)
    {
LABEL_4:
      uint64_t v9 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v11 = v7;
LABEL_5:
      uint64_t v12 = *(void *)(*(void *)(v4 + 48) + 8 * v10);
      swift_retain();
LABEL_6:
      *(void *)(v3 + 584) = v9;
      *(void *)(v3 + 576) = v11;
      *(void *)(v3 + 568) = v12;
      if (v12)
      {
        uint64_t v13 = (void *)swift_task_alloc();
        *(void *)(v3 + 592) = v13;
        *uint64_t v13 = v3;
        v13[1] = sub_1001A4124;
        a2 = SharingCircleWildAdvertisementKey.init(key:);
        a1 = v3 + 312;
        a3 = 0;
        return XPCSession.proxy(errorHandler:)(a1, a2, a3);
      }
      goto LABEL_30;
    }
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(a1, a2, a3);
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if (v20 < v21)
  {
    unint64_t v22 = *(void *)(v5 + 8 * v20);
    uint64_t v11 = v7 + 1;
    if (!v22)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v5 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v21) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v5 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v21) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v5 + 8 * v11);
          if (!v22)
          {
            uint64_t v24 = v7 + 5;
            while (v21 != v24)
            {
              unint64_t v22 = *(void *)(v5 + 8 * v24++);
              if (v22)
              {
                uint64_t v11 = v24 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v22 - 1) & v22;
    unint64_t v10 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_5;
  }
LABEL_30:
  uint64_t v32 = *(void *)(v3 + 416);
  uint64_t v25 = *(void *)(v3 + 392);
  uint64_t v27 = *(void *)(v3 + 368);
  uint64_t v26 = *(void *)(v3 + 376);

  swift_release();
  sub_100132C20();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  sub_1001A5A2C(v32);
  char v28 = (void *)swift_task_alloc();
  *(void *)(v3 + 512) = v28;
  *char v28 = v3;
  v28[1] = sub_1001A36C8;
  uint64_t v29 = *(void *)(v3 + 440);
  uint64_t v30 = *(void *)(v3 + 448);
  return AsyncStream.Iterator.next(isolation:)(v29, 0, 0, v30);
}

uint64_t sub_1001A4124()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A4220, 0, 0);
}

uint64_t sub_1001A4220()
{
  if (*(void *)(v0 + 312))
  {
    [*(id *)(v0 + 312) discoveredAccessory:*(void *)(v0 + 528)];
    swift_release();
    uint64_t v1 = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v1 = swift_release();
  }
  unint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 544);
  if (v6 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_28;
    }
    *(void *)(v0 + 328) = v11;
    swift_unknownObjectRetain();
    sub_10000588C(&qword_10163D250);
    swift_dynamicCast();
    uint64_t v10 = *(void *)(v0 + 320);
    swift_unknownObjectRelease();
    uint64_t v9 = v5;
    uint64_t v7 = v4;
    goto LABEL_10;
  }
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
    uint64_t v9 = *(void *)(v0 + 576);
LABEL_7:
    uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v8);
    swift_retain();
LABEL_10:
    *(void *)(v0 + 584) = v7;
    *(void *)(v0 + 576) = v9;
    *(void *)(v0 + 568) = v10;
    if (v10)
    {
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_1001A4124;
      uint64_t v2 = SharingCircleWildAdvertisementKey.init(key:);
      uint64_t v1 = v0 + 312;
      uint64_t v3 = 0;
      return XPCSession.proxy(errorHandler:)(v1, v2, v3);
    }
    goto LABEL_28;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(v1, v2, v3);
  }
  int64_t v14 = (unint64_t)(*(void *)(v0 + 560) + 64) >> 6;
  if (v13 < v14)
  {
    uint64_t v15 = *(void *)(v0 + 552);
    unint64_t v16 = *(void *)(v15 + 8 * v13);
    uint64_t v9 = v5 + 1;
    if (!v16)
    {
      uint64_t v9 = v5 + 2;
      if (v5 + 2 >= v14) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        uint64_t v9 = v5 + 3;
        if (v5 + 3 >= v14) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16)
        {
          uint64_t v9 = v5 + 4;
          if (v5 + 4 >= v14) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v9);
          if (!v16)
          {
            uint64_t v17 = v5 + 5;
            while (v14 != v17)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v17++);
              if (v16)
              {
                uint64_t v9 = v17 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_17:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v8 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_7;
  }
LABEL_28:
  uint64_t v25 = *(void *)(v0 + 416);
  uint64_t v18 = *(void *)(v0 + 392);
  uint64_t v20 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 376);

  swift_release();
  sub_100132C20();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_1001A5A2C(v25);
  int64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v21;
  *int64_t v21 = v0;
  v21[1] = sub_1001A36C8;
  uint64_t v22 = *(void *)(v0 + 440);
  uint64_t v23 = *(void *)(v0 + 448);
  return AsyncStream.Iterator.next(isolation:)(v22, 0, 0, v23);
}

uint64_t sub_1001A457C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A4678, 0, 0);
}

uint64_t sub_1001A4678(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3[34];
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_10163D250);
    sub_1001A5908();
    a1 = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v3[7];
    uint64_t v5 = v3[8];
    uint64_t v6 = v3[9];
    uint64_t v7 = v3[10];
    unint64_t v8 = v3[11];
    v3[79] = v6;
    v3[78] = v5;
    v3[77] = v4;
    if (v4 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_30;
      }
      v3[37] = v23;
      swift_unknownObjectRetain();
      sub_10000588C(&qword_10163D250);
      swift_dynamicCast();
      uint64_t v12 = v3[36];
      swift_unknownObjectRelease();
      uint64_t v11 = v7;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v6 = ~v15;
    uint64_t v5 = v4 + 56;
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = -v15;
    BOOL v18 = v17 < 64;
    uint64_t v19 = -1 << v17;
    v3[79] = v6;
    if (v18) {
      uint64_t v14 = ~v19;
    }
    unint64_t v8 = v14 & v16;
    v3[78] = v5;
    v3[77] = v4;
    if ((v14 & v16) != 0)
    {
LABEL_4:
      uint64_t v9 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v11 = v7;
LABEL_5:
      uint64_t v12 = *(void *)(*(void *)(v4 + 48) + 8 * v10);
      swift_retain();
LABEL_6:
      v3[82] = v9;
      v3[81] = v11;
      v3[80] = v12;
      if (v12)
      {
        int64_t v13 = (void *)swift_task_alloc();
        v3[83] = v13;
        *int64_t v13 = v3;
        v13[1] = sub_1001A4A24;
        a2 = SharingCircleWildAdvertisementKey.init(key:);
        a1 = (uint64_t)(v3 + 35);
        a3 = 0;
        return XPCSession.proxy(errorHandler:)(a1, a2, a3);
      }
      goto LABEL_30;
    }
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(a1, a2, a3);
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if (v20 < v21)
  {
    unint64_t v22 = *(void *)(v5 + 8 * v20);
    uint64_t v11 = v7 + 1;
    if (!v22)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v5 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v21) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v5 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v21) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v5 + 8 * v11);
          if (!v22)
          {
            uint64_t v24 = v7 + 5;
            while (v21 != v24)
            {
              unint64_t v22 = *(void *)(v5 + 8 * v24++);
              if (v22)
              {
                uint64_t v11 = v24 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v22 - 1) & v22;
    unint64_t v10 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_5;
  }
LABEL_30:
  uint64_t v25 = (void *)v3[75];
  uint64_t v33 = v3[52];
  uint64_t v26 = v3[47];
  uint64_t v27 = v3[48];
  uint64_t v28 = v3[46];
  swift_release();

  sub_100132C20();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  sub_1001A5A2C(v33);
  uint64_t v29 = (void *)swift_task_alloc();
  v3[64] = v29;
  *uint64_t v29 = v3;
  v29[1] = sub_1001A36C8;
  uint64_t v30 = v3[55];
  uint64_t v31 = v3[56];
  return AsyncStream.Iterator.next(isolation:)(v30, 0, 0, v31);
}

uint64_t sub_1001A4A24()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A4B20, 0, 0);
}

uint64_t sub_1001A4B20()
{
  if (*(void *)(v0 + 280))
  {
    [*(id *)(v0 + 280) lostAccessory:*(void *)(v0 + 600)];
    swift_release();
    uint64_t v1 = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v1 = swift_release();
  }
  unint64_t v4 = *(void *)(v0 + 656);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 616);
  if (v6 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_28;
    }
    *(void *)(v0 + 296) = v11;
    swift_unknownObjectRetain();
    sub_10000588C(&qword_10163D250);
    swift_dynamicCast();
    uint64_t v10 = *(void *)(v0 + 288);
    swift_unknownObjectRelease();
    uint64_t v9 = v5;
    uint64_t v7 = v4;
    goto LABEL_10;
  }
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
    uint64_t v9 = *(void *)(v0 + 648);
LABEL_7:
    uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v8);
    swift_retain();
LABEL_10:
    *(void *)(v0 + 656) = v7;
    *(void *)(v0 + 648) = v9;
    *(void *)(v0 + 640) = v10;
    if (v10)
    {
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 664) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_1001A4A24;
      uint64_t v2 = SharingCircleWildAdvertisementKey.init(key:);
      uint64_t v1 = v0 + 280;
      uint64_t v3 = 0;
      return XPCSession.proxy(errorHandler:)(v1, v2, v3);
    }
    goto LABEL_28;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(v1, v2, v3);
  }
  int64_t v14 = (unint64_t)(*(void *)(v0 + 632) + 64) >> 6;
  if (v13 < v14)
  {
    uint64_t v15 = *(void *)(v0 + 624);
    unint64_t v16 = *(void *)(v15 + 8 * v13);
    uint64_t v9 = v5 + 1;
    if (!v16)
    {
      uint64_t v9 = v5 + 2;
      if (v5 + 2 >= v14) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        uint64_t v9 = v5 + 3;
        if (v5 + 3 >= v14) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16)
        {
          uint64_t v9 = v5 + 4;
          if (v5 + 4 >= v14) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v9);
          if (!v16)
          {
            uint64_t v17 = v5 + 5;
            while (v14 != v17)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v17++);
              if (v16)
              {
                uint64_t v9 = v17 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_17:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v8 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_7;
  }
LABEL_28:
  BOOL v18 = *(void **)(v0 + 600);
  uint64_t v26 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v21 = *(void *)(v0 + 368);
  swift_release();

  sub_100132C20();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  sub_1001A5A2C(v26);
  unint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v22;
  *unint64_t v22 = v0;
  v22[1] = sub_1001A36C8;
  uint64_t v23 = *(void *)(v0 + 440);
  uint64_t v24 = *(void *)(v0 + 448);
  return AsyncStream.Iterator.next(isolation:)(v23, 0, 0, v24);
}

uint64_t sub_1001A4E78()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A4F74, 0, 0);
}

uint64_t sub_1001A4F74(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3[30];
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_10163D250);
    sub_1001A5908();
    a1 = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v3[2];
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[4];
    uint64_t v7 = v3[5];
    unint64_t v8 = v3[6];
    v3[88] = v6;
    v3[87] = v5;
    v3[86] = v4;
    if (v4 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_30;
      }
      v3[33] = v23;
      swift_unknownObjectRetain();
      sub_10000588C(&qword_10163D250);
      swift_dynamicCast();
      uint64_t v12 = v3[32];
      swift_unknownObjectRelease();
      uint64_t v11 = v7;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v6 = ~v15;
    uint64_t v5 = v4 + 56;
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = -v15;
    BOOL v18 = v17 < 64;
    uint64_t v19 = -1 << v17;
    v3[88] = v6;
    if (v18) {
      uint64_t v14 = ~v19;
    }
    unint64_t v8 = v14 & v16;
    v3[87] = v5;
    v3[86] = v4;
    if ((v14 & v16) != 0)
    {
LABEL_4:
      uint64_t v9 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v11 = v7;
LABEL_5:
      uint64_t v12 = *(void *)(*(void *)(v4 + 48) + 8 * v10);
      swift_retain();
LABEL_6:
      v3[91] = v9;
      v3[90] = v11;
      v3[89] = v12;
      if (v12)
      {
        int64_t v13 = (void *)swift_task_alloc();
        v3[92] = v13;
        *int64_t v13 = v3;
        v13[1] = sub_1001A52D4;
        a2 = SharingCircleWildAdvertisementKey.init(key:);
        a1 = (uint64_t)(v3 + 31);
        a3 = 0;
        return XPCSession.proxy(errorHandler:)(a1, a2, a3);
      }
      goto LABEL_30;
    }
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(a1, a2, a3);
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if (v20 < v21)
  {
    unint64_t v22 = *(void *)(v5 + 8 * v20);
    uint64_t v11 = v7 + 1;
    if (!v22)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v5 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v21) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v5 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v21) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v5 + 8 * v11);
          if (!v22)
          {
            uint64_t v24 = v7 + 5;
            while (v21 != v24)
            {
              unint64_t v22 = *(void *)(v5 + 8 * v24++);
              if (v22)
              {
                uint64_t v11 = v24 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v22 - 1) & v22;
    unint64_t v10 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_5;
  }
LABEL_30:
  sub_100132C20();
  swift_errorRelease();
  swift_release();
  uint64_t v25 = (void *)swift_task_alloc();
  v3[64] = v25;
  *uint64_t v25 = v3;
  v25[1] = sub_1001A36C8;
  uint64_t v26 = v3[55];
  uint64_t v27 = v3[56];
  return AsyncStream.Iterator.next(isolation:)(v26, 0, 0, v27);
}

uint64_t sub_1001A52D4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A53D0, 0, 0);
}

uint64_t sub_1001A53D0()
{
  uint64_t v1 = (void *)v0[31];
  if (v1)
  {
    uint64_t v2 = (void *)_convertErrorToNSError(_:)();
    [v1 accessoryDiscoveryError:v2];
    swift_release();

    uint64_t v3 = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v3 = swift_release();
  }
  unint64_t v6 = v0[91];
  uint64_t v7 = v0[90];
  uint64_t v8 = v0[86];
  if (v8 < 0)
  {
    uint64_t v13 = __CocoaSet.Iterator.next()();
    if (!v13) {
      goto LABEL_28;
    }
    v0[33] = v13;
    swift_unknownObjectRetain();
    sub_10000588C(&qword_10163D250);
    swift_dynamicCast();
    uint64_t v12 = v0[32];
    swift_unknownObjectRelease();
    uint64_t v11 = v7;
    uint64_t v9 = v6;
    goto LABEL_10;
  }
  if (v6)
  {
    uint64_t v9 = (v6 - 1) & v6;
    unint64_t v10 = __clz(__rbit64(v6)) | (v7 << 6);
    uint64_t v11 = v0[90];
LABEL_7:
    uint64_t v12 = *(void *)(*(void *)(v8 + 48) + 8 * v10);
    swift_retain();
LABEL_10:
    v0[91] = v9;
    v0[90] = v11;
    v0[89] = v12;
    if (v12)
    {
      uint64_t v14 = (void *)swift_task_alloc();
      v0[92] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_1001A52D4;
      uint64_t v4 = SharingCircleWildAdvertisementKey.init(key:);
      uint64_t v3 = (uint64_t)(v0 + 31);
      uint64_t v5 = 0;
      return XPCSession.proxy(errorHandler:)(v3, v4, v5);
    }
    goto LABEL_28;
  }
  int64_t v15 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(v3, v4, v5);
  }
  int64_t v16 = (unint64_t)(v0[88] + 64) >> 6;
  if (v15 < v16)
  {
    uint64_t v17 = v0[87];
    unint64_t v18 = *(void *)(v17 + 8 * v15);
    uint64_t v11 = v7 + 1;
    if (!v18)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v16) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v17 + 8 * v11);
      if (!v18)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v16) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v17 + 8 * v11);
        if (!v18)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v16) {
            goto LABEL_28;
          }
          unint64_t v18 = *(void *)(v17 + 8 * v11);
          if (!v18)
          {
            uint64_t v19 = v7 + 5;
            while (v16 != v19)
            {
              unint64_t v18 = *(void *)(v17 + 8 * v19++);
              if (v18)
              {
                uint64_t v11 = v19 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_7;
  }
LABEL_28:
  sub_100132C20();
  swift_errorRelease();
  swift_release();
  int64_t v20 = (void *)swift_task_alloc();
  v0[64] = v20;
  *int64_t v20 = v0;
  v20[1] = sub_1001A36C8;
  uint64_t v21 = v0[55];
  uint64_t v22 = v0[56];
  return AsyncStream.Iterator.next(isolation:)(v21, 0, 0, v22);
}

uint64_t type metadata accessor for LocalFindableAccessoryDiscoverySession()
{
  uint64_t result = qword_10163D0F8;
  if (!qword_10163D0F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001A5738()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A5778(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_1001A2F10(a1, v4, v5, v6);
}

uint64_t sub_1001A5838(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A5898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163D218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A5900(uint64_t a1)
{
  return sub_1009C48B4(a1, v1);
}

unint64_t sub_1001A5908()
{
  unint64_t result = qword_101649B80;
  if (!qword_101649B80)
  {
    sub_10000592C(&qword_10163D250);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649B80);
  }
  return result;
}

uint64_t sub_1001A5964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A59C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A5A2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1001A5A88(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v38 = *a2;
    *a1 = *a2;
    a1 = (void *)(v38 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    unint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000361E0(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    int64_t v15 = (void *)((char *)a1 + v13);
    int64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *int64_t v15 = *v16;
    v15[1] = v17;
    unint64_t v18 = (void *)((char *)a1 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[9];
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    uint64_t v24 = a3[10];
    uint64_t v25 = a3[11];
    uint64_t v26 = (char *)a1 + v24;
    uint64_t v27 = (char *)a2 + v24;
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    uint64_t v28 = (char *)a1 + v25;
    uint64_t v29 = (char *)a2 + v25;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = a3[12];
    uint64_t v31 = a3[13];
    uint64_t v32 = (char *)a1 + v30;
    uint64_t v33 = (char *)a2 + v30;
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
    *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v34 = a3[15];
    *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    unint64_t v35 = (void *)((char *)a1 + v34);
    uint64_t v36 = (void *)((char *)a2 + v34);
    uint64_t v37 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001A5C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10001CFB8(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A5CE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  int64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)(a1 + v13);
  unint64_t v18 = (void *)(a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v33 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v34 = (void *)(a1 + v33);
  unint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001A5E50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a3[6];
  int64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *int64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  unint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *unint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_WORD *)uint64_t v21 = *(_WORD *)v22;
  *(unsigned char *)(v21 + 2) = *(unsigned char *)(v22 + 2);
  *(unsigned char *)(v21 + 3) = *(unsigned char *)(v22 + 3);
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (int *)(a2 + v23);
  int v26 = *v25;
  *(unsigned char *)(v24 + 4) = *((unsigned char *)v25 + 4);
  *(_DWORD *)uint64_t v24 = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (long long *)(a2 + v27);
  long long v30 = *v29;
  *(unsigned char *)(v28 + 16) = *((unsigned char *)v29 + 16);
  *(_OWORD *)uint64_t v28 = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v34 = *v33;
  *(unsigned char *)(v32 + 8) = *((unsigned char *)v33 + 8);
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  LODWORD(v34) = *(_DWORD *)v37;
  *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
  *(_DWORD *)uint64_t v36 = v34;
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v38 = a3[15];
  uint64_t v39 = (void *)(a1 + v38);
  int v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001A6020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a1 + v10;
  uint64_t v14 = a2 + v10;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v15 = a3[11];
  uint64_t v16 = a3[12];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  uint64_t v21 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001A6140(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v33 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001A62A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A62B4);
}

uint64_t sub_1001A62B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 60) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001A6378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A638C);
}

uint64_t sub_1001A638C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 60) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryMetadata(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163D2B0);
}

uint64_t sub_1001A646C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned __int8 *sub_1001A655C@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    LOBYTE(v2) = 4;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1001A6574()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001A65D4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001A6624()
{
  uint64_t result = 1819047270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 2:
      uint64_t result = 7827308;
      break;
    case 3:
      uint64_t result = 0x6C61636974697263;
      break;
    case 4:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001A66C8()
{
  type metadata accessor for UUID();
  sub_1001A9594(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v1 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  unsigned int v2 = (uint64_t *)(v0 + v1[5]);
  unint64_t v3 = v2[1];
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v4 = *v2;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v4, v3);
    Data.hash(into:)();
    sub_100037A24(v4, v3);
  }
  int v5 = (uint64_t *)(v0 + v1[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v7 = *v5;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v7, v6);
    Data.hash(into:)();
    sub_100037A24(v7, v6);
  }
  uint64_t v8 = (uint64_t *)(v0 + v1[7]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v10 = *v8;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v10, v9);
    Data.hash(into:)();
    sub_100037A24(v10, v9);
  }
  uint64_t v11 = (uint64_t *)(v0 + v1[8]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v13 = *v11;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v13, v12);
    Data.hash(into:)();
    sub_100037A24(v13, v12);
  }
  uint64_t v14 = (uint64_t *)(v0 + v1[9]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v16 = *v14;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v16, v15);
    Data.hash(into:)();
    sub_100037A24(v16, v15);
  }
  uint64_t v17 = (uint64_t *)(v0 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v19 = *v17;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v19, v18);
    Data.hash(into:)();
    sub_100037A24(v19, v18);
  }
  uint64_t v20 = (uint64_t *)(v0 + v1[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v22 = *v20;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v22, v21);
    Data.hash(into:)();
    sub_100037A24(v22, v21);
  }
  uint64_t v23 = (uint64_t *)(v0 + v1[12]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v25 = *v23;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v25, v24);
    Data.hash(into:)();
    sub_100037A24(v25, v24);
  }
  uint64_t v26 = (uint64_t *)(v0 + v1[13]);
  unint64_t v27 = v26[1];
  if (v27 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v28 = *v26;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v28, v27);
    Data.hash(into:)();
    sub_100037A24(v28, v27);
  }
  uint64_t v29 = (uint64_t *)(v0 + v1[14]);
  unint64_t v30 = v29[1];
  if (v30 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v31 = *v29;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v31, v30);
    Data.hash(into:)();
    sub_100037A24(v31, v30);
  }
}

unint64_t sub_1001A6B34(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44746375646F7270;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6D614E6C65646F6DLL;
      break;
    case 4:
      unint64_t result = 0x6465767265736572;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x657261776D726966;
      break;
    case 8:
      unint64_t result = 0x6556794D646E6966;
      break;
    case 9:
      unint64_t result = 0x5479726574746162;
      break;
    case 10:
      unint64_t result = 0x4C79726574746162;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A6CD4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163D4E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001AE7F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1001A9594(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    unint64_t v9 = (int *)type metadata accessor for RawAccessoryMetadata(0);
    long long v13 = *(_OWORD *)(v3 + v9[5]);
    char v12 = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[6]);
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[7]);
    char v12 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[8]);
    char v12 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[9]);
    char v12 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[10]);
    char v12 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[11]);
    char v12 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[12]);
    char v12 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[13]);
    char v12 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[14]);
    char v12 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001A70E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10163D4D0);
  uint64_t v8 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  unint64_t v27 = a1;
  sub_10001CD44(a1, v12);
  sub_1001AE7F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v24 = v5;
  if (v2)
  {
    uint64_t v28 = v2;
    uint64_t v14 = v29;
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
    LODWORD(v26) = 0;
    int v16 = 0;
    int v32 = 0;
    uint64_t v17 = v30;
  }
  else
  {
    uint64_t v23 = a2;
    uint64_t v13 = v8;
    LOBYTE(v31) = 0;
    sub_1001A9594((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v29;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v7, v5);
    char v33 = 1;
    sub_100037AA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v20 = v30;
    *(_OWORD *)&v19[v30[5]] = v31;
    char v33 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[6]] = v31;
    char v33 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[7]] = v31;
    char v33 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[8]] = v31;
    char v33 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[9]] = v31;
    char v33 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[10]] = v31;
    char v33 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v32 = 1;
    *(_OWORD *)&v19[v20[11]] = v31;
    char v33 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v19[v20[12]] = v31;
    char v33 = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = 0;
    *(_OWORD *)&v29[v30[13]] = v31;
    char v33 = 10;
    uint64_t v21 = v28;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = v21;
    if (!v21)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v26);
      uint64_t v22 = (uint64_t)v29;
      *(_OWORD *)&v29[v30[14]] = v31;
      sub_1001AE844(v22, v23, type metadata accessor for RawAccessoryMetadata);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
      return sub_1001AC998(v22, type metadata accessor for RawAccessoryMetadata);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v26);
    int v16 = 1;
    LODWORD(v26) = 1;
    uint64_t v14 = v29;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
    uint64_t v17 = v30;
    sub_100037A24(*(void *)&v14[v30[5]], *(void *)&v14[v30[5] + 8]);
    sub_100037A24(*(void *)&v14[v17[6]], *(void *)&v14[v17[6] + 8]);
    sub_100037A24(*(void *)&v14[v17[7]], *(void *)&v14[v17[7] + 8]);
    sub_100037A24(*(void *)&v14[v17[8]], *(void *)&v14[v17[8] + 8]);
    char v18 = v32;
    sub_100037A24(*(void *)&v14[v17[9]], *(void *)&v14[v17[9] + 8]);
    uint64_t result = sub_100037A24(*(void *)&v14[v17[10]], *(void *)&v14[v17[10] + 8]);
    if (v18)
    {
      sub_100037A24(*(void *)&v14[v17[11]], *(void *)&v14[v17[11] + 8]);
      goto LABEL_6;
    }
  }
  if (!v16)
  {
    if (!v26) {
      return result;
    }
    return sub_100037A24(*(void *)&v14[v17[13]], *(void *)&v14[v17[13] + 8]);
  }
LABEL_6:
  uint64_t result = sub_100037A24(*(void *)&v14[v17[12]], *(void *)&v14[v17[12] + 8]);
  if ((v26 & 1) == 0) {
    return result;
  }
  return sub_100037A24(*(void *)&v14[v17[13]], *(void *)&v14[v17[13] + 8]);
}

unsigned __int8 *sub_1001A795C@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1001A7974()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001A79D4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001A7A24()
{
  uint64_t result = 0x64657265776F70;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x61686365526E6F6ELL;
      break;
    case 2:
      uint64_t result = 0x6167726168636572;
      break;
    case 3:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001A7AC4()
{
  return sub_1001A6B34(*v0);
}

uint64_t sub_1001A7ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001ABCF4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001A7AF4(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1001A7B00(uint64_t a1)
{
  unint64_t v2 = sub_1001AE7F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A7B3C(uint64_t a1)
{
  unint64_t v2 = sub_1001AE7F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A7B78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A70E8(a1, a2);
}

uint64_t sub_1001A7B90(void *a1)
{
  return sub_1001A6CD4(a1);
}

Swift::Int sub_1001A7BA8(uint64_t a1, uint64_t a2)
{
  return sub_1001A8F7C(a1, a2, (void (*)(unsigned char *))sub_1001A66C8);
}

Swift::Int sub_1001A7BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A8FE0(a1, a2, a3, (void (*)(unsigned char *))sub_1001A66C8);
}

uint64_t sub_1001A7BE0()
{
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_1001A9594(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v2 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v3 = (uint64_t *)(v0 + v2[5]);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1000361E0(*v3, v5);
  Data.hash(into:)();
  sub_10001CFB8(v4, v5);
  if (*(void *)(v1 + v2[6] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v1 + v2[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v6 = v1 + v2[8];
  Swift::UInt8 v7 = *(unsigned char *)(v6 + 2);
  Swift::UInt8 v8 = *(unsigned char *)(v6 + 3);
  Hasher._combine(_:)(*(_WORD *)v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  uint64_t v9 = (int *)(v1 + v2[9]);
  if (v9[1])
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    unsigned int v11 = *v9;
    unsigned int v10 = HIBYTE(*v9);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(BYTE2(v11));
  }
  Hasher._combine(_:)(v10);
  uint64_t v12 = v1 + v2[10];
  if (*(unsigned char *)(v12 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v14 = *(_DWORD *)(v12 + 8);
    Swift::UInt32 v13 = *(_DWORD *)(v12 + 12);
    Swift::UInt32 v16 = *(_DWORD *)v12;
    Swift::UInt32 v15 = *(_DWORD *)(v12 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v13);
  }
  uint64_t v17 = v1 + v2[11];
  if (*(unsigned char *)(v17 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v18 = *(void *)v17;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  uint64_t v19 = v1 + v2[12];
  if (*(unsigned char *)(v19 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v20 = *(_DWORD *)v19;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }
  int v21 = *(unsigned __int8 *)(v1 + v2[13]);
  if (v21 == 4) {
    LOBYTE(v21) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  int v22 = *(unsigned __int8 *)(v1 + v2[14]);
  if (v22 == 5) {
    LOBYTE(v22) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v22);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1001A7F2C(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44746375646F7270;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6D614E6C65646F6DLL;
      break;
    case 4:
      unint64_t result = 0x657261776D726966;
      break;
    case 5:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 6:
      unint64_t result = 0xD000000000000025;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x5479726574746162;
      break;
    case 10:
      unint64_t result = 0x5379726574746162;
      break;
    case 11:
      unint64_t result = 0x6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A80D8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163D398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001AC74C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  type metadata accessor for UUID();
  sub_1001A9594(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for AccessoryMetadata(0);
    long long v17 = *(_OWORD *)(v3 + v9[5]);
    char v19 = 1;
    sub_1001AC9F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v17) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LODWORD(v17) = *(_DWORD *)(v3 + v9[8]);
    char v19 = 4;
    sub_1001ACA4C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unsigned int v10 = (int *)(v3 + v9[9]);
    int v11 = *v10;
    LOBYTE(v10) = *((unsigned char *)v10 + 4);
    LODWORD(v17) = v11;
    BYTE4(v17) = (_BYTE)v10;
    char v19 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = (long long *)(v3 + v9[10]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v17 = *v12;
    char v18 = v13;
    char v19 = 6;
    sub_1001ACAA0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    Swift::UInt32 v14 = (int *)(v3 + v9[12]);
    int v15 = *v14;
    LOBYTE(v14) = *((unsigned char *)v14 + 4);
    LODWORD(v17) = v15;
    BYTE4(v17) = (_BYTE)v14;
    char v19 = 8;
    sub_1001ACAF4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = *(unsigned char *)(v3 + v9[13]);
    char v19 = 9;
    sub_1001ACB48();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = *(unsigned char *)(v3 + v9[14]);
    char v19 = 10;
    sub_1001ACB9C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001A8528@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_10163D358);
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt32 v14 = &v13[*(int *)(v11 + 40)];
  *(void *)Swift::UInt32 v14 = 0;
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  unint64_t v45 = (int *)v11;
  int v46 = v13;
  int v15 = &v13[*(int *)(v11 + 60)];
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = 0xE000000000000000;
  uint64_t v43 = a1;
  uint64_t v44 = v15;
  sub_10001CD44(a1, a1[3]);
  sub_1001AC74C();
  os_log_type_t v42 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = v7;
    LOBYTE(v47) = 0;
    sub_1001A9594((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v46, v6, v4);
    char v49 = 1;
    sub_1001AC7A0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v19 = v45;
    *(_OWORD *)(v18 + v45[5]) = v47;
    LOBYTE(v47) = 2;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v21 = (uint64_t *)(v18 + v19[6]);
    *int v21 = v20;
    v21[1] = v22;
    LOBYTE(v47) = 3;
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v24 = (uint64_t *)(v18 + v19[7]);
    *uint64_t v24 = v23;
    v24[1] = v25;
    char v49 = 4;
    sub_1001AC7F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_DWORD *)(v18 + v19[8]) = v47;
    char v49 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v26 = BYTE4(v47);
    uint64_t v27 = v18 + v19[9];
    *(_DWORD *)uint64_t v27 = v47;
    *(unsigned char *)(v27 + 4) = v26;
    char v49 = 6;
    sub_1001AC848();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v28 = v48;
    *(_OWORD *)Swift::UInt32 v14 = v47;
    v14[16] = v28;
    LOBYTE(v47) = 7;
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v30 = v18 + v19[11];
    *(void *)uint64_t v30 = v29;
    *(unsigned char *)(v30 + 8) = v31 & 1;
    char v49 = 8;
    sub_1001AC89C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v32 = BYTE4(v47);
    uint64_t v33 = v18 + v19[12];
    *(_DWORD *)uint64_t v33 = v47;
    *(unsigned char *)(v33 + 4) = v32;
    char v49 = 9;
    sub_1001AC8F0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v46[v45[13]] = v47;
    char v49 = 10;
    sub_1001AC944();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v46[v45[14]] = v47;
    LOBYTE(v47) = 11;
    uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v42, v40);
    uint64_t v37 = (uint64_t *)v44;
    swift_bridgeObjectRelease();
    *uint64_t v37 = v34;
    v37[1] = v36;
    uint64_t v38 = (uint64_t)v46;
    sub_1001AE844((uint64_t)v46, v39, type metadata accessor for AccessoryMetadata);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
    return sub_1001AC998(v38, type metadata accessor for AccessoryMetadata);
  }
}

uint64_t sub_1001A8CAC()
{
  return 0;
}

int *sub_1001A8CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, int a17, int a18, char a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  __int16 v24 = a8;
  unsigned int v30 = HIWORD(a8);
  unsigned int v31 = HIBYTE(a8);
  uint64_t v32 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(a9, a1, v32);
  unint64_t result = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v34 = (void *)(a9 + result[5]);
  *uint64_t v34 = a2;
  v34[1] = a3;
  uint64_t v35 = (void *)(a9 + result[6]);
  *uint64_t v35 = a4;
  v35[1] = a5;
  uint64_t v36 = (void *)(a9 + result[7]);
  *uint64_t v36 = a6;
  v36[1] = a7;
  uint64_t v37 = a9 + result[8];
  *(_WORD *)uint64_t v37 = v24;
  *(unsigned char *)(v37 + 2) = v30;
  *(unsigned char *)(v37 + 3) = v31;
  uint64_t v38 = a9 + result[9];
  *(_DWORD *)uint64_t v38 = a10;
  *(unsigned char *)(v38 + 4) = a11 & 1;
  uint64_t v39 = a9 + result[10];
  *(void *)uint64_t v39 = a12;
  *(void *)(v39 + 8) = a13;
  *(unsigned char *)(v39 + 16) = a14 & 1;
  uint64_t v40 = a9 + result[11];
  *(void *)uint64_t v40 = a15;
  *(unsigned char *)(v40 + 8) = a16 & 1;
  uint64_t v41 = a9 + result[12];
  *(_DWORD *)uint64_t v41 = a18;
  *(unsigned char *)(v41 + 4) = a19 & 1;
  *(unsigned char *)(a9 + result[13]) = a21;
  *(unsigned char *)(a9 + result[14]) = a22;
  os_log_type_t v42 = (void *)(a9 + result[15]);
  *os_log_type_t v42 = a23;
  v42[1] = a24;
  return result;
}

unint64_t sub_1001A8E8C()
{
  return sub_1001A7F2C(*v0);
}

uint64_t sub_1001A8E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001AC1FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A8EBC(uint64_t a1)
{
  unint64_t v2 = sub_1001AC74C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A8EF8(uint64_t a1)
{
  unint64_t v2 = sub_1001AC74C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A8F34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A8528(a1, a2);
}

uint64_t sub_1001A8F4C(void *a1)
{
  return sub_1001A80D8(a1);
}

Swift::Int sub_1001A8F64(uint64_t a1, uint64_t a2)
{
  return sub_1001A8F7C(a1, a2, (void (*)(unsigned char *))sub_1001A7BE0);
}

Swift::Int sub_1001A8F7C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1001A8FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A8FE0(a1, a2, a3, (void (*)(unsigned char *))sub_1001A7BE0);
}

Swift::Int sub_1001A8FE0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1001A9028()
{
  return sub_1001A9594(&qword_10163D310, (void (*)(uint64_t))type metadata accessor for AccessoryMetadata);
}

uint64_t sub_1001A9070()
{
  _StringGuts.grow(_:)(214);
  v1._uint64_t countAndFlagsBits = 0x5B203A64697BLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_1001A9594((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001013F44A0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0);
  sub_1001A95DC();
  v5._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x80000001013F44C0;
  String.append(_:)(v6);
  sub_10000588C(&qword_101644320);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x4E6C65646F6D205DLL;
  v7._object = (void *)0xEE005B203A656D61;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._object = (void *)0x80000001013F44E0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = sub_1009CD110();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001013F4500;
  v10._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v10);
  sub_10000588C(&qword_10163D320);
  _print_unlocked<A, B>(_:_:)();
  v11._uint64_t countAndFlagsBits = 0xD000000000000016;
  v11._object = (void *)0x80000001013F4520;
  String.append(_:)(v11);
  sub_10000588C(&qword_10163D328);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v12._object = (void *)0x80000001013F4540;
  String.append(_:)(v12);
  sub_10000588C(&qword_10163D330);
  _print_unlocked<A, B>(_:_:)();
  v13._object = (void *)0x80000001013F4560;
  v13._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  sub_10000588C(&qword_10163D338);
  _print_unlocked<A, B>(_:_:)();
  v14._uint64_t countAndFlagsBits = 0xD000000000000011;
  v14._object = (void *)0x80000001013F4580;
  String.append(_:)(v14);
  sub_10000588C(&qword_10163D340);
  _print_unlocked<A, B>(_:_:)();
  v15._uint64_t countAndFlagsBits = 0x6F6973726576205DLL;
  v15._object = (void *)0xEC0000005B203A6ELL;
  String.append(_:)(v15);
  uint64_t v16 = (uint64_t *)(v0 + *(int *)(v4 + 60));
  uint64_t v17 = *v16;
  uint64_t v18 = (void *)v16[1];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 32093;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  uint64_t result = 0;
  if ((*(unsigned char *)(v0 + *(int *)(v4 + 40) + 16) & 1) == 0)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    sub_1001AB2E0();
    v26._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
    v26._object = v22;
    v23._uint64_t countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = sub_100BBA674();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0xD000000000000028;
    v25._object = (void *)0x80000001013F45A0;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t sub_1001A9594(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001A95DC()
{
  unint64_t result = qword_10163D318;
  if (!qword_10163D318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D318);
  }
  return result;
}

id sub_1001A9630()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)SPDiscoveredAccessoryMetadata) init];
  Swift::String v3 = (int *)type metadata accessor for AccessoryMetadata(0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v2 setProductData:isa];

  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setManufacturerName:v5];

  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setModelName:v6];

  Swift::String v7 = (uint64_t *)(v1 + v3[11]);
  if (*((unsigned char *)v7 + 8)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *v7;
  }
  [v2 setAccessoryCategory:v8];
  Swift::String v9 = (unsigned int *)(v1 + v3[12]);
  unsigned int v10 = *v9;
  char v11 = *((unsigned char *)v9 + 4);
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v10;
  }
  [v2 setAccessoryCapabilities:v12];
  sub_1009CD110();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setFirmwareVersion:v13];

  if ((*(unsigned char *)(v1 + v3[10] + 16) & 1) == 0)
  {
    sub_1001AB2E0();
    uint64_t v23 = CustomStringConvertible.typeDescription.getter();
    uint64_t v24 = v14;
    v15._uint64_t countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = sub_100BBA674();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setFirmwareVersion:v17];

  if ((*(unsigned char *)(v1 + v3[9] + 4) & 1) == 0) {
    sub_1009CD110();
  }
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setProtocolVersion:v18];

  if (*(unsigned char *)(v1 + v3[13]) == 4) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v1 + v3[13]);
  }
  [v2 setBatteryType:v19, v23, v24];
  if (*(unsigned char *)(v1 + v3[14]) == 5) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v1 + v3[14]);
  }
  [v2 setBatteryState:v20];
  if (v11) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = sub_10110DA68(v10);
  }
  [v2 setCapabilities:v21];
  return v2;
}

uint64_t sub_1001A996C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  Swift::String v3 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v4 = *((void *)v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  Swift::String v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v7[*(int *)(v5 + 40)];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  Swift::String v9 = &v7[*(int *)(v5 + 60)];
  *(void *)Swift::String v9 = 0;
  *((void *)v9 + 1) = 0xE000000000000000;
  id v10 = [a1 discoveredMetadata];
  id v11 = [v10 productData];
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = sub_1002AB228(v12, v14);
  if (v16 >> 60 == 15)
  {

LABEL_16:
    uint64_t v64 = v72;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v4 + 56))(v64, 1, 1, v3);
  }
  uint64_t v17 = v15;
  unint64_t v18 = v16;
  uint64_t v69 = v9;
  uint64_t v70 = v4;
  id v71 = a1;
  id v19 = [v10 protocolVersion];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  unint64_t v23 = sub_1009CDB04(v20, v22);
  if ((v23 & 0x100000000) != 0)
  {

    sub_100037A24(v17, v18);
    uint64_t v4 = v70;
    goto LABEL_16;
  }
  unint64_t v66 = v23;
  id v24 = [v71 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v25 = &v7[v3[5]];
  *(void *)Swift::String v25 = v17;
  *((void *)v25 + 1) = v18;
  unint64_t v67 = v18;
  uint64_t v68 = v17;
  sub_1000361E0(v17, v18);
  id v26 = [v10 manufacturerName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  unsigned int v30 = (uint64_t *)&v7[v3[6]];
  *unsigned int v30 = v27;
  v30[1] = v29;
  id v31 = [v10 modelName];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  uint64_t v35 = (uint64_t *)&v7[v3[7]];
  *uint64_t v35 = v32;
  v35[1] = v34;
  id v36 = [v10 firmwareVersion];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  unint64_t v40 = sub_1009CDB04(v37, v39);
  if ((v40 & 0x100000000) != 0)
  {
    v65[1] = v35;
    v65[2] = v30;
    *(_DWORD *)&v7[v3[8]] = 0;
    id v47 = [v10 firmwareVersion];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    uint64_t v42 = sub_100BBAF68(v48, v50);
    uint64_t v4 = v70;
    id v44 = v71;
    unint64_t v45 = v67;
    uint64_t v46 = v68;
    if (v51)
    {

      sub_100037A24(v46, v45);
      uint64_t v63 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v63 - 8) + 8))(v7, v63);
      sub_10001CFB8(*(void *)v25, *((void *)v25 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  else
  {
    int v41 = v40;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *(_DWORD *)&v7[v3[8]] = v41;
    uint64_t v4 = v70;
    id v44 = v71;
    unint64_t v45 = v67;
    uint64_t v46 = v68;
  }
  *(void *)uint64_t v8 = v42;
  *((void *)v8 + 1) = v43;
  v8[16] = 0;
  uint64_t v52 = &v7[v3[9]];
  *(_DWORD *)uint64_t v52 = v66;
  void v52[4] = 0;
  id v53 = [v10 accessoryCategory];
  long long v54 = &v7[v3[11]];
  *(void *)long long v54 = v53;
  v54[8] = 0;
  unsigned int v55 = [v10 accessoryCapabilities];
  uint64_t v56 = &v7[v3[12]];
  *(_DWORD *)uint64_t v56 = v55;
  v56[4] = 0;
  unsigned int v57 = [v10 batteryType];
  if (v57 >= 3) {
    char v58 = 3;
  }
  else {
    char v58 = v57;
  }
  v7[v3[13]] = v58;
  unsigned int v59 = [v10 batteryState];

  sub_100037A24(v46, v45);
  if (v59 >= 4) {
    char v60 = 4;
  }
  else {
    char v60 = v59;
  }
  v7[v3[14]] = v60;
  uint64_t v61 = v72;
  sub_1001AE844((uint64_t)v7, v72, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v4 + 56))(v61, 0, 1, v3);
  return sub_1001AC998((uint64_t)v7, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_1001A9E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v7 = a4;
  unsigned int v12 = HIWORD(a4);
  unsigned int v13 = HIBYTE(a4);
  unint64_t v14 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v15 = a6 + v14[10];
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 1;
  unint64_t v16 = (void *)(a6 + v14[15]);
  *unint64_t v16 = 0;
  v16[1] = 0xE000000000000000;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(a6, a1, v17);
  id v19 = (void *)(a6 + v14[5]);
  *id v19 = a2;
  v19[1] = a3;
  uint64_t v20 = a6 + v14[8];
  *(_WORD *)uint64_t v20 = v7;
  *(unsigned char *)(v20 + 2) = v12;
  *(unsigned char *)(v20 + 3) = v13;
  uint64_t v21 = (void *)(a6 + v14[7]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  uint64_t v22 = (void *)(a6 + v14[6]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v23 = a6 + v14[9];
  *(_DWORD *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 4) = 1;
  uint64_t v24 = a6 + v14[11];
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = a6 + v14[12];
  *(_DWORD *)uint64_t v25 = a5;
  *(unsigned char *)(v25 + 4) = BYTE4(a5) & 1;
  *(unsigned char *)(a6 + v14[13]) = 4;
  *(unsigned char *)(a6 + v14[14]) = 5;
  return result;
}

uint64_t sub_1001A9FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v6 = a2 + v5[10];
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 16) = 1;
  __int16 v7 = (void *)(a2 + v5[15]);
  void *v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = type metadata accessor for RawAccessoryMetadata(0);
  uint64_t v9 = a1 + *(int *)(v8 + 20);
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v11 = v8;
  uint64_t v12 = *(void *)v9;
  sub_1000361E0(*(void *)v9, *(void *)(v9 + 8));
  sub_1000361E0(v12, v10);
  uint64_t v13 = sub_1002AB228(v12, v10);
  if (v14 >> 60 == 15)
  {
    sub_100037A24(v12, v10);
LABEL_4:
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_10134D000;
    *(unsigned char *)(v15 + 16) = 1;
    swift_willThrow();
LABEL_5:
    sub_1001AC998(a1, type metadata accessor for RawAccessoryMetadata);
    return swift_bridgeObjectRelease();
  }
  uint64_t v32 = v13;
  unint64_t v33 = v14;
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(v11 + 44));
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_10134CFF0;
    *(unsigned char *)(v19 + 16) = 1;
    swift_willThrow();
    sub_100037A24(v32, v33);
    sub_100037A24(v12, v10);
    goto LABEL_5;
  }
  uint64_t v20 = *v17;
  sub_100037A38(*v17, v18);
  uint64_t v21 = sub_100BBB478(v20, v18);
  if (v2)
  {
    sub_1001AC998(a1, type metadata accessor for RawAccessoryMetadata);
    sub_100037A24(v32, v33);
    sub_100037A24(v12, v10);
    return swift_bridgeObjectRelease();
  }
  uint64_t v23 = v21;
  uint64_t v24 = v22;
  sub_100037A24(v12, v10);
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(a2, a1, v25);
  uint64_t result = sub_1001AC998(a1, type metadata accessor for RawAccessoryMetadata);
  id v26 = (uint64_t *)(a2 + v5[5]);
  *id v26 = v32;
  v26[1] = v33;
  *(_DWORD *)(a2 + v5[8]) = 0;
  *(void *)uint64_t v6 = v23;
  *(void *)(v6 + 8) = v24;
  *(unsigned char *)(v6 + 16) = 0;
  uint64_t v27 = (void *)(a2 + v5[7]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (void *)(a2 + v5[6]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v29 = a2 + v5[9];
  *(_DWORD *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 4) = 1;
  uint64_t v30 = a2 + v5[11];
  *(void *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 8) = 1;
  uint64_t v31 = a2 + v5[12];
  *(_DWORD *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 4) = 1;
  *(unsigned char *)(a2 + v5[13]) = 4;
  *(unsigned char *)(a2 + v5[14]) = 5;
  return result;
}

uint64_t sub_1001AA2CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v117 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Endianness();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v9 = a2 + v8[10];
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 16) = 1;
  unint64_t v10 = (void *)(a2 + v8[15]);
  void *v10 = 0;
  v10[1] = 0xE000000000000000;
  unint64_t v118 = v10;
  uint64_t v11 = type metadata accessor for RawAccessoryMetadata(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v121 = a1;
  uint64_t v13 = (uint64_t *)(a1 + v12);
  unint64_t v14 = v13[1];
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v15 = (int *)v11;
  uint64_t v116 = v5;
  uint64_t v16 = *v13;
  sub_1000361E0(*v13, v14);
  sub_1000361E0(v16, v14);
  uint64_t v17 = sub_1002AB228(v16, v14);
  if (v18 >> 60 == 15)
  {
    sub_100037A24(v16, v14);
LABEL_4:
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_10134D000;
    *(unsigned char *)(v19 + 16) = 1;
    swift_willThrow();
LABEL_5:
    uint64_t v20 = v121;
LABEL_29:
    sub_1001AC998(v20, type metadata accessor for RawAccessoryMetadata);
    return swift_bridgeObjectRelease();
  }
  uint64_t v112 = v4;
  uint64_t v113 = v17;
  unint64_t v114 = v18;
  uint64_t v115 = v16;
  uint64_t v20 = v121;
  uint64_t v21 = v121 + v15[11];
  unint64_t v22 = *(void *)(v21 + 8);
  if (v22 >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v23 = *(void *)v21;
  sub_1000361E0(*(void *)v21, *(void *)(v21 + 8));
  sub_1000361E0(v23, v22);
  unint64_t v24 = sub_1009CD940(v23, v22);
  if ((v24 & 0x100000000) != 0)
  {
    sub_100037A24(v23, v22);
LABEL_13:
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v32 = xmmword_10134CFF0;
    *(unsigned char *)(v32 + 16) = 1;
    swift_willThrow();
    uint64_t v33 = v113;
    unint64_t v34 = v114;
LABEL_28:
    sub_100037A24(v33, v34);
    sub_100037A24(v115, v14);
    goto LABEL_29;
  }
  unint64_t v110 = v22;
  uint64_t v111 = v23;
  uint64_t v25 = (uint64_t *)(v20 + v15[7]);
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
LABEL_15:
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v35 = xmmword_10134D040;
    *(unsigned char *)(v35 + 16) = 1;
    swift_willThrow();
    uint64_t v36 = v113;
    unint64_t v37 = v114;
LABEL_27:
    sub_100037A24(v36, v37);
    unint64_t v34 = v110;
    uint64_t v33 = v111;
    goto LABEL_28;
  }
  unint64_t v107 = v24;
  uint64_t v119 = *v25;
  uint64_t v27 = v119;
  unint64_t v120 = v26;
  sub_1000361E0(v119, v26);
  unint64_t v109 = sub_1000362FC();
  uint64_t v28 = DataProtocol.nullTerminatedUTF8String.getter();
  if (!v29)
  {
    sub_100037A24(v27, v26);
    uint64_t v20 = v121;
    goto LABEL_15;
  }
  uint64_t v108 = v27;
  uint64_t v20 = v121;
  uint64_t v30 = (uint64_t *)(v121 + v15[6]);
  unint64_t v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    sub_1001AB354();
    swift_allocError();
    *(void *)uint64_t v45 = 0xD000000000000010;
    *(void *)(v45 + 8) = 0x80000001013F45D0;
    *(unsigned char *)(v45 + 16) = 1;
    swift_willThrow();
    sub_100037A24(v113, v114);
    uint64_t v36 = v108;
    unint64_t v37 = v26;
    goto LABEL_27;
  }
  uint64_t v103 = v28;
  uint64_t v105 = v29;
  unint64_t v106 = v26;
  uint64_t v119 = *v30;
  uint64_t v38 = v119;
  unint64_t v120 = v31;
  sub_1000361E0(v119, v31);
  uint64_t v39 = DataProtocol.nullTerminatedUTF8String.getter();
  if (!v40)
  {
    swift_bridgeObjectRelease();
    sub_100037A24(v38, v31);
    uint64_t v20 = v121;
    unint64_t v26 = v106;
    goto LABEL_20;
  }
  uint64_t v104 = v38;
  unint64_t v109 = v31;
  uint64_t v20 = v121;
  int v41 = (uint64_t *)(v121 + v15[12]);
  unint64_t v42 = v41[1];
  if (v42 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v108;
    unint64_t v44 = v106;
LABEL_25:
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v51 = xmmword_10134D030;
    *(unsigned char *)(v51 + 16) = 1;
    swift_willThrow();
    uint64_t v52 = v113;
    unint64_t v53 = v114;
LABEL_26:
    sub_100037A24(v52, v53);
    sub_100037A24(v104, v109);
    uint64_t v36 = v43;
    unint64_t v37 = v44;
    goto LABEL_27;
  }
  uint64_t v100 = v39;
  uint64_t v102 = v40;
  uint64_t v46 = *v41;
  sub_1000361E0(*v41, v42);
  sub_1000361E0(v46, v42);
  unint64_t v47 = sub_1009CD940(v46, v42);
  if ((v47 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037A24(v46, v42);
    unint64_t v44 = v106;
    uint64_t v43 = v108;
    goto LABEL_25;
  }
  uint64_t v101 = v46;
  unint64_t v99 = v42;
  uint64_t v48 = (uint64_t *)(v20 + v15[9]);
  unint64_t v49 = v48[1];
  if (v49 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = v101;
LABEL_32:
    sub_1001AB354();
    swift_allocError();
    *(void *)uint64_t v57 = 0xD000000000000011;
    *(void *)(v57 + 8) = 0x80000001013F45F0;
    *(unsigned char *)(v57 + 16) = 1;
    swift_willThrow();
    sub_100037A24(v113, v114);
    sub_100037A24(v50, v99);
    sub_100037A24(v104, v109);
    uint64_t v36 = v108;
    unint64_t v37 = v106;
    goto LABEL_27;
  }
  unint64_t v98 = v47;
  uint64_t v55 = *v48;
  sub_1000361E0(*v48, v49);
  sub_1000361E0(v55, v49);
  static Endianness.current.getter();
  sub_1001ACBF0();
  FixedWidthInteger.init(data:ofEndianness:)();
  unint64_t v56 = v49;
  uint64_t v50 = v101;
  if (v120 == 1)
  {
    sub_100037A24(v55, v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v121;
    goto LABEL_32;
  }
  unint64_t v96 = v56;
  uint64_t v97 = v55;
  uint64_t v20 = v121;
  char v58 = (uint64_t *)(v121 + v15[10]);
  unint64_t v59 = v58[1];
  if (v59 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_37:
    unint64_t v44 = v106;
    uint64_t v43 = v108;
    sub_1001AB354();
    swift_allocError();
    *(void *)uint64_t v61 = 0xD000000000000015;
    *(void *)(v61 + 8) = 0x80000001013F4610;
    *(unsigned char *)(v61 + 16) = 1;
    swift_willThrow();
    sub_100037A24(v113, v114);
    sub_100037A24(v97, v96);
    uint64_t v52 = v50;
    unint64_t v53 = v99;
    goto LABEL_26;
  }
  uint64_t v94 = v119;
  uint64_t v60 = *v58;
  sub_1000361E0(*v58, v59);
  sub_1000361E0(v60, v59);
  static Endianness.current.getter();
  sub_100060568();
  uint64_t v95 = v60;
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE4(v119) == 1)
  {
    sub_100037A24(v95, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v121;
    goto LABEL_37;
  }
  uint64_t v62 = (uint64_t *)(v121 + v15[13]);
  unint64_t v63 = v62[1];
  if (v63 >> 60 == 15) {
    goto LABEL_41;
  }
  int v91 = v119;
  uint64_t v64 = *v62;
  sub_1000361E0(*v62, v63);
  sub_1000361E0(v64, v63);
  static Endianness.current.getter();
  unint64_t v65 = sub_10006145C();
  uint64_t v93 = v64;
  unint64_t v92 = v65;
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE1(v119) == 1)
  {
    sub_100037A24(v93, v63);
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v66 = xmmword_10134D020;
    *(unsigned char *)(v66 + 16) = 1;
    swift_willThrow();
    uint64_t v67 = v113;
    unint64_t v68 = v114;
LABEL_42:
    sub_100037A24(v67, v68);
    sub_100037A24(v95, v59);
    sub_100037A24(v97, v96);
    sub_100037A24(v101, v99);
    sub_100037A24(v104, v109);
    sub_100037A24(v108, v106);
    sub_100037A24(v111, v110);
    sub_100037A24(v115, v14);
    goto LABEL_5;
  }
  int v69 = v119;
  if (v119 >= 3u) {
    int v69 = 3;
  }
  int v90 = v69;
  uint64_t v70 = v121 + v15[14];
  if (*(void *)(v70 + 8) >> 60 == 15
    || (sub_1000361E0(*(void *)v70, *(void *)(v70 + 8)),
        static Endianness.current.getter(),
        FixedWidthInteger.init(data:ofEndianness:)(),
        BYTE1(v119) == 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001AB354();
    swift_allocError();
    *(_OWORD *)uint64_t v71 = xmmword_10134D010;
    *(unsigned char *)(v71 + 16) = 1;
    swift_willThrow();
    sub_100037A24(v113, v114);
    uint64_t v67 = v93;
    unint64_t v68 = v63;
    goto LABEL_42;
  }
  __int16 v72 = v107;
  unint64_t v118 = (void *)(v107 >> 24);
  unint64_t v92 = v107 >> 16;
  unsigned int v73 = v119;
  sub_100037A24(v115, v14);
  sub_100037A24(v111, v110);
  sub_100037A24(v108, v106);
  sub_100037A24(v104, v109);
  sub_100037A24(v101, v99);
  sub_100037A24(v97, v96);
  sub_100037A24(v95, v59);
  sub_100037A24(v93, v63);
  if (v73 >= 4) {
    char v74 = 4;
  }
  else {
    char v74 = v73;
  }
  uint64_t v76 = v116;
  uint64_t v75 = v117;
  uint64_t v77 = v121;
  uint64_t v78 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v117, v121, v112);
  sub_1001AC998(v77, type metadata accessor for RawAccessoryMetadata);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v76 + 32))(a2, v75, v78);
  uint64_t v79 = (void *)(a2 + v8[5]);
  unint64_t v80 = v114;
  void *v79 = v113;
  v79[1] = v80;
  uint64_t v81 = a2 + v8[8];
  *(_WORD *)uint64_t v81 = v72;
  *(unsigned char *)(v81 + 2) = v92;
  *(unsigned char *)(v81 + 3) = (_BYTE)v118;
  uint64_t v82 = (uint64_t *)(a2 + v8[7]);
  uint64_t v83 = v105;
  *uint64_t v82 = v103;
  v82[1] = v83;
  uint64_t v84 = (uint64_t *)(a2 + v8[6]);
  uint64_t v85 = v102;
  *uint64_t v84 = v100;
  v84[1] = v85;
  uint64_t v86 = a2 + v8[9];
  *(_DWORD *)uint64_t v86 = v98;
  *(unsigned char *)(v86 + 4) = 0;
  uint64_t v87 = a2 + v8[11];
  *(void *)uint64_t v87 = v94;
  *(unsigned char *)(v87 + 8) = 0;
  uint64_t v88 = a2 + v8[12];
  *(_DWORD *)uint64_t v88 = v91;
  *(unsigned char *)(v88 + 4) = 0;
  *(unsigned char *)(a2 + v8[13]) = v90;
  *(unsigned char *)(a2 + v8[14]) = v74;
  return result;
}

id sub_1001AAEA4()
{
  id v1 = [objc_allocWithZone((Class)SPRawAccessoryMetadata) init];
  uint64_t v2 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  Class isa = 0;
  if (*(void *)(v0 + v2[5] + 8) >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setProductData:isa];

  if (*(void *)(v0 + v2[6] + 8) >> 60 == 15) {
    Class v4 = 0;
  }
  else {
    Class v4 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setManufacturerName:v4];

  if (*(void *)(v0 + v2[7] + 8) >> 60 == 15) {
    Class v5 = 0;
  }
  else {
    Class v5 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setModelName:v5];

  if (*(void *)(v0 + v2[8] + 8) >> 60 == 15) {
    Class v6 = 0;
  }
  else {
    Class v6 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setReserved:v6];

  if (*(void *)(v0 + v2[9] + 8) >> 60 == 15) {
    Class v7 = 0;
  }
  else {
    Class v7 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setAccessoryCategory:v7];

  if (*(void *)(v0 + v2[10] + 8) >> 60 == 15) {
    Class v8 = 0;
  }
  else {
    Class v8 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setAccessoryCapabilities:v8];

  if (*(void *)(v0 + v2[11] + 8) >> 60 == 15) {
    Class v9 = 0;
  }
  else {
    Class v9 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setFirmwareVersion:v9];

  if (*(void *)(v0 + v2[12] + 8) >> 60 == 15) {
    Class v10 = 0;
  }
  else {
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setFindMyVersion:v10];

  if (*(void *)(v0 + v2[13] + 8) >> 60 == 15) {
    Class v11 = 0;
  }
  else {
    Class v11 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setBatteryType:v11];

  if (*(void *)(v0 + v2[14] + 8) >> 60 == 15) {
    Class v12 = 0;
  }
  else {
    Class v12 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setBatteryLevel:v12];

  return v1;
}

uint64_t sub_1001AB198(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0xD000000000000013;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    sub_1001ACD7C(a1, (uint64_t)a2, 0);
    return v8;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0x726F43617461642ELL;
    v5._uint64_t countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    return v8;
  }
  return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_1001AB2D4()
{
  return sub_1001AB198(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t sub_1001AB2E0()
{
  unint64_t result = qword_10163D348;
  if (!qword_10163D348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D348);
  }
  return result;
}

uint64_t type metadata accessor for RawAccessoryMetadata(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163D430);
}

unint64_t sub_1001AB354()
{
  unint64_t result = qword_10163D350;
  if (!qword_10163D350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D350);
  }
  return result;
}

uint64_t sub_1001AB3A8(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  Class v4 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  unint64_t v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000361E0(v6, v7);
  sub_1000361E0(v9, v10);
  char v11 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v7);
  if ((v11 & 1) == 0) {
    return 0;
  }
  uint64_t v12 = v4[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      return 0;
    }
    goto LABEL_12;
  }
  if (!v16) {
    return 0;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v18 & 1) != 0))
  {
LABEL_12:
    uint64_t v20 = v4[7];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = *(void *)(a1 + v20 + 8);
    uint64_t v23 = (void *)(a2 + v20);
    uint64_t v24 = v23[1];
    if (v22)
    {
      if (!v24) {
        return 0;
      }
      if (*v21 != *v23 || v22 != v24)
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v25 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v24)
    {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v26 = v4[8];
    uint64_t v27 = a1 + v26;
    int v28 = *(unsigned __int16 *)(a1 + v26);
    uint64_t v29 = (unsigned __int16 *)(a2 + v26);
    if (v28 != *v29
      || *(unsigned __int8 *)(v27 + 2) != *((unsigned __int8 *)v29 + 2)
      || *(unsigned __int8 *)(v27 + 3) != *((unsigned __int8 *)v29 + 3))
    {
      return result;
    }
    uint64_t v30 = v4[9];
    unint64_t v31 = (_DWORD *)(a1 + v30);
    char v32 = *(unsigned char *)(a1 + v30 + 4);
    uint64_t v33 = (_DWORD *)(a2 + v30);
    int v34 = *(unsigned __int8 *)(a2 + v30 + 4);
    if (v32)
    {
      if (!v34) {
        return 0;
      }
    }
    else
    {
      if (*v31 != *v33) {
        LOBYTE(v34) = 1;
      }
      if (v34) {
        return 0;
      }
    }
    uint64_t v35 = v4[10];
    uint64_t v36 = (void *)(a1 + v35);
    char v37 = *(unsigned char *)(a1 + v35 + 16);
    uint64_t v38 = a2 + v35;
    if (v37)
    {
      if (!*(unsigned char *)(v38 + 16)) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((*(unsigned char *)(v38 + 16) & 1) != 0 || *v36 != *(void *)v38 || v36[1] != *(void *)(v38 + 8)) {
        return result;
      }
    }
    uint64_t v39 = v4[11];
    uint64_t v40 = (void *)(a1 + v39);
    char v41 = *(unsigned char *)(a1 + v39 + 8);
    unint64_t v42 = (void *)(a2 + v39);
    int v43 = *(unsigned __int8 *)(a2 + v39 + 8);
    if (v41)
    {
      if (!v43) {
        return 0;
      }
    }
    else
    {
      if (*v40 != *v42) {
        LOBYTE(v43) = 1;
      }
      if (v43) {
        return 0;
      }
    }
    uint64_t v44 = v4[12];
    uint64_t v45 = (_DWORD *)(a1 + v44);
    char v46 = *(unsigned char *)(a1 + v44 + 4);
    unint64_t v47 = (_DWORD *)(a2 + v44);
    int v48 = *(unsigned __int8 *)(a2 + v44 + 4);
    if (v46)
    {
      if (!v48) {
        return 0;
      }
    }
    else
    {
      if (*v45 != *v47) {
        LOBYTE(v48) = 1;
      }
      if (v48) {
        return 0;
      }
    }
    uint64_t v49 = v4[13];
    int v50 = *(unsigned __int8 *)(a1 + v49);
    int v51 = *(unsigned __int8 *)(a2 + v49);
    if (v50 == 4)
    {
      if (v51 != 4) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (v51 == 4 || v50 != v51) {
        return result;
      }
    }
    uint64_t v52 = v4[14];
    int v53 = *(unsigned __int8 *)(a1 + v52);
    int v54 = *(unsigned __int8 *)(a2 + v52);
    if (v53 != 5)
    {
      uint64_t result = 0;
      if (v54 == 5 || v53 != v54) {
        return result;
      }
      goto LABEL_58;
    }
    if (v54 == 5)
    {
LABEL_58:
      uint64_t v55 = v4[15];
      uint64_t v56 = *(void *)(a1 + v55);
      uint64_t v57 = *(void *)(a1 + v55 + 8);
      char v58 = (void *)(a2 + v55);
      if (v56 == *v58 && v57 == v58[1]) {
        return 1;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    return 0;
  }
  return result;
}

BOOL sub_1001AB6EC(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  Class v4 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  unint64_t v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v11 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v11 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v12 = v4[6];
  uint64_t v6 = *(void *)(a1 + v12);
  unint64_t v7 = *(void *)(a1 + v12 + 8);
  uint64_t v13 = (uint64_t *)(a2 + v12);
  uint64_t v9 = *v13;
  unint64_t v10 = v13[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v14 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v14 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v15 = v4[7];
  uint64_t v6 = *(void *)(a1 + v15);
  unint64_t v7 = *(void *)(a1 + v15 + 8);
  uint64_t v16 = (uint64_t *)(a2 + v15);
  uint64_t v9 = *v16;
  unint64_t v10 = v16[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v17 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v17 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v18 = v4[8];
  uint64_t v6 = *(void *)(a1 + v18);
  unint64_t v7 = *(void *)(a1 + v18 + 8);
  uint64_t v19 = (uint64_t *)(a2 + v18);
  uint64_t v9 = *v19;
  unint64_t v10 = v19[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v20 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v21 = v4[9];
  uint64_t v6 = *(void *)(a1 + v21);
  unint64_t v7 = *(void *)(a1 + v21 + 8);
  uint64_t v22 = (uint64_t *)(a2 + v21);
  uint64_t v9 = *v22;
  unint64_t v10 = v22[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v23 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v23 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v24 = v4[10];
  uint64_t v6 = *(void *)(a1 + v24);
  unint64_t v7 = *(void *)(a1 + v24 + 8);
  char v25 = (uint64_t *)(a2 + v24);
  uint64_t v9 = *v25;
  unint64_t v10 = v25[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v26 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v26 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v27 = v4[11];
  uint64_t v6 = *(void *)(a1 + v27);
  unint64_t v7 = *(void *)(a1 + v27 + 8);
  int v28 = (uint64_t *)(a2 + v27);
  uint64_t v9 = *v28;
  unint64_t v10 = v28[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    char v29 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
    sub_100037A24(v9, v10);
    sub_100037A24(v6, v7);
    if ((v29 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v30 = v4[12];
  uint64_t v6 = *(void *)(a1 + v30);
  unint64_t v7 = *(void *)(a1 + v30 + 8);
  unint64_t v31 = (uint64_t *)(a2 + v30);
  uint64_t v9 = *v31;
  unint64_t v10 = v31[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  if (v10 >> 60 == 15) {
    goto LABEL_46;
  }
  sub_100037A38(v6, v7);
  sub_100037A38(v9, v10);
  char v32 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
  sub_100037A24(v9, v10);
  sub_100037A24(v6, v7);
  if ((v32 & 1) == 0) {
    return 0;
  }
LABEL_42:
  uint64_t v33 = v4[13];
  uint64_t v6 = *(void *)(a1 + v33);
  unint64_t v7 = *(void *)(a1 + v33 + 8);
  int v34 = (uint64_t *)(a2 + v33);
  uint64_t v9 = *v34;
  unint64_t v10 = v34[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 == 15) {
      goto LABEL_50;
    }
LABEL_46:
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    sub_100037A24(v6, v7);
    uint64_t v35 = v9;
    unint64_t v36 = v10;
LABEL_47:
    sub_100037A24(v35, v36);
    return 0;
  }
  if (v10 >> 60 == 15) {
    goto LABEL_46;
  }
  sub_100037A38(v6, v7);
  sub_100037A38(v9, v10);
  char v38 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
  sub_100037A24(v9, v10);
  sub_100037A24(v6, v7);
  if ((v38 & 1) == 0) {
    return 0;
  }
LABEL_50:
  uint64_t v39 = v4[14];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = *(void *)(a1 + v39);
  unint64_t v42 = *(void *)(v40 + 8);
  int v43 = (uint64_t *)(a2 + v39);
  uint64_t v44 = *v43;
  unint64_t v45 = v43[1];
  if (v42 >> 60 == 15)
  {
    if (v45 >> 60 == 15) {
      return 1;
    }
LABEL_54:
    sub_100037A38(v41, *(void *)(v40 + 8));
    sub_100037A38(v44, v45);
    sub_100037A24(v41, v42);
    uint64_t v35 = v44;
    unint64_t v36 = v45;
    goto LABEL_47;
  }
  if (v45 >> 60 == 15) {
    goto LABEL_54;
  }
  sub_100037A38(v41, *(void *)(v40 + 8));
  sub_100037A38(v44, v45);
  char v46 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v41, v42, v44, v45);
  sub_100037A24(v44, v45);
  sub_100037A24(v41, v42);
  return (v46 & 1) != 0;
}

uint64_t sub_1001ABCF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F45D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F45F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F4610 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6556794D646E6966 && a2 == 0xED00006E6F697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4C79726574746162 && a2 == 0xEC0000006C657665)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_1001AC1FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F45D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001013F4630 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F45F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F4610 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x5379726574746162 && a2 == 0xEC00000065746174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

unint64_t sub_1001AC74C()
{
  unint64_t result = qword_10163D360;
  if (!qword_10163D360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D360);
  }
  return result;
}

unint64_t sub_1001AC7A0()
{
  unint64_t result = qword_10163D368;
  if (!qword_10163D368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D368);
  }
  return result;
}

unint64_t sub_1001AC7F4()
{
  unint64_t result = qword_10163D370;
  if (!qword_10163D370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D370);
  }
  return result;
}

unint64_t sub_1001AC848()
{
  unint64_t result = qword_10163D378;
  if (!qword_10163D378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D378);
  }
  return result;
}

unint64_t sub_1001AC89C()
{
  unint64_t result = qword_10163D380;
  if (!qword_10163D380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D380);
  }
  return result;
}

unint64_t sub_1001AC8F0()
{
  unint64_t result = qword_10163D388;
  if (!qword_10163D388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D388);
  }
  return result;
}

unint64_t sub_1001AC944()
{
  unint64_t result = qword_10163D390;
  if (!qword_10163D390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D390);
  }
  return result;
}

uint64_t sub_1001AC998(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001AC9F8()
{
  unint64_t result = qword_10163D3A0;
  if (!qword_10163D3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3A0);
  }
  return result;
}

unint64_t sub_1001ACA4C()
{
  unint64_t result = qword_10163D3A8;
  if (!qword_10163D3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3A8);
  }
  return result;
}

unint64_t sub_1001ACAA0()
{
  unint64_t result = qword_10163D3B0;
  if (!qword_10163D3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3B0);
  }
  return result;
}

unint64_t sub_1001ACAF4()
{
  unint64_t result = qword_10163D3B8;
  if (!qword_10163D3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3B8);
  }
  return result;
}

unint64_t sub_1001ACB48()
{
  unint64_t result = qword_10163D3C0;
  if (!qword_10163D3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3C0);
  }
  return result;
}

unint64_t sub_1001ACB9C()
{
  unint64_t result = qword_10163D3C8;
  if (!qword_10163D3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3C8);
  }
  return result;
}

unint64_t sub_1001ACBF0()
{
  unint64_t result = qword_10163D3D0;
  if (!qword_10163D3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D3D0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001ACD10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.CodingKeys()
{
  return &type metadata for AccessoryMetadata.CodingKeys;
}

uint64_t sub_1001ACD4C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a3) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t destroy for AccessoryMetadata.Error(uint64_t a1)
{
  return sub_1001ACD7C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1001ACD7C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!a3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t _s12searchpartyd17AccessoryMetadataV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001ACD4C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001ACD4C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001ACD7C(v6, v7, v8);
  return a1;
}

__n128 _s34DisplayIdentifierAndMembershipTypeVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001ACD7C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryMetadata.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryMetadata.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001ACF28(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1001ACF40(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.Error()
{
  return &type metadata for AccessoryMetadata.Error;
}

uint64_t *sub_1001ACF68(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_1000361E0(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *(void *)v16;
      sub_1000361E0(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }
    uint64_t v19 = a3[7];
    char v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    unint64_t v22 = *((void *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)char v20 = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *(void *)v21;
      sub_1000361E0(*(void *)v21, *((void *)v21 + 1));
      *(void *)char v20 = v23;
      *((void *)v20 + 1) = v22;
    }
    uint64_t v24 = a3[8];
    char v25 = (char *)a1 + v24;
    char v26 = (char *)a2 + v24;
    unint64_t v27 = *((void *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)char v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v28 = *(void *)v26;
      sub_1000361E0(*(void *)v26, *((void *)v26 + 1));
      *(void *)char v25 = v28;
      *((void *)v25 + 1) = v27;
    }
    uint64_t v29 = a3[9];
    uint64_t v30 = (char *)a1 + v29;
    unint64_t v31 = (char *)a2 + v29;
    unint64_t v32 = *((void *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    else
    {
      uint64_t v33 = *(void *)v31;
      sub_1000361E0(*(void *)v31, *((void *)v31 + 1));
      *(void *)uint64_t v30 = v33;
      *((void *)v30 + 1) = v32;
    }
    uint64_t v34 = a3[10];
    uint64_t v35 = (char *)a1 + v34;
    unint64_t v36 = (char *)a2 + v34;
    unint64_t v37 = *((void *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    }
    else
    {
      uint64_t v38 = *(void *)v36;
      sub_1000361E0(*(void *)v36, *((void *)v36 + 1));
      *(void *)uint64_t v35 = v38;
      *((void *)v35 + 1) = v37;
    }
    uint64_t v39 = a3[11];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    unint64_t v42 = *((void *)v41 + 1);
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v43 = *(void *)v41;
      sub_1000361E0(*(void *)v41, *((void *)v41 + 1));
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v44 = a3[12];
    unint64_t v45 = (char *)a1 + v44;
    char v46 = (char *)a2 + v44;
    unint64_t v47 = *((void *)v46 + 1);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v45 = *(_OWORD *)v46;
    }
    else
    {
      uint64_t v48 = *(void *)v46;
      sub_1000361E0(*(void *)v46, *((void *)v46 + 1));
      *(void *)unint64_t v45 = v48;
      *((void *)v45 + 1) = v47;
    }
    uint64_t v49 = a3[13];
    int v50 = (char *)a1 + v49;
    int v51 = (char *)a2 + v49;
    unint64_t v52 = *((void *)v51 + 1);
    if (v52 >> 60 == 15)
    {
      *(_OWORD *)int v50 = *(_OWORD *)v51;
    }
    else
    {
      uint64_t v53 = *(void *)v51;
      sub_1000361E0(*(void *)v51, *((void *)v51 + 1));
      *(void *)int v50 = v53;
      *((void *)v50 + 1) = v52;
    }
    uint64_t v54 = a3[14];
    uint64_t v55 = (char *)a1 + v54;
    uint64_t v56 = (char *)a2 + v54;
    unint64_t v57 = *((void *)v56 + 1);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    }
    else
    {
      uint64_t v58 = *(void *)v56;
      sub_1000361E0(*(void *)v56, *((void *)v56 + 1));
      *(void *)uint64_t v55 = v58;
      *((void *)v55 + 1) = v57;
    }
  }
  return a1;
}

uint64_t sub_1001AD288(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  char v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[6]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v8, v9);
  }
  unint64_t v10 = (uint64_t *)(a1 + a2[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v10, v11);
  }
  uint64_t v12 = (uint64_t *)(a1 + a2[8]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v12, v13);
  }
  uint64_t v14 = (uint64_t *)(a1 + a2[9]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(a1 + a2[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(a1 + a2[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v18, v19);
  }
  char v20 = (uint64_t *)(a1 + a2[12]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v20, v21);
  }
  unint64_t v22 = (uint64_t *)(a1 + a2[13]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(*v22, v23);
  }
  uint64_t v24 = (uint64_t *)(a1 + a2[14]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15)
  {
    uint64_t v26 = *v24;
    return sub_10001CFB8(v26, v25);
  }
  return result;
}

uint64_t sub_1001AD43C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_1000361E0(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_1000361E0(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  unint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_1000361E0(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = *v24;
    sub_1000361E0(*v24, v24[1]);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = v25;
  }
  uint64_t v27 = a3[9];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = v29[1];
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  else
  {
    uint64_t v31 = *v29;
    sub_1000361E0(*v29, v29[1]);
    *(void *)uint64_t v28 = v31;
    *(void *)(v28 + 8) = v30;
  }
  uint64_t v32 = a3[10];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = (uint64_t *)(a2 + v32);
  unint64_t v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  }
  else
  {
    uint64_t v36 = *v34;
    sub_1000361E0(*v34, v34[1]);
    *(void *)uint64_t v33 = v36;
    *(void *)(v33 + 8) = v35;
  }
  uint64_t v37 = a3[11];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = (uint64_t *)(a2 + v37);
  unint64_t v40 = v39[1];
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }
  else
  {
    uint64_t v41 = *v39;
    sub_1000361E0(*v39, v39[1]);
    *(void *)uint64_t v38 = v41;
    *(void *)(v38 + 8) = v40;
  }
  uint64_t v42 = a3[12];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = (uint64_t *)(a2 + v42);
  unint64_t v45 = v44[1];
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  }
  else
  {
    uint64_t v46 = *v44;
    sub_1000361E0(*v44, v44[1]);
    *(void *)uint64_t v43 = v46;
    *(void *)(v43 + 8) = v45;
  }
  uint64_t v47 = a3[13];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(a2 + v47);
  unint64_t v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  }
  else
  {
    uint64_t v51 = *v49;
    sub_1000361E0(*v49, v49[1]);
    *(void *)uint64_t v48 = v51;
    *(void *)(v48 + 8) = v50;
  }
  uint64_t v52 = a3[14];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = (uint64_t *)(a2 + v52);
  unint64_t v55 = v54[1];
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  }
  else
  {
    uint64_t v56 = *v54;
    sub_1000361E0(*v54, v54[1]);
    *(void *)uint64_t v53 = v56;
    *(void *)(v53 + 8) = v55;
  }
  return a1;
}

uint64_t sub_1001AD70C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_1000361E0(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  sub_1000361E0(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  sub_10001CFB8(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_1000361E0(v19, v18);
      *uint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v16);
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  uint64_t v20 = *v17;
  sub_1000361E0(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1] = v18;
  sub_10001CFB8(v21, v22);
LABEL_15:
  uint64_t v23 = a3[7];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_1000361E0(v27, v26);
      *uint64_t v24 = v27;
      v24[1] = v26;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v24);
LABEL_20:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_22;
  }
  uint64_t v28 = *v25;
  sub_1000361E0(v28, v26);
  uint64_t v29 = *v24;
  unint64_t v30 = v24[1];
  *uint64_t v24 = v28;
  v24[1] = v26;
  sub_10001CFB8(v29, v30);
LABEL_22:
  uint64_t v31 = a3[8];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *v33;
      sub_1000361E0(v35, v34);
      *uint64_t v32 = v35;
      v32[1] = v34;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v34 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v32);
LABEL_27:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_29;
  }
  uint64_t v36 = *v33;
  sub_1000361E0(v36, v34);
  uint64_t v37 = *v32;
  unint64_t v38 = v32[1];
  *uint64_t v32 = v36;
  v32[1] = v34;
  sub_10001CFB8(v37, v38);
LABEL_29:
  uint64_t v39 = a3[9];
  unint64_t v40 = (uint64_t *)(a1 + v39);
  uint64_t v41 = (uint64_t *)(a2 + v39);
  unint64_t v42 = *(void *)(a2 + v39 + 8);
  if (*(void *)(a1 + v39 + 8) >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      uint64_t v43 = *v41;
      sub_1000361E0(v43, v42);
      uint64_t *v40 = v43;
      v40[1] = v42;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v42 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v40);
LABEL_34:
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    goto LABEL_36;
  }
  uint64_t v44 = *v41;
  sub_1000361E0(v44, v42);
  uint64_t v45 = *v40;
  unint64_t v46 = v40[1];
  uint64_t *v40 = v44;
  v40[1] = v42;
  sub_10001CFB8(v45, v46);
LABEL_36:
  uint64_t v47 = a3[10];
  uint64_t v48 = (uint64_t *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  unint64_t v50 = *(void *)(a2 + v47 + 8);
  if (*(void *)(a1 + v47 + 8) >> 60 == 15)
  {
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v49;
      sub_1000361E0(v51, v50);
      *uint64_t v48 = v51;
      v48[1] = v50;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v50 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v48);
LABEL_41:
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    goto LABEL_43;
  }
  uint64_t v52 = *v49;
  sub_1000361E0(v52, v50);
  uint64_t v53 = *v48;
  unint64_t v54 = v48[1];
  *uint64_t v48 = v52;
  v48[1] = v50;
  sub_10001CFB8(v53, v54);
LABEL_43:
  uint64_t v55 = a3[11];
  uint64_t v56 = (uint64_t *)(a1 + v55);
  unint64_t v57 = (uint64_t *)(a2 + v55);
  unint64_t v58 = *(void *)(a2 + v55 + 8);
  if (*(void *)(a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      uint64_t v59 = *v57;
      sub_1000361E0(v59, v58);
      *uint64_t v56 = v59;
      v56[1] = v58;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v58 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v56);
LABEL_48:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_50;
  }
  uint64_t v60 = *v57;
  sub_1000361E0(v60, v58);
  uint64_t v61 = *v56;
  unint64_t v62 = v56[1];
  *uint64_t v56 = v60;
  v56[1] = v58;
  sub_10001CFB8(v61, v62);
LABEL_50:
  uint64_t v63 = a3[12];
  uint64_t v64 = (uint64_t *)(a1 + v63);
  unint64_t v65 = (uint64_t *)(a2 + v63);
  unint64_t v66 = *(void *)(a2 + v63 + 8);
  if (*(void *)(a1 + v63 + 8) >> 60 == 15)
  {
    if (v66 >> 60 != 15)
    {
      uint64_t v67 = *v65;
      sub_1000361E0(v67, v66);
      *uint64_t v64 = v67;
      v64[1] = v66;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v66 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v64);
LABEL_55:
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    goto LABEL_57;
  }
  uint64_t v68 = *v65;
  sub_1000361E0(v68, v66);
  uint64_t v69 = *v64;
  unint64_t v70 = v64[1];
  *uint64_t v64 = v68;
  v64[1] = v66;
  sub_10001CFB8(v69, v70);
LABEL_57:
  uint64_t v71 = a3[13];
  __int16 v72 = (uint64_t *)(a1 + v71);
  unsigned int v73 = (uint64_t *)(a2 + v71);
  unint64_t v74 = *(void *)(a2 + v71 + 8);
  if (*(void *)(a1 + v71 + 8) >> 60 == 15)
  {
    if (v74 >> 60 != 15)
    {
      uint64_t v75 = *v73;
      sub_1000361E0(v75, v74);
      *__int16 v72 = v75;
      v72[1] = v74;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (v74 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)v72);
LABEL_62:
    *(_OWORD *)__int16 v72 = *(_OWORD *)v73;
    goto LABEL_64;
  }
  uint64_t v76 = *v73;
  sub_1000361E0(v76, v74);
  uint64_t v77 = *v72;
  unint64_t v78 = v72[1];
  *__int16 v72 = v76;
  v72[1] = v74;
  sub_10001CFB8(v77, v78);
LABEL_64:
  uint64_t v79 = a3[14];
  unint64_t v80 = (uint64_t *)(a1 + v79);
  uint64_t v81 = (uint64_t *)(a2 + v79);
  unint64_t v82 = *(void *)(a2 + v79 + 8);
  if (*(void *)(a1 + v79 + 8) >> 60 != 15)
  {
    if (v82 >> 60 != 15)
    {
      uint64_t v84 = *v81;
      sub_1000361E0(v84, v82);
      uint64_t v85 = *v80;
      unint64_t v86 = v80[1];
      *unint64_t v80 = v84;
      v80[1] = v82;
      sub_10001CFB8(v85, v86);
      return a1;
    }
    sub_1001356D0((uint64_t)v80);
    goto LABEL_69;
  }
  if (v82 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)unint64_t v80 = *(_OWORD *)v81;
    return a1;
  }
  uint64_t v83 = *v81;
  sub_1000361E0(v83, v82);
  *unint64_t v80 = v83;
  v80[1] = v82;
  return a1;
}

uint64_t sub_1001ADC6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1001ADD40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1001356D0(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  sub_10001CFB8(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_1001356D0(v14);
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v17;
  sub_10001CFB8(v18, v16);
LABEL_11:
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  unint64_t v22 = *(void *)(a1 + v19 + 8);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_16;
  }
  unint64_t v23 = *(void *)(v21 + 8);
  if (v23 >> 60 == 15)
  {
    sub_1001356D0(v20);
    goto LABEL_14;
  }
  uint64_t v24 = *(void *)v20;
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v23;
  sub_10001CFB8(v24, v22);
LABEL_16:
  uint64_t v25 = a3[8];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  unint64_t v28 = *(void *)(a1 + v25 + 8);
  if (v28 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }
  unint64_t v29 = *(void *)(v27 + 8);
  if (v29 >> 60 == 15)
  {
    sub_1001356D0(v26);
    goto LABEL_19;
  }
  uint64_t v30 = *(void *)v26;
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = v29;
  sub_10001CFB8(v30, v28);
LABEL_21:
  uint64_t v31 = a3[9];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  unint64_t v34 = *(void *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_26;
  }
  unint64_t v35 = *(void *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_1001356D0(v32);
    goto LABEL_24;
  }
  uint64_t v36 = *(void *)v32;
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v32 + 8) = v35;
  sub_10001CFB8(v36, v34);
LABEL_26:
  uint64_t v37 = a3[10];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  unint64_t v40 = *(void *)(a1 + v37 + 8);
  if (v40 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v39 + 8);
  if (v41 >> 60 == 15)
  {
    sub_1001356D0(v38);
    goto LABEL_29;
  }
  uint64_t v42 = *(void *)v38;
  *(void *)uint64_t v38 = *(void *)v39;
  *(void *)(v38 + 8) = v41;
  sub_10001CFB8(v42, v40);
LABEL_31:
  uint64_t v43 = a3[11];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  unint64_t v46 = *(void *)(a1 + v43 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }
  unint64_t v47 = *(void *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    sub_1001356D0(v44);
    goto LABEL_34;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_10001CFB8(v48, v46);
LABEL_36:
  uint64_t v49 = a3[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  unint64_t v52 = *(void *)(a1 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    goto LABEL_41;
  }
  unint64_t v53 = *(void *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    sub_1001356D0(v50);
    goto LABEL_39;
  }
  uint64_t v54 = *(void *)v50;
  *(void *)uint64_t v50 = *(void *)v51;
  *(void *)(v50 + 8) = v53;
  sub_10001CFB8(v54, v52);
LABEL_41:
  uint64_t v55 = a3[13];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  unint64_t v58 = *(void *)(a1 + v55 + 8);
  if (v58 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_46;
  }
  unint64_t v59 = *(void *)(v57 + 8);
  if (v59 >> 60 == 15)
  {
    sub_1001356D0(v56);
    goto LABEL_44;
  }
  uint64_t v60 = *(void *)v56;
  *(void *)uint64_t v56 = *(void *)v57;
  *(void *)(v56 + 8) = v59;
  sub_10001CFB8(v60, v58);
LABEL_46:
  uint64_t v61 = a3[14];
  unint64_t v62 = (uint64_t *)(a1 + v61);
  uint64_t v63 = (uint64_t *)(a2 + v61);
  unint64_t v64 = *(void *)(a1 + v61 + 8);
  if (v64 >> 60 != 15)
  {
    unint64_t v65 = v63[1];
    if (v65 >> 60 != 15)
    {
      uint64_t v66 = *v62;
      uint64_t *v62 = *v63;
      v62[1] = v65;
      sub_10001CFB8(v66, v64);
      return a1;
    }
    sub_1001356D0((uint64_t)v62);
  }
  *(_OWORD *)unint64_t v62 = *(_OWORD *)v63;
  return a1;
}

uint64_t sub_1001AE0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AE0EC);
}

uint64_t sub_1001AE0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t sub_1001AE1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AE1CC);
}

uint64_t sub_1001AE1CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    *BOOL v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t sub_1001AE298()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryBatteryLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001AE40CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryLevel()
{
  return &type metadata for AccessoryBatteryLevel;
}

unsigned char *storeEnumTagSinglePayload for AccessoryBatteryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001AE510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryType()
{
  return &type metadata for AccessoryBatteryType;
}

unint64_t sub_1001AE54C()
{
  unint64_t result = qword_10163D490;
  if (!qword_10163D490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D490);
  }
  return result;
}

unint64_t sub_1001AE5A4()
{
  unint64_t result = qword_10163D498;
  if (!qword_10163D498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D498);
  }
  return result;
}

uint64_t sub_1001AE5F8()
{
  return sub_1001A9594(&qword_10163D4A0, (void (*)(uint64_t))type metadata accessor for RawAccessoryMetadata);
}

unint64_t sub_1001AE644()
{
  unint64_t result = qword_10163D4A8;
  if (!qword_10163D4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4A8);
  }
  return result;
}

unint64_t sub_1001AE69C()
{
  unint64_t result = qword_10163D4B0;
  if (!qword_10163D4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4B0);
  }
  return result;
}

unint64_t sub_1001AE6F4()
{
  unint64_t result = qword_10163D4B8;
  if (!qword_10163D4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4B8);
  }
  return result;
}

unint64_t sub_1001AE748()
{
  unint64_t result = qword_10163D4C0;
  if (!qword_10163D4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4C0);
  }
  return result;
}

unint64_t sub_1001AE79C()
{
  unint64_t result = qword_10163D4C8;
  if (!qword_10163D4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4C8);
  }
  return result;
}

unint64_t sub_1001AE7F0()
{
  unint64_t result = qword_10163D4D8;
  if (!qword_10163D4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4D8);
  }
  return result;
}

uint64_t sub_1001AE844(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for RawAccessoryMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001AE978);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawAccessoryMetadata.CodingKeys()
{
  return &type metadata for RawAccessoryMetadata.CodingKeys;
}

unint64_t sub_1001AE9B4()
{
  unint64_t result = qword_10163D4E8;
  if (!qword_10163D4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4E8);
  }
  return result;
}

unint64_t sub_1001AEA0C()
{
  unint64_t result = qword_10163D4F0;
  if (!qword_10163D4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4F0);
  }
  return result;
}

unint64_t sub_1001AEA64()
{
  unint64_t result = qword_10163D4F8;
  if (!qword_10163D4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D4F8);
  }
  return result;
}

uint64_t sub_1001AEAB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD9C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001AEAE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABDB0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001AEB10()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler);
LABEL_8:
    swift_retain();
    return v2;
  }
  uint64_t v3 = v0;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v4 = sub_1010ABD9C(v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = (unsigned __int128)(v4 * (__int128)60) >> 64;
  uint64_t v7 = 60 * v4;
  if (v6 == v7 >> 63)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v8 = sub_1010ABDB0(v11);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v8 * (__int128)60) >> 64 == (60 * v8) >> 63)
    {
      double v9 = (double)(60 * v8);
      uint64_t v10 = swift_allocObject();
      swift_weakInit();
      type metadata accessor for XPCScheduler();
      swift_allocObject();
      uint64_t v2 = sub_1006E2AB8(0xD000000000000015, 0x80000001013F47F0, (uint64_t)sub_1001B0208, v10, (double)v7, v9, 1.0);
      swift_release();
      *(void *)(v3 + v1) = v2;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001AED14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = sub_10000588C(&qword_1016567A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v24 = (uint64_t)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56);
  uint64_t v22 = v13 + 56;
  unint64_t v23 = v14;
  v14(v11, 1, 1, v12);
  uint64_t v15 = OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configurationChangedQueue;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  static DispatchQoS.unspecified.getter();
  v25[0] = _swiftEmptyArrayStorage;
  sub_1001AFFC4();
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  uint64_t v16 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + v15) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler) = 0;
  *(void *)(v1 + 16) = v16;
  swift_retain();
  sub_1001AEB10();
  swift_release();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  v25[3] = type metadata accessor for FirmwareUpdateScheduler();
  v25[4] = &off_1015B2C08;
  v25[0] = v1;
  swift_retain();
  uint64_t v17 = v24;
  sub_1000B5EA4((uint64_t)v25, v24);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  v23(v17, 0, 1, v12);
  uint64_t v18 = v1 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription;
  swift_beginAccess();
  sub_1001B001C(v17, v18);
  swift_endAccess();
  return v2;
}

uint64_t sub_1001AF0BC()
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170F050;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  int64_t v3 = sub_1010ABD9C(v15);
  swift_bridgeObjectRelease();
  if ((unsigned __int128)(v3 * (__int128)60) >> 64 != (60 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = Double.description.getter();
  uint64_t v6 = v5;
  *(void *)(v2 + 56) = &type metadata for String;
  int64_t v3 = sub_10000B4CC();
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v6;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v0 = sub_1010ABDB0(v15);
  swift_bridgeObjectRelease();
  if ((unsigned __int128)(v0 * (__int128)60) >> 64 != (60 * v0) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = Double.description.getter();
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 72) = v7;
  *(void *)(v2 + 80) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1001AEB10();
  sub_1006E216C();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  static os_log_type_t.default.getter();
  uint64_t v0 = (uint64_t)&type metadata for String;
  if (qword_1016372B8 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_release();
  *(void *)(v9 + 56) = v0;
  *(void *)(v9 + 64) = v3;
  *(void *)(v9 + 32) = 0x656863534350583CLL;
  *(void *)(v9 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001AF454(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1001AF4E8, 0, 0);
}

uint64_t sub_1001AF4E8()
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 32) = v2;
  return _swift_task_switch(sub_1001AF5B8, v2, 0);
}

uint64_t sub_1001AF5B8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_1001CCD8C(2, v1);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001AF678()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configurationChangedQueue);
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001B00FC;
  *(void *)(v5 + 24) = v4;
  v8[4] = sub_100132424;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000A70B0;
  v8[3] = &unk_1015B2C90;
  uint64_t v6 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v6);
  _Block_release(v6);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AF7F8(uint64_t a1)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1001AEB10();
    swift_release();
    sub_1006E232C();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v4 = sub_1010ABD9C(v9);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = (unsigned __int128)(v4 * (__int128)60) >> 64;
    uint64_t v6 = 60 * v4;
    if (v5 == v6 >> 63)
    {
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v7 = sub_1010ABDB0(v9);
      uint64_t result = swift_bridgeObjectRelease();
      if ((unsigned __int128)(v7 * (__int128)60) >> 64 == (60 * v7) >> 63)
      {
        type metadata accessor for XPCScheduler();
        swift_allocObject();
        swift_retain();
        uint64_t v8 = sub_1006E2AB8(0xD000000000000015, 0x80000001013F47F0, (uint64_t)sub_1001B012C, a1, (double)v6, (double)(60 * v7), 1.0);
        swift_release();
        *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler) = v8;
        swift_release();
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AFA30()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1001AFAC4()
{
  swift_release();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription, &qword_1016567A0);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1001AFB58()
{
  return type metadata accessor for FirmwareUpdateScheduler();
}

uint64_t type metadata accessor for FirmwareUpdateScheduler()
{
  uint64_t result = qword_10163D540;
  if (!qword_10163D540) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001AFBAC()
{
  sub_1001AFC64();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001AFC64()
{
  if (!qword_10163D550)
  {
    sub_10000592C((uint64_t *)&unk_1016488F0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10163D550);
    }
  }
}

uint64_t sub_1001AFCC0()
{
  return sub_1001AFCE8();
}

uint64_t sub_1001AFCE8()
{
  type metadata accessor for AnyKeyPath();
  swift_getKeyPath();
  char v0 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if ((v0 & 1) != 0
    || (swift_getKeyPath(), v1 = static AnyKeyPath.== infix(_:_:)(), uint64_t result = swift_release(), (v1 & 1) != 0))
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v4 = sub_1010ABD9C(v12);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v4 * (__int128)60) >> 64 == (60 * v4) >> 63)
    {
      uint64_t v5 = Double.description.getter();
      uint64_t v7 = v6;
      *(void *)(v3 + 56) = &type metadata for String;
      unint64_t v8 = sub_10000B4CC();
      *(void *)(v3 + 64) = v8;
      *(void *)(v3 + 32) = v5;
      *(void *)(v3 + 40) = v7;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v9 = sub_1010ABDB0(v12);
      uint64_t result = swift_bridgeObjectRelease();
      if ((unsigned __int128)(v9 * (__int128)60) >> 64 == (60 * v9) >> 63)
      {
        uint64_t v10 = Double.description.getter();
        *(void *)(v3 + 96) = &type metadata for String;
        *(void *)(v3 + 104) = v8;
        *(void *)(v3 + 72) = v10;
        *(void *)(v3 + 80) = v11;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        return sub_1001AF678();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AFF6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD9C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001AFF98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABDB0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001AFFC4()
{
  unint64_t result = qword_101638CC0;
  if (!qword_101638CC0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638CC0);
  }
  return result;
}

uint64_t sub_1001B001C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016567A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B0084()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B00BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B00FC()
{
  return sub_1001AF7F8(*(void *)(v0 + 16));
}

uint64_t sub_1001B0104()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B0114(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B0124()
{
  return swift_release();
}

uint64_t sub_1001B012C()
{
  return sub_1001AFA30();
}

uint64_t sub_1001B015C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1001AF454(v0);
}

uint64_t sub_1001B01EC()
{
  return sub_1009D70C8(v0);
}

uint64_t sub_1001B0208()
{
  return sub_1001AFA30();
}

uint64_t sub_1001B0238()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D2E4;
  return sub_1001AF454(v0);
}

uint64_t sub_1001B02C8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 320) = a2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v2;
  *(void *)(v3 + 72) = sub_10000588C((uint64_t *)&unk_10163BA80);
  *(void *)(v3 + 80) = swift_task_alloc();
  *(void *)(v3 + 88) = sub_10000588C(&qword_101639E68);
  *(void *)(v3 + 96) = swift_task_alloc();
  type metadata accessor for OwnerSharingCircle();
  *(void *)(v3 + 104) = swift_task_alloc();
  type metadata accessor for OwnerPeerTrust();
  *(void *)(v3 + 112) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 160) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 168) = v6;
  *(void *)(v3 + 176) = *(void *)(v6 + 64);
  *(void *)(v3 + 184) = swift_task_alloc();
  *(void *)(v3 + 192) = swift_task_alloc();
  return _swift_task_switch(sub_1001B0500, v2, 0);
}

uint64_t sub_1001B0500()
{
  uint64_t v19 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[25] = v6;
  v0[26] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[24];
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[21];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Decline %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[24], v0[20]);
  }

  uint64_t v16 = *(void *)(v0[8] + 112);
  v0[27] = v16;
  return _swift_task_switch(sub_1001B079C, v16, 0);
}

uint64_t sub_1001B079C()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 216) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001B0810, 0, 0);
}

uint64_t sub_1001B0810()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  void *v4 = v0;
  v4[1] = sub_1001B0928;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_1001B0928()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 248) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_1001B0A98, v2, 0);
}

uint64_t sub_1001B0A98()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001BD7F8(v4, *(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1001BD798(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_1001BD730(v7, v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v6, 1, v9);
  swift_bridgeObjectRelease();
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  uint64_t v13 = *(void *)(v0 + 120);
  if (v12 == 1)
  {
    uint64_t v14 = *(void *)(v0 + 216);
    sub_10001DAB4(v13, (uint64_t *)&unk_10163B7C0);
    return _swift_task_switch(sub_1001B0EF8, v14, 0);
  }
  else
  {
    sub_1001BD730(v13, *(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1001B0CE4;
    uint64_t v16 = *(void *)(v0 + 152);
    char v17 = *(unsigned char *)(v0 + 320);
    return sub_1001B1920(v16, v17, 0);
  }
}

uint64_t sub_1001B0CE4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1001B1724;
  }
  else {
    uint64_t v4 = sub_1001B0E10;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001B0E10()
{
  sub_1001BD798(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B0EF8()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[7];
  v0[34] = *(void *)(v1 + 136);
  v2(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[35] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_1001B0FE0, 0, 0);
}

uint64_t sub_1001B0FE0()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD670;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B10E4;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001BD95C, v3, v6);
}

uint64_t sub_1001B10E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B1234, v1, 0);
}

uint64_t sub_1001B1234()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = sub_10000588C(&qword_10163BA90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163BA80);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 32) = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1001BD6A4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v9 = v1 + *(int *)(v2 + 48);
    uint64_t v10 = v7 + *(int *)(v8 + 48);
    sub_1001BD730(v1, v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_1001BD730(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = v7 + *(int *)(v8 + 48);
    sub_1001BD730(v7, v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_1001BD730(v11, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v12;
    *int v12 = v0;
    v12[1] = sub_1001B14F4;
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 112);
    char v15 = *(unsigned char *)(v0 + 320);
    return sub_1001B55A8(v14, v13, v15);
  }
}

uint64_t sub_1001B14F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1001B1814;
  }
  else {
    uint64_t v4 = sub_1001B1620;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001B1620()
{
  uint64_t v1 = v0[14];
  sub_1001BD798(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001B1724()
{
  sub_1001BD798(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B1814()
{
  uint64_t v1 = v0[14];
  sub_1001BD798(v0[13], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001B1920(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 777) = a3;
  *(unsigned char *)(v4 + 776) = a2;
  *(void *)(v4 + 216) = a1;
  *(void *)(v4 + 224) = v3;
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v4 + 232) = v5;
  *(void *)(v4 + 240) = *(void *)(v5 - 8);
  *(void *)(v4 + 248) = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = sub_10000588C(&qword_10163BA20);
  *(void *)(v4 + 272) = swift_task_alloc();
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = swift_task_alloc();
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = swift_task_alloc();
  *(void *)(v4 + 312) = swift_task_alloc();
  *(void *)(v4 + 320) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 336) = swift_task_alloc();
  *(void *)(v4 + 344) = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v4 + 352) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  *(void *)(v4 + 360) = v6;
  *(void *)(v4 + 368) = *(void *)(v6 - 8);
  *(void *)(v4 + 376) = swift_task_alloc();
  *(void *)(v4 + 384) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v4 + 392) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 400) = v8;
  *(void *)(v4 + 408) = *(void *)(v8 + 64);
  *(void *)(v4 + 416) = swift_task_alloc();
  *(void *)(v4 + 424) = sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v4 + 432) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MemberPeerTrust();
  *(void *)(v4 + 440) = v9;
  *(void *)(v4 + 448) = *(void *)(v9 - 8);
  *(void *)(v4 + 456) = swift_task_alloc();
  *(void *)(v4 + 464) = swift_task_alloc();
  *(void *)(v4 + 472) = swift_task_alloc();
  return _swift_task_switch(sub_1001B1C80, v3, 0);
}

uint64_t sub_1001B1C80()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(*(void *)(v0 + 224) + 112);
  *(void *)(v0 + 480) = v2;
  *(_DWORD *)(v0 + 744) = *(_DWORD *)(v1 + 32);
  return _swift_task_switch(sub_1001B1CB0, v2, 0);
}

uint64_t sub_1001B1CB0()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 216) + *(int *)(v0 + 744);
  *(void *)(v0 + 488) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 496) = v6;
  *(void *)(v0 + 504) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 748) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 512) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 520) = v10;
  *(void *)(v0 + 528) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1001B1DD0, 0, 0);
}

uint64_t sub_1001B1DD0()
{
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[61];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD68C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[68] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B1ED8;
  uint64_t v6 = v0[53];
  uint64_t v5 = v0[54];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_1001B1ED8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B2028, v1, 0);
}

uint64_t sub_1001B2028()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 448) + 48))(v1, 1, *(void *)(v0 + 440)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 376);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    sub_1001BD7F8(v3, v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 376);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 184) = sub_1008FA0F0(v9, v10, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001BD798(v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No peerTrustIdentifier for %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001BD798(*(void *)(v0 + 376), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    char v11 = *(unsigned char *)(v0 + 776);
    sub_1001BD730(v1, *(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    if (v11)
    {
      *(void *)(v0 + 584) = 0;
      uint64_t v12 = *(void *)(v0 + 480);
      *(_DWORD *)(v0 + 752) = *(_DWORD *)(*(void *)(v0 + 360) + 28);
      return _swift_task_switch(sub_1001B2E88, v12, 0);
    }
    else
    {
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v14 = *(void *)(v0 + 464);
      uint64_t v15 = *(void *)(v0 + 472);
      uint64_t v16 = *(void *)(v0 + 456);
      uint64_t v17 = type metadata accessor for Logger();
      *(void *)(v0 + 552) = sub_100010324(v17, (uint64_t)qword_10170D788);
      sub_1001BD7F8(v15, v14, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_1001BD7F8(v15, v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = *(void *)(v0 + 456);
      uint64_t v22 = *(void *)(v0 + 464);
      if (v20)
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 200) = sub_1008FA0F0(v24, v25, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001BD798(v22, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        *(_WORD *)(v23 + 12) = 2080;
        uint64_t v26 = sub_1009C77D8();
        *(void *)(v0 + 208) = sub_1008FA0F0(v26, v27, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001BD798(v21, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Declining share from peerTrustIdentifier: %s,\ncommunicationsIdentifier: %s.", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001BD798(*(void *)(v0 + 464), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        sub_1001BD798(v21, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }

      unint64_t v28 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 496);
      uint64_t v29 = *(void *)(v0 + 472);
      uint64_t v30 = *(void *)(v0 + 440);
      uint64_t v31 = *(void *)(v0 + 392);
      uint64_t v32 = *(void *)(v0 + 224) + 120;
      uint64_t v33 = *(void *)(v0 + 216) + *(int *)(*(void *)(v0 + 360) + 28);
      *(void *)(v0 + 40) = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
      *(void *)(v0 + 48) = sub_1001BD6A4(&qword_10163D788, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
      *(void *)(v0 + 56) = sub_1001BD6A4(&qword_10163D790, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
      unint64_t v34 = sub_10001D958((uint64_t *)(v0 + 16));
      v28(v34, v33, v31);
      uint64_t v35 = v29 + *(int *)(v30 + 28);
      uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670AA8 + dword_101670AA8);
      uint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 560) = v36;
      *uint64_t v36 = v0;
      v36[1] = sub_1001B27E0;
      return v38(v32, v0 + 16, 4, v35);
    }
  }
}

uint64_t sub_1001B27E0()
{
  uint64_t v2 = (void *)*v1;
  v2[71] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[28];
    return _swift_task_switch(sub_1001B2ABC, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v2 + 2));
    os_log_type_t v6 = (char *)&dword_101662A98 + dword_101662A98;
    uint64_t v4 = (void *)swift_task_alloc();
    v2[72] = v4;
    void *v4 = v2;
    v4[1] = sub_1001B2974;
    return ((uint64_t (*)(void, void))v6)(0, 0);
  }
}

uint64_t sub_1001B2974()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  *(void *)(v1 + 584) = *(void *)(v1 + 568);
  uint64_t v2 = *(void *)(v1 + 480);
  *(_DWORD *)(v1 + 752) = *(_DWORD *)(*(void *)(v1 + 360) + 28);
  return _swift_task_switch(sub_1001B2E88, v2, 0);
}

uint64_t sub_1001B2ABC()
{
  uint64_t v11 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 192) = sub_1008FA0F0(v4, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on share decline, IDS message sending: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  if (*(unsigned char *)(v0 + 777))
  {
    swift_errorRelease();
    *(void *)(v0 + 584) = 0;
    uint64_t v6 = *(void *)(v0 + 480);
    *(_DWORD *)(v0 + 752) = *(_DWORD *)(*(void *)(v0 + 360) + 28);
    return _swift_task_switch(sub_1001B2E88, v6, 0);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 472);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 112) = 14;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1001BD6A4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_errorRelease();
    sub_1001BD798(v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_1001B2E88()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 520);
  os_log_type_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 216) + *(int *)(v0 + 752);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 748) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 748);
  *(void *)(v0 + 592) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 600) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_1001B2F84, 0, 0);
}

uint64_t sub_1001B2F84()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[74];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[76] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD6F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[77] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B308C;
  uint64_t v6 = v0[43];
  uint64_t v5 = v0[44];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_1001B308C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B31DC, v1, 0);
}

uint64_t sub_1001B31DC()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 368) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 128) = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1001BD6A4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      *(void *)(v0 + 152) = sub_1008FA0F0(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share decline, iCloud Data update: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v10 = *(void *)(v0 + 472);
    if (*(unsigned char *)(v0 + 777))
    {
      sub_1001BD798(*(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      swift_errorRelease();
    }
    else
    {
      sub_100074FA8();
      swift_allocError();
      *uint64_t v12 = 1;
      swift_willThrow();
      swift_errorRelease();
      sub_1001BD798(v10, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 480);
    sub_1001BD730(v2, *(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 756) = *(_DWORD *)(v1 + 24);
    return _swift_task_switch(sub_1001B3760, v9, 0);
  }
}

uint64_t sub_1001B3760()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 384) + *(int *)(v0 + 756);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 748) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 748);
  *(void *)(v0 + 624) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 632) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_1001B3858, 0, 0);
}

uint64_t sub_1001B3858()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[80] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD654;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[81] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B3964;
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[40];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091084, v3, v6);
}

uint64_t sub_1001B3964()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 312);
  uint64_t v3 = *(int **)(*v0 + 264);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = v3[12];
  *(_DWORD *)(v1 + 760) = v5;
  uint64_t v6 = v2 + v5;
  uint64_t v7 = v3[16];
  *(_DWORD *)(v1 + 764) = v7;
  uint64_t v8 = v2 + v7;
  *(_DWORD *)(v1 + 768) = v3[20];
  *(_DWORD *)(v1 + 772) = v3[24];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 656) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1001B3B60;
  uint64_t v10 = *(void *)(v1 + 384);
  uint64_t v11 = *(void *)(v1 + 312);
  return sub_100E5DC84(v11, v6, v8, v10);
}

uint64_t sub_1001B3B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 224);
  *(void *)(v3 + 664) = a1;
  *(void *)(v3 + 672) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B3C7C, v4, 0);
}

uint64_t sub_1001B3C7C()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void *)(v0 + 672);
  uint64_t v2 = *(int *)(v0 + 772);
  uint64_t v3 = *(void *)(v0 + 312);
  *(void *)(v3 + *(int *)(v0 + 768)) = *(void *)(v0 + 664);
  *(void *)(v3 + v2) = v1;
  uint64_t v4 = qword_101636888;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 664);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v65 = *(void *)(v0 + 296);
  uint64_t v67 = *(void *)(v0 + 672);
  uint64_t v70 = *(void *)(v0 + 288);
  uint64_t v8 = *(int **)(v0 + 264);
  uint64_t v9 = v6 + *(int *)(v0 + 764);
  uint64_t v10 = v6 + *(int *)(v0 + 760);
  uint64_t v64 = type metadata accessor for Logger();
  sub_100010324(v64, (uint64_t)qword_10170D788);
  uint64_t v11 = v7 + v8[12];
  uint64_t v12 = v7 + v8[16];
  uint64_t v13 = v8[20];
  uint64_t v14 = v8[24];
  sub_1001BD7F8(v6, v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D074(v10, v11, (uint64_t *)&unk_101653D50);
  sub_10001D074(v9, v12, &qword_10163B9E0);
  *(void *)(v7 + v13) = v5;
  *(void *)(v7 + v14) = v67;
  sub_10001D074(v7, v65, &qword_10163BA20);
  sub_10001D608(v7, v70, &qword_10163BA20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  uint64_t v71 = v15;
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    uint64_t v60 = *(void *)(v0 + 392);
    uint64_t v61 = *(void *)(v0 + 416);
    uint64_t v59 = *(void *)(v0 + 360);
    uint64_t v17 = *(void *)(v0 + 296);
    uint64_t v66 = *(void *)(v0 + 400);
    uint64_t v68 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 280);
    os_log_type_t v19 = *(int **)(v0 + 264);
    uint64_t v20 = swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 141558275;
    *(void *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v21 = v19[12];
    os_log_type_t type = v16;
    uint64_t v22 = v18 + v21;
    uint64_t v23 = v19[16];
    uint64_t v24 = v18 + v23;
    uint64_t v25 = v19[20];
    uint64_t v26 = v19[24];
    uint64_t v27 = v17 + v21;
    uint64_t v28 = v17 + v23;
    sub_1001BD7F8(v17, v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001D074(v27, v22, (uint64_t *)&unk_101653D50);
    sub_10001D074(v28, v24, &qword_10163B9E0);
    *(void *)(v18 + v25) = *(void *)(v17 + v25);
    *(void *)(v18 + v26) = *(void *)(v17 + v26);
    v62(v61, v18 + *(int *)(v59 + 20), v60);
    sub_1001BD798(v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v24, &qword_10163B9E0);
    sub_10001DAB4(v22, (uint64_t *)&unk_101653D50);
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v61, v60);
    *(void *)(v0 + 168) = sub_1008FA0F0(v29, v31, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v68, &qword_10163BA20);
    sub_10001DAB4(v17, &qword_10163BA20);
    _os_log_impl((void *)&_mh_execute_header, v71, type, "Data update on decline. Delete %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v32 = *(void *)(v0 + 296);
    sub_10001DAB4(*(void *)(v0 + 288), &qword_10163BA20);
    sub_10001DAB4(v32, &qword_10163BA20);
  }
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v34 = *(void *)(v0 + 664);
  uint64_t v72 = *(void *)(v0 + 584);
  uint64_t v35 = *(void *)(v0 + 312);
  uint64_t v36 = *(int **)(v0 + 264);
  uint64_t v37 = *(void *)(v0 + 272);
  uint64_t v69 = *(void *)(v0 + 256);
  uint64_t v38 = v35 + *(int *)(v0 + 764);
  uint64_t v39 = v35 + *(int *)(v0 + 760);
  uint64_t v40 = v37 + v36[12];
  uint64_t v41 = v37 + v36[16];
  uint64_t v42 = v36[20];
  uint64_t v43 = v36[24];
  sub_1001BD7F8(v35, v37, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D074(v39, v40, (uint64_t *)&unk_101653D50);
  sub_10001D074(v38, v41, &qword_10163B9E0);
  *(void *)(v37 + v42) = v34;
  *(void *)(v37 + v43) = v33;
  *(void *)(swift_task_alloc() + 16) = v37;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1001BD70C, v69);
  if (v72)
  {
    uint64_t v44 = *(void *)(v0 + 384);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 312);
    uint64_t v47 = *(void *)(v0 + 272);
    swift_task_dealloc();
    sub_10001DAB4(v46, &qword_10163BA20);
    sub_10001DAB4(v45, (uint64_t *)&unk_101653D50);
    sub_1001BD798(v44, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v47, &qword_10163BA20);
    if (qword_101636888 != -1) {
      swift_once();
    }
    sub_100010324(v64, (uint64_t)qword_10170D788);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315138;
      swift_getErrorValue();
      uint64_t v51 = Error.localizedDescription.getter();
      *(void *)(v0 + 152) = sub_1008FA0F0(v51, v52, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failure on share decline, iCloud Data update: %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v55 = *(void *)(v0 + 472);
    if (*(unsigned char *)(v0 + 777))
    {
      sub_1001BD798(*(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      swift_errorRelease();
    }
    else
    {
      sub_100074FA8();
      swift_allocError();
      unsigned char *v57 = 1;
      swift_willThrow();
      swift_errorRelease();
      sub_1001BD798(v55, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
  else
  {
    uint64_t v53 = *(void *)(v0 + 480);
    uint64_t v54 = *(void *)(v0 + 272);
    swift_task_dealloc();
    sub_10001DAB4(v54, &qword_10163BA20);
    return _swift_task_switch(sub_1001B4698, v53, 0);
  }
}

uint64_t sub_1001B4698()
{
  *(void *)(v0 + 680) = *(void *)(*(void *)(v0 + 480) + 128);
  return _swift_task_switch(sub_1001B46C0, 0, 0);
}

uint64_t sub_1001B46C0()
{
  uint64_t v1 = v0[85];
  uint64_t v2 = v0[32];
  uint64_t v3 = swift_task_alloc();
  v0[86] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[87] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B47B8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001B47B8()
{
  *(void *)(*(void *)v1 + 704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B4A4C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001B48D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B48D4()
{
  return _swift_task_switch(sub_1001B48F0, *(void *)(v0 + 224), 0);
}

uint64_t sub_1001B48F0()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  sub_10001D074(v0[42], v1, (uint64_t *)&unk_101653D50);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[41];
  if (v4 == 1)
  {
    sub_10001DAB4(v5, (uint64_t *)&unk_101653D50);
    uint64_t v6 = v0[60];
    return _swift_task_switch(sub_1001B510C, v6, 0);
  }
  else
  {
    sub_1001BD730(v5, v0[31], type metadata accessor for SharedBeaconRecord);
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101670528 + dword_101670528);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[89] = v7;
    void *v7 = v0;
    v7[1] = sub_1001B4F80;
    uint64_t v8 = v0[60];
    uint64_t v9 = v0[31];
    return v11(v9, v8);
  }
}

uint64_t sub_1001B4A4C()
{
  uint64_t v1 = *(void *)(v0 + 480);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B4AB8, v1, 0);
}

uint64_t sub_1001B4AB8()
{
  return _swift_task_switch(sub_1001B4AD4, *(void *)(v0 + 224), 0);
}

uint64_t sub_1001B4AD4()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  sub_10001DAB4(*(void *)(v0 + 256), &qword_101639E88);
  sub_10001DAB4(v3, &qword_10163BA20);
  sub_10001DAB4(v2, (uint64_t *)&unk_101653D50);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on share decline, iCloud Data update: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v10 = *(void *)(v0 + 472);
  if (*(unsigned char *)(v0 + 777))
  {
    sub_1001BD798(*(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    swift_errorRelease();
  }
  else
  {
    sub_100074FA8();
    swift_allocError();
    *uint64_t v12 = 1;
    swift_willThrow();
    swift_errorRelease();
    sub_1001BD798(v10, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1001B4F80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B5090, v1, 0);
}

uint64_t sub_1001B5090()
{
  sub_1001BD798(*(void *)(v0 + 248), type metadata accessor for SharedBeaconRecord);
  uint64_t v1 = *(void *)(v0 + 480);
  return _swift_task_switch(sub_1001B510C, v1, 0);
}

uint64_t sub_1001B510C()
{
  *(void *)(v0 + 720) = *(void *)(*(void *)(v0 + 480) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001B5180, 0, 0);
}

uint64_t sub_1001B5180()
{
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[60];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[91] = v3;
  v3[2] = v1;
  v3[3] = sub_1001BD728;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[92] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B528C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D74C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001B528C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B53C0, v1, 0);
}

uint64_t sub_1001B53C0()
{
  return _swift_task_switch(sub_1001B53DC, *(void *)(v0 + 224), 0);
}

uint64_t sub_1001B53DC()
{
  uint64_t v1 = v0[59];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[39];
  sub_10001DAB4(v0[32], &qword_101639E88);
  sub_10001DAB4(v4, &qword_10163BA20);
  sub_10001DAB4(v3, (uint64_t *)&unk_101653D50);
  sub_1001BD798(v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001B55A8(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 192) = a2;
  *(void *)(v4 + 200) = v3;
  *(unsigned char *)(v4 + 420) = a3;
  *(void *)(v4 + 184) = a1;
  sub_10000588C(&qword_101639E88);
  *(void *)(v4 + 208) = swift_task_alloc();
  *(void *)(v4 + 216) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v4 + 224) = v5;
  *(void *)(v4 + 232) = *(void *)(v5 - 8);
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = swift_task_alloc();
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  return _swift_task_switch(sub_1001B56D8, v3, 0);
}

uint64_t sub_1001B56D8()
{
  uint64_t v17 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[33];
  uint64_t v3 = type metadata accessor for Logger();
  v0[34] = sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_1001BD7F8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[33];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[21] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[22] = sub_1008FA0F0(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001BD798(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Data update on share request decline. Delete %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001BD798(v0[33], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v11 = v0[27];
  uint64_t v12 = v0[23];
  *(void *)(swift_task_alloc() + 16) = v12;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1001BD944, v11);
  uint64_t v13 = v0[25];
  swift_task_dealloc();
  uint64_t v14 = *(void *)(v13 + 112);
  v0[35] = v14;
  return _swift_task_switch(sub_1001B5BD8, v14, 0);
}

uint64_t sub_1001B5BD8()
{
  *(void *)(v0 + 288) = *(void *)(*(void *)(v0 + 280) + 128);
  return _swift_task_switch(sub_1001B5C00, 0, 0);
}

uint64_t sub_1001B5C00()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[27];
  uint64_t v3 = swift_task_alloc();
  v0[37] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B5CF8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001B5CF8()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B5F8C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001B5E14;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B5E14()
{
  return _swift_task_switch(sub_1001B5E30, *(void *)(v0 + 200), 0);
}

uint64_t sub_1001B5E30()
{
  char v1 = *(unsigned char *)(v0 + 420);
  sub_10001DAB4(*(void *)(v0 + 216), &qword_101639E88);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v5 = *(int *)(*(void *)(v0 + 224) + 24);
    *(_DWORD *)(v0 + 416) = v5;
    uint64_t v6 = v4 + v5;
    Swift::Int v7 = sub_100DF2D10((uint64_t)&off_1015A0698);
    *(void *)(v0 + 320) = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001B623C;
    return sub_100E59F38(v6, v7);
  }
}

uint64_t sub_1001B5F8C()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B5FF8, v1, 0);
}

uint64_t sub_1001B5FF8()
{
  unint64_t v10 = v0;
  sub_10001DAB4(v0[27], &qword_101639E88);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[14] = sub_1008FA0F0(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on share request decline, cloud data update error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_100074FA8();
  swift_allocError();
  unsigned char *v6 = 1;
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::Int v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1001B623C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001B6370, v2, 0);
}

uint64_t sub_1001B6370()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[42];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(v0[29] + 80);
    sub_1001BD7F8(v1 + ((v3 + 32) & ~v3), v0[32], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v2 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001BD7F8(v0[23], v0[31], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRetain();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      BOOL v8 = os_log_type_enabled(v6, v7);
      uint64_t v9 = v0[31];
      if (v8)
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 141558531;
        v0[18] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v10 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[19] = sub_1008FA0F0(v11, v12, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001BD798(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v10 + 22) = 2048;
        swift_bridgeObjectRelease();
        v0[20] = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Multiple UT owner circles found for beacon: %{private,mask.hash}s,\ncount: %ld.", (uint8_t *)v10, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1001BD798(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v13 = v0[24];
    uint64_t v14 = v0[25] + 120;
    uint64_t v15 = v0[32] + *(int *)(v0[28] + 20);
    v0[5] = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
    v0[6] = sub_1001BD6A4(&qword_10163D788, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    v0[7] = sub_1001BD6A4(&qword_10163D790, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    uint64_t v16 = sub_10001D958(v0 + 2);
    uint64_t v17 = type metadata accessor for UUID();
    v0[43] = v17;
    uint64_t v18 = *(void *)(v17 - 8);
    os_log_type_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16);
    v0[44] = v19;
    v0[45] = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v16, v15, v17);
    uint64_t v20 = v13 + *(int *)(type metadata accessor for OwnerPeerTrust() + 28);
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670AA8 + dword_101670AA8);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[46] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1001B6828;
    return v22(v14, (uint64_t)(v0 + 2), 4, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001B6828()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 200);
    uint64_t v4 = sub_1001B6A10;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 200);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1001B6950;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001B6950()
{
  sub_1001BD798(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B6A10()
{
  uint64_t v19 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v4, v5, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on share request decline, message sending error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 344);
  BOOL v8 = *(char **)(v0 + 240);
  uint64_t v9 = *(int **)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = v11 + *(int *)(v0 + 416);
  v6(&v8[v9[5]], v11 + v9[5], v7);
  v6(&v8[v9[6]], v12, v7);
  char v13 = *(unsigned char *)(v11 + v9[7]);
  uint64_t v14 = *(void *)(v11 + v9[8]);
  char v15 = *(unsigned char *)(v11 + v9[9]);
  *(_OWORD *)BOOL v8 = xmmword_101348180;
  v8[v9[7]] = v13;
  *(void *)&v8[v9[8]] = v14;
  v8[v9[9]] = v15;
  *(void *)(swift_task_alloc() + 16) = v8;
  swift_bridgeObjectRetain();
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1001BD918, v10);
  uint64_t v16 = *(void *)(v0 + 280);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B6D78, v16, 0);
}

uint64_t sub_1001B6D78()
{
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 280) + 128);
  return _swift_task_switch(sub_1001B6DA0, 0, 0);
}

uint64_t sub_1001B6DA0()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[26];
  uint64_t v3 = swift_task_alloc();
  v0[49] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B6E98;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001B6E98()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B70FC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001B6FB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B6FB4()
{
  return _swift_task_switch(sub_1001B6FD0, *(void *)(v0 + 200), 0);
}

uint64_t sub_1001B6FD0()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[26];
  sub_100074FA8();
  swift_allocError();
  unsigned char *v4 = 3;
  swift_willThrow();
  swift_errorRelease();
  sub_10001DAB4(v3, &qword_101639E88);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1001BD798(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001B70FC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B7168, v1, 0);
}

uint64_t sub_1001B7168()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[26];
  swift_errorRelease();
  sub_10001DAB4(v3, &qword_101639E88);
  sub_1001BD798(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1001BD798(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001B725C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = sub_10000588C((uint64_t *)&unk_10163BA80);
  v2[10] = swift_task_alloc();
  v2[11] = sub_10000588C(&qword_101639E68);
  v2[12] = swift_task_alloc();
  type metadata accessor for OwnerSharingCircle();
  v2[13] = swift_task_alloc();
  type metadata accessor for OwnerPeerTrust();
  v2[14] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = *(void *)(v5 + 64);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_1001B7490, v1, 0);
}

uint64_t sub_1001B7490()
{
  uint64_t v19 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[25] = v6;
  v0[26] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[24];
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[21];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Force decline %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[24], v0[20]);
  }

  uint64_t v16 = *(void *)(v0[8] + 112);
  v0[27] = v16;
  return _swift_task_switch(sub_1001B772C, v16, 0);
}

uint64_t sub_1001B772C()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 216) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001B77A0, 0, 0);
}

uint64_t sub_1001B77A0()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  void *v4 = v0;
  v4[1] = sub_1001B78B8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_1001B78B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 248) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_1001B7A28, v2, 0);
}

uint64_t sub_1001B7A28()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[17];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001BD7F8(v4, v0[18], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1001BD798(v0[18], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[15];
    swift_bridgeObjectRelease();
    sub_1001BD730(v7, v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v6, 1, v9);
  swift_bridgeObjectRelease();
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  uint64_t v13 = v0[15];
  if (v12 == 1)
  {
    uint64_t v14 = v0[27];
    sub_10001DAB4(v13, (uint64_t *)&unk_10163B7C0);
    return _swift_task_switch(sub_1001B7C74, v14, 0);
  }
  else
  {
    sub_1001BD730(v13, v0[19], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unint64_t v15 = (void *)swift_task_alloc();
    v0[32] = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1001B0CE4;
    uint64_t v16 = v0[19];
    return sub_1001B1920(v16, 0, 1);
  }
}

uint64_t sub_1001B7C74()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[7];
  v0[34] = *(void *)(v1 + 136);
  v2(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[35] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_1001B7D5C, 0, 0);
}

uint64_t sub_1001B7D5C()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD670;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B7E60;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100073108, v3, v6);
}

uint64_t sub_1001B7E60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B7FB0, v1, 0);
}

uint64_t sub_1001B7FB0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = sub_10000588C(&qword_10163BA90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163BA80);
    type metadata accessor for SPBeaconSharingError(0);
    v0[4] = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1001BD6A4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v6 = v0[13];
    uint64_t v5 = v0[14];
    uint64_t v8 = v0[11];
    uint64_t v7 = v0[12];
    uint64_t v9 = v1 + *(int *)(v2 + 48);
    uint64_t v10 = v7 + *(int *)(v8 + 48);
    sub_1001BD730(v1, v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_1001BD730(v9, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = v7 + *(int *)(v8 + 48);
    sub_1001BD730(v7, v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_1001BD730(v11, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int v12 = (void *)swift_task_alloc();
    v0[38] = v12;
    *int v12 = v0;
    v12[1] = sub_1001B826C;
    uint64_t v14 = v0[13];
    uint64_t v13 = v0[14];
    return sub_1001B837C(v14, v13);
  }
}

uint64_t sub_1001B826C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B1620, v1, 0);
}

uint64_t sub_1001B837C(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  sub_10000588C(&qword_101639E88);
  v3[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_1001B848C, v2, 0);
}

uint64_t sub_1001B848C()
{
  uint64_t v17 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[26];
  uint64_t v3 = type metadata accessor for Logger();
  v0[27] = sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_1001BD7F8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[26];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[17] = sub_1008FA0F0(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001BD798(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Data update on share request force decline. Delete %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001BD798(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v11 = v0[21];
  uint64_t v12 = v0[18];
  *(void *)(swift_task_alloc() + 16) = v12;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1001BD860, v11);
  uint64_t v13 = v0[20];
  swift_task_dealloc();
  uint64_t v14 = *(void *)(v13 + 112);
  v0[28] = v14;
  return _swift_task_switch(sub_1001B8994, v14, 0);
}

uint64_t sub_1001B8994()
{
  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 224) + 128);
  return _swift_task_switch(sub_1001B89BC, 0, 0);
}

uint64_t sub_1001B89BC()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[21];
  uint64_t v3 = swift_task_alloc();
  v0[30] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  void *v4 = v0;
  v4[1] = sub_1001B8AB4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1001B8AB4()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B8CC4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001B8BD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B8BD0()
{
  return _swift_task_switch(sub_1001B8BEC, *(void *)(v0 + 160), 0);
}

uint64_t sub_1001B8BEC()
{
  sub_10001DAB4(v0[21], &qword_101639E88);
  uint64_t v1 = v0[18] + *(int *)(v0[22] + 24);
  Swift::Int v2 = sub_100DF2D10((uint64_t)&off_1015A06C0);
  v0[33] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  void *v3 = v0;
  v3[1] = sub_1001B8F80;
  return sub_100E59F38(v1, v2);
}

uint64_t sub_1001B8CC4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B8D30, v1, 0);
}

uint64_t sub_1001B8D30()
{
  uint64_t v11 = v0;
  sub_10001DAB4(v0[21], &qword_101639E88);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[15] = sub_1008FA0F0(v4, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Can't apply cloud changes %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[18] + *(int *)(v0[22] + 24);
  Swift::Int v7 = sub_100DF2D10((uint64_t)&off_1015A06C0);
  v0[33] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[34] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001B8F80;
  return sub_100E59F38(v6, v7);
}

uint64_t sub_1001B8F80(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001B90B4, v2, 0);
}

uint64_t sub_1001B90B4()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[35];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(v0[23] + 80);
    sub_1001BD7F8(v1 + ((v3 + 32) & ~v3), v0[25], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v2 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001BD7F8(v0[18], v0[24], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRetain();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      BOOL v8 = os_log_type_enabled(v6, v7);
      uint64_t v9 = v0[24];
      if (v8)
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 141558531;
        v0[14] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v10 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[11] = sub_1008FA0F0(v11, v12, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001BD798(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v10 + 22) = 2048;
        swift_bridgeObjectRelease();
        v0[12] = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Multiple UT owner circles found for beacon: %{private,mask.hash}s,\ncount: %ld.", (uint8_t *)v10, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1001BD798(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[20] + 120;
    uint64_t v15 = v0[25] + *(int *)(v0[22] + 20);
    v0[5] = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
    v0[6] = sub_1001BD6A4(&qword_10163D788, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    v0[7] = sub_1001BD6A4(&qword_10163D790, (void (*)(uint64_t))type metadata accessor for CircleTrustDeclineEnvelopeV1);
    uint64_t v16 = sub_10001D958(v0 + 2);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v15, v17);
    uint64_t v18 = v13 + *(int *)(type metadata accessor for OwnerPeerTrust() + 28);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670AA8 + dword_101670AA8);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[36] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1001B9548;
    return v20(v14, (uint64_t)(v0 + 2), 4, v18);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001B9548()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    swift_errorRelease();
    uint64_t v4 = sub_1001B971C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1001B9678;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1001B9678()
{
  sub_1001BD798(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B971C()
{
  sub_1001BD798(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B97CC()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[17] = v4;
  void *v4 = v1;
  v4[1] = sub_1001B99AC;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_1001BA9F4, 0, &type metadata for Double);
}

uint64_t sub_1001B99AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B9ABC, v1, 0);
}

uint64_t sub_1001B9ABC()
{
  uint64_t v1 = v0[5];
  v0[18] = v0[2];
  uint64_t v2 = *(void *)(v1 + 112);
  v0[19] = v2;
  return _swift_task_switch(sub_1001B9AE8, v2, 0);
}

uint64_t sub_1001B9AE8()
{
  *(void *)(v0 + 160) = *(void *)(*(void *)(v0 + 152) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001B9B5C, 0, 0);
}

uint64_t sub_1001B9B5C()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  void *v4 = v0;
  v4[1] = sub_1001B9C74;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_1001B9C74()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 184) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_1001B9DE4, v2, 0);
}

uint64_t sub_1001B9DE4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
LABEL_22:
    *(void *)(v0 + 192) = v2;
    swift_bridgeObjectRelease();
    if (qword_101636888 != -1) {
      goto LABEL_34;
    }
    goto LABEL_23;
  }
  unint64_t v4 = 0;
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  unint64_t v52 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  os_log_type_t v49 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v2 = 1;
  uint64_t v53 = *(void *)(v0 + 184);
  uint64_t v54 = v5;
  while (v4 < *(void *)(v1 + 16))
  {
    uint64_t v8 = *(void *)(v0 + 128);
    unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v10 = *(void *)(v6 + 72);
    sub_1001BD7F8(*(void *)(v0 + 184) + v9 + v10 * v4, v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unsigned int v11 = *(unsigned __int8 *)(v8 + *(int *)(v5 + 40));
    BOOL v12 = v11 > 4;
    int v13 = (1 << v11) & 0x16;
    if (v12 || v13 == 0)
    {
      uint64_t v15 = v3;
      uint64_t v16 = *(void *)(v0 + 128);
      Class v18 = sub_101155AC4(v16);
      id v19 = [(objc_class *)v18 creationDate];
      if (v19)
      {
        uint64_t v20 = v19;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = 1;
      }
      uint64_t v23 = *(void *)(v0 + 72);
      uint64_t v22 = *(void *)(v0 + 80);
      uint64_t v24 = *(void *)(v0 + 48);
      (*v52)(v23, v21, 1, v24);
      sub_10001D608(v23, v22, (uint64_t *)&unk_10163AC90);
      if ((*v51)(v22, 1, v24))
      {
        sub_10001DAB4(*(void *)(v0 + 80), (uint64_t *)&unk_10163AC90);

        uint64_t v3 = v15;
        uint64_t v1 = v53;
        uint64_t v5 = v54;
        uint64_t v2 = 1;
      }
      else
      {
        double v25 = *(double *)(v0 + 144);
        uint64_t v26 = *(void *)(v0 + 80);
        uint64_t v27 = *(void *)(v0 + 64);
        uint64_t v28 = *(void *)(v0 + 48);
        (*v49)(v27, v26, v28);
        sub_10001DAB4(v26, (uint64_t *)&unk_10163AC90);
        Date.timeIntervalSinceNow.getter();
        double v30 = v29;
        (*v48)(v27, v28);

        uint64_t v3 = v15;
        uint64_t v1 = v53;
        uint64_t v5 = v54;
        uint64_t v2 = 1;
        if (v25 <= fabs(v30))
        {
          sub_1001BD730(*(void *)(v0 + 128), *(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          unint64_t v31 = v50;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B71E0(0, v50[2] + 1, 1);
            unint64_t v31 = _swiftEmptyArrayStorage;
          }
          unint64_t v33 = v31[2];
          unint64_t v32 = v31[3];
          if (v33 >= v32 >> 1)
          {
            sub_1000B71E0(v32 > 1, v33 + 1, 1);
            unint64_t v31 = _swiftEmptyArrayStorage;
          }
          uint64_t v34 = *(void *)(v0 + 120);
          v31[2] = v33 + 1;
          uint64_t v50 = v31;
          sub_1001BD730(v34, (uint64_t)v31 + v9 + v33 * v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          uint64_t v5 = v54;
          uint64_t v2 = 1;
          goto LABEL_9;
        }
      }
    }
    sub_1001BD798(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_9:
    if (v3 == ++v4)
    {
      uint64_t v2 = (uint64_t)v50;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_23:
  uint64_t v35 = type metadata accessor for Logger();
  *(void *)(v0 + 200) = sub_100010324(v35, (uint64_t)qword_10170D788);
  swift_retain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134217984;
    *(void *)(v0 + 32) = *(void *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Found %ld of expired member circles.", v38, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v39 = *(void *)(v2 + 16);
  *(void *)(v0 + 208) = v39;
  if (v39)
  {
    uint64_t v41 = *(void *)(v0 + 88);
    uint64_t v40 = *(void *)(v0 + 96);
    int v42 = *(_DWORD *)(v40 + 80);
    *(_DWORD *)(v0 + 248) = v42;
    *(void *)(v0 + 216) = *(void *)(v40 + 72);
    *(void *)(v0 + 224) = 0;
    uint64_t v43 = *(void *)(v0 + 112);
    sub_1001BD7F8(*(void *)(v0 + 192) + ((v42 + 32) & ~(unint64_t)v42), v43, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v44 = v43 + *(int *)(v41 + 28);
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_1001BA3D0;
    return sub_1001B02C8(v44, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
}

uint64_t sub_1001BA3D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    unint64_t v4 = sub_1001BA6A4;
  }
  else {
    unint64_t v4 = sub_1001BA4FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001BA4FC()
{
  sub_1001BD798(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v1 = *(void *)(v0 + 224) + 1;
  if (v1 == *(void *)(v0 + 208))
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 224) = v1;
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 88);
    sub_1001BD7F8(*(void *)(v0 + 192)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(void *)(v0 + 216) * v1, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = v4 + *(int *)(v5 + 28);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v7;
    void *v7 = v0;
    v7[1] = sub_1001BA3D0;
    return sub_1001B02C8(v6, 0);
  }
}

uint64_t sub_1001BA6A4()
{
  uint64_t v17 = v0;
  sub_1001BD7F8(*(void *)(v0 + 112), *(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  if (v3)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for UUID();
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, &v16);
    swift_bridgeObjectRelease();
    sub_1001BD798(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to decline expired share with identifier: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    sub_1001BD798(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  sub_1001BD798(v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = *(void *)(v0 + 224) + 1;
  if (v9 == *(void *)(v0 + 208))
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    *(void *)(v0 + 224) = v9;
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 88);
    sub_1001BD7F8(*(void *)(v0 + 192)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(void *)(v0 + 216) * v9, v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v14 = v12 + *(int *)(v13 + 28);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1001BA3D0;
    return sub_1001B02C8(v14, 0);
  }
}

uint64_t sub_1001BA9F4@<X0>(void *a1@<X8>)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC2D0(v5);
  uint64_t v3 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1001BAAAC()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1001BAB7C, v0, 0);
}

uint64_t sub_1001BAB7C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 80) = v1;
  return _swift_task_switch(sub_1001BABA0, v1, 0);
}

uint64_t sub_1001BABA0()
{
  *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 80) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001BAC14, 0, 0);
}

uint64_t sub_1001BAC14()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  v0[14] = v5;
  void *v4 = v0;
  v4[1] = sub_1001BAD30;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_1001BAD30()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = v1[2];
  v1[3] = v3;
  v1[15] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v1[16] = v4;
  unint64_t v5 = sub_1001BC030();
  void *v4 = v2;
  v4[1] = sub_1001BAEE0;
  uint64_t v6 = v1[14];
  return Sequence.asyncFilter(_:)(&unk_10163D760, 0, v6, v5);
}

uint64_t sub_1001BAEE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001BB014, v2, 0);
}

uint64_t sub_1001BB014()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 144) = sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 136);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 32) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found %ld of expired tentatively revoked member circles.", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v0 + 152) = v8;
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 56);
    int v11 = *(_DWORD *)(v9 + 80);
    *(_DWORD *)(v0 + 192) = v11;
    *(void *)(v0 + 160) = *(void *)(v9 + 72);
    *(void *)(v0 + 168) = 0;
    uint64_t v12 = *(void *)(v0 + 72);
    sub_1001BD7F8(v7 + ((v11 + 32) & ~(unint64_t)v11), v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v13 = v12 + *(int *)(v10 + 28);
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1001BB270;
    return sub_1001B02C8(v13, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1001BB270()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    BOOL v4 = sub_1001BB4F8;
  }
  else {
    BOOL v4 = sub_1001BB39C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001BB39C()
{
  sub_1001BD798(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v1 = *(void *)(v0 + 168) + 1;
  if (v1 == *(void *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 168) = v1;
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 48);
    sub_1001BD7F8(*(void *)(v0 + 136)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(void *)(v0 + 160) * v1, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = v4 + *(int *)(v5 + 28);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v7;
    void *v7 = v0;
    v7[1] = sub_1001BB270;
    return sub_1001B02C8(v6, 0);
  }
}

uint64_t sub_1001BB4F8()
{
  uint64_t v17 = v0;
  sub_1001BD7F8(*(void *)(v0 + 72), *(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  if (v3)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for UUID();
    sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, &v16);
    swift_bridgeObjectRelease();
    sub_1001BD798(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to decline expired tentatively revoked share with identifier: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    sub_1001BD798(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  sub_1001BD798(v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = *(void *)(v0 + 168) + 1;
  if (v9 == *(void *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    *(void *)(v0 + 168) = v9;
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 48);
    sub_1001BD7F8(*(void *)(v0 + 136)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(void *)(v0 + 160) * v9, v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v14 = v12 + *(int *)(v13 + 28);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1001BB270;
    return sub_1001B02C8(v14, 0);
  }
}

uint64_t sub_1001BB814(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1001BB834, 0, 0);
}

uint64_t sub_1001BB834()
{
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E330;
  v0[3] = qword_10170E330;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10163D770 + dword_10163D770);
  swift_retain();
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = sub_1001BB92C;
  uint64_t v3 = v0[2];
  return v5(v3, v1);
}

uint64_t sub_1001BB92C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1001BBA48()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 160);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareDeclineUseCase()
{
  return self;
}

void sub_1001BBAB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v55 = a2;
  uint64_t v6 = type metadata accessor for BeaconNamingRecord();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = (int *)sub_10000588C(&qword_10163BA20);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v58 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100EE6764(a3);
  if (!v3)
  {
    uint64_t v44 = v16;
    uint64_t v51 = v8;
    uint64_t v52 = a1;
    uint64_t v17 = v8[12];
    uint64_t v48 = &v12[v17];
    uint64_t v49 = 0;
    uint64_t v18 = v8[16];
    uint64_t v19 = (uint64_t)&v12[v18];
    uint64_t v20 = v8[20];
    uint64_t v21 = v8[24];
    uint64_t v22 = (uint64_t)a3 + v17;
    uint64_t v23 = (uint64_t)a3 + v18;
    sub_1001BD7F8((uint64_t)a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v45 = v22;
    uint64_t v24 = v22;
    uint64_t v25 = (uint64_t)v48;
    sub_10001D074(v24, (uint64_t)v48, (uint64_t *)&unk_101653D50);
    uint64_t v46 = v23;
    uint64_t v50 = v19;
    sub_10001D074(v23, v19, &qword_10163B9E0);
    uint64_t v26 = *(uint64_t *)((char *)a3 + v20);
    uint64_t v53 = v20;
    *(void *)&v12[v20] = v26;
    uint64_t v27 = *(uint64_t *)((char *)a3 + v21);
    uint64_t v47 = v21;
    *(void *)&v12[v21] = v27;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v25, 1, v13) == 1)
    {
      sub_10001DAB4(v50, &qword_10163B9E0);
      sub_10001DAB4(v25, (uint64_t *)&unk_101653D50);
      sub_1001BD798((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v28 = v51;
      uint64_t v29 = v49;
    }
    else
    {
      double v30 = v44;
      sub_1001BD730(v25, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v50, &qword_10163B9E0);
      sub_1001BD798((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v31 = v49;
      sub_100EE6384(v30);
      uint64_t v29 = v31;
      sub_1001BD798((uint64_t)v30, type metadata accessor for SharedBeaconRecord);
      uint64_t v28 = v51;
      if (v31) {
        return;
      }
    }
    uint64_t v32 = v58;
    uint64_t v33 = v58 + v28[12];
    uint64_t v34 = v58 + v28[16];
    uint64_t v35 = v28[20];
    uint64_t v36 = v28[24];
    sub_1001BD7F8((uint64_t)a3, v58, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001D074(v45, v33, (uint64_t *)&unk_101653D50);
    sub_10001D074(v46, v34, &qword_10163B9E0);
    *(void *)(v32 + v35) = *(uint64_t *)((char *)a3 + v53);
    *(void *)(v32 + v36) = *(uint64_t *)((char *)a3 + v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v34, 1, v57) == 1)
    {
      sub_10001DAB4(v34, &qword_10163B9E0);
      sub_10001DAB4(v33, (uint64_t *)&unk_101653D50);
      sub_1001BD798(v32, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
    else
    {
      uint64_t v37 = v34;
      uint64_t v38 = v54;
      sub_1001BD730(v37, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      sub_10001DAB4(v33, (uint64_t *)&unk_101653D50);
      sub_1001BD798(v32, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_100EE5FE8(v38);
      sub_1001BD798((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      if (v29) {
        return;
      }
    }
    sub_10012B8B4(*(uint64_t *)((char *)a3 + v53));
    if (!v29)
    {
      uint64_t v39 = *(uint64_t *)((char *)a3 + v47);
      uint64_t v40 = *(void *)(v39 + 16);
      if (v40)
      {
        uint64_t v41 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
        int v42 = (uint64_t *)(v39
                        + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80)));
        uint64_t v43 = *(void *)(v41 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_100EE5448(v42);
          int v42 = (uint64_t *)((char *)v42 + v43);
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
      }
    }
  }
}

unint64_t sub_1001BC030()
{
  unint64_t result = qword_10163D768;
  if (!qword_10163D768)
  {
    sub_10000592C((uint64_t *)&unk_101653DF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D768);
  }
  return result;
}

uint64_t sub_1001BC08C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  v2[23] = a1;
  v2[24] = type metadata accessor for MemberSharingCircle();
  v2[25] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[27] = v5;
  v2[28] = *(void *)(v5 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[33] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[34] = v7;
  v2[35] = *(void *)(v7 + 64);
  v2[36] = swift_task_alloc();
  v2[37] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[38] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  v2[39] = v8;
  v2[40] = *(void *)(v8 - 8);
  v2[41] = swift_task_alloc();
  v2[5] = v4;
  v2[6] = &off_1015B2900;
  v2[2] = a2;
  swift_retain();
  return _swift_task_switch(sub_1001BC318, 0, 0);
}

uint64_t sub_1001BC318()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(int *)(*(void *)(v0 + 192) + 40);
  *(_DWORD *)(v0 + 384) = v2;
  if (*(unsigned char *)(v1 + v2) == 4)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 336) = v4;
      void *v4 = v0;
      v4[1] = sub_1001BC530;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5(0);
  }
  return result;
}

uint64_t sub_1001BC530(uint64_t a1)
{
  *(void *)(*(void *)v1 + 344) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BC630, 0, 0);
}

uint64_t sub_1001BC630()
{
  uint64_t v49 = v0;
  uint64_t v1 = v0 + 56;
  if (*(void *)(v0 + 344))
  {
    uint64_t v2 = *(void *)(v0 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 388) = *(_DWORD *)(v2 + 24);
    uint64_t v3 = *(void *)(v0 + 344);
    return _swift_task_switch(sub_1001BCC88, v3, 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v4 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v4 + *(int *)(v0 + 384)) == 4)
  {
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 192);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_1001A2124(v4 + *(int *)(v8 + 24), v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 208), (uint64_t *)&unk_10163AC90);
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 248);
      uint64_t v10 = *(void *)(v0 + 216);
      uint64_t v11 = *(void *)(v0 + 224);
      (*(void (**)(void, void, uint64_t))(v11 + 32))(*(void *)(v0 + 256), *(void *)(v0 + 208), v10);
      static Date.trustedNow.getter(v9);
      Date.timeIntervalSince(_:)();
      double v13 = v12;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v14(v9, v10);
      if (qword_101637410 != -1) {
        swift_once();
      }
      if (*(double *)&qword_101669E48 <= v13)
      {
        uint64_t v16 = *(void *)(v0 + 240);
        uint64_t v17 = *(uint64_t **)(v0 + 184);
        sub_100B23648(v17, v16);
        uint64_t v19 = *(void *)(v0 + 240);
        uint64_t v20 = *(void *)(v0 + 216);
        uint64_t v21 = static Date.> infix(_:_:)();
        v14(v19, v20);
        if (v21)
        {
          if (qword_101636888 != -1) {
            swift_once();
          }
          uint64_t v46 = *(void *)(v0 + 256);
          uint64_t v23 = *(void *)(v0 + 224);
          uint64_t v22 = *(void *)(v0 + 232);
          uint64_t v24 = *(void *)(v0 + 216);
          uint64_t v25 = *(void *)(v0 + 200);
          uint64_t v26 = *(void *)(v0 + 184);
          uint64_t v27 = type metadata accessor for Logger();
          sub_100010324(v27, (uint64_t)qword_10170D788);
          sub_1001BD7F8(v26, v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v46, v24);
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v47 = *(void *)(v0 + 256);
            uint64_t v43 = *(void *)(v0 + 232);
            uint64_t v44 = *(void *)(v0 + 216);
            uint64_t v30 = *(void *)(v0 + 200);
            uint64_t v31 = swift_slowAlloc();
            v48[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 141558531;
            *(void *)(v0 + 168) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v31 + 12) = 2081;
            sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 160) = sub_1008FA0F0(v32, v33, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001BD798(v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            *(_WORD *)(v31 + 22) = 2082;
            sub_1001BD6A4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 176) = sub_1008FA0F0(v34, v35, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v14(v43, v44);
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v31, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v36 = v47;
            uint64_t v37 = v44;
          }
          else
          {
            uint64_t v38 = *(void *)(v0 + 256);
            uint64_t v39 = *(void *)(v0 + 232);
            uint64_t v40 = *(void *)(v0 + 216);
            uint64_t v41 = *(void *)(v0 + 200);

            v14(v39, v40);
            sub_1001BD798(v41, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            uint64_t v36 = v38;
            uint64_t v37 = v40;
          }
          v14(v36, v37);
          unsigned int v45 = 1;
          goto LABEL_13;
        }
      }
      v14(*(void *)(v0 + 256), *(void *)(v0 + 216));
    }
  }
  unsigned int v45 = 0;
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15(v45);
}

uint64_t sub_1001BCC88()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 184) + *(int *)(v0 + 388);
  *(void *)(v0 + 352) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 360) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1001BCD84, 0, 0);
}

uint64_t sub_1001BCD84()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v2;
  v3[3] = sub_1001BD654;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  void *v4 = v0;
  v4[1] = sub_1001BCE88;
  uint64_t v6 = v0[37];
  uint64_t v5 = v0[38];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_1001BCE88()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BCFBC, 0, 0);
}

uint64_t sub_1001BCFBC()
{
  uint64_t v49 = v0;
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 304), (uint64_t *)&unk_101653D50);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 328);
    uint64_t v5 = *(void *)(v0 + 312);
    sub_1001BD730(*(void *)(v0 + 304), v4, type metadata accessor for SharedBeaconRecord);
    LODWORD(v5) = *(unsigned __int8 *)(v4 + *(int *)(v5 + 64));
    sub_1001BD798(v4, type metadata accessor for SharedBeaconRecord);
    if (v5 == 4) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v6 + *(int *)(v0 + 384)) == 4)
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_1001A2124(v6 + *(int *)(v10 + 24), v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 208), (uint64_t *)&unk_10163AC90);
      goto LABEL_12;
    }
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v13 = *(void *)(v0 + 224);
    (*(void (**)(void, void, uint64_t))(v13 + 32))(*(void *)(v0 + 256), *(void *)(v0 + 208), v12);
    static Date.trustedNow.getter(v11);
    Date.timeIntervalSince(_:)();
    double v15 = v14;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v11, v12);
    if (qword_101637410 != -1) {
      swift_once();
    }
    if (*(double *)&qword_101669E48 > v15) {
      goto LABEL_11;
    }
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v20 = *(uint64_t **)(v0 + 184);
    sub_100B23648(v20, v19);
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 216);
    uint64_t v24 = static Date.> infix(_:_:)();
    v16(v22, v23);
    if ((v24 & 1) == 0)
    {
LABEL_11:
      v16(*(void *)(v0 + 256), *(void *)(v0 + 216));
      goto LABEL_12;
    }
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v46 = *(void *)(v0 + 256);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 216);
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170D788);
    sub_1001BD7F8(v29, v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v46, v27);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v47 = *(void *)(v0 + 256);
      uint64_t v43 = *(void *)(v0 + 232);
      uint64_t v44 = *(void *)(v0 + 216);
      uint64_t v33 = *(void *)(v0 + 200);
      uint64_t v34 = swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 141558531;
      *(void *)(v0 + 168) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2081;
      sub_1001BD6A4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v35, v36, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001BD798(v33, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 22) = 2082;
      sub_1001BD6A4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 176) = sub_1008FA0F0(v37, v38, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v16(v47, v44);
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 256);
      uint64_t v40 = *(void *)(v0 + 232);
      uint64_t v41 = *(void *)(v0 + 216);
      uint64_t v42 = *(void *)(v0 + 200);

      v16(v40, v41);
      sub_1001BD798(v42, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v16(v39, v41);
    }
LABEL_4:
    unsigned int v45 = 1;
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v45 = 0;
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17(v45);
}

uint64_t sub_1001BD654()
{
  return sub_1001BD890((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_1001BD670()
{
  return sub_1001BD890((uint64_t (*)(uint64_t, uint64_t))sub_100E5DC5C);
}

uint64_t sub_1001BD68C()
{
  return sub_1001BD890((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t sub_1001BD6A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001BD6F0()
{
  return sub_1001BD890((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

void sub_1001BD70C(uint64_t a1, uint64_t a2)
{
  sub_1001BBAB4(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1001BD728()
{
  return sub_100E5E5D0();
}

uint64_t sub_1001BD730(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001BD798(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001BD7F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1001BD860()
{
  sub_100EE5C08(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1001BD890(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

void sub_1001BD918()
{
  sub_100EE1FB0(*(uint64_t **)(v0 + 16));
}

void sub_1001BD944()
{
}

uint64_t sub_1001BD960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BD974);
}

uint64_t sub_1001BD974(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001BDA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BDA38);
}

void *sub_1001BDA38(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryUnpairEndpoint()
{
  uint64_t result = qword_10163D7F8;
  if (!qword_10163D7F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001BDB2C()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10170EE68;
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v0 stringForKey:v3];

    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_1001BDCEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D818);
  sub_100010324(v0, (uint64_t)qword_10170D818);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001BDD70(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v9 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v9;
  return v1;
}

uint64_t sub_1001BDFB8()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1001BE078(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  double v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v15 - 8);
  uint64_t v24 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(a2 + 24);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a1;
  v18[7] = a6;
  aBlock[4] = sub_1001BF090;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B2E10;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v20 = a3;
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v24);
  return swift_release();
}

uint64_t sub_1001BE35C(uint64_t a1, void *a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v62 = a5;
  uint64_t v9 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v66 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v65 = *(void *)(v63 - 8);
  uint64_t v13 = __chkstk_darwin(v63);
  uint64_t v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v52 - v17;
  __chkstk_darwin(v16);
  uint64_t v64 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)v52 - v19);
  uint64_t v68 = *(void *)(a1 + 16);
  v70[0] = sub_100B6CA70();
  swift_bridgeObjectRetain();
  sub_1001BF150(v70);
  swift_bridgeObjectRelease();
  unint64_t v20 = v70[0][2];
  if (v20 >= 5)
  {
    uint64_t v61 = v70[0];
    unint64_t v56 = a4;
    uint64_t v21 = *(unsigned __int8 *)(v65 + 80);
    if (qword_1016368E8 != -1) {
      swift_once();
    }
    uint64_t v54 = a2;
    uint64_t v57 = v15;
    uint64_t v58 = v18;
    uint64_t v59 = v11;
    uint64_t v22 = (v21 + 32) & ~v21;
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170D818);
    uint64_t v24 = v61;
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    int v27 = v26;
    BOOL v28 = os_log_type_enabled(v25, v26);
    uint64_t v55 = a3;
    if (v28)
    {
      v52[1] = (char *)v24 + v22;
      unint64_t v29 = v20;
      int v53 = v27;
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v70[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      v52[0] = v30 + 4;
      swift_retain();
      uint64_t v31 = ArraySlice.description.getter();
      unint64_t v33 = v32;
      swift_release();
      uint64_t v69 = sub_1008FA0F0(v31, v33, (uint64_t *)v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v53, "Pruning %s.", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v34 = (uint64_t)v64;
    }
    else
    {

      swift_release_n();
      uint64_t v34 = (uint64_t)v64;
      unint64_t v29 = v20;
    }
    uint64_t v35 = *(void *)(v65 + 72);
    uint64_t v64 = (uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 16);
    unint64_t v36 = (void (**)(char *, uint64_t))(v60 + 8);
    swift_retain();
    unint64_t v37 = v29 - 4;
    uint64_t v65 = v35;
    uint64_t v38 = (uint64_t)v24 + 4 * v35 + v22;
    uint64_t v40 = v66;
    uint64_t v39 = v67;
    do
    {
      sub_1001BF218(v38, v34, type metadata accessor for PairingErrorRecord);
      uint64_t v41 = *(void *)(v68 + 160);
      if (qword_1016370A0 != -1) {
        swift_once();
      }
      uint64_t v42 = sub_100010324(v39, (uint64_t)qword_10170EC98);
      uint64_t v43 = (*v64)(v40, v42, v39);
      __chkstk_darwin(v43);
      v52[-4] = v41;
      v52[-3] = v34;
      v52[-2] = v40;
      OS_dispatch_queue.sync<A>(execute:)();
      (*v36)(v40, v39);
      sub_1001BF288(v34, type metadata accessor for PairingErrorRecord);
      v38 += v65;
      --v37;
    }
    while (v37);
    swift_release_n();
    uint64_t v18 = v58;
    uint64_t v11 = v59;
    a4 = v56;
    uint64_t v15 = v57;
    a2 = v54;
    a3 = v55;
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRetain();
  sub_100D0F820(a2, a3, a4, (uint64_t)v11);
  UUID.init()();
  sub_1001BF218((uint64_t)v11, (uint64_t)&v18[*(int *)(v63 + 20)], type metadata accessor for PairingError);
  if (qword_1016368E8 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_100010324(v44, (uint64_t)qword_10170D818);
  sub_1001BF218((uint64_t)v18, (uint64_t)v15, type metadata accessor for PairingErrorRecord);
  unsigned int v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    v70[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315138;
    uint64_t v48 = sub_100D11020();
    uint64_t v69 = sub_1008FA0F0(v48, v49, (uint64_t *)v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001BF288((uint64_t)v15, type metadata accessor for PairingErrorRecord);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Saving %s.", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001BF288((uint64_t)v15, type metadata accessor for PairingErrorRecord);
  }

  uint64_t v50 = v62;
  swift_retain();
  sub_100D33C4C((uint64_t)v18, (uint64_t)sub_1001BF280, v50);
  swift_release();
  sub_1001BF288((uint64_t)v18, type metadata accessor for PairingErrorRecord);
  return sub_1001BF288((uint64_t)v11, type metadata accessor for PairingError);
}

void sub_1001BEB34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = sub_10000588C(&qword_10163D8E0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_1001BF2E8(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    if (qword_1016368E8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170D818);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = v11;
      uint64_t v26 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v25 = sub_1008FA0F0(v17, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to save PairingErrorRecord. Error %s.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_1001BF350((uint64_t)v10, (uint64_t)v7);
    if (qword_1016368E8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170D818);
    sub_1001BF218((uint64_t)v7, (uint64_t)v5, type metadata accessor for PairingErrorRecord);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = sub_100D11020();
      uint64_t v25 = sub_1008FA0F0(v23, v24, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001BF288((uint64_t)v5, type metadata accessor for PairingErrorRecord);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saved: %s.", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001BF288((uint64_t)v5, type metadata accessor for PairingErrorRecord);
    }
    sub_1001BF288((uint64_t)v7, type metadata accessor for PairingErrorRecord);
  }
}

uint64_t sub_1001BEFB8()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryPairingErrorManager()
{
  return self;
}

uint64_t sub_1001BF01C(uint64_t a1)
{
  return sub_1001BE078(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1001BF040()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001BF090()
{
  return sub_1001BE35C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001BF0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001BF0B0()
{
  return swift_release();
}

uint64_t sub_1001BF0B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001BF100(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_1001BF150(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for PairingErrorRecord(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73660(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001BF3B4(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001BF1F8@<X0>(char *a1@<X8>)
{
  return sub_100B69190(a1);
}

uint64_t sub_1001BF218(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1001BF280(uint64_t a1)
{
}

uint64_t sub_1001BF288(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001BF2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163D8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BF350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PairingErrorRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int sub_1001BF3B4(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v138 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v4 = *(void *)(v138 - 8);
  uint64_t v5 = __chkstk_darwin(v138);
  uint64_t v127 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v139 = (uint64_t)&v122 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v122 - v10;
  __chkstk_darwin(v9);
  uint64_t v135 = (uint64_t)&v122 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_136;
    }
    if (v12) {
      return sub_1001BFE44(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_144;
  }
  Swift::Int v124 = result;
  uint64_t v131 = v4;
  if (v12 < 2)
  {
    unint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v130 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unint64_t v123 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_102:
      if (v20 >= 2)
      {
        uint64_t v114 = *a1;
        do
        {
          unint64_t v115 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_131;
          }
          if (!v114) {
            goto LABEL_143;
          }
          uint64_t v116 = v18;
          uint64_t v117 = v18 + 32;
          uint64_t v118 = *(void *)&v18[16 * v115 + 32];
          uint64_t v119 = *(void *)&v18[16 * v20 + 24];
          sub_1001C00E0(v114 + *(void *)(v131 + 72) * v118, v114 + *(void *)(v131 + 72) * *(void *)&v117[16 * v20 - 16], v114 + *(void *)(v131 + 72) * v119, v130);
          if (v2) {
            break;
          }
          if (v119 < v118) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v116 = sub_100B73584((uint64_t)v116);
          }
          if (v115 >= *((void *)v116 + 2)) {
            goto LABEL_133;
          }
          unint64_t v120 = &v116[16 * v115 + 32];
          *(void *)unint64_t v120 = v118;
          *((void *)v120 + 1) = v119;
          unint64_t v121 = *((void *)v116 + 2);
          if (v20 > v121) {
            goto LABEL_134;
          }
          unint64_t v18 = v116;
          memmove(&v116[16 * v20 + 16], &v116[16 * v20 + 32], 16 * (v121 - v20));
          *((void *)v116 + 2) = v121 - 1;
          unint64_t v20 = v121 - 1;
        }
        while (v121 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v123[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v123 = (void *)v16;
    unint64_t v130 = v16 + ((v17 + 32) & ~v17);
  }
  uint64_t v19 = 0;
  unint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v129 = a1;
  while (1)
  {
    uint64_t v21 = v19;
    Swift::Int v22 = v19 + 1;
    uint64_t v128 = v19;
    if (v19 + 1 < v12)
    {
      uint64_t v23 = *a1;
      uint64_t v24 = *(void *)(v131 + 72);
      Swift::Int v132 = v22;
      uint64_t v25 = v23 + v24 * v22;
      uint64_t v26 = v24;
      uint64_t v140 = v24;
      uint64_t v27 = v23;
      uint64_t v126 = v23;
      uint64_t v28 = v135;
      sub_1001BF218(v25, v135, type metadata accessor for PairingErrorRecord);
      uint64_t v29 = v27 + v26 * v21;
      uint64_t v30 = v136;
      sub_1001BF218(v29, v136, type metadata accessor for PairingErrorRecord);
      uint64_t v133 = type metadata accessor for PairingError(0);
      uint64_t v137 = Date.compare(_:)();
      uint64_t v31 = v30;
      uint64_t v21 = v128;
      sub_1001BF288(v31, type metadata accessor for PairingErrorRecord);
      sub_1001BF288(v28, type metadata accessor for PairingErrorRecord);
      uint64_t v32 = v140;
      Swift::Int v22 = v21 + 2;
      if (v21 + 2 < v12)
      {
        Swift::Int v134 = v12;
        uint64_t v122 = v2;
        int v125 = v18;
        v132 *= v140;
        uint64_t v33 = v126;
        Swift::Int v34 = v140 * v22;
        while (1)
        {
          Swift::Int v35 = v22;
          int v36 = v137 == 1;
          uint64_t v37 = v135;
          sub_1001BF218(v33 + v34, v135, type metadata accessor for PairingErrorRecord);
          uint64_t v38 = v136;
          sub_1001BF218(v33 + v132, v136, type metadata accessor for PairingErrorRecord);
          int v39 = Date.compare(_:)() != 1;
          sub_1001BF288(v38, type metadata accessor for PairingErrorRecord);
          sub_1001BF288(v37, type metadata accessor for PairingErrorRecord);
          if (v36 == v39) {
            break;
          }
          Swift::Int v22 = v35 + 1;
          uint64_t v32 = v140;
          v33 += v140;
          if (v134 == v35 + 1)
          {
            Swift::Int v12 = v134;
            Swift::Int v22 = v134;
            unint64_t v18 = v125;
            uint64_t v2 = v122;
            uint64_t v21 = v128;
            goto LABEL_22;
          }
        }
        unint64_t v18 = v125;
        Swift::Int v22 = v35;
        uint64_t v2 = v122;
        uint64_t v21 = v128;
        Swift::Int v12 = v134;
        uint64_t v32 = v140;
      }
LABEL_22:
      if (v137 == 1)
      {
        if (v22 < v21) {
          goto LABEL_137;
        }
        if (v21 < v22)
        {
          Swift::Int v134 = v12;
          int v125 = v18;
          uint64_t v40 = 0;
          uint64_t v41 = v32 * (v22 - 1);
          Swift::Int v42 = v22 * v32;
          uint64_t v43 = v21;
          uint64_t v44 = v21 * v32;
          do
          {
            if (v43 != v22 + v40 - 1)
            {
              uint64_t v46 = v2;
              Swift::Int v47 = v22;
              uint64_t v48 = v126;
              if (!v126) {
                goto LABEL_142;
              }
              unint64_t v49 = v126 + v44;
              uint64_t v137 = v126 + v41;
              sub_1001BF350(v126 + v44, v127);
              if (v44 < v41 || v49 >= v48 + v42)
              {
                uint64_t v45 = v137;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v45 = v137;
                if (v44 != v41) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1001BF350(v127, v45);
              Swift::Int v22 = v47;
              uint64_t v2 = v46;
              uint64_t v21 = v128;
              uint64_t v32 = v140;
            }
            ++v43;
            --v40;
            v41 -= v32;
            v42 -= v32;
            v44 += v32;
          }
          while (v43 < v22 + v40);
          a1 = v129;
          unint64_t v18 = v125;
          Swift::Int v12 = v134;
        }
      }
    }
    if (v22 < v12)
    {
      if (__OFSUB__(v22, v21)) {
        goto LABEL_135;
      }
      if (v22 - v21 < v124) {
        break;
      }
    }
LABEL_54:
    if (v22 < v21) {
      goto LABEL_130;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v137 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v18 = sub_100B729CC(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v64 = *((void *)v18 + 2);
    unint64_t v63 = *((void *)v18 + 3);
    unint64_t v20 = v64 + 1;
    if (v64 >= v63 >> 1) {
      unint64_t v18 = sub_100B729CC((char *)(v63 > 1), v64 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    uint64_t v65 = v18 + 32;
    uint64_t v66 = &v18[16 * v64 + 32];
    uint64_t v67 = v137;
    *(void *)uint64_t v66 = v21;
    *((void *)v66 + 1) = v67;
    if (v64)
    {
      while (1)
      {
        unint64_t v68 = v20 - 1;
        if (v20 >= 4)
        {
          unsigned int v73 = &v65[16 * v20];
          uint64_t v74 = *((void *)v73 - 8);
          uint64_t v75 = *((void *)v73 - 7);
          BOOL v79 = __OFSUB__(v75, v74);
          uint64_t v76 = v75 - v74;
          if (v79) {
            goto LABEL_119;
          }
          uint64_t v78 = *((void *)v73 - 6);
          uint64_t v77 = *((void *)v73 - 5);
          BOOL v79 = __OFSUB__(v77, v78);
          uint64_t v71 = v77 - v78;
          char v72 = v79;
          if (v79) {
            goto LABEL_120;
          }
          unint64_t v80 = v20 - 2;
          uint64_t v81 = &v65[16 * v20 - 32];
          uint64_t v83 = *(void *)v81;
          uint64_t v82 = *((void *)v81 + 1);
          BOOL v79 = __OFSUB__(v82, v83);
          uint64_t v84 = v82 - v83;
          if (v79) {
            goto LABEL_122;
          }
          BOOL v79 = __OFADD__(v71, v84);
          uint64_t v85 = v71 + v84;
          if (v79) {
            goto LABEL_125;
          }
          if (v85 >= v76)
          {
            uint64_t v103 = &v65[16 * v68];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            BOOL v79 = __OFSUB__(v104, v105);
            uint64_t v106 = v104 - v105;
            if (v79) {
              goto LABEL_129;
            }
            BOOL v96 = v71 < v106;
            goto LABEL_91;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v97 = *((void *)v18 + 4);
            uint64_t v98 = *((void *)v18 + 5);
            BOOL v79 = __OFSUB__(v98, v97);
            uint64_t v90 = v98 - v97;
            char v91 = v79;
            goto LABEL_85;
          }
          uint64_t v70 = *((void *)v18 + 4);
          uint64_t v69 = *((void *)v18 + 5);
          BOOL v79 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          char v72 = v79;
        }
        if (v72) {
          goto LABEL_121;
        }
        unint64_t v80 = v20 - 2;
        unint64_t v86 = &v65[16 * v20 - 32];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v89 = __OFSUB__(v87, v88);
        uint64_t v90 = v87 - v88;
        char v91 = v89;
        if (v89) {
          goto LABEL_124;
        }
        unint64_t v92 = &v65[16 * v68];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v79 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v79) {
          goto LABEL_127;
        }
        if (__OFADD__(v90, v95)) {
          goto LABEL_128;
        }
        if (v90 + v95 >= v71)
        {
          BOOL v96 = v71 < v95;
LABEL_91:
          if (v96) {
            unint64_t v68 = v80;
          }
          goto LABEL_93;
        }
LABEL_85:
        if (v91) {
          goto LABEL_123;
        }
        unint64_t v99 = &v65[16 * v68];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v79 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v79) {
          goto LABEL_126;
        }
        if (v102 < v90) {
          goto LABEL_14;
        }
LABEL_93:
        unint64_t v107 = v68 - 1;
        if (v68 - 1 >= v20)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!*v129) {
          goto LABEL_141;
        }
        uint64_t v108 = v18;
        unint64_t v109 = &v65[16 * v107];
        uint64_t v110 = *(void *)v109;
        uint64_t v111 = &v65[16 * v68];
        uint64_t v112 = *((void *)v111 + 1);
        sub_1001C00E0(*v129 + *(void *)(v131 + 72) * *(void *)v109, *v129 + *(void *)(v131 + 72) * *(void *)v111, *v129 + *(void *)(v131 + 72) * v112, v130);
        if (v2) {
          goto LABEL_113;
        }
        if (v112 < v110) {
          goto LABEL_116;
        }
        if (v68 > *((void *)v108 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v109 = v110;
        *(void *)&v65[16 * v107 + 8] = v112;
        unint64_t v113 = *((void *)v108 + 2);
        if (v68 >= v113) {
          goto LABEL_118;
        }
        unint64_t v18 = v108;
        unint64_t v20 = v113 - 1;
        memmove(&v65[16 * v68], v111 + 16, 16 * (v113 - 1 - v68));
        *((void *)v108 + 2) = v113 - 1;
        if (v113 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    a1 = v129;
    Swift::Int v12 = v129[1];
    uint64_t v19 = v137;
    if (v137 >= v12) {
      goto LABEL_102;
    }
  }
  if (__OFADD__(v21, v124)) {
    goto LABEL_138;
  }
  if (v21 + v124 >= v12) {
    Swift::Int v50 = v12;
  }
  else {
    Swift::Int v50 = v21 + v124;
  }
  if (v50 >= v21)
  {
    if (v22 != v50)
    {
      int v125 = v18;
      uint64_t v126 = v50;
      uint64_t v122 = v2;
      Swift::Int v51 = *(void *)(v131 + 72);
      uint64_t v52 = v51 * (v22 - 1);
      Swift::Int v132 = v51;
      uint64_t v53 = v22 * v51;
      do
      {
        uint64_t v55 = 0;
        uint64_t v137 = v22;
        uint64_t v133 = v53;
        Swift::Int v134 = v52;
        while (1)
        {
          uint64_t v140 = v21;
          uint64_t v56 = *a1;
          uint64_t v57 = v135;
          sub_1001BF218(v53 + v55 + *a1, v135, type metadata accessor for PairingErrorRecord);
          uint64_t v58 = v136;
          sub_1001BF218(v52 + v55 + v56, v136, type metadata accessor for PairingErrorRecord);
          type metadata accessor for PairingError(0);
          uint64_t v59 = Date.compare(_:)();
          sub_1001BF288(v58, type metadata accessor for PairingErrorRecord);
          sub_1001BF288(v57, type metadata accessor for PairingErrorRecord);
          if (v59 != 1) {
            break;
          }
          uint64_t v60 = *a1;
          if (!*a1) {
            goto LABEL_140;
          }
          uint64_t v53 = v133;
          uint64_t v52 = v134;
          uint64_t v61 = v60 + v134 + v55;
          sub_1001BF350(v60 + v133 + v55, v139);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001BF350(v139, v61);
          v55 -= v132;
          uint64_t v21 = v140 + 1;
          uint64_t v54 = v137;
          if (v137 == v140 + 1) {
            goto LABEL_47;
          }
        }
        uint64_t v54 = v137;
        uint64_t v53 = v133;
        uint64_t v52 = v134;
LABEL_47:
        Swift::Int v22 = v54 + 1;
        v52 += v132;
        v53 += v132;
        uint64_t v21 = v128;
      }
      while (v22 != v126);
      Swift::Int v22 = v126;
      uint64_t v2 = v122;
      unint64_t v18 = v125;
    }
    goto LABEL_54;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001BFE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t v37 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v7 = __chkstk_darwin(v37);
  uint64_t v38 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)&v28 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v31 = (uint64_t)&v28 - v13;
  uint64_t v36 = a3;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v15 = v14 * (v36 - 1);
    uint64_t v33 = v14;
    uint64_t v16 = v14 * v36;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v39 = v30;
    uint64_t v34 = v16;
    uint64_t v35 = v15;
    while (1)
    {
      uint64_t v18 = *a4;
      uint64_t v19 = v16 + v17 + *a4;
      uint64_t v20 = v31;
      sub_1001BF218(v19, v31, type metadata accessor for PairingErrorRecord);
      uint64_t v21 = v15 + v17 + v18;
      uint64_t v22 = v32;
      sub_1001BF218(v21, v32, type metadata accessor for PairingErrorRecord);
      type metadata accessor for PairingError(0);
      uint64_t v23 = Date.compare(_:)();
      uint64_t v24 = v22;
      uint64_t v15 = v35;
      sub_1001BF288(v24, type metadata accessor for PairingErrorRecord);
      uint64_t v25 = v20;
      uint64_t v16 = v34;
      uint64_t result = sub_1001BF288(v25, type metadata accessor for PairingErrorRecord);
      if (v23 != 1)
      {
LABEL_4:
        v15 += v33;
        v16 += v33;
        if (++v36 == v29) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = v26 + v15 + v17;
      sub_1001BF350(v26 + v16 + v17, v38);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001BF350(v38, v27);
      v17 -= v33;
      if (v36 == ++v39) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C00E0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v50 = a4;
  uint64_t v7 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v52 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_63;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_64;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v55 = a1;
  unint64_t v54 = v50;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v16 * v13;
      unint64_t v20 = v50;
      if (v50 < a2 || a2 + v19 <= v50)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v50 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v31 = v20 + v19;
      unint64_t v53 = v20 + v19;
      unint64_t v55 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v33 = -v13;
        uint64_t v49 = v7;
        unint64_t v47 = a1;
        do
        {
          unint64_t v51 = a3 + v33;
          sub_1001BF218(v31 + v33, (uint64_t)v11, type metadata accessor for PairingErrorRecord);
          unint64_t v34 = a2 + v33;
          unint64_t v35 = a3;
          uint64_t v36 = (uint64_t)v11;
          uint64_t v37 = v52;
          sub_1001BF218(a2 + v33, v52, type metadata accessor for PairingErrorRecord);
          type metadata accessor for PairingError(0);
          uint64_t v38 = Date.compare(_:)();
          uint64_t v39 = v37;
          uint64_t v11 = (char *)v36;
          sub_1001BF288(v39, type metadata accessor for PairingErrorRecord);
          sub_1001BF288(v36, type metadata accessor for PairingErrorRecord);
          if (v38 == 1)
          {
            unint64_t v40 = v51;
            if (v35 < a2 || v51 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = v50;
              unint64_t v43 = v47;
            }
            else
            {
              BOOL v41 = v35 == a2;
              unint64_t v42 = v50;
              unint64_t v43 = v47;
              if (!v41) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v55 += v33;
          }
          else
          {
            unint64_t v44 = v53;
            v53 += v33;
            unint64_t v40 = v51;
            if (v35 < v44 || v51 >= v44)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v34 = a2;
              unint64_t v42 = v50;
            }
            else
            {
              unint64_t v42 = v50;
              if (v35 != v44) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v34 = a2;
            }
            unint64_t v43 = v47;
          }
          unint64_t v31 = v53;
          if (v53 <= v42) {
            break;
          }
          a2 = v34;
          a3 = v40;
        }
        while (v34 > v43);
      }
      goto LABEL_61;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    uint64_t v18 = v50;
    if (v50 < a1 || a1 + v17 <= v50)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v50 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v51 = v18 + v17;
    unint64_t v53 = v18 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      unint64_t v48 = a3;
      do
      {
        uint64_t v22 = v7;
        uint64_t v23 = v13;
        sub_1001BF218(a2, (uint64_t)v11, type metadata accessor for PairingErrorRecord);
        uint64_t v24 = v52;
        sub_1001BF218(v18, v52, type metadata accessor for PairingErrorRecord);
        uint64_t v25 = v22;
        type metadata accessor for PairingError(0);
        uint64_t v26 = Date.compare(_:)();
        sub_1001BF288(v24, type metadata accessor for PairingErrorRecord);
        sub_1001BF288((uint64_t)v11, type metadata accessor for PairingErrorRecord);
        unint64_t v27 = v55;
        if (v26 == 1)
        {
          uint64_t v13 = v23;
          unint64_t v28 = a2 + v23;
          if (v55 < a2 || v55 >= v28)
          {
            uint64_t v7 = v25;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v29 = v48;
          }
          else
          {
            unint64_t v29 = v48;
            uint64_t v7 = v25;
            if (v55 == a2) {
              unint64_t v27 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v13 = v23;
          unint64_t v30 = v54 + v23;
          if (v55 < v54 || v55 >= v30)
          {
            uint64_t v7 = v25;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v29 = v48;
          }
          else
          {
            unint64_t v29 = v48;
            uint64_t v7 = v25;
            if (v55 != v54) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v54 = v30;
          unint64_t v28 = a2;
        }
        unint64_t v55 = v27 + v13;
        uint64_t v18 = v54;
        if (v54 >= v51) {
          break;
        }
        a2 = v28;
      }
      while (v28 < v29);
    }
LABEL_61:
    sub_100B72CEC(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_65:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for BatteryChargeState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C0734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BatteryChargeState()
{
  return &type metadata for BatteryChargeState;
}

unint64_t sub_1001C0770()
{
  unint64_t result = qword_10163D8E8;
  if (!qword_10163D8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D8E8);
  }
  return result;
}

uint64_t *sub_1001C07C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for ServerStatusCode();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1001C08AC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ServerStatusCode();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1001C0924(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for ServerStatusCode();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_1001C09BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ServerStatusCode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1001C0A58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for ServerStatusCode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1001C0AD4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ServerStatusCode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001C0B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C0B74);
}

uint64_t sub_1001C0B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ServerStatusCode();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001C0C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C0C38);
}

uint64_t sub_1001C0C38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ServerStatusCode();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NFCTapResponse()
{
  uint64_t result = qword_10163D948;
  if (!qword_10163D948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C0D2C()
{
  uint64_t result = type metadata accessor for ServerStatusCode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001C0DC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for ServerStatusCode();
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10163D980);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NFCTapResponse();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_1001C1198();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v16 = v8;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  char v23 = 0;
  uint64_t v13 = v21;
  uint64_t *v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v14;
  char v22 = 1;
  sub_1001C11EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v10 + *(int *)(v16 + 20), v5, v11);
  sub_1001C1244((uint64_t)v10, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001C12A8((uint64_t)v10);
}

uint64_t sub_1001C1094()
{
  if (*v0) {
    return 0x6F43737574617473;
  }
  else {
    return 0x4D6572756C696166;
  }
}

uint64_t sub_1001C10E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C1510(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C1108(uint64_t a1)
{
  unint64_t v2 = sub_1001C1198();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C1144(uint64_t a1)
{
  unint64_t v2 = sub_1001C1198();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C1180@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C0DC4(a1, a2);
}

unint64_t sub_1001C1198()
{
  unint64_t result = qword_10163D988;
  if (!qword_10163D988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D988);
  }
  return result;
}

unint64_t sub_1001C11EC()
{
  unint64_t result = qword_10163D990;
  if (!qword_10163D990)
  {
    type metadata accessor for ServerStatusCode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D990);
  }
  return result;
}

uint64_t sub_1001C1244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NFCTapResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C12A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NFCTapResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for NFCTapResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C13D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapResponse.CodingKeys()
{
  return &type metadata for NFCTapResponse.CodingKeys;
}

unint64_t sub_1001C140C()
{
  unint64_t result = qword_10163D998;
  if (!qword_10163D998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D998);
  }
  return result;
}

unint64_t sub_1001C1464()
{
  unint64_t result = qword_10163D9A0;
  if (!qword_10163D9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D9A0);
  }
  return result;
}

unint64_t sub_1001C14BC()
{
  unint64_t result = qword_10163D9A8;
  if (!qword_10163D9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D9A8);
  }
  return result;
}

uint64_t sub_1001C1510(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4D6572756C696166 && a2 == 0xEE00656761737365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for KeyDropShareEnvelopeV1()
{
  return &type metadata for KeyDropShareEnvelopeV1;
}

uint64_t sub_1001C1644@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1001C1674(uint64_t a1)
{
  unint64_t v2 = sub_1001C1824();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C16B0(uint64_t a1)
{
  unint64_t v2 = sub_1001C1824();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C16EC(uint64_t a1)
{
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1001C1714(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163D9B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C1824();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1001C1824()
{
  unint64_t result = qword_10163D9B8;
  if (!qword_10163D9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D9B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareEnvelopeV1.CodingKeys()
{
  return &type metadata for KeyDropShareEnvelopeV1.CodingKeys;
}

unint64_t sub_1001C188C()
{
  unint64_t result = qword_10163D9C0;
  if (!qword_10163D9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D9C0);
  }
  return result;
}

unint64_t sub_1001C18E4()
{
  unint64_t result = qword_10163D9C8;
  if (!qword_10163D9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163D9C8);
  }
  return result;
}

uint64_t sub_1001C1950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C1964);
}

uint64_t sub_1001C1968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C197C);
}

uint64_t type metadata accessor for DelegatedBeaconStartReunitedDates(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163DA28);
}

uint64_t destroy for KeyDropBeaconAttributes()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyDropBeaconAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KeyDropBeaconAttributes(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for KeyDropBeaconAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDropBeaconAttributes(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropBeaconAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconAttributes()
{
  return &type metadata for KeyDropBeaconAttributes;
}

uint64_t *sub_1001C1C54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001C1E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_1001C1F90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_1001C2150(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_1001C23CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_1001C258C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_1001C2808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C281C);
}

uint64_t sub_1001C2820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1001C2890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C28A4);
}

uint64_t sub_1001C28A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for KeyDropLostItemDates(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163DAB8);
}

void sub_1001C293C()
{
  sub_1000C7D80();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1001C29C8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163DB00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1001C3834();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001C2BA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v21 - v8;
  uint64_t v9 = sub_10000588C(&qword_10163DB10);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for KeyDropLostItemDates(0);
  __chkstk_darwin(v13);
  int v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C37E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = v13;
  char v23 = v15;
  uint64_t v24 = v7;
  type metadata accessor for Date();
  char v30 = 0;
  sub_1001C3888(&qword_10163ACC0);
  uint64_t v16 = (uint64_t)v26;
  uint64_t v17 = v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v23;
  sub_1000C69AC(v16, (uint64_t)v23);
  char v29 = 1;
  uint64_t v19 = (uint64_t)v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v17);
  sub_1000C69AC(v19, v18 + *(int *)(v22 + 20));
  sub_1001C3EB8(v18, v25, type metadata accessor for KeyDropLostItemDates);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001C3F20(v18, type metadata accessor for KeyDropLostItemDates);
}

uint64_t sub_1001C2EC0(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  v13[0] = a5;
  uint64_t v7 = sub_10000588C(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for Date();
  sub_1001C3888((unint64_t *)&unk_10163ACE0);
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v11)
  {
    ((void (*)(void))v13[0])(0);
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1001C3084@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v21 - v8;
  uint64_t v9 = sub_10000588C(&qword_10163DB20);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for DelegatedBeaconStartReunitedDates(0);
  __chkstk_darwin(started);
  char v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C3E64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = started;
  char v23 = v15;
  uint64_t v24 = v7;
  type metadata accessor for Date();
  char v30 = 0;
  sub_1001C3888(&qword_10163ACC0);
  uint64_t v16 = (uint64_t)v26;
  uint64_t v17 = v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v23;
  sub_1000C69AC(v16, (uint64_t)v23);
  char v29 = 1;
  uint64_t v19 = (uint64_t)v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v17);
  sub_1000C69AC(v19, v18 + *(int *)(v22 + 20));
  sub_1001C3EB8(v18, v25, type metadata accessor for DelegatedBeaconStartReunitedDates);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001C3F20(v18, type metadata accessor for DelegatedBeaconStartReunitedDates);
}

uint64_t sub_1001C33A4()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6449656C6F72;
      break;
    case 2:
      uint64_t result = 0x696A6F6D65;
      break;
    case 3:
      uint64_t result = 0x65566D6574737973;
      break;
    case 4:
      uint64_t result = 0x754E6C6169726573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C3454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C38CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C347C(uint64_t a1)
{
  unint64_t v2 = sub_1001C3834();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C34B8(uint64_t a1)
{
  unint64_t v2 = sub_1001C3834();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1001C34F4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001C3B08(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1001C3548(void *a1)
{
  return sub_1001C29C8(a1);
}

unint64_t sub_1001C3560()
{
  return 0xD000000000000013;
}

uint64_t sub_1001C3590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C44B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C35B8(uint64_t a1)
{
  unint64_t v2 = sub_1001C37E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C35F4(uint64_t a1)
{
  unint64_t v2 = sub_1001C37E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C3630@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C2BA0(a1, a2);
}

uint64_t sub_1001C3648(void *a1)
{
  return sub_1001C2EC0(a1, &qword_10163DAF0, (void (*)(void))sub_1001C37E0, (uint64_t)&type metadata for KeyDropLostItemDates.CodingKeys, (uint64_t)type metadata accessor for KeyDropLostItemDates);
}

unint64_t sub_1001C3698()
{
  if (*v0) {
    return 0xD000000000000018;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_1001C36D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C45A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C3700(uint64_t a1)
{
  unint64_t v2 = sub_1001C3E64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C373C(uint64_t a1)
{
  unint64_t v2 = sub_1001C3E64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C3778@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C3084(a1, a2);
}

uint64_t sub_1001C3790(void *a1)
{
  return sub_1001C2EC0(a1, &qword_10163DB30, (void (*)(void))sub_1001C3E64, (uint64_t)&type metadata for DelegatedBeaconStartReunitedDates.CodingKeys, (uint64_t)type metadata accessor for DelegatedBeaconStartReunitedDates);
}

unint64_t sub_1001C37E0()
{
  unint64_t result = qword_10163DAF8;
  if (!qword_10163DAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DAF8);
  }
  return result;
}

unint64_t sub_1001C3834()
{
  unint64_t result = qword_10163DB08;
  if (!qword_10163DB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB08);
  }
  return result;
}

uint64_t sub_1001C3888(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C38CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656C6F72 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1001C3B08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10163DB18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C3834();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v34 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v33 = 1;
  swift_bridgeObjectRetain();
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 2;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v31 = 3;
  uint64_t v29 = v12;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v13;
  char v30 = 4;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v24 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v26;
  swift_bridgeObjectRelease();
  uint64_t v19 = v29;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  uint64_t v21 = v27;
  a2[2] = v28;
  a2[3] = v21;
  uint64_t v22 = v25;
  a2[4] = v19;
  a2[5] = v22;
  uint64_t v23 = v24;
  a2[6] = v18;
  a2[7] = v23;
  a2[8] = v16;
  return result;
}

unint64_t sub_1001C3E64()
{
  unint64_t result = qword_10163DB28;
  if (!qword_10163DB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB28);
  }
  return result;
}

uint64_t sub_1001C3EB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001C3F20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for DelegatedBeaconStartReunitedDates.CodingKeys()
{
  return &type metadata for DelegatedBeaconStartReunitedDates.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropBeaconAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C4064);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconAttributes.CodingKeys()
{
  return &type metadata for KeyDropBeaconAttributes.CodingKeys;
}

unsigned char *_s12searchpartyd33DelegatedBeaconStartReunitedDatesV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C4168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropLostItemDates.CodingKeys()
{
  return &type metadata for KeyDropLostItemDates.CodingKeys;
}

unint64_t sub_1001C41A4()
{
  unint64_t result = qword_10163DB38;
  if (!qword_10163DB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB38);
  }
  return result;
}

unint64_t sub_1001C41FC()
{
  unint64_t result = qword_10163DB40;
  if (!qword_10163DB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB40);
  }
  return result;
}

unint64_t sub_1001C4254()
{
  unint64_t result = qword_10163DB48;
  if (!qword_10163DB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB48);
  }
  return result;
}

unint64_t sub_1001C42AC()
{
  unint64_t result = qword_10163DB50;
  if (!qword_10163DB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB50);
  }
  return result;
}

unint64_t sub_1001C4304()
{
  unint64_t result = qword_10163DB58;
  if (!qword_10163DB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB58);
  }
  return result;
}

unint64_t sub_1001C435C()
{
  unint64_t result = qword_10163DB60;
  if (!qword_10163DB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB60);
  }
  return result;
}

unint64_t sub_1001C43B4()
{
  unint64_t result = qword_10163DB68;
  if (!qword_10163DB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB68);
  }
  return result;
}

unint64_t sub_1001C440C()
{
  unint64_t result = qword_10163DB70;
  if (!qword_10163DB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB70);
  }
  return result;
}

unint64_t sub_1001C4464()
{
  unint64_t result = qword_10163DB78;
  if (!qword_10163DB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163DB78);
  }
  return result;
}

uint64_t sub_1001C44B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001013F4A10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013F4A30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001C45A4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001013F4A10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001013F4A50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001C4698()
{
  return 0x64496572616873;
}

uint64_t sub_1001C46B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x64496572616873 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001C4748(uint64_t a1)
{
  unint64_t v2 = sub_1001C6F60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4784(uint64_t a1)
{
  unint64_t v2 = sub_1001C6F60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C47C0(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163DCD8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C6F60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_1001C6EB0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001C4934(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163DCE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1001C6E5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_1001C6EB0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for KeyDropDelegatedShareMetadataResponse(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    type metadata accessor for Date();
    sub_1001C6EB0((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001C4B90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v31 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C(&qword_10163DCC8);
  uint64_t v27 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for KeyDropDelegatedShareMetadataResponse(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001C6E5C();
  char v32 = v9;
  uint64_t v13 = (uint64_t)v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v24 = v5;
  char v33 = a1;
  uint64_t v14 = (uint64_t)v12;
  uint64_t v16 = v27;
  uint64_t v15 = v28;
  uint64_t v17 = v29;
  char v37 = 0;
  sub_1001C6EB0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v12, v31, v6);
  char v36 = 1;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  v23[1] = v6;
  uint64_t v19 = v10;
  *(void *)(v14 + *(int *)(v10 + 20)) = v18;
  char v35 = 2;
  sub_1001C6EB0(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v20 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14 + *(int *)(v19 + 24), v20, v17);
  char v34 = 3;
  char v21 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v30);
  *(unsigned char *)(v14 + *(int *)(v19 + 28)) = v21 & 1;
  sub_1001C6EF8(v14, v25, type metadata accessor for KeyDropDelegatedShareMetadataResponse);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return sub_1001C616C(v14, type metadata accessor for KeyDropDelegatedShareMetadataResponse);
}

unint64_t sub_1001C50B0()
{
  unint64_t result = 0x64496572616873;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x43726F7469736976;
      break;
    case 2:
      unint64_t result = 0x6974617269707865;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C5150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C739C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001C5178(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1001C5184(uint64_t a1)
{
  unint64_t v2 = sub_1001C6E5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C51C0(uint64_t a1)
{
  unint64_t v2 = sub_1001C6E5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C51FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C4B90(a1, a2);
}

uint64_t sub_1001C5214(void *a1)
{
  return sub_1001C4934(a1);
}

uint64_t sub_1001C522C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for String.Encoding();
  v4[12] = swift_task_alloc();
  type metadata accessor for KeyDropJoinToken(0);
  v4[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001C5348, v3, 0);
}

uint64_t sub_1001C5348()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  (*(void (**)(uint64_t, void, void))(v0[15] + 16))(v1, v0[9], v0[14]);
  sub_1001C6EF8(v3, v2, type metadata accessor for KeyDropJoinToken);
  uint64_t v4 = sub_1001C5A38(v1, v2);
  v0[17] = v4;
  v0[18] = v5;
  v0[19] = v6;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170F7C8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000361E0(v8, v9);
    sub_1000361E0(v8, v9);
    static String.Encoding.utf8.getter();
    uint64_t v14 = String.init(data:encoding:)();
    if (v15)
    {
      uint64_t v16 = v14;
      unint64_t v17 = v15;
      sub_10001CFB8(v8, v9);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v8, v9);
    }
    else
    {
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Empty description for request body.", v20, 2u);
        swift_slowDealloc();
      }

      sub_10001CFB8(v8, v9);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v8, v9);
      unint64_t v17 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    v0[7] = sub_1008FA0F0(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v9);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "KeyDropShareMetaDataRequest: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v9);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v9);
  }

  v0[5] = &type metadata for KeyDropDelegatedShareMetadataRequest;
  v0[6] = sub_1001C60F8();
  v0[2] = v7;
  v0[3] = v8;
  v0[4] = v9;
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101668378 + dword_101668378);
  char v21 = (void *)swift_task_alloc();
  v0[20] = v21;
  *char v21 = v0;
  v21[1] = sub_1001C57CC;
  uint64_t v22 = v0[8];
  return v24(v22, (uint64_t)(v0 + 2), 5);
}

uint64_t sub_1001C57CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = sub_1001C5994;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1001C58F4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001C58F4()
{
  uint64_t v1 = v0[18];
  unint64_t v2 = v0[19];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C5994()
{
  uint64_t v2 = v0[18];
  unint64_t v1 = v0[19];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

char *sub_1001C5A38(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v3 = (void *)type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v45 = *(v3 - 1);
  object = v3;
  __chkstk_darwin(v3);
  uint64_t countAndFlagsBits = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v44 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v15 = JSONEncoder.init()();
  *uint64_t v14 = sub_1003B9190;
  v14[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v11);
  uint64_t v16 = a1;
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v10, a1, v17);
  sub_1001C6EB0(&qword_10163DB90, (void (*)(uint64_t))type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent);
  uint64_t v19 = v48;
  uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v19)
  {
    swift_release();
    sub_1001C616C(v51, type metadata accessor for KeyDropJoinToken);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
    sub_1001C616C((uint64_t)v10, type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent);
  }
  else
  {
    unint64_t v22 = v21;
    unint64_t v42 = v10;
    uint64_t v43 = v20;
    uint64_t v48 = v15;
    uint64_t v40 = v5;
    BOOL v41 = v7;
    uint64_t v23 = (uint64_t *)(v51 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
    unint64_t v24 = v23[1];
    uint64_t v49 = (char *)*v23;
    unint64_t v50 = v24;
    sub_1000361E0((uint64_t)v49, v24);
    uint64_t v25 = countAndFlagsBits;
    P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
    uint64_t v49 = (char *)v43;
    unint64_t v50 = v22;
    sub_1000362FC();
    P256.Signing.PrivateKey.signature<A>(for:)();
    uint64_t v39 = v16;
    uint64_t v27 = (*(uint64_t (**)(char *, void *))(v45 + 8))(v25, object);
    uint64_t v10 = (char *)sub_1005F52D4(v27);
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t countAndFlagsBits = (char *)qword_10170EE68;
    id v28 = [self sharedInstance];
    unsigned int v29 = [v28 isInternalBuild];

    uint64_t v30 = v44;
    if (v29
      && (NSString v31 = String._bridgeToObjectiveC()(),
          unsigned __int8 v32 = [countAndFlagsBits BOOLForKey:v31],
          v31,
          (v32 & 1) != 0))
    {
      swift_release();
      char v33 = v41;
    }
    else
    {
      char v33 = v41;
      uint64_t v34 = P256.Signing.ECDSASignature.derRepresentation.getter();
      unint64_t v36 = v35;
      Swift::String v37 = Data.base64EncodedString(options:)(0);
      object = v37._object;
      uint64_t countAndFlagsBits = (char *)v37._countAndFlagsBits;
      sub_10001CFB8(v34, v36);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v49 = v10;
      sub_10016C0FC((uint64_t)countAndFlagsBits, (uint64_t)object, 0xD000000000000012, 0x80000001013F42A0, isUniquelyReferenced_nonNull_native);
      uint64_t v10 = v49;
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_1001C616C(v51, type metadata accessor for KeyDropJoinToken);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v39, v17);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v40);
    sub_1001C616C((uint64_t)v42, type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent);
  }
  return v10;
}

unint64_t sub_1001C60F8()
{
  unint64_t result = qword_10163DB88;
  if (!qword_10163DB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DB88);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163DBF0);
}

uint64_t sub_1001C616C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001C61CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1001C6238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001C629C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001C6300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001C6364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001C63C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C63DC);
}

uint64_t sub_1001C63DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1001C6448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C645C);
}

uint64_t sub_1001C645C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1001C64CC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDelegatedShareMetadataRequest()
{
  return &type metadata for KeyDropDelegatedShareMetadataRequest;
}

void *sub_1001C6568(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1001C668C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1001C6734(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001C6808(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001C68E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001C69B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001C6A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C6A9C);
}

uint64_t sub_1001C6A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1001C6BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C6BD4);
}

uint64_t sub_1001C6BD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeyDropDelegatedShareMetadataResponse(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163DC80);
}

uint64_t sub_1001C6D04()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001C6DE0(uint64_t a1)
{
  unint64_t result = sub_1001C6E08();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001C6E08()
{
  unint64_t result = qword_10163DCC0;
  if (!qword_10163DCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DCC0);
  }
  return result;
}

unint64_t sub_1001C6E5C()
{
  unint64_t result = qword_10163DCD0;
  if (!qword_10163DCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DCD0);
  }
  return result;
}

uint64_t sub_1001C6EB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C6EF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1001C6F60()
{
  unint64_t result = qword_10163DCE0;
  if (!qword_10163DCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DCE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001C7050);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent.CodingKeys()
{
  return &type metadata for KeyDropDelegatedShareMetadataRequest.KeyDropMetaDataContent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropDelegatedShareMetadataResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C7154);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDelegatedShareMetadataResponse.CodingKeys()
{
  return &type metadata for KeyDropDelegatedShareMetadataResponse.CodingKeys;
}

unint64_t sub_1001C7190()
{
  unint64_t result = qword_10163DCF0;
  if (!qword_10163DCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DCF0);
  }
  return result;
}

unint64_t sub_1001C71E8()
{
  unint64_t result = qword_10163DCF8;
  if (!qword_10163DCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DCF8);
  }
  return result;
}

unint64_t sub_1001C7240()
{
  unint64_t result = qword_10163DD00;
  if (!qword_10163DD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DD00);
  }
  return result;
}

unint64_t sub_1001C7298()
{
  unint64_t result = qword_10163DD08;
  if (!qword_10163DD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DD08);
  }
  return result;
}

unint64_t sub_1001C72F0()
{
  unint64_t result = qword_10163DD10;
  if (!qword_10163DD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DD10);
  }
  return result;
}

unint64_t sub_1001C7348()
{
  unint64_t result = qword_10163DD18;
  if (!qword_10163DD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163DD18);
  }
  return result;
}

uint64_t sub_1001C739C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496572616873 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x43726F7469736976 && a2 == 0xEC000000746E756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F4A70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void *sub_1001C7578()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1001C7584()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  type metadata accessor for MACAddress();
  sub_1001CA408((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x203A4B524920;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  type metadata accessor for PeripheralConnectionMaterial(0);
  v2._uint64_t countAndFlagsBits = Data.hexString.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x737365726464613CLL;
}

uint64_t sub_1001C76A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163E570);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1001CA3B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for MACAddress();
  sub_1001CA408(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
    v10[15] = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C7874@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v27 = type metadata accessor for MACAddress();
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163E558);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001CA3B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v24;
  LOBYTE(v28) = 0;
  sub_1001CA408(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v15 = v27;
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v21 = (uint64_t)v13;
  v17(v13, v5, v15);
  char v29 = 1;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v16);
  uint64_t v18 = v21;
  *(_OWORD *)(v21 + *(int *)(v22 + 20)) = v28;
  sub_1001CA450(v18, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001CA4B4(v18);
}

uint64_t sub_1001C7BD0()
{
  if (*v0) {
    return 7041641;
  }
  else {
    return 0x73736572646461;
  }
}

uint64_t sub_1001C7C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001CA7A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C7C2C(uint64_t a1)
{
  unint64_t v2 = sub_1001CA3B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C7C68(uint64_t a1)
{
  unint64_t v2 = sub_1001CA3B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C7CA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C7874(a1, a2);
}

uint64_t sub_1001C7CBC(void *a1)
{
  return sub_1001C76A8(a1);
}

Swift::Int sub_1001C7CD4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001C7D7C()
{
  type metadata accessor for MACAddress();
  sub_1001CA408((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  dispatch thunk of Hashable.hash(into:)();

  return Data.hash(into:)();
}

Swift::Int sub_1001C7E18()
{
  return Hasher._finalize()();
}

uint64_t sub_1001C7EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static MACAddress.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  unint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];

  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8, v10, v11);
}

uint64_t sub_1001C7F30()
{
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10170EE68;
  id v2 = [self sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v1 BOOLForKey:v4];

    if (v5
      && (unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8), v6 >> 60 != 15))
    {
      uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
      LOBYTE(v3) = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_18:
            __break(1u);
            JUMPOUT(0x1001C8124);
          }
          uint64_t v13 = HIDWORD(v7) - (int)v7;
LABEL_13:
          sub_1000361E0(v7, *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
          if (v13 >= 32)
          {
LABEL_9:
            uint64_t v8 = sub_1004B4814(0, 31, v7, v6);
            unint64_t v10 = v9;
            uint64_t v12 = *(void *)(v0 + 16);
            unint64_t v11 = *(void *)(v0 + 24);
            sub_1000361E0(v12, v11);
            LOBYTE(v3) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v8, v10, v12, v11);
            sub_10001CFB8(v12, v11);
            sub_10001CFB8(v8, v10);
          }
          else
          {
LABEL_14:
            LOBYTE(v3) = 0;
          }
LABEL_15:
          sub_100037A24(v7, v6);
          break;
        case 2uLL:
          uint64_t v15 = *(void *)(v7 + 16);
          uint64_t v14 = *(void *)(v7 + 24);
          uint64_t v13 = v14 - v15;
          if (!__OFSUB__(v14, v15)) {
            goto LABEL_13;
          }
          goto LABEL_18;
        case 3uLL:
          goto LABEL_15;
        default:
          if (BYTE6(v6) >= 0x20uLL) {
            goto LABEL_9;
          }
          goto LABEL_14;
      }
    }
    else
    {
      LOBYTE(v3) = 0;
    }
  }
  return v3 & 1;
}

uint64_t sub_1001C8134()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_10163DD20 = result;
  qword_10163DD28 = v1;
  return result;
}

void *sub_1001C8174(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = v2;
  v3[4] = 0;
  v3[5] = 0;
  *((_OWORD *)v3 + 3) = xmmword_10134E540;
  *((_OWORD *)v3 + 4) = xmmword_10134E540;
  v3[10] = 0xF000000000000000;
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  v3[15] = 0;
  v3[16] = 0;
  unsigned int v5 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  v3[14] = 0xF000000000000000;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v37 = (uint64_t)v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  _OWORD *v7 = xmmword_101347BB0;
  uint64_t v34 = v7;
  unint64_t v35 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1) = xmmword_101347BB0;
  unint64_t v36 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = xmmword_101347BB0;
  uint64_t v8 = (uint64_t)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  uint64_t v9 = (uint64_t)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  unint64_t v10 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2) = xmmword_101347BB0;
  unint64_t v11 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed) = xmmword_101347BB0;
  uint64_t v12 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo;
  *(_OWORD *)uint64_t v12 = xmmword_101347BB0;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId) = xmmword_101347BB0;
  *(_WORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = 256;
  uint64_t v13 = (void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
  *uint64_t v13 = 0;
  v13[1] = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = 1;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = _swiftEmptyArrayStorage;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature) = xmmword_101347BB0;
  uint64_t v14 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  uint64_t v15 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1) = xmmword_101347BB0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = _swiftEmptyDictionarySingleton;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = _swiftEmptyDictionarySingleton;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId) = xmmword_101347BB0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isPairingEligibilityDataComplete) = 0;
  uint64_t v16 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_firmwareVersion;
  *(_DWORD *)uint64_t v16 = 0;
  v16[4] = 1;
  uint64_t v17 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  uint64_t v18 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *((unsigned char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic) = 0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey) = xmmword_101347BB0;
  *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey) = xmmword_101347BB0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isSharedUnit) = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isManagedPeripheral) = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs) = _swiftEmptyArrayStorage;
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v19 = a1;
  sub_1000361E0(a1, a2);
  unint64_t v20 = (unint64_t)sub_100F2C724();
  uint64_t v21 = (void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  *uint64_t v21 = v20;
  v21[1] = v22;
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CFB8(v19, a2);
    sub_10001CFB8(v3[2], v3[3]);
    sub_100037A24(v3[5], v3[6]);
    sub_100037A24(v3[7], v3[8]);
    sub_100037A24(v3[9], v3[10]);
    swift_bridgeObjectRelease();
    sub_100037A24(v3[13], v3[14]);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v37, &qword_101638CF0);
    sub_100037A24(*(void *)v34, *((void *)v34 + 1));
    sub_100037A24(*(void *)v35, *((void *)v35 + 1));
    sub_100037A24(*(void *)v36, *((void *)v36 + 1));
    sub_10001DAB4(v8, &qword_101639BC0);
    sub_10001DAB4(v9, &qword_101639B78);
    sub_100037A24(*(void *)v10, *((void *)v10 + 1));
    sub_100037A24(*(void *)v11, *((void *)v11 + 1));
    sub_10006013C(*(void *)v12, *((void *)v12 + 1), *((void *)v12 + 2), *((void *)v12 + 3), *((void *)v12 + 4), *((void *)v12 + 5), *((void *)v12 + 6), *((void *)v12 + 7), *((void *)v12 + 8), *((void *)v12 + 9));
    swift_bridgeObjectRelease();
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8));
    sub_10001DAB4((uint64_t)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial, &qword_10163E578);
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8));
    sub_10001DAB4((uint64_t)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, (uint64_t *)&unk_10166BFA0);
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8));
    sub_100037A24(*(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey), *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8));
    swift_bridgeObjectRelease();
    type metadata accessor for AccessoryPairingInfo(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v25 = result;
    MobileGestalt_get_uniqueChipID();

    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = (void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *uint64_t v27 = v26;
    v27[1] = v28;
    uint64_t result = (id)MobileGestalt_get_current_device();
    if (result)
    {
      char v29 = result;
      MobileGestalt_get_chipID();

      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = v31;
      sub_10001CFB8(v19, a2);
      char v33 = (void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
      *char v33 = v30;
      v33[1] = v32;
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C89D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  __chkstk_darwin(v4);
  unint64_t v54 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  uint64_t v58 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  long long v57 = xmmword_101342130;
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  if (a2 >> 60 == 15)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = Data.hexString.getter();
    unint64_t v10 = v11;
  }
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 64) = v12;
  if (v10) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v14 = 0xE000000000000000;
  if (v10) {
    unint64_t v14 = v10;
  }
  *(void *)(v8 + 32) = v13;
  *(void *)(v8 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v15 = [self defaultStore];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = a1;
    unint64_t v18 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_1016368F0 != -1) {
        swift_once();
      }
      unint64_t v18 = qword_10163DD28;
      if ((unint64_t)qword_10163DD28 >> 60 == 15)
      {
        static os_log_type_t.error.getter();
        os_log(_:dso:log:_:_:)();
LABEL_26:

        return 0;
      }
      uint64_t v17 = qword_10163DD20;
      sub_1000361E0(qword_10163DD20, qword_10163DD28);
    }
    sub_100037A38(a1, a2);
    id v19 = [v16 aa_primaryAppleAccount];
    if (v19)
    {
      unint64_t v20 = v19;
      id v21 = [v19 aa_personID];
      if (v21)
      {
        unint64_t v22 = v21;
        uint64_t v52 = v17;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        static os_log_type_t.debug.getter();
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v57;
        *(void *)(v26 + 56) = &type metadata for String;
        *(void *)(v26 + 64) = v12;
        *(void *)(v26 + 32) = v23;
        *(void *)(v26 + 40) = v25;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = v58;
        static String.Encoding.utf8.getter();
        uint64_t v28 = String.data(using:allowLossyConversion:)();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v60);
        if (v30 >> 60 != 15)
        {
          char v33 = v54;
          uint64_t v32 = v55;
          uint64_t v34 = v56;
          (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for HashAlgorithm.sha256(_:), v56);
          uint64_t v35 = v28;
          uint64_t v36 = Data.hash(algorithm:)();
          unint64_t v38 = v37;
          (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
          uint64_t v39 = v52;
          sub_1000361E0(v52, v18);
          uint64_t v40 = sub_10043A56C(v39, v18);
          uint64_t v60 = v35;
          unint64_t v42 = v41;
          sub_1000361E0(v40, v41);
          sub_100A932C4(&v61);
          sub_10001CFB8(v40, v42);
          sub_100434F38(v61, v62, &v61);
          uint64_t v44 = v52;

          sub_10001CFB8(v44, v18);
          sub_10001CFB8(v40, v42);
          sub_10001CFB8(v36, v38);
          sub_100037A24(v60, v30);

          uint64_t v46 = v61;
          unint64_t v47 = v62;
          uint64_t v48 = v53;
          uint64_t v49 = *(void *)(v53 + 40);
          unint64_t v50 = *(void *)(v53 + 48);
          *(void *)(v53 + 40) = v61;
          *(void *)(v48 + 48) = v47;
          sub_1000361E0(v46, v47);
          sub_100037A24(v49, v50);
          return v46;
        }

        uint64_t v31 = v52;
        goto LABEL_25;
      }
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v31 = v17;
LABEL_25:
    sub_10001CFB8(v31, v18);
    goto LABEL_26;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C906C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = v3[8];
  if (v5 >> 60 == 15 || (unint64_t v6 = v3[6], v6 >> 60 == 15))
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
LABEL_6:
    sub_1001CA510(&v30);
    goto LABEL_7;
  }
  uint64_t v8 = v3[7];
  uint64_t v9 = v3[5];
  uint64_t v10 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
  if (!v10 || (uint64_t v11 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8)) == 0)
  {
    sub_100037A38(v3[7], v3[8]);
    sub_100037A38(v9, v6);
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100037A24(v9, v6);
    sub_100037A24(v8, v5);
    goto LABEL_6;
  }
  uint64_t v28 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
  uint64_t v29 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
  sub_100037A38(v8, v5);
  sub_100037A38(v9, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static os_log_type_t.debug.getter();
  uint64_t v26 = v10;
  uint64_t v27 = v9;
  uint64_t v25 = v11;
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  sub_1000361E0(v8, v5);
  Swift::String v15 = Data.base64EncodedString(options:)(0);
  sub_100037A24(v8, v5);
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(Swift::String *)(v14 + 32) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  uint64_t v17 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
  uint64_t v18 = v3[2];
  unint64_t v19 = v3[3];
  uint64_t v20 = v3[11];
  uint64_t v21 = v3[12];
  uint64_t v22 = v3[13];
  unint64_t v23 = v3[14];
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = a2;
  uint64_t v31 = v8;
  unint64_t v32 = v5;
  uint64_t v33 = v28;
  uint64_t v34 = v25;
  uint64_t v35 = v29;
  uint64_t v36 = v26;
  uint64_t v37 = v16;
  uint64_t v38 = v17;
  uint64_t v39 = v18;
  unint64_t v40 = v19;
  uint64_t v41 = v27;
  unint64_t v42 = v6;
  uint64_t v43 = v20;
  uint64_t v44 = v21;
  uint64_t v45 = v22;
  uint64_t v24 = v22;
  unint64_t v46 = v23;
  SharingCircleWildAdvertisementKey.init(key:)(&v30);
  sub_1000361E0(a1, a2);
  swift_bridgeObjectRetain();
  sub_1000361E0(v18, v19);
  swift_bridgeObjectRetain();
  sub_100037A38(v24, v23);
LABEL_7:
  sub_1001CA52C((uint64_t)&v30, (uint64_t)v47);
  return sub_1001CA52C((uint64_t)v47, a3);
}

uint64_t sub_1001C93F4@<X0>(void *a1@<X8>)
{
  unint64_t v3 = v1[10];
  if (v3 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
  if (v5 && *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8))
  {
    unint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8);
    if (v6 >> 60 != 15)
    {
      uint64_t v21 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
      uint64_t v22 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
      uint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
      uint64_t v19 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
      uint64_t v20 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
      uint64_t v15 = v1[11];
      uint64_t v16 = v1[12];
      uint64_t v17 = v1[13];
      unint64_t v18 = v1[14];
      uint64_t v23 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
      uint64_t v24 = v1[9];
      sub_100037A38(v24, v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100037A38(v19, v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = sub_100037A38(v17, v18);
      uint64_t v11 = v20;
      uint64_t v8 = v21;
      uint64_t v13 = v19;
      uint64_t v10 = v22;
      uint64_t v9 = v23;
      uint64_t v14 = v24;
      goto LABEL_13;
    }
    uint64_t v7 = v1[9];
    sub_1000361E0(v7, v1[10]);
    static os_log_type_t.error.getter();
    if (qword_101637308 == -1) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v7 = v1[9];
  sub_1000361E0(v7, v1[10]);
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
LABEL_15:
  }
    swift_once();
LABEL_11:
  os_log(_:dso:log:_:_:)();
  uint64_t result = sub_100037A24(v7, v3);
LABEL_12:
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v6 = 0;
  uint64_t v14 = 0;
  unint64_t v3 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
LABEL_13:
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v5;
  a1[4] = v11;
  a1[5] = v12;
  a1[6] = v13;
  a1[7] = v6;
  a1[8] = v14;
  a1[9] = v3;
  a1[10] = v15;
  a1[11] = v16;
  a1[12] = v17;
  a1[13] = v18;
  return result;
}

uint64_t sub_1001C96D8()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_100037A24(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_100037A24(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_100037A24(*(void *)(v0 + 72), *(void *)(v0 + 80));
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + 104), *(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, &qword_101638CF0);
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8));
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, &qword_101639BC0);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, &qword_101639B78);
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed + 8));
  sub_10006013C(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 8), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 16), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 24), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 32), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 40), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 48), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 56), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 64), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8));
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial, &qword_10163E578);
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8));
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, (uint64_t *)&unk_10166BFA0);
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8));
  sub_100037A24(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001C9A64()
{
  sub_1001C96D8();

  return swift_deallocClassInstance();
}

uint64_t sub_1001C9ABC()
{
  return type metadata accessor for AccessoryPairingInfo(0);
}

uint64_t type metadata accessor for AccessoryPairingInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10163DD58);
}

void sub_1001C9AE4()
{
  sub_1001C9D18(319, (unint64_t *)&qword_101655AB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  if (v0 <= 0x3F)
  {
    sub_1001C9D18(319, &qword_10163DD68, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
    if (v1 <= 0x3F)
    {
      sub_1001C9D18(319, (unint64_t *)&qword_10163DD70, (void (*)(uint64_t))type metadata accessor for AccessoryProductInfo);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1001C9D18(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for PeripheralConnectionMaterial(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163E518);
}

uint64_t *sub_1001C9D8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000361E0(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t sub_1001C9E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_10001CFB8(v6, v7);
}

uint64_t sub_1001C9EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t sub_1001C9F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10001CFB8(v12, v13);
  return a1;
}

uint64_t sub_1001CA00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001CA088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v8, v9);
  return a1;
}

uint64_t sub_1001CA110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CA124);
}

uint64_t sub_1001CA124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1001CA1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CA20C);
}

uint64_t sub_1001CA20C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *unint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_1001CA2D8()
{
  uint64_t result = type metadata accessor for MACAddress();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001CA36C()
{
  return sub_1001CA408(&qword_10163E550, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
}

unint64_t sub_1001CA3B4()
{
  unint64_t result = qword_10163E560;
  if (!qword_10163E560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E560);
  }
  return result;
}

uint64_t sub_1001CA408(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001CA450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CA4B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1001CA510(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1001CA52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163E580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for PeripheralConnectionMaterial.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CA660);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PeripheralConnectionMaterial.CodingKeys()
{
  return &type metadata for PeripheralConnectionMaterial.CodingKeys;
}

unint64_t sub_1001CA69C()
{
  unint64_t result = qword_10163E588;
  if (!qword_10163E588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E588);
  }
  return result;
}

unint64_t sub_1001CA6F4()
{
  unint64_t result = qword_10163E590;
  if (!qword_10163E590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E590);
  }
  return result;
}

unint64_t sub_1001CA74C()
{
  unint64_t result = qword_10163E598;
  if (!qword_10163E598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E598);
  }
  return result;
}

uint64_t sub_1001CA7A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73736572646461 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7041641 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1001CA884(char a1)
{
  unint64_t result = 0x646563726F66;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646572696170;
      break;
    case 2:
      unint64_t result = 0x656C756465686373;
      break;
    case 3:
      unint64_t result = 0x6F43657461647075;
      break;
    case 4:
      unint64_t result = 0x6552746E65696C63;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6465687361656CLL;
      break;
    case 7:
      unint64_t result = 0x656E6E6F63736964;
      break;
    case 8:
      unint64_t result = 0x656369766544656DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1001CA9F0()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 176);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  int v3 = qword_10170F050;
  if (os_log_type_enabled((os_log_t)qword_10170F050, v2))
  {
    swift_retain_n();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109632;
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)qword_10170EE68;
    id v6 = [self sharedInstance];
    unsigned int v7 = [v6 isInternalBuild];

    if (v7)
    {
      NSString v8 = String._bridgeToObjectiveC()();
      [v5 BOOLForKey:v8];
      swift_release();
    }
    else
    {
      swift_release();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 14) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "isFirmwareUpdateAllowed: firmwareUpdateOverride: %{BOOL}d, isThisMeDevice: %{BOOL}d, singleDevice: %{BOOL}d.", (uint8_t *)v4, 0x14u);
    swift_slowDealloc();
  }
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_10170EE68;
  id v10 = [self sharedInstance];
  unsigned int v11 = [v10 isInternalBuild];

  if (v11)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    unsigned __int8 v13 = [v9 BOOLForKey:v12];

    if (v13) {
      return 1;
    }
  }
  return v16 == 1 || v1 == 1;
}

uint64_t sub_1001CAD6C(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  sub_10000588C(&qword_101639428);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1001CAE10, v1, 0);
}

uint64_t sub_1001CAE10()
{
  uint64_t v1 = v0[12] + 144;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = v0[11];
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_1007240CC(v3);
    if (v5)
    {
      uint64_t v6 = v0[11];
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
      v0[15] = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_100163E2C(v6);
      swift_endAccess();
      swift_release();
      return _swift_task_switch(sub_1001CAF68, v7, 0);
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CAF68()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  static DispatchTime.now()();
  uint64_t v5 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 0, 1, v5);
  sub_10001D608(v1, v3, &qword_101639428);
  uint64_t v6 = v2 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess();
  sub_10003377C(v3, v6);
  swift_endAccess();
  return _swift_task_switch(sub_1001CB078, v4, 0);
}

uint64_t sub_1001CB078()
{
  type metadata accessor for AnalyticsPublisher();
  v0[16] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CB12C;
  uint64_t v2 = v0[15];
  return sub_101196838(v2);
}

uint64_t sub_1001CB12C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1001CB258, v1, 0);
}

uint64_t sub_1001CB258()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CB2C8(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 152) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1007240CC(a1);
    if (v4)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_100163E2C(a1);
      swift_endAccess();
      swift_release();
      type metadata accessor for Transaction();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      return swift_release_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1001CB3D4(uint64_t a1)
{
  v1[5] = a1;
  sub_10000588C(&qword_101639428);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001CB47C, a1, 0);
}

uint64_t sub_1001CB47C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  static DispatchTime.now()();
  uint64_t v4 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10001D608(v1, v2, &qword_101639428);
  uint64_t v5 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess();
  sub_10003377C(v2, v5);
  swift_endAccess();
  return _swift_task_switch(sub_1001CB584, 0, 0);
}

uint64_t sub_1001CB584()
{
  type metadata accessor for AnalyticsPublisher();
  v0[8] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CB638;
  uint64_t v2 = v0[5];
  return sub_101196838(v2);
}

uint64_t sub_1001CB638()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *sub_1001CB788(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = sub_10000588C(&qword_10163A798);
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v22 = v3;
  __chkstk_darwin(v3);
  uint64_t v20 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8);
  swift_defaultActor_initialize();
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  v1[14] = WorkItemQueue.__allocating_init(name:identifier:)();
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_10170E330;
  v1[15] = qword_10170E330;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v24[0] = _swiftEmptyArrayStorage;
  sub_1001D4388((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[18] = _swiftEmptyDictionarySingleton;
  v1[19] = _swiftEmptyDictionarySingleton;
  v1[21] = 0;
  v1[22] = 0;
  v1[20] = 0;
  uint64_t v14 = v23;
  v1[16] = v13;
  v1[17] = v14;
  uint64_t updated = type metadata accessor for FirmwareUpdateService();
  uint64_t v26 = &off_1015B3420;
  v24[0] = v1;
  __chkstk_darwin(updated);
  *(&v20 - 2) = (char *)v24;
  *(&v20 - 1) = (char *)v12;
  swift_retain();
  swift_retain();
  uint64_t v15 = v20;
  uint64_t v16 = v22;
  OS_dispatch_queue.sync<A>(execute:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v17 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  v24[0] = v17;
  swift_allocObject();
  swift_weakInit();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  uint64_t v18 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  v2[21] = v18;
  swift_release();
  return v2;
}

uint64_t sub_1001CBD18(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v1 == 1)
    {
      type metadata accessor for Transaction();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001CBDC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t result = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  if (*a1 != *(void *)(a2 + 176))
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    *(void *)(v9 + 56) = &type metadata for Int;
    *(void *)(v9 + 64) = &protocol witness table for Int;
    *(void *)(v9 + 32) = v8;
    os_log(_:dso:log:_:_:)();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a2 + 176) = v8;
    if (v8 == 1)
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
      sub_1001CCD8C(9, (uint64_t)v7);
      return sub_10001DAB4((uint64_t)v7, &qword_101638CF0);
    }
  }
  return result;
}

uint64_t sub_1001CBF68(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1001CBFFC, 0, 0);
}

uint64_t sub_1001CBFFC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return _swift_task_switch(sub_1001CC0A0, v1, 0);
}

uint64_t sub_1001CC0A0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_1001CCD8C(8, v1);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CC120()
{
  uint64_t v1 = *v0;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v2 = v0[16];
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v3;
  v4[3] = &v10;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001D4730;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_100132424;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015B35C0;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v2, v6);
  _Block_release(v6);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1001CC2D4(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = qword_101636CD8;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v5 = sub_1010ABDD8(v9);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v6 = sub_1010ABDD8(v9);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v7 = sub_1010ABDC4(v9);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v7 * (__int128)60) >> 64 == (60 * v7) >> 63)
    {
      uint64_t v8 = sub_1010F7BE8((double)v5 * 60.0, (double)v6 * 60.0, (double)(60 * v7));
      swift_release();
      swift_release();
      *a2 = v8;
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001CC4B0(char a1, uint64_t a2)
{
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 40) = v2;
  *(unsigned char *)(v3 + 120) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v3 + 48) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v4 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  *(void *)(v3 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_1001CC5C0, v2, 0);
}

uint64_t sub_1001CC5C0()
{
  *(void *)(v0 + 16) = &_swiftEmptySetSingleton;
  if (sub_1001CA884(*(unsigned char *)(v0 + 120)) == 0x646563726F66 && v1 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
    {
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v4;
      uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DC0);
      void *v4 = v0;
      v4[1] = sub_1001CC93C;
      uint64_t v6 = *(void *)(v0 + 40);
      return unsafeBlocking<A>(_:)(v0 + 24, sub_1001D46D0, v6, v5);
    }
  }
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 48);
  sub_10001D074(*(void *)(v0 + 32), v9, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 48), &qword_101638CF0);
    uint64_t v10 = &_swiftEmptySetSingleton;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v13 = *(char **)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v11, *(void *)(v0 + 48), v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v11, v15);
    sub_100DC8CB8(v12, v13);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v16(v12, v15);
    v16(v11, v15);
    uint64_t v10 = *(void **)(v0 + 16);
  }
  *(void *)(v0 + 104) = v10;
  if (v10[2])
  {
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1001CCBD8;
    char v18 = *(unsigned char *)(v0 + 120);
    return sub_1001D02A8((uint64_t)v10, v18);
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_1001CC93C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1001CCA54, v1, 0);
}

uint64_t sub_1001CCA54()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 104) = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001CCBD8;
    char v3 = *(unsigned char *)(v0 + 120);
    return sub_1001D02A8(v1, v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001CCBD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001CCD04, v1, 0);
}

uint64_t sub_1001CCD04()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CCD8C(int a1, uint64_t a2)
{
  uint64_t v62 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v65 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v63 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v59 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v60 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v67 = (char *)&v50 - v19;
  __chkstk_darwin(v18);
  unint64_t v68 = (char *)&v50 - v20;
  uint64_t v61 = v2;
  if (sub_1001CA9F0())
  {
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v71 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v69 & 1) == 0)
    {
      uint64_t v56 = v7;
      static DispatchTime.now()();
      int v57 = a1;
      unint64_t v22 = sub_1001CA884(a1);
      uint64_t v55 = v6;
      if (v22 == 0x646572696170 && v23 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
LABEL_19:
          uint64_t v58 = *(void *)(v61 + 128);
          uint64_t v39 = v66;
          (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v67, v68, v14);
          uint64_t v40 = swift_allocObject();
          swift_weakInit();
          uint64_t v41 = v60;
          sub_10001D074(v62, v60, &qword_101638CF0);
          unint64_t v42 = (*(unsigned __int8 *)(v59 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
          unint64_t v43 = (v10 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v44 = swift_allocObject();
          *(unsigned char *)(v44 + 16) = v57;
          sub_10001D608(v41, v44 + v42, &qword_101638CF0);
          *(void *)(v44 + v43) = v40;
          uint64_t v74 = sub_1001D42DC;
          uint64_t v75 = v44;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          unint64_t v71 = 1107296256;
          char v72 = sub_1004B5480;
          unsigned int v73 = &unk_1015B34F8;
          uint64_t v45 = _Block_copy(&aBlock);
          swift_retain();
          unint64_t v46 = v63;
          static DispatchQoS.unspecified.getter();
          uint64_t v69 = _swiftEmptyArrayStorage;
          sub_1001D4388((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          unint64_t v47 = v55;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          uint64_t v48 = v67;
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
          _Block_release(v45);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v47, v4);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v56);
          uint64_t v49 = *(void (**)(char *, uint64_t))(v39 + 8);
          v49(v48, v14);
          v49(v68, v14);
          swift_release();
          return swift_release();
        }
      }
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v25 = sub_1010ABDC4(aBlock);
      swift_bridgeObjectRelease();
      uint64_t v26 = 60 * v25;
      if ((unsigned __int128)(v25 * (__int128)60) >> 64 == (60 * v25) >> 63)
      {
        uint64_t v54 = v4;
        int v53 = static os_log_type_t.default.getter();
        if (qword_1016372F8 == -1)
        {
LABEL_18:
          uint64_t v52 = qword_10170F050;
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_101347BA0;
          uint64_t aBlock = v26;
          uint64_t v51 = v26;
          uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v30 = v29;
          *(void *)(v27 + 56) = &type metadata for String;
          unint64_t v31 = sub_10000B4CC();
          *(void *)(v27 + 64) = v31;
          *(void *)(v27 + 32) = v28;
          *(void *)(v27 + 40) = v30;
          unint64_t v32 = sub_1001CA884(v57);
          *(void *)(v27 + 96) = &type metadata for String;
          *(void *)(v27 + 104) = v31;
          *(void *)(v27 + 72) = v32;
          *(void *)(v27 + 80) = v33;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          static DispatchTime.now()();
          *uint64_t v13 = v51;
          uint64_t v34 = v58;
          (*(void (**)(uint64_t *, void, uint64_t))(v58 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v11);
          uint64_t v35 = v67;
          + infix(_:_:)();
          (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v13, v11);
          uint64_t v36 = v66;
          uint64_t v37 = *(void (**)(char *, uint64_t))(v66 + 8);
          v37(v17, v14);
          uint64_t v38 = v68;
          v37(v68, v14);
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v38, v35, v14);
          uint64_t v4 = v54;
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_18;
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
  return result;
}

uint64_t sub_1001CD708(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v32 + 64);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v35 = a3 + 16;
  int v34 = static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  uint64_t v33 = qword_10170F050;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  unint64_t v13 = sub_1001CA884(a1);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  sub_10001D074(a2, (uint64_t)v11, &qword_101638CF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v17) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
    uint64_t v19 = (uint64_t *)(v12 + 72);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
  }
  else
  {
    uint64_t v31 = v7;
    uint64_t v20 = a2;
    uint64_t v21 = v9;
    char v22 = a1;
    uint64_t v23 = UUID.uuidString.getter();
    unint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v17);
    uint64_t v19 = (uint64_t *)(v12 + 72);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
    if (v25)
    {
      *uint64_t v19 = v23;
      a1 = v22;
      uint64_t v9 = v21;
      a2 = v20;
      goto LABEL_9;
    }
    a1 = v22;
    uint64_t v9 = v21;
    a2 = v20;
  }
  *uint64_t v19 = 1701736302;
  unint64_t v25 = 0xE400000000000000;
LABEL_9:
  *(void *)(v12 + 80) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v27 = Strong;
    type metadata accessor for Transaction();
    sub_10001D074(a2, (uint64_t)v9, &qword_101638CF0);
    unint64_t v28 = (*(unsigned __int8 *)(v32 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v27;
    *(unsigned char *)(v29 + 24) = a1;
    sub_10001D608((uint64_t)v9, v29 + v28, &qword_101638CF0);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    return swift_release();
  }
  else
  {
    static os_log_type_t.default.getter();
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_1001CDAE8(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 64) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  type metadata accessor for UUID();
  *(void *)(v3 + 32) = swift_task_alloc();
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(v4 + 64);
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1001CDBE0, 0, 0);
}

uint64_t sub_1001CDBE0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem();
  sub_10001D074(v4, v1, &qword_101638CF0);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(unsigned char *)(v7 + 24) = v3;
  sub_10001D608(v1, v7 + v6, &qword_101638CF0);
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001CDD40(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_100030F18;
  return sub_1001CC4B0(a2, a3);
}

uint64_t sub_1001CDDEC(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v3 = type metadata accessor for BeaconObservation();
  uint64_t v5 = v3 - 8;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v28 = v12 + 16;
  v26(v10, a1, v11);
  static Date.trustedNow.getter((uint64_t)&v10[*(int *)(v5 + 28)]);
  v10[*(int *)(v5 + 32)] = 1;
  uint64_t v21 = *(void *)(v1 + 120);
  uint64_t v13 = v21;
  uint64_t v25 = sub_10000588C(&qword_10163A778);
  uint64_t v14 = *(void *)(v4 + 72);
  uint64_t v15 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v23 = v15 | 7;
  uint64_t v24 = v16 + v14;
  uint64_t v17 = swift_allocObject();
  long long v22 = xmmword_101342130;
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  sub_1001D40B8((uint64_t)v10, v17 + v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  type metadata accessor for Transaction();
  uint64_t v33 = v13;
  uint64_t v34 = v17;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  v26(v8, v27, v11);
  static Date.trustedNow.getter((uint64_t)&v8[*(int *)(v5 + 28)]);
  v8[*(int *)(v5 + 32)] = 12;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v22;
  sub_1001D40B8((uint64_t)v8, v18 + v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v29 = v21;
  uint64_t v30 = v18;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  sub_1001D4120((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  return sub_1001D4120((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_1001CE0DC(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[26] = v3;
  v2[27] = *(void *)(v3 - 8);
  v2[28] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  v2[30] = v4;
  v2[31] = *(void *)(v4 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  v2[33] = v5;
  v2[34] = *(void *)(v5 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[36] = v6;
  v2[37] = *(void *)(v6 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  return _swift_task_switch(sub_1001CE320, v1, 0);
}

uint64_t sub_1001CE320()
{
  uint64_t v1 = sub_101158244((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 168) = v1;
  *(void *)(v0 + 352) = v1;
  if (!sub_1001CA9F0())
  {
    uint64_t v16 = v1;
    static os_log_type_t.default.getter();
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v13(v16);
  }
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned int v4 = [v2 BOOLForKey:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(v0 + 200) + 120);
    swift_retain();
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = sub_1001D3E00(v6, v5, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1001D3848);
    swift_release();
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.default.getter();
      if (qword_1016372F8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_101342130;
      sub_1001D4388(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_retain();
      uint64_t v9 = Set.description.getter();
      uint64_t v11 = v10;
      swift_release();
      *(void *)(v8 + 56) = &type metadata for String;
      *(void *)(v8 + 64) = sub_10000B4CC();
      *(void *)(v8 + 32) = v9;
      *(void *)(v8 + 40) = v11;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = v7;
    }
    else
    {
      swift_release();
      static os_log_type_t.default.getter();
      if (qword_1016372F8 != -1) {
        swift_once();
      }
      uint64_t v16 = v1;
      os_log(_:dso:log:_:_:)();
    }
    goto LABEL_8;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v17 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1001CE7F0;
    return v17();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001CE7F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CE908, v2, 0);
}

uint64_t sub_1001CE908()
{
  uint64_t v1 = v0[46];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  if (v1)
  {
    uint64_t v2 = v0[46];
    return _swift_task_switch(sub_1001CEAB0, v2, 0);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v5 = v0[44];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v3 = (uint64_t (*)(uint64_t))v0[1];
    return v3(v5);
  }
}

uint64_t sub_1001CEAB0()
{
  *(void *)(v0 + 376) = *(void *)(*(void *)(v0 + 368) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001CEB24, 0, 0);
}

uint64_t sub_1001CEB24()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  NSString v3 = (void *)swift_task_alloc();
  v0[48] = v3;
  v3[2] = v1;
  v3[3] = sub_1001D4090;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[49] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DD0);
  void *v4 = v0;
  v4[1] = sub_1001CEC3C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 20, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001D4098, v3, v5);
}

uint64_t sub_1001CEC3C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 400) = *(void *)(v1 + 160);
  return _swift_task_switch(sub_1001CEDAC, v2, 0);
}

uint64_t sub_1001CEDAC()
{
  uint64_t v1 = v0[50];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[37];
    uint64_t v14 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v4 = v1 + 32;
    uint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001D010(v4, (uint64_t)(v0 + 2));
      uint64_t v6 = v0[5];
      uint64_t v7 = v0[6];
      sub_10001CD44(v0 + 2, v6);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v6);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v5[2] + 1, 1);
        uint64_t v5 = v14;
      }
      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000B7034(v8 > 1, v9 + 1, 1);
        uint64_t v5 = v14;
      }
      uint64_t v10 = v0[43];
      uint64_t v11 = v0[36];
      v5[2] = v9 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v9, v10, v11);
      uint64_t v14 = v5;
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  v0[51] = sub_101158244((uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v12 = v0[46];
  return _swift_task_switch(sub_1001CEF8C, v12, 0);
}

uint64_t sub_1001CEF8C()
{
  *(void *)(v0 + 416) = *(void *)(*(void *)(v0 + 368) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001CF000, 0, 0);
}

uint64_t sub_1001CF000()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[46];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[53] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[54] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  void *v4 = v0;
  v4[1] = sub_1001CF11C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 22, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_1001CF11C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 440) = *(void *)(v1 + 176);
  return _swift_task_switch(sub_1001CF28C, v2, 0);
}

uint64_t sub_1001CF28C()
{
  uint64_t v1 = v0[55];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[37];
    uint64_t v4 = v0[34];
    uint64_t v17 = v0[33];
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[42];
      uint64_t v9 = v0[35];
      uint64_t v8 = v0[36];
      sub_1001D40B8(v5, v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v9 + *(int *)(v17 + 20), v8);
      sub_1001D4120(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v6[2] + 1, 1);
        uint64_t v6 = v18;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v18;
      }
      uint64_t v12 = v0[42];
      uint64_t v13 = v0[36];
      uint64_t v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v12, v13);
      uint64_t v18 = v6;
      v5 += v16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  v0[56] = sub_101158244((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v14 = v0[46];
  return _swift_task_switch(sub_1001CF4A4, v14, 0);
}

uint64_t sub_1001CF4A4()
{
  *(void *)(v0 + 456) = *(void *)(*(void *)(v0 + 368) + 136);
  swift_retain();
  return _swift_task_switch(sub_1001CF518, 0, 0);
}

uint64_t sub_1001CF518()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[46];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[58] = v3;
  v3[2] = v1;
  v3[3] = sub_1001D40A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[59] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163E7D0);
  void *v4 = v0;
  v4[1] = sub_1001CF634;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 23, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001D40AC, v3, v5);
}

uint64_t sub_1001CF634()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 480) = *(void *)(v1 + 184);
  return _swift_task_switch(sub_1001CF7A4, v2, 0);
}

uint64_t sub_1001CF7A4()
{
  uint64_t v1 = v0[60];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[37];
    uint64_t v4 = v0[31];
    uint64_t v92 = v0[30];
    uint64_t v94 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v90 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[41];
      uint64_t v8 = v0[36];
      uint64_t v9 = v0[32];
      sub_1001D40B8(v5, v9, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v9 + *(int *)(v92 + 24), v8);
      sub_1001D4120(v9, type metadata accessor for OwnedBeaconGroup);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v6[2] + 1, 1);
        uint64_t v6 = v94;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v94;
      }
      uint64_t v12 = v0[41];
      uint64_t v13 = v0[36];
      uint64_t v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v12, v13);
      uint64_t v94 = v6;
      v5 += v90;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v0[56];
  uint64_t v15 = v0[51];
  uint64_t v16 = v0[37];
  uint64_t v17 = v0[27];
  uint64_t v18 = v0[24];
  uint64_t v74 = v0[25];
  uint64_t v19 = sub_101158244((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v77 = v18 + 56;
  uint64_t v20 = -1 << *(unsigned char *)(v18 + 32);
  if (-v20 < 64) {
    uint64_t v21 = ~(-1 << -(char)v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & *(void *)(v18 + 56);
  int64_t v78 = (unint64_t)(63 - v20) >> 6;
  uint64_t v82 = (void (**)(void, uint64_t, uint64_t, void))(v16 + 56);
  BOOL v79 = (void (**)(void, void, void))(v16 + 32);
  uint64_t v87 = v14 + 56;
  uint64_t v81 = v16;
  uint64_t v23 = (void (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v86 = v19;
  uint64_t v85 = v19 + 56;
  uint64_t v89 = v15 + 56;
  uint64_t v91 = v15;
  unsigned int v73 = (void (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v80 = v18;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  uint64_t v88 = v14;
  if (!v22) {
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v26 = __clz(__rbit64(v22));
  uint64_t v27 = (v22 - 1) & v22;
  for (unint64_t i = v26 | (v25 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v25 << 6))
  {
    uint64_t v32 = v0[36];
    uint64_t v33 = v0[29];
    uint64_t v34 = *(void *)(v81 + 72);
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v81 + 16);
    v35(v33, *(void *)(v80 + 48) + v34 * i, v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v33, 0, 1, v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v33, 1, v32) == 1) {
      goto LABEL_56;
    }
    (*v79)(v0[40], v0[29], v0[36]);
    unint64_t v83 = v27;
    int64_t v84 = v25;
    if (*(void *)(v14 + 16))
    {
      sub_1001D4388(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v37 = -1 << *(unsigned char *)(v14 + 32);
      unint64_t v38 = v36 & ~v37;
      if ((*(void *)(v87 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38))
      {
        uint64_t v39 = ~v37;
        while (1)
        {
          uint64_t v40 = v0[39];
          uint64_t v41 = v0[36];
          v35(v40, *(void *)(v14 + 48) + v38 * v34, v41);
          sub_1001D4388((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v43 = *v23;
          (*v23)(v40, v41);
          if (v42) {
            break;
          }
          unint64_t v38 = (v38 + 1) & v39;
          uint64_t v14 = v88;
          if (((*(void *)(v87 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
            goto LABEL_32;
          }
        }
        uint64_t v69 = v0[39];
        unint64_t v68 = v0[40];
        uint64_t v70 = (char *)v0[38];
        uint64_t v71 = v0[36];
        v35((uint64_t)v70, v68, v71);
        sub_100DC8CB8(v69, v70);
        v43(v69, v71);
        unint64_t v66 = v68;
        uint64_t v67 = v71;
LABEL_48:
        uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v43)(v66, v67);
        uint64_t v14 = v88;
        unint64_t v22 = v83;
        int64_t v25 = v84;
        if (v83) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
    }
LABEL_32:
    if (*(void *)(v86 + 16))
    {
      sub_1001D4388(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v45 = -1 << *(unsigned char *)(v86 + 32);
      unint64_t v46 = v44 & ~v45;
      if ((*(void *)(v85 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46))
      {
        uint64_t v47 = ~v45;
        do
        {
          uint64_t v48 = v0[39];
          uint64_t v49 = v0[36];
          v35(v48, *(void *)(v86 + 48) + v46 * v34, v49);
          sub_1001D4388((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v43 = *v23;
          (*v23)(v48, v49);
          if (v50) {
            goto LABEL_46;
          }
          unint64_t v46 = (v46 + 1) & v47;
        }
        while (((*(void *)(v85 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) != 0);
      }
    }
    if (*(void *)(v91 + 16))
    {
      sub_1001D4388(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v51 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v52 = -1 << *(unsigned char *)(v91 + 32);
      unint64_t v53 = v51 & ~v52;
      if ((*(void *)(v89 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53))
      {
        uint64_t v54 = ~v52;
        while (1)
        {
          uint64_t v55 = v0[39];
          uint64_t v56 = v0[36];
          v35(v55, *(void *)(v91 + 48) + v53 * v34, v56);
          sub_1001D4388((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v43 = *v23;
          (*v23)(v55, v56);
          if (v57) {
            break;
          }
          unint64_t v53 = (v53 + 1) & v54;
          if (((*(void *)(v89 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
            goto LABEL_42;
          }
        }
LABEL_46:
        unint64_t v66 = v0[40];
        uint64_t v67 = v0[36];
        goto LABEL_48;
      }
    }
LABEL_42:
    static os_log_type_t.error.getter();
    int64_t v25 = v84;
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    uint64_t v58 = v0[40];
    uint64_t v59 = v0[28];
    uint64_t v75 = v0[26];
    uint64_t v76 = v0[36];
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_101342130;
    uint64_t v61 = UUID.uuidString.getter();
    uint64_t v63 = v62;
    *(void *)(v60 + 56) = &type metadata for String;
    *(void *)(v60 + 64) = sub_10000B4CC();
    *(void *)(v60 + 32) = v61;
    *(void *)(v60 + 40) = v63;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void *)(v74 + 120);
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v65 = (void *)swift_task_alloc();
    v65[2] = v64;
    void v65[3] = v58;
    v65[4] = sub_1000054FC;
    v65[5] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    swift_task_dealloc();
    (*v73)(v59, v75);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v23)(v58, v76);
    uint64_t v14 = v88;
    unint64_t v22 = v83;
    if (v83) {
      goto LABEL_14;
    }
LABEL_15:
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      return result;
    }
    if (v25 >= v78) {
      goto LABEL_55;
    }
    unint64_t v30 = *(void *)(v77 + 8 * v25);
    if (!v30) {
      break;
    }
LABEL_25:
    uint64_t v27 = (v30 - 1) & v30;
  }
  int64_t v31 = v25 + 1;
  if (v25 + 1 >= v78) {
    goto LABEL_55;
  }
  unint64_t v30 = *(void *)(v77 + 8 * v31);
  if (v30) {
    goto LABEL_24;
  }
  int64_t v31 = v25 + 2;
  if (v25 + 2 >= v78) {
    goto LABEL_55;
  }
  unint64_t v30 = *(void *)(v77 + 8 * v31);
  if (v30)
  {
LABEL_24:
    int64_t v25 = v31;
    goto LABEL_25;
  }
  int64_t v31 = v25 + 3;
  if (v25 + 3 < v78)
  {
    unint64_t v30 = *(void *)(v77 + 8 * v31);
    if (!v30)
    {
      while (1)
      {
        int64_t v25 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_60;
        }
        if (v25 >= v78) {
          goto LABEL_55;
        }
        unint64_t v30 = *(void *)(v77 + 8 * v25);
        ++v31;
        if (v30) {
          goto LABEL_25;
        }
      }
    }
    goto LABEL_24;
  }
LABEL_55:
  (*v82)(v0[29], 1, 1, v0[36]);
LABEL_56:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v93 = v0[21];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v72 = (uint64_t (*)(uint64_t))v0[1];
  return v72(v93);
}

uint64_t sub_1001D02A8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 425) = a2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v2;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v3 + 240) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BeaconObservation();
  *(void *)(v3 + 248) = v4;
  *(void *)(v3 + 256) = *(void *)(v4 - 8);
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 272) = v5;
  *(void *)(v3 + 280) = *(void *)(v5 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v3 + 304) = swift_task_alloc();
  sub_10000588C(&qword_101639428);
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  return _swift_task_switch(sub_1001D04AC, v2, 0);
}

uint64_t sub_1001D04AC()
{
  v0[41] = *(void *)(v0[27] + 120);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  v0[42] = 0;
  uint64_t v1 = sub_1010ABDD8(v0[24]);
  swift_bridgeObjectRelease();
  if (sub_1010F83B8((double)v1 * 60.0))
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F8 == -1) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  v0[43] = v2;
  if (!v2)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F8 == -1)
    {
LABEL_11:
      os_log(_:dso:log:_:_:)();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
LABEL_14:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v3 = (void *)swift_task_alloc();
  v0[44] = v3;
  void *v3 = v0;
  v3[1] = sub_1001D0774;
  uint64_t v4 = v0[26];
  return sub_1001CE0DC(v4);
}

uint64_t sub_1001D0774(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D088C, v2, 0);
}

uint64_t sub_1001D088C()
{
  if (*(void *)(v0[45] + 16))
  {
    type metadata accessor for AnalyticsEvent(0);
    uint64_t v1 = (char *)swift_allocObject();
    v0[46] = v1;
    swift_defaultActor_initialize();
    *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v3 = type metadata accessor for DispatchTime();
    v0[47] = v3;
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v0[48] = v5;
    v0[49] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v5(v2, 1, 1, v3);
    v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
    *((void *)v1 + 15) = 0xD000000000000032;
    *((void *)v1 + 16) = 0x80000001013F5300;
    return _swift_task_switch(sub_1001D0B00, v1, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    uint64_t v6 = (void *)v0[43];
    os_log(_:dso:log:_:_:)();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1001D0B00()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[48];
  uint64_t v3 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[27];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_10001D608(v4, v5, &qword_101639428);
  uint64_t v7 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v7);
  swift_endAccess();
  return _swift_task_switch(sub_1001D0BF4, v6, 0);
}

uint64_t sub_1001D0BF4()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001D0CBC;
  uint64_t v2 = *(void *)(v0 + 216);
  return unsafeBlocking<A>(_:)(v0 + 200, sub_1001D3FD8, v2, &type metadata for Int);
}

uint64_t sub_1001D0CBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1001D0DD4, v1, 0);
}

uint64_t sub_1001D0DD4()
{
  uint64_t v1 = v0[46];
  v0[51] = v0[25];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001D0E48, v1, 0);
}

uint64_t sub_1001D0E48()
{
  uint64_t v1 = *(void *)(v0 + 336);
  sub_1011A1418(*(void *)(v0 + 368), *(void *)(v0 + 408), *(void *)(v0 + 208), *(unsigned char *)(v0 + 425));
  *(void *)(v0 + 416) = v1;
  uint64_t v2 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v3 = sub_1001D1B38;
  }
  else
  {
    uint64_t v3 = sub_1001D0EF0;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1001D0EF0()
{
  int64_t v2 = 0;
  uint64_t v80 = (uint64_t *)(v1 + 16);
  uint64_t v91 = *(void *)(v1 + 416);
  uint64_t v3 = *(void *)(v1 + 280);
  uint64_t v4 = *(void *)(v1 + 360);
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v77 = v4 + 56;
  uint64_t v86 = v4;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << *(unsigned char *)(v86 + 32);
  uint64_t v84 = *(void *)(v1 + 256);
  uint64_t v92 = *(void *)(v1 + 248);
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & v5;
  unint64_t v83 = (const __CFString **)(*(void *)(v1 + 216) + 144);
  int64_t v78 = (unint64_t)(63 - v7) >> 6;
  uint64_t v87 = (void (**)(void, uint64_t, uint64_t, void))(v3 + 56);
  uint64_t v82 = (void (**)(uint64_t, void, uint64_t))(v3 + 32);
  unsigned int v79 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  uint64_t v85 = *(void *)(v1 + 280);
  uint64_t v81 = (const __CFString **)(v3 + 8);
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      uint64_t v15 = (v8 - 1) & v8;
      unint64_t v16 = v14 | (v2 << 6);
    }
    else
    {
      int64_t v17 = v2 + 1;
      if (__OFADD__(v2, 1)) {
        goto LABEL_67;
      }
      if (v17 >= v78)
      {
LABEL_57:
        (*v87)(*(void *)(v1 + 304), 1, 1, *(void *)(v1 + 272));
LABEL_58:
        swift_release();
        CFStringRef v0 = (const __CFString *)SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification;
        static os_log_type_t.default.getter();
        if (qword_1016372F8 == -1)
        {
LABEL_59:
          uint64_t v74 = *(__CFNotificationCenter **)(v1 + 344);
          os_log(_:dso:log:_:_:)();
          CFNotificationCenterPostNotification(v74, v0, 0, 0, 1u);
          swift_release();

          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v75 = *(uint64_t (**)(void))(v1 + 8);
          return v75();
        }
LABEL_69:
        swift_once();
        goto LABEL_59;
      }
      unint64_t v18 = *(void *)(v77 + 8 * v17);
      ++v2;
      if (!v18)
      {
        int64_t v2 = v17 + 1;
        if (v17 + 1 >= v78) {
          goto LABEL_57;
        }
        unint64_t v18 = *(void *)(v77 + 8 * v2);
        if (!v18)
        {
          int64_t v2 = v17 + 2;
          if (v17 + 2 >= v78) {
            goto LABEL_57;
          }
          unint64_t v18 = *(void *)(v77 + 8 * v2);
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v78) {
              goto LABEL_57;
            }
            unint64_t v18 = *(void *)(v77 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                int64_t v2 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_68;
                }
                if (v2 >= v78) {
                  goto LABEL_57;
                }
                unint64_t v18 = *(void *)(v77 + 8 * v2);
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v2 = v19;
          }
        }
      }
LABEL_21:
      uint64_t v15 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v2 << 6);
    }
    uint64_t v20 = *(void *)(v1 + 304);
    uint64_t v21 = *(void *)(v1 + 272);
    uint64_t v22 = *(void *)(v85 + 72);
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v85 + 16);
    v23(v20, *(void *)(v86 + 48) + v22 * v16, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v20, 0, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v20, 1, v21) == 1) {
      goto LABEL_58;
    }
    uint64_t v88 = v22;
    unint64_t v24 = *(void *)(v1 + 296);
    uint64_t v25 = *(void *)(v1 + 264);
    uint64_t v26 = *(void *)(v1 + 272);
    (*v82)(v24, *(void *)(v1 + 304), v26);
    uint64_t v93 = (void (*)(uint64_t, uint64_t, uint64_t))v23;
    v23(v25, v24, v26);
    uint64_t v27 = *(int *)(v92 + 20);
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    uint64_t v28 = v25 + v27;
    *(void *)(v1 + 160) = 0x7365547265646E75;
    *(void *)(v1 + 168) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    unint64_t v89 = v15;
    int64_t v90 = v2;
    if (*(unsigned char *)(v1 + 424) == 1)
    {
      id v29 = [self sharedInstance];
      unsigned int v30 = [v29 isInternalBuild];

      if (v30)
      {
        if (qword_101636818 != -1) {
          swift_once();
        }
        uint64_t v31 = *(void *)(v1 + 240);
        uint64_t v32 = sub_100010324(*(void *)(v1 + 232), (uint64_t)qword_101638DF0);
        swift_beginAccess();
        sub_10001D074(v32, v31, (uint64_t *)&unk_10163AC90);
        uint64_t v33 = type metadata accessor for Date();
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) != 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v34 + 32))(v28, *(void *)(v1 + 240), v33);
          goto LABEL_40;
        }
        sub_10001DAB4(*(void *)(v1 + 240), (uint64_t *)&unk_10163AC90);
      }
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    *(void *)(v1 + 40) = My;
    *(void *)(v1 + 48) = sub_1001D4388((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v36 = sub_10001D958(v80);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v36, v79, My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
    if ((My & 1) == 0)
    {
      Date.init()();
LABEL_40:
      uint64_t v38 = v91;
      goto LABEL_47;
    }
    sub_100F46C4C();
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v38 = v91;
    if (qword_101637200 != -1) {
      swift_once();
    }
    sub_10000588C(&qword_101639450);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (Current - *(double *)(v1 + 176) - *(double *)(v1 + 184) <= 86400.0) {
      goto LABEL_46;
    }
    uint64_t v39 = *(void *)(v1 + 224);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v40 = type metadata accessor for TaskPriority();
    uint64_t v41 = *(void *)(v40 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, 1, 1, v40);
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = 0;
    unint64_t v43 = (void *)(v42 + 16);
    *(void *)(v42 + 24) = 0;
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40);
    uint64_t v45 = *(void *)(v1 + 224);
    if (v44 == 1)
    {
      sub_10001DAB4(*(void *)(v1 + 224), &qword_10164DBB0);
      if (!*v43) {
        goto LABEL_42;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v40);
      if (!*v43)
      {
LABEL_42:
        uint64_t v46 = 0;
        uint64_t v48 = 0;
        goto LABEL_43;
      }
    }
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v46 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v48 = v47;
    swift_unknownObjectRelease();
LABEL_43:
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = &unk_101639458;
    *(void *)(v49 + 24) = v42;
    if (v48 | v46)
    {
      *(void *)(v1 + 56) = 0;
      *(void *)(v1 + 64) = 0;
      *(void *)(v1 + 72) = v46;
      *(void *)(v1 + 80) = v48;
    }
    swift_task_create();
    swift_release();
LABEL_46:
    Date.init(timeIntervalSinceReferenceDate:)();
LABEL_47:
    uint64_t v50 = *(void *)(v1 + 328);
    uint64_t v51 = *(void *)(v1 + 288);
    uint64_t v52 = *(void *)(v1 + 296);
    uint64_t v53 = *(void *)(v1 + 264);
    uint64_t v54 = *(void *)(v1 + 272);
    *(unsigned char *)(v53 + *(int *)(v92 + 24)) = 9;
    sub_10000588C(&qword_10163A778);
    unint64_t v55 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_101342130;
    sub_1001D40B8(v53, v56 + v55, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    type metadata accessor for Transaction();
    char v57 = (void *)swift_task_alloc();
    v57[2] = v50;
    v57[3] = v56;
    v57[4] = 0;
    v57[5] = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v93(v51, v52, v54);
    swift_beginAccess();
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CFStringRef v0 = *v83;
    char *v83 = (const __CFString *)0x8000000000000000;
    unint64_t v60 = sub_1007240CC(v51);
    data = v0->data;
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = (uint64_t)&data[v62];
    if (__OFADD__(data, v62))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    char v64 = v59;
    if (v0->length < v63) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100E7F8EC();
    }
LABEL_53:
    uint64_t v68 = *(void *)(v1 + 368);
    uint64_t v91 = v38;
    if (v64)
    {
      uint64_t length = v0[1].length;
      swift_release();
      *(void *)(length + 8 * v60) = v68;
    }
    else
    {
      uint64_t v69 = *(void *)(v1 + 288);
      uint64_t v70 = *(void *)(v1 + 272);
      *((void *)&v0[2].isa + (v60 >> 6)) |= 1 << v60;
      v93((uint64_t)&v0[1].data[v60 * v88], v69, v70);
      *(void *)(v0[1].length + 8 * v60) = v68;
      uint64_t v71 = v0->data;
      BOOL v72 = __OFADD__(v71, 1);
      unsigned int v73 = v71 + 1;
      if (v72) {
        goto LABEL_66;
      }
      v0->data = v73;
    }
    uint64_t v11 = *(void *)(v1 + 288);
    uint64_t v10 = *(void *)(v1 + 296);
    uint64_t v13 = *(void *)(v1 + 264);
    uint64_t v12 = *(void *)(v1 + 272);
    char *v83 = v0;
    swift_bridgeObjectRelease();
    CFStringRef v0 = *v81;
    ((void (*)(uint64_t, uint64_t))*v81)(v11, v12);
    swift_endAccess();
    sub_1001D4120(v13, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, uint64_t))v0)(v10, v12);
    unint64_t v8 = v89;
    int64_t v2 = v90;
  }
  uint64_t v65 = *(void *)(v1 + 288);
  sub_100E67CC4(v63, isUniquelyReferenced_nonNull_native);
  unint64_t v66 = sub_1007240CC(v65);
  if ((v64 & 1) == (v67 & 1))
  {
    unint64_t v60 = v66;
    goto LABEL_53;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1001D1B38()
{
  uint64_t v91 = 0;
  int64_t v2 = 0;
  uint64_t v80 = (uint64_t *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 360);
  uint64_t v4 = *(void *)(v1 + 280);
  uint64_t v84 = *(void *)(v1 + 256);
  uint64_t v92 = *(void *)(v1 + 248);
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t v77 = v3 + 56;
  uint64_t v86 = v3;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & v5;
  unint64_t v83 = (const __CFString **)(*(void *)(v1 + 216) + 144);
  int64_t v78 = (unint64_t)(63 - v7) >> 6;
  uint64_t v87 = (void (**)(void, uint64_t, uint64_t, void))(v4 + 56);
  uint64_t v82 = (void (**)(uint64_t, void, uint64_t))(v4 + 32);
  unsigned int v79 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  uint64_t v85 = *(void *)(v1 + 280);
  uint64_t v81 = (const __CFString **)(v4 + 8);
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      uint64_t v15 = (v8 - 1) & v8;
      unint64_t v16 = v14 | (v2 << 6);
    }
    else
    {
      int64_t v17 = v2 + 1;
      if (__OFADD__(v2, 1)) {
        goto LABEL_67;
      }
      if (v17 >= v78)
      {
LABEL_57:
        (*v87)(*(void *)(v1 + 304), 1, 1, *(void *)(v1 + 272));
LABEL_58:
        swift_release();
        CFStringRef v0 = (const __CFString *)SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification;
        static os_log_type_t.default.getter();
        if (qword_1016372F8 == -1)
        {
LABEL_59:
          uint64_t v74 = *(__CFNotificationCenter **)(v1 + 344);
          os_log(_:dso:log:_:_:)();
          CFNotificationCenterPostNotification(v74, v0, 0, 0, 1u);
          swift_release();

          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v75 = *(uint64_t (**)(void))(v1 + 8);
          return v75();
        }
LABEL_69:
        swift_once();
        goto LABEL_59;
      }
      unint64_t v18 = *(void *)(v77 + 8 * v17);
      ++v2;
      if (!v18)
      {
        int64_t v2 = v17 + 1;
        if (v17 + 1 >= v78) {
          goto LABEL_57;
        }
        unint64_t v18 = *(void *)(v77 + 8 * v2);
        if (!v18)
        {
          int64_t v2 = v17 + 2;
          if (v17 + 2 >= v78) {
            goto LABEL_57;
          }
          unint64_t v18 = *(void *)(v77 + 8 * v2);
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v78) {
              goto LABEL_57;
            }
            unint64_t v18 = *(void *)(v77 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                int64_t v2 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_68;
                }
                if (v2 >= v78) {
                  goto LABEL_57;
                }
                unint64_t v18 = *(void *)(v77 + 8 * v2);
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v2 = v19;
          }
        }
      }
LABEL_21:
      uint64_t v15 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v2 << 6);
    }
    uint64_t v20 = *(void *)(v1 + 304);
    uint64_t v21 = *(void *)(v1 + 272);
    uint64_t v22 = *(void *)(v85 + 72);
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v85 + 16);
    v23(v20, *(void *)(v86 + 48) + v22 * v16, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v20, 0, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v20, 1, v21) == 1) {
      goto LABEL_58;
    }
    uint64_t v88 = v22;
    unint64_t v24 = *(void *)(v1 + 296);
    uint64_t v25 = *(void *)(v1 + 264);
    uint64_t v26 = *(void *)(v1 + 272);
    (*v82)(v24, *(void *)(v1 + 304), v26);
    uint64_t v93 = (void (*)(uint64_t, uint64_t, uint64_t))v23;
    v23(v25, v24, v26);
    uint64_t v27 = *(int *)(v92 + 20);
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    uint64_t v28 = v25 + v27;
    *(void *)(v1 + 160) = 0x7365547265646E75;
    *(void *)(v1 + 168) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    unint64_t v89 = v15;
    int64_t v90 = v2;
    if (*(unsigned char *)(v1 + 424) == 1)
    {
      id v29 = [self sharedInstance];
      unsigned int v30 = [v29 isInternalBuild];

      if (v30)
      {
        if (qword_101636818 != -1) {
          swift_once();
        }
        uint64_t v31 = *(void *)(v1 + 240);
        uint64_t v32 = sub_100010324(*(void *)(v1 + 232), (uint64_t)qword_101638DF0);
        swift_beginAccess();
        sub_10001D074(v32, v31, (uint64_t *)&unk_10163AC90);
        uint64_t v33 = type metadata accessor for Date();
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) != 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v34 + 32))(v28, *(void *)(v1 + 240), v33);
          goto LABEL_40;
        }
        sub_10001DAB4(*(void *)(v1 + 240), (uint64_t *)&unk_10163AC90);
      }
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    *(void *)(v1 + 40) = My;
    *(void *)(v1 + 48) = sub_1001D4388((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v36 = sub_10001D958(v80);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v36, v79, My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v80);
    if ((My & 1) == 0)
    {
      Date.init()();
LABEL_40:
      uint64_t v38 = v91;
      goto LABEL_47;
    }
    sub_100F46C4C();
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v38 = v91;
    if (qword_101637200 != -1) {
      swift_once();
    }
    sub_10000588C(&qword_101639450);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (Current - *(double *)(v1 + 176) - *(double *)(v1 + 184) <= 86400.0) {
      goto LABEL_46;
    }
    uint64_t v39 = *(void *)(v1 + 224);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v40 = type metadata accessor for TaskPriority();
    uint64_t v41 = *(void *)(v40 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, 1, 1, v40);
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = 0;
    unint64_t v43 = (void *)(v42 + 16);
    *(void *)(v42 + 24) = 0;
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40);
    uint64_t v45 = *(void *)(v1 + 224);
    if (v44 == 1)
    {
      sub_10001DAB4(*(void *)(v1 + 224), &qword_10164DBB0);
      if (!*v43) {
        goto LABEL_42;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v40);
      if (!*v43)
      {
LABEL_42:
        uint64_t v46 = 0;
        uint64_t v48 = 0;
        goto LABEL_43;
      }
    }
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v46 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v48 = v47;
    swift_unknownObjectRelease();
LABEL_43:
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = &unk_101639458;
    *(void *)(v49 + 24) = v42;
    if (v48 | v46)
    {
      *(void *)(v1 + 56) = 0;
      *(void *)(v1 + 64) = 0;
      *(void *)(v1 + 72) = v46;
      *(void *)(v1 + 80) = v48;
    }
    swift_task_create();
    swift_release();
LABEL_46:
    Date.init(timeIntervalSinceReferenceDate:)();
LABEL_47:
    uint64_t v50 = *(void *)(v1 + 328);
    uint64_t v51 = *(void *)(v1 + 288);
    uint64_t v52 = *(void *)(v1 + 296);
    uint64_t v53 = *(void *)(v1 + 264);
    uint64_t v54 = *(void *)(v1 + 272);
    *(unsigned char *)(v53 + *(int *)(v92 + 24)) = 9;
    sub_10000588C(&qword_10163A778);
    unint64_t v55 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_101342130;
    sub_1001D40B8(v53, v56 + v55, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    type metadata accessor for Transaction();
    char v57 = (void *)swift_task_alloc();
    v57[2] = v50;
    v57[3] = v56;
    v57[4] = 0;
    v57[5] = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v93(v51, v52, v54);
    swift_beginAccess();
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CFStringRef v0 = *v83;
    char *v83 = (const __CFString *)0x8000000000000000;
    unint64_t v60 = sub_1007240CC(v51);
    data = v0->data;
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = (uint64_t)&data[v62];
    if (__OFADD__(data, v62))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    char v64 = v59;
    if (v0->length < v63) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100E7F8EC();
    }
LABEL_53:
    uint64_t v68 = *(void *)(v1 + 368);
    uint64_t v91 = v38;
    if (v64)
    {
      uint64_t length = v0[1].length;
      swift_release();
      *(void *)(length + 8 * v60) = v68;
    }
    else
    {
      uint64_t v69 = *(void *)(v1 + 288);
      uint64_t v70 = *(void *)(v1 + 272);
      *((void *)&v0[2].isa + (v60 >> 6)) |= 1 << v60;
      v93((uint64_t)&v0[1].data[v60 * v88], v69, v70);
      *(void *)(v0[1].length + 8 * v60) = v68;
      uint64_t v71 = v0->data;
      BOOL v72 = __OFADD__(v71, 1);
      unsigned int v73 = v71 + 1;
      if (v72) {
        goto LABEL_66;
      }
      v0->data = v73;
    }
    uint64_t v11 = *(void *)(v1 + 288);
    uint64_t v10 = *(void *)(v1 + 296);
    uint64_t v13 = *(void *)(v1 + 264);
    uint64_t v12 = *(void *)(v1 + 272);
    char *v83 = v0;
    swift_bridgeObjectRelease();
    CFStringRef v0 = *v81;
    ((void (*)(uint64_t, uint64_t))*v81)(v11, v12);
    swift_endAccess();
    sub_1001D4120(v13, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, uint64_t))v0)(v10, v12);
    unint64_t v8 = v89;
    int64_t v2 = v90;
  }
  uint64_t v65 = *(void *)(v1 + 288);
  sub_100E67CC4(v63, isUniquelyReferenced_nonNull_native);
  unint64_t v66 = sub_1007240CC(v65);
  if ((v64 & 1) == (v67 & 1))
  {
    unint64_t v60 = v66;
    goto LABEL_53;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

unint64_t sub_1001D2778(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BF90;
  *(void *)(inited + 32) = 0x496E6F6973736573;
  *(void *)(inited + 40) = 0xE900000000000044;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v11;
  *(unsigned char *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0xD000000000000014;
  *(void *)(inited + 72) = 0x80000001013F5460;
  *(void *)(inited + 80) = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000013;
  *(void *)(inited + 104) = 0x80000001013F5480;
  *(void *)(inited + 112) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(a2 + 16)];
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0xD000000000000013;
  *(void *)(inited + 136) = 0x80000001013F54A0;
  sub_1001CA884(a3);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v12;
  *(unsigned char *)(inited + 152) = 0;
  return sub_10092E03C(inited);
}

uint64_t sub_1001D2984()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 136);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB6D0(v8);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v3 = sub_1010ABDD8(v8);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v4 = sub_1010ABDC4(v8);
  uint64_t result = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v4 * (__int128)60) >> 64 == (60 * v4) >> 63)
  {
    uint64_t v6 = sub_10110060C(v2, (double)v3 * 60.0, (double)(60 * v4));
    swift_retain();
    uint64_t v7 = sub_1001D3E00((uint64_t)v6, v1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1001D3AE0);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1001D2B40()
{
  uint64_t v0 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v23 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t result = sub_100ACF5FC();
  uint64_t v10 = _swiftEmptyArrayStorage;
  unint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v22 = *((void *)result + 2);
  if (v22)
  {
    unint64_t v11 = 0;
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v21 = result;
    while (v11 < *((void *)result + 2))
    {
      unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v13 = *(void *)(v4 + 72);
      sub_1001D40B8((uint64_t)&result[v12 + v13 * v11], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1001D40B8((uint64_t)&v8[*(int *)(v3 + 24)], (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v14 = v0;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_1001D4120((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1)
      {
        sub_100098810((uint64_t)v8, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v10[2] + 1, 1);
        }
        uint64_t v10 = v24;
        unint64_t v17 = v24[2];
        unint64_t v16 = v24[3];
        if (v17 >= v16 >> 1)
        {
          sub_1000B74D8(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v24;
        }
        v10[2] = v17 + 1;
        sub_100098810(v23, (uint64_t)v10 + v12 + v17 * v13);
        uint64_t v0 = v14;
        uint64_t v3 = v19;
        uint64_t v4 = v20;
      }
      else
      {
        sub_1001D4120((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v0 = v14;
      }
      ++v11;
      uint64_t result = v21;
      if (v22 == v11)
      {
        uint64_t v10 = v24;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v18 = v10[2];
    swift_release();
    return (char *)v18;
  }
  return result;
}

uint64_t sub_1001D2E08()
{
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001D2E68()
{
  sub_1001D2E08();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FirmwareUpdateService()
{
  return self;
}

uint64_t sub_1001D2EB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4 - 8);
  uint64_t v8 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v39[-v9];
  uint64_t v11 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v39[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100ACD178((uint64_t)v13);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163B9F0);
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v48 = 0;
  }
  else
  {
    *((void *)&v47 + 1) = v14;
    uint64_t v48 = sub_1001D4388(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
    uint64_t v15 = sub_10001D958((uint64_t *)&v46);
    sub_100098810((uint64_t)v13, (uint64_t)v15);
  }
  sub_10001D608((uint64_t)&v46, (uint64_t)v49, (uint64_t *)&unk_10163BBE0);
  sub_10001D074((uint64_t)v49, (uint64_t)&v44, (uint64_t *)&unk_10163BBE0);
  if (v45)
  {
    sub_10001CEB0(&v44, (uint64_t)&v46);
    uint64_t v16 = *((void *)&v47 + 1);
    uint64_t v17 = v48;
    sub_10001CD44(&v46, *((uint64_t *)&v47 + 1));
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 96))(v16, v17))
    {
      uint64_t v18 = type metadata accessor for BeaconObservation();
      int v19 = *(unsigned __int8 *)(a1 + *(int *)(v18 + 24)) - 1;
      int v43 = *(unsigned __int8 *)(a1 + *(int *)(v18 + 24));
      switch(v19)
      {
        case 0:
          uint64_t v23 = type metadata accessor for UUID();
          unint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
          int v40 = 1;
          v24(v10, 1, 1, v23);
          goto LABEL_15;
        case 6:
        case 7:
        case 10:
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v10, 1, 1, v20);
          int v21 = 3;
          goto LABEL_14;
        case 9:
          uint64_t v25 = type metadata accessor for UUID();
          uint64_t v26 = *(void *)(v25 - 8);
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16))(v10, a1, v25);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v25);
          int v40 = 0;
          goto LABEL_15;
        case 15:
          uint64_t v27 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
          int v21 = 6;
          goto LABEL_14;
        case 33:
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 1, 1, v28);
          int v21 = 5;
          goto LABEL_14;
        case 34:
          uint64_t v29 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v10, 1, 1, v29);
          int v21 = 7;
LABEL_14:
          int v40 = v21;
LABEL_15:
          uint64_t v41 = v5;
          uint64_t v42 = v2;
          static os_log_type_t.default.getter();
          if (qword_1016372F8 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = xmmword_101347BA0;
          uint64_t v31 = UUID.uuidString.getter();
          uint64_t v33 = v32;
          *(void *)(v30 + 56) = &type metadata for String;
          unint64_t v34 = sub_10000B4CC();
          *(void *)(v30 + 64) = v34;
          *(void *)(v30 + 32) = v31;
          *(void *)(v30 + 40) = v33;
          unint64_t v35 = sub_10096A84C(v43);
          *(void *)(v30 + 96) = &type metadata for String;
          *(void *)(v30 + 104) = v34;
          *(void *)(v30 + 72) = v35;
          *(void *)(v30 + 80) = v36;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          type metadata accessor for Transaction();
          sub_10001D074((uint64_t)v10, (uint64_t)v8, &qword_101638CF0);
          unint64_t v37 = (*(unsigned __int8 *)(v41 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
          uint64_t v38 = swift_allocObject();
          *(void *)(v38 + 16) = v42;
          *(unsigned char *)(v38 + 24) = v40;
          sub_10001D608((uint64_t)v8, v38 + v37, &qword_101638CF0);
          swift_retain();
          static Transaction.asyncTask(name:block:)();
          swift_release();
          sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
          break;
        default:
          break;
      }
    }
    sub_10001DAB4((uint64_t)v49, (uint64_t *)&unk_10163BBE0);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v46);
  }
  else
  {
    sub_10001DAB4((uint64_t)v49, (uint64_t *)&unk_10163BBE0);
    return sub_10001DAB4((uint64_t)&v44, (uint64_t *)&unk_10163BBE0);
  }
}

uint64_t sub_1001D35AC(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1001D35D4, a1, 0);
}

uint64_t sub_1001D35D4()
{
  sub_1001CCD8C(*(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D3638(uint64_t a1)
{
  return sub_1001D2EB8(a1);
}

uint64_t sub_1001D3660()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v5;
  *(unsigned char *)(v6 + 32) = v4;
  *(void *)(v6 + 8) = sub_100033F68;
  return _swift_task_switch(sub_1001D35D4, v3, 0);
}

uint64_t sub_1001D375C@<X0>(uint64_t a1@<X8>)
{
  return sub_1007B6A58(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001D3778()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D37B0(unsigned __int8 *a1)
{
  return sub_1001CBD18(a1);
}

uint64_t sub_1001D37B8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1001CBF68(v0);
}

uint64_t sub_1001D3848(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  unint64_t v24 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = 0;
  uint64_t v29 = a3;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v27) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v26 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v29 + 48) + *(void *)(v5 + 72) * v15, v4);
    char v16 = sub_1010FACB0((uint64_t)v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v16)
    {
      *(unint64_t *)((char *)v24 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v21 = v29;
        swift_retain();
        return sub_100B2838C(v24, v23, v25, v21);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v27) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001D3AE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a2;
  uint64_t v34 = a4;
  uint64_t v28 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v5);
  int64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v38 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v29 = 0;
  uint64_t v30 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = v7 + 16;
  uint64_t v33 = v7;
  unint64_t v15 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_18:
    (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v9, *(void *)(v38 + 48) + *(void *)(v33 + 72) * v17, v5);
    sub_100ACCD98((uint64_t)v9, (uint64_t)v35);
    uint64_t v21 = v36;
    if (v36)
    {
      uint64_t v22 = v37;
      sub_10001CD44(v35, v36);
      char v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96))(v21, v22);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
      uint64_t result = (*v15)(v9, v5);
      if (v23)
      {
        *(unint64_t *)((char *)v28 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        BOOL v18 = __OFADD__(v29++, 1);
        if (v18) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      sub_10001DAB4((uint64_t)v35, (uint64_t *)&unk_10163BBE0);
      uint64_t result = (*v15)(v9, v5);
    }
  }
  BOOL v18 = __OFADD__(v10++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v31) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v10);
  if (v19)
  {
LABEL_17:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_18;
  }
  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v31) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v31) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v31)
  {
LABEL_27:
    uint64_t v24 = v27;
    uint64_t v25 = v29;
    uint64_t v26 = v38;
    swift_retain();
    return sub_100B2838C(v28, v24, v25, v26);
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
LABEL_16:
    int64_t v10 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001D3E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v3;
  char v8 = *(unsigned char *)(a1 + 32);
  unsigned int v9 = v8 & 0x3F;
  unint64_t v10 = (unint64_t)((1 << v8) + 63) >> 6;
  size_t v11 = 8 * v10;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v9 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain();
    uint64_t v13 = v5;
    uint64_t v14 = a3((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release();
    swift_release();
    if (v13) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v15 = (void *)swift_slowAlloc();
    bzero(v15, v11);
    swift_retain();
    uint64_t v14 = a3((char *)v15, v10, a1, a2);
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v14;
}

char *sub_1001D3FD8@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_1001D2B40();
  *a1 = result;
  return result;
}

uint64_t sub_1001D4000(uint64_t a1)
{
  return sub_1007B4C2C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001D4020()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D4058()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D4090@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E5EB5C(a1);
}

uint64_t sub_1001D4098(uint64_t a1)
{
  return sub_10012A1FC(a1, v1[2], v1[3], v1[4]);
}

void *sub_1001D40A4@<X0>(void *a1@<X8>)
{
  return sub_100E5E958(a1);
}

uint64_t sub_1001D40AC(uint64_t a1)
{
  return sub_10012A22C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001D40B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D4120(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1001D4180()
{
  sub_1007B61D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001D41A0()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001D42DC()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v4 = *(unsigned char *)(v0 + 16);

  return sub_1001CD708(v4, v0 + v2, v3);
}

uint64_t sub_1001D4370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D4380()
{
  return swift_release();
}

uint64_t sub_1001D4388(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D43D4()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  char v5 = *(unsigned char *)(v0 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_100033F68;
  return sub_1001CDAE8(v3, v5, v4);
}

uint64_t sub_1001D44C0()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 25) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001D45E8()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  char v5 = *(unsigned char *)(v0 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10001D2E4;
  return sub_1001CDD40(v3, v5, v4);
}

uint64_t sub_1001D46D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001D2984();
  *a1 = result;
  return result;
}

uint64_t sub_1001D46F8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D4730()
{
  return sub_1001CC2D4(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001D473C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D474C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1001CB3D4(v0);
}

uint64_t *sub_1001D47DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unsigned int v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v13(v9, v10, v11);
    uint64_t v14 = a3[6];
    unint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v24((char *)a2 + v14, 1, v11))
    {
      uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v19 = a3[7];
    int64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (v24(v21, 1, v11))
    {
      uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v13(v20, v21, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_1001D4A54(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v5, v6);
  uint64_t v8 = a1 + a2[6];
  unsigned int v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v9(v8, 1, v6)) {
    v12(v8, v6);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v6);
  }
  return result;
}

uint64_t sub_1001D4BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unsigned int v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  uint64_t v24 = a3;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  unint64_t v15 = (const void *)(a2 + v13);
  unint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v16(a2 + v13, 1, v10))
  {
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v18 = v12;
  uint64_t v19 = *(int *)(v24 + 28);
  int64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (v16((uint64_t)v21, 1, v10))
  {
    uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1001D4DF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v26(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v27 = a1;
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  unint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15(v13, 1, v10);
  int v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v13, (uint64_t)v14, v10);
LABEL_7:
  uint64_t v19 = a3[7];
  int64_t v20 = (void *)(v27 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v15((void *)(v27 + v19), 1, v10);
  int v23 = v15(v21, 1, v10);
  if (!v22)
  {
    if (!v23)
    {
      v26((uint64_t)v20, (uint64_t)v21, v10);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v20, v10);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    return v27;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v20, v21, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  return v27;
}

uint64_t sub_1001D50EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v24 = a3;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  unint64_t v15 = (const void *)(a2 + v13);
  int v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v16(a2 + v13, 1, v10))
  {
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v18 = v12;
  uint64_t v19 = *(int *)(v24 + 28);
  int64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (v16((uint64_t)v21, 1, v10))
  {
    uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1001D5318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v26(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v27 = a1;
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  unint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15(v13, 1, v10);
  int v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v26((uint64_t)v13, (uint64_t)v14, v10);
LABEL_7:
  uint64_t v19 = a3[7];
  int64_t v20 = (void *)(v27 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v15((void *)(v27 + v19), 1, v10);
  int v23 = v15(v21, 1, v10);
  if (!v22)
  {
    if (!v23)
    {
      v26((uint64_t)v20, (uint64_t)v21, v10);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v20, v10);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    return v27;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v20, v21, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  return v27;
}

uint64_t sub_1001D5610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D5624);
}

uint64_t sub_1001D5624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_1001D5774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D5788);
}

uint64_t sub_1001D5788(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for UpdateDeviceState()
{
  uint64_t result = qword_10163E868;
  if (!qword_10163E868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001D5930()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_1000C7D80();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_1001D5A34(uint64_t a1)
{
  return sub_1001D4000(a1);
}

uint64_t sub_1001D5A54(uint64_t a1, uint64_t a2, uint64_t *a3, BOOL *a4, uint64_t *a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  long long v44 = a4;
  uint64_t v45 = a8;
  unint64_t v12 = type metadata accessor for TimeBasedKey();
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v38 - v16);
  uint64_t v18 = type metadata accessor for DateInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  int v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a5 + 1;
  if (*a5 == -1)
  {
    __break(1u);
  }
  else
  {
    *a5 = v23;
    uint64_t v39 = v15;
    uint64_t v24 = v20;
    uint64_t v25 = type metadata accessor for OwnedBeaconRecord();
    sub_1008B2794((char *)(a6 + *(int *)(v25 + 32)), v23, (uint64_t)v22);
    uint64_t v40 = v19;
    uint64_t v41 = a5;
    uint64_t v26 = *a5;
    uint64_t v27 = (char *)v17 + *(int *)(v12 + 20);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v42 = v24;
    uint64_t v29 = v24;
    unint64_t v15 = v39;
    v28(v27, v22, v29);
    *uint64_t v17 = v26;
    uint64_t v30 = (_OWORD *)((char *)v17 + *(int *)(v12 + 24));
    long long v31 = *((_OWORD *)a3 + 2);
    long long v32 = *(_OWORD *)a3;
    v30[1] = *((_OWORD *)a3 + 1);
    v30[2] = v31;
    *uint64_t v30 = v32;
    sub_1001D7938((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    unint64_t v12 = *a7;
    sub_1001D7A60(a3);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v12;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  unint64_t v12 = sub_100A6F46C(0, *(void *)(v12 + 16) + 1, 1, v12);
  *a7 = v12;
LABEL_3:
  unint64_t v35 = *(void *)(v12 + 16);
  unint64_t v34 = *(void *)(v12 + 24);
  uint64_t v36 = v41;
  if (v35 >= v34 >> 1)
  {
    unint64_t v12 = sub_100A6F46C(v34 > 1, v35 + 1, 1, v12);
    *a7 = v12;
  }
  *(void *)(v12 + 16) = v35 + 1;
  sub_1001D7AC0((uint64_t)v15, v12+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v35);
  sub_1001D79F4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v22, v42);
  *long long v44 = *v36 == v45;
  return result;
}

uint64_t sub_1001D5D50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  sub_1001D6700(a1, a3, a4, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t sub_1001D5DB4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_101637300 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1001D5EE4(char *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v34 = a3;
  unint64_t v35 = a2;
  uint64_t v4 = type metadata accessor for ServerStatusCode();
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NFCTapResponse();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v31 - v11;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v13 = JSONDecoder.init()();
  uint64_t v33 = a1;
  uint64_t v14 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v16 = v15;
  sub_1001D78F0(&qword_10163E8A8, (void (*)(uint64_t))type metadata accessor for NFCTapResponse);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v33 = v6;
  uint64_t v17 = v32;
  v31[1] = v13;
  sub_10001CFB8(v14, v16);
  static os_log_type_t.default.getter();
  if (qword_101637300 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  sub_1001D7938((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NFCTapResponse);
  uint64_t v19 = String.init<A>(describing:)();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_10000B4CC();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  int v22 = v33;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v33, &v12[*(int *)(v7 + 20)], v4);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v22, v4);
  if (v23 == enum case for ServerStatusCode.success(_:))
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    ((void (*)(void))v35)(0);
    swift_release();
    return sub_1001D79F4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NFCTapResponse);
  }
  int v24 = v23;
  if (v23 == enum case for ServerStatusCode.badRequest(_:))
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    sub_1001D79A0();
    uint64_t v25 = swift_allocError();
    *uint64_t v26 = 0;
LABEL_9:
    ((void (*)(uint64_t))v35)(v25);
    swift_release();
    swift_errorRelease();
    return sub_1001D79F4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NFCTapResponse);
  }
  int v27 = enum case for ServerStatusCode.unauthorized(_:);
  static os_log_type_t.error.getter();
  if (v24 == v27)
  {
    os_log(_:dso:log:_:_:)();
    sub_1001D79A0();
    uint64_t v25 = swift_allocError();
    *uint64_t v28 = 1;
    goto LABEL_9;
  }
  os_log(_:dso:log:_:_:)();
  sub_1001D79A0();
  swift_allocError();
  *uint64_t v30 = 2;
  v35();
  swift_release();
  swift_errorRelease();
  sub_1001D79F4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NFCTapResponse);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v4);
}

void *sub_1001D6568(uint64_t a1)
{
  unint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  sub_100A8C33C(*(void *)(a1 + v2[12]), *(void *)(a1 + v2[12] + 8), *(void *)(a1 + v2[13]), *(void *)(a1 + v2[13] + 8), *(void *)(a1 + v2[9]), *(void *)(a1 + v2[9] + 8), 1, 1, (void (*)(uint64_t, unint64_t, _OWORD *, char *))sub_1001D7A54);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001D6700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for FMNAccountType();
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  unint64_t v120 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for NFCTapEndPoint();
  uint64_t v14 = __chkstk_darwin(v119);
  unint64_t v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v123 = (uint64_t *)((char *)&v115 - v17);
  uint64_t v130 = type metadata accessor for UUID();
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v129 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v134);
  uint64_t v135 = (uint64_t *)((char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v133 = type metadata accessor for Date();
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (uint64_t)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for HashAlgorithm();
  uint64_t v21 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v142 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for TimeBasedKey();
  uint64_t v23 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v151 = (uint64_t)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = a2;
  v25[3] = a3;
  v25[4] = a4;
  void v25[5] = a5;
  swift_retain();
  uint64_t v26 = a3;
  swift_retain();
  uint64_t v136 = a1;
  int v27 = sub_1001D6568(a1);
  int64_t v28 = v27[2];
  if (!v28)
  {
    swift_bridgeObjectRelease();
    unint64_t v39 = a4 + 16;
    static os_signpost_type_t.end.getter();
    if (qword_1016372A8 == -1)
    {
LABEL_23:
      os_signpost(_:dso:log:name:signpostID:)();
      swift_beginAccess();
      *(unsigned char *)unint64_t v39 = 0;
      dispatch_group_leave(v26);
      return swift_release();
    }
LABEL_33:
    swift_once();
    goto LABEL_23;
  }
  uint64_t v116 = v16;
  uint64_t v117 = v12;
  int v125 = v26;
  uint64_t v126 = a4;
  uint64_t v118 = a2;
  uint64_t v127 = v25;
  uint64_t v155 = _swiftEmptyArrayStorage;
  int64_t v150 = v28;
  sub_1000B765C(0, v28, 0);
  uint64_t v29 = 0;
  unint64_t v30 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  Swift::Int v124 = v27;
  uint64_t v31 = (uint64_t)v27 + v30;
  uint64_t v141 = *(void *)(v23 + 72);
  unsigned int v140 = enum case for HashAlgorithm.sha256(_:);
  uint64_t v139 = (void (**)(char *, void, uint64_t))(v21 + 104);
  uint64_t v138 = (void (**)(char *, uint64_t))(v21 + 8);
  long long v137 = xmmword_101347BA0;
  while (2)
  {
    uint64_t v32 = v151;
    sub_1001D7938(v31, v151, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v33 = v32 + *(int *)(v144 + 24);
    uint64_t v35 = *(void *)(v33 + 16);
    unint64_t v34 = *(void *)(v33 + 24);
    sub_1000361E0(v35, v34);
    uint64_t v36 = sub_100A948F8(v35, v34);
    if (v29) {
      goto LABEL_42;
    }
    uint64_t v26 = v36;
    uint64_t v37 = (void *)sub_100A90C58(v36, 0);
    unint64_t v39 = v38;
    CCECCryptorRelease();
    sub_10001CFB8(v35, v34);
    unint64_t v40 = v39 >> 62;
    switch(v39 >> 62)
    {
      case 1uLL:
        LODWORD(v41) = HIDWORD(v37) - v37;
        if (__OFSUB__(HIDWORD(v37), v37))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        uint64_t v41 = (int)v41;
LABEL_11:
        if (v41 != 28)
        {
          if (v40 == 1)
          {
            LODWORD(v40) = HIDWORD(v37) - v37;
            if (!__OFSUB__(HIDWORD(v37), v37))
            {
              while (1)
              {
                uint64_t v29 = (int)v40;
LABEL_46:
                sub_10013019C();
                uint64_t v111 = swift_allocError();
                *(void *)uint64_t v113 = 28;
                *(void *)(v113 + 8) = v29;
                *(unsigned char *)(v113 + 16) = 0;
                swift_willThrow();
LABEL_47:
                sub_10001CFB8((uint64_t)v37, v39);
                uint64_t v152 = 0;
                unint64_t v153 = 0xE000000000000000;
                uint64_t v37 = &v152;
                _StringGuts.grow(_:)(35);
                v114._object = (void *)0x80000001013F3B70;
                v114._uint64_t countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v114);
                uint64_t v154 = v111;
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                swift_release();

                swift_release();
                swift_release();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
            }
            __break(1u);
          }
          if (v40 != 2)
          {
            uint64_t v29 = BYTE6(v39);
            goto LABEL_46;
          }
          uint64_t v105 = v37[2];
          uint64_t v104 = v37[3];
          uint64_t v29 = v104 - v105;
          if (!__OFSUB__(v104, v105)) {
            goto LABEL_46;
          }
          __break(1u);
LABEL_42:
          uint64_t v106 = v29;
          static os_log_type_t.error.getter();
          if (qword_101636F48 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v107 = swift_allocObject();
          *(_OWORD *)(v107 + 16) = xmmword_101342130;
          uint64_t v152 = v106;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v108 = String.init<A>(describing:)();
          uint64_t v110 = v109;
          *(void *)(v107 + 56) = &type metadata for String;
          *(void *)(v107 + 64) = sub_10000B4CC();
          *(void *)(v107 + 32) = v108;
          *(void *)(v107 + 40) = v110;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_100130148();
          uint64_t v111 = swift_allocError();
          *uint64_t v112 = 0;
          swift_willThrow();
          swift_errorRelease();
          unint64_t v39 = v34;
          uint64_t v37 = (void *)v35;
          goto LABEL_47;
        }
        uint64_t v146 = 0;
        uint64_t v149 = v31;
        long long v46 = v142;
        uint64_t v45 = v143;
        (*v139)(v142, v140, v143);
        uint64_t v47 = Data.hash(algorithm:)();
        unint64_t v49 = v48;
        (*v138)(v46, v45);
        sub_10001CFB8((uint64_t)v37, v39);
        int v145 = static os_log_type_t.info.getter();
        if (qword_101637300 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = v137;
        uint64_t v152 = v47;
        unint64_t v153 = v49;
        sub_1001D780C();
        uint64_t v51 = RawRepresentable<>.hexString.getter();
        uint64_t v53 = v52;
        *(void *)(v50 + 56) = &type metadata for String;
        unint64_t v54 = sub_10000B4CC();
        *(void *)(v50 + 64) = v54;
        *(void *)(v50 + 32) = v51;
        *(void *)(v50 + 40) = v53;
        uint64_t v147 = v47;
        unint64_t v148 = v49;
        uint64_t v152 = v47;
        unint64_t v153 = v49;
        uint64_t v55 = RawRepresentable<>.base64EncodedString(options:)();
        *(void *)(v50 + 96) = &type metadata for String;
        *(void *)(v50 + 104) = v54;
        *(void *)(v50 + 72) = v55;
        *(void *)(v50 + 80) = v56;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1001D79F4(v151, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v57 = (uint64_t)v155;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B765C(0, *(void *)(v57 + 16) + 1, 1);
          uint64_t v57 = (uint64_t)v155;
        }
        uint64_t v59 = v149;
        int64_t v58 = v150;
        uint64_t v29 = v146;
        uint64_t v60 = v147;
        unint64_t v62 = *(void *)(v57 + 16);
        unint64_t v61 = *(void *)(v57 + 24);
        unint64_t v63 = v148;
        if (v62 >= v61 >> 1)
        {
          sub_1000B765C(v61 > 1, v62 + 1, 1);
          int64_t v58 = v150;
          uint64_t v57 = (uint64_t)v155;
        }
        *(void *)(v57 + 16) = v62 + 1;
        uint64_t v64 = v57 + 16 * v62;
        *(void *)(v64 + 32) = v60;
        *(void *)(v64 + 40) = v63;
        uint64_t v31 = v59 + v141;
        int64_t v150 = v58 - 1;
        if (v58 != 1) {
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v65 = v131;
        static Date.trustedNow.getter(v131);
        Date.timeIntervalSince1970.getter();
        uint64_t v67 = v66;
        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v65, v133);
        uint64_t v68 = type metadata accessor for OwnedBeaconRecord();
        uint64_t v69 = v136;
        uint64_t v70 = v135;
        sub_1001D7938(v136 + *(int *)(v68 + 24), (uint64_t)v135, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v71 = *v70;
          uint64_t v72 = v70[1];
          uint64_t v73 = v70[2];
          uint64_t v74 = v70[3];
          uint64_t v75 = v70[4];
          uint64_t v76 = v70[5];
          uint64_t v77 = v69 + *(int *)(v68 + 20);
          uint64_t v78 = (uint64_t)v129;
          (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v129, v77, v130);
          swift_retain();
          sub_100903C98(v78, v73, v74, v71, v72, v75, v76, v67, v57);
          uint64_t v82 = v126;
          unint64_t v83 = v125;
          if (v79)
          {
            uint64_t v84 = v79;
            uint64_t v85 = v80;
            unint64_t v86 = v81;
            uint64_t v87 = enum case for FMNAccountType.searchParty(_:);
            uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 104);
            uint64_t v89 = (uint64_t)v120;
            uint64_t v90 = v122;
            v88(v120, enum case for FMNAccountType.searchParty(_:), v122);
            type metadata accessor for AccountURLComponents();
            swift_allocObject();
            uint64_t v91 = sub_1010E7A64(v89);
            uint64_t v92 = (uint64_t)v123;
            *unint64_t v123 = v91;
            v88((char *)(v92 + *(int *)(v119 + 20)), v87, v90);
            type metadata accessor for SearchPartyURLSessionFactory(0);
            swift_allocObject();
            uint64_t v93 = type metadata accessor for FMNMockingPreferences();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v117, 1, 1, v93);
            uint64_t v94 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
            type metadata accessor for ServerInteractionController(0);
            uint64_t v95 = swift_allocObject();
            uint64_t v96 = (uint64_t)v116;
            sub_1001D7938(v92, (uint64_t)v116, (uint64_t (*)(void))type metadata accessor for NFCTapEndPoint);
            uint64_t v97 = (void *)sub_1004A2750(v96, v94, v95);
            sub_1001D79F4(v92, (uint64_t (*)(void))type metadata accessor for NFCTapEndPoint);
            swift_bridgeObjectRetain();
            sub_1000361E0(v85, v86);
            sub_1004A91C0(v84, v85, v86, 0, v97);
            swift_release();
            sub_1001D7860(v84, v85, v86);
            uint64_t v98 = swift_allocObject();
            unint64_t v99 = v127;
            *(void *)(v98 + 16) = sub_1001D7800;
            *(void *)(v98 + 24) = v99;
            swift_retain();
            Future.addFailure(block:)();
            swift_release();
            swift_release();
            uint64_t v100 = swift_allocObject();
            *(void *)(v100 + 16) = sub_1001D7800;
            *(void *)(v100 + 24) = v99;
            swift_retain();
            Future.addSuccess(block:)();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            sub_1001D7860(v84, v85, v86);
          }
          else
          {
            swift_release();
            static os_log_type_t.error.getter();
            os_log(_:dso:log:_:_:)();
            static os_signpost_type_t.end.getter();
            if (qword_1016372A8 != -1) {
              swift_once();
            }
            os_signpost(_:dso:log:name:signpostID:)();
            swift_beginAccess();
            *(unsigned char *)(v82 + 16) = 0;
            dispatch_group_leave(v83);
          }
        }
        else
        {
          swift_release();
          uint64_t v101 = (unsigned char *)(v126 + 16);
          static os_signpost_type_t.end.getter();
          uint64_t v102 = v125;
          if (qword_1016372A8 != -1) {
            swift_once();
          }
          os_signpost(_:dso:log:name:signpostID:)();
          swift_beginAccess();
          unsigned char *v101 = 0;
          dispatch_group_leave(v102);
          sub_1001D79F4((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        }
        return swift_release();
      case 2uLL:
        uint64_t v43 = v37[2];
        uint64_t v42 = v37[3];
        BOOL v44 = __OFSUB__(v42, v43);
        uint64_t v41 = v42 - v43;
        if (!v44) {
          goto LABEL_11;
        }
        goto LABEL_32;
      case 3uLL:
        uint64_t v29 = 0;
        goto LABEL_46;
      default:
        uint64_t v41 = BYTE6(v39);
        goto LABEL_11;
    }
  }
}

uint64_t sub_1001D77B8()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001D7800(uint64_t a1)
{
  sub_100375460(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_1001D780C()
{
  unint64_t result = qword_10163EAA0;
  if (!qword_10163EAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EAA0);
  }
  return result;
}

uint64_t sub_1001D7860(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_10001CFB8(a2, a3);
  }
  return result;
}

uint64_t sub_1001D78A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D78E0(uint64_t a1)
{
  return sub_1001D5DB4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001D78E8(char *a1)
{
  return sub_1001D5EE4(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001D78F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D7938(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1001D79A0()
{
  unint64_t result = qword_10163E8B0;
  if (!qword_10163E8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E8B0);
  }
  return result;
}

uint64_t sub_1001D79F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001D7A54(uint64_t a1, uint64_t a2, uint64_t *a3, BOOL *a4)
{
  return sub_1001D5A54(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void *)(v4 + 24), *(unint64_t **)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t *sub_1001D7A60(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100037A38(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_100037A38(v4, v5);
  return a1;
}

uint64_t sub_1001D7AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *_s15NFCTapInfoErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D7BF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *_s15NFCTapInfoErrorOMa()
{
  return &_s15NFCTapInfoErrorON;
}

unint64_t sub_1001D7C2C()
{
  unint64_t result = qword_10163E8B8;
  if (!qword_10163E8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163E8B8);
  }
  return result;
}

uint64_t sub_1001D7C84()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D9B0);
  sub_100010324(v0, (uint64_t)qword_10170D9B0);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_1001D7D08(char a1)
{
  if (!a1) {
    return 0xD000000000000037;
  }
  if (a1 == 1) {
    return 0xD000000000000036;
  }
  return 0xD000000000000035;
}

uint64_t sub_1001D7D60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10071B1B8(*a1, *a2);
}

Swift::Int sub_1001D7D6C()
{
  return sub_10072C130();
}

uint64_t sub_1001D7D74()
{
  return sub_10071F934();
}

Swift::Int sub_1001D7D7C()
{
  return sub_100720ECC();
}

unint64_t sub_1001D7D84@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001DDFD4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001D7DB4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001D7D08(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001D7DE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a3;
  uint64_t v5 = *a2;
  v4[5] = a4;
  v4[6] = v5;
  sub_10000588C(&qword_10163EB60);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ObservedAdvertisement(0);
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1001D7EE8, 0, 0);
}

uint64_t sub_1001D7EE8()
{
  uint64_t v32 = v1;
  unint64_t v2 = *(void *)(v1 + 24);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    *(void *)(v1 + 96) = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    (*(void (**)(void))(v1 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v28 = *(uint64_t (**)(void))(v1 + 8);
    return v28();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  *(void *)(v1 + 96) = v3;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v29 = (uint64_t *)(v1 + 16);
    while (1)
    {
      *(void *)(v1 + 104) = v4;
      uint64_t v6 = *(void *)(v1 + 24);
      id v7 = (v6 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v6 + 8 * v4 + 32);
      *(void *)(v1 + 112) = v7;
      uint64_t v8 = *(void *)(v1 + 64);
      uint64_t v9 = *(void *)(v1 + 72);
      uint64_t v10 = *(void *)(v1 + 56);
      uint64_t v0 = v7;
      sub_100907748(v0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1) {
        break;
      }
      sub_10001DAB4(*(void *)(v1 + 56), &qword_10163EB60);
      if (qword_1016368F8 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_100010324(v11, (uint64_t)qword_10170D9B0);
      unint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v14, 2u);
        swift_slowDealloc();
        uint64_t v5 = v12;
      }
      else
      {
        uint64_t v5 = v0;
        uint64_t v0 = v12;
      }

      uint64_t v4 = *(void *)(v1 + 104) + 1;
      if (v4 == *(void *)(v1 + 96)) {
        goto LABEL_23;
      }
    }
    sub_1001E0368(*(void *)(v1 + 56), *(void *)(v1 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1016368F8 == -1) {
      goto LABEL_16;
    }
  }
  swift_once();
LABEL_16:
  uint64_t v16 = *(void *)(v1 + 80);
  uint64_t v15 = *(void *)(v1 + 88);
  uint64_t v17 = type metadata accessor for Logger();
  *(void *)(v1 + 120) = sub_100010324(v17, (uint64_t)qword_10170D9B0);
  sub_1001DF46C(v15, v16);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v1 + 80);
  if (v20)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = sub_1002016B0();
    *uint64_t v29 = sub_1008FA0F0(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001E00FC(v21, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "observedAdvertisement: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001E00FC(*(void *)(v1 + 80), type metadata accessor for ObservedAdvertisement);
  }

  [v0 refreshGeotag];
  [v0 observationValue];
  unint64_t v30 = (uint64_t (*)(uint64_t))((char *)&dword_101652080 + dword_101652080);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v1 + 128) = v25;
  *uint64_t v25 = v1;
  v25[1] = sub_1001D83C0;
  uint64_t v26 = *(void *)(v1 + 88);
  return v30(v26);
}

uint64_t sub_1001D83C0()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_1001D8988;
  }
  else {
    unint64_t v2 = sub_1001D84D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001D84D4()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 88);

  sub_1001E00FC(v1, type metadata accessor for ObservedAdvertisement);
  uint64_t v2 = *(void *)(v0 + 104) + 1;
  if (v2 == *(void *)(v0 + 96))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 104) = v2;
      uint64_t v7 = *(void *)(v0 + 24);
      id v8 = (v7 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v7 + 8 * v2 + 32);
      *(void *)(v0 + 112) = v8;
      uint64_t v9 = *(void *)(v0 + 64);
      uint64_t v10 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 56);
      unint64_t v12 = v8;
      sub_100907748(v12, 1, v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) != 1) {
        break;
      }
      sub_10001DAB4(*(void *)(v0 + 56), &qword_10163EB60);
      if (qword_1016368F8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170D9B0);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v5, 2u);
        swift_slowDealloc();
        uint64_t v6 = v14;
      }
      else
      {
        uint64_t v6 = v12;
        unint64_t v12 = v14;
      }

      uint64_t v2 = *(void *)(v0 + 104) + 1;
      if (v2 == *(void *)(v0 + 96)) {
        goto LABEL_2;
      }
    }
    sub_1001E0368(*(void *)(v0 + 56), *(void *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v18 = type metadata accessor for Logger();
    *(void *)(v0 + 120) = sub_100010324(v18, (uint64_t)qword_10170D9B0);
    sub_1001DF46C(v16, v17);
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 80);
    if (v21)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v24 = sub_1002016B0();
      *(void *)(v0 + 16) = sub_1008FA0F0(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E00FC(v22, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "observedAdvertisement: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001E00FC(*(void *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    [v12 refreshGeotag];
    [v12 observationValue];
    int64_t v28 = (uint64_t (*)(uint64_t))((char *)&dword_101652080 + dword_101652080);
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1001D83C0;
    uint64_t v27 = *(void *)(v0 + 88);
    return v28(v27);
  }
}

uint64_t sub_1001D8988()
{
  uint64_t v35 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    *(void *)(v3 + 4) = v5;
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error inserting observedAdvertisement: %@", (uint8_t *)v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v6 = *(void *)(v0 + 88);

  sub_1001E00FC(v6, type metadata accessor for ObservedAdvertisement);
  uint64_t v7 = *(void *)(v0 + 104) + 1;
  if (v7 == *(void *)(v0 + 96))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 104) = v7;
      uint64_t v12 = *(void *)(v0 + 24);
      id v13 = (v12 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v12 + 8 * v7 + 32);
      *(void *)(v0 + 112) = v13;
      uint64_t v14 = *(void *)(v0 + 64);
      uint64_t v15 = *(void *)(v0 + 72);
      uint64_t v16 = *(void *)(v0 + 56);
      uint64_t v17 = v13;
      sub_100907748(v17, 1, v16);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) != 1) {
        break;
      }
      sub_10001DAB4(*(void *)(v0 + 56), &qword_10163EB60);
      if (qword_1016368F8 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100010324(v18, (uint64_t)qword_10170D9B0);
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v10, 2u);
        swift_slowDealloc();
        uint64_t v11 = v19;
      }
      else
      {
        uint64_t v11 = v17;
        uint64_t v17 = v19;
      }

      uint64_t v7 = *(void *)(v0 + 104) + 1;
      if (v7 == *(void *)(v0 + 96)) {
        goto LABEL_5;
      }
    }
    sub_1001E0368(*(void *)(v0 + 56), *(void *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v21 = *(void *)(v0 + 88);
    uint64_t v23 = type metadata accessor for Logger();
    *(void *)(v0 + 120) = sub_100010324(v23, (uint64_t)qword_10170D9B0);
    sub_1001DF46C(v21, v22);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 80);
    if (v26)
    {
      int64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)int64_t v28 = 136315138;
      uint64_t v29 = sub_1002016B0();
      *(void *)(v0 + 16) = sub_1008FA0F0(v29, v30, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E00FC(v27, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "observedAdvertisement: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001E00FC(*(void *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    [v17 refreshGeotag];
    [v17 observationValue];
    uint64_t v33 = (uint64_t (*)(uint64_t))((char *)&dword_101652080 + dword_101652080);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_1001D83C0;
    uint64_t v32 = *(void *)(v0 + 88);
    return v33(v32);
  }
}

void sub_1001D9098(uint64_t a1, char a2, void (*a3)(id))
{
  static os_log_type_t.default.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10000B4CC();
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v16 = [objc_allocWithZone((Class)SPSearchResultMarker) init];
    id v17 = objc_allocWithZone((Class)SPBeaconPayloadCacheSearchResult);
    swift_errorRetain();
    type metadata accessor for URL();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    os_log_type_t v19 = (void *)_convertErrorToNSError(_:)();
    sub_10015B4A8(a1, 1);
    id v11 = [v17 initWithFileURLs:isa searchResultMarker:v16 error:v19];

    sub_10015B4A8(a1, 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(v6 + 56) = &type metadata for Int;
    *(void *)(v6 + 64) = &protocol witness table for Int;
    *(void *)(v6 + 32) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v8 = [objc_allocWithZone((Class)SPSearchResultMarker) init];
    id v9 = objc_allocWithZone((Class)SPBeaconPayloadCacheSearchResult);
    type metadata accessor for URL();
    Class v10 = Array._bridgeToObjectiveC()().super.isa;
    sub_10015B4A8(a1, 0);
    id v11 = [v9 initWithFileURLs:v10 searchResultMarker:v8 error:0];
  }
  a3(v11);
}

void sub_1001D9A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1001D9AF4(void *a1, int a2, int a3, void *aBlock, unint64_t *a5, uint64_t a6, void (*a7)(uint64_t, id, void *))
{
  Class v10 = _Block_copy(aBlock);
  sub_10001D4B0(0, a5);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v10);
  id v12 = a1;
  a7(v11, v12, v10);
  _Block_release(v10);
  _Block_release(v10);

  return swift_bridgeObjectRelease();
}

void sub_1001D9C44(uint64_t a1, void (*a2)(id))
{
  uint64_t v4 = sub_10000588C(&qword_10163EA60);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = *v7;
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    uint64_t v11 = *(void *)(v9 + 16);
    *(void *)(v10 + 56) = &type metadata for Int;
    *(void *)(v10 + 64) = &protocol witness table for Int;
    *(void *)(v10 + 32) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (v11)
    {
      unint64_t v30 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v12 = v9 + 32;
      do
      {
        sub_10001D010(v12, (uint64_t)v27);
        uint64_t v13 = v28;
        uint64_t v14 = v29;
        sub_10001CD44(v27, v28);
        sub_10036896C(v13, v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    swift_bridgeObjectRelease();
    id v24 = [objc_allocWithZone((Class)SPSearchResultMarker) init];
    id v25 = objc_allocWithZone((Class)SPAdvertisementCacheSearchResult);
    sub_10001D4B0(0, &qword_10163EB20);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = [v25 initWithBeaconAdvertisements:isa searchResultMarker:v24 error:0];

    goto LABEL_11;
  }
  if (v8 == enum case for LegacyResult.failure<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v15 = *v7;
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    v27[0] = v15;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v20 = objc_allocWithZone((Class)SPAdvertisementCacheSearchResult);
    swift_errorRetain();
    sub_10001D4B0(0, &qword_10163EB20);
    Class v21 = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v22 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v23 = [v20 initWithBeaconAdvertisements:v21 searchResultMarker:0 error:v22];

    swift_errorRelease();
LABEL_11:
    a2(v23);

    return;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_1001DA2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = a5;
  return _swift_task_switch(sub_1001DA2DC, 0, 0);
}

uint64_t sub_1001DA2DC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_1001DA410;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DA410(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DA510, 0, 0);
}

uint64_t sub_1001DA510()
{
  uint64_t v1 = v0[19];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    swift_retain();
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[20] = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_1001DA6C8;
    return sub_101103BA8();
  }
  else
  {
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D9B0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cleared anonymous observations due command.", v7, 2u);
      swift_slowDealloc();
    }
    int v8 = (void (*)(void))v0[16];

    v8(0);
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1001DA6C8()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1001DA914;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1001DA7E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001DA7E4()
{
  if (qword_1016368F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D9B0);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cleared anonymous observations due command.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void (**)(void))(v0 + 128);

  v5(0);
  swift_release();
  os_log_type_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001DA914()
{
  swift_release_n();
  if (qword_1016368F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D9B0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to clear observations due to command, error: %@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[21];
  uint64_t v8 = (void (*)(uint64_t))v0[16];

  swift_errorRetain();
  v8(v7);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

id sub_1001DABF8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdvertisementCacheTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for AdvertisementCacheTrampoline()
{
  return self;
}

id sub_1001DAC64()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    id v2 = *(id *)(v0 + 144);
  }
  else
  {
    os_log_type_t v3 = (objc_class *)type metadata accessor for AdvertisementCacheTrampoline();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    uint64_t v5 = &v4[OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation];
    *(void *)uint64_t v5 = v0;
    *((void *)v5 + 1) = &off_1015B3768;
    *((void *)v5 + 2) = &off_1015B3730;
    *((void *)v5 + 3) = &off_1015B36F0;
    *((void *)v5 + 4) = &off_1015DC468;
    *((void *)v5 + 5) = &off_1015B3778;
    v10.receiver = v4;
    v10.super_class = v3;
    swift_retain();
    id v6 = [super init];
    uint64_t v7 = *(void **)(v0 + 144);
    *(void *)(v0 + 144) = v6;
    id v2 = v6;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

uint64_t sub_1001DAD30()
{
  v1[14] = v0;
  type metadata accessor for MachServiceName();
  v1[15] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  return _swift_task_switch(sub_1001DAE1C, v0, 0);
}

uint64_t sub_1001DAE1C()
{
  MachServiceName.init(_:)();
  sub_1001DAC64();
  if (qword_101636900 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v14 = v0[16];
  uint64_t v3 = v0[14];
  id v4 = (id)qword_10163E8C0;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  sub_10000588C((uint64_t *)&unk_10163EAB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1001DF624;
  *(void *)(v10 + 24) = v5;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = sub_1001DF664;
  *(void *)(inited + 56) = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1001DF624;
  *(void *)(v11 + 24) = v5;
  *(void *)(inited + 64) = 0xD000000000000019;
  *(void *)(inited + 72) = 0x80000001013F5D50;
  *(void *)(inited + 80) = sub_1001E070C;
  *(void *)(inited + 88) = v11;
  swift_retain_n();
  sub_10092E16C(inited);
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = DarwinNotificationHelper.init(notificationHandlers:)();
  swift_release();
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1001DB11C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001DB1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(a2 + 128);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1001DF6C8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B38C0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001DF538((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

void sub_1001DB468(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100908014();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = 0;
  v6[3] = 0;
  _OWORD v6[4] = a1;
  swift_retain();
  sub_1000212B0((uint64_t)v4, (uint64_t)&unk_10163EAC8, (uint64_t)v6);
  swift_release();
  sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
  Transaction.capture()();
}

id sub_1001DB590()
{
  id result = sub_1001DB5B0();
  qword_10163E8C0 = (uint64_t)result;
  return result;
}

id sub_1001DB5B0()
{
  id v0 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPAdvertisementCacheXPCProtocol];
  sub_100A59298();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  uint64_t v2 = sub_10001D4B0(0, &qword_10163EAD0);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = sub_10001D4B0(0, &qword_10163EAD8);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  *(void *)(v3 + 32) = sub_10001D4B0(0, (unint64_t *)&unk_10163EAE0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = sub_10001D4B0(0, (unint64_t *)&qword_10163BC80);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = sub_10001D4B0(0, &qword_10163EAF0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  *(void *)(v6 + 32) = sub_10001D4B0(0, &qword_10163EAF8);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = sub_10001D4B0(0, &qword_10163EB00);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001DB8BC(void *a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
  uint64_t v5 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 96) = sub_10001D4B0(0, (unint64_t *)&unk_10164FD00);
  *(void *)(v3 + 104) = sub_1001DF580();
  *(void *)(v3 + 72) = a1;
  swift_bridgeObjectRetain();
  id v6 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1001DF354();
  return NSXPCConnection.hasEntitlement<A>(_:)() & 1;
}

uint64_t sub_1001DBA00()
{
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001DBAAC()
{
  sub_1001DBA00();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001DBAD8()
{
  return type metadata accessor for AdvertisementCacheService();
}

uint64_t type metadata accessor for AdvertisementCacheService()
{
  uint64_t result = qword_10163E928;
  if (!qword_10163E928) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001DBB2C()
{
  uint64_t result = type metadata accessor for PressuredExitTransactionManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_1001DBC08()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v0[14] = 0xD000000000000019;
  v0[15] = 0x800000010134EA80;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_1001DF538((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  v0[17] = XPCSessionManager.init(name:)();
  v0[18] = 0;
  PressuredExitTransactionManager.init()();
  *(void *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = 0;
  *(void *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache) = _swiftEmptyDictionarySingleton;
  return v0;
}

uint64_t sub_1001DBEE4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1001DAD30();
}

uint64_t sub_1001DBF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[30] = a8;
  v8[31] = v16;
  v8[28] = a6;
  v8[29] = a7;
  v8[26] = a4;
  v8[27] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v8[32] = v9;
  v8[33] = *(void *)(v9 - 8);
  v8[34] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v8[35] = v10;
  v8[36] = *(void *)(v10 - 8);
  v8[37] = swift_task_alloc();
  sub_10000588C(&qword_10163EB38);
  v8[38] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CachedHistoricalLocation(0);
  v8[39] = v11;
  v8[40] = *(void *)(v11 - 8);
  v8[41] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163EB40);
  v8[42] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for TimeBasedKey();
  v8[43] = v12;
  v8[44] = *(void *)(v12 - 8);
  v8[45] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for URL();
  v8[46] = v13;
  v8[47] = *(void *)(v13 - 8);
  v8[48] = swift_task_alloc();
  return _swift_task_switch(sub_1001DC210, 0, 0);
}

uint64_t sub_1001DC210()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 104);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    swift_release();
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v3;
    void *v3 = v0;
    v3[1] = sub_1001DC358;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DC358(uint64_t a1)
{
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC458, 0, 0);
}

uint64_t sub_1001DC458()
{
  uint64_t v1 = (uint64_t)(v0 + 8);
  if (v0[50])
  {
    uint64_t v3 = v0[47];
    uint64_t v2 = v0[48];
    uint64_t v4 = v0[46];
    uint64_t v5 = v0[29];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    type metadata accessor for BeaconPayloadFile(0);
    swift_allocObject();
    if (sub_100427C98(v2))
    {
      uint64_t v6 = v0[43];
      uint64_t v7 = v0[44];
      uint64_t v8 = v0[42];
      uint64_t v10 = v0[30];
      uint64_t v9 = v0[31];
      uint64_t v11 = sub_100A46DE0();
      ((void (*)(uint64_t, uint64_t))v11)(v10, v9);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
      {
        uint64_t v12 = v0[42];
        swift_release();
        sub_10001DAB4(v12, (uint64_t *)&unk_10163EB40);
      }
      else
      {
        uint64_t v16 = v0[45];
        uint64_t v17 = v0[43];
        sub_1001E0368(v0[42], v16, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v18 = (uint64_t *)(v16 + *(int *)(v17 + 24));
        unint64_t v19 = v18[5];
        if (v19 >> 60 != 15)
        {
          uint64_t v25 = v18[4];
          sub_1000361E0(v25, v18[5]);
          SecKeyRef v109 = sub_100435E70(v25, v19);
          uint64_t v110 = v0 + 18;
          unint64_t v111 = v19;
          uint64_t v112 = v25;
          uint64_t v27 = *v18;
          unint64_t v26 = v18[1];
          uint64_t v28 = v18[2];
          unint64_t v29 = v18[3];
          v0[2] = *v18;
          v0[3] = v26;
          v0[4] = v28;
          v0[5] = v29;
          v0[6] = v112;
          v0[7] = v111;
          sub_100037A38(v27, v26);
          sub_1000361E0(v28, v29);
          sub_100037A38(v112, v111);
          uint64_t v30 = sub_100A8C640();
          unint64_t v32 = v31;
          unint64_t v33 = v26;
          unint64_t v34 = v32;
          sub_100037A24(v27, v33);
          sub_10001CFB8(v28, v29);
          sub_100037A24(v112, v111);
          sub_100556E8C(v109, v30, v34, v0 + 18);
          uint64_t v35 = v0[39];
          uint64_t v36 = v0[40];
          uint64_t v37 = v0[38];
          sub_10001CFB8(v30, v34);
          uint64_t v38 = v0[21];
          uint64_t v39 = v0[22];
          sub_10001CD44(v0 + 18, v38);
          (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35) == 1)
          {
            uint64_t v40 = v0[45];
            uint64_t v41 = (void (*)(void, void))v0[27];
            sub_10001DAB4(v0[38], &qword_10163EB38);
            v41(0, 0);
            swift_release();

            sub_100037A24(v112, v111);
            swift_release();
            uint64_t v42 = v40;
          }
          else
          {
            sub_1001E0368(v0[38], v0[41], type metadata accessor for CachedHistoricalLocation);
            uint64_t v44 = v0[21];
            uint64_t v43 = v0[22];
            sub_10001CD44(v110, v44);
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)(v43 + 8) + 8))(v44);
            unint64_t v47 = v46;
            uint64_t v49 = v0[21];
            uint64_t v48 = v0[22];
            sub_10001CD44(v110, v49);
            uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)(v48 + 8) + 16))(v49);
            unint64_t v52 = v51;
            sub_1000361E0(v45, v47);
            sub_100A42CBC(v50, v52);
            sub_10001CFB8(v50, v52);
            sub_10001CFB8(v45, v47);
            unint64_t v107 = v47;
            uint64_t v108 = v45;
            uint64_t v54 = v0[21];
            uint64_t v53 = v0[22];
            sub_10001CD44(v110, v54);
            uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)(v53 + 8) + 8))(v54);
            unint64_t v105 = v56;
            uint64_t v106 = v55;
            sub_10000588C(&qword_10163A788);
            uint64_t v57 = swift_allocObject();
            *(_OWORD *)(v57 + 16) = xmmword_101342130;
            uint64_t v58 = v0[21];
            uint64_t v59 = v0[22];
            sub_10001CD44(v110, v58);
            uint64_t v60 = *(void *)(v59 + 8);
            unint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 24);
            sub_1000361E0(v108, v107);
            unsigned int v62 = v61(v58, v60);
            uint64_t v100 = (double *)v0[41];
            uint64_t v63 = v0[37];
            uint64_t v98 = v0[36];
            uint64_t v99 = v0[35];
            uint64_t v93 = v0[34];
            uint64_t v96 = v0[33];
            uint64_t v97 = v0[32];
            uint64_t v102 = v0[45];
            uint64_t v101 = (void (*)(id, void))v0[27];
            *(unsigned char *)(v57 + 32) = (v62 >> 4) & 3;
            uint64_t v92 = sub_1008AB3D0(v57);
            unint64_t v104 = v64;
            swift_bridgeObjectRelease();
            uint64_t v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = xmmword_101342130;
            uint64_t v67 = v0[21];
            uint64_t v66 = v0[22];
            sub_10001CD44(v110, v67);
            *(unsigned char *)(v65 + 32) = (*(unsigned __int8 (**)(uint64_t))(*(void *)(v66 + 8) + 24))(v67) >> 6;
            uint64_t v90 = sub_1008AB3D0(v65);
            unint64_t v103 = v68;
            swift_bridgeObjectRelease();
            uint64_t v70 = v0[21];
            uint64_t v69 = v0[22];
            sub_10001CD44(v110, v70);
            unsigned __int8 v94 = (*(uint64_t (**)(uint64_t))(*(void *)(v69 + 8) + 24))(v70);
            uint64_t v72 = v0[21];
            uint64_t v71 = v0[22];
            sub_10001CD44(v110, v72);
            uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)(v71 + 8) + 40))(v72);
            uint64_t v74 = v0[21];
            uint64_t v73 = v0[22];
            sub_10001CD44(v110, v74);
            uint64_t v89 = v63;
            (*(void (**)(uint64_t))(*(void *)(v73 + 8) + 48))(v74);
            UUID.init()();
            id v88 = objc_allocWithZone((Class)SPBeaconAdvertisement);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            Class v76 = Data._bridgeToObjectiveC()().super.isa;
            Class v77 = Data._bridgeToObjectiveC()().super.isa;
            Class v78 = Data._bridgeToObjectiveC()().super.isa;
            Class v79 = Date._bridgeToObjectiveC()().super.isa;
            Class v80 = UUID._bridgeToObjectiveC()().super.isa;
            id v95 = [v88 initWithAddress:isa publicKey:v76 deviceType:v77 batteryState:v78 rawStatus:v94 rssi:v91 scanDate:v79 recordIdentifier:v80];

            (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v93, v97);
            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v89, v99);
            sub_10001CFB8(v90, v103);
            sub_10001CFB8(v92, v104);
            sub_10001CFB8(v108, v107);
            sub_10001CFB8(v106, v105);
            double v81 = *v100;
            double v82 = v100[1];
            double v83 = v100[2];
            id v84 = objc_allocWithZone((Class)SPEstimatedLocation);
            Class v85 = Date._bridgeToObjectiveC()().super.isa;
            id v86 = [v84 initWithTimestamp:v85 latitude:0 longitude:v81 horizontalAccuracy:v82 altitude:v83 verticalAccuracy:-1.0 speed:-1.0 speedAccuracy:-1.0 course:-1.0 courseAccuracy:-1.0 floorLevel:0xBFF0000000000000];

            [v95 setLocation:v86];
            id v87 = v95;
            v101(v95, 0);
            swift_release();

            sub_100037A24(v112, v111);
            swift_release();

            sub_10001CFB8(v108, v107);
            sub_1001E00FC((uint64_t)v100, type metadata accessor for CachedHistoricalLocation);
            uint64_t v42 = v102;
          }
          sub_1001E00FC(v42, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
          goto LABEL_9;
        }
        sub_1001E00FC(v0[45], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        swift_release();
      }
    }
    id v20 = (void (*)(void, uint64_t))v0[27];
    sub_1001DF300();
    uint64_t v21 = swift_allocError();
    *uint64_t v22 = 3;
    v20(0, v21);
    swift_errorRelease();
    swift_release();
  }
  else
  {
    uint64_t v13 = (void (*)(void, uint64_t))v0[27];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1001DF300();
    uint64_t v14 = swift_allocError();
    *uint64_t v15 = 2;
    v13(0, v14);
    swift_errorRelease();
  }
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1001DCE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163EA90);
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v5[23] = v7;
  v5[24] = *(void *)(v7 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HashAlgorithm();
  v5[26] = v8;
  v5[27] = *(void *)(v8 - 8);
  v5[28] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v5[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v5[30] = v9;
  v5[31] = *(void *)(v9 - 8);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ObservedAdvertisement(0);
  v5[38] = v10;
  v5[39] = *(void *)(v10 - 8);
  v5[40] = swift_task_alloc();
  return _swift_task_switch(sub_1001DD0EC, 0, 0);
}

uint64_t sub_1001DD0EC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639120 + dword_101639120);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001DD220;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DD220(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DD320, 0, 0);
}

uint64_t sub_1001DD320()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[42])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[43] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001DD494;
    return sub_100928B48();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001DD494(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001DDE30;
  }
  else {
    uint64_t v4 = sub_1001DD5A8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001DD5A8()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v78 = *(void *)(v1 + 16);
  if (!v78)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_19:
    (*(void (**)(void *, void))(v0 + 144))(v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v58 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  unint64_t v56 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v57 = (void (**)(uint64_t, void, uint64_t))(v5 + 104);
  uint64_t v55 = (void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v74 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 168) + 56);
  unsigned int v53 = enum case for HashAlgorithm.sha256(_:);
  uint64_t v73 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  Class v76 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v52 = v4;
  uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_bridgeObjectRetain();
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v50 = v8;
  uint64_t v51 = v3;
  uint64_t v49 = v9;
  while (1)
  {
    unint64_t v77 = (unint64_t)v10;
    sub_1001DF46C(v7, *(void *)(v0 + 320));
    unint64_t v11 = *(void *)(v3 + 24);
    if ((v11 & 0x2000000000000000) != 0)
    {
      uint64_t v35 = 1;
      goto LABEL_11;
    }
    uint64_t v64 = v7;
    uint64_t v12 = *(void *)(v0 + 320);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v65 = *(void *)(v0 + 240);
    uint64_t v67 = *(void *)(v0 + 176);
    uint64_t v69 = *(void *)(v0 + 160);
    uint64_t v19 = *(void *)(v3 + 16);
    (*v57)(v15, v53, v16);
    sub_1000361E0(v19, v11);
    uint64_t v75 = Data.hash(algorithm:)();
    unint64_t v71 = v20;
    (*v56)(v15, v16);
    sub_1001A1AD8(v19, v11);
    (*v55)(v17, v12 + *(int *)(v58 + 44), v18);
    sub_100F7E414(v13);
    uint64_t v21 = v14;
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v22 = *v74;
    (*v74)(v13, v65);
    uint64_t v23 = type metadata accessor for BeaconPayloadFile.MetaData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v67, 1, 1, v23);
    type metadata accessor for BeaconPayloadFile(0);
    uint64_t v24 = swift_allocObject();
    (*v54)(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, 1, 1, v69);
    uint64_t v25 = v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
    uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
    uint64_t v27 = *v73;
    (*v73)(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v21, v65);
    uint64_t v28 = (uint64_t *)(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    *uint64_t v28 = v75;
    v28[1] = v71;
    sub_1000361E0(v75, v71);
    uint64_t result = Date.timeIntervalSinceReferenceDate.getter();
    if ((~*(void *)&v31 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v31 <= -9.22337204e18) {
      goto LABEL_23;
    }
    if (v31 >= 9.22337204e18) {
      goto LABEL_24;
    }
    uint64_t v61 = *(void *)(v0 + 280);
    uint64_t v32 = *(void *)(v0 + 272);
    uint64_t v59 = *(void *)(v0 + 288);
    uint64_t v60 = *(void *)(v0 + 264);
    uint64_t v70 = v27;
    uint64_t v33 = *(void *)(v0 + 240);
    uint64_t v68 = *(void *)(v0 + 232);
    uint64_t v62 = *(void *)(v0 + 184);
    uint64_t v63 = *(void *)(v0 + 200);
    uint64_t v66 = *(void *)(v0 + 176);
    *(void *)(v0 + 136) = (uint64_t)v31;
    dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 120) = v75;
    *(void *)(v0 + 128) = v71;
    sub_1001D780C();
    RawRepresentable<>.hexString.getter();
    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    v22(v32, v33);
    unint64_t v34 = *v76;
    (*v76)(v61, v60, v33);
    sub_10001CFB8(v75, v71);
    v22(v59, v33);
    (*v48)(v63, v62);
    v34(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v61, v33);
    sub_1001DF4D0(v66, v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData);
    v70(v68, v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v33);
    swift_setDeallocating();
    v22(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v33);
    sub_10001CFB8(*(void *)(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement), *(void *)(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
    v22(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v33);
    sub_10001DAB4(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t *)&unk_10163EA90);
    sub_10001DAB4(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10163EAA8);
    sub_10001DAB4(v24 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, &qword_10163AE40);
    swift_deallocClassInstance();
    uint64_t v35 = 0;
    uint64_t v8 = v50;
    uint64_t v3 = v51;
    uint64_t v7 = v64;
    uint64_t v9 = v49;
LABEL_11:
    uint64_t v36 = *(void *)(v0 + 320);
    uint64_t v38 = *(void *)(v0 + 232);
    uint64_t v37 = *(void *)(v0 + 240);
    (*v9)(v38, v35, 1, v37);
    sub_1001E00FC(v36, type metadata accessor for ObservedAdvertisement);
    if ((*v72)(v38, 1, v37) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 232), &qword_101649E40);
      uint64_t v10 = (void *)v77;
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 296);
      uint64_t v40 = *(void *)(v0 + 256);
      uint64_t v41 = *(void *)(v0 + 240);
      uint64_t v42 = *v76;
      (*v76)(v39, *(void *)(v0 + 232), v41);
      v42(v40, v39, v41);
      uint64_t v10 = (void *)v77;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = (void *)sub_100A6FC5C(0, *(void *)(v77 + 16) + 1, 1, v77);
      }
      unint64_t v44 = v10[2];
      unint64_t v43 = v10[3];
      if (v44 >= v43 >> 1) {
        uint64_t v10 = (void *)sub_100A6FC5C(v43 > 1, v44 + 1, 1, (unint64_t)v10);
      }
      uint64_t v45 = *(void *)(v0 + 256);
      uint64_t v46 = *(void *)(v0 + 240);
      v10[2] = v44 + 1;
      v42((uint64_t)v10+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v44, v45, v46);
    }
    v7 += v8;
    if (!--v78)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1001DDE30()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[18];
  swift_errorRetain();
  v2(v1, 1);
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001DDF58(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  return sub_1001DF0F8(a4);
}

uint64_t sub_1001DDF64(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  return sub_1001DE5FC(a4, a5);
}

uint64_t sub_1001DDF70(uint64_t a1, void (*a2)(void))
{
  return sub_1001DE494(a2);
}

uint64_t sub_1001DDF7C(uint64_t a1)
{
  uint64_t result = sub_1001DF538(&qword_10163EA58, (void (*)(uint64_t))type metadata accessor for AdvertisementCacheService);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001DDFD4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0738, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001DE020()
{
  id v0 = [self currentConnection];
  if (v0)
  {
    uint64_t v1 = v0;
    sub_1001DF354();
    char v2 = NSXPCConnection.hasEntitlement<A>(_:)();

    if (v2) {
      return 1;
    }
  }
  type metadata accessor for Transaction();
  uint64_t v3 = static Transaction.currentNSXPCConnection.getter();
  if (v3
    && (v4 = (void *)v3, sub_1001DF354(), char v5 = NSXPCConnection.hasEntitlement<A>(_:)(), v4, (v5 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001DE0EC(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = (long long *)(a2
                  + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess();
  long long v17 = v7[1];
  long long v18 = *v7;
  long long v16 = v7[2];
  _Block_copy(a3);
  swift_unknownObjectRetain();
  if (sub_1001DE020()) {
    goto LABEL_5;
  }
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v20[0] = 0x7365547265646E75;
  v20[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v19 == 1)
  {
LABEL_5:
    type metadata accessor for Transaction();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(_OWORD *)(v8 + 24) = v18;
    *(_OWORD *)(v8 + 40) = v17;
    *(_OWORD *)(v8 + 56) = v16;
    *(void *)(v8 + 72) = sub_1001E06E0;
    *(void *)(v8 + 80) = v6;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  else
  {
    if (qword_1016368F8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170D9B0);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_1008FA0F0(0xD000000000000036, 0x80000001013EE500, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cannot save observedAdvertisement. Missing entitlement: %{public}s.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1001DF300();
    swift_allocError();
    *uint64_t v14 = 0;
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v15);

    swift_errorRelease();
    swift_release();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1001DE494(void (*a1)(void))
{
  if (sub_1001DE020()) {
    return ((uint64_t (*)(void))a1)(0);
  }
  static os_log_type_t.error.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = 0xD000000000000036;
  *(void *)(v3 + 40) = 0x80000001013EE500;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1001DF300();
  swift_allocError();
  unsigned char *v4 = 0;
  a1();

  return swift_errorRelease();
}

uint64_t sub_1001DE5FC(void (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001DE020())
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = 0;
    v8[3] = 0;
    v8[4] = a1;
    v8[5] = a2;
    swift_retain();
    sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_10163EA88, (uint64_t)v8);
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637240 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10000B4CC();
    *(void *)(v10 + 32) = 0xD000000000000035;
    *(void *)(v10 + 40) = 0x80000001013EE540;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1001DF300();
    uint64_t v11 = swift_allocError();
    *os_log_type_t v12 = 0;
    a1(v11, 1);
    return swift_errorRelease();
  }
}

uint64_t sub_1001DE838(uint64_t a1, uint64_t a2)
{
  if (sub_1001DE020())
  {
    static os_log_type_t.default.getter();
    if (qword_101637240 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(v4 + 56) = &type metadata for Int;
    *(void *)(v4 + 64) = &protocol witness table for Int;
    *(void *)(v4 + 32) = v5;
    char v6 = 2;
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637240 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = 0xD000000000000036;
    *(void *)(v7 + 40) = 0x80000001013EE500;
    os_log(_:dso:log:_:_:)();
    char v6 = 0;
  }
  swift_bridgeObjectRelease();
  sub_1001DF300();
  swift_allocError();
  *uint64_t v8 = v6;
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v9);

  return swift_errorRelease();
}

void sub_1001DEA50(unint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for SPCachedAdvertisement();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  static os_log_type_t.default.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v9 + 56) = &type metadata for Int;
  *(void *)(v9 + 64) = &protocol witness table for Int;
  *(void *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v42 = _swiftEmptyArrayStorage;
  sub_1000B78B8(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v32[1] = a2;
    uint64_t v33 = a3;
    uint64_t v12 = 0;
    uint64_t v11 = v42;
    unint64_t v34 = a1 & 0xC000000000000001;
    uint64_t v35 = v10;
    unint64_t v36 = a1;
    do
    {
      if (v34) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(a1 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      unsigned int v41 = [v13 status];
      id v15 = [v14 address];
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v17;
      uint64_t v40 = v16;

      id v18 = [v14 advertisementData];
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      id v22 = [v14 reserved];
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      id v26 = [v14 rssi];
      id v27 = [v14 scanDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v28 = v39;
      *(void *)uint64_t v8 = v40;
      *((void *)v8 + 1) = v28;
      *((void *)v8 + 2) = v19;
      *((void *)v8 + 3) = v21;
      v8[32] = v41;
      *((void *)v8 + 5) = v23;
      *((void *)v8 + 6) = v25;
      *((void *)v8 + 7) = v26;
      uint64_t v42 = v11;
      unint64_t v30 = v11[2];
      unint64_t v29 = v11[3];
      if (v30 >= v29 >> 1)
      {
        sub_1000B78B8(v29 > 1, v30 + 1, 1);
        uint64_t v11 = v42;
      }
      ++v12;
      void v11[2] = v30 + 1;
      sub_1001E0368((uint64_t)v8, (uint64_t)v11+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v30, (uint64_t (*)(void))type metadata accessor for SPCachedAdvertisement);
      a1 = v36;
    }
    while (v35 != v12);
    a3 = v33;
LABEL_15:
    swift_beginAccess();
    swift_unknownObjectRetain();
    double v31 = sub_100A9B7F4((uint64_t)v11);
    swift_bridgeObjectRelease();
    _Block_copy(a3);
    sub_1001DE838((uint64_t)v31, (uint64_t)a3);
    _Block_release(a3);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    _Block_release(a3);
    return;
  }
  __break(1u);
}

uint64_t sub_1001DEE68(uint64_t a1)
{
  if (sub_1001DE020())
  {
    char v2 = 2;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637240 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = 0xD000000000000036;
    *(void *)(v3 + 40) = 0x80000001013EE500;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  sub_1001DF300();
  swift_allocError();
  char *v4 = v2;
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v5);

  return swift_errorRelease();
}

uint64_t sub_1001DEFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637240 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 64) = &protocol witness table for Int;
  *(void *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_unknownObjectRetain();
  sub_1001DEE68(a3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1001DF0F8(void (*a1)(uint64_t *))
{
  uint64_t v2 = sub_10000588C(&qword_10163EA60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v6 = 2;
  if ((sub_1001DE020() & 1) == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637240 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = 0xD000000000000035;
    *(void *)(v7 + 40) = 0x80000001013EE540;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    char v6 = 0;
  }
  sub_1001DF300();
  uint64_t v8 = swift_allocError();
  *uint64_t v9 = v6;
  uint64_t *v5 = v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for LegacyResult.failure<A>(_:), v2);
  a1(v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1001DF300()
{
  unint64_t result = qword_10163EA68;
  if (!qword_10163EA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EA68);
  }
  return result;
}

unint64_t sub_1001DF354()
{
  unint64_t result = qword_10163EA70;
  if (!qword_10163EA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EA70);
  }
  return result;
}

uint64_t sub_1001DF3AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1001DCE48(a1, v4, v5, v7, v6);
}

uint64_t sub_1001DF46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservedAdvertisement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DF4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163EA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DF538(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001DF580()
{
  unint64_t result = qword_10163EAB0;
  if (!qword_10163EAB0)
  {
    sub_10001D4B0(255, (unint64_t *)&unk_10164FD00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EAB0);
  }
  return result;
}

uint64_t sub_1001DF5EC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DF624()
{
  return sub_1001DB11C();
}

uint64_t sub_1001DF62C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DF664(uint64_t a1)
{
  return sub_100A6C754(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1001DF66C(uint64_t a1)
{
  return sub_1001DB1A8(a1, v1);
}

uint64_t sub_1001DF688()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001DF6C8()
{
  sub_1001DB468(*(void *)(v0 + 16));
}

uint64_t sub_1001DF6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001DF6E0()
{
  return swift_release();
}

uint64_t sub_1001DF6E8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001DF728()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_10090A784();
}

uint64_t sub_1001DF7DC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001DF814(uint64_t a1)
{
  sub_10121EA00(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001DF81C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2
     + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = qword_101636CD8;
  swift_unknownObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v9 = sub_1010AB69C(v14);
  swift_bridgeObjectRelease();
  if (qword_1016374A0 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_10170F300;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = *(void (**)(void, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v6 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  v12(0, v10, v9, sub_1001DFD20, v11, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1001DF9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_retain();
  if (a1 == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_10164DBB0);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_10163EB10;
  *(void *)(v13 + 24) = v9;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    void v15[2] = v10;
    v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1001DFC34()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001DFC74()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 128) = v3;
  return _swift_task_switch(sub_1001DA2DC, 0, 0);
}

void sub_1001DFD20(uint64_t a1)
{
  sub_1001D9C44(a1, *(void (**)(id))(v1 + 16));
}

void sub_1001DFD28(uint64_t a1, uint64_t a2)
{
  sub_1001D9A5C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001DFD30()
{
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t sub_1001DFF20(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  type metadata accessor for Date();
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = v1[5];
  uint64_t v13 = v1[6];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_1001DBF70(a1, v9, v10, v11, v12, v13, (uint64_t)v1 + v5, (uint64_t)v1 + v8);
}

uint64_t sub_1001E00FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1001E015C(uint64_t a1, char a2)
{
  sub_1001D9098(a1, a2 & 1, *(void (**)(id))(v2 + 16));
}

uint64_t sub_1001E0168()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1001E01B0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  long long v3 = *(_OWORD *)(v0 + 40);
  long long v4 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v3;
  *(_OWORD *)(v1 + 48) = v4;
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v7;
  void *v7 = v1;
  v7[1] = sub_1001E0274;
  return sub_1001D7DE0(v2, (uint64_t *)(v1 + 16), v6, v5);
}

uint64_t sub_1001E0274()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001E0368(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for AdvertisementCacheEntitlement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E049CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheEntitlement()
{
  return &type metadata for AdvertisementCacheEntitlement;
}

unsigned char *storeEnumTagSinglePayload for AdvertisementCacheServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E05A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheServiceError()
{
  return &type metadata for AdvertisementCacheServiceError;
}

unint64_t sub_1001E05DC()
{
  unint64_t result = qword_10163EB68;
  if (!qword_10163EB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EB68);
  }
  return result;
}

unint64_t sub_1001E0634()
{
  unint64_t result = qword_10163EB70;
  if (!qword_10163EB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EB70);
  }
  return result;
}

unint64_t sub_1001E068C()
{
  unint64_t result = qword_10163EB78;
  if (!qword_10163EB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EB78);
  }
  return result;
}

uint64_t sub_1001E0710@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v43 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(int *)(v12 + 40);
  *(void *)&v14[v15] = 0;
  id v16 = [a1 address];
  if (!v16)
  {

    id v18 = 0;
    goto LABEL_5;
  }
  uint64_t v17 = v16;
  uint64_t v41 = v11;
  uint64_t v42 = a2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  MACAddress.init(string:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_1001E0B4C((uint64_t)v6);
    id v18 = *(void **)&v14[v15];
    uint64_t v11 = v41;
    a2 = v42;
LABEL_5:

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v11 + 56))(a2, 1, 1, v10);
  }
  uint64_t v20 = v43;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v43, v6, v7);
  *(void *)&v14[v15] = a1;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v20, v7);
  id v21 = a1;
  id v22 = [v21 name];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v26 = 0xE000000000000000;
  }
  uint64_t v27 = v41;
  uint64_t v28 = (uint64_t *)&v14[v10[5]];
  *uint64_t v28 = v24;
  v28[1] = v26;
  *(_DWORD *)&v14[v10[6]] = [v21 vendorId];
  id v29 = [v21 productName];
  if (v29)
  {
    unint64_t v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v33 = 0xE000000000000000;
  }
  unint64_t v34 = (uint64_t *)&v14[v10[7]];
  *unint64_t v34 = v31;
  v34[1] = v33;
  *(_DWORD *)&v14[v10[8]] = [v21 productId];
  uint64_t v35 = sub_1002AAF08([v21 vendorId], [v21 productId]);
  uint64_t v37 = v36;

  (*(void (**)(char *, uint64_t))(v8 + 8))(v43, v7);
  uint64_t v38 = (uint64_t *)&v14[v10[9]];
  *uint64_t v38 = v35;
  v38[1] = v37;
  uint64_t v39 = v42;
  sub_1001E0D70((uint64_t)v14, v42);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v27 + 56))(v39, 0, 1, v10);
  return sub_1001E0DD4((uint64_t)v14);
}

uint64_t type metadata accessor for BluetoothManagerDevice()
{
  uint64_t result = qword_10163EBD8;
  if (!qword_10163EBD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001E0B4C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E0BAC()
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  strcpy((char *)v13, "<productName:");
  HIWORD(v13[1]) = -4864;
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BluetoothManagerDevice() + 28));
  uint64_t v2 = *v1;
  int v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x746375646F727020;
  v5._object = (void *)0xEB000000003A6449;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x49726F646E657620;
  v7._object = (void *)0xEA00000000003A64;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  type metadata accessor for MACAddress();
  sub_1001E0E30();
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v13[0];
}

uint64_t sub_1001E0D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BluetoothManagerDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E0DD4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BluetoothManagerDevice();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001E0E30()
{
  unint64_t result = qword_101649EE0;
  if (!qword_101649EE0)
  {
    type metadata accessor for MACAddress();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649EE0);
  }
  return result;
}

uint64_t *sub_1001E0E88(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    Swift::String v10 = (uint64_t *)((char *)a1 + v8);
    Swift::String v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    *(_DWORD *)((char *)a1 + v9) = *(_DWORD *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    id v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *(_DWORD *)((char *)a1 + v14) = *(_DWORD *)((char *)a2 + v14);
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    unint64_t v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v23 = *v20;
      sub_1000361E0(*v20, v21);
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
    uint64_t v24 = a3[10];
    unint64_t v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v25;
    id v26 = v25;
  }
  return a1;
}

void sub_1001E0FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 36));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*v5, v6);
  }
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 40));
}

uint64_t sub_1001E109C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  Swift::String v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = *(void *)(a2 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_1000361E0(*v19, v20);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void **)(a2 + v22);
  *(void *)(a1 + v22) = v23;
  id v24 = v23;
  return a1;
}

uint64_t sub_1001E11AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v13 = a3[9];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (*(void *)(a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      sub_1000361E0(v18, v16);
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      *uint64_t v14 = v18;
      v14[1] = v16;
      sub_10001CFB8(v19, v20);
      goto LABEL_8;
    }
    sub_1001E132C((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  uint64_t v17 = *v15;
  sub_1000361E0(v17, v16);
  *uint64_t v14 = v17;
  v14[1] = v16;
LABEL_8:
  uint64_t v21 = a3[10];
  uint64_t v22 = *(void **)(a1 + v21);
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  id v24 = v23;

  return a1;
}

uint64_t sub_1001E132C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001E1380(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_1001E142C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = *(void *)(a1 + v17 + 8);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = v19[1];
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v18;
      *uint64_t v18 = *v19;
      v18[1] = v21;
      sub_10001CFB8(v22, v20);
      goto LABEL_6;
    }
    sub_1001E132C((uint64_t)v18);
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
LABEL_6:
  uint64_t v23 = a3[10];
  id v24 = *(void **)(a1 + v23);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);

  return a1;
}

uint64_t sub_1001E1550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E1564);
}

uint64_t sub_1001E1564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001E1628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E163C);
}

uint64_t sub_1001E163C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001E16FC()
{
  uint64_t result = type metadata accessor for MACAddress();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001E17B8@<X0>(uint64_t *a1@<X8>)
{
  sub_1001E1A4C(v1, v28);
  sub_1001E1A4C(v28, v30);
  sub_1001E1A4C(v1, v29);
  switch(sub_1001E1A7C((uint64_t)v29))
  {
    case 1u:
      uint64_t v6 = (const void *)sub_1001E1BE8((uint64_t)v29);
      a1[3] = (uint64_t)&type metadata for PencilSendPairingCommandPayload;
      a1[4] = sub_1001E1C04();
      uint64_t v7 = swift_allocObject();
      *a1 = v7;
      memmove((void *)(v7 + 16), v6, 0x90uLL);
      sub_1001E1A4C(v30, v27);
      uint64_t v8 = (uint64_t *)sub_1001E1BE8((uint64_t)v27);
      return sub_1001E2EDC(v8, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    case 2u:
      uint64_t v10 = sub_1001E1BE8((uint64_t)v29);
      long long v24 = *(_OWORD *)(v10 + 16);
      long long v25 = *(_OWORD *)v10;
      uint64_t v4 = *(void *)(v10 + 32);
      uint64_t v5 = *(void *)(v10 + 40);
      a1[3] = (uint64_t)&type metadata for PencilFinalizePairingCommandPayload;
      a1[4] = sub_1001E1B90();
      goto LABEL_5;
    case 3u:
      uint64_t v17 = sub_1001E1BE8((uint64_t)v29);
      long long v26 = *(_OWORD *)v17;
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = *(void *)(v17 + 24);
      a1[3] = (uint64_t)&type metadata for PencilSendPairingStatusCommandPayload;
      a1[4] = sub_1001E1AFC();
      uint64_t v20 = swift_allocObject();
      *a1 = v20;
      *(_OWORD *)(v20 + 16) = v26;
      *(void *)(v20 + 32) = v18;
      *(void *)(v20 + 40) = v19;
      sub_1001E1A4C(v30, v27);
      unint64_t v21 = (uint64_t *)sub_1001E1BE8((uint64_t)v27);
      uint64_t v22 = v21[2];
      unint64_t v23 = v21[3];
      sub_1000361E0(*v21, v21[1]);
      return (uint64_t *)sub_1000361E0(v22, v23);
    case 4u:
      a1[3] = (uint64_t)&type metadata for PencilPairingCompleteCommandPayload;
      uint64_t result = (uint64_t *)sub_1001E1AA8();
      goto LABEL_9;
    case 5u:
      a1[3] = (uint64_t)&type metadata for UnpairCommandPayload;
      uint64_t result = (uint64_t *)sub_100062118();
LABEL_9:
      a1[4] = (uint64_t)result;
      break;
    default:
      uint64_t v3 = sub_1001E1BE8((uint64_t)v29);
      long long v24 = *(_OWORD *)(v3 + 16);
      long long v25 = *(_OWORD *)v3;
      uint64_t v4 = *(void *)(v3 + 32);
      uint64_t v5 = *(void *)(v3 + 40);
      a1[3] = (uint64_t)&type metadata for PencilInitiatePairingCommandPayload;
      a1[4] = sub_1001E1CD0();
LABEL_5:
      uint64_t v11 = swift_allocObject();
      *a1 = v11;
      *(_OWORD *)(v11 + 16) = v25;
      *(_OWORD *)(v11 + 32) = v24;
      *(void *)(v11 + 48) = v4;
      *(void *)(v11 + 56) = v5;
      sub_1001E1A4C(v30, v27);
      uint64_t v12 = (uint64_t *)sub_1001E1BE8((uint64_t)v27);
      uint64_t v13 = v12[2];
      unint64_t v14 = v12[3];
      uint64_t v15 = v12[4];
      unint64_t v16 = v12[5];
      sub_1000361E0(*v12, v12[1]);
      sub_1000361E0(v13, v14);
      uint64_t result = (uint64_t *)sub_1000361E0(v15, v16);
      break;
  }
  return result;
}

_OWORD *sub_1001E1A4C(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  long long v2 = a1[1];
  long long v3 = a1[2];
  long long v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  long long v5 = a1[5];
  long long v6 = a1[6];
  long long v7 = a1[8];
  a2[7] = a1[7];
  a2[8] = v7;
  a2[5] = v5;
  a2[6] = v6;
  return a2;
}

uint64_t sub_1001E1A7C(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 136) >> 59) & 6 | ((*(void *)(a1 + 120) & 0x2000000000000000) != 0);
  if (v1 <= 3) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

unint64_t sub_1001E1AA8()
{
  unint64_t result = qword_10163EC28;
  if (!qword_10163EC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC28);
  }
  return result;
}

unint64_t sub_1001E1AFC()
{
  unint64_t result = qword_10163EC30;
  if (!qword_10163EC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC30);
  }
  return result;
}

uint64_t sub_1001E1B50()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1001E1B90()
{
  unint64_t result = qword_10163EC38;
  if (!qword_10163EC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC38);
  }
  return result;
}

uint64_t sub_1001E1BE8(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 120) &= ~0x2000000000000000uLL;
  *(void *)(result + 136) = v1;
  return result;
}

unint64_t sub_1001E1C04()
{
  unint64_t result = qword_10163EC40;
  if (!qword_10163EC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC40);
  }
  return result;
}

uint64_t sub_1001E1C58()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));

  return _swift_deallocObject(v0, 160, 7);
}

unint64_t sub_1001E1CD0()
{
  unint64_t result = qword_10163EC48;
  if (!qword_10163EC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC48);
  }
  return result;
}

uint64_t sub_1001E1D28()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

void destroy for PencilPairingCommand(uint64_t a1)
{
}

void sub_1001E1DD0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, void (*a19)(void))
{
  switch((a18 >> 59) & 6 | ((a16 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 2uLL:
      a19();
      ((void (*)(uint64_t, unint64_t))a19)(a3, a4);
      uint64_t v23 = a5;
      unint64_t v24 = a6;
      goto LABEL_5;
    case 1uLL:
      a19();
      ((void (*)(uint64_t, unint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, unint64_t))a19)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a19)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a19)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a19)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a19)(a13, a14);
      ((void (*)(uint64_t, unint64_t))a19)(a15, a16 & 0xDFFFFFFFFFFFFFFFLL);
      uint64_t v23 = a17;
      unint64_t v24 = a18 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3uLL:
      a19();
      uint64_t v23 = a3;
      unint64_t v24 = a4;
LABEL_5:
      ((void (*)(uint64_t, unint64_t))a19)(v23, v24);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for PencilPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  unint64_t v21 = a2[17];
  sub_1001E1DD0(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_1000361E0);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for PencilPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v28 = a2[10];
  uint64_t v29 = a2[11];
  uint64_t v30 = a2[12];
  uint64_t v31 = a2[13];
  uint64_t v32 = a2[14];
  uint64_t v33 = a2[15];
  uint64_t v34 = a2[16];
  unint64_t v35 = a2[17];
  sub_1001E1DD0(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, (void (*)(void))sub_1000361E0);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v25 = *(void *)(a1 + 136);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v34;
  *(void *)(a1 + 136) = v35;
  sub_1001E1DD0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, (void (*)(void))sub_10001CFB8);
  return a1;
}

uint64_t assignWithTake for PencilPairingCommand(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 128);
  unint64_t v16 = *(void *)(a1 + 136);
  long long v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_1001E1DD0(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16, (void (*)(void))sub_10001CFB8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x3FFFB && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 262140);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 88);
  __int16 v6 = *(_WORD *)(a1 + 110);
  unint64_t v7 = *(void *)(a1 + 120);
  if ((((8
        * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0x4000)) | (((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000) >> 15)) ^ 0x3FFFF) >= 0x3FFFB)
    int v8 = -1;
  else {
    int v8 = ((8
  }
         * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0x4000)) | (((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000) >> 15)) ^ 0x3FFFF;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFFB)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 262140;
    if (a3 >= 0x3FFFC) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFFC) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2)
    {
      uint64_t v3 = ((-a2 >> 3) & 0x7FFF) - (a2 << 15);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(void *)(result + 64) = 0;
      *(void *)(result + 72) = (v3 << 52) & 0x3000000000000000;
      *(void *)(result + 80) = 0;
      *(void *)(result + 88) = (v3 << 50) & 0x3000000000000000;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = (v3 << 48) & 0x3000000000000000;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = (v3 << 46) & 0x3000000000000000;
      *(void *)(result + 128) = 0;
      *(void *)(result + 136) = (v3 << 44) & 0x3000000000000000;
    }
  }
  return result;
}

void *sub_1001E24AC(void *result, unsigned int a2)
{
  if (a2 < 4)
  {
    unint64_t v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v5 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v6 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v7 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v8 = result[15] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    unint64_t v9 = result[17] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] &= 0xCFFFFFFFFFFFFFFFLL;
    result[3] = v2;
    result[5] = v3;
    result[7] = v4;
    result[9] = v5;
    result[11] = v6;
    result[13] = v7;
    result[15] = v8;
    result[17] = v9;
  }
  else
  {
    *unint64_t result = a2 - 4;
    *(_OWORD *)(result + 1) = 0u;
    *(_OWORD *)(result + 3) = 0u;
    *(_OWORD *)(result + 5) = 0u;
    *(_OWORD *)(result + 7) = 0u;
    *(_OWORD *)(result + 9) = 0u;
    *(_OWORD *)(result + 11) = 0u;
    *(_OWORD *)(result + 13) = 0u;
    *(_OWORD *)(result + 15) = 0u;
    result[17] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCommand()
{
  return &type metadata for PencilPairingCommand;
}

_OWORD *sub_1001E2574@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t result = sub_1001E34DC(a1, v5);
  if (!v2) {
    return sub_1001E1A4C(v5, a2);
  }
  return result;
}

uint64_t sub_1001E25BC(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Endianness();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1001E1A4C(v3, v56);
  int v9 = sub_1001E1A7C((uint64_t)v56);
  __int16 v10 = 260;
  switch(v9)
  {
    case 1:
      sub_1001E1BE8((uint64_t)v56);
      __int16 v10 = 257;
      break;
    case 2:
      sub_1001E1BE8((uint64_t)v56);
      __int16 v10 = 258;
      break;
    case 3:
      sub_1001E1BE8((uint64_t)v56);
      __int16 v10 = 259;
      break;
    case 4:
      break;
    case 5:
      __int16 v10 = 516;
      break;
    default:
      sub_1001E1BE8((uint64_t)v56);
      __int16 v10 = 256;
      break;
  }
  LOWORD(v34) = v10;
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOWORD(v34) = v43;
  sub_1000BD078((uint64_t)v53, v54);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v2)
  {
    sub_1001E1A4C(v3, v55);
    switch(sub_1001E1A7C((uint64_t)v55))
    {
      case 1u:
        sub_1001E1BE8((uint64_t)v55);
        sub_1001E17B8(v52);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_24;
        }
        long long v40 = v49;
        long long v41 = v50;
        long long v42 = v51;
        long long v36 = v45;
        long long v37 = v46;
        long long v38 = v47;
        long long v39 = v48;
        long long v34 = v43;
        unsigned long long v35 = v44;
        long long v31 = v49;
        long long v32 = v50;
        long long v33 = v51;
        long long v27 = v45;
        long long v28 = v46;
        long long v29 = v47;
        long long v30 = v48;
        unsigned long long v25 = v43;
        long long v26 = v44;
        sub_1000BD078((uint64_t)v53, v54);
        sub_100178634();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_1001E2EDC((uint64_t *)&v34, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
      case 2u:
        sub_1001E1BE8((uint64_t)v55);
        sub_1001E17B8((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_24;
        }
        unsigned long long v16 = v43;
        unint64_t v13 = *((void *)&v44 + 1);
        uint64_t v12 = v44;
        unint64_t v24 = *((void *)&v45 + 1);
        uint64_t v57 = v45;
        sub_1000BD078((uint64_t)v53, v54);
        sub_1001E2E88();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        unint64_t v15 = v16 >> 64;
        uint64_t v14 = v16;
        goto LABEL_15;
      case 3u:
        sub_1001E1BE8((uint64_t)v55);
        sub_1001E17B8((uint64_t *)&v43);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_24;
        }
        long long v19 = v34;
        unsigned long long v20 = v35;
        unsigned long long v43 = v34;
        long long v44 = v35;
        sub_1000BD078((uint64_t)v53, v54);
        sub_1001E2E34();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v19, *((unint64_t *)&v19 + 1));
        unint64_t v18 = v20 >> 64;
        uint64_t v17 = v20;
        goto LABEL_18;
      case 4u:
        sub_1001E17B8((uint64_t *)&v43);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_24;
        }
        sub_1000BD078((uint64_t)v53, v54);
        sub_1001E2DE0();
        goto LABEL_23;
      case 5u:
        sub_1001E17B8((uint64_t *)&v43);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_24;
        }
        sub_1000BD078((uint64_t)v53, v54);
        sub_1001E2D8C();
LABEL_23:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        break;
      default:
        sub_1001E1BE8((uint64_t)v55);
        sub_1001E17B8((uint64_t *)&v34);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          unsigned long long v11 = v43;
          unint64_t v13 = *((void *)&v44 + 1);
          uint64_t v12 = v44;
          unint64_t v24 = *((void *)&v45 + 1);
          uint64_t v57 = v45;
          sub_1000BD078((uint64_t)v53, v54);
          sub_1001E2FE8();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          unint64_t v15 = v11 >> 64;
          uint64_t v14 = v11;
LABEL_15:
          sub_10001CFB8(v14, v15);
          sub_10001CFB8(v12, v13);
          uint64_t v17 = v57;
          unint64_t v18 = v24;
LABEL_18:
          sub_10001CFB8(v17, v18);
        }
        else
        {
LABEL_24:
          sub_1001E2D38();
          swift_allocError();
          *long long v21 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v53);
}

_OWORD *sub_1001E2CA0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t result = sub_1001E2574(a1, v5);
  if (!v2) {
    return sub_1001E1A4C(v5, a2);
  }
  return result;
}

uint64_t sub_1001E2CE8(void *a1)
{
  sub_1001E1A4C(v1, v4);
  return sub_1001E25BC(a1);
}

unint64_t sub_1001E2D38()
{
  unint64_t result = qword_10163EC50;
  if (!qword_10163EC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC50);
  }
  return result;
}

unint64_t sub_1001E2D8C()
{
  unint64_t result = qword_10163EC58;
  if (!qword_10163EC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC58);
  }
  return result;
}

unint64_t sub_1001E2DE0()
{
  unint64_t result = qword_10163EC60;
  if (!qword_10163EC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC60);
  }
  return result;
}

unint64_t sub_1001E2E34()
{
  unint64_t result = qword_10163EC68;
  if (!qword_10163EC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC68);
  }
  return result;
}

unint64_t sub_1001E2E88()
{
  unint64_t result = qword_10163EC70;
  if (!qword_10163EC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC70);
  }
  return result;
}

uint64_t *sub_1001E2EDC(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  return a1;
}

unint64_t sub_1001E2FE8()
{
  unint64_t result = qword_10163EC78;
  if (!qword_10163EC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC78);
  }
  return result;
}

uint64_t sub_1001E303C(unsigned __int16 a1)
{
  int v1 = a1;
  int v2 = a1 - 256;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    default:
      if (v1 == 516) {
        uint64_t result = 5;
      }
      else {
        uint64_t result = 6;
      }
      break;
  }
  return result;
}

_OWORD *sub_1001E30B8@<X0>(char a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v46);
  switch(a1)
  {
    case 1:
      sub_1001E1C04();
      uint64_t v6 = &type metadata for PencilSendPairingCommandPayload;
      break;
    case 2:
      sub_1001E1B90();
      uint64_t v6 = &type metadata for PencilFinalizePairingCommandPayload;
      break;
    case 3:
      sub_1001E1AFC();
      uint64_t v6 = &type metadata for PencilSendPairingStatusCommandPayload;
      break;
    case 4:
      sub_1001E1AA8();
      uint64_t v6 = &type metadata for PencilPairingCompleteCommandPayload;
      break;
    case 5:
      sub_100062118();
      uint64_t v6 = &type metadata for UnpairCommandPayload;
      break;
    default:
      sub_1001E1CD0();
      uint64_t v6 = &type metadata for PencilInitiatePairingCommandPayload;
      break;
  }
  sub_10001CD44(v46, v46[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x1001E34ACLL);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v35);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      long long v23 = v42;
      long long v24 = v43;
      long long v25 = v44;
      long long v19 = v38;
      long long v20 = v39;
      long long v21 = v40;
      long long v22 = v41;
      long long v17 = v36;
      long long v18 = v37;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v32 = v23;
      long long v33 = v24;
      long long v34 = v25;
      long long v28 = v19;
      long long v29 = v20;
      long long v30 = v21;
      long long v31 = v22;
      long long v26 = v17;
      long long v27 = v18;
      sub_1001E3A2C(&v26);
      uint64_t v9 = &v26;
      goto LABEL_23;
    case 2:
      sub_10001D010(a2, (uint64_t)&v17);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      long long v14 = v27;
      long long v16 = v26;
      long long v10 = v28;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v16;
      long long v37 = v14;
      long long v38 = v10;
      sub_1001E39B8(&v36);
      goto LABEL_22;
    case 3:
      sub_10001D010(a2, (uint64_t)&v26);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v36 = v17;
      long long v37 = v18;
      sub_1001E3940(&v36);
      goto LABEL_22;
    case 4:
      sub_10001D010(a2, (uint64_t)&v26);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_1001E3920((uint64_t)&v36);
      goto LABEL_22;
    case 5:
      sub_10001D010(a2, (uint64_t)&v26);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_1001E38E8((uint64_t)&v36);
      goto LABEL_22;
    default:
      sub_10001D010(a2, (uint64_t)&v17);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        long long v13 = v27;
        long long v15 = v26;
        long long v8 = v28;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        long long v36 = v15;
        long long v37 = v13;
        long long v38 = v8;
        sub_1001E3AA0(&v36);
LABEL_22:
        uint64_t v9 = &v36;
LABEL_23:
        sub_1001E1A4C(v9, v45);
        return sub_1001E1A4C(v45, a3);
      }
      else
      {
LABEL_24:
        sub_1001E2D38();
        swift_allocError();
        *uint64_t v12 = 0;
        swift_willThrow();
        return (_OWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
  }
}

_OWORD *sub_1001E34DC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v27 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  long long v28 = a1;
  sub_10001CD44(a1, v8);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v31, v31[3]);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v2)
  {
    uint64_t v9 = (uint64_t)v28;
LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
    return (_OWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  }
  long long v10 = v27;
  __int16 v33 = v29[0];
  static Endianness.current.getter();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __int16 v11 = v30[0];
  char v12 = sub_1001E303C(v30[0]);
  if (v12 == 6)
  {
    static os_log_type_t.error.getter();
    uint64_t v9 = (uint64_t)v28;
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    LOWORD(v30[0]) = v11;
    uint64_t v14 = FixedWidthInteger.data.getter();
    unint64_t v16 = v15;
    uint64_t v17 = Data.hexString.getter();
    uint64_t v19 = v18;
    sub_10001CFB8(v14, v16);
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v17;
    *(void *)(v13 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1001E2D38();
    swift_allocError();
    *long long v20 = 1;
    swift_willThrow();
    goto LABEL_15;
  }
  char v21 = v12;
  uint64_t v22 = (uint64_t)v28;
  switch(v12)
  {
    case 1:
      long long v23 = &type metadata for PencilSendPairingCommandPayload;
      unint64_t v24 = sub_1001E1C04();
      break;
    case 2:
      long long v23 = &type metadata for PencilFinalizePairingCommandPayload;
      unint64_t v24 = sub_1001E1B90();
      break;
    case 3:
      long long v23 = &type metadata for PencilSendPairingStatusCommandPayload;
      unint64_t v24 = sub_1001E1AFC();
      break;
    case 4:
      long long v23 = &type metadata for PencilPairingCompleteCommandPayload;
      unint64_t v24 = sub_1001E1AA8();
      break;
    case 5:
      long long v23 = &type metadata for UnpairCommandPayload;
      unint64_t v24 = sub_100062118();
      break;
    default:
      long long v23 = &type metadata for PencilInitiatePairingCommandPayload;
      unint64_t v24 = sub_1001E1CD0();
      break;
  }
  uint64_t v25 = v24;
  sub_10001D010(v22, (uint64_t)v29);
  v30[3] = (uint64_t)v23;
  v30[4] = v25;
  sub_10001D958(v30);
  dispatch thunk of BinaryDecodable.init(from:)();
  sub_10001D010((uint64_t)v30, (uint64_t)v29);
  sub_1001E30B8(v21, (uint64_t)v29, v32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return sub_1001E1A4C(v32, v10);
}

double sub_1001E38E8(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0x2000000000000000;
  return result;
}

double sub_1001E3920(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x2000000000000000;
  return result;
}

void *sub_1001E3940(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  unint64_t v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

void *sub_1001E39B8(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

void *sub_1001E3A2C(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[15] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v8;
  result[17] = v7;
  return result;
}

void *sub_1001E3AA0(void *result)
{
  unint64_t v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PencilPairingCommand.PencilPairingCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E3BDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCommand.PencilPairingCommandError()
{
  return &type metadata for PencilPairingCommand.PencilPairingCommandError;
}

unint64_t sub_1001E3C18()
{
  unint64_t result = qword_10163EC80;
  if (!qword_10163EC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EC80);
  }
  return result;
}

uint64_t sub_1001E3C6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[6];
  *a2 = a1[5];
  a2[1] = v2;
  uint64_t v3 = a1[4];
  a2[2] = a1[3];
  a2[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001E3CA8()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  char v12 = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v7 = sub_1010AB63C((uint64_t)v12);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 24) = v7;
  *(void *)(v0 + 32) = v9;
  strcpy((char *)(v0 + 40), "/acsnservice");
  *(unsigned char *)(v0 + 53) = 0;
  *(_WORD *)(v0 + 54) = -5120;
  sub_1001E3F98();
  return v0;
}

uint64_t sub_1001E3F98()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = v1[2];
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v2;
  aBlock[4] = sub_1001E4400;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B3E20;
  char v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v16 = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E429C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = sub_1001E4420();
    uint64_t v4 = v3;
    uint64_t v6 = v5;
    v1[3] = v2;
    v1[4] = v7;
    swift_bridgeObjectRelease();
    v1[5] = v4;
    v1[6] = v6;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E4324()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnonymousCrowdSourceNetworkURLComponents()
{
  return self;
}

uint64_t sub_1001E4390()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E43C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E4400()
{
  return sub_1001E429C();
}

uint64_t sub_1001E4408(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E4418()
{
  return swift_release();
}

uint64_t sub_1001E4420()
{
  uint64_t v0 = type metadata accessor for FMNAccountType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v11 = v22;
  if (sub_1010AB65C(v22))
  {
    static os_log_type_t.default.getter();
    if (qword_101637230 == -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for FMNAccountType.searchParty(_:), v0);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100020198((uint64_t)v6);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  uint64_t v12 = URL.host.getter();
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_13:
    static os_log_type_t.default.getter();
    if (qword_101637230 == -1)
    {
LABEL_14:
      os_log(_:dso:log:_:_:)();
      uint64_t v14 = sub_1010AB63C(v11);
      swift_bridgeObjectRelease();
      return v14;
    }
LABEL_16:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_101637230 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  v21[3] = static os_log_type_t.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v17 = sub_10000B4CC();
  *(void *)(v16 + 64) = v17;
  *(void *)(v16 + 32) = v14;
  *(void *)(v16 + 40) = v15;
  swift_bridgeObjectRetain();
  uint64_t v18 = URL.path.getter();
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v17;
  *(void *)(v16 + 72) = v18;
  *(void *)(v16 + 80) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  URL.path.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

uint64_t sub_1001E4950()
{
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  type metadata accessor for UnwantedTrackingUserNotification();
  v0._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  URL.init(string:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E4A08()
{
  uint64_t v1 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessoryProductInfo();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v83 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  id v84 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification() + 20);
  unint64_t v17 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v18 = v17;
  if (*(unsigned __int8 *)(v16 + v17[13]) - 2 >= 3)
  {
    uint64_t v23 = v16 + v17[12];
    unint64_t v24 = *(void **)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = *(void *)(v23 + 8);
      char v26 = *(unsigned char *)v23;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_101342130;
      long long v28 = (void *)sub_100ECF4F0(v26, v25, v24);
      id v29 = [v28 description];

      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = sub_101115048(v30);
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10000B4CC();
      *(void *)(v27 + 32) = v31;
      *(void *)(v27 + 40) = v33;
    }
    goto LABEL_28;
  }
  double v82 = v7;
  sub_10001D074(v16 + v17[15], (uint64_t)v10, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    sub_1001E5EE0((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    long long v34 = (uint64_t *)&v14[*(int *)(v11 + 48)];
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    swift_bridgeObjectRetain();
    sub_1001EAD40((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    goto LABEL_22;
  }
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166BFA0);
  sub_10001D074(v16 + v18[14], (uint64_t)v3, &qword_1016653B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    double v81 = v18;
    uint64_t v37 = (uint64_t)v82;
    sub_1001E5EE0((uint64_t)v3, (uint64_t)v82, type metadata accessor for AccessoryMetadata);
    BOOL v38 = sub_10028E654();
    long long v39 = (uint64_t *)(v37 + *(int *)(v4 + 28));
    if (!v38)
    {
      uint64_t v35 = *v39;
      uint64_t v36 = v39[1];
      swift_bridgeObjectRetain();
      uint64_t v45 = v37;
LABEL_21:
      sub_1001EAD40(v45, type metadata accessor for AccessoryMetadata);
      uint64_t v18 = v81;
LABEL_22:
      uint64_t v56 = v16 + v18[12];
      long long v20 = *(void **)(v56 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(v56 + 8);
        char v22 = *(unsigned char *)v56;
        if (!v36) {
          goto LABEL_25;
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_101347BA0;
        uint64_t v58 = (void *)sub_100ECF4F0(v22, v21, v20);
        id v59 = [v58 description];

        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v61 = sub_101115048(v60);
        uint64_t v63 = v62;
        swift_bridgeObjectRelease();
        *(void *)(v57 + 56) = &type metadata for String;
        unint64_t v64 = sub_10000B4CC();
        *(void *)(v57 + 32) = v61;
        *(void *)(v57 + 40) = v63;
        *(void *)(v57 + 96) = &type metadata for String;
        *(void *)(v57 + 104) = v64;
        *(void *)(v57 + 64) = v64;
        *(void *)(v57 + 72) = v35;
        *(void *)(v57 + 80) = v36;
      }
      else if (v36)
      {
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v72 = swift_allocObject();
        *(_OWORD *)(v72 + 16) = xmmword_101342130;
        *(void *)(v72 + 56) = &type metadata for String;
        *(void *)(v72 + 64) = sub_10000B4CC();
        *(void *)(v72 + 32) = v35;
        *(void *)(v72 + 40) = v36;
      }
      goto LABEL_28;
    }
    long long v40 = (void *)v39[1];
    Class v80 = "WING_SUBTITLE_HAWKEYE";
    if (v40)
    {
      uint64_t v41 = *v39;
      unint64_t v86 = 0;
      unint64_t v87 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v86 = 0xD00000000000001DLL;
      unint64_t v87 = 0x80000001013F62C0;
      v42._uint64_t countAndFlagsBits = v41;
      v42._object = v40;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      unint64_t v44 = v86;
      unint64_t v43 = v87;
    }
    else
    {
      unint64_t v43 = 0x80000001013F6270;
      unint64_t v44 = 0xD00000000000001CLL;
    }
    uint64_t v46 = v83;
    long long v47 = v84;
    uint64_t v48 = enum case for LocalizationUtility.Table.default(_:);
    uint64_t v49 = v85;
    uint64_t v79 = *(void (**)(char *))(v83 + 104);
    v79(v84);
    uint64_t v35 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v36 = v50;
    uint64_t v78 = *(void (**)(char *, uint64_t))(v46 + 8);
    v78(v47, v49);
    if (v35 == v44 && v36 == v43)
    {
      swift_bridgeObjectRelease();
      uint64_t v51 = (uint64_t)v82;
    }
    else
    {
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = (uint64_t)v82;
      if ((v52 & 1) == 0)
      {
LABEL_20:
        uint64_t v45 = v51;
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v54 = v84;
    uint64_t v53 = v85;
    ((void (*)(char *, uint64_t, uint64_t))v79)(v84, v48, v85);
    uint64_t v35 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v36 = v55;
    v78(v54, v53);
    goto LABEL_20;
  }
  sub_10001DAB4((uint64_t)v3, &qword_1016653B0);
  uint64_t v19 = v16 + v18[12];
  long long v20 = *(void **)(v19 + 16);
  if (v20)
  {
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)v19;
LABEL_25:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_101342130;
    uint64_t v66 = (void *)sub_100ECF4F0(v22, v21, v20);
    id v67 = [v66 description];

    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = sub_101115048(v68);
    uint64_t v71 = v70;
    swift_bridgeObjectRelease();
    *(void *)(v65 + 56) = &type metadata for String;
    *(void *)(v65 + 64) = sub_10000B4CC();
    *(void *)(v65 + 32) = v69;
    *(void *)(v65 + 40) = v71;
  }
LABEL_28:
  uint64_t v73 = v83;
  uint64_t v74 = v84;
  uint64_t v75 = v85;
  (*(void (**)(char *, void, uint64_t))(v83 + 104))(v84, enum case for LocalizationUtility.Table.default(_:), v85);
  static LocalizationUtility.localizedString(key:table:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  uint64_t v76 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t sub_1001E5340()
{
  uint64_t v1 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v1 - 8);
  double v81 = (uint8_t **)((char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryProductInfo();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v14 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v83 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification() + 20);
  unint64_t v17 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v18 = v17;
  int v19 = *(unsigned __int8 *)(v16 + v17[13]);
  if (v19 == 3)
  {
    Class v80 = v6;
    sub_10001D074(v16 + v17[15], (uint64_t)v9, (uint64_t *)&unk_10166BFA0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10166BFA0);
      uint64_t v23 = (void (*)(void, void))v81;
      sub_10001D074(v16 + v18[14], (uint64_t)v81, &qword_1016653B0);
      int v24 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v4 + 48))(v23, 1, v3);
      uint64_t v21 = v14;
      if (v24 == 1)
      {
        sub_10001DAB4((uint64_t)v81, &qword_1016653B0);
        uint64_t v20 = enum case for LocalizationUtility.Table.default(_:);
        uint64_t v22 = v14;
        goto LABEL_7;
      }
      uint64_t v53 = (uint64_t)v80;
      sub_1001E5EE0((uint64_t)v81, (uint64_t)v80, type metadata accessor for AccessoryMetadata);
      BOOL v54 = sub_10028E654();
      uint64_t v55 = v82;
      if (v54)
      {
        uint64_t v56 = (uint64_t *)(v53 + *(int *)(v3 + 28));
        uint64_t v57 = (void *)v56[1];
        if (v57)
        {
          uint64_t v58 = *v56;
          uint64_t v84 = 0;
          unint64_t v85 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          uint64_t v84 = 0xD00000000000001DLL;
          unint64_t v85 = 0x80000001013F62C0;
          v59._uint64_t countAndFlagsBits = v58;
          v59._object = v57;
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          uint64_t v61 = v84;
          unint64_t v60 = v85;
        }
        else
        {
          uint64_t v61 = 0xD00000000000001CLL;
          unint64_t v60 = 0x80000001013F6270;
        }
        uint64_t v63 = *(void (**)(char *))(v21 + 104);
        unint64_t v64 = v83;
        unsigned int v79 = enum case for LocalizationUtility.Table.default(_:);
        v63(v83);
        uint64_t v65 = static LocalizationUtility.localizedString(key:table:)();
        uint64_t v67 = v66;
        double v81 = *(uint8_t ***)(v21 + 8);
        ((void (*)(char *, uint64_t))v81)(v64, v55);
        if (v65 == v61 && v67 == v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          if (qword_101636CA8 != -1) {
            swift_once();
          }
          uint64_t v68 = type metadata accessor for Logger();
          sub_100010324(v68, (uint64_t)qword_10170E318);
          swift_bridgeObjectRetain();
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v71 = swift_slowAlloc();
            uint64_t v78 = v63;
            uint64_t v72 = (uint8_t *)v71;
            uint64_t v84 = swift_slowAlloc();
            *(_DWORD *)uint64_t v72 = 136315138;
            uint64_t v55 = v82;
            unint64_t v77 = v72 + 4;
            swift_bridgeObjectRetain();
            uint64_t v86 = sub_1008FA0F0(v61, v60, &v84);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "No fallback translation for key: %s", v72, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v63 = v78;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v73 = v83;
          ((void (*)(char *, void, uint64_t))v63)(v83, v79, v55);
          uint64_t v27 = static LocalizationUtility.localizedString(key:table:)();
          ((void (*)(char *, uint64_t))v81)(v73, v55);
          uint64_t v49 = type metadata accessor for AccessoryMetadata;
          uint64_t v50 = (uint64_t)v80;
          goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        uint64_t v74 = v83;
        ((void (*)(char *, void, uint64_t))v63)(v83, v79, v55);
        static LocalizationUtility.localizedString(key:table:)();
        ((void (*)(char *, uint64_t))v81)(v74, v55);
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_101342130;
        *(void *)(v75 + 56) = &type metadata for String;
        *(void *)(v75 + 64) = sub_10000B4CC();
        *(void *)(v75 + 32) = v65;
        *(void *)(v75 + 40) = v67;
        uint64_t v27 = String.init(format:_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v62 = v83;
        (*(void (**)(char *, void, uint64_t))(v21 + 104))(v83, enum case for LocalizationUtility.Table.default(_:), v82);
        uint64_t v27 = static LocalizationUtility.localizedString(key:table:)();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v62, v55);
      }
      uint64_t v49 = type metadata accessor for AccessoryMetadata;
      uint64_t v50 = v53;
    }
    else
    {
      sub_1001E5EE0((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      uint64_t v41 = v14;
      Swift::String v42 = *(void (**)(char *, void, uint64_t))(v14 + 104);
      uint64_t v43 = v82;
      unint64_t v44 = v83;
      v42(v83, enum case for LocalizationUtility.Table.default(_:), v82);
      static LocalizationUtility.localizedString(key:table:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v43);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_101342130;
      uint64_t v46 = &v13[*(int *)(v10 + 48)];
      uint64_t v48 = *(void *)v46;
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)(v45 + 56) = &type metadata for String;
      *(void *)(v45 + 64) = sub_10000B4CC();
      *(void *)(v45 + 32) = v48;
      *(void *)(v45 + 40) = v47;
      swift_bridgeObjectRetain();
      uint64_t v27 = String.init(format:_:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo;
      uint64_t v50 = (uint64_t)v13;
    }
LABEL_28:
    sub_1001EAD40(v50, v49);
    return v27;
  }
  if (v19 == 2)
  {
    uint64_t v20 = enum case for LocalizationUtility.Table.default(_:);
    uint64_t v21 = v14;
    uint64_t v22 = v14;
LABEL_7:
    uint64_t v25 = v82;
    char v26 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v83, v20, v82);
    uint64_t v27 = static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v25);
    return v27;
  }
  long long v28 = (uint64_t *)(v16 + v17[12]);
  id v29 = (void *)v28[2];
  if (v29)
  {
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    uint64_t v32 = v82;
    uint64_t v33 = v83;
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v83, enum case for LocalizationUtility.Table.default(_:), v82);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v32);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_101342130;
    uint64_t v35 = (void *)sub_100ECF4F0(v30, v31, v29);
    id v36 = [v35 description];

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = sub_101115048(v37);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    *(void *)(v34 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = sub_10000B4CC();
    *(void *)(v34 + 32) = v38;
    *(void *)(v34 + 40) = v40;
    uint64_t v27 = String.init(format:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = v82;
    char v52 = v83;
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v83, enum case for LocalizationUtility.Table.default(_:), v82);
    uint64_t v27 = static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v52, v51);
  }
  return v27;
}

uint64_t sub_1001E5E68(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

unint64_t sub_1001E5E7C()
{
  return sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001E5E88()
{
  return *v0;
}

uint64_t type metadata accessor for UnwantedTrackingUserNotification()
{
  uint64_t result = qword_10163EDD0;
  if (!qword_10163EDD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001E5EE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_1001E5F48(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    uint64_t v227 = (int *)type metadata accessor for WildModeAssociationRecord(0);
    v228 = v8;
    uint64_t v13 = v227[5];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    v224 = a2;
    uint64_t v225 = a1;
    uint64_t v223 = a3;
    uint64_t v217 = v10;
    uint64_t v214 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&v9[v13], 1, v10))
    {
      uint64_t v16 = sub_10000588C(&qword_101638CF0);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    v228[v227[6]] = v9[v227[6]];
    uint64_t v19 = v227[7];
    uint64_t v20 = &v228[v19];
    uint64_t v21 = &v9[v19];
    uint64_t v22 = type metadata accessor for MACAddress();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    *(void *)&v228[v227[8]] = *(void *)&v9[v227[8]];
    v228[v227[9]] = v9[v227[9]];
    uint64_t v23 = v227[10];
    int v24 = &v228[v23];
    uint64_t v25 = &v9[v23];
    uint64_t v26 = type metadata accessor for Date();
    uint64_t v27 = *(void *)(v26 - 8);
    long long v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    swift_bridgeObjectRetain();
    v28(v24, v25, v26);
    uint64_t v29 = v227[11];
    uint64_t v30 = &v228[v29];
    uint64_t v31 = &v9[v29];
    v226 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v221 = v27;
    uint64_t v222 = v26;
    uint64_t v220 = v28;
    if (v226(&v9[v29], 1, v26))
    {
      uint64_t v32 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v28(v30, v31, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
    }
    uint64_t v33 = v227[12];
    uint64_t v34 = &v228[v33];
    uint64_t v35 = &v9[v33];
    *uint64_t v34 = *v35;
    uint64_t v36 = *((void *)v35 + 2);
    *((void *)v34 + 1) = *((void *)v35 + 1);
    *((void *)v34 + 2) = v36;
    v228[v227[13]] = v9[v227[13]];
    uint64_t v37 = v227[14];
    uint64_t v38 = &v228[v37];
    uint64_t v39 = &v9[v37];
    uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0);
    uint64_t v41 = *((void *)v40 - 1);
    Swift::String v42 = *(unsigned int (**)(char *, uint64_t, int *))(v41 + 48);
    swift_bridgeObjectRetain();
    if (v42(v39, 1, v40))
    {
      uint64_t v43 = sub_10000588C(&qword_1016653B0);
      memcpy(v38, v39, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v214(v38, v39, v217);
      uint64_t v44 = v40[5];
      uint64_t v45 = (uint64_t *)&v38[v44];
      uint64_t v46 = (uint64_t *)&v39[v44];
      uint64_t v47 = *v46;
      unint64_t v48 = v46[1];
      sub_1000361E0(*v46, v48);
      *uint64_t v45 = v47;
      v45[1] = v48;
      uint64_t v49 = v40[6];
      uint64_t v50 = &v38[v49];
      uint64_t v51 = &v39[v49];
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = v52;
      uint64_t v53 = v40[7];
      BOOL v54 = &v38[v53];
      uint64_t v55 = &v39[v53];
      uint64_t v56 = *((void *)v55 + 1);
      *(void *)BOOL v54 = *(void *)v55;
      *((void *)v54 + 1) = v56;
      *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
      uint64_t v57 = v40[9];
      uint64_t v58 = &v38[v57];
      Swift::String v59 = &v39[v57];
      *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      uint64_t v60 = v40[10];
      uint64_t v61 = &v38[v60];
      uint64_t v62 = &v39[v60];
      *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
      v61[16] = v62[16];
      uint64_t v63 = v40[11];
      unint64_t v64 = &v38[v63];
      uint64_t v65 = &v39[v63];
      v64[8] = v65[8];
      *(void *)unint64_t v64 = *(void *)v65;
      uint64_t v66 = v40[12];
      uint64_t v67 = &v38[v66];
      uint64_t v68 = &v39[v66];
      *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
      v67[4] = v68[4];
      v38[v40[13]] = v39[v40[13]];
      v38[v40[14]] = v39[v40[14]];
      uint64_t v69 = v40[15];
      os_log_type_t v70 = &v38[v69];
      uint64_t v71 = &v39[v69];
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)os_log_type_t v70 = *(void *)v71;
      *((void *)v70 + 1) = v72;
      uint64_t v73 = *(void (**)(char *, void, uint64_t, int *))(v41 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v38, 0, 1, v40);
    }
    uint64_t v74 = v227[15];
    uint64_t v75 = &v228[v74];
    uint64_t v76 = &v9[v74];
    unint64_t v77 = (int *)type metadata accessor for AccessoryProductInfo();
    uint64_t v78 = *((void *)v77 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v78 + 48))(v76, 1, v77))
    {
      uint64_t v79 = sub_10000588C((uint64_t *)&unk_10166BFA0);
      memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
      Class v80 = v224;
      uint64_t v18 = v225;
      uint64_t v81 = v222;
      uint64_t v82 = v223;
      uint64_t v84 = v227;
      uint64_t v83 = v228;
      uint64_t v85 = v221;
    }
    else
    {
      uint64_t v213 = v78;
      *(void *)uint64_t v75 = *(void *)v76;
      v75[8] = v76[8];
      uint64_t v86 = v77[5];
      unint64_t v87 = &v75[v86];
      id v88 = &v76[v86];
      uint64_t v89 = type metadata accessor for ServerStatusCode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
      v75[v77[6]] = v76[v77[6]];
      v75[v77[7]] = v76[v77[7]];
      uint64_t v90 = v77[8];
      uint64_t v91 = &v75[v90];
      uint64_t v92 = &v76[v90];
      uint64_t v218 = *((void *)v92 + 1);
      *(void *)uint64_t v91 = *(void *)v92;
      *((void *)v91 + 1) = v218;
      v75[v77[9]] = v76[v77[9]];
      v75[v77[10]] = v76[v77[10]];
      v75[v77[11]] = v76[v77[11]];
      uint64_t v93 = v77[12];
      unsigned __int8 v94 = &v75[v93];
      id v95 = &v76[v93];
      uint64_t v211 = *((void *)v95 + 1);
      *(void *)unsigned __int8 v94 = *(void *)v95;
      *((void *)v94 + 1) = v211;
      uint64_t v96 = v77[13];
      uint64_t v97 = &v75[v96];
      uint64_t v98 = &v76[v96];
      uint64_t v99 = *((void *)v98 + 1);
      *(void *)uint64_t v97 = *(void *)v98;
      *((void *)v97 + 1) = v99;
      uint64_t v100 = v77[14];
      uint64_t v101 = &v75[v100];
      uint64_t v102 = &v76[v100];
      *(void *)uint64_t v101 = *(void *)v102;
      v101[8] = v102[8];
      uint64_t v103 = v77[15];
      unint64_t v104 = &v75[v103];
      unint64_t v105 = &v76[v103];
      uint64_t v106 = *((void *)v105 + 1);
      *(void *)unint64_t v104 = *(void *)v105;
      *((void *)v104 + 1) = v106;
      uint64_t v107 = v77[16];
      __dst = &v75[v107];
      uint64_t v209 = &v76[v107];
      uint64_t v108 = type metadata accessor for URL();
      uint64_t v109 = *(void *)(v108 - 8);
      uint64_t v110 = *(unsigned int (**)(void))(v109 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v216 = v109;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v110)(v209, 1, v108))
      {
        uint64_t v111 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, v209, *(void *)(*(void *)(v111 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(__dst, v209, v108);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(__dst, 0, 1, v108);
      }
      uint64_t v212 = v9;
      uint64_t v112 = v77[17];
      uint64_t v113 = &v75[v112];
      Swift::String v114 = &v76[v112];
      uint64_t v215 = v108;
      uint64_t v207 = v110;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v110)(&v76[v112], 1, v108))
      {
        uint64_t v115 = sub_10000588C(&qword_101649E40);
        memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v113, v114, v108);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v113, 0, 1, v108);
      }
      uint64_t v116 = v77[18];
      uint64_t v117 = &v75[v116];
      uint64_t v118 = &v76[v116];
      uint64_t v119 = *((void *)v118 + 1);
      *(void *)uint64_t v117 = *(void *)v118;
      *((void *)v117 + 1) = v119;
      *(void *)&v75[v77[19]] = *(void *)&v76[v77[19]];
      uint64_t v120 = v77[20];
      uint64_t v121 = &v75[v120];
      uint64_t v122 = &v76[v120];
      unint64_t v123 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      uint64_t v124 = *((void *)v123 - 1);
      int v125 = *(unsigned int (**)(char *, uint64_t, int *))(v124 + 48);
      swift_bridgeObjectRetain();
      if (v125(v122, 1, v123))
      {
        uint64_t v126 = sub_10000588C(&qword_101649E50);
        memcpy(v121, v122, *(void *)(*(void *)(v126 - 8) + 64));
      }
      else
      {
        uint64_t v210 = v124;
        uint64_t v127 = *((void *)v122 + 1);
        *(void *)uint64_t v121 = *(void *)v122;
        *((void *)v121 + 1) = v127;
        uint64_t v128 = *((void *)v122 + 3);
        *((void *)v121 + 2) = *((void *)v122 + 2);
        *((void *)v121 + 3) = v128;
        uint64_t v129 = *((void *)v122 + 5);
        *((void *)v121 + 4) = *((void *)v122 + 4);
        *((void *)v121 + 5) = v129;
        *((_WORD *)v121 + 24) = *((_WORD *)v122 + 24);
        v121[72] = v122[72];
        uint64_t v130 = *((void *)v122 + 8);
        *((void *)v121 + 7) = *((void *)v122 + 7);
        *((void *)v121 + 8) = v130;
        uint64_t v131 = v123[10];
        uint64_t v132 = &v121[v131];
        uint64_t v133 = &v122[v131];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v207)(v133, 1, v215))
        {
          uint64_t v134 = sub_10000588C(&qword_101649E40);
          memcpy(v132, v133, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v132, v133, v215);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v216 + 56))(v132, 0, 1, v215);
        }
        uint64_t v135 = v123[11];
        uint64_t v136 = &v121[v135];
        long long v137 = &v122[v135];
        if (v207())
        {
          uint64_t v138 = sub_10000588C(&qword_101649E40);
          memcpy(v136, v137, *(void *)(*(void *)(v138 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v136, v137, v215);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v216 + 56))(v136, 0, 1, v215);
        }
        uint64_t v139 = v123[12];
        unsigned int v140 = &v121[v139];
        uint64_t v141 = &v122[v139];
        *(void *)unsigned int v140 = *(void *)v141;
        v140[8] = v141[8];
        uint64_t v142 = v123[13];
        uint64_t v143 = &v121[v142];
        uint64_t v144 = &v122[v142];
        uint64_t v145 = *((void *)v144 + 1);
        *(void *)uint64_t v143 = *(void *)v144;
        *((void *)v143 + 1) = v145;
        *(void *)&v121[v123[14]] = *(void *)&v122[v123[14]];
        uint64_t v146 = v123[15];
        uint64_t v147 = &v121[v146];
        unint64_t v148 = &v122[v146];
        uint64_t v149 = *((void *)v148 + 1);
        *(void *)uint64_t v147 = *(void *)v148;
        *((void *)v147 + 1) = v149;
        *(void *)&v121[v123[16]] = *(void *)&v122[v123[16]];
        uint64_t v150 = v123[17];
        uint64_t v151 = &v121[v150];
        uint64_t v152 = &v122[v150];
        *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
        v151[16] = v152[16];
        uint64_t v153 = v123[18];
        uint64_t v154 = &v121[v153];
        uint64_t v155 = &v122[v153];
        *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
        v154[16] = v155[16];
        uint64_t v156 = *(void (**)(char *, void, uint64_t, int *))(v210 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v156(v121, 0, 1, v123);
      }
      *(_DWORD *)&v75[v77[21]] = *(_DWORD *)&v76[v77[21]];
      *(void *)&v75[v77[22]] = *(void *)&v76[v77[22]];
      uint64_t v157 = v77[23];
      uint64_t v158 = &v75[v157];
      uint64_t v159 = &v76[v157];
      unint64_t v160 = *(void *)&v76[v157 + 8];
      swift_bridgeObjectRetain();
      if (v160 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
      }
      else
      {
        uint64_t v161 = *(void *)v159;
        sub_1000361E0(v161, v160);
        *(void *)uint64_t v158 = v161;
        *((void *)v158 + 1) = v160;
      }
      uint64_t v162 = v77[24];
      uint64_t v163 = &v75[v162];
      uint64_t v164 = &v76[v162];
      unint64_t v165 = *((void *)v164 + 1);
      if (v165 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
      }
      else
      {
        uint64_t v166 = *(void *)v164;
        sub_1000361E0(*(void *)v164, *((void *)v164 + 1));
        *(void *)uint64_t v163 = v166;
        *((void *)v163 + 1) = v165;
      }
      uint64_t v167 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
      v167(&v75[v77[25]], &v76[v77[25]], v215);
      v167(&v75[v77[26]], &v76[v77[26]], v215);
      v167(&v75[v77[27]], &v76[v77[27]], v215);
      v167(&v75[v77[28]], &v76[v77[28]], v215);
      v167(&v75[v77[29]], &v76[v77[29]], v215);
      v167(&v75[v77[30]], &v76[v77[30]], v215);
      uint64_t v168 = v77[31];
      uint64_t v169 = &v75[v168];
      v170 = &v76[v168];
      uint64_t v171 = *((void *)v170 + 1);
      *(void *)uint64_t v169 = *(void *)v170;
      *((void *)v169 + 1) = v171;
      *(void *)&v75[v77[32]] = *(void *)&v76[v77[32]];
      uint64_t v172 = v77[33];
      uint64_t v173 = &v75[v172];
      uint64_t v174 = &v76[v172];
      uint64_t v175 = *((void *)v174 + 1);
      *(void *)uint64_t v173 = *(void *)v174;
      *((void *)v173 + 1) = v175;
      *(void *)&v75[v77[34]] = *(void *)&v76[v77[34]];
      uint64_t v176 = v77[35];
      unint64_t v177 = &v75[v176];
      uint64_t v178 = &v76[v176];
      *(_OWORD *)unint64_t v177 = *(_OWORD *)v178;
      v177[16] = v178[16];
      uint64_t v179 = v77[36];
      uint64_t v180 = &v75[v179];
      uint64_t v181 = &v76[v179];
      *(_OWORD *)uint64_t v180 = *(_OWORD *)v181;
      v180[16] = v181[16];
      uint64_t v182 = v77[37];
      os_log_type_t v183 = &v75[v182];
      uint64_t v219 = &v76[v182];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v167(v183, v219, v215);
      v167(&v75[v77[38]], &v76[v77[38]], v215);
      v167(&v75[v77[39]], &v76[v77[39]], v215);
      v167(&v75[v77[40]], &v76[v77[40]], v215);
      v167(&v75[v77[41]], &v76[v77[41]], v215);
      v167(&v75[v77[42]], &v76[v77[42]], v215);
      v75[v77[43]] = v76[v77[43]];
      v75[v77[44]] = v76[v77[44]];
      v75[v77[45]] = v76[v77[45]];
      uint64_t v184 = v77[46];
      uint64_t v185 = &v75[v184];
      uint64_t v186 = &v76[v184];
      uint64_t v187 = *((void *)v186 + 1);
      *(void *)uint64_t v185 = *(void *)v186;
      *((void *)v185 + 1) = v187;
      uint64_t v188 = v77[47];
      uint64_t v189 = &v75[v188];
      uint64_t v190 = &v76[v188];
      uint64_t v191 = *((void *)v190 + 1);
      *(void *)uint64_t v189 = *(void *)v190;
      *((void *)v189 + 1) = v191;
      unint64_t v192 = *(void (**)(char *, void, uint64_t, int *))(v213 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v192(v75, 0, 1, v77);
      Class v80 = v224;
      uint64_t v18 = v225;
      uint64_t v81 = v222;
      uint64_t v82 = v223;
      uint64_t v84 = v227;
      uint64_t v83 = v228;
      uint64_t v85 = v221;
      uint64_t v9 = v212;
    }
    v83[v84[16]] = v9[v84[16]];
    *(void *)&v83[v84[17]] = *(void *)&v9[v84[17]];
    uint64_t v193 = v84[18];
    uint64_t v194 = &v83[v193];
    v195 = &v9[v193];
    swift_bridgeObjectRetain();
    if (v226(v195, 1, v81))
    {
      uint64_t v196 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v194, v195, *(void *)(*(void *)(v196 - 8) + 64));
    }
    else
    {
      v220(v194, v195, v81);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v194, 0, 1, v81);
    }
    uint64_t v197 = v84[19];
    uint64_t v198 = &v83[v197];
    uint64_t v199 = &v9[v197];
    if (v226(&v9[v197], 1, v81))
    {
      uint64_t v200 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
    }
    else
    {
      v220(v198, v199, v81);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v198, 0, 1, v81);
    }
    uint64_t v201 = v84[20];
    uint64_t v202 = &v83[v201];
    os_log_type_t v203 = &v9[v201];
    unint64_t v204 = *((void *)v203 + 1);
    if (((v204 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
    }
    else
    {
      uint64_t v205 = *(void *)v203;
      sub_1000361E0(*(void *)v203, *((void *)v203 + 1));
      *(void *)uint64_t v202 = v205;
      *((void *)v202 + 1) = v204;
    }
    v83[v84[21]] = v9[v84[21]];
    *(_WORD *)&v83[v84[22]] = *(_WORD *)&v9[v84[22]];
    *((unsigned char *)v18 + *(int *)(v82 + 24)) = *((unsigned char *)v80 + *(int *)(v82 + 24));
  }
  return v18;
}

uint64_t sub_1001E7048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v2, v3);
  uint64_t v6 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v7 = v2 + v6[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3)) {
    v5(v7, v3);
  }
  uint64_t v8 = v2 + v6[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v2 + v6[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v2 + v6[11];
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v43(v14, 1, v11)) {
    v13(v14, v11);
  }
  uint64_t v44 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = v2 + v6[14];
  uint64_t v16 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v5(v15, v3);
    sub_10001CFB8(*(void *)(v15 + *(int *)(v16 + 20)), *(void *)(v15 + *(int *)(v16 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v2 + v6[15];
  uint64_t v18 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v18 - 1) + 48))(v17, 1, v18))
  {
    uint64_t v42 = v11;
    uint64_t v19 = v17 + v18[5];
    uint64_t v20 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v17 + v18[16];
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    int v24 = *(unsigned int (**)(void))(v23 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = v17 + v18[17];
    uint64_t v41 = v24;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v25, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v17 + v18[20];
    uint64_t v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v26 + *(int *)(v27 + 40);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v39, v22);
      }
      uint64_t v40 = v26 + *(int *)(v27 + 44);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v40, v22);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    long long v28 = (uint64_t *)(v17 + v18[23]);
    unint64_t v29 = v28[1];
    if (v29 >> 60 != 15) {
      sub_10001CFB8(*v28, v29);
    }
    uint64_t v30 = (uint64_t *)(v17 + v18[24]);
    unint64_t v31 = v30[1];
    if (v31 >> 60 != 15) {
      sub_10001CFB8(*v30, v31);
    }
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v32(v17 + v18[25], v22);
    v32(v17 + v18[26], v22);
    v32(v17 + v18[27], v22);
    v32(v17 + v18[28], v22);
    v32(v17 + v18[29], v22);
    v32(v17 + v18[30], v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v17 + v18[37], v22);
    v32(v17 + v18[38], v22);
    v32(v17 + v18[39], v22);
    v32(v17 + v18[40], v22);
    v32(v17 + v18[41], v22);
    v32(v17 + v18[42], v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v42;
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = v2 + v6[18];
  if (!v43(v33, 1, v11)) {
    v44(v33, v11);
  }
  uint64_t v34 = v2 + v6[19];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(v34, 1, v11);
  if (!result) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v34, v11);
  }
  uint64_t v36 = (uint64_t *)(v2 + v6[20]);
  unint64_t v37 = v36[1];
  if (((v37 >> 60) | 4) != 0xF)
  {
    uint64_t v38 = *v36;
    return sub_10001CFB8(v38, v37);
  }
  return result;
}

unsigned char *sub_1001E7848(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v229 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v230 = v7;
  uint64_t v12 = v229[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  v226 = a2;
  uint64_t v227 = a1;
  uint64_t v225 = a3;
  uint64_t v219 = v9;
  uint64_t v215 = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&v8[v12], 1, v9))
  {
    uint64_t v15 = sub_10000588C(&qword_101638CF0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v230[v229[6]] = v8[v229[6]];
  uint64_t v16 = v229[7];
  uint64_t v17 = &v230[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = type metadata accessor for MACAddress();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(void *)&v230[v229[8]] = *(void *)&v8[v229[8]];
  v230[v229[9]] = v8[v229[9]];
  uint64_t v20 = v229[10];
  uint64_t v21 = &v230[v20];
  uint64_t v22 = &v8[v20];
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(void, void, void))(v24 + 16);
  swift_bridgeObjectRetain();
  uint64_t v26 = v25;
  v25(v21, v22, v23);
  uint64_t v27 = v229[11];
  long long v28 = &v230[v27];
  unint64_t v29 = &v8[v27];
  v228 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v223 = v24;
  uint64_t v224 = v23;
  if (v228(&v8[v27], 1, v23))
  {
    uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v25(v28, v29, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
  }
  uint64_t v31 = v229[12];
  uint64_t v32 = &v230[v31];
  uint64_t v33 = &v8[v31];
  *uint64_t v32 = *v33;
  uint64_t v34 = *((void *)v33 + 2);
  *((void *)v32 + 1) = *((void *)v33 + 1);
  *((void *)v32 + 2) = v34;
  v230[v229[13]] = v8[v229[13]];
  uint64_t v35 = v229[14];
  uint64_t v36 = &v230[v35];
  unint64_t v37 = &v8[v35];
  uint64_t v38 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v39 = *((void *)v38 - 1);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, int *))(v39 + 48);
  swift_bridgeObjectRetain();
  if (v40(v37, 1, v38))
  {
    uint64_t v41 = sub_10000588C(&qword_1016653B0);
    memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v215(v36, v37, v219);
    uint64_t v42 = v38[5];
    uint64_t v43 = (uint64_t *)&v36[v42];
    uint64_t v44 = (uint64_t *)&v37[v42];
    uint64_t v45 = v26;
    uint64_t v46 = *v44;
    unint64_t v47 = v44[1];
    sub_1000361E0(*v44, v47);
    *uint64_t v43 = v46;
    v43[1] = v47;
    uint64_t v48 = v38[6];
    uint64_t v49 = &v36[v48];
    uint64_t v50 = &v37[v48];
    uint64_t v51 = *((void *)v50 + 1);
    *(void *)uint64_t v49 = *(void *)v50;
    *((void *)v49 + 1) = v51;
    uint64_t v52 = v38[7];
    uint64_t v53 = &v36[v52];
    BOOL v54 = &v37[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    *(_DWORD *)&v36[v38[8]] = *(_DWORD *)&v37[v38[8]];
    uint64_t v56 = v38[9];
    uint64_t v57 = &v36[v56];
    uint64_t v58 = &v37[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    uint64_t v59 = v38[10];
    uint64_t v60 = &v36[v59];
    uint64_t v61 = &v37[v59];
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
    v60[16] = v61[16];
    uint64_t v62 = v38[11];
    uint64_t v63 = &v36[v62];
    unint64_t v64 = &v37[v62];
    v63[8] = v64[8];
    *(void *)uint64_t v63 = *(void *)v64;
    uint64_t v65 = v38[12];
    uint64_t v66 = &v36[v65];
    uint64_t v67 = &v37[v65];
    *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
    v66[4] = v67[4];
    v36[v38[13]] = v37[v38[13]];
    v36[v38[14]] = v37[v38[14]];
    uint64_t v68 = v38[15];
    uint64_t v69 = &v36[v68];
    os_log_type_t v70 = &v37[v68];
    uint64_t v71 = *((void *)v70 + 1);
    *(void *)uint64_t v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = *(void (**)(char *, void, uint64_t, int *))(v39 + 56);
    swift_bridgeObjectRetain();
    uint64_t v26 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72(v36, 0, 1, v38);
  }
  uint64_t v73 = v229[15];
  uint64_t v74 = &v230[v73];
  uint64_t v75 = &v8[v73];
  uint64_t v76 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v77 = *((void *)v76 - 1);
  uint64_t v222 = (void (*)(unsigned char *, unsigned char *, uint64_t))v26;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v77 + 48))(v75, 1, v76))
  {
    uint64_t v78 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    Class v80 = v226;
    uint64_t v79 = v227;
    uint64_t v81 = v224;
    uint64_t v82 = v225;
    uint64_t v84 = v229;
    uint64_t v83 = v230;
    uint64_t v85 = v223;
  }
  else
  {
    uint64_t v212 = v77;
    *(void *)uint64_t v74 = *(void *)v75;
    v74[8] = v75[8];
    uint64_t v86 = v76[5];
    unint64_t v87 = &v74[v86];
    id v88 = &v75[v86];
    uint64_t v89 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
    v74[v76[6]] = v75[v76[6]];
    v74[v76[7]] = v75[v76[7]];
    uint64_t v90 = v76[8];
    uint64_t v91 = &v74[v90];
    uint64_t v92 = &v75[v90];
    uint64_t v220 = v92[1];
    *uint64_t v91 = *v92;
    v91[1] = v220;
    v74[v76[9]] = v75[v76[9]];
    v74[v76[10]] = v75[v76[10]];
    v74[v76[11]] = v75[v76[11]];
    uint64_t v93 = v76[12];
    unsigned __int8 v94 = &v74[v93];
    id v95 = &v75[v93];
    uint64_t v217 = v95[1];
    *unsigned __int8 v94 = *v95;
    v94[1] = v217;
    uint64_t v96 = v76[13];
    uint64_t v97 = &v74[v96];
    uint64_t v98 = &v75[v96];
    uint64_t v99 = v98[1];
    void *v97 = *v98;
    v97[1] = v99;
    uint64_t v100 = v76[14];
    uint64_t v101 = &v74[v100];
    uint64_t v102 = &v75[v100];
    *(void *)uint64_t v101 = *(void *)v102;
    v101[8] = v102[8];
    uint64_t v103 = v76[15];
    unint64_t v104 = &v74[v103];
    unint64_t v105 = &v75[v103];
    uint64_t v106 = v105[1];
    *unint64_t v104 = *v105;
    v104[1] = v106;
    uint64_t v107 = v76[16];
    __dst = &v74[v107];
    uint64_t v209 = &v75[v107];
    uint64_t v108 = type metadata accessor for URL();
    uint64_t v109 = *(void *)(v108 - 8);
    uint64_t v110 = *(unsigned int (**)(void))(v109 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v218 = v110;
    uint64_t v216 = v109;
    uint64_t v211 = v8;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v110)(v209, 1, v108))
    {
      uint64_t v111 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v209, *(void *)(*(void *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v109 + 16))(__dst, v209, v108);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(__dst, 0, 1, v108);
    }
    uint64_t v112 = v76[17];
    uint64_t v113 = &v74[v112];
    Swift::String v114 = &v75[v112];
    __dsta = (void *)v108;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v218)(&v75[v112], 1, v108))
    {
      uint64_t v115 = sub_10000588C(&qword_101649E40);
      memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v109 + 16))(v113, v114, v108);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v113, 0, 1, v108);
    }
    uint64_t v116 = v76[18];
    uint64_t v117 = &v74[v116];
    uint64_t v118 = &v75[v116];
    uint64_t v119 = v118[1];
    *uint64_t v117 = *v118;
    v117[1] = v119;
    *(void *)&v74[v76[19]] = *(void *)&v75[v76[19]];
    uint64_t v120 = v76[20];
    uint64_t v121 = &v74[v120];
    uint64_t v122 = &v75[v120];
    unint64_t v123 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v124 = *((void *)v123 - 1);
    int v125 = *(unsigned int (**)(void *, uint64_t, int *))(v124 + 48);
    swift_bridgeObjectRetain();
    if (v125((char *)v122, 1, v123))
    {
      uint64_t v126 = sub_10000588C(&qword_101649E50);
      memcpy(v121, v122, *(void *)(*(void *)(v126 - 8) + 64));
      uint64_t v127 = v216;
    }
    else
    {
      uint64_t v210 = v124;
      uint64_t v128 = v122[1];
      *uint64_t v121 = *v122;
      v121[1] = v128;
      uint64_t v129 = v122[3];
      v121[2] = v122[2];
      v121[3] = v129;
      uint64_t v130 = v122[5];
      v121[4] = v122[4];
      v121[5] = v130;
      *((_WORD *)v121 + 24) = *((_WORD *)v122 + 24);
      *((unsigned char *)v121 + 72) = *((unsigned char *)v122 + 72);
      uint64_t v131 = v122[8];
      v121[7] = v122[7];
      v121[8] = v131;
      uint64_t v132 = v123[10];
      uint64_t v133 = (char *)v121 + v132;
      uint64_t v134 = (char *)v122 + v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (((unsigned int (*)(char *, uint64_t, void *))v218)(v134, 1, __dsta))
      {
        uint64_t v135 = sub_10000588C(&qword_101649E40);
        memcpy(v133, v134, *(void *)(*(void *)(v135 - 8) + 64));
        uint64_t v127 = v216;
      }
      else
      {
        uint64_t v136 = v134;
        uint64_t v127 = v216;
        (*(void (**)(char *, char *, void *))(v216 + 16))(v133, v136, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v216 + 56))(v133, 0, 1, __dsta);
      }
      uint64_t v137 = v123[11];
      uint64_t v138 = (char *)v121 + v137;
      uint64_t v139 = (char *)v122 + v137;
      if (v218())
      {
        uint64_t v140 = sub_10000588C(&qword_101649E40);
        memcpy(v138, v139, *(void *)(*(void *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v127 + 16))(v138, v139, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v127 + 56))(v138, 0, 1, __dsta);
      }
      uint64_t v141 = v123[12];
      uint64_t v142 = (char *)v121 + v141;
      uint64_t v143 = (char *)v122 + v141;
      *(void *)uint64_t v142 = *(void *)v143;
      v142[8] = v143[8];
      uint64_t v144 = v123[13];
      uint64_t v145 = (void *)((char *)v121 + v144);
      uint64_t v146 = (void *)((char *)v122 + v144);
      uint64_t v147 = v146[1];
      *uint64_t v145 = *v146;
      v145[1] = v147;
      *(void *)((char *)v121 + v123[14]) = *(void *)((char *)v122 + v123[14]);
      uint64_t v148 = v123[15];
      uint64_t v149 = (void *)((char *)v121 + v148);
      uint64_t v150 = (void *)((char *)v122 + v148);
      uint64_t v151 = v150[1];
      *uint64_t v149 = *v150;
      v149[1] = v151;
      *(void *)((char *)v121 + v123[16]) = *(void *)((char *)v122 + v123[16]);
      uint64_t v152 = v123[17];
      uint64_t v153 = (char *)v121 + v152;
      uint64_t v154 = (char *)v122 + v152;
      *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
      v153[16] = v154[16];
      uint64_t v155 = v123[18];
      uint64_t v156 = (char *)v121 + v155;
      uint64_t v157 = (char *)v122 + v155;
      *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
      v156[16] = v157[16];
      uint64_t v158 = *(void (**)(void *, void, uint64_t, int *))(v210 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v158(v121, 0, 1, v123);
    }
    *(_DWORD *)&v74[v76[21]] = *(_DWORD *)&v75[v76[21]];
    *(void *)&v74[v76[22]] = *(void *)&v75[v76[22]];
    uint64_t v159 = v76[23];
    unint64_t v160 = &v74[v159];
    uint64_t v161 = &v75[v159];
    unint64_t v162 = *(void *)&v75[v159 + 8];
    swift_bridgeObjectRetain();
    if (v162 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v160 = *v161;
    }
    else
    {
      uint64_t v163 = *(void *)v161;
      sub_1000361E0(v163, v162);
      *(void *)unint64_t v160 = v163;
      *((void *)v160 + 1) = v162;
    }
    uint64_t v164 = v76[24];
    unint64_t v165 = &v74[v164];
    uint64_t v166 = &v75[v164];
    unint64_t v167 = *((void *)v166 + 1);
    if (v167 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v165 = *(_OWORD *)v166;
    }
    else
    {
      uint64_t v168 = *(void *)v166;
      sub_1000361E0(*(void *)v166, *((void *)v166 + 1));
      *(void *)unint64_t v165 = v168;
      *((void *)v165 + 1) = v167;
    }
    uint64_t v169 = *(void (**)(unsigned char *, unsigned char *, void *))(v127 + 16);
    v169(&v74[v76[25]], &v75[v76[25]], __dsta);
    v169(&v74[v76[26]], &v75[v76[26]], __dsta);
    v169(&v74[v76[27]], &v75[v76[27]], __dsta);
    v169(&v74[v76[28]], &v75[v76[28]], __dsta);
    v169(&v74[v76[29]], &v75[v76[29]], __dsta);
    v169(&v74[v76[30]], &v75[v76[30]], __dsta);
    uint64_t v170 = v76[31];
    uint64_t v171 = &v74[v170];
    uint64_t v172 = &v75[v170];
    uint64_t v173 = v172[1];
    void *v171 = *v172;
    v171[1] = v173;
    *(void *)&v74[v76[32]] = *(void *)&v75[v76[32]];
    uint64_t v174 = v76[33];
    uint64_t v175 = &v74[v174];
    uint64_t v176 = &v75[v174];
    uint64_t v177 = v176[1];
    *uint64_t v175 = *v176;
    v175[1] = v177;
    *(void *)&v74[v76[34]] = *(void *)&v75[v76[34]];
    uint64_t v178 = v76[35];
    uint64_t v179 = &v74[v178];
    uint64_t v180 = &v75[v178];
    *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
    v179[16] = v180[16];
    uint64_t v181 = v76[36];
    uint64_t v182 = &v74[v181];
    os_log_type_t v183 = &v75[v181];
    *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
    v182[16] = v183[16];
    uint64_t v184 = v76[37];
    uint64_t v185 = &v74[v184];
    uint64_t v221 = &v75[v184];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v169(v185, v221, __dsta);
    v169(&v74[v76[38]], &v75[v76[38]], __dsta);
    v169(&v74[v76[39]], &v75[v76[39]], __dsta);
    v169(&v74[v76[40]], &v75[v76[40]], __dsta);
    v169(&v74[v76[41]], &v75[v76[41]], __dsta);
    v169(&v74[v76[42]], &v75[v76[42]], __dsta);
    v74[v76[43]] = v75[v76[43]];
    v74[v76[44]] = v75[v76[44]];
    v74[v76[45]] = v75[v76[45]];
    uint64_t v186 = v76[46];
    uint64_t v187 = &v74[v186];
    uint64_t v188 = &v75[v186];
    uint64_t v189 = v188[1];
    *uint64_t v187 = *v188;
    v187[1] = v189;
    uint64_t v190 = v76[47];
    uint64_t v191 = &v74[v190];
    unint64_t v192 = &v75[v190];
    uint64_t v193 = v192[1];
    void *v191 = *v192;
    v191[1] = v193;
    uint64_t v194 = *(void (**)(unsigned char *, void, uint64_t, int *))(v212 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v194(v74, 0, 1, v76);
    Class v80 = v226;
    uint64_t v79 = v227;
    uint64_t v81 = v224;
    uint64_t v82 = v225;
    uint64_t v84 = v229;
    uint64_t v83 = v230;
    uint64_t v85 = v223;
    uint64_t v8 = v211;
  }
  v83[v84[16]] = v8[v84[16]];
  *(void *)&v83[v84[17]] = *(void *)&v8[v84[17]];
  uint64_t v195 = v84[18];
  uint64_t v196 = &v83[v195];
  uint64_t v197 = &v8[v195];
  swift_bridgeObjectRetain();
  if (v228(v197, 1, v81))
  {
    uint64_t v198 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v196, v197, *(void *)(*(void *)(v198 - 8) + 64));
  }
  else
  {
    v222(v196, v197, v81);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v85 + 56))(v196, 0, 1, v81);
  }
  uint64_t v199 = v84[19];
  uint64_t v200 = &v83[v199];
  uint64_t v201 = &v8[v199];
  if (v228(&v8[v199], 1, v81))
  {
    uint64_t v202 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
  }
  else
  {
    v222(v200, v201, v81);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v85 + 56))(v200, 0, 1, v81);
  }
  uint64_t v203 = v84[20];
  unint64_t v204 = &v83[v203];
  uint64_t v205 = &v8[v203];
  unint64_t v206 = *((void *)v205 + 1);
  if (((v206 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)unint64_t v204 = *(_OWORD *)v205;
  }
  else
  {
    uint64_t v207 = *(void *)v205;
    sub_1000361E0(*(void *)v205, *((void *)v205 + 1));
    *(void *)unint64_t v204 = v207;
    *((void *)v204 + 1) = v206;
  }
  v83[v84[21]] = v8[v84[21]];
  *(_WORD *)&v83[v84[22]] = *(_WORD *)&v8[v84[22]];
  v79[*(int *)(v82 + 24)] = v80[*(int *)(v82 + 24)];
  return v79;
}

unsigned char *sub_1001E8900(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 24);
  v9(v5, v6, v7);
  v418 = v5;
  v419 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v10 = v419[5];
  uint64_t v11 = &v5[v10];
  uint64_t v417 = v6;
  uint64_t v12 = &v6[v10];
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  uint64_t v406 = v8;
  double v401 = v9;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v11, v12, v7);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
LABEL_6:
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v9(v11, v12, v7);
LABEL_7:
  v418[v419[6]] = v417[v419[6]];
  uint64_t v17 = v419[7];
  uint64_t v18 = &v418[v17];
  uint64_t v19 = &v417[v17];
  uint64_t v20 = type metadata accessor for MACAddress();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  *(void *)&v418[v419[8]] = *(void *)&v417[v419[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v418[v419[9]] = v417[v419[9]];
  uint64_t v21 = v419[10];
  uint64_t v22 = &v418[v21];
  uint64_t v23 = &v417[v21];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v410 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 24);
  v410(v22, v23, v24);
  uint64_t v26 = v419[11];
  uint64_t v27 = &v418[v26];
  long long v28 = &v417[v26];
  uint64_t v414 = v25;
  unint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48);
  int v30 = v29(&v418[v26], 1, v24);
  uint64_t v415 = v24;
  uint64_t v416 = v29;
  int v31 = v29(v28, 1, v24);
  uint64_t v413 = a1;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v27, v28, v24);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v27, v24);
LABEL_12:
    uint64_t v32 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v410(v27, v28, v24);
LABEL_13:
  uint64_t v33 = v419[12];
  uint64_t v34 = &v418[v33];
  uint64_t v35 = &v417[v33];
  *uint64_t v34 = *v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  *((void *)v34 + 2) = *((void *)v35 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v418[v419[13]] = v417[v419[13]];
  uint64_t v36 = v419[14];
  unint64_t v37 = &v418[v36];
  uint64_t v38 = &v417[v36];
  uint64_t v39 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v406 + 16))(v37, v38, v7);
      uint64_t v44 = v39[5];
      uint64_t v45 = (uint64_t *)&v37[v44];
      uint64_t v46 = (uint64_t *)&v38[v44];
      uint64_t v47 = *v46;
      unint64_t v48 = v46[1];
      sub_1000361E0(*v46, v48);
      *uint64_t v45 = v47;
      v45[1] = v48;
      uint64_t v49 = v39[6];
      uint64_t v50 = &v37[v49];
      uint64_t v51 = &v38[v49];
      *uint64_t v50 = *v51;
      v50[1] = v51[1];
      uint64_t v52 = v39[7];
      uint64_t v53 = &v37[v52];
      BOOL v54 = &v38[v52];
      *uint64_t v53 = *v54;
      v53[1] = v54[1];
      *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
      uint64_t v55 = v39[9];
      uint64_t v56 = &v37[v55];
      uint64_t v57 = &v38[v55];
      int v58 = *(_DWORD *)v57;
      v56[4] = v57[4];
      *(_DWORD *)uint64_t v56 = v58;
      uint64_t v59 = v39[10];
      uint64_t v60 = &v37[v59];
      uint64_t v61 = &v38[v59];
      long long v62 = *(_OWORD *)v61;
      v60[16] = v61[16];
      *(_OWORD *)uint64_t v60 = v62;
      uint64_t v63 = v39[11];
      unint64_t v64 = &v37[v63];
      uint64_t v65 = &v38[v63];
      uint64_t v66 = *(void *)v65;
      v64[8] = v65[8];
      *(void *)unint64_t v64 = v66;
      uint64_t v67 = v39[12];
      uint64_t v68 = &v37[v67];
      uint64_t v69 = &v38[v67];
      LODWORD(v66) = *(_DWORD *)v69;
      v68[4] = v69[4];
      *(_DWORD *)uint64_t v68 = v66;
      v37[v39[13]] = v38[v39[13]];
      v37[v39[14]] = v38[v39[14]];
      uint64_t v70 = v39[15];
      uint64_t v71 = &v37[v70];
      uint64_t v72 = &v38[v70];
      *uint64_t v71 = *v72;
      v71[1] = v72[1];
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, int *))(v40 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v37, 0, 1, v39);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    sub_1001EAD40((uint64_t)v37, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v74 = sub_10000588C(&qword_1016653B0);
    memcpy(v37, v38, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_19;
  }
  v401(v37, v38, v7);
  uint64_t v111 = v39[5];
  uint64_t v112 = (uint64_t *)&v37[v111];
  uint64_t v113 = (uint64_t *)&v38[v111];
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  sub_1000361E0(*v113, v115);
  uint64_t v116 = *v112;
  unint64_t v117 = v112[1];
  *uint64_t v112 = v114;
  v112[1] = v115;
  sub_10001CFB8(v116, v117);
  uint64_t v118 = v39[6];
  uint64_t v119 = &v37[v118];
  uint64_t v120 = &v38[v118];
  *uint64_t v119 = *v120;
  v119[1] = v120[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v121 = v39[7];
  uint64_t v122 = &v37[v121];
  unint64_t v123 = &v38[v121];
  *uint64_t v122 = *v123;
  v122[1] = v123[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v124 = v39[8];
  int v125 = &v37[v124];
  uint64_t v126 = &v38[v124];
  *(_WORD *)int v125 = *(_WORD *)v126;
  v125[2] = v126[2];
  v125[3] = v126[3];
  uint64_t v127 = v39[9];
  uint64_t v128 = &v37[v127];
  uint64_t v129 = &v38[v127];
  int v130 = *(_DWORD *)v129;
  v128[4] = v129[4];
  *(_DWORD *)uint64_t v128 = v130;
  uint64_t v131 = v39[10];
  uint64_t v132 = &v37[v131];
  uint64_t v133 = &v38[v131];
  long long v134 = *(_OWORD *)v133;
  v132[16] = v133[16];
  *(_OWORD *)uint64_t v132 = v134;
  uint64_t v135 = v39[11];
  uint64_t v136 = &v37[v135];
  uint64_t v137 = &v38[v135];
  uint64_t v138 = *(void *)v137;
  v136[8] = v137[8];
  *(void *)uint64_t v136 = v138;
  uint64_t v139 = v39[12];
  uint64_t v140 = &v37[v139];
  uint64_t v141 = &v38[v139];
  LODWORD(v138) = *(_DWORD *)v141;
  v140[4] = v141[4];
  *(_DWORD *)uint64_t v140 = v138;
  v37[v39[13]] = v38[v39[13]];
  v37[v39[14]] = v38[v39[14]];
  uint64_t v142 = v39[15];
  uint64_t v143 = &v37[v142];
  uint64_t v144 = &v38[v142];
  void *v143 = *v144;
  v143[1] = v144[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v75 = v419[15];
  uint64_t v76 = &v418[v75];
  uint64_t v77 = &v417[v75];
  uint64_t v78 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v79 = *((void *)v78 - 1);
  Class v80 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v79 + 48);
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (!v81)
  {
    if (v82)
    {
      sub_1001EAD40((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    uint64_t v145 = *(void *)v77;
    v76[8] = v77[8];
    *(void *)uint64_t v76 = v145;
    uint64_t v146 = v78[5];
    uint64_t v147 = &v76[v146];
    uint64_t v148 = &v77[v146];
    uint64_t v149 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v149 - 8) + 24))(v147, v148, v149);
    v76[v78[6]] = v77[v78[6]];
    v76[v78[7]] = v77[v78[7]];
    uint64_t v150 = v78[8];
    uint64_t v151 = &v76[v150];
    uint64_t v152 = &v77[v150];
    *uint64_t v151 = *v152;
    v151[1] = v152[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v76[v78[9]] = v77[v78[9]];
    v76[v78[10]] = v77[v78[10]];
    v76[v78[11]] = v77[v78[11]];
    uint64_t v153 = v78[12];
    uint64_t v154 = &v76[v153];
    uint64_t v155 = &v77[v153];
    void *v154 = *v155;
    v154[1] = v155[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v156 = v78[13];
    uint64_t v157 = &v76[v156];
    uint64_t v158 = &v77[v156];
    void *v157 = *v158;
    v157[1] = v158[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v159 = v78[14];
    unint64_t v160 = &v76[v159];
    uint64_t v161 = &v77[v159];
    uint64_t v162 = *(void *)v161;
    v160[8] = v161[8];
    *(void *)unint64_t v160 = v162;
    uint64_t v163 = v78[15];
    uint64_t v164 = &v76[v163];
    unint64_t v165 = &v77[v163];
    void *v164 = *v165;
    v164[1] = v165[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v166 = v78[16];
    unint64_t v167 = &v76[v166];
    uint64_t v168 = &v77[v166];
    uint64_t v169 = type metadata accessor for URL();
    uint64_t v170 = *(void *)(v169 - 8);
    uint64_t v171 = *(uint64_t (**)(void))(v170 + 48);
    int v172 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v171)(v167, 1, v169);
    int v173 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v171)(v168, 1, v169);
    if (v172)
    {
      if (!v173)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 16))(v167, v168, v169);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v170 + 56))(v167, 0, 1, v169);
        goto LABEL_43;
      }
    }
    else
    {
      if (!v173)
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 24))(v167, v168, v169);
LABEL_43:
        uint64_t v196 = v78[17];
        uint64_t v197 = &v76[v196];
        uint64_t v198 = &v77[v196];
        int v199 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v171)(&v76[v196], 1, v169);
        int v200 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v171)(v198, 1, v169);
        v405 = v171;
        if (v199)
        {
          if (!v200)
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 16))(v197, v198, v169);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v170 + 56))(v197, 0, 1, v169);
            goto LABEL_49;
          }
        }
        else
        {
          if (!v200)
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 24))(v197, v198, v169);
LABEL_49:
            uint64_t v202 = v78[18];
            uint64_t v203 = &v76[v202];
            unint64_t v204 = &v77[v202];
            void *v203 = *v204;
            v203[1] = v204[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)&v76[v78[19]] = *(void *)&v77[v78[19]];
            unint64_t v408 = v78;
            uint64_t v205 = v78[20];
            uint64_t v206 = (uint64_t)&v76[v205];
            uint64_t v207 = &v77[v205];
            uint64_t v208 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            uint64_t v397 = *((void *)v208 - 1);
            uint64_t v209 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v397 + 48);
            int v210 = v209(v206, 1, v208);
            uint64_t v403 = v208;
            int v211 = v209((uint64_t)v207, 1, v208);
            if (v210)
            {
              if (!v211)
              {
                *(void *)uint64_t v206 = *(void *)v207;
                *(void *)(v206 + 8) = *((void *)v207 + 1);
                *(void *)(v206 + 16) = *((void *)v207 + 2);
                *(void *)(v206 + 24) = *((void *)v207 + 3);
                *(void *)(v206 + 32) = *((void *)v207 + 4);
                *(void *)(v206 + 40) = *((void *)v207 + 5);
                *(_WORD *)(v206 + 48) = *((_WORD *)v207 + 24);
                *(void *)(v206 + 56) = *((void *)v207 + 7);
                uint64_t v212 = *((void *)v207 + 8);
                *(unsigned char *)(v206 + 72) = v207[72];
                *(void *)(v206 + 64) = v212;
                uint64_t v213 = v208[10];
                __src = (void *)(v206 + v213);
                uint64_t v214 = &v207[v213];
                swift_bridgeObjectRetain();
                uint64_t v215 = v214;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                int v216 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v405)(v214, 1, v169);
                uint64_t v217 = v408;
                if (v216)
                {
                  uint64_t v218 = sub_10000588C(&qword_101649E40);
                  memcpy(__src, v215, *(void *)(*(void *)(v218 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v170 + 16))(__src, v215, v169);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(__src, 0, 1, v169);
                }
                uint64_t v285 = v208[11];
                __srca = (void *)(v206 + v285);
                os_log_type_t v286 = &v207[v285];
                if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v405)(&v207[v285], 1, v169))
                {
                  uint64_t v287 = sub_10000588C(&qword_101649E40);
                  memcpy(__srca, v286, *(void *)(*(void *)(v287 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, unsigned char *, uint64_t))(v170 + 16))(__srca, v286, v169);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(__srca, 0, 1, v169);
                }
                uint64_t v288 = v208[12];
                uint64_t v289 = v206 + v288;
                uint64_t v290 = &v207[v288];
                uint64_t v291 = *(void *)v290;
                *(unsigned char *)(v289 + 8) = v290[8];
                *(void *)uint64_t v289 = v291;
                uint64_t v292 = v208[13];
                unint64_t v293 = (void *)(v206 + v292);
                uint64_t v294 = &v207[v292];
                *unint64_t v293 = *v294;
                v293[1] = v294[1];
                *(void *)(v206 + v208[14]) = *(void *)&v207[v208[14]];
                uint64_t v295 = v208[15];
                v296 = (void *)(v206 + v295);
                v297 = &v207[v295];
                void *v296 = *v297;
                v296[1] = v297[1];
                *(void *)(v206 + v208[16]) = *(void *)&v207[v208[16]];
                uint64_t v298 = v208[17];
                uint64_t v299 = v206 + v298;
                uint64_t v300 = &v207[v298];
                long long v301 = *(_OWORD *)v300;
                *(unsigned char *)(v299 + 16) = v300[16];
                *(_OWORD *)uint64_t v299 = v301;
                uint64_t v302 = v208[18];
                uint64_t v303 = v206 + v302;
                v304 = &v207[v302];
                long long v305 = *(_OWORD *)v304;
                *(unsigned char *)(v303 + 16) = v304[16];
                *(_OWORD *)uint64_t v303 = v305;
                v306 = *(void (**)(uint64_t, void, uint64_t, int *))(v397 + 56);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v306(v206, 0, 1, v208);
LABEL_92:
                *(_DWORD *)&v76[v217[21]] = *(_DWORD *)&v77[v217[21]];
                *(void *)&v76[v217[22]] = *(void *)&v77[v217[22]];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v330 = v217[23];
                os_log_type_t v331 = (uint64_t *)&v76[v330];
                int v332 = (uint64_t *)&v77[v330];
                unint64_t v333 = *(void *)&v77[v330 + 8];
                if (*(void *)&v76[v330 + 8] >> 60 == 15)
                {
                  if (v333 >> 60 != 15)
                  {
                    uint64_t v334 = *v332;
                    sub_1000361E0(*v332, v333);
                    *os_log_type_t v331 = v334;
                    v331[1] = v333;
                    goto LABEL_99;
                  }
                }
                else
                {
                  if (v333 >> 60 != 15)
                  {
                    uint64_t v335 = *v332;
                    sub_1000361E0(*v332, v333);
                    uint64_t v336 = *v331;
                    unint64_t v337 = v331[1];
                    *os_log_type_t v331 = v335;
                    v331[1] = v333;
                    sub_10001CFB8(v336, v337);
LABEL_99:
                    uint64_t v338 = v408[24];
                    int v339 = (uint64_t *)&v76[v338];
                    v340 = (uint64_t *)&v77[v338];
                    unint64_t v341 = *(void *)&v77[v338 + 8];
                    if (*(void *)&v76[v338 + 8] >> 60 == 15)
                    {
                      if (v341 >> 60 != 15)
                      {
                        uint64_t v342 = *v340;
                        sub_1000361E0(*v340, v341);
                        *int v339 = v342;
                        v339[1] = v341;
LABEL_106:
                        v346 = v408;
                        v347 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 24);
                        v347(&v76[v408[25]], &v77[v408[25]], v169);
                        v347(&v76[v346[26]], &v77[v346[26]], v169);
                        v347(&v76[v346[27]], &v77[v346[27]], v169);
                        v347(&v76[v346[28]], &v77[v346[28]], v169);
                        v347(&v76[v346[29]], &v77[v346[29]], v169);
                        v347(&v76[v346[30]], &v77[v346[30]], v169);
                        uint64_t v348 = v408[31];
                        v349 = &v76[v348];
                        unint64_t v350 = &v77[v348];
                        void *v349 = *v350;
                        v349[1] = v350[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        *(void *)&v76[v408[32]] = *(void *)&v77[v408[32]];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        uint64_t v351 = v408[33];
                        v352 = &v76[v351];
                        os_log_type_t v353 = &v77[v351];
                        void *v352 = *v353;
                        v352[1] = v353[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        *(void *)&v76[v408[34]] = *(void *)&v77[v408[34]];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        uint64_t v354 = v408[35];
                        uint64_t v355 = &v76[v354];
                        unint64_t v356 = &v77[v354];
                        long long v357 = *(_OWORD *)v356;
                        v355[16] = v356[16];
                        *(_OWORD *)uint64_t v355 = v357;
                        uint64_t v358 = v408[36];
                        unint64_t v359 = &v76[v358];
                        double v360 = &v77[v358];
                        long long v361 = *(_OWORD *)v360;
                        v359[16] = v360[16];
                        *(_OWORD *)unint64_t v359 = v361;
                        v347(&v76[v346[37]], &v77[v346[37]], v169);
                        v347(&v76[v346[38]], &v77[v346[38]], v169);
                        v347(&v76[v346[39]], &v77[v346[39]], v169);
                        v347(&v76[v346[40]], &v77[v346[40]], v169);
                        v347(&v76[v346[41]], &v77[v346[41]], v169);
                        v347(&v76[v346[42]], &v77[v346[42]], v169);
                        v76[v408[43]] = v77[v408[43]];
                        v76[v408[44]] = v77[v408[44]];
                        v76[v408[45]] = v77[v408[45]];
                        uint64_t v362 = v408[46];
                        v363 = &v76[v362];
                        v364 = &v77[v362];
                        void *v363 = *v364;
                        v363[1] = v364[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        uint64_t v365 = v408[47];
                        uint64_t v366 = &v76[v365];
                        v367 = &v77[v365];
                        *uint64_t v366 = *v367;
                        v366[1] = v367[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        goto LABEL_107;
                      }
                    }
                    else
                    {
                      if (v341 >> 60 != 15)
                      {
                        uint64_t v343 = *v340;
                        sub_1000361E0(*v340, v341);
                        uint64_t v344 = *v339;
                        unint64_t v345 = v339[1];
                        *int v339 = v343;
                        v339[1] = v341;
                        sub_10001CFB8(v344, v345);
                        goto LABEL_106;
                      }
                      sub_1001356D0((uint64_t)v339);
                    }
                    *(_OWORD *)int v339 = *(_OWORD *)v340;
                    goto LABEL_106;
                  }
                  sub_1001356D0((uint64_t)v331);
                }
                *(_OWORD *)os_log_type_t v331 = *(_OWORD *)v332;
                goto LABEL_99;
              }
LABEL_55:
              uint64_t v219 = sub_10000588C(&qword_101649E50);
              memcpy((void *)v206, v207, *(void *)(*(void *)(v219 - 8) + 64));
              uint64_t v217 = v408;
              goto LABEL_92;
            }
            if (v211)
            {
              sub_1001EAD40(v206, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_55;
            }
            *(void *)uint64_t v206 = *(void *)v207;
            *(void *)(v206 + 8) = *((void *)v207 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v206 + 16) = *((void *)v207 + 2);
            *(void *)(v206 + 24) = *((void *)v207 + 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v206 + 32) = *((void *)v207 + 4);
            *(void *)(v206 + 40) = *((void *)v207 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_WORD *)(v206 + 48) = *((_WORD *)v207 + 24);
            *(void *)(v206 + 56) = *((void *)v207 + 7);
            uint64_t v278 = *((void *)v207 + 8);
            *(unsigned char *)(v206 + 72) = v207[72];
            *(void *)(v206 + 64) = v278;
            uint64_t v279 = v208[10];
            v280 = &v207[v279];
            uint64_t v398 = (void *)(v206 + v279);
            int v281 = v405();
            int v282 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v405)(v280, 1, v169);
            if (v281)
            {
              if (v282)
              {
                size_t v283 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
                unint64_t v284 = v398;
LABEL_80:
                memcpy(v284, v280, v283);
                goto LABEL_83;
              }
              (*(void (**)(void *, unsigned char *, uint64_t))(v170 + 16))(v398, v280, v169);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v398, 0, 1, v169);
            }
            else
            {
              if (v282)
              {
                (*(void (**)(void *, uint64_t))(v170 + 8))(v398, v169);
                size_t v283 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
                unint64_t v284 = v398;
                goto LABEL_80;
              }
              (*(void (**)(void *, unsigned char *, uint64_t))(v170 + 24))(v398, v280, v169);
            }
LABEL_83:
            uint64_t v217 = v408;
            uint64_t v307 = v208[11];
            v308 = &v207[v307];
            v399 = (void *)(v206 + v307);
            int __dsta = v405();
            int v309 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v405)(v308, 1, v169);
            if (__dsta)
            {
              if (!v309)
              {
                (*(void (**)(void *, unsigned char *, uint64_t))(v170 + 16))(v399, v308, v169);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v399, 0, 1, v169);
                goto LABEL_91;
              }
              size_t v310 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
              int v311 = v399;
            }
            else
            {
              if (!v309)
              {
                (*(void (**)(void *, unsigned char *, uint64_t))(v170 + 24))(v399, v308, v169);
                goto LABEL_91;
              }
              (*(void (**)(void *, uint64_t))(v170 + 8))(v399, v169);
              size_t v310 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
              int v311 = v399;
            }
            memcpy(v311, v308, v310);
LABEL_91:
            uint64_t v312 = v403[12];
            uint64_t v313 = v206 + v312;
            uint64_t v314 = &v207[v312];
            uint64_t v315 = *(void *)v314;
            *(unsigned char *)(v313 + 8) = v314[8];
            *(void *)uint64_t v313 = v315;
            uint64_t v316 = v403[13];
            double v317 = (void *)(v206 + v316);
            v318 = &v207[v316];
            *double v317 = *v318;
            v317[1] = v318[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v206 + v403[14]) = *(void *)&v207[v403[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v319 = v403[15];
            unint64_t v320 = (void *)(v206 + v319);
            v321 = &v207[v319];
            *unint64_t v320 = *v321;
            v320[1] = v321[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v206 + v403[16]) = *(void *)&v207[v403[16]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v322 = v403[17];
            uint64_t v323 = v206 + v322;
            v324 = &v207[v322];
            long long v325 = *(_OWORD *)v324;
            *(unsigned char *)(v323 + 16) = v324[16];
            *(_OWORD *)uint64_t v323 = v325;
            uint64_t v326 = v403[18];
            uint64_t v327 = v206 + v326;
            v328 = &v207[v326];
            long long v329 = *(_OWORD *)v328;
            *(unsigned char *)(v327 + 16) = v328[16];
            *(_OWORD *)uint64_t v327 = v329;
            goto LABEL_92;
          }
          (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v197, v169);
        }
        uint64_t v201 = sub_10000588C(&qword_101649E40);
        memcpy(v197, v198, *(void *)(*(void *)(v201 - 8) + 64));
        goto LABEL_49;
      }
      (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v167, v169);
    }
    uint64_t v195 = sub_10000588C(&qword_101649E40);
    memcpy(v167, v168, *(void *)(*(void *)(v195 - 8) + 64));
    goto LABEL_43;
  }
  if (v82)
  {
LABEL_25:
    uint64_t v110 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v76, v77, *(void *)(*(void *)(v110 - 8) + 64));
    goto LABEL_107;
  }
  uint64_t v83 = *(void *)v77;
  v76[8] = v77[8];
  *(void *)uint64_t v76 = v83;
  uint64_t v84 = v78[5];
  uint64_t v85 = &v76[v84];
  uint64_t v86 = &v77[v84];
  uint64_t v87 = type metadata accessor for ServerStatusCode();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
  v76[v78[6]] = v77[v78[6]];
  v76[v78[7]] = v77[v78[7]];
  uint64_t v88 = v78[8];
  uint64_t v89 = &v76[v88];
  uint64_t v90 = &v77[v88];
  *uint64_t v89 = *v90;
  v89[1] = v90[1];
  v76[v78[9]] = v77[v78[9]];
  v76[v78[10]] = v77[v78[10]];
  v76[v78[11]] = v77[v78[11]];
  uint64_t v91 = v78[12];
  uint64_t v92 = &v76[v91];
  uint64_t v93 = &v77[v91];
  *uint64_t v92 = *v93;
  v92[1] = v93[1];
  uint64_t v94 = v78[13];
  id v95 = &v76[v94];
  uint64_t v96 = &v77[v94];
  *id v95 = *v96;
  v95[1] = v96[1];
  uint64_t v97 = v78[14];
  uint64_t v98 = &v76[v97];
  uint64_t v99 = &v77[v97];
  char v100 = v99[8];
  *(void *)uint64_t v98 = *(void *)v99;
  v98[8] = v100;
  uint64_t v101 = v78[15];
  uint64_t v102 = &v76[v101];
  uint64_t v103 = &v77[v101];
  *uint64_t v102 = *v103;
  v102[1] = v103[1];
  uint64_t v407 = v78;
  uint64_t v104 = v78[16];
  v395 = v76;
  __dst = &v76[v104];
  unint64_t v105 = &v77[v104];
  uint64_t v106 = type metadata accessor for URL();
  uint64_t v107 = *(void *)(v106 - 8);
  uint64_t v108 = *(unsigned int (**)(void))(v107 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v402 = v107;
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v108)(v105, 1, v106))
  {
    uint64_t v109 = sub_10000588C(&qword_101649E40);
    memcpy(__dst, v105, *(void *)(*(void *)(v109 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v107 + 16))(__dst, v105, v106);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v106);
  }
  uint64_t v174 = v395;
  uint64_t v175 = v78[17];
  uint64_t v176 = &v395[v175];
  uint64_t v177 = &v77[v175];
  uint64_t v400 = v79;
  uint64_t v404 = v106;
  uint64_t v390 = v108;
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v108)(&v77[v175], 1, v106))
  {
    uint64_t v178 = sub_10000588C(&qword_101649E40);
    memcpy(v176, v177, *(void *)(*(void *)(v178 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v402 + 16))(v176, v177, v106);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v402 + 56))(v176, 0, 1, v106);
  }
  uint64_t v179 = v78[18];
  uint64_t v180 = &v395[v179];
  uint64_t v181 = &v77[v179];
  *uint64_t v180 = *v181;
  v180[1] = v181[1];
  *(void *)&v395[v78[19]] = *(void *)&v77[v78[19]];
  uint64_t v182 = v78[20];
  os_log_type_t v183 = &v395[v182];
  uint64_t v184 = &v77[v182];
  uint64_t v185 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v186 = *((void *)v185 - 1);
  uint64_t v187 = *(unsigned int (**)(void *, uint64_t, int *))(v186 + 48);
  swift_bridgeObjectRetain();
  if (v187(v184, 1, v185))
  {
    uint64_t v188 = sub_10000588C(&qword_101649E50);
    memcpy(v183, v184, *(void *)(*(void *)(v188 - 8) + 64));
    uint64_t v189 = v402;
  }
  else
  {
    uint64_t v396 = v186;
    *os_log_type_t v183 = *v184;
    v183[1] = v184[1];
    v183[2] = v184[2];
    v183[3] = v184[3];
    v183[4] = v184[4];
    v183[5] = v184[5];
    *((_WORD *)v183 + 24) = *((_WORD *)v184 + 24);
    v183[7] = v184[7];
    uint64_t v190 = v184[8];
    *((unsigned char *)v183 + 72) = *((unsigned char *)v184 + 72);
    v183[8] = v190;
    uint64_t v191 = v185[10];
    unint64_t v192 = (char *)v183 + v191;
    uint64_t v193 = (char *)v184 + v191;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v390)(v193, 1, v404))
    {
      uint64_t v194 = sub_10000588C(&qword_101649E40);
      memcpy(v192, v193, *(void *)(*(void *)(v194 - 8) + 64));
      uint64_t v189 = v402;
    }
    else
    {
      uint64_t v220 = v192;
      uint64_t v189 = v402;
      (*(void (**)(char *, char *, uint64_t))(v402 + 16))(v220, v193, v404);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v402 + 56))(v220, 0, 1, v404);
    }
    uint64_t v221 = v185[11];
    uint64_t v222 = (char *)v183 + v221;
    uint64_t v223 = (char *)v184 + v221;
    if (v390())
    {
      uint64_t v224 = sub_10000588C(&qword_101649E40);
      memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v222, v223, v404);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))(v222, 0, 1, v404);
    }
    uint64_t v225 = v185[12];
    v226 = (char *)v183 + v225;
    uint64_t v227 = (char *)v184 + v225;
    uint64_t v228 = *(void *)v227;
    v226[8] = v227[8];
    *(void *)v226 = v228;
    uint64_t v229 = v185[13];
    v230 = (void *)((char *)v183 + v229);
    uint64_t v231 = (void *)((char *)v184 + v229);
    void *v230 = *v231;
    v230[1] = v231[1];
    *(void *)((char *)v183 + v185[14]) = *(void *)((char *)v184 + v185[14]);
    uint64_t v232 = v185[15];
    uint64_t v233 = (void *)((char *)v183 + v232);
    v234 = (void *)((char *)v184 + v232);
    *uint64_t v233 = *v234;
    v233[1] = v234[1];
    *(void *)((char *)v183 + v185[16]) = *(void *)((char *)v184 + v185[16]);
    uint64_t v235 = v185[17];
    uint64_t v236 = (char *)v183 + v235;
    v237 = (char *)v184 + v235;
    long long v238 = *(_OWORD *)v237;
    v236[16] = v237[16];
    *(_OWORD *)uint64_t v236 = v238;
    uint64_t v239 = v185[18];
    uint64_t v240 = (char *)v183 + v239;
    v241 = (char *)v184 + v239;
    long long v242 = *(_OWORD *)v241;
    v240[16] = v241[16];
    *(_OWORD *)uint64_t v240 = v242;
    uint64_t v243 = *(void (**)(void *, void, uint64_t, int *))(v396 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v243(v183, 0, 1, v185);
    uint64_t v78 = v407;
  }
  *(_DWORD *)&v174[v78[21]] = *(_DWORD *)&v77[v78[21]];
  *(void *)&v174[v78[22]] = *(void *)&v77[v78[22]];
  uint64_t v244 = v78[23];
  v245 = &v174[v244];
  v246 = &v77[v244];
  unint64_t v247 = *(void *)&v77[v244 + 8];
  swift_bridgeObjectRetain();
  if (v247 >> 60 == 15)
  {
    *(_OWORD *)v245 = *v246;
  }
  else
  {
    uint64_t v248 = *(void *)v246;
    sub_1000361E0(v248, v247);
    *(void *)v245 = v248;
    *((void *)v245 + 1) = v247;
  }
  uint64_t v249 = v78[24];
  uint64_t v250 = &v174[v249];
  uint64_t v251 = &v77[v249];
  unint64_t v252 = *((void *)v251 + 1);
  if (v252 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
  }
  else
  {
    uint64_t v253 = *(void *)v251;
    sub_1000361E0(*(void *)v251, *((void *)v251 + 1));
    *(void *)uint64_t v250 = v253;
    *((void *)v250 + 1) = v252;
  }
  uint64_t v254 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v189 + 16);
  v254(&v174[v78[25]], &v77[v78[25]], v404);
  v254(&v174[v78[26]], &v77[v78[26]], v404);
  v254(&v174[v78[27]], &v77[v78[27]], v404);
  v254(&v174[v78[28]], &v77[v78[28]], v404);
  v254(&v174[v78[29]], &v77[v78[29]], v404);
  v254(&v174[v78[30]], &v77[v78[30]], v404);
  uint64_t v255 = v78[31];
  uint64_t v256 = &v174[v255];
  uint64_t v257 = &v77[v255];
  *uint64_t v256 = *v257;
  v256[1] = v257[1];
  *(void *)&v174[v78[32]] = *(void *)&v77[v78[32]];
  uint64_t v258 = v78[33];
  v259 = &v174[v258];
  os_log_type_t v260 = &v77[v258];
  void *v259 = *v260;
  v259[1] = v260[1];
  *(void *)&v174[v78[34]] = *(void *)&v77[v78[34]];
  uint64_t v261 = v78[35];
  uint64_t v262 = &v174[v261];
  v263 = &v77[v261];
  char v264 = v263[16];
  *(_OWORD *)uint64_t v262 = *(_OWORD *)v263;
  v262[16] = v264;
  uint64_t v265 = v78[36];
  uint64_t v266 = &v174[v265];
  uint64_t v267 = &v77[v265];
  char v268 = v267[16];
  *(_OWORD *)uint64_t v266 = *(_OWORD *)v267;
  v266[16] = v268;
  uint64_t v269 = v78[37];
  v409 = &v174[v269];
  v270 = &v77[v269];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v254(v409, v270, v404);
  v254(&v174[v78[38]], &v77[v78[38]], v404);
  v254(&v174[v78[39]], &v77[v78[39]], v404);
  v254(&v174[v78[40]], &v77[v78[40]], v404);
  v254(&v174[v78[41]], &v77[v78[41]], v404);
  v254(&v174[v78[42]], &v77[v78[42]], v404);
  v174[v78[43]] = v77[v78[43]];
  v174[v78[44]] = v77[v78[44]];
  v174[v78[45]] = v77[v78[45]];
  uint64_t v271 = v78[46];
  uint64_t v272 = &v174[v271];
  uint64_t v273 = &v77[v271];
  *uint64_t v272 = *v273;
  v272[1] = v273[1];
  uint64_t v274 = v78[47];
  v275 = &v174[v274];
  v276 = &v77[v274];
  void *v275 = *v276;
  v275[1] = v276[1];
  uint64_t v277 = *(void (**)(unsigned char *, void, uint64_t, int *))(v400 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v277(v174, 0, 1, v78);
LABEL_107:
  v418[v419[16]] = v417[v419[16]];
  *(void *)&v418[v419[17]] = *(void *)&v417[v419[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v368 = v419[18];
  v369 = &v418[v368];
  v370 = &v417[v368];
  int v371 = v416(&v418[v368], 1, v415);
  int v372 = v416(v370, 1, v415);
  if (v371)
  {
    if (!v372)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v414 + 16))(v369, v370, v415);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v414 + 56))(v369, 0, 1, v415);
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  if (v372)
  {
    (*(void (**)(unsigned char *, uint64_t))(v414 + 8))(v369, v415);
LABEL_112:
    uint64_t v373 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v369, v370, *(void *)(*(void *)(v373 - 8) + 64));
    goto LABEL_113;
  }
  v410(v369, v370, v415);
LABEL_113:
  uint64_t v374 = v419[19];
  uint64_t v375 = &v418[v374];
  unint64_t v376 = &v417[v374];
  int v377 = v416(&v418[v374], 1, v415);
  int v378 = v416(v376, 1, v415);
  if (v377)
  {
    if (!v378)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v414 + 16))(v375, v376, v415);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v414 + 56))(v375, 0, 1, v415);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v378)
  {
    (*(void (**)(unsigned char *, uint64_t))(v414 + 8))(v375, v415);
LABEL_118:
    uint64_t v379 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v375, v376, *(void *)(*(void *)(v379 - 8) + 64));
    goto LABEL_119;
  }
  v410(v375, v376, v415);
LABEL_119:
  uint64_t v380 = v419[20];
  v381 = (uint64_t *)&v418[v380];
  v382 = (uint64_t *)&v417[v380];
  if (((*(void *)&v418[v380 + 8] >> 60) | 4) != 0xF)
  {
    unint64_t v385 = v382[1];
    if (((v385 >> 60) | 4) != 0xF)
    {
      uint64_t v387 = *v382;
      sub_1000361E0(v387, v385);
      uint64_t v388 = *v381;
      unint64_t v389 = v381[1];
      uint64_t *v381 = v387;
      v381[1] = v385;
      sub_10001CFB8(v388, v389);
      goto LABEL_125;
    }
    sub_1001EADA0((uint64_t)v381);
    goto LABEL_124;
  }
  unint64_t v383 = v382[1];
  if (((v383 >> 60) | 4) == 0xF)
  {
LABEL_124:
    *(_OWORD *)v381 = *(_OWORD *)v382;
    goto LABEL_125;
  }
  uint64_t v384 = *v382;
  sub_1000361E0(v384, v383);
  uint64_t *v381 = v384;
  v381[1] = v383;
LABEL_125:
  v418[v419[21]] = v417[v419[21]];
  *(_WORD *)&v418[v419[22]] = *(_WORD *)&v417[v419[22]];
  v413[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return v413;
}

uint64_t sub_1001EAD40(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001EADA0(uint64_t a1)
{
  return a1;
}

unsigned char *sub_1001EADF4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v9(v5, v6, v7);
  uint64_t v10 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v5[v11];
  uint64_t v13 = &v6[v11];
  uint64_t v134 = v7;
  uint64_t v131 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v6[v11], 1, v7))
  {
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v9(v12, v13, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
  }
  v5[v10[6]] = v6[v10[6]];
  uint64_t v15 = v10[7];
  uint64_t v16 = &v5[v15];
  uint64_t v17 = &v6[v15];
  uint64_t v18 = type metadata accessor for MACAddress();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)&v5[v10[8]] = *(void *)&v6[v10[8]];
  v5[v10[9]] = v6[v10[9]];
  uint64_t v19 = v10[10];
  uint64_t v20 = &v5[v19];
  uint64_t v21 = &v6[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = v5;
  uint64_t v24 = v10;
  uint64_t v25 = *(void *)(v22 - 8);
  uint64_t v26 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 32);
  v26(v20, v21, v22);
  uint64_t v27 = v6;
  long long v28 = v24;
  uint64_t v29 = v24[11];
  int v30 = v23;
  int v31 = &v23[v29];
  uint64_t v32 = v27;
  uint64_t v33 = &v27[v29];
  uint64_t v140 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v139 = a1;
  uint64_t v136 = v25;
  uint64_t v135 = v26;
  if (v140(&v27[v29], 1, v22))
  {
    uint64_t v34 = v22;
    uint64_t v35 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v31, v33, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v26(v31, v33, v22);
    uint64_t v34 = v22;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v22);
  }
  uint64_t v36 = v28;
  unint64_t v37 = v32;
  uint64_t v38 = v36[12];
  uint64_t v39 = &v30[v38];
  uint64_t v40 = &v32[v38];
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  *((void *)v39 + 2) = *((void *)v40 + 2);
  v30[v36[13]] = v32[v36[13]];
  uint64_t v41 = v36[14];
  int v42 = &v30[v41];
  int v43 = &v32[v41];
  uint64_t v44 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v45 = *((void *)v44 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = sub_10000588C(&qword_1016653B0);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    v131(v42, v43, v134);
    *(_OWORD *)&v42[v44[5]] = *(_OWORD *)&v43[v44[5]];
    *(_OWORD *)&v42[v44[6]] = *(_OWORD *)&v43[v44[6]];
    *(_OWORD *)&v42[v44[7]] = *(_OWORD *)&v43[v44[7]];
    *(_DWORD *)&v42[v44[8]] = *(_DWORD *)&v43[v44[8]];
    uint64_t v47 = v44[9];
    unint64_t v48 = &v42[v47];
    uint64_t v49 = &v43[v47];
    *(_DWORD *)unint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v44[10];
    uint64_t v51 = &v42[v50];
    uint64_t v52 = &v43[v50];
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    v51[16] = v52[16];
    uint64_t v53 = v44[11];
    BOOL v54 = &v42[v53];
    uint64_t v55 = &v43[v53];
    v54[8] = v55[8];
    *(void *)BOOL v54 = *(void *)v55;
    uint64_t v56 = v44[12];
    uint64_t v57 = &v42[v56];
    int v58 = &v43[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    v42[v44[13]] = v43[v44[13]];
    v42[v44[14]] = v43[v44[14]];
    *(_OWORD *)&v42[v44[15]] = *(_OWORD *)&v43[v44[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v59 = v34;
  uint64_t v60 = v36[15];
  uint64_t v61 = &v30[v60];
  long long v62 = &v37[v60];
  uint64_t v63 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v64 = *((void *)v63 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    uint64_t v66 = v139;
  }
  else
  {
    uint64_t v129 = v64;
    uint64_t v130 = v59;
    *(void *)uint64_t v61 = *(void *)v62;
    v61[8] = v62[8];
    uint64_t v67 = v63[5];
    uint64_t v68 = &v61[v67];
    uint64_t v69 = &v62[v67];
    uint64_t v70 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
    v61[v63[6]] = v62[v63[6]];
    v61[v63[7]] = v62[v63[7]];
    *(_OWORD *)&v61[v63[8]] = *(_OWORD *)&v62[v63[8]];
    v61[v63[9]] = v62[v63[9]];
    v61[v63[10]] = v62[v63[10]];
    v61[v63[11]] = v62[v63[11]];
    *(_OWORD *)&v61[v63[12]] = *(_OWORD *)&v62[v63[12]];
    *(_OWORD *)&v61[v63[13]] = *(_OWORD *)&v62[v63[13]];
    uint64_t v71 = v63[14];
    uint64_t v72 = &v61[v71];
    uint64_t v73 = &v62[v71];
    v72[8] = v73[8];
    *(void *)uint64_t v72 = *(void *)v73;
    *(_OWORD *)&v61[v63[15]] = *(_OWORD *)&v62[v63[15]];
    uint64_t v74 = v63[16];
    uint64_t v75 = &v61[v74];
    uint64_t v76 = &v62[v74];
    uint64_t v77 = type metadata accessor for URL();
    uint64_t v78 = *(void *)(v77 - 8);
    uint64_t v133 = *(unsigned int (**)(void))(v78 + 48);
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v133)(v76, 1, v77))
    {
      uint64_t v79 = sub_10000588C(&qword_101649E40);
      memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v78 + 32))(v75, v76, v77);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
    }
    uint64_t v80 = v63[17];
    int v81 = &v61[v80];
    int v82 = &v62[v80];
    uint64_t v128 = v37;
    uint64_t v132 = v78;
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v133)(&v62[v80], 1, v77))
    {
      uint64_t v83 = sub_10000588C(&qword_101649E40);
      memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v78 + 32))(v81, v82, v77);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56))(v81, 0, 1, v77);
    }
    *(_OWORD *)&v61[v63[18]] = *(_OWORD *)&v62[v63[18]];
    *(void *)&v61[v63[19]] = *(void *)&v62[v63[19]];
    uint64_t v84 = v63[20];
    uint64_t v85 = &v61[v84];
    uint64_t v86 = &v62[v84];
    uint64_t v87 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v88 = *(void *)(v87 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
    {
      uint64_t v89 = sub_10000588C(&qword_101649E50);
      memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
      unint64_t v37 = v128;
    }
    else
    {
      long long v90 = v86[1];
      *uint64_t v85 = *v86;
      v85[1] = v90;
      v85[2] = v86[2];
      *((_WORD *)v85 + 24) = *((_WORD *)v86 + 24);
      uint64_t v91 = *((void *)v86 + 8);
      *((void *)v85 + 7) = *((void *)v86 + 7);
      *((void *)v85 + 8) = v91;
      *((unsigned char *)v85 + 72) = *((unsigned char *)v86 + 72);
      uint64_t v127 = (int *)v87;
      uint64_t v92 = *(int *)(v87 + 40);
      uint64_t v124 = v88;
      __dst = (char *)v85 + v92;
      uint64_t v93 = (char *)v86 + v92;
      uint64_t v94 = v85;
      if (v133())
      {
        uint64_t v95 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, v93, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v132 + 32))(__dst, v93, v77);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(__dst, 0, 1, v77);
      }
      unint64_t v37 = v128;
      uint64_t v96 = v127[11];
      uint64_t v97 = (char *)v94 + v96;
      int __dsta = (char *)v86 + v96;
      if (v133())
      {
        uint64_t v98 = sub_10000588C(&qword_101649E40);
        memcpy(v97, __dsta, *(void *)(*(void *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v97, __dsta, v77);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v97, 0, 1, v77);
      }
      uint64_t v99 = v127[12];
      char v100 = (char *)v94 + v99;
      uint64_t v101 = (char *)v86 + v99;
      *(void *)char v100 = *(void *)v101;
      v100[8] = v101[8];
      *(_OWORD *)((char *)v94 + v127[13]) = *(_OWORD *)((char *)v86 + v127[13]);
      *(void *)((char *)v94 + v127[14]) = *(void *)((char *)v86 + v127[14]);
      *(_OWORD *)((char *)v94 + v127[15]) = *(_OWORD *)((char *)v86 + v127[15]);
      *(void *)((char *)v94 + v127[16]) = *(void *)((char *)v86 + v127[16]);
      uint64_t v102 = v127[17];
      uint64_t v103 = (char *)v94 + v102;
      uint64_t v104 = (char *)v86 + v102;
      v103[16] = v104[16];
      *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
      uint64_t v105 = v127[18];
      uint64_t v106 = (char *)v94 + v105;
      uint64_t v107 = (char *)v86 + v105;
      v106[16] = v107[16];
      *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
      (*(void (**)(_OWORD *, void, uint64_t))(v124 + 56))(v94, 0, 1);
    }
    *(_DWORD *)&v61[v63[21]] = *(_DWORD *)&v62[v63[21]];
    *(void *)&v61[v63[22]] = *(void *)&v62[v63[22]];
    *(_OWORD *)&v61[v63[23]] = *(_OWORD *)&v62[v63[23]];
    *(_OWORD *)&v61[v63[24]] = *(_OWORD *)&v62[v63[24]];
    uint64_t v108 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v132 + 32);
    v108(&v61[v63[25]], &v62[v63[25]], v77);
    v108(&v61[v63[26]], &v62[v63[26]], v77);
    v108(&v61[v63[27]], &v62[v63[27]], v77);
    v108(&v61[v63[28]], &v62[v63[28]], v77);
    v108(&v61[v63[29]], &v62[v63[29]], v77);
    v108(&v61[v63[30]], &v62[v63[30]], v77);
    *(_OWORD *)&v61[v63[31]] = *(_OWORD *)&v62[v63[31]];
    *(void *)&v61[v63[32]] = *(void *)&v62[v63[32]];
    *(_OWORD *)&v61[v63[33]] = *(_OWORD *)&v62[v63[33]];
    *(void *)&v61[v63[34]] = *(void *)&v62[v63[34]];
    uint64_t v109 = v63[35];
    uint64_t v110 = &v61[v109];
    uint64_t v111 = &v62[v109];
    v110[16] = v111[16];
    *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
    uint64_t v112 = v63[36];
    uint64_t v113 = &v61[v112];
    uint64_t v114 = &v62[v112];
    v113[16] = v114[16];
    *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
    v108(&v61[v63[37]], &v62[v63[37]], v77);
    v108(&v61[v63[38]], &v62[v63[38]], v77);
    v108(&v61[v63[39]], &v62[v63[39]], v77);
    v108(&v61[v63[40]], &v62[v63[40]], v77);
    v108(&v61[v63[41]], &v62[v63[41]], v77);
    v108(&v61[v63[42]], &v62[v63[42]], v77);
    v61[v63[43]] = v62[v63[43]];
    v61[v63[44]] = v62[v63[44]];
    v61[v63[45]] = v62[v63[45]];
    *(_OWORD *)&v61[v63[46]] = *(_OWORD *)&v62[v63[46]];
    *(_OWORD *)&v61[v63[47]] = *(_OWORD *)&v62[v63[47]];
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v129 + 56))(v61, 0, 1, v63);
    uint64_t v66 = v139;
    uint64_t v59 = v130;
  }
  v30[v36[16]] = v37[v36[16]];
  *(void *)&v30[v36[17]] = *(void *)&v37[v36[17]];
  uint64_t v115 = v36[18];
  uint64_t v116 = &v30[v115];
  unint64_t v117 = &v37[v115];
  if (v140(&v37[v115], 1, v59))
  {
    uint64_t v118 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
  }
  else
  {
    v135(v116, v117, v59);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v136 + 56))(v116, 0, 1, v59);
  }
  uint64_t v119 = v36[19];
  uint64_t v120 = &v30[v119];
  uint64_t v121 = &v37[v119];
  if (v140(&v37[v119], 1, v59))
  {
    uint64_t v122 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v120, v121, *(void *)(*(void *)(v122 - 8) + 64));
  }
  else
  {
    v135(v120, v121, v59);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v136 + 56))(v120, 0, 1, v59);
  }
  *(_OWORD *)&v30[v36[20]] = *(_OWORD *)&v37[v36[20]];
  v30[v36[21]] = v37[v36[21]];
  *(_WORD *)&v30[v36[22]] = *(_WORD *)&v37[v36[22]];
  v66[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return v66;
}

unsigned char *sub_1001EBC90(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = &a1[v3];
  int v5 = &a2[v3];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __dst = *(void (**)(char *, unsigned char *, uint64_t))(v7 + 40);
  __dst(v4, v5, v6);
  uint64_t v336 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v8 = v336[5];
  uint64_t v9 = &v4[v8];
  uint64_t v10 = &v5[v8];
  uint64_t v323 = v7;
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(&v4[v8], 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  __dst(v9, v10, v6);
LABEL_7:
  v4[v336[6]] = v5[v336[6]];
  uint64_t v15 = v336[7];
  uint64_t v16 = &v4[v15];
  uint64_t v17 = &v5[v15];
  uint64_t v18 = type metadata accessor for MACAddress();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)&v4[v336[8]] = *(void *)&v5[v336[8]];
  swift_bridgeObjectRelease();
  v4[v336[9]] = v5[v336[9]];
  uint64_t v19 = v336[10];
  uint64_t v20 = &v4[v19];
  uint64_t v21 = &v5[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v322 = *(void (**)(char *, unsigned char *, uint64_t))(v23 + 40);
  v322(v20, v21, v22);
  uint64_t v24 = v336[11];
  uint64_t v25 = &v4[v24];
  uint64_t v26 = &v5[v24];
  uint64_t v335 = v23;
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v28 = v27(&v4[v24], 1, v22);
  uint64_t v330 = v27;
  int v29 = v27(v26, 1, v22);
  uint64_t v331 = v22;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v26, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
LABEL_12:
    uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v322(v25, v26, v22);
LABEL_13:
  uint64_t v31 = v336[12];
  uint64_t v32 = &v4[v31];
  uint64_t v33 = &v5[v31];
  *uint64_t v32 = *v33;
  uint64_t v35 = *((void *)v33 + 1);
  uint64_t v34 = *((void *)v33 + 2);
  *((void *)v32 + 1) = v35;
  *((void *)v32 + 2) = v34;
  swift_bridgeObjectRelease();
  v4[v336[13]] = v5[v336[13]];
  uint64_t v36 = v336[14];
  int v332 = v4;
  unint64_t v37 = &v4[v36];
  uint64_t v334 = v5;
  uint64_t v38 = &v5[v36];
  uint64_t v39 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, int *))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v323 + 32))(v37, v38, v6);
      *(_OWORD *)&v37[v39[5]] = *(_OWORD *)&v38[v39[5]];
      *(_OWORD *)&v37[v39[6]] = *(_OWORD *)&v38[v39[6]];
      *(_OWORD *)&v37[v39[7]] = *(_OWORD *)&v38[v39[7]];
      *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
      uint64_t v44 = v39[9];
      uint64_t v45 = &v37[v44];
      uint64_t v46 = &v38[v44];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      v45[4] = v46[4];
      uint64_t v47 = v39[10];
      unint64_t v48 = &v37[v47];
      uint64_t v49 = &v38[v47];
      *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
      v48[16] = v49[16];
      uint64_t v50 = v39[11];
      uint64_t v51 = &v37[v50];
      uint64_t v52 = &v38[v50];
      v51[8] = v52[8];
      *(void *)uint64_t v51 = *(void *)v52;
      uint64_t v53 = v39[12];
      BOOL v54 = &v37[v53];
      uint64_t v55 = &v38[v53];
      *(_DWORD *)BOOL v54 = *(_DWORD *)v55;
      v54[4] = v55[4];
      v37[v39[13]] = v38[v39[13]];
      v37[v39[14]] = v38[v39[14]];
      *(_OWORD *)&v37[v39[15]] = *(_OWORD *)&v38[v39[15]];
      (*(void (**)(char *, void, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    sub_1001EAD40((uint64_t)v37, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v56 = sub_10000588C(&qword_1016653B0);
    memcpy(v37, v38, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  __dst(v37, v38, v6);
  uint64_t v81 = v39[5];
  uint64_t v82 = *(void *)&v37[v81];
  unint64_t v83 = *(void *)&v37[v81 + 8];
  *(_OWORD *)&v37[v81] = *(_OWORD *)&v38[v81];
  sub_10001CFB8(v82, v83);
  uint64_t v84 = v39[6];
  uint64_t v85 = &v37[v84];
  uint64_t v86 = (uint64_t *)&v38[v84];
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  *(void *)uint64_t v85 = v88;
  *((void *)v85 + 1) = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = v39[7];
  long long v90 = &v37[v89];
  uint64_t v91 = (uint64_t *)&v38[v89];
  uint64_t v93 = *v91;
  uint64_t v92 = v91[1];
  *(void *)long long v90 = v93;
  *((void *)v90 + 1) = v92;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
  uint64_t v94 = v39[9];
  uint64_t v95 = &v37[v94];
  uint64_t v96 = &v38[v94];
  *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
  v95[4] = v96[4];
  uint64_t v97 = v39[10];
  uint64_t v98 = &v37[v97];
  uint64_t v99 = &v38[v97];
  *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
  v98[16] = v99[16];
  uint64_t v100 = v39[11];
  uint64_t v101 = &v37[v100];
  uint64_t v102 = &v38[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  v101[8] = v102[8];
  uint64_t v103 = v39[12];
  uint64_t v104 = &v37[v103];
  uint64_t v105 = &v38[v103];
  *(_DWORD *)uint64_t v104 = *(_DWORD *)v105;
  v104[4] = v105[4];
  v37[v39[13]] = v38[v39[13]];
  v37[v39[14]] = v38[v39[14]];
  uint64_t v106 = v39[15];
  uint64_t v107 = &v37[v106];
  uint64_t v108 = (uint64_t *)&v38[v106];
  uint64_t v110 = *v108;
  uint64_t v109 = v108[1];
  *(void *)uint64_t v107 = v110;
  *((void *)v107 + 1) = v109;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v57 = v332;
  int v58 = v334;
  uint64_t v59 = v336[15];
  uint64_t v60 = &v332[v59];
  uint64_t v61 = &v334[v59];
  long long v62 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v63 = *((void *)v62 - 1);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (v66)
    {
      sub_1001EAD40((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    *(void *)uint64_t v60 = *(void *)v61;
    v60[8] = v61[8];
    uint64_t v111 = v62[5];
    uint64_t v112 = &v60[v111];
    uint64_t v113 = &v61[v111];
    uint64_t v114 = type metadata accessor for ServerStatusCode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 40))(v112, v113, v114);
    v60[v62[6]] = v61[v62[6]];
    v60[v62[7]] = v61[v62[7]];
    uint64_t v115 = v62[8];
    uint64_t v116 = &v60[v115];
    unint64_t v117 = (uint64_t *)&v61[v115];
    uint64_t v119 = *v117;
    uint64_t v118 = v117[1];
    *(void *)uint64_t v116 = v119;
    *((void *)v116 + 1) = v118;
    swift_bridgeObjectRelease();
    v60[v62[9]] = v61[v62[9]];
    v60[v62[10]] = v61[v62[10]];
    v60[v62[11]] = v61[v62[11]];
    uint64_t v120 = v62[12];
    uint64_t v121 = &v60[v120];
    uint64_t v122 = (uint64_t *)&v61[v120];
    uint64_t v124 = *v122;
    uint64_t v123 = v122[1];
    *(void *)uint64_t v121 = v124;
    *((void *)v121 + 1) = v123;
    swift_bridgeObjectRelease();
    uint64_t v125 = v62[13];
    uint64_t v126 = &v60[v125];
    uint64_t v127 = (uint64_t *)&v61[v125];
    uint64_t v129 = *v127;
    uint64_t v128 = v127[1];
    *(void *)uint64_t v126 = v129;
    *((void *)v126 + 1) = v128;
    swift_bridgeObjectRelease();
    uint64_t v130 = v62[14];
    uint64_t v131 = &v60[v130];
    uint64_t v132 = &v61[v130];
    *(void *)uint64_t v131 = *(void *)v132;
    v131[8] = v132[8];
    uint64_t v133 = v62[15];
    uint64_t v134 = &v60[v133];
    uint64_t v135 = (uint64_t *)&v61[v133];
    uint64_t v137 = *v135;
    uint64_t v136 = v135[1];
    *(void *)uint64_t v134 = v137;
    *((void *)v134 + 1) = v136;
    swift_bridgeObjectRelease();
    uint64_t v138 = v62[16];
    uint64_t v139 = &v60[v138];
    uint64_t v140 = &v61[v138];
    uint64_t v141 = type metadata accessor for URL();
    uint64_t v142 = *(void *)(v141 - 8);
    uint64_t v143 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48);
    int v144 = v143(v139, 1, v141);
    int v145 = v143(v140, 1, v141);
    if (v144)
    {
      if (!v145)
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v139, v140, v141);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
        goto LABEL_43;
      }
    }
    else
    {
      if (!v145)
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 40))(v139, v140, v141);
LABEL_43:
        uint64_t v162 = v62[17];
        uint64_t v163 = &v60[v162];
        uint64_t v164 = &v61[v162];
        int v165 = v143(&v60[v162], 1, v141);
        int v166 = v143(v164, 1, v141);
        uint64_t v325 = v142;
        __dstb = (uint64_t (*)(void))v143;
        if (v165)
        {
          if (!v166)
          {
            (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v163, v164, v141);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v163, 0, 1, v141);
            goto LABEL_49;
          }
        }
        else
        {
          if (!v166)
          {
            (*(void (**)(char *, char *, uint64_t))(v142 + 40))(v163, v164, v141);
LABEL_49:
            uint64_t v168 = v62[18];
            uint64_t v169 = &v60[v168];
            uint64_t v170 = (uint64_t *)&v61[v168];
            uint64_t v172 = *v170;
            uint64_t v171 = v170[1];
            *(void *)uint64_t v169 = v172;
            *((void *)v169 + 1) = v171;
            swift_bridgeObjectRelease();
            *(void *)&v60[v62[19]] = *(void *)&v61[v62[19]];
            uint64_t v173 = v62[20];
            uint64_t v174 = (uint64_t)&v60[v173];
            uint64_t v175 = &v61[v173];
            uint64_t v176 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            uint64_t v312 = *(void *)(v176 - 8);
            uint64_t v177 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v312 + 48);
            int v178 = v177(v174, 1, v176);
            v321 = (int *)v176;
            int v179 = v177((uint64_t)v175, 1, v176);
            if (v178)
            {
              if (!v179)
              {
                long long v180 = *((_OWORD *)v175 + 1);
                *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
                *(_OWORD *)(v174 + 16) = v180;
                *(_OWORD *)(v174 + 32) = *((_OWORD *)v175 + 2);
                *(_WORD *)(v174 + 48) = *((_WORD *)v175 + 24);
                uint64_t v181 = *((void *)v175 + 8);
                *(void *)(v174 + 56) = *((void *)v175 + 7);
                *(void *)(v174 + 64) = v181;
                *(unsigned char *)(v174 + 72) = v175[72];
                uint64_t v182 = *(int *)(v176 + 40);
                os_log_type_t v183 = (void *)(v174 + v182);
                uint64_t v184 = &v175[v182];
                uint64_t v57 = v332;
                int v58 = v334;
                if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstb)(&v175[v182], 1, v141))
                {
                  uint64_t v185 = sub_10000588C(&qword_101649E40);
                  memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v325 + 32))(v183, v184, v141);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v325 + 56))(v183, 0, 1, v141);
                }
                uint64_t v216 = v321[11];
                uint64_t v217 = (void *)(v174 + v216);
                uint64_t v218 = &v175[v216];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstb)(&v175[v216], 1, v141))
                {
                  uint64_t v219 = sub_10000588C(&qword_101649E40);
                  memcpy(v217, v218, *(void *)(*(void *)(v219 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v325 + 32))(v217, v218, v141);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v325 + 56))(v217, 0, 1, v141);
                }
                uint64_t v220 = v321[12];
                uint64_t v221 = v174 + v220;
                uint64_t v222 = &v175[v220];
                *(void *)uint64_t v221 = *(void *)v222;
                *(unsigned char *)(v221 + 8) = v222[8];
                *(_OWORD *)(v174 + v321[13]) = *(_OWORD *)&v175[v321[13]];
                *(void *)(v174 + v321[14]) = *(void *)&v175[v321[14]];
                *(_OWORD *)(v174 + v321[15]) = *(_OWORD *)&v175[v321[15]];
                *(void *)(v174 + v321[16]) = *(void *)&v175[v321[16]];
                uint64_t v223 = v321[17];
                uint64_t v224 = v174 + v223;
                uint64_t v225 = &v175[v223];
                *(unsigned char *)(v224 + 16) = v225[16];
                *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
                uint64_t v226 = v321[18];
                uint64_t v227 = v174 + v226;
                uint64_t v228 = &v175[v226];
                *(unsigned char *)(v227 + 16) = v228[16];
                *(_OWORD *)uint64_t v227 = *(_OWORD *)v228;
                (*(void (**)(uint64_t, void, uint64_t))(v312 + 56))(v174, 0, 1);
                goto LABEL_72;
              }
LABEL_55:
              uint64_t v186 = sub_10000588C(&qword_101649E50);
              memcpy((void *)v174, v175, *(void *)(*(void *)(v186 - 8) + 64));
              uint64_t v57 = v332;
              int v58 = v334;
LABEL_72:
              uint64_t v214 = v325;
              goto LABEL_73;
            }
            if (v179)
            {
              sub_1001EAD40(v174, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_55;
            }
            uint64_t v206 = *((void *)v175 + 1);
            *(void *)uint64_t v174 = *(void *)v175;
            *(void *)(v174 + 8) = v206;
            swift_bridgeObjectRelease();
            uint64_t v207 = *((void *)v175 + 3);
            *(void *)(v174 + 16) = *((void *)v175 + 2);
            *(void *)(v174 + 24) = v207;
            swift_bridgeObjectRelease();
            uint64_t v208 = *((void *)v175 + 5);
            *(void *)(v174 + 32) = *((void *)v175 + 4);
            *(void *)(v174 + 40) = v208;
            swift_bridgeObjectRelease();
            *(_WORD *)(v174 + 48) = *((_WORD *)v175 + 24);
            uint64_t v209 = *((void *)v175 + 8);
            *(void *)(v174 + 56) = *((void *)v175 + 7);
            *(void *)(v174 + 64) = v209;
            *(unsigned char *)(v174 + 72) = v175[72];
            uint64_t v210 = *(int *)(v176 + 40);
            int v211 = &v175[v210];
            uint64_t v313 = (void *)(v174 + v210);
            int v212 = __dstb();
            __src = v211;
            unsigned int v213 = ((uint64_t (*)(char *, uint64_t, uint64_t))__dstb)(v211, 1, v141);
            if (v212)
            {
              uint64_t v214 = v142;
              if (v213)
              {
                uint64_t v215 = sub_10000588C(&qword_101649E40);
                memcpy(v313, __src, *(void *)(*(void *)(v215 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, void *, uint64_t))(v142 + 32))(v313, __src, v141);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 56))(v313, 0, 1, v141);
              }
              uint64_t v57 = v332;
              int v58 = v334;
            }
            else
            {
              uint64_t v57 = v332;
              int v58 = v334;
              uint64_t v214 = v325;
              if (v213)
              {
                (*(void (**)(void *, uint64_t))(v325 + 8))(v313, v141);
                uint64_t v287 = sub_10000588C(&qword_101649E40);
                memcpy(v313, __src, *(void *)(*(void *)(v287 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, void *, uint64_t))(v325 + 40))(v313, __src, v141);
              }
            }
            uint64_t v288 = v321[11];
            unint64_t v333 = &v175[v288];
            uint64_t v326 = (void *)(v174 + v288);
            int v314 = __dstb();
            unsigned int v289 = ((uint64_t (*)(char *, uint64_t, uint64_t))__dstb)(v333, 1, v141);
            if (v314)
            {
              if (!v289)
              {
                (*(void (**)(void *, char *, uint64_t))(v214 + 32))(v326, v333, v141);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v214 + 56))(v326, 0, 1, v141);
                goto LABEL_117;
              }
              size_t v290 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
              uint64_t v291 = v326;
            }
            else
            {
              if (!v289)
              {
                (*(void (**)(void *, char *, uint64_t))(v214 + 40))(v326, v333, v141);
                goto LABEL_117;
              }
              (*(void (**)(void *, uint64_t))(v214 + 8))(v326, v141);
              size_t v290 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
              uint64_t v291 = v326;
            }
            memcpy(v291, v333, v290);
LABEL_117:
            uint64_t v292 = v321[12];
            uint64_t v293 = v174 + v292;
            uint64_t v294 = &v175[v292];
            *(void *)uint64_t v293 = *(void *)v294;
            *(unsigned char *)(v293 + 8) = v294[8];
            uint64_t v295 = v321[13];
            v296 = (void *)(v174 + v295);
            v297 = (uint64_t *)&v175[v295];
            uint64_t v299 = *v297;
            uint64_t v298 = v297[1];
            void *v296 = v299;
            v296[1] = v298;
            swift_bridgeObjectRelease();
            *(void *)(v174 + v321[14]) = *(void *)&v175[v321[14]];
            swift_bridgeObjectRelease();
            uint64_t v300 = v321[15];
            long long v301 = (void *)(v174 + v300);
            uint64_t v302 = (uint64_t *)&v175[v300];
            uint64_t v304 = *v302;
            uint64_t v303 = v302[1];
            *long long v301 = v304;
            v301[1] = v303;
            swift_bridgeObjectRelease();
            *(void *)(v174 + v321[16]) = *(void *)&v175[v321[16]];
            swift_bridgeObjectRelease();
            uint64_t v305 = v321[17];
            uint64_t v306 = v174 + v305;
            uint64_t v307 = &v175[v305];
            *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
            *(unsigned char *)(v306 + 16) = v307[16];
            uint64_t v308 = v321[18];
            uint64_t v309 = v174 + v308;
            size_t v310 = &v175[v308];
            *(unsigned char *)(v309 + 16) = v310[16];
            *(_OWORD *)uint64_t v309 = *(_OWORD *)v310;
LABEL_73:
            *(_DWORD *)&v60[v62[21]] = *(_DWORD *)&v61[v62[21]];
            *(void *)&v60[v62[22]] = *(void *)&v61[v62[22]];
            swift_bridgeObjectRelease();
            uint64_t v229 = v62[23];
            v230 = (uint64_t *)&v60[v229];
            uint64_t v231 = (uint64_t *)&v61[v229];
            unint64_t v232 = *(void *)&v60[v229 + 8];
            if (v232 >> 60 != 15)
            {
              unint64_t v233 = v231[1];
              if (v233 >> 60 != 15)
              {
                uint64_t v234 = *v230;
                uint64_t *v230 = *v231;
                v230[1] = v233;
                sub_10001CFB8(v234, v232);
LABEL_78:
                uint64_t v235 = v62[24];
                uint64_t v236 = (uint64_t *)&v60[v235];
                v237 = (uint64_t *)&v61[v235];
                unint64_t v238 = *(void *)&v60[v235 + 8];
                if (v238 >> 60 != 15)
                {
                  unint64_t v239 = v237[1];
                  if (v239 >> 60 != 15)
                  {
                    uint64_t v240 = *v236;
                    *uint64_t v236 = *v237;
                    v236[1] = v239;
                    sub_10001CFB8(v240, v238);
                    goto LABEL_83;
                  }
                  sub_1001356D0((uint64_t)v236);
                }
                *(_OWORD *)uint64_t v236 = *(_OWORD *)v237;
LABEL_83:
                v241 = *(void (**)(char *, unsigned char *, uint64_t))(v214 + 40);
                v241(&v60[v62[25]], &v61[v62[25]], v141);
                v241(&v60[v62[26]], &v61[v62[26]], v141);
                v241(&v60[v62[27]], &v61[v62[27]], v141);
                v241(&v60[v62[28]], &v61[v62[28]], v141);
                v241(&v60[v62[29]], &v61[v62[29]], v141);
                v241(&v60[v62[30]], &v61[v62[30]], v141);
                uint64_t v242 = v62[31];
                uint64_t v243 = &v60[v242];
                uint64_t v244 = (uint64_t *)&v61[v242];
                uint64_t v246 = *v244;
                uint64_t v245 = v244[1];
                *(void *)uint64_t v243 = v246;
                *((void *)v243 + 1) = v245;
                swift_bridgeObjectRelease();
                *(void *)&v60[v62[32]] = *(void *)&v61[v62[32]];
                swift_bridgeObjectRelease();
                uint64_t v247 = v62[33];
                uint64_t v248 = &v60[v247];
                uint64_t v249 = (uint64_t *)&v61[v247];
                uint64_t v251 = *v249;
                uint64_t v250 = v249[1];
                *(void *)uint64_t v248 = v251;
                *((void *)v248 + 1) = v250;
                swift_bridgeObjectRelease();
                *(void *)&v60[v62[34]] = *(void *)&v61[v62[34]];
                swift_bridgeObjectRelease();
                uint64_t v252 = v62[35];
                uint64_t v253 = &v60[v252];
                uint64_t v254 = &v61[v252];
                *(_OWORD *)uint64_t v253 = *(_OWORD *)v254;
                v253[16] = v254[16];
                uint64_t v255 = v62[36];
                uint64_t v256 = &v60[v255];
                uint64_t v257 = &v61[v255];
                v256[16] = v257[16];
                *(_OWORD *)uint64_t v256 = *(_OWORD *)v257;
                v241(&v60[v62[37]], &v61[v62[37]], v141);
                v241(&v60[v62[38]], &v61[v62[38]], v141);
                v241(&v60[v62[39]], &v61[v62[39]], v141);
                v241(&v60[v62[40]], &v61[v62[40]], v141);
                v241(&v60[v62[41]], &v61[v62[41]], v141);
                v241(&v60[v62[42]], &v61[v62[42]], v141);
                v60[v62[43]] = v61[v62[43]];
                v60[v62[44]] = v61[v62[44]];
                v60[v62[45]] = v61[v62[45]];
                uint64_t v258 = v62[46];
                v259 = &v60[v258];
                os_log_type_t v260 = (uint64_t *)&v61[v258];
                uint64_t v262 = *v260;
                uint64_t v261 = v260[1];
                *(void *)v259 = v262;
                *((void *)v259 + 1) = v261;
                swift_bridgeObjectRelease();
                uint64_t v263 = v62[47];
                char v264 = &v60[v263];
                uint64_t v265 = (uint64_t *)&v61[v263];
                uint64_t v267 = *v265;
                uint64_t v266 = v265[1];
                *(void *)char v264 = v267;
                *((void *)v264 + 1) = v266;
                swift_bridgeObjectRelease();
                goto LABEL_84;
              }
              sub_1001356D0((uint64_t)v230);
            }
            *(_OWORD *)v230 = *(_OWORD *)v231;
            goto LABEL_78;
          }
          (*(void (**)(char *, uint64_t))(v142 + 8))(v163, v141);
        }
        uint64_t v167 = sub_10000588C(&qword_101649E40);
        memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
        goto LABEL_49;
      }
      (*(void (**)(char *, uint64_t))(v142 + 8))(v139, v141);
    }
    uint64_t v161 = sub_10000588C(&qword_101649E40);
    memcpy(v139, v140, *(void *)(*(void *)(v161 - 8) + 64));
    goto LABEL_43;
  }
  if (v66)
  {
LABEL_25:
    uint64_t v80 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v60, v61, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_84;
  }
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v61[8];
  uint64_t v67 = v62[5];
  uint64_t v68 = &v60[v67];
  uint64_t v69 = &v61[v67];
  uint64_t v70 = type metadata accessor for ServerStatusCode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
  v60[v62[6]] = v61[v62[6]];
  v60[v62[7]] = v61[v62[7]];
  *(_OWORD *)&v60[v62[8]] = *(_OWORD *)&v61[v62[8]];
  v60[v62[9]] = v61[v62[9]];
  v60[v62[10]] = v61[v62[10]];
  v60[v62[11]] = v61[v62[11]];
  *(_OWORD *)&v60[v62[12]] = *(_OWORD *)&v61[v62[12]];
  *(_OWORD *)&v60[v62[13]] = *(_OWORD *)&v61[v62[13]];
  uint64_t v71 = v62[14];
  uint64_t v72 = &v60[v71];
  uint64_t v73 = &v61[v71];
  v72[8] = v73[8];
  *(void *)uint64_t v72 = *(void *)v73;
  *(_OWORD *)&v60[v62[15]] = *(_OWORD *)&v61[v62[15]];
  uint64_t v74 = v62[16];
  uint64_t v75 = &v60[v74];
  uint64_t v76 = &v61[v74];
  uint64_t v77 = type metadata accessor for URL();
  uint64_t v78 = *(void *)(v77 - 8);
  v324 = *(unsigned int (**)(void))(v78 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v324)(v76, 1, v77))
  {
    uint64_t v79 = sub_10000588C(&qword_101649E40);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  uint64_t v146 = v62[17];
  uint64_t v147 = &v60[v146];
  uint64_t v148 = &v61[v146];
  uint64_t v320 = v63;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v324)(&v61[v146], 1, v77))
  {
    uint64_t v149 = sub_10000588C(&qword_101649E40);
    memcpy(v147, v148, *(void *)(*(void *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v147, v148, v77);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v147, 0, 1, v77);
  }
  *(_OWORD *)&v60[v62[18]] = *(_OWORD *)&v61[v62[18]];
  *(void *)&v60[v62[19]] = *(void *)&v61[v62[19]];
  uint64_t v150 = v62[20];
  uint64_t v151 = &v60[v150];
  uint64_t v152 = &v61[v150];
  uint64_t v153 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v154 = *((void *)v153 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v154 + 48))(v152, 1, v153))
  {
    uint64_t v155 = sub_10000588C(&qword_101649E50);
    memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
  }
  else
  {
    long long v156 = *((_OWORD *)v152 + 1);
    *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
    *((_OWORD *)v151 + 1) = v156;
    *((_OWORD *)v151 + 2) = *((_OWORD *)v152 + 2);
    *((_WORD *)v151 + 24) = *((_WORD *)v152 + 24);
    uint64_t v157 = *((void *)v152 + 8);
    *((void *)v151 + 7) = *((void *)v152 + 7);
    *((void *)v151 + 8) = v157;
    v151[72] = v152[72];
    uint64_t v158 = v153[10];
    uint64_t v315 = v154;
    int __dsta = &v151[v158];
    uint64_t v159 = &v152[v158];
    if (v324())
    {
      uint64_t v160 = sub_10000588C(&qword_101649E40);
      memcpy(__dsta, v159, *(void *)(*(void *)(v160 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(__dsta, v159, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dsta, 0, 1, v77);
    }
    uint64_t v187 = v153[11];
    __dstc = &v151[v187];
    uint64_t v188 = &v152[v187];
    if (v324())
    {
      uint64_t v189 = sub_10000588C(&qword_101649E40);
      memcpy(__dstc, v188, *(void *)(*(void *)(v189 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(__dstc, v188, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dstc, 0, 1, v77);
    }
    uint64_t v190 = v153[12];
    uint64_t v191 = &v151[v190];
    unint64_t v192 = &v152[v190];
    *(void *)uint64_t v191 = *(void *)v192;
    v191[8] = v192[8];
    *(_OWORD *)&v151[v153[13]] = *(_OWORD *)&v152[v153[13]];
    *(void *)&v151[v153[14]] = *(void *)&v152[v153[14]];
    *(_OWORD *)&v151[v153[15]] = *(_OWORD *)&v152[v153[15]];
    *(void *)&v151[v153[16]] = *(void *)&v152[v153[16]];
    uint64_t v193 = v153[17];
    uint64_t v194 = &v151[v193];
    uint64_t v195 = &v152[v193];
    v194[16] = v195[16];
    *(_OWORD *)uint64_t v194 = *(_OWORD *)v195;
    uint64_t v196 = v153[18];
    uint64_t v197 = &v151[v196];
    uint64_t v198 = &v152[v196];
    v197[16] = v198[16];
    *(_OWORD *)uint64_t v197 = *(_OWORD *)v198;
    (*(void (**)(char *, void, uint64_t, int *))(v315 + 56))(v151, 0, 1, v153);
  }
  int v58 = v334;
  *(_DWORD *)&v60[v62[21]] = *(_DWORD *)&v61[v62[21]];
  *(void *)&v60[v62[22]] = *(void *)&v61[v62[22]];
  *(_OWORD *)&v60[v62[23]] = *(_OWORD *)&v61[v62[23]];
  *(_OWORD *)&v60[v62[24]] = *(_OWORD *)&v61[v62[24]];
  int v199 = *(void (**)(char *, unsigned char *, uint64_t))(v78 + 32);
  v199(&v60[v62[25]], &v61[v62[25]], v77);
  v199(&v60[v62[26]], &v61[v62[26]], v77);
  v199(&v60[v62[27]], &v61[v62[27]], v77);
  v199(&v60[v62[28]], &v61[v62[28]], v77);
  v199(&v60[v62[29]], &v61[v62[29]], v77);
  v199(&v60[v62[30]], &v61[v62[30]], v77);
  *(_OWORD *)&v60[v62[31]] = *(_OWORD *)&v61[v62[31]];
  *(void *)&v60[v62[32]] = *(void *)&v61[v62[32]];
  *(_OWORD *)&v60[v62[33]] = *(_OWORD *)&v61[v62[33]];
  *(void *)&v60[v62[34]] = *(void *)&v61[v62[34]];
  uint64_t v200 = v62[35];
  uint64_t v201 = &v60[v200];
  uint64_t v202 = &v61[v200];
  v201[16] = v202[16];
  *(_OWORD *)uint64_t v201 = *(_OWORD *)v202;
  uint64_t v203 = v62[36];
  unint64_t v204 = &v60[v203];
  uint64_t v205 = &v61[v203];
  v204[16] = v205[16];
  *(_OWORD *)unint64_t v204 = *(_OWORD *)v205;
  v199(&v60[v62[37]], &v61[v62[37]], v77);
  v199(&v60[v62[38]], &v61[v62[38]], v77);
  v199(&v60[v62[39]], &v61[v62[39]], v77);
  v199(&v60[v62[40]], &v61[v62[40]], v77);
  v199(&v60[v62[41]], &v61[v62[41]], v77);
  v199(&v60[v62[42]], &v61[v62[42]], v77);
  v60[v62[43]] = v61[v62[43]];
  v60[v62[44]] = v61[v62[44]];
  v60[v62[45]] = v61[v62[45]];
  *(_OWORD *)&v60[v62[46]] = *(_OWORD *)&v61[v62[46]];
  *(_OWORD *)&v60[v62[47]] = *(_OWORD *)&v61[v62[47]];
  (*(void (**)(char *, void, uint64_t, int *))(v320 + 56))(v60, 0, 1, v62);
LABEL_84:
  v57[v336[16]] = v58[v336[16]];
  *(void *)&v57[v336[17]] = *(void *)&v58[v336[17]];
  swift_bridgeObjectRelease();
  uint64_t v268 = v336[18];
  uint64_t v269 = &v57[v268];
  v270 = &v58[v268];
  int v271 = v330(&v57[v268], 1, v331);
  int v272 = v330(v270, 1, v331);
  if (v271)
  {
    if (!v272)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 32))(v269, v270, v331);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v335 + 56))(v269, 0, 1, v331);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (v272)
  {
    (*(void (**)(char *, uint64_t))(v335 + 8))(v269, v331);
LABEL_89:
    uint64_t v273 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v269, v270, *(void *)(*(void *)(v273 - 8) + 64));
    goto LABEL_90;
  }
  v322(v269, v270, v331);
LABEL_90:
  uint64_t v274 = v336[19];
  v275 = &v57[v274];
  v276 = &v58[v274];
  int v277 = v330(&v57[v274], 1, v331);
  int v278 = v330(v276, 1, v331);
  if (v277)
  {
    if (!v278)
    {
      (*(void (**)(char *, char *, uint64_t))(v335 + 32))(v275, v276, v331);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v335 + 56))(v275, 0, 1, v331);
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  if (v278)
  {
    (*(void (**)(char *, uint64_t))(v335 + 8))(v275, v331);
LABEL_95:
    uint64_t v279 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v275, v276, *(void *)(*(void *)(v279 - 8) + 64));
    goto LABEL_96;
  }
  v322(v275, v276, v331);
LABEL_96:
  uint64_t v280 = v336[20];
  int v281 = (uint64_t *)&v57[v280];
  int v282 = (uint64_t *)&v58[v280];
  unint64_t v283 = *(void *)&v57[v280 + 8];
  if (((v283 >> 60) | 4) != 0xF)
  {
    unint64_t v284 = v282[1];
    if (((v284 >> 60) | 4) != 0xF)
    {
      uint64_t v286 = *v281;
      uint64_t *v281 = *v282;
      v281[1] = v284;
      sub_10001CFB8(v286, v283);
      goto LABEL_100;
    }
    sub_1001EADA0((uint64_t)v281);
  }
  *(_OWORD *)int v281 = *(_OWORD *)v282;
LABEL_100:
  uint64_t result = a1;
  v57[v336[21]] = v58[v336[21]];
  *(_WORD *)&v57[v336[22]] = *(_WORD *)&v58[v336[22]];
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return result;
}

uint64_t sub_1001EDBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EDC08);
}

uint64_t sub_1001EDC08(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *a1;
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for WildModeAssociationRecord(0);
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001EDCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EDCC4);
}

unsigned char *sub_1001EDCC4(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 253)
  {
    *uint64_t result = a2 + 2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001EDD68()
{
  uint64_t result = type metadata accessor for WildModeAssociationRecord(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MessagingError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for MessagingError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

unint64_t *assignWithTake for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF6 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483639);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 8;
  if (v4 >= 0xA) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MessagingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingError()
{
  return &type metadata for MessagingError;
}

unint64_t sub_1001EE00C(unint64_t a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x616E7265746E692ELL;
      break;
    case 2uLL:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 3uLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000017;
      break;
    case 5uLL:
      unint64_t result = 0xD000000000000010;
      break;
    case 6uLL:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 7uLL:
      unint64_t result = 0x6E776F6E6B6E752ELL;
      break;
    case 8uLL:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      strcpy((char *)v5, ".underlying(");
      BYTE5(v5[1]) = 0;
      HIWORD(v5[1]) = -5120;
      sub_1001EE1D4(a1);
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      sub_1001EE1E4(a1);
      unint64_t result = v5[0];
      break;
  }
  return result;
}

unint64_t sub_1001EE1CC()
{
  return sub_1001EE00C(*v0);
}

unint64_t sub_1001EE1D4(unint64_t result)
{
  if (result >= 9) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_1001EE1E4(unint64_t result)
{
  if (result >= 9) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_1001EE1F8(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737574617473;
      break;
    case 2:
      unint64_t result = 0x654C636341616162;
      break;
    case 3:
      unint64_t result = 0x6E49636341616162;
      break;
    case 4:
      unint64_t result = 1684628325;
      break;
    case 5:
      unint64_t result = 0x644970696863;
      break;
    case 6:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 7:
    case 8:
      unint64_t result = 0x726F737365636361;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 12:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 13:
      unint64_t result = 0x7372655663657073;
      break;
    case 14:
      unint64_t result = 0x657261776D726966;
      break;
    case 15:
      unint64_t result = 0x49746375646F7270;
      break;
    case 16:
      unint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001EE43C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163EE20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001F192C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 24);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 40);
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 56);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 88);
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 104);
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 120);
    char v11 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1001F1980((uint64_t)v3 + 136, (uint64_t)v13);
    sub_1001F1980((uint64_t)v13, (uint64_t)&v12);
    char v11 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001EE8C0()
{
  return sub_1001EE1F8(*v0);
}

uint64_t sub_1001EE8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001F1C84(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001EE8F0(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1001EE8FC(uint64_t a1)
{
  unint64_t v2 = sub_1001F192C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EE938(uint64_t a1)
{
  unint64_t v2 = sub_1001F192C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001EE974(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_1001EE43C(a1);
}

uint64_t sub_1001EE9C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_100BD6E48();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = (void *)*a5;
  unint64_t v17 = sub_100723FF4(v7, v8);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      uint64_t v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100E7EC1C();
      uint64_t v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v26 = (uint64_t *)(v24[6] + 16 * v17);
    *uint64_t v26 = v11;
    v26[1] = v12;
    uint64_t v27 = (void *)(v24[7] + 16 * v17);
    *uint64_t v27 = v13;
    v27[1] = v14;
    uint64_t v28 = v24[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    uint64_t v31 = sub_100BD6E48();
    if (v32)
    {
      uint64_t v35 = v31;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      do
      {
        int v43 = (void *)*a5;
        unint64_t v45 = sub_100723FF4(v35, v36);
        uint64_t v46 = v43[2];
        BOOL v47 = (v44 & 1) == 0;
        uint64_t v48 = v46 + v47;
        if (__OFADD__(v46, v47)) {
          goto LABEL_25;
        }
        char v49 = v44;
        if (v43[3] < v48)
        {
          sub_100E6609C(v48, 1);
          uint64_t v50 = sub_100723FF4(v35, v36);
          if ((v49 & 1) != (v51 & 1)) {
            goto LABEL_27;
          }
          unint64_t v45 = v50;
        }
        uint64_t v52 = (void *)*a5;
        if (v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = (void *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *uint64_t v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
          *uint64_t v53 = v35;
          v53[1] = v36;
          BOOL v54 = (void *)(v52[7] + 16 * v45);
          void *v54 = v37;
          v54[1] = v38;
          uint64_t v55 = v52[2];
          BOOL v29 = __OFADD__(v55, 1);
          uint64_t v56 = v55 + 1;
          if (v29) {
            goto LABEL_26;
          }
          void v52[2] = v56;
        }
        uint64_t v35 = sub_100BD6E48();
        uint64_t v36 = v40;
        uint64_t v37 = v41;
        uint64_t v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  sub_100E6609C(v20, a4 & 1);
  uint64_t v22 = sub_100723FF4(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    uint64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *uint64_t v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EECD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v50 = a1[17];
  uint64_t v51 = a1[16];
  sub_1000361E0(v51, v50);
  sub_1000362FC();
  uint64_t v46 = DataProtocol.intValue.getter();
  uint64_t v7 = a1[8];
  unint64_t v6 = a1[9];
  uint64_t v8 = a1[10];
  unint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  unint64_t v61 = a1[13];
  uint64_t v11 = a1[14];
  unint64_t v56 = a1[15];
  uint64_t v63 = a1[20];
  unint64_t v53 = a1[21];
  uint64_t v59 = a1[24];
  unint64_t v60 = a1[25];
  uint64_t v54 = a1[5];
  uint64_t v48 = *a1;
  uint64_t v49 = a1[4];
  uint64_t v62 = a1[1];
  uint64_t v47 = a1[2];
  uint64_t v64 = a1[3];
  uint64_t v12 = a1[31];
  uint64_t v52 = a1[30];
  unint64_t v13 = a1[33];
  uint64_t v55 = a1[32];
  unint64_t v44 = a1[7];
  uint64_t v45 = a1[6];
  sub_1000361E0(v45, v44);
  unint64_t v42 = v6;
  uint64_t v43 = v7;
  sub_1000361E0(v7, v6);
  uint64_t v41 = v8;
  sub_1000361E0(v8, v9);
  uint64_t v40 = v10;
  sub_1000361E0(v10, v61);
  uint64_t v39 = v11;
  unint64_t v14 = v56;
  sub_1000361E0(v11, v56);
  sub_1000361E0(v63, v53);
  sub_100037A38(v59, v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_1001F1080(a1);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = a3;
    uint64_t v21 = v52;
  }
  else
  {
    sub_1000361E0(a2, a3);
    unint64_t v22 = v13;
    uint64_t v23 = sub_1002AA5D4(v55, v13);
    unint64_t v25 = v24;
    uint64_t v26 = Data.hexString.getter();
    uint64_t v37 = v27;
    uint64_t v38 = v26;
    sub_10001CFB8(v23, v25);
    switch(v22 >> 62)
    {
      case 1uLL:
        LODWORD(v28) = HIDWORD(v55) - v55;
        if (__OFSUB__(HIDWORD(v55), v55)) {
          goto LABEL_11;
        }
        uint64_t v28 = (int)v28;
LABEL_7:
        if (v28 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x1001EF038);
        }
LABEL_8:
        uint64_t v32 = Data.subdata(in:)();
        unint64_t v34 = v33;
        uint64_t v16 = Data.hexString.getter();
        uint64_t v17 = v35;
        unint64_t v20 = a3;
        sub_10001CFB8(a2, a3);
        sub_1001F1080(a1);
        uint64_t v36 = v32;
        unint64_t v14 = v56;
        uint64_t result = sub_10001CFB8(v36, v34);
        uint64_t v21 = v52;
        uint64_t v19 = v37;
        uint64_t v18 = v38;
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v55 + 16);
        uint64_t v29 = *(void *)(v55 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v28 = v29 - v30;
        if (!v31) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *a4 = v51;
  a4[1] = v50;
  a4[2] = v46;
  a4[3] = v45;
  a4[4] = v44;
  a4[5] = v43;
  a4[6] = v42;
  a4[7] = v41;
  a4[8] = v9;
  a4[9] = v40;
  a4[10] = v61;
  a4[11] = v39;
  a4[12] = v14;
  a4[13] = a2;
  a4[14] = v20;
  a4[15] = v63;
  a4[16] = v53;
  a4[17] = v59;
  a4[18] = v60;
  a4[19] = v49;
  a4[20] = v54;
  a4[21] = v48;
  a4[22] = v62;
  a4[23] = v47;
  a4[24] = v64;
  a4[25] = 0x302E302E31;
  a4[26] = 0xE500000000000000;
  a4[27] = v21;
  a4[28] = v12;
  a4[29] = v18;
  a4[30] = v19;
  a4[31] = v16;
  a4[32] = v17;
  return result;
}

uint64_t sub_1001EF048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[144] = a4;
  v4[143] = a3;
  v4[142] = a2;
  v4[141] = a1;
  uint64_t v5 = type metadata accessor for HashAlgorithm();
  v4[145] = v5;
  v4[146] = *(void *)(v5 - 8);
  v4[147] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  v4[148] = v6;
  v4[149] = *(void *)(v6 - 8);
  v4[150] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[151] = v7;
  v4[152] = *(void *)(v7 - 8);
  v4[153] = swift_task_alloc();
  return _swift_task_switch(sub_1001EF1CC, 0, 0);
}

void sub_1001EF1CC()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  Swift::String v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v6 = v0[153];
  uint64_t v7 = v0[152];
  uint64_t v8 = v0[151];
  uint64_t v50 = v0[150];
  uint64_t v51 = v0[149];
  uint64_t v52 = v0[148];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[138] = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  swift_bridgeObjectRelease();
  v0[137] = 1;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v19, v21, 0xD000000000000013, 0x80000001013F6520, v22);
  unint64_t v23 = v13;
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = sub_100BCABFC(v24);
  uint64_t v27 = v26;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v25, v27, 0x6567412D72657355, 0xEA0000000000746ELL, v28);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v29 = Locale.acceptLanguageCode.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v29, v31, 0x4C2D747065636341, 0xEF65676175676E61, v32);
  unint64_t v33 = v23;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v34 = (void *)qword_10170EE68;
  id v35 = [self sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v38 = [v34 BOOLForKey:v37];

    uint64_t v40 = v0 + 68;
    uint64_t v39 = v0 + 2;
    if (v38)
    {
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v41);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v40 = v0 + 68;
    uint64_t v39 = v0 + 2;
  }
  v0[154] = v33;
  unint64_t v42 = v0[143];
  uint64_t v43 = v0[142];
  unint64_t v44 = (uint64_t *)v0[141];
  sub_1001F0C14(v44);
  sub_1000361E0(v43, v42);
  sub_1001EECD4(v44, v43, v42, v39);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v40, v39, 0x108uLL);
  sub_1001F0D90();
  uint64_t v45 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[155] = v45;
  v0[156] = v46;
  uint64_t v47 = v45;
  unint64_t v48 = v46;
  swift_release();
  sub_1000361E0(v47, v48);
  unint64_t v53 = (void (__cdecl *)())((char *)&dword_10165AC40 + dword_10165AC40);
  uint64_t v49 = (void *)swift_task_alloc();
  v0[157] = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_1001EF9E0;
  v53();
}

uint64_t sub_1001EF9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1264) = a1;
  *(void *)(v3 + 1272) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001EFAE4, 0, 0);
}

uint64_t sub_1001EFAE4()
{
  unint64_t v1 = v0[159];
  uint64_t v2 = v0[158];
  unint64_t v3 = v0[156];
  uint64_t v4 = v0[155];
  uint64_t v5 = v0[147];
  uint64_t v6 = v0[146];
  uint64_t v7 = v0[145];
  v0[134] = v2;
  v0[135] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[160] = v0[134];
  v0[161] = v0[135];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[162] = v8;
  v0[163] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC38 + dword_10165AC38);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[164] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1001EFC80;
  uint64_t v12 = v0[144];
  return v14(v8, v10, v12);
}

uint64_t sub_1001EFC80(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1320) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001F0440;
  }
  else
  {
    unint64_t v6 = v4[163];
    uint64_t v7 = v4[162];
    v4[166] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_1001EFDB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001EFDB0()
{
  uint64_t v55 = v0;
  uint64_t isa = (uint64_t)v0[166].isa;
  Class v2 = v0[165].isa;
  uint64_t v3 = (uint64_t)v0[154].isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54[0] = v3;
  sub_1001EE9C8(isa, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v54);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = (unint64_t)v0[161].isa;
  uint64_t v7 = (uint64_t)v0[160].isa;
  uint64_t v49 = v54[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  if (qword_101637320 != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v47 = (uint64_t *)&v0[2];
  unint64_t v48 = v0;
  __dst = v0 + 35;
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F098);
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v0, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v9, "Pairing lock header:", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = v49;
  uint64_t v50 = v49 + 64;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(v49 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & *(void *)(v49 + 64);
  int64_t v51 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v52)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v52 = i;
      unint64_t v17 = v16 | (i << 6);
      goto LABEL_29;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v0 = v48;
    if (v18 >= v51) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v50 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v51) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v50 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v51) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v50 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v14 = (v19 - 1) & v19;
    int64_t v52 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_29:
    uint64_t v22 = 16 * v17;
    unint64_t v23 = (uint64_t *)(*(void *)(v11 + 48) + v22);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = (uint64_t *)(*(void *)(v11 + 56) + v22);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v0 = swift_slowAlloc();
      v54[0] = (uint64_t)v0;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_1008FA0F0(v25, v24, v54);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 14) = sub_1008FA0F0(v28, v27, v54);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = v49;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v21 = i + 4;
  if (i + 4 < v51)
  {
    unint64_t v19 = *(void *)(v50 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        int64_t v20 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_38;
        }
        if (v20 >= v51) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v50 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    int64_t v20 = i + 4;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  sub_1001F0DE4(v47);
  sub_1001F0DE4(v47);
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  unint64_t v35 = (unint64_t)v48[156].isa;
  uint64_t v36 = (uint64_t)v48[155].isa;
  unint64_t v37 = (unint64_t)v48[143].isa;
  uint64_t v38 = (uint64_t)v48[142].isa;
  uint64_t v39 = v48[141].isa;
  if (v34)
  {
    unint64_t v53 = v48[141].isa;
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v0 = v48;
    memcpy(__dst, v47, 0x108uLL);
    sub_1001F0DE4(v47);
    uint64_t v41 = String.init<A>(describing:)();
    v48[139].uint64_t isa = (Class)sub_1008FA0F0(v41, v42, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F0F34(v47);
    sub_1001F0F34(v47);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Pairing ack body %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v38, v37);
    sub_1001F1080(v53);

    sub_10001CFB8(v36, v35);
    sub_1001F0F34(v47);
  }
  else
  {
    sub_1001F0F34(v47);
    sub_10001CFB8(v36, v35);
    sub_1001F0F34(v47);
    sub_1001F0F34(v47);
    swift_release();
    sub_10001CFB8(v38, v37);
    sub_1001F1080(v39);
  }
  Class v43 = v0[156].isa;
  Class v44 = v0[155].isa;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = (uint64_t (*)(uint64_t, Class, Class))v0[1].isa;
  return v45(v49, v44, v43);
}

uint64_t sub_1001F0440()
{
  uint64_t v59 = v0;
  int64_t v1 = (int64_t)v0;
  unint64_t v2 = v0[163];
  uint64_t v3 = v0[162];
  unint64_t v4 = v0[161];
  uint64_t v5 = v0[160];
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v5, v4);
  unint64_t v6 = (unint64_t)&qword_101637000;
  if (qword_101637320 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543362;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v1 + 1120) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v6 = 0x101637000;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v13 = *(void *)(v1 + 1232);
    if (*(void *)(v6 + 800) != -1) {
      swift_once();
    }
    int64_t v52 = (void *)v1;
    __dst = (void *)(v1 + 280);
    int64_t v51 = (uint64_t *)(v1 + 16);
    sub_100010324(v7, (uint64_t)qword_10170F098);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    uint64_t v53 = v13;
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Pairing lock header:", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v49 = (uint64_t *)(v1 + 1112);

    uint64_t v54 = v13 + 64;
    uint64_t v17 = -1;
    uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1 << -(char)v18);
    }
    unint64_t v6 = v17 & *(void *)(v13 + 64);
    int64_t v55 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain();
    int64_t v1 = 0;
    while (v6)
    {
      while (1)
      {
        unint64_t v19 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v20 = v19 | (v1 << 6);
LABEL_29:
        uint64_t v24 = 16 * v20;
        uint64_t v25 = (uint64_t *)(*(void *)(v13 + 48) + v24);
        uint64_t v27 = *v25;
        unint64_t v26 = v25[1];
        uint64_t v28 = (uint64_t *)(*(void *)(v13 + 56) + v24);
        uint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v31, v32)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v33 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = sub_1008FA0F0(v27, v26, &v58);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 14) = sub_1008FA0F0(v30, v29, &v58);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v53;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v21 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v21);
    ++v1;
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 1;
    if (v21 + 1 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v1 = v21 + 2;
    if (v21 + 2 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v1);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v23 = v21 + 3;
    if (v23 >= v55) {
      break;
    }
    unint64_t v22 = *(void *)(v54 + 8 * v23);
    if (v22)
    {
      int64_t v1 = v23;
LABEL_28:
      unint64_t v6 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v1 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        break;
      }
      if (v1 >= v55) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v54 + 8 * v1);
      ++v23;
      if (v22) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_1001F0DE4(v51);
  sub_1001F0DE4(v51);
  BOOL v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v37 = v52[156];
  uint64_t v38 = v52[155];
  unint64_t v39 = v52[143];
  uint64_t v40 = v52[142];
  uint64_t v41 = (void *)v52[141];
  if (v36)
  {
    unint64_t v57 = v52[156];
    uint64_t v56 = v52[155];
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)unint64_t v42 = 136315138;
    memcpy(__dst, v51, 0x108uLL);
    sub_1001F0DE4(v51);
    uint64_t v43 = String.init<A>(describing:)();
    *uint64_t v49 = sub_1008FA0F0(v43, v44, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F0F34(v51);
    sub_1001F0F34(v51);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Pairing ack body %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10001CFB8(v40, v39);
    sub_1001F1080(v41);

    sub_10001CFB8(v56, v57);
    sub_1001F0F34(v51);
  }
  else
  {
    sub_1001F0F34(v51);
    sub_10001CFB8(v38, v37);
    sub_1001F0F34(v51);
    sub_1001F0F34(v51);
    swift_release();
    sub_10001CFB8(v40, v39);
    sub_1001F1080(v41);
  }
  uint64_t v45 = v52[156];
  uint64_t v46 = v52[155];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52[1];
  return v47(v53, v46, v45);
}

void *sub_1001F0C14(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v5 = a1[8];
  unint64_t v4 = a1[9];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[23];
  uint64_t v20 = a1[22];
  unint64_t v21 = a1[25];
  uint64_t v24 = a1[26];
  uint64_t v22 = a1[24];
  unint64_t v23 = a1[27];
  uint64_t v26 = a1[28];
  unint64_t v25 = a1[29];
  uint64_t v28 = a1[32];
  unint64_t v27 = a1[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v5, v4);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v10);
  sub_1000361E0(v12, v11);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  sub_100037A38(v22, v21);
  sub_1000361E0(v24, v23);
  sub_1000361E0(v26, v25);
  swift_bridgeObjectRetain();
  sub_100037A38(v28, v27);
  return a1;
}

unint64_t sub_1001F0D90()
{
  unint64_t result = qword_10163EE18;
  if (!qword_10163EE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EE18);
  }
  return result;
}

uint64_t *sub_1001F0DE4(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  uint64_t v14 = a1[13];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  unint64_t v15 = a1[16];
  uint64_t v16 = a1[15];
  unint64_t v17 = a1[18];
  uint64_t v18 = a1[17];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_100037A38(v18, v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1001F0F34(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  uint64_t v14 = a1[13];
  unint64_t v15 = a1[16];
  unint64_t v17 = a1[18];
  uint64_t v18 = a1[17];
  uint64_t v16 = a1[15];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  sub_10001CFB8(v10, v12);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_100037A24(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1001F1080(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[23];
  uint64_t v20 = a1[22];
  unint64_t v21 = a1[25];
  uint64_t v24 = a1[26];
  uint64_t v22 = a1[24];
  unint64_t v23 = a1[27];
  uint64_t v26 = a1[28];
  unint64_t v25 = a1[29];
  uint64_t v28 = a1[32];
  unint64_t v27 = a1[33];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v10);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  sub_10001CFB8(v20, v19);
  sub_100037A24(v22, v21);
  sub_10001CFB8(v24, v23);
  sub_10001CFB8(v26, v25);
  swift_bridgeObjectRelease();
  sub_100037A24(v28, v27);
  return a1;
}

uint64_t destroy for AirPodsLEPairingLockAckRequestContent(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[3], a1[4]);
  sub_10001CFB8(a1[5], a1[6]);
  sub_10001CFB8(a1[7], a1[8]);
  sub_10001CFB8(a1[9], a1[10]);
  sub_10001CFB8(a1[11], a1[12]);
  sub_10001CFB8(a1[13], a1[14]);
  sub_10001CFB8(a1[15], a1[16]);
  unint64_t v2 = a1[18];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[17], v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsLEPairingLockAckRequestContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  unint64_t v7 = a2[4];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = a2[9];
  unint64_t v13 = a2[10];
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  uint64_t v14 = a2[11];
  unint64_t v15 = a2[12];
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  uint64_t v16 = a2[13];
  unint64_t v17 = a2[14];
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v17;
  uint64_t v18 = a2[15];
  unint64_t v19 = a2[16];
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 120) = v18;
  *(void *)(a1 + 128) = v19;
  uint64_t v20 = a2 + 17;
  unint64_t v21 = a2[18];
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v22 = *v20;
    sub_1000361E0(*v20, a2[18]);
    *(void *)(a1 + 136) = v22;
    *(void *)(a1 + 144) = v21;
  }
  uint64_t v23 = a2[20];
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = v23;
  uint64_t v24 = a2[22];
  *(void *)(a1 + 168) = a2[21];
  *(void *)(a1 + 176) = v24;
  uint64_t v25 = a2[24];
  *(void *)(a1 + 184) = a2[23];
  *(void *)(a1 + 192) = v25;
  uint64_t v26 = a2[26];
  *(void *)(a1 + 200) = a2[25];
  *(void *)(a1 + 208) = v26;
  uint64_t v27 = a2[28];
  *(void *)(a1 + 216) = a2[27];
  *(void *)(a1 + 224) = v27;
  uint64_t v28 = a2[30];
  *(void *)(a1 + 232) = a2[29];
  *(void *)(a1 + 240) = v28;
  uint64_t v29 = a2[31];
  uint64_t v30 = a2[32];
  *(void *)(a1 + 248) = v29;
  *(void *)(a1 + 256) = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[5];
  unint64_t v13 = a2[6];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[7];
  unint64_t v17 = a2[8];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[7];
  unint64_t v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[9];
  unint64_t v21 = a2[10];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[9];
  unint64_t v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[11];
  unint64_t v25 = a2[12];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[11];
  unint64_t v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[13];
  unint64_t v29 = a2[14];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[13];
  unint64_t v31 = a1[14];
  a1[13] = v28;
  a1[14] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[15];
  unint64_t v33 = a2[16];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[15];
  unint64_t v35 = a1[16];
  a1[15] = v32;
  a1[16] = v33;
  sub_10001CFB8(v34, v35);
  BOOL v36 = a2 + 17;
  unint64_t v37 = a2[18];
  if ((unint64_t)a1[18] >> 60 != 15)
  {
    if (v37 >> 60 != 15)
    {
      uint64_t v39 = *v36;
      sub_1000361E0(*v36, a2[18]);
      uint64_t v40 = a1[17];
      unint64_t v41 = a1[18];
      a1[17] = v39;
      a1[18] = v37;
      sub_10001CFB8(v40, v41);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)(a1 + 17));
    goto LABEL_6;
  }
  if (v37 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 17) = *(_OWORD *)v36;
    goto LABEL_8;
  }
  uint64_t v38 = *v36;
  sub_1000361E0(*v36, a2[18]);
  a1[17] = v38;
  a1[18] = v37;
LABEL_8:
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[31] = a2[31];
  a1[32] = a2[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AirPodsLEPairingLockAckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for AirPodsLEPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  sub_10001CFB8(v7, v8);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001CFB8(v11, v12);
  uint64_t v13 = *(void *)(a1 + 72);
  unint64_t v14 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = *(void *)(a1 + 88);
  unint64_t v16 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001CFB8(v15, v16);
  uint64_t v17 = *(void *)(a1 + 104);
  unint64_t v18 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001CFB8(v17, v18);
  uint64_t v19 = *(void *)(a1 + 120);
  unint64_t v20 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001CFB8(v19, v20);
  unint64_t v21 = (void *)(a2 + 136);
  unint64_t v22 = *(void *)(a1 + 144);
  if (v22 >> 60 != 15)
  {
    unint64_t v23 = *(void *)(a2 + 144);
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *(void *)(a1 + 136);
      *(void *)(a1 + 136) = *v21;
      *(void *)(a1 + 144) = v23;
      sub_10001CFB8(v24, v22);
      goto LABEL_6;
    }
    sub_1001356D0(a1 + 136);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)v21;
LABEL_6:
  uint64_t v25 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 264)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 208);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 208) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequestContent()
{
  return &type metadata for AirPodsLEPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequest()
{
  return &type metadata for AirPodsLEPairingLockAckRequest;
}

unint64_t sub_1001F192C()
{
  unint64_t result = qword_10163EE28;
  if (!qword_10163EE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EE28);
  }
  return result;
}

uint64_t sub_1001F1980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101669360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for BeaconSharingMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F1B44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_1001F1B80()
{
  unint64_t result = qword_10163EE30;
  if (!qword_10163EE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EE30);
  }
  return result;
}

unint64_t sub_1001F1BD8()
{
  unint64_t result = qword_10163EE38;
  if (!qword_10163EE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EE38);
  }
  return result;
}

unint64_t sub_1001F1C30()
{
  unint64_t result = qword_10163EE40;
  if (!qword_10163EE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163EE40);
  }
  return result;
}

uint64_t sub_1001F1C84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C636341616162 && a2 == 0xEE00747265436661 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E49636341616162 && a2 == 0xEC00000031414374 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xEF74736574744179 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t sub_1001F242C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  sub_1001F2674();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101649E40);
    sub_1001F7BE8();
    swift_allocError();
    *uint64_t v11 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v9);
  }
}

void *sub_1001F2674()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163EE58);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v355 = (char *)&v300 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v354 = (char *)&v300 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v353 = (uint64_t)&v300 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v352 = (char *)&v300 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v351 = (char *)&v300 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v350 = (char *)&v300 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v349 = (uint64_t)&v300 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v348 = (uint64_t)&v300 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v347 = (uint64_t)&v300 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v346 = (char *)&v300 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v356 = (uint64_t)&v300 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v345 = (uint64_t)&v300 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v344 = (uint64_t)&v300 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v343 = (uint64_t)&v300 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v342 = (uint64_t)&v300 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v341 = (char *)&v300 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v340 = (char *)&v300 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  long long v357 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v300 - v38);
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v41 = (char *)&v300 - v40;
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v300 - v42;
  uint64_t v44 = type metadata accessor for URLQueryItem();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v302 = (char *)&v300 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v303 = (char *)&v300 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v308 = (char *)&v300 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v309 = (char *)&v300 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v338 = (char *)&v300 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  int v339 = (char *)&v300 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v336 = (char *)&v300 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  unint64_t v337 = (char *)&v300 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v334 = (char *)&v300 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  uint64_t v335 = (char *)&v300 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  int v332 = (char *)&v300 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  unint64_t v333 = (char *)&v300 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  uint64_t v330 = (char *)&v300 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v331 = (char *)&v300 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  v328 = (char *)&v300 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  long long v329 = (char *)&v300 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  uint64_t v326 = (char *)&v300 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  uint64_t v327 = (char *)&v300 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v324 = (char *)&v300 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  uint64_t v325 = (char *)&v300 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  uint64_t v322 = (char *)&v300 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  uint64_t v323 = (char *)&v300 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  uint64_t v320 = (char *)&v300 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  v321 = (char *)&v300 - v93;
  uint64_t v94 = __chkstk_darwin(v92);
  v318 = (char *)&v300 - v95;
  uint64_t v96 = __chkstk_darwin(v94);
  uint64_t v319 = (char *)&v300 - v97;
  uint64_t v98 = __chkstk_darwin(v96);
  uint64_t v316 = (char *)&v300 - v99;
  uint64_t v100 = __chkstk_darwin(v98);
  double v317 = (char *)&v300 - v101;
  uint64_t v102 = __chkstk_darwin(v100);
  int v314 = (char *)&v300 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  uint64_t v315 = (char *)&v300 - v105;
  uint64_t v106 = __chkstk_darwin(v104);
  uint64_t v306 = (char *)&v300 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  uint64_t v307 = (char *)&v300 - v109;
  uint64_t v110 = __chkstk_darwin(v108);
  uint64_t v304 = (char *)&v300 - v111;
  uint64_t v112 = __chkstk_darwin(v110);
  uint64_t v305 = (char *)&v300 - v113;
  uint64_t v114 = __chkstk_darwin(v112);
  uint64_t v312 = (char *)&v300 - v115;
  uint64_t v116 = __chkstk_darwin(v114);
  uint64_t v313 = (char *)&v300 - v117;
  uint64_t v118 = __chkstk_darwin(v116);
  size_t v310 = (char *)&v300 - v119;
  uint64_t v120 = __chkstk_darwin(v118);
  int v311 = (char *)&v300 - v121;
  uint64_t v122 = __chkstk_darwin(v120);
  uint64_t v124 = (char *)&v300 - v123;
  __chkstk_darwin(v122);
  uint64_t v126 = (char *)&v300 - v125;
  unint64_t v359 = _swiftEmptyArrayStorage;
  if (!*(void *)(v1 + 24))
  {
    uint64_t v358 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    v358(v43, 1, 1, v44);
LABEL_5:
    sub_10001DAB4((uint64_t)v43, &qword_10163EE58);
    uint64_t v127 = (uint64_t)v357;
    uint64_t v128 = *(void *)(v1 + 48);
    if (!v128) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  long long v301 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  URLQueryItem.init(name:value:)();
  uint64_t v358 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  v358(v43, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    unint64_t v41 = v301;
    goto LABEL_5;
  }
  uint64_t v153 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v153(v126, v43, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v124, v126, v44);
  unint64_t v154 = sub_100A6FEB8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v156 = *(void *)(v154 + 16);
  unint64_t v155 = *(void *)(v154 + 24);
  if (v156 >= v155 >> 1) {
    unint64_t v154 = sub_100A6FEB8(v155 > 1, v156 + 1, 1, v154);
  }
  *(void *)(v154 + 16) = v156 + 1;
  v153((char *)(v154+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v156), v124, v44);
  unint64_t v359 = (void *)v154;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v126, v44);
  uint64_t v127 = (uint64_t)v357;
  unint64_t v41 = v301;
  uint64_t v128 = *(void *)(v1 + 48);
  if (v128)
  {
LABEL_6:
    uint64_t v130 = *(void *)(v1 + 56);
    uint64_t v129 = *(void *)(v1 + 64);
    long long v360 = *(_OWORD *)(v1 + 32);
    uint64_t v361 = v128;
    uint64_t v362 = v130;
    uint64_t v363 = v129;
    uint64_t v131 = sub_1001F57CC();
    sub_100442FC0(v131);
  }
LABEL_7:
  char v132 = *(unsigned char *)(v1 + 88);
  swift_bridgeObjectRetain();
  sub_1001F6CDC(v132, (uint64_t)v41);
  swift_bridgeObjectRelease();
  uint64_t v133 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v133(v41, 1, v44) == 1)
  {
    sub_10001DAB4((uint64_t)v41, &qword_10163EE58);
  }
  else
  {
    uint64_t v134 = v41;
    uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    uint64_t v136 = v311;
    v135(v311, v134, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v310, v136, v44);
    unint64_t v137 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v137 = sub_100A6FEB8(0, *(void *)(v137 + 16) + 1, 1, v137);
    }
    unint64_t v139 = *(void *)(v137 + 16);
    unint64_t v138 = *(void *)(v137 + 24);
    if (v139 >= v138 >> 1) {
      unint64_t v137 = sub_100A6FEB8(v138 > 1, v139 + 1, 1, v137);
    }
    *(void *)(v137 + 16) = v139 + 1;
    v135((char *)(v137+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v139), v310, v44);
    unint64_t v359 = (void *)v137;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v311, v44);
    uint64_t v127 = (uint64_t)v357;
  }
  char v140 = *(unsigned char *)(v1 + 112);
  swift_bridgeObjectRetain();
  sub_1001F6EF4(v140, v127);
  swift_bridgeObjectRelease();
  if (v133((char *)v127, 1, v44) == 1)
  {
    sub_10001DAB4(v127, &qword_10163EE58);
    if (*(void *)(v1 + 144)) {
      goto LABEL_16;
    }
LABEL_28:
    uint64_t v141 = (uint64_t)v340;
    v358(v340, 1, 1, v44);
    goto LABEL_29;
  }
  uint64_t v148 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  uint64_t v149 = v313;
  v148(v313, v127, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v312, v149, v44);
  unint64_t v150 = (unint64_t)v359;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v150 = sub_100A6FEB8(0, *(void *)(v150 + 16) + 1, 1, v150);
  }
  unint64_t v152 = *(void *)(v150 + 16);
  unint64_t v151 = *(void *)(v150 + 24);
  if (v152 >= v151 >> 1) {
    unint64_t v150 = sub_100A6FEB8(v151 > 1, v152 + 1, 1, v150);
  }
  *(void *)(v150 + 16) = v152 + 1;
  v148((char *)(v150+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v152), (uint64_t)v312, v44);
  unint64_t v359 = (void *)v150;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v313, v44);
  if (!*(void *)(v1 + 144)) {
    goto LABEL_28;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v141 = (uint64_t)v340;
  URLQueryItem.init(name:value:)();
  v358((char *)v141, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v133((char *)v141, 1, v44) != 1)
  {
    uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v143 = v305;
    v142(v305, v141, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v304, v143, v44);
    unint64_t v144 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v144 = sub_100A6FEB8(0, *(void *)(v144 + 16) + 1, 1, v144);
    }
    unint64_t v146 = *(void *)(v144 + 16);
    unint64_t v145 = *(void *)(v144 + 24);
    if (v146 >= v145 >> 1) {
      unint64_t v144 = sub_100A6FEB8(v145 > 1, v146 + 1, 1, v144);
    }
    *(void *)(v144 + 16) = v146 + 1;
    v142((char *)(v144+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v146), (uint64_t)v304, v44);
    unint64_t v359 = (void *)v144;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v305, v44);
    if (!*(void *)(v1 + 176)) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_29:
  sub_10001DAB4(v141, &qword_10163EE58);
  if (!*(void *)(v1 + 176))
  {
LABEL_22:
    uint64_t v147 = (uint64_t)v341;
    v358(v341, 1, 1, v44);
LABEL_31:
    sub_10001DAB4(v147, &qword_10163EE58);
    goto LABEL_41;
  }
LABEL_30:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v147 = (uint64_t)v341;
  URLQueryItem.init(name:value:)();
  v358((char *)v147, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v133((char *)v147, 1, v44) == 1) {
    goto LABEL_31;
  }
  uint64_t v157 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  uint64_t v158 = v307;
  v157(v307, v147, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v306, v158, v44);
  unint64_t v159 = (unint64_t)v359;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v159 = sub_100A6FEB8(0, *(void *)(v159 + 16) + 1, 1, v159);
  }
  unint64_t v161 = *(void *)(v159 + 16);
  unint64_t v160 = *(void *)(v159 + 24);
  if (v161 >= v160 >> 1) {
    unint64_t v159 = sub_100A6FEB8(v160 > 1, v161 + 1, 1, v159);
  }
  *(void *)(v159 + 16) = v161 + 1;
  v157((char *)(v159+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v161), (uint64_t)v306, v44);
  unint64_t v359 = (void *)v159;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v307, v44);
LABEL_41:
  uint64_t v162 = *(void *)(v1 + 184);
  uint64_t v163 = *(void *)(v1 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v164 = v342;
  sub_1001F7518(v162, v163, (void (*)(uint64_t, uint64_t))sub_1001F831C, v342);
  swift_bridgeObjectRelease();
  uint64_t v165 = v164;
  swift_bridgeObjectRelease();
  if (v133((char *)v164, 1, v44) == 1)
  {
    sub_10001DAB4(v164, &qword_10163EE58);
  }
  else
  {
    int v166 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v167 = v315;
    v166(v315, v165, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v314, v167, v44);
    unint64_t v168 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v168 = sub_100A6FEB8(0, *(void *)(v168 + 16) + 1, 1, v168);
    }
    unint64_t v170 = *(void *)(v168 + 16);
    unint64_t v169 = *(void *)(v168 + 24);
    if (v170 >= v169 >> 1) {
      unint64_t v168 = sub_100A6FEB8(v169 > 1, v170 + 1, 1, v168);
    }
    *(void *)(v168 + 16) = v170 + 1;
    v166((char *)(v168+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v170), (uint64_t)v314, v44);
    unint64_t v359 = (void *)v168;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v315, v44);
  }
  uint64_t v171 = (int *)type metadata accessor for TapToRadarDraft();
  uint64_t v172 = v343;
  sub_1001F7078(v343);
  unsigned int v173 = v133((char *)v172, 1, v44);
  long long v357 = v133;
  if (v173 == 1)
  {
    sub_10001DAB4(v172, &qword_10163EE58);
  }
  else
  {
    uint64_t v174 = v172;
    uint64_t v175 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v176 = v317;
    v175(v317, v174, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v316, v176, v44);
    unint64_t v177 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v177 = sub_100A6FEB8(0, *(void *)(v177 + 16) + 1, 1, v177);
    }
    unint64_t v179 = *(void *)(v177 + 16);
    unint64_t v178 = *(void *)(v177 + 24);
    if (v179 >= v178 >> 1) {
      unint64_t v177 = sub_100A6FEB8(v178 > 1, v179 + 1, 1, v177);
    }
    *(void *)(v177 + 16) = v179 + 1;
    v175((char *)(v177+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v179), (uint64_t)v316, v44);
    unint64_t v359 = (void *)v177;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v317, v44);
    uint64_t v133 = v357;
  }
  long long v180 = (uint64_t *)(v1 + v171[12]);
  uint64_t v181 = *v180;
  uint64_t v182 = v180[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v183 = v344;
  sub_1001F7348(v181, v182, v344);
  swift_bridgeObjectRelease();
  uint64_t v184 = v183;
  swift_bridgeObjectRelease();
  if (v133((char *)v183, 1, v44) == 1)
  {
    sub_10001DAB4(v183, &qword_10163EE58);
  }
  else
  {
    uint64_t v185 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v186 = v319;
    v185(v319, v184, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v318, v186, v44);
    unint64_t v187 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v187 = sub_100A6FEB8(0, *(void *)(v187 + 16) + 1, 1, v187);
    }
    unint64_t v189 = *(void *)(v187 + 16);
    unint64_t v188 = *(void *)(v187 + 24);
    if (v189 >= v188 >> 1) {
      unint64_t v187 = sub_100A6FEB8(v188 > 1, v189 + 1, 1, v187);
    }
    *(void *)(v187 + 16) = v189 + 1;
    v185((char *)(v187+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v189), (uint64_t)v318, v44);
    unint64_t v359 = (void *)v187;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v319, v44);
    uint64_t v133 = v357;
  }
  uint64_t v190 = (uint64_t *)(v1 + v171[13]);
  uint64_t v191 = *v190;
  uint64_t v192 = v190[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v193 = v345;
  sub_1001F7348(v191, v192, v345);
  swift_bridgeObjectRelease();
  uint64_t v194 = v193;
  swift_bridgeObjectRelease();
  if (v133((char *)v193, 1, v44) == 1)
  {
    sub_10001DAB4(v193, &qword_10163EE58);
  }
  else
  {
    uint64_t v195 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v196 = v321;
    v195(v321, v194, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v320, v196, v44);
    unint64_t v197 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v197 = sub_100A6FEB8(0, *(void *)(v197 + 16) + 1, 1, v197);
    }
    unint64_t v199 = *(void *)(v197 + 16);
    unint64_t v198 = *(void *)(v197 + 24);
    if (v199 >= v198 >> 1) {
      unint64_t v197 = sub_100A6FEB8(v198 > 1, v199 + 1, 1, v197);
    }
    *(void *)(v197 + 16) = v199 + 1;
    v195((char *)(v197+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v199), (uint64_t)v320, v44);
    unint64_t v359 = (void *)v197;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v321, v44);
    uint64_t v133 = v357;
  }
  uint64_t v200 = (uint64_t *)(v1 + v171[14]);
  uint64_t v201 = *v200;
  uint64_t v202 = v200[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v203 = v356;
  sub_1001F7518(v201, v202, (void (*)(uint64_t, uint64_t))sub_1001F7ED8, v356);
  swift_bridgeObjectRelease();
  uint64_t v204 = v203;
  swift_bridgeObjectRelease();
  if (v133((char *)v203, 1, v44) == 1)
  {
    sub_10001DAB4(v203, &qword_10163EE58);
  }
  else
  {
    uint64_t v205 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v206 = v323;
    v205(v323, v204, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v322, v206, v44);
    unint64_t v207 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v207 = sub_100A6FEB8(0, *(void *)(v207 + 16) + 1, 1, v207);
    }
    unint64_t v209 = *(void *)(v207 + 16);
    unint64_t v208 = *(void *)(v207 + 24);
    if (v209 >= v208 >> 1) {
      unint64_t v207 = sub_100A6FEB8(v208 > 1, v209 + 1, 1, v207);
    }
    *(void *)(v207 + 16) = v209 + 1;
    v205((char *)(v207+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v209), (uint64_t)v322, v44);
    unint64_t v359 = (void *)v207;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v323, v44);
    uint64_t v133 = v357;
  }
  swift_bridgeObjectRetain();
  uint64_t v210 = (uint64_t)v346;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  uint64_t v356 = v45 + 56;
  v358((char *)v210, 0, 1, v44);
  uint64_t v211 = v210;
  swift_bridgeObjectRelease();
  if (v133((char *)v210, 1, v44) == 1)
  {
    sub_10001DAB4(v210, &qword_10163EE58);
  }
  else
  {
    int v212 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    unsigned int v213 = v325;
    v212(v325, v211, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v324, v213, v44);
    unint64_t v214 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v214 = sub_100A6FEB8(0, *(void *)(v214 + 16) + 1, 1, v214);
    }
    unint64_t v216 = *(void *)(v214 + 16);
    unint64_t v215 = *(void *)(v214 + 24);
    if (v216 >= v215 >> 1) {
      unint64_t v214 = sub_100A6FEB8(v215 > 1, v216 + 1, 1, v214);
    }
    *(void *)(v214 + 16) = v216 + 1;
    v212((char *)(v214+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v216), (uint64_t)v324, v44);
    unint64_t v359 = (void *)v214;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v325, v44);
    uint64_t v133 = v357;
  }
  uint64_t v217 = (uint64_t *)(v1 + v171[16]);
  uint64_t v218 = *v217;
  uint64_t v219 = v217[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v220 = v347;
  sub_1001F7518(v218, v219, (void (*)(uint64_t, uint64_t))sub_1001F7ED8, v347);
  swift_bridgeObjectRelease();
  uint64_t v221 = v220;
  swift_bridgeObjectRelease();
  if (v133((char *)v220, 1, v44) == 1)
  {
    sub_10001DAB4(v220, &qword_10163EE58);
  }
  else
  {
    uint64_t v222 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v223 = v327;
    v222(v327, v221, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v326, v223, v44);
    unint64_t v224 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v224 = sub_100A6FEB8(0, *(void *)(v224 + 16) + 1, 1, v224);
    }
    unint64_t v226 = *(void *)(v224 + 16);
    unint64_t v225 = *(void *)(v224 + 24);
    if (v226 >= v225 >> 1) {
      unint64_t v224 = sub_100A6FEB8(v225 > 1, v226 + 1, 1, v224);
    }
    *(void *)(v224 + 16) = v226 + 1;
    v222((char *)(v224+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v226), (uint64_t)v326, v44);
    unint64_t v359 = (void *)v224;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v327, v44);
    uint64_t v133 = v357;
  }
  uint64_t v227 = (uint64_t *)(v1 + v171[17]);
  uint64_t v228 = *v227;
  uint64_t v229 = v227[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v230 = v348;
  sub_1001F7518(v228, v229, (void (*)(uint64_t, uint64_t))sub_1001F7D88, v348);
  swift_bridgeObjectRelease();
  uint64_t v231 = v230;
  swift_bridgeObjectRelease();
  if (v133((char *)v230, 1, v44) == 1)
  {
    sub_10001DAB4(v230, &qword_10163EE58);
  }
  else
  {
    unint64_t v232 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    unint64_t v233 = v329;
    v232(v329, v231, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v328, v233, v44);
    unint64_t v234 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v234 = sub_100A6FEB8(0, *(void *)(v234 + 16) + 1, 1, v234);
    }
    unint64_t v236 = *(void *)(v234 + 16);
    unint64_t v235 = *(void *)(v234 + 24);
    if (v236 >= v235 >> 1) {
      unint64_t v234 = sub_100A6FEB8(v235 > 1, v236 + 1, 1, v234);
    }
    *(void *)(v234 + 16) = v236 + 1;
    v232((char *)(v234+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v236), (uint64_t)v328, v44);
    unint64_t v359 = (void *)v234;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v329, v44);
    uint64_t v133 = v357;
  }
  v237 = (uint64_t *)(v1 + v171[18]);
  uint64_t v238 = *v237;
  uint64_t v239 = v237[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v240 = v349;
  sub_1001F7518(v238, v239, (void (*)(uint64_t, uint64_t))sub_1001F7ED8, v349);
  swift_bridgeObjectRelease();
  uint64_t v241 = v240;
  swift_bridgeObjectRelease();
  if (v133((char *)v240, 1, v44) == 1)
  {
    sub_10001DAB4(v240, &qword_10163EE58);
  }
  else
  {
    uint64_t v242 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v243 = v331;
    v242(v331, v241, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v330, v243, v44);
    unint64_t v244 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v244 = sub_100A6FEB8(0, *(void *)(v244 + 16) + 1, 1, v244);
    }
    unint64_t v246 = *(void *)(v244 + 16);
    unint64_t v245 = *(void *)(v244 + 24);
    if (v246 >= v245 >> 1) {
      unint64_t v244 = sub_100A6FEB8(v245 > 1, v246 + 1, 1, v244);
    }
    *(void *)(v244 + 16) = v246 + 1;
    v242((char *)(v244+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v246), (uint64_t)v330, v44);
    unint64_t v359 = (void *)v244;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v331, v44);
    uint64_t v133 = v357;
  }
  uint64_t v247 = *(void *)(v1 + v171[19] + 16);
  swift_bridgeObjectRetain();
  sub_1001F6468(v247);
  if (v248)
  {
    uint64_t v249 = (uint64_t)v350;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v250 = 0;
  }
  else
  {
    uint64_t v250 = 1;
    uint64_t v249 = (uint64_t)v350;
  }
  v358((char *)v249, v250, 1, v44);
  swift_bridgeObjectRelease();
  unsigned int v251 = v133((char *)v249, 1, v44);
  uint64_t v252 = v249;
  if (v251 == 1)
  {
    sub_10001DAB4(v249, &qword_10163EE58);
  }
  else
  {
    uint64_t v253 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v254 = v333;
    v253(v333, v252, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v332, v254, v44);
    unint64_t v255 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v255 = sub_100A6FEB8(0, *(void *)(v255 + 16) + 1, 1, v255);
    }
    unint64_t v257 = *(void *)(v255 + 16);
    unint64_t v256 = *(void *)(v255 + 24);
    if (v257 >= v256 >> 1) {
      unint64_t v255 = sub_100A6FEB8(v256 > 1, v257 + 1, 1, v255);
    }
    *(void *)(v255 + 16) = v257 + 1;
    v253((char *)(v255+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v257), (uint64_t)v332, v44);
    unint64_t v359 = (void *)v255;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v333, v44);
    uint64_t v133 = v357;
  }
  swift_bridgeObjectRetain();
  uint64_t v258 = (uint64_t)v351;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  v358((char *)v258, 0, 1, v44);
  uint64_t v259 = v258;
  swift_bridgeObjectRelease();
  if (v133((char *)v258, 1, v44) == 1)
  {
    sub_10001DAB4(v258, &qword_10163EE58);
  }
  else
  {
    os_log_type_t v260 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v261 = v335;
    v260(v335, v259, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v334, v261, v44);
    unint64_t v262 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v262 = sub_100A6FEB8(0, *(void *)(v262 + 16) + 1, 1, v262);
    }
    unint64_t v264 = *(void *)(v262 + 16);
    unint64_t v263 = *(void *)(v262 + 24);
    if (v264 >= v263 >> 1) {
      unint64_t v262 = sub_100A6FEB8(v263 > 1, v264 + 1, 1, v262);
    }
    *(void *)(v262 + 16) = v264 + 1;
    v260((char *)(v262+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v264), (uint64_t)v334, v44);
    unint64_t v359 = (void *)v262;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v335, v44);
    uint64_t v133 = v357;
  }
  char v265 = *(unsigned char *)(v1 + v171[21] + 16);
  swift_bridgeObjectRetain();
  sub_1001F696C(v265);
  if (v266)
  {
    uint64_t v267 = (uint64_t)v352;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v268 = 0;
  }
  else
  {
    uint64_t v268 = 1;
    uint64_t v267 = (uint64_t)v352;
  }
  v358((char *)v267, v268, 1, v44);
  swift_bridgeObjectRelease();
  unsigned int v269 = v133((char *)v267, 1, v44);
  uint64_t v270 = v267;
  if (v269 == 1)
  {
    sub_10001DAB4(v267, &qword_10163EE58);
  }
  else
  {
    int v271 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    int v272 = v337;
    v271(v337, v270, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v336, v272, v44);
    unint64_t v273 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v273 = sub_100A6FEB8(0, *(void *)(v273 + 16) + 1, 1, v273);
    }
    unint64_t v275 = *(void *)(v273 + 16);
    unint64_t v274 = *(void *)(v273 + 24);
    if (v275 >= v274 >> 1) {
      unint64_t v273 = sub_100A6FEB8(v274 > 1, v275 + 1, 1, v273);
    }
    *(void *)(v273 + 16) = v275 + 1;
    v271((char *)(v273+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v275), (uint64_t)v336, v44);
    unint64_t v359 = (void *)v273;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v337, v44);
    uint64_t v133 = v357;
  }
  v276 = (uint64_t *)(v1 + v171[22]);
  uint64_t v277 = *v276;
  uint64_t v278 = v276[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v279 = v353;
  sub_1001F7518(v277, v278, (void (*)(uint64_t, uint64_t))sub_1001F7ED8, v353);
  swift_bridgeObjectRelease();
  uint64_t v280 = v279;
  swift_bridgeObjectRelease();
  if (v133((char *)v279, 1, v44) == 1)
  {
    sub_10001DAB4(v279, &qword_10163EE58);
  }
  else
  {
    int v281 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    int v282 = v339;
    v281(v339, v280, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v338, v282, v44);
    unint64_t v283 = (unint64_t)v359;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v283 = sub_100A6FEB8(0, *(void *)(v283 + 16) + 1, 1, v283);
    }
    unint64_t v285 = *(void *)(v283 + 16);
    unint64_t v284 = *(void *)(v283 + 24);
    if (v285 >= v284 >> 1) {
      unint64_t v283 = sub_100A6FEB8(v284 > 1, v285 + 1, 1, v283);
    }
    *(void *)(v283 + 16) = v285 + 1;
    v281((char *)(v283+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v285), (uint64_t)v338, v44);
    unint64_t v359 = (void *)v283;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v339, v44);
    uint64_t v133 = v357;
  }
  if (!*(void *)(v1 + v171[23] + 24))
  {
    uint64_t v286 = (uint64_t)v354;
    v358(v354, 1, 1, v44);
    goto LABEL_146;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v286 = (uint64_t)v354;
  URLQueryItem.init(name:value:)();
  v358((char *)v286, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v133((char *)v286, 1, v44) == 1)
  {
LABEL_146:
    sub_10001DAB4(v286, &qword_10163EE58);
    goto LABEL_147;
  }
  uint64_t v287 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  uint64_t v288 = v309;
  v287(v309, v286, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v308, v288, v44);
  unint64_t v289 = (unint64_t)v359;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v289 = sub_100A6FEB8(0, *(void *)(v289 + 16) + 1, 1, v289);
  }
  unint64_t v291 = *(void *)(v289 + 16);
  unint64_t v290 = *(void *)(v289 + 24);
  if (v291 >= v290 >> 1) {
    unint64_t v289 = sub_100A6FEB8(v290 > 1, v291 + 1, 1, v289);
  }
  *(void *)(v289 + 16) = v291 + 1;
  v287((char *)(v289+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v291), (uint64_t)v308, v44);
  unint64_t v359 = (void *)v289;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v309, v44);
  uint64_t v133 = v357;
LABEL_147:
  if (!*(void *)(v1 + v171[24] + 24))
  {
    uint64_t v292 = (uint64_t)v355;
    v358(v355, 1, 1, v44);
    goto LABEL_155;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v292 = (uint64_t)v355;
  URLQueryItem.init(name:value:)();
  v358((char *)v292, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v133((char *)v292, 1, v44) == 1)
  {
LABEL_155:
    sub_10001DAB4(v292, &qword_10163EE58);
    return v359;
  }
  uint64_t v293 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  uint64_t v294 = v303;
  v293(v303, v292, v44);
  uint64_t v295 = v302;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v302, v294, v44);
  unint64_t v296 = (unint64_t)v359;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v296 = sub_100A6FEB8(0, *(void *)(v296 + 16) + 1, 1, v296);
  }
  unint64_t v298 = *(void *)(v296 + 16);
  unint64_t v297 = *(void *)(v296 + 24);
  if (v298 >= v297 >> 1) {
    unint64_t v296 = sub_100A6FEB8(v297 > 1, v298 + 1, 1, v296);
  }
  *(void *)(v296 + 16) = v298 + 1;
  v293((char *)(v296+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v298), (uint64_t)v295, v44);
  unint64_t v359 = (void *)v296;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v294, v44);
  return v359;
}

uint64_t sub_1001F51FC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for URL();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001F52BC, 0, 0);
}

uint64_t sub_1001F52BC()
{
  sub_1001F242C(v0[5]);
  id v1 = [self defaultWorkspace];
  if (v1)
  {
    uint64_t v3 = v1;
    URL._bridgeToObjectiveC()(v2);
    uint64_t v5 = v4;
    sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 openSensitiveURL:v5 withOptions:isa];
  }
  (*(void (**)(void, void))(v0[4] + 8))(v0[5], v0[3]);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

__n128 sub_1001F540C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, long long a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char a29,uint64_t a30,long long a31,uint64_t a32,uint64_t a33,__n128 a34,unint64_t a35,unint64_t a36)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  sub_10001D608(a5, a9 + 32, &qword_10163EE68);
  *(void *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = a7;
  *(unsigned char *)(a9 + 88) = a8;
  *(void *)(a9 + 96) = a10;
  *(void *)(a9 + 104) = a11;
  *(unsigned char *)(a9 + 112) = a12;
  *(_OWORD *)(a9 + 120) = a13;
  *(_OWORD *)(a9 + 136) = a14;
  *(_OWORD *)(a9 + 152) = a15;
  *(void *)(a9 + 168) = a16;
  *(void *)(a9 + 176) = a17;
  *(void *)(a9 + 184) = 0x7364726F7779654BLL;
  *(void *)(a9 + 192) = 0xE800000000000000;
  *(void *)(a9 + 200) = a18;
  uint64_t v39 = (int *)type metadata accessor for TapToRadarDraft();
  sub_10001D608(a19, a9 + v39[11], &qword_10163EE60);
  uint64_t v40 = (void *)(a9 + v39[12]);
  void *v40 = 0x656D686361747441;
  v40[1] = 0xEB0000000073746ELL;
  v40[2] = a20;
  unint64_t v41 = (void *)(a9 + v39[13]);
  *unint64_t v41 = 0xD000000000000011;
  v41[1] = 0x80000001013F6600;
  v41[2] = a21;
  uint64_t v42 = (void *)(a9 + v39[14]);
  *uint64_t v42 = 0xD000000000000014;
  v42[1] = 0x80000001013F6620;
  v42[2] = a22;
  uint64_t v43 = (char *)(a9 + v39[15]);
  strcpy(v43, "DeleteOnAttach");
  v43[15] = -18;
  v43[16] = a23;
  uint64_t v44 = (void *)(a9 + v39[16]);
  *uint64_t v44 = 0x4449656369766544;
  v44[1] = 0xE900000000000073;
  v44[2] = a24;
  uint64_t v45 = a9 + v39[17];
  strcpy((char *)v45, "DeviceClasses");
  *(_WORD *)(v45 + 14) = -4864;
  *(void *)(v45 + 16) = a25;
  uint64_t v46 = a9 + v39[18];
  strcpy((char *)v46, "DeviceModels");
  *(unsigned char *)(v46 + 13) = 0;
  *(_WORD *)(v46 + 14) = -5120;
  *(void *)(v46 + 16) = a26;
  uint64_t v47 = (void *)(a9 + v39[19]);
  void *v47 = 0xD000000000000016;
  v47[1] = 0x800000010134F340;
  v47[2] = a27;
  uint64_t v48 = a9 + v39[20];
  *(void *)uint64_t v48 = 0xD00000000000001ALL;
  *(void *)(v48 + 8) = 0x80000001013F6640;
  *(unsigned char *)(v48 + 16) = a28;
  uint64_t v49 = a9 + v39[21];
  *(void *)uint64_t v49 = 0x676169446F747541;
  *(void *)(v49 + 8) = 0xEF73636974736F6ELL;
  *(unsigned char *)(v49 + 16) = a29;
  uint64_t v50 = (void *)(a9 + v39[22]);
  *uint64_t v50 = 0xD00000000000001BLL;
  v50[1] = 0x80000001013F6660;
  v50[2] = a30;
  uint64_t v51 = a9 + v39[23];
  *(_OWORD *)uint64_t v51 = a31;
  *(void *)(v51 + 16) = a32;
  *(void *)(v51 + 24) = a33;
  uint64_t v52 = (__n128 *)(a9 + v39[24]);
  __n128 result = a34;
  *uint64_t v52 = a34;
  v52[1].n128_u64[0] = a35;
  v52[1].n128_u64[1] = a36;
  return result;
}

uint64_t sub_1001F57CC()
{
  sub_10000588C((uint64_t *)&unk_101657840);
  type metadata accessor for URLQueryItem();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101347500;
  dispatch thunk of CustomStringConvertible.description.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  return v0;
}

Swift::Int sub_1001F5940()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1001F59C0()
{
  Hasher._combine(_:)(*v0);
  String.hash(into:)();

  return String.hash(into:)();
}

Swift::Int sub_1001F5A30()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1001F5AAC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1001F7CE8(v5, v7) & 1;
}

unint64_t sub_1001F5AF8(char a1)
{
  unint64_t result = 0x7974697275636553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x7265776F50;
      break;
    case 3:
      unint64_t result = 0x616D726F66726550;
      break;
    case 4:
      unint64_t result = 0x69626173552F4955;
      break;
    case 5:
      unint64_t result = 0x2073756F69726553;
      break;
    case 6:
      unint64_t result = 0x754220726568744FLL;
      break;
    case 7:
      unint64_t result = 0x2065727574616546;
      break;
    case 8:
      unint64_t result = 0x6D65636E61686E45;
      break;
    case 9:
      unint64_t result = 1802723668;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001F5C5C(char a1)
{
  unint64_t result = 0x7974697275636553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x7265776F50;
      break;
    case 3:
      unint64_t result = 0x616D726F66726550;
      break;
    case 4:
      unint64_t result = 0x69626173552F4955;
      break;
    case 5:
      unint64_t result = 0x2073756F69726553;
      break;
    case 6:
      unint64_t result = 0x754220726568744FLL;
      break;
    case 7:
      unint64_t result = 0x2065727574616546;
      break;
    case 8:
      unint64_t result = 0x6D65636E61686E45;
      break;
    case 9:
      unint64_t result = 1802723668;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F5DC0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1001F5C5C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1001F5C5C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001F5E4C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001F5C5C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001F5EB0()
{
  sub_1001F5C5C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F5F04()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001F5C5C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001F5F64@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FAEAC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001F5F94@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001F5C5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001F5FC0()
{
  return sub_1001F5AF8(*v0);
}

uint64_t sub_1001F5FC8(unsigned __int8 *a1, char *a2)
{
  return sub_10071E07C(*a1, *a2);
}

Swift::Int sub_1001F5FD4()
{
  return sub_10072C1D4();
}

uint64_t sub_1001F5FDC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F60DC()
{
  return sub_100721748();
}

unint64_t sub_1001F60E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FAEF8(*a1);
  *a2 = result;
  return result;
}

void sub_1001F6114(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x737961776C41;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000073;
      uint64_t v3 = 0x656D6974656D6F53;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x796C65726152;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      *(void *)a1 = 0x656C62616E55;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 4:
      strcpy((char *)a1, "I Didn't Try");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      strcpy((char *)a1, "Not Applicable");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1001F61F4()
{
  return *(void *)&aAlways_1[8 * *v0];
}

uint64_t sub_1001F6218(unsigned __int8 *a1, char *a2)
{
  return sub_10071E46C(*a1, *a2);
}

Swift::Int sub_1001F6224()
{
  return sub_10072195C();
}

uint64_t sub_1001F6230()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F6328()
{
  return sub_10072195C();
}

unint64_t sub_1001F6330@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1015A09C8;
  unint64_t result = sub_1001FB558(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1001F6368(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E6F685069;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684099177;
      goto LABEL_3;
    case 2:
      *a1 = 0x6863746157;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x5654656C707041;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0x646F50656D6F48;
      a1[1] = 0xE700000000000000;
      break;
    case 5:
      *a1 = 6512973;
      a1[1] = 0xE300000000000000;
      break;
    case 6:
      *a1 = 0x6E6F69736956;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1001F6444()
{
  return *(void *)&aIphone_4[8 * *v0];
}

uint64_t sub_1001F6468(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (a1)
    {
      unint64_t v2 = sub_100A6E25C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v4 = v2[2];
      unint64_t v3 = v2[3];
      if (v4 >= v3 >> 1) {
        unint64_t v2 = sub_100A6E25C((void *)(v3 > 1), v4 + 1, 1, v2);
      }
      v2[2] = v4 + 1;
      uint64_t v5 = &v2[2 * v4];
      v5[4] = 0x79616C50726941;
      v5[5] = 0xE700000000000000;
      if ((v1 & 2) == 0)
      {
LABEL_14:
        if ((v1 & 4) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
          }
          unint64_t v10 = v2[2];
          unint64_t v9 = v2[3];
          if (v10 >= v9 >> 1) {
            unint64_t v2 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v2);
          }
          v2[2] = v10 + 1;
          uint64_t v11 = (char *)&v2[2 * v10];
          strcpy(v11 + 32, "MediaSystems");
          v11[45] = 0;
          *((_WORD *)v11 + 23) = -5120;
        }
        if ((v1 & 8) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
          }
          unint64_t v13 = v2[2];
          unint64_t v12 = v2[3];
          if (v13 >= v12 >> 1) {
            unint64_t v2 = sub_100A6E25C((void *)(v12 > 1), v13 + 1, 1, v2);
          }
          v2[2] = v13 + 1;
          uint64_t v14 = &v2[2 * v13];
          v14[4] = 0x616C506572616853;
          v14[5] = 0xE900000000000079;
          if ((v1 & 0x10) == 0)
          {
LABEL_22:
            if ((v1 & 0x20) == 0) {
              goto LABEL_23;
            }
            goto LABEL_36;
          }
        }
        else if ((v1 & 0x10) == 0)
        {
          goto LABEL_22;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
        }
        unint64_t v16 = v2[2];
        unint64_t v15 = v2[3];
        if (v16 >= v15 >> 1) {
          unint64_t v2 = sub_100A6E25C((void *)(v15 > 1), v16 + 1, 1, v2);
        }
        v2[2] = v16 + 1;
        uint64_t v17 = &v2[2 * v16];
        v17[4] = 0x79627261654ELL;
        v17[5] = 0xE600000000000000;
        if ((v1 & 0x20) == 0)
        {
LABEL_23:
          if ((v1 & 0x40) == 0) {
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_36:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
        }
        unint64_t v19 = v2[2];
        unint64_t v18 = v2[3];
        if (v19 >= v18 >> 1) {
          unint64_t v2 = sub_100A6E25C((void *)(v18 > 1), v19 + 1, 1, v2);
        }
        v2[2] = v19 + 1;
        uint64_t v20 = &v2[2 * v19];
        v20[4] = 0x657463656E6E6F43;
        v20[5] = 0xE900000000000064;
        if ((v1 & 0x40) == 0)
        {
LABEL_24:
          if ((v1 & 0x80) == 0)
          {
LABEL_51:
            sub_10000588C(&qword_101654A30);
            sub_100090B54();
            uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
            swift_bridgeObjectRelease();
            return v1;
          }
LABEL_46:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
          }
          unint64_t v25 = v2[2];
          unint64_t v24 = v2[3];
          if (v25 >= v24 >> 1) {
            unint64_t v2 = sub_100A6E25C((void *)(v24 > 1), v25 + 1, 1, v2);
          }
          v2[2] = v25 + 1;
          uint64_t v26 = &v2[2 * v25];
          v26[4] = 0xD000000000000016;
          v26[5] = 0x80000001013F65C0;
          goto LABEL_51;
        }
LABEL_41:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
        }
        unint64_t v22 = v2[2];
        unint64_t v21 = v2[3];
        if (v22 >= v21 >> 1) {
          unint64_t v2 = sub_100A6E25C((void *)(v21 > 1), v22 + 1, 1, v2);
        }
        v2[2] = v22 + 1;
        uint64_t v23 = &v2[2 * v22];
        v23[4] = 0x61656854656D6F48;
        v23[5] = 0xEB00000000726574;
        if ((v1 & 0x80) == 0) {
          goto LABEL_51;
        }
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v2 = _swiftEmptyArrayStorage;
      if ((a1 & 2) == 0) {
        goto LABEL_14;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      unint64_t v2 = sub_100A6E25C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    char v8 = &v2[2 * v7];
    v8[4] = 0x4874694B656D6F48;
    v8[5] = 0xEB00000000656D6FLL;
    goto LABEL_14;
  }
  return v1;
}

uint64_t sub_1001F6924()
{
  return sub_1001F6468(*v0);
}

uint64_t sub_1001F692C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000B40C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_1001F696C(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_4;
      }
      unint64_t result = 48;
      switch(a1)
      {
        case 2:
          unint64_t result = 12589;
          break;
        case 3:
        case 4:
        case 5:
          unint64_t result = 0xD000000000000010;
          break;
        case 6:
          unint64_t result = 0xD00000000000001CLL;
          break;
        default:
          return result;
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      unint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_1001F6B1C(char a1)
{
  unint64_t result = 7105633;
  switch(a1)
  {
    case 1:
      unint64_t result = 48;
      break;
    case 2:
      unint64_t result = 12589;
      break;
    case 3:
    case 4:
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F6BD8(unsigned __int8 *a1, char *a2)
{
  return sub_10071E290(*a1, *a2);
}

Swift::Int sub_1001F6BE4()
{
  return sub_10072185C();
}

uint64_t sub_1001F6BF0()
{
  return sub_100720444();
}

Swift::Int sub_1001F6BF8()
{
  return sub_10072185C();
}

unint64_t sub_1001F6C00@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1015A0A90;
  unint64_t result = sub_1001FB558(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1001F6C38@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001F6B1C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001F6C64()
{
  return sub_1001F696C(*v0);
}

unint64_t sub_1001F6C6C(char a1)
{
  if (!a1) {
    return 0xD000000000000028;
  }
  if (a1 == 1) {
    return 0xD00000000000001DLL;
  }
  return 0xD00000000000002DLL;
}

unint64_t sub_1001F6CC8()
{
  return sub_1001F6C6C(*v0);
}

uint64_t sub_1001F6CDC@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 10:
      uint64_t v3 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      break;
    default:
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
      uint64_t v5 = v8;
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      break;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_1001F6EF4@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 6:
      uint64_t v9 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
      uint64_t v5 = v9;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      break;
    default:
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      break;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_1001F7078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163EE60);
  sub_10001E2BC(v2 + *(int *)(v11 + 36), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
    uint64_t v12 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    id v14 = [objc_allocWithZone((Class)NSDateFormatter) init];
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 setDateFormat:v15];

    [v14 setDoesRelativeDateFormatting:0];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v17 = [v14 stringFromDate:isa];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
  }
}

uint64_t sub_1001F7348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    __chkstk_darwin(a1);
    type metadata accessor for URL();
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    sub_1001F8008(a2, KeyPath);
    swift_release_n();
    sub_10000588C(&qword_101654A30);
    sub_100090B54();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a3, 0, 1, v6);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URLQueryItem();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a3, 1, 1, v8);
  }
}

uint64_t sub_1001F7518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t, uint64_t)@<X5>, uint64_t a4@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    __chkstk_darwin(a1);
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    a3(a2, KeyPath);
    swift_release_n();
    sub_10000588C(&qword_101654A30);
    sub_100090B54();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 0, 1, v8);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLQueryItem();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a4, 1, 1, v10);
  }
}

uint64_t sub_1001F76DC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1001F770C()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1001F7748()
{
  if (*v0) {
    return 49;
  }
  else {
    return 48;
  }
}

uint64_t sub_1001F7760()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setDateFormat:v1];

  [v0 setDoesRelativeDateFormatting:0];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v3 = [v0 stringFromDate:isa];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t sub_1001F783C()
{
  return URL.path(percentEncoded:)(0)._countAndFlagsBits;
}

uint64_t sub_1001F7844()
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v0 = Collection.isEmpty.getter();
  uint64_t v1 = 0;
  if ((v0 & 1) == 0)
  {
    __chkstk_darwin(v0);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    swift_getWitnessTable();
    Sequence.compactMap<A>(_:)();
    swift_release();
    sub_10000588C(&qword_101654A30);
    sub_100090B54();
    uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1001F79D8()
{
  return sub_1001F7844();
}

uint64_t sub_1001F79EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13;
}

uint64_t sub_1001F7BE0(uint64_t a1, uint64_t a2)
{
  return sub_1001F79EC(a1, *(void *)(a2 - 8));
}

unint64_t sub_1001F7BE8()
{
  unint64_t result = qword_10163EE50;
  if (!qword_10163EE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EE50);
  }
  return result;
}

uint64_t type metadata accessor for TapToRadarDraft()
{
  uint64_t result = qword_10163EEC8;
  if (!qword_10163EEC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001F7C88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 8))(*(void *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1001F7CD0()
{
  return 16;
}

__n128 sub_1001F7CDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001F7CE8(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (a1[3] == a2[3] && a1[4] == a2[4])
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

void *sub_1001F7D88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  id v3 = _swiftEmptyArrayStorage;
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100A6E25C(0, v3[2] + 1, 1, v3);
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1) {
        id v3 = sub_100A6E25C((void *)(v5 > 1), v6 + 1, 1, v3);
      }
      v3[2] = v6 + 1;
      BOOL v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1001F7EAC()
{
  return swift_getAtKeyPath();
}

void *sub_1001F7ED8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 40;
  id v3 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100A6E25C(0, v3[2] + 1, 1, v3);
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1) {
        id v3 = sub_100A6E25C((void *)(v5 > 1), v6 + 1, 1, v3);
      }
      v3[2] = v6 + 1;
      BOOL v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    v2 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_1001F8008(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    v24[1] = a1;
    v24[2] = v2;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v30 = v12;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v27 = *(void *)(v11 + 56);
    uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    unint64_t v25 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    uint64_t v35 = _swiftEmptyArrayStorage;
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v24[0] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    void v24[3] = v11;
    while (1)
    {
      v30(v9, v13, v4);
      unint64_t v16 = *v29;
      (*v29)(v9, 0, 1, v4);
      if ((*v28)(v9, 1, v4) == 1) {
        break;
      }
      id v17 = v31;
      (*v26)(v31, v9, v4);
      swift_getAtKeyPath();
      uint64_t v18 = v33;
      uint64_t v19 = v34;
      (*v25)(v17, v4);
      if (v19)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v35 = sub_100A6E25C(0, v35[2] + 1, 1, v35);
        }
        unint64_t v21 = v35[2];
        unint64_t v20 = v35[3];
        if (v21 >= v20 >> 1) {
          uint64_t v35 = sub_100A6E25C((void *)(v20 > 1), v21 + 1, 1, v35);
        }
        id v14 = v35;
        void v35[2] = v21 + 1;
        uint64_t v15 = &v14[2 * v21];
        void v15[4] = v18;
        v15[5] = v19;
      }
      v13 += v27;
      if (!--v10)
      {
        v16(v9, 1, 1, v4);
        break;
      }
    }
  }
  else
  {
    unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
    uint64_t v35 = _swiftEmptyArrayStorage;
    v22(v9, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v35;
}

void *sub_1001F831C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  id v3 = _swiftEmptyArrayStorage;
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100A6E25C(0, v3[2] + 1, 1, v3);
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1) {
        id v3 = sub_100A6E25C((void *)(v5 > 1), v6 + 1, 1, v3);
      }
      v3[2] = v6 + 1;
      uint64_t v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t destroy for Role()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Role(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Role(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithCopy for XPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Role(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Role(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Role(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Component()
{
  return &type metadata for TapToRadarDraft.Component;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.DeviceClass()
{
  return &type metadata for TapToRadarDraft.DeviceClass;
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.TapToRadarError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F8724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.TapToRadarError()
{
  return &type metadata for TapToRadarDraft.TapToRadarError;
}

uint64_t sub_1001F875C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      uint64_t v10 = a2[7];
      uint64_t v11 = a2[8];
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      *(void *)(a1 + 64) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v13;
      *(void *)(a1 + 64) = a2[8];
    }
    uint64_t v14 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v14;
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v15 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v15;
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    uint64_t v16 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v16;
    uint64_t v17 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v17;
    uint64_t v18 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v18;
    uint64_t v19 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v19;
    uint64_t v20 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v20;
    *(void *)(a1 + 200) = a2[25];
    uint64_t v21 = a3[11];
    unint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *unint64_t v22 = *(uint64_t *)((char *)a2 + v21);
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = *(int *)(sub_10000588C(&qword_10163EE60) + 36);
    uint64_t v26 = (char *)v22 + v25;
    uint64_t v27 = (const void *)(v23 + v25);
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v31 = a3[12];
    uint64_t v32 = a3[13];
    uint64_t v33 = (void *)(a1 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    v33[2] = v34[2];
    uint64_t v36 = (void *)(a1 + v32);
    uint64_t v37 = (uint64_t *)((char *)a2 + v32);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    v36[2] = v37[2];
    uint64_t v39 = a3[14];
    uint64_t v40 = a3[15];
    unint64_t v41 = (void *)(a1 + v39);
    uint64_t v42 = (uint64_t *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    *unint64_t v41 = *v42;
    v41[1] = v43;
    v41[2] = v42[2];
    uint64_t v44 = a1 + v40;
    uint64_t v45 = (uint64_t)a2 + v40;
    uint64_t v46 = *(void *)(v45 + 8);
    *(void *)uint64_t v44 = *(void *)v45;
    *(void *)(v44 + 8) = v46;
    *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
    uint64_t v47 = a3[16];
    uint64_t v48 = a3[17];
    uint64_t v49 = (void *)(a1 + v47);
    uint64_t v50 = (uint64_t *)((char *)a2 + v47);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    v49[2] = v50[2];
    uint64_t v52 = (void *)(a1 + v48);
    uint64_t v53 = (uint64_t *)((char *)a2 + v48);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    void v52[2] = v53[2];
    uint64_t v55 = a3[18];
    uint64_t v56 = a3[19];
    uint64_t v57 = (void *)(a1 + v55);
    uint64_t v58 = (uint64_t *)((char *)a2 + v55);
    uint64_t v59 = v58[1];
    void *v57 = *v58;
    v57[1] = v59;
    v57[2] = v58[2];
    uint64_t v60 = (void *)(a1 + v56);
    uint64_t v61 = (uint64_t *)((char *)a2 + v56);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    void v60[2] = v61[2];
    uint64_t v63 = a3[20];
    uint64_t v64 = a3[21];
    uint64_t v65 = a1 + v63;
    uint64_t v66 = (uint64_t)a2 + v63;
    uint64_t v67 = *(void *)(v66 + 8);
    *(void *)uint64_t v65 = *(void *)v66;
    *(void *)(v65 + 8) = v67;
    *(unsigned char *)(v65 + 16) = *(unsigned char *)(v66 + 16);
    uint64_t v68 = a1 + v64;
    uint64_t v69 = (uint64_t)a2 + v64;
    uint64_t v70 = *(void *)(v69 + 8);
    *(void *)uint64_t v68 = *(void *)v69;
    *(void *)(v68 + 8) = v70;
    *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
    uint64_t v71 = a3[22];
    uint64_t v72 = a3[23];
    uint64_t v73 = (void *)(a1 + v71);
    uint64_t v74 = (uint64_t *)((char *)a2 + v71);
    uint64_t v75 = v74[1];
    void *v73 = *v74;
    v73[1] = v75;
    uint64_t v73[2] = v74[2];
    uint64_t v76 = (void *)(a1 + v72);
    uint64_t v77 = (uint64_t *)((char *)a2 + v72);
    uint64_t v78 = v77[1];
    *uint64_t v76 = *v77;
    v76[1] = v78;
    uint64_t v79 = v77[3];
    v76[2] = v77[2];
    v76[3] = v79;
    uint64_t v80 = a3[24];
    uint64_t v81 = (void *)(a1 + v80);
    uint64_t v82 = (uint64_t *)((char *)a2 + v80);
    uint64_t v83 = v82[1];
    *uint64_t v81 = *v82;
    v81[1] = v83;
    uint64_t v84 = v82[3];
    v81[2] = v82[2];
    v81[3] = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001F8C24(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F8E78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 56);
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
  }
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v13;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v14;
  uint64_t v15 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  uint64_t v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  uint64_t v17 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v17;
  uint64_t v18 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v84 = a3;
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a2 + v19 + 8);
  *uint64_t v20 = *(void *)(a2 + v19);
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v24 = (char *)v20 + v23;
  uint64_t v25 = (const void *)(v21 + v23);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v84[12];
  uint64_t v30 = v84[13];
  uint64_t v31 = (void *)(a1 + v29);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  void v31[2] = v32[2];
  uint64_t v34 = (void *)(a1 + v30);
  uint64_t v35 = (void *)(a2 + v30);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  v34[2] = v35[2];
  uint64_t v37 = v84[14];
  uint64_t v38 = v84[15];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  v39[2] = v40[2];
  uint64_t v42 = a1 + v38;
  uint64_t v43 = a2 + v38;
  uint64_t v44 = *(void *)(v43 + 8);
  *(void *)uint64_t v42 = *(void *)v43;
  *(void *)(v42 + 8) = v44;
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  uint64_t v45 = v84[16];
  uint64_t v46 = v84[17];
  uint64_t v47 = (void *)(a1 + v45);
  uint64_t v48 = (void *)(a2 + v45);
  uint64_t v49 = v48[1];
  void *v47 = *v48;
  v47[1] = v49;
  v47[2] = v48[2];
  uint64_t v50 = (void *)(a1 + v46);
  uint64_t v51 = (void *)(a2 + v46);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  v50[2] = v51[2];
  uint64_t v53 = v84[18];
  uint64_t v54 = v84[19];
  uint64_t v55 = (void *)(a1 + v53);
  uint64_t v56 = (void *)(a2 + v53);
  uint64_t v57 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v57;
  v55[2] = v56[2];
  uint64_t v58 = (void *)(a1 + v54);
  uint64_t v59 = (void *)(a2 + v54);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  v58[2] = v59[2];
  uint64_t v61 = v84[20];
  uint64_t v62 = v84[21];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  uint64_t v65 = *(void *)(v64 + 8);
  *(void *)uint64_t v63 = *(void *)v64;
  *(void *)(v63 + 8) = v65;
  *(unsigned char *)(v63 + 16) = *(unsigned char *)(v64 + 16);
  uint64_t v66 = a1 + v62;
  uint64_t v67 = a2 + v62;
  uint64_t v68 = *(void *)(v67 + 8);
  *(void *)uint64_t v66 = *(void *)v67;
  *(void *)(v66 + 8) = v68;
  *(unsigned char *)(v66 + 16) = *(unsigned char *)(v67 + 16);
  uint64_t v69 = v84[22];
  uint64_t v70 = v84[23];
  uint64_t v71 = (void *)(a1 + v69);
  uint64_t v72 = (void *)(a2 + v69);
  uint64_t v73 = v72[1];
  *uint64_t v71 = *v72;
  v71[1] = v73;
  v71[2] = v72[2];
  uint64_t v74 = (void *)(a1 + v70);
  uint64_t v75 = (void *)(a2 + v70);
  uint64_t v76 = v75[1];
  void *v74 = *v75;
  v74[1] = v76;
  uint64_t v77 = v75[3];
  v74[2] = v75[2];
  v74[3] = v77;
  uint64_t v78 = v84[24];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (void *)(a2 + v78);
  uint64_t v81 = v80[1];
  void *v79 = *v80;
  v79[1] = v81;
  uint64_t v82 = v80[3];
  v79[2] = v80[2];
  uint64_t v79[3] = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001F92F8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001F9A04(a1 + 32);
      uint64_t v9 = *(void *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 48);
      _OWORD *v6 = *v7;
      *(_OWORD *)(a1 + 48) = v10;
      *(void *)(a1 + 64) = v9;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v7;
    long long v12 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    _OWORD *v6 = v11;
    *(_OWORD *)(a1 + 48) = v12;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  *uint64_t v14 = *(void *)(a2 + v13);
  v14[1] = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v17 = (char *)v14 + v16;
  uint64_t v18 = (char *)(v15 + v16);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_14:
  uint64_t v25 = a3[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  *uint64_t v26 = *(void *)(a2 + v25);
  v26[1] = *(void *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26[2] = *(void *)(v27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[13];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = a2 + v28;
  *uint64_t v29 = *(void *)(a2 + v28);
  v29[1] = *(void *)(a2 + v28 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29[2] = *(void *)(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[14];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = a2 + v31;
  *uint64_t v32 = *(void *)(a2 + v31);
  v32[1] = *(void *)(a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v32[2] = *(void *)(v33 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)uint64_t v35 = *(void *)(a2 + v34);
  *(void *)(v35 + 8) = *(void *)(a2 + v34 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  uint64_t v37 = a3[16];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = a2 + v37;
  *uint64_t v38 = *(void *)(a2 + v37);
  v38[1] = *(void *)(a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[2] = *(void *)(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[17];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = a2 + v40;
  *uint64_t v41 = *(void *)(a2 + v40);
  v41[1] = *(void *)(a2 + v40 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[2] = *(void *)(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[18];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = a2 + v43;
  *uint64_t v44 = *(void *)(a2 + v43);
  v44[1] = *(void *)(a2 + v43 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[2] = *(void *)(v45 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[19];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = a2 + v46;
  void *v47 = *(void *)(a2 + v46);
  v47[1] = *(void *)(a2 + v46 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47[2] = *(void *)(v48 + 16);
  uint64_t v49 = a3[20];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  *(void *)uint64_t v50 = *(void *)(a2 + v49);
  *(void *)(v50 + 8) = *(void *)(a2 + v49 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v50 + 16) = *(unsigned char *)(v51 + 16);
  uint64_t v52 = a3[21];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  *(void *)uint64_t v53 = *(void *)(a2 + v52);
  *(void *)(v53 + 8) = *(void *)(a2 + v52 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v53 + 16) = *(unsigned char *)(v54 + 16);
  uint64_t v55 = a3[22];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = a2 + v55;
  *uint64_t v56 = *(void *)(a2 + v55);
  v56[1] = *(void *)(a2 + v55 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[2] = *(void *)(v57 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[23];
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = a2 + v58;
  *uint64_t v59 = *(void *)(a2 + v58);
  v59[1] = *(void *)(a2 + v58 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[2] = *(void *)(v60 + 16);
  v59[3] = *(void *)(v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[24];
  uint64_t v62 = (void *)(a1 + v61);
  uint64_t v63 = a2 + v61;
  void *v62 = *(void *)(a2 + v61);
  v62[1] = *(void *)(a2 + v61 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62[2] = *(void *)(v63 + 16);
  v62[3] = *(void *)(v63 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001F9A04(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F9A38(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  long long v12 = (void *)(v9 + v11);
  uint64_t v13 = (const void *)(v10 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[12];
  uint64_t v18 = a3[13];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  uint64_t v23 = a3[14];
  uint64_t v24 = a3[15];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  uint64_t v29 = a3[16];
  uint64_t v30 = a3[17];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = (long long *)(a2 + v29);
  long long v33 = *v32;
  *(void *)(v31 + 16) = *((void *)v32 + 2);
  *(_OWORD *)uint64_t v31 = v33;
  uint64_t v34 = a1 + v30;
  uint64_t v35 = a2 + v30;
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  uint64_t v36 = a3[18];
  uint64_t v37 = a3[19];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(void *)(v40 + 16) = *(void *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  uint64_t v42 = a3[20];
  uint64_t v43 = a3[21];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  *(unsigned char *)(v46 + 16) = *(unsigned char *)(v47 + 16);
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  uint64_t v48 = a3[22];
  uint64_t v49 = a3[23];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)(v50 + 16) = *(void *)(v51 + 16);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  uint64_t v52 = (_OWORD *)(a1 + v49);
  uint64_t v53 = (_OWORD *)(a2 + v49);
  long long v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = a3[24];
  uint64_t v56 = (_OWORD *)(a1 + v55);
  uint64_t v57 = (_OWORD *)(a2 + v55);
  long long v58 = v57[1];
  *uint64_t v56 = *v57;
  v56[1] = v58;
  return a1;
}

uint64_t sub_1001F9D20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8)
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1001F9A04(a1 + 32);
  }
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v17;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = a2 + v18;
  uint64_t v21 = *(void *)(a2 + v18 + 8);
  *uint64_t v19 = *(void *)(a2 + v18);
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(int *)(sub_10000588C(&qword_10163EE60) + 36);
  uint64_t v23 = (char *)v19 + v22;
  uint64_t v24 = (char *)(v20 + v22);
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_11;
  }
  if (v29)
  {
LABEL_11:
    uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_12:
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = a2 + v31;
  uint64_t v34 = *(void *)(a2 + v31 + 8);
  *uint64_t v32 = *(void *)(a2 + v31);
  v32[1] = v34;
  swift_bridgeObjectRelease();
  void v32[2] = *(void *)(v33 + 16);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)(a2 + v35 + 8);
  *uint64_t v36 = *(void *)(a2 + v35);
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v36[2] = *(void *)(v37 + 16);
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[14];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)(a2 + v39 + 8);
  void *v40 = *(void *)(a2 + v39);
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v40[2] = *(void *)(v41 + 16);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = *(void *)(a2 + v43 + 8);
  *(void *)uint64_t v44 = *(void *)(a2 + v43);
  *(void *)(v44 + 8) = v46;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  uint64_t v47 = a3[16];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = a2 + v47;
  uint64_t v50 = *(void *)(a2 + v47 + 8);
  *uint64_t v48 = *(void *)(a2 + v47);
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v48[2] = *(void *)(v49 + 16);
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[17];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = a2 + v51;
  uint64_t v54 = *(void *)(a2 + v51 + 8);
  *uint64_t v52 = *(void *)(a2 + v51);
  v52[1] = v54;
  swift_bridgeObjectRelease();
  void v52[2] = *(void *)(v53 + 16);
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[18];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = a2 + v55;
  uint64_t v58 = *(void *)(a2 + v55 + 8);
  *uint64_t v56 = *(void *)(a2 + v55);
  v56[1] = v58;
  swift_bridgeObjectRelease();
  v56[2] = *(void *)(v57 + 16);
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[19];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = a2 + v59;
  uint64_t v62 = *(void *)(a2 + v59 + 8);
  *uint64_t v60 = *(void *)(a2 + v59);
  v60[1] = v62;
  swift_bridgeObjectRelease();
  void v60[2] = *(void *)(v61 + 16);
  uint64_t v63 = a3[20];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  uint64_t v66 = *(void *)(a2 + v63 + 8);
  *(void *)uint64_t v64 = *(void *)(a2 + v63);
  *(void *)(v64 + 8) = v66;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v64 + 16) = *(unsigned char *)(v65 + 16);
  uint64_t v67 = a3[21];
  uint64_t v68 = a1 + v67;
  uint64_t v69 = a2 + v67;
  uint64_t v70 = *(void *)(a2 + v67 + 8);
  *(void *)uint64_t v68 = *(void *)(a2 + v67);
  *(void *)(v68 + 8) = v70;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
  uint64_t v71 = a3[22];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = a2 + v71;
  uint64_t v74 = *(void *)(a2 + v71 + 8);
  *uint64_t v72 = *(void *)(a2 + v71);
  v72[1] = v74;
  swift_bridgeObjectRelease();
  v72[2] = *(void *)(v73 + 16);
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[23];
  uint64_t v76 = (void *)(a1 + v75);
  uint64_t v77 = a2 + v75;
  uint64_t v78 = *(void *)(a2 + v75 + 8);
  *uint64_t v76 = *(void *)(a2 + v75);
  v76[1] = v78;
  swift_bridgeObjectRelease();
  uint64_t v79 = *(void *)(v77 + 24);
  v76[2] = *(void *)(v77 + 16);
  v76[3] = v79;
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[24];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)(a2 + v80);
  uint64_t v83 = v82[1];
  *uint64_t v81 = *v82;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = v82[3];
  v81[2] = v82[2];
  v81[3] = v84;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FA1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FA1FC);
}

uint64_t sub_1001FA1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_10163EE60);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001FA2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FA2C4);
}

uint64_t sub_1001FA2C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_10163EE60);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1001FA370()
{
  sub_1001FA44C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001FA44C()
{
  if (!qword_10163EED8)
  {
    sub_10000592C((uint64_t *)&unk_10163AC90);
    sub_1001FA4B4();
    unint64_t v0 = type metadata accessor for URLParameter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10163EED8);
    }
  }
}

unint64_t sub_1001FA4B4()
{
  unint64_t result = qword_10163EEE0;
  if (!qword_10163EEE0)
  {
    sub_10000592C((uint64_t *)&unk_10163AC90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EEE0);
  }
  return result;
}

uint64_t type metadata accessor for URLParameter()
{
  return sub_1000103A0();
}

uint64_t sub_1001FA538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1001FA540()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001FA5DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_1001FA6E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1001FA758(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *sub_1001FA7E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_1001FA880(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1001FA8F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1001FA978(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1001FAB18(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1001FAD78);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

unint64_t sub_1001FADA8()
{
  unint64_t result = qword_10163EFE0;
  if (!qword_10163EFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EFE0);
  }
  return result;
}

unint64_t sub_1001FAE00()
{
  unint64_t result = qword_10163EFE8;
  if (!qword_10163EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EFE8);
  }
  return result;
}

unint64_t sub_1001FAE58()
{
  unint64_t result = qword_10163EFF0;
  if (!qword_10163EFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EFF0);
  }
  return result;
}

unint64_t sub_1001FAEAC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0808, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

unint64_t sub_1001FAEF8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0918, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unsigned char *_s12searchpartyd15TapToRadarDraftV11DeviceClassOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FB010);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.AutoDiagnostics()
{
  return &type metadata for TapToRadarDraft.AutoDiagnostics;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.RemoteDeviceSelections()
{
  return &type metadata for TapToRadarDraft.RemoteDeviceSelections;
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.Reproducibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FB124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Reproducibility()
{
  return &type metadata for TapToRadarDraft.Reproducibility;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft.Classification(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.Classification(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FB2B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Classification()
{
  return &type metadata for TapToRadarDraft.Classification;
}

unint64_t sub_1001FB2F4()
{
  unint64_t result = qword_10163EFF8;
  if (!qword_10163EFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163EFF8);
  }
  return result;
}

unint64_t sub_1001FB34C()
{
  unint64_t result = qword_10163F000;
  if (!qword_10163F000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F000);
  }
  return result;
}

unint64_t sub_1001FB3A4()
{
  unint64_t result = qword_10163F008;
  if (!qword_10163F008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F008);
  }
  return result;
}

unint64_t sub_1001FB3FC()
{
  unint64_t result = qword_10163F010;
  if (!qword_10163F010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F010);
  }
  return result;
}

unint64_t sub_1001FB454()
{
  unint64_t result = qword_10163F018;
  if (!qword_10163F018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F018);
  }
  return result;
}

unint64_t sub_1001FB4AC()
{
  unint64_t result = qword_10163F020;
  if (!qword_10163F020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F020);
  }
  return result;
}

unint64_t sub_1001FB504()
{
  unint64_t result = qword_10163F028;
  if (!qword_10163F028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F028);
  }
  return result;
}

unint64_t sub_1001FB558(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 7) {
    return 7;
  }
  else {
    return v5;
  }
}

ValueMetadata *type metadata accessor for SignalSource()
{
  return &type metadata for SignalSource;
}

uint64_t sub_1001FB5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FB5DC);
}

uint64_t sub_1001FB5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FB5F4);
}

uint64_t type metadata accessor for SelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163F088);
}

uint64_t *sub_1001FB61C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001FB6EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FB760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001FB7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FB86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FB8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FB904);
}

uint64_t sub_1001FB908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001FB9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FB9DC);
}

uint64_t sub_1001FB9E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for LegacySelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163F118);
}

uint64_t sub_1001FBABC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001FBB54(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163F150);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1001FC89C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for UUID();
  sub_1001FCA6C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for LegacySelfBeaconingKeyEnvelope(0) + 20));
    v10[15] = 1;
    sub_10000588C(&qword_10163F160);
    sub_1001FC944(&qword_10163F168, &qword_10163F170);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001FBD64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163F1A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001FC89C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v21 = v10;
  int v13 = v12;
  uint64_t v14 = v23;
  char v29 = 0;
  sub_1001FCA6C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v26;
  uint64_t v16 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = (uint64_t)v13;
  v17(v13, v5, v15);
  sub_10000588C(&qword_10163F160);
  char v28 = 1;
  sub_1001FC944(&qword_10163F1A8, &qword_10163F1B0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v16);
  uint64_t v18 = v20;
  *(void *)(v20 + *(int *)(v21 + 20)) = v27;
  sub_1001FCAB4(v18, v22, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001FCB1C(v18, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t sub_1001FC120(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163F178);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1001FC8F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for UUID();
  sub_1001FCA6C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for SelfBeaconingKeyEnvelope(0) + 20));
    v10[15] = 1;
    sub_10000588C(&qword_10163F188);
    sub_1001FC9D8(&qword_10163F190, &qword_10163F198);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001FC330@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163F1B8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1001FC8F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v21 = v10;
  int v13 = v12;
  uint64_t v14 = v23;
  char v29 = 0;
  sub_1001FCA6C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v26;
  uint64_t v16 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = (uint64_t)v13;
  v17(v13, v5, v15);
  sub_10000588C(&qword_10163F188);
  char v28 = 1;
  sub_1001FC9D8(&qword_10163F1C0, &qword_10163F1C8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v16);
  uint64_t v18 = v20;
  *(void *)(v20 + *(int *)(v21 + 20)) = v27;
  sub_1001FCAB4(v18, v22, type metadata accessor for SelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001FCB1C(v18, type metadata accessor for SelfBeaconingKeyEnvelope);
}

uint64_t sub_1001FC6EC(uint64_t a1)
{
  unint64_t v2 = sub_1001FC89C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FC728(uint64_t a1)
{
  unint64_t v2 = sub_1001FC89C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FC764@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FBD64(a1, a2);
}

uint64_t sub_1001FC77C(void *a1)
{
  return sub_1001FBB54(a1);
}

uint64_t sub_1001FC794()
{
  if (*v0) {
    return 1937335659;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001FC7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001FCEA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FC7F4(uint64_t a1)
{
  unint64_t v2 = sub_1001FC8F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FC830(uint64_t a1)
{
  unint64_t v2 = sub_1001FC8F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FC86C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FC330(a1, a2);
}

uint64_t sub_1001FC884(void *a1)
{
  return sub_1001FC120(a1);
}

unint64_t sub_1001FC89C()
{
  unint64_t result = qword_10163F158;
  if (!qword_10163F158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F158);
  }
  return result;
}

unint64_t sub_1001FC8F0()
{
  unint64_t result = qword_10163F180;
  if (!qword_10163F180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F180);
  }
  return result;
}

uint64_t sub_1001FC944(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163F160);
    sub_1001FCA6C(a2, (void (*)(uint64_t))type metadata accessor for CryptoKeys);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FC9D8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163F188);
    sub_1001FCA6C(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV1);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FCA6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FCAB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001FCB1C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for SelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for SelfBeaconingKeyEnvelope.CodingKeys;
}

unsigned char *_s12searchpartyd24SelfBeaconingKeyEnvelopeV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FCC5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacySelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys;
}

unint64_t sub_1001FCC98()
{
  unint64_t result = qword_10163F1D0;
  if (!qword_10163F1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1D0);
  }
  return result;
}

unint64_t sub_1001FCCF0()
{
  unint64_t result = qword_10163F1D8;
  if (!qword_10163F1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1D8);
  }
  return result;
}

unint64_t sub_1001FCD48()
{
  unint64_t result = qword_10163F1E0;
  if (!qword_10163F1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1E0);
  }
  return result;
}

unint64_t sub_1001FCDA0()
{
  unint64_t result = qword_10163F1E8;
  if (!qword_10163F1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1E8);
  }
  return result;
}

unint64_t sub_1001FCDF8()
{
  unint64_t result = qword_10163F1F0;
  if (!qword_10163F1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1F0);
  }
  return result;
}

unint64_t sub_1001FCE50()
{
  unint64_t result = qword_10163F1F8;
  if (!qword_10163F1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F1F8);
  }
  return result;
}

uint64_t sub_1001FCEA4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001FCF8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10163F360);
    sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v23;
    uint64_t v22 = v24;
    uint64_t v6 = v25;
    uint64_t v7 = v26;
    unint64_t v8 = v27;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10163F360);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v28) {
      return sub_100132C20();
    }
LABEL_32:
    XPCSession.proxy.getter();
    if (v28)
    {
      sub_1001FF060();
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v28 receivedUpdatedLocations:isa];

      swift_unknownObjectRelease();
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
        return sub_100132C20();
      }
      ++*a3;
    }
    uint64_t result = swift_release();
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_31:
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    swift_retain();
    if (!v19) {
      return sub_100132C20();
    }
    goto LABEL_32;
  }
  int64_t v16 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v16 >= v21) {
      return sub_100132C20();
    }
    unint64_t v17 = *(void *)(v22 + 8 * v16);
    uint64_t v15 = v7 + 1;
    if (!v17)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v21) {
        return sub_100132C20();
      }
      unint64_t v17 = *(void *)(v22 + 8 * v15);
      if (!v17)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v21) {
          return sub_100132C20();
        }
        unint64_t v17 = *(void *)(v22 + 8 * v15);
        if (!v17)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v21) {
            return sub_100132C20();
          }
          unint64_t v17 = *(void *)(v22 + 8 * v15);
          if (!v17)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v21) {
              return sub_100132C20();
            }
            unint64_t v17 = *(void *)(v22 + 8 * v15);
            if (!v17)
            {
              uint64_t v18 = v7 + 6;
              while (v21 != v18)
              {
                unint64_t v17 = *(void *)(v22 + 8 * v18++);
                if (v17)
                {
                  uint64_t v15 = v18 - 1;
                  goto LABEL_30;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001FD2D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10163F360);
    sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v22 = v24;
    uint64_t v7 = v25;
    uint64_t v8 = v26;
    unint64_t v9 = v27;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10163F360);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v28) {
      return sub_100132C20();
    }
LABEL_32:
    XPCSession.proxy.getter();
    if (v28)
    {
      [v28 stewieServiceStateChanged:a2];
      swift_unknownObjectRelease();
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
        return sub_100132C20();
      }
      ++*a3;
    }
    uint64_t result = swift_release();
    uint64_t v8 = v16;
    unint64_t v9 = v14;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v16 = v8;
LABEL_31:
    uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    swift_retain();
    if (!v20) {
      return sub_100132C20();
    }
    goto LABEL_32;
  }
  int64_t v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v21) {
      return sub_100132C20();
    }
    unint64_t v18 = *(void *)(v22 + 8 * v17);
    uint64_t v16 = v8 + 1;
    if (!v18)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v21) {
        return sub_100132C20();
      }
      unint64_t v18 = *(void *)(v22 + 8 * v16);
      if (!v18)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= v21) {
          return sub_100132C20();
        }
        unint64_t v18 = *(void *)(v22 + 8 * v16);
        if (!v18)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= v21) {
            return sub_100132C20();
          }
          unint64_t v18 = *(void *)(v22 + 8 * v16);
          if (!v18)
          {
            uint64_t v16 = v8 + 5;
            if (v8 + 5 >= v21) {
              return sub_100132C20();
            }
            unint64_t v18 = *(void *)(v22 + 8 * v16);
            if (!v18)
            {
              uint64_t v19 = v8 + 6;
              while (v21 != v19)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v19++);
                if (v18)
                {
                  uint64_t v16 = v19 - 1;
                  goto LABEL_30;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v14 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001FD5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = a5;
  aBlock[4] = sub_1001FEEF8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B4780;
  int64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001FF018((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v20);
  return swift_release();
}

void sub_1001FD8E0(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a5;
  uint64_t v46 = a4;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SecureLocation();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12 - 8);
  unint64_t v15 = (uint64_t *)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = a2 + 32;
  swift_beginAccess();
  uint64_t v16 = *(void *)(a2 + 32);
  if ((v16 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)(v16 + 16);
  }
  if (v17)
  {
    uint64_t v43 = a3;
    uint64_t v44 = a1;
    unint64_t v64 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v18 = *(void *)(v47 + 16);
    if (v18)
    {
      uint64_t v19 = v47 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v51 = *(void *)(v13 + 72);
      uint64_t v50 = v63;
      uint64_t v49 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v48 = (void (**)(char *, uint64_t))(v10 + 8);
      swift_bridgeObjectRetain();
      uint64_t v20 = v52;
      uint64_t v21 = v55;
      do
      {
        sub_1001FEF08(v19, (uint64_t)v15);
        sub_100E8F348();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        uint64_t v57 = v18;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (qword_101637440 != -1) {
          swift_once();
        }
        uint64_t v22 = qword_10170F218;
        uint64_t v23 = *v15;
        uint64_t v24 = v15[1];
        uint64_t v56 = *(void *)(qword_10170F218 + 16);
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v22;
        *(void *)(v25 + 24) = v23;
        *(void *)(v25 + 32) = v24;
        *(unsigned char *)(v25 + 40) = 1;
        v63[2] = sub_1001FEFAC;
        v63[3] = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v63[0] = sub_1004B5480;
        v63[1] = &unk_1015B47D0;
        uint64_t v26 = _Block_copy(aBlock);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        static DispatchQoS.unspecified.getter();
        uint64_t v58 = (uint64_t)_swiftEmptyArrayStorage;
        sub_1001FF018((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v27 = (uint64_t)v15;
        char v28 = v54;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v26);
        char v29 = v28;
        unint64_t v15 = (uint64_t *)v27;
        (*v49)(v29, v21);
        (*v48)(v20, v53);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1001FEFBC(v27);
        v19 += v51;
        uint64_t v18 = v57 - 1;
      }
      while (v57 != 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v61 = 0;
    uint64_t v30 = swift_bridgeObjectRetain();
    sub_1001FCF8C(v30, (uint64_t)&v64, &v61);
    swift_bridgeObjectRelease();
    uint64_t v31 = v43;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170EC30);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 134217984;
      swift_beginAccess();
      aBlock[0] = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "SecureLocationsClientSession - sent to %ld clients.", v35, 0xCu);
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (v61)
    {
      v31(0);
    }
    else
    {
      type metadata accessor for SecureLocationsError(0);
      uint64_t v59 = 8;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1001FF018(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v41 = v60;
      v31(v60);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170EC30);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "SecureLocationsClientSession - receivedUpdatedLocations but no client sessions", v39, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SecureLocationsError(0);
    uint64_t v58 = 8;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1001FF018(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v40 = (void *)aBlock[0];
    a3((void *)aBlock[0]);
  }
  Transaction.capture()();
}

uint64_t sub_1001FE19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 16);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1001FF0E8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B4820;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001FF018((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

void sub_1001FE480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a2 + 32);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (*(void *)(v5 + 16))
  {
LABEL_3:
    uint64_t v20 = 0;
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1001FF0F4(v7, a3, &v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EC30);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = "SecureLocationsClientSession - sent clearLocationsForFailedSubscriptions to %ld clients.";
      uint64_t v13 = v9;
      os_log_type_t v14 = v10;
      unint64_t v15 = v11;
      uint32_t v16 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, v15, v16);
      swift_slowDealloc();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170EC30);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    uint64_t v12 = "SecureLocationsClientSession - clearLocationsForFailedSubscriptions - but no client sessions";
    uint64_t v13 = v9;
    os_log_type_t v14 = v18;
    unint64_t v15 = v19;
    uint32_t v16 = 2;
    goto LABEL_12;
  }
LABEL_13:

  Transaction.capture()();
}

uint64_t sub_1001FE6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 16);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1001FEE84;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B4730;
  os_log_type_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001FF018((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

void sub_1001FE9D0(uint64_t a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = a2[4];
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
LABEL_8:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170EC30);
    swift_retain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = a2[5];
      unint64_t v23 = a2[6];
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1008FA0F0(v22, v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      os_log_type_t v14 = "SecureLocationsClientSession - %{public}s notifyOfStateChange - but no client sessions";
      unint64_t v15 = v9;
      os_log_type_t v16 = v20;
      uint64_t v17 = v21;
      uint32_t v18 = 12;
      goto LABEL_12;
    }
LABEL_13:

    swift_release();
    goto LABEL_14;
  }
  if (!*(void *)(v5 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v26 = 0;
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_1001FD2D0(v7, a3, &v26);
  swift_bridgeObjectRelease();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170EC30);
  swift_retain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v9, v10)) {
    goto LABEL_13;
  }
  uint64_t v11 = swift_slowAlloc();
  uint64_t v25 = swift_slowAlloc();
  *(_DWORD *)uint64_t v11 = 136446466;
  uint64_t v12 = a2[5];
  unint64_t v13 = a2[6];
  swift_bridgeObjectRetain();
  v24[0] = sub_1008FA0F0(v12, v13, &v25);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(_WORD *)(v11 + 12) = 2048;
  swift_beginAccess();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  os_log_type_t v14 = "SecureLocationsClientSession - %{public}s sent notifyOfStateChange to %ld clients.";
  unint64_t v15 = v9;
  os_log_type_t v16 = v10;
  uint64_t v17 = (uint8_t *)v11;
  uint32_t v18 = 22;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, v17, v18);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  Transaction.capture()();
}

uint64_t sub_1001FED5C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FED64()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureLocationsClientSessionPool()
{
  uint64_t result = qword_10163F228;
  if (!qword_10163F228) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001FEE00()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001FEE44()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001FEE84()
{
  sub_1001FE9D0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001FEE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FEEA0()
{
  return swift_release();
}

uint64_t sub_1001FEEA8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001FEEF8()
{
  sub_1001FD8E0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001FEF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FEF6C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1001FEFAC()
{
  return sub_1010DEFE0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_1001FEFBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureLocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001FF018(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001FF060()
{
  unint64_t result = qword_10163F378;
  if (!qword_10163F378)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10163F378);
  }
  return result;
}

uint64_t sub_1001FF0A0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001FF0E8()
{
  sub_1001FE480(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001FF0F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10163F360);
    sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v23;
    uint64_t v22 = v24;
    uint64_t v6 = v25;
    uint64_t v7 = v26;
    unint64_t v8 = v27;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10163F360);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v28) {
      return sub_100132C20();
    }
LABEL_32:
    XPCSession.proxy.getter();
    if (v28)
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v28 clearLocationsForFailedSubscriptions:isa];

      swift_unknownObjectRelease();
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
        return sub_100132C20();
      }
      ++*a3;
    }
    uint64_t result = swift_release();
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_31:
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    swift_retain();
    if (!v19) {
      return sub_100132C20();
    }
    goto LABEL_32;
  }
  int64_t v16 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v16 >= v21) {
      return sub_100132C20();
    }
    unint64_t v17 = *(void *)(v22 + 8 * v16);
    uint64_t v15 = v7 + 1;
    if (!v17)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v21) {
        return sub_100132C20();
      }
      unint64_t v17 = *(void *)(v22 + 8 * v15);
      if (!v17)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v21) {
          return sub_100132C20();
        }
        unint64_t v17 = *(void *)(v22 + 8 * v15);
        if (!v17)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v21) {
            return sub_100132C20();
          }
          unint64_t v17 = *(void *)(v22 + 8 * v15);
          if (!v17)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v21) {
              return sub_100132C20();
            }
            unint64_t v17 = *(void *)(v22 + 8 * v15);
            if (!v17)
            {
              uint64_t v18 = v7 + 6;
              while (v21 != v18)
              {
                unint64_t v17 = *(void *)(v22 + 8 * v18++);
                if (v17)
                {
                  uint64_t v15 = v18 - 1;
                  goto LABEL_30;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.ObservationSource()
{
  return &type metadata for ObservedAdvertisement.ObservationSource;
}

uint64_t sub_1001FF450(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    sub_1001A1790(v7, v8);
    *(void *)(v4 + 16) = v7;
    *(void *)(v4 + 24) = v8;
    int v9 = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v4 + 32) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v4 + 36) = v9;
    uint64_t v10 = a3[11];
    uint64_t v11 = v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = a3[12];
    int64_t v16 = (void *)(v4 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for ObservedAdvertisement.Location(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10000588C(&qword_10163CF50);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)int64_t v16 = *(_OWORD *)v17;
      void v16[2] = v17[2];
      v14((uint64_t)v16 + *(int *)(v18 + 28), (uint64_t)v17 + *(int *)(v18 + 28), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = a3[13];
    uint64_t v23 = (char *)(v4 + v22);
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_10000588C(&qword_10164E760);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v23, v24, v28);
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      *(void *)&v23[*(int *)(v25 + 24)] = *(void *)&v24[*(int *)(v25 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    *(unsigned char *)(v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  }
  return v4;
}

uint64_t type metadata accessor for ObservedAdvertisement.Location(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163F538);
}

uint64_t type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163F4A0);
}

uint64_t sub_1001FF7B4(uint64_t a1, int *a2)
{
  sub_1001A1AD8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + a2[11];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[12];
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
    v6(v7 + *(int *)(v8 + 28), v5);
  }
  uint64_t v9 = a1 + a2[13];
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
    return v13(v9, v12);
  }
  return result;
}

uint64_t sub_1001FF948(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  sub_1001A1790(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  int v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  uint64_t v9 = a3[11];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)(a1 + v14);
  int64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_10000588C(&qword_10163CF50);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    void v15[2] = v16[2];
    v13((uint64_t)v15 + *(int *)(v17 + 28), (uint64_t)v16 + *(int *)(v17 + 28), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[13];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_10000588C(&qword_10164E760);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v21, v22, v26);
    v21[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
    *(void *)&v21[*(int *)(v23 + 24)] = *(void *)&v22[*(int *)(v23 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_1001FFC1C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  sub_1001A1790(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_1001A1AD8(v9, v10);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(_WORD *)(a1 + 34) = *((_WORD *)a2 + 17);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  uint64_t v11 = a3[11];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v38 = v14;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v37 + 24);
  v15(v12, v13);
  uint64_t v39 = a3;
  uint64_t v16 = a3[12];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v36 = *(void *)(v19 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v21 = v20(v17, 1, v19);
  int v22 = v20(v18, 1, v19);
  if (v21)
  {
    if (!v22)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = *((void *)v18 + 1);
      *((void *)v17 + 2) = *((void *)v18 + 2);
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(&v17[*(int *)(v19 + 28)], &v18[*(int *)(v19 + 28)], v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_10020005C((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    uint64_t v23 = sub_10000588C(&qword_10163CF50);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *((void *)v17 + 2) = *((void *)v18 + 2);
  ((void (*)(char *, char *, uint64_t))v15)(&v17[*(int *)(v19 + 28)], &v18[*(int *)(v19 + 28)], v38);
LABEL_7:
  uint64_t v24 = a3[13];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v28 = *(void *)(v27 - 8);
  char v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 24))(v25, v26, v35);
      v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
      *(void *)&v25[*(int *)(v27 + 24)] = *(void *)&v26[*(int *)(v27 + 24)];
      goto LABEL_13;
    }
    sub_10020005C((uint64_t)v25, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v33 = sub_10000588C(&qword_10164E760);
    memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v32 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 16))(v25, v26, v32);
  v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
  *(void *)&v25[*(int *)(v27 + 24)] = *(void *)&v26[*(int *)(v27 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_13:
  *(unsigned char *)(a1 + v39[14]) = *((unsigned char *)a2 + v39[14]);
  return a1;
}

uint64_t sub_10020005C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002000BC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v6;
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[12];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000588C(&qword_10163CF50);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    void v13[2] = v14[2];
    v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[13];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_10000588C(&qword_10164E760);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v19, v20, v24);
    v19[*(int *)(v21 + 20)] = v20[*(int *)(v21 + 20)];
    *(void *)&v19[*(int *)(v21 + 24)] = *(void *)&v20[*(int *)(v21 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_100200384(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1001A1AD8(v6, v7);
  int v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  uint64_t v9 = a3[11];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v35 + 40);
  v13(v10, v11);
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v14 = a3[12];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_10020005C((uint64_t)v15, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    uint64_t v22 = sub_10000588C(&qword_10163CF50);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((void *)v15 + 2) = *((void *)v16 + 2);
  ((void (*)(char *, char *, uint64_t))v13)(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v36);
LABEL_7:
  uint64_t v23 = a3[13];
  uint64_t v24 = (unsigned char *)(a1 + v23);
  uint64_t v25 = (unsigned char *)(v38 + v23);
  uint64_t v26 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 40))(v24, v25, v34);
      v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      *(void *)&v24[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
      goto LABEL_13;
    }
    sub_10020005C((uint64_t)v24, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v32 = sub_10000588C(&qword_10164E760);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v31 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v24, v25, v31);
  v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
  *(void *)&v24[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  *(unsigned char *)(a1 + v37[14]) = *(unsigned char *)(v38 + v37[14]);
  return a1;
}

uint64_t sub_100200788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020079C);
}

uint64_t sub_10020079C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[11];
  }
  else
  {
    uint64_t v10 = sub_10000588C(&qword_10163CF50);
    if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
    {
      uint64_t v7 = v10;
      uint64_t v8 = *(void *)(v10 - 8);
      uint64_t v9 = a3[12];
    }
    else
    {
      uint64_t v11 = sub_10000588C(&qword_10164E760);
      if (*(_DWORD *)(*(void *)(v11 - 8) + 84) != a2)
      {
        unsigned int v14 = *(unsigned __int8 *)(a1 + a3[14]);
        if (v14 >= 2) {
          return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
        }
        else {
          return 0;
        }
      }
      uint64_t v7 = v11;
      uint64_t v8 = *(void *)(v11 - 8);
      uint64_t v9 = a3[13];
    }
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);

  return v12(a1 + v9, a2, v7);
}

uint64_t sub_100200910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100200924);
}

uint64_t sub_100200924(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[11];
  }
  else
  {
    uint64_t v12 = sub_10000588C(&qword_10163CF50);
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[12];
    }
    else
    {
      uint64_t result = sub_10000588C(&qword_10164E760);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(unsigned char *)(a1 + a4[14]) = a2 + 1;
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[13];
    }
  }
  unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v14(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for ObservedAdvertisement(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10163F3D8);
}

void sub_100200AA4()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100200C30(319, &qword_10163F3E8, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.Location);
    if (v1 <= 0x3F)
    {
      sub_100200C30(319, (unint64_t *)&unk_10163F3F0, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100200C30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_100200C84(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_100200D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100200DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100200E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100200EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100200F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100200F80);
}

uint64_t sub_100200F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10020103C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100201050);
}

uint64_t sub_100201050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t sub_10020110C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1002011B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100201284(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_1002012EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_100201370(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_1002013FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100201480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100201504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100201518);
}

uint64_t sub_100201518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_100201588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020159C);
}

uint64_t sub_10020159C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_100201610()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002016B0()
{
  uint64_t v1 = v0;
  uint64_t v45 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v43);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 35))
  {
    uint64_t v5 = (void *)0xE300000000000000;
    uint64_t v6 = 4271950;
  }
  else
  {
    LOBYTE(v47) = *(unsigned char *)(v0 + 34);
    sub_10006145C();
    uint64_t v7 = FixedWidthInteger.data.getter();
    unint64_t v9 = v8;
    uint64_t v6 = Data.hexString.getter();
    uint64_t v5 = v10;
    sub_10001CFB8(v7, v9);
  }
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(121);
  v11._uint64_t countAndFlagsBits = 0x3A656372756F733CLL;
  v11._object = (void *)0xE900000000000020;
  String.append(_:)(v11);
  unint64_t v12 = 0xE800000000000000;
  uint64_t v13 = 0x6E776F6E6B6E752ELL;
  switch(*(unsigned char *)(v1 + 9))
  {
    case 1:
      unint64_t v12 = 0xEA00000000007265;
      uint64_t v13 = 0x747365767261682ELL;
      break;
    case 2:
      unint64_t v12 = 0xED000072656E6E61;
      uint64_t v13 = 0x6353686365656C2ELL;
      break;
    case 3:
      unint64_t v12 = 0xE500000000000000;
      uint64_t v13 = 0x6E7363612ELL;
      break;
    default:
      break;
  }
  unint64_t v14 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x80000001013F6750;
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(v1 + 16);
  uint64_t v17 = *(void *)(v1 + 24);
  sub_1001A1790(v16, v17);
  v18._uint64_t countAndFlagsBits = sub_10026383C(v16, v17);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  sub_1001A1AD8(v16, v17);
  v19._uint64_t countAndFlagsBits = 0x737574617473202CLL;
  v19._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = sub_1000D0310(*(unsigned __int8 *)(v1 + 32));
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x203A6B65202CLL;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  char v22 = *(unsigned char *)(v1 + 33);
  v46._uint64_t countAndFlagsBits = 0x203A4D6F427BLL;
  v46._object = (void *)0xE600000000000000;
  if ((v22 & 4) != 0) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if ((v22 & 4) != 0) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 125;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x203A746E6968202CLL;
  v27._object = (void *)0xE800000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = v6;
  v28._object = v5;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x7461446E61637320;
  v29._object = (void *)0xEB00000000203A65;
  String.append(_:)(v29);
  int v30 = (int *)type metadata accessor for ObservedAdvertisement(0);
  type metadata accessor for Date();
  sub_100204630((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x68736F507369202CLL;
  v32._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v32);
  if (*(unsigned char *)(v1 + v30[14])) {
    uint64_t v33 = 1702195828;
  }
  else {
    uint64_t v33 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v30[14])) {
    unint64_t v34 = 0xE400000000000000;
  }
  else {
    unint64_t v34 = 0xE500000000000000;
  }
  unint64_t v35 = v34;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v36._object = (void *)0xEB00000000203A6ELL;
  v36._uint64_t countAndFlagsBits = 0x6F697461636F6C20;
  String.append(_:)(v36);
  sub_10001D074(v1 + v30[12], (uint64_t)v4, &qword_10163CF50);
  v37._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 0xD000000000000014;
  v38._object = (void *)0x80000001013F6770;
  String.append(_:)(v38);
  sub_10001D074(v1 + v30[13], v44, &qword_10164E760);
  v39._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 62;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  return v47;
}

void sub_100201BA8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v10 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + 9));
  uint64_t v11 = *(void *)(v1 + 16);
  unint64_t v12 = *(void *)(v1 + 24);
  Hasher._combine(_:)((v12 >> 61) & 1);
  sub_1000361E0(v11, v12 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)();
  sub_1001A1AD8(v11, v12);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v1 + 33));
  if (*(unsigned char *)(v1 + 35))
  {
    Swift::UInt8 v13 = 0;
  }
  else
  {
    Swift::UInt8 v13 = *(unsigned char *)(v1 + 34);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(*(_DWORD *)(v1 + 36));
  uint64_t v14 = type metadata accessor for ObservedAdvertisement(0);
  type metadata accessor for Date();
  sub_100204630((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  sub_100F227AC(a1);
  sub_10001D074(v1 + *(int *)(v14 + 52), (uint64_t)v9, &qword_10164E760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1002054D4((uint64_t)v9, (uint64_t)v6, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    Hasher._combine(_:)(1u);
    type metadata accessor for UUID();
    sub_100204630(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(void *)&v6[*(int *)(v3 + 24)]);
    sub_10020005C((uint64_t)v6, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(v14 + 56)));
}

unint64_t sub_100201F64(char a1)
{
  unint64_t result = 0x6449766461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656372756F73;
      break;
    case 2:
      unint64_t result = 0x7369747265766461;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0x79654B6172747865;
      break;
    case 5:
      unint64_t result = 1953393000;
      break;
    case 6:
      unint64_t result = 1769173874;
      break;
    case 7:
      unint64_t result = 0x657461446E616373;
      break;
    case 8:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0x68736F507369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002020B4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163F5E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1002051E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = *(unsigned char *)(v3 + 9);
    char v12 = 1;
    sub_100205384();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 16);
    char v12 = 2;
    sub_1002053D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + 32);
    char v12 = 3;
    sub_10020542C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + 33);
    char v12 = 4;
    sub_100205480();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for ObservedAdvertisement(0);
    LOBYTE(v11) = 7;
    type metadata accessor for Date();
    sub_100204630((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 8;
    type metadata accessor for ObservedAdvertisement.Location(0);
    sub_100204630(&qword_10163F608, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.Location);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 9;
    type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    sub_100204630(&qword_10163F610, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002024E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = sub_10000588C(&qword_10164E760);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  char v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_10163F5A0);
  uint64_t v13 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (int *)type metadata accessor for ObservedAdvertisement(0);
  __chkstk_darwin(v33);
  Swift::String v31 = a1;
  Swift::String v32 = (uint64_t *)((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_1002051E0();
  Swift::String v27 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  }
  unint64_t v25 = v6;
  LOBYTE(v34) = 0;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  Swift::String v18 = v32;
  *Swift::String v32 = v17;
  *((unsigned char *)v18 + 8) = v19 & 1;
  char v35 = 1;
  sub_100205234();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((unsigned char *)v18 + 9) = v34;
  char v35 = 2;
  sub_100205288();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v18 + 1) = v34;
  char v35 = 3;
  sub_1002052DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((unsigned char *)v18 + 32) = v34;
  char v35 = 4;
  sub_100205330();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((unsigned char *)v18 + 33) = v34;
  LOBYTE(v34) = 5;
  __int16 v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((unsigned char *)v18 + 34) = v20;
  *((unsigned char *)v18 + 35) = HIBYTE(v20) & 1;
  LOBYTE(v34) = 6;
  *((_DWORD *)v18 + 9) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v34) = 7;
  sub_100204630(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))((char *)v18 + v33[11], v12, v30);
  type metadata accessor for ObservedAdvertisement.Location(0);
  LOBYTE(v34) = 8;
  sub_100204630(&qword_10163F5D0, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.Location);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v9, (uint64_t)v18 + v33[12], &qword_10163CF50);
  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  LOBYTE(v34) = 9;
  sub_100204630(&qword_10163F5D8, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v25, (uint64_t)v32 + v33[13], &qword_10164E760);
  LOBYTE(v34) = 10;
  char v21 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v28);
  uint64_t v22 = (uint64_t)v32;
  *((unsigned char *)v32 + v33[14]) = v21 & 1;
  sub_1002055E4(v22, v26, type metadata accessor for ObservedAdvertisement);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  return sub_10020005C(v22, type metadata accessor for ObservedAdvertisement);
}

unint64_t sub_100202C88()
{
  return sub_100201F64(*v0);
}

uint64_t sub_100202C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100205D18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100202CB8(uint64_t a1)
{
  unint64_t v2 = sub_1002051E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100202CF4(uint64_t a1)
{
  unint64_t v2 = sub_1002051E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100202D30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002024E8(a1, a2);
}

uint64_t sub_100202D48(void *a1)
{
  return sub_1002020B4(a1);
}

Swift::Int sub_100202D64()
{
  Hasher.init(_seed:)();
  sub_100201BA8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100202DA8()
{
  Hasher.init(_seed:)();
  sub_100201BA8((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100202DE8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163F660);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1002056A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for ObservedAdvertisement.Location(0);
    v8[12] = 3;
    type metadata accessor for Date();
    sub_100204630((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_100202FF0()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for ObservedAdvertisement.Location(0);
  type metadata accessor for Date();
  sub_100204630((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1002030C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163F650);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ObservedAdvertisement.Location(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1002056A0();
  uint64_t v26 = v8;
  char v12 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v5;
    char v31 = 0;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)uint64_t v11 = v16;
    char v30 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 1) = v17;
    char v29 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 2) = v19;
    char v28 = 3;
    sub_100204630(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    Swift::String v27 = v13;
    __int16 v20 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v15);
    uint64_t v21 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v11[*(int *)(v9 + 28)], v27, v3);
    sub_1002054D4((uint64_t)v11, v21, type metadata accessor for ObservedAdvertisement.Location);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_100203408()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100203468()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002034B8()
{
  uint64_t result = 0x6E776F6E6B6E752ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x747365767261682ELL;
      break;
    case 2:
      uint64_t result = 0x6353686365656C2ELL;
      break;
    case 3:
      uint64_t result = 0x6E7363612ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100203554()
{
  unint64_t result = 0x656475746974616CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002035F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100206184(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10020361C(uint64_t a1)
{
  unint64_t v2 = sub_1002056A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100203658(uint64_t a1)
{
  unint64_t v2 = sub_1002056A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100203694@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002030C8(a1, a2);
}

uint64_t sub_1002036AC(void *a1)
{
  return sub_100202DE8(a1);
}

uint64_t sub_1002036C8()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_100204630((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100203784()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_100204630((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100203860()
{
  return sub_100204630(&qword_10163F578, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.Location);
}

uint64_t sub_1002038A8()
{
  uint64_t v1 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 20)))
  {
    if (*(unsigned char *)(v0 + *(int *)(v1 + 20)) == 1)
    {
      unint64_t v2 = 0xEA00000000007972;
      unint64_t v3 = 0x61646E6F6365732ELL;
    }
    else
    {
      unint64_t v2 = 0x80000001013F28C0;
      unint64_t v3 = 0xD000000000000010;
    }
  }
  else
  {
    unint64_t v2 = 0xE800000000000000;
    unint64_t v3 = 0x7972616D6972702ELL;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 47;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 125;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 123;
}

uint64_t sub_1002039C0()
{
  type metadata accessor for UUID();
  sub_100204630((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 47;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  if (*(unsigned char *)(v0 + *(int *)(v3 + 20)))
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 20)) == 1)
    {
      unint64_t v4 = 0xEA00000000007972;
      unint64_t v5 = 0x61646E6F6365732ELL;
    }
    else
    {
      unint64_t v4 = 0x80000001013F28C0;
      unint64_t v5 = 0xD000000000000010;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    unint64_t v5 = 0x7972616D6972702ELL;
  }
  unint64_t v6 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 47;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 125;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 123;
}

uint64_t sub_100203B48(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163F640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_10020553C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  type metadata accessor for UUID();
  sub_100204630(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[14] = *(unsigned char *)(v3 + *(int *)(type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0) + 20));
    v10[13] = 1;
    sub_10020564C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100203D44()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100204630(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_100203E6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10163F628);
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10020553C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v19;
  char v25 = 0;
  sub_100204630((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v21, v4);
  char v23 = 1;
  sub_100205590();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v11 + *(int *)(v8 + 20)) = v24;
  char v22 = 2;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v13);
  *(void *)(v11 + *(int *)(v8 + 24)) = v14;
  sub_1002055E4(v11, v17, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_10020005C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
}

unint64_t sub_100204218()
{
  uint64_t v1 = 0x65636E6575716573;
  if (*v0 != 1) {
    uint64_t v1 = 0x7865646E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100204274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100206348(a1, a2);
  *a3 = result;
  return result;
}

void sub_10020429C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1002042A8(uint64_t a1)
{
  unint64_t v2 = sub_10020553C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002042E4(uint64_t a1)
{
  unint64_t v2 = sub_10020553C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100204320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100203E6C(a1, a2);
}

uint64_t sub_100204338(void *a1)
{
  return sub_100203B48(a1);
}

void sub_10020435C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_100204630(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_100204464(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100204630(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

BOOL sub_100204580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)() & 1) != 0
      && (sub_100719E48(*(unsigned char *)(a1 + *(int *)(a3 + 20)), *(unsigned char *)(a2 + *(int *)(a3 + 20))) & 1) != 0
      && *(void *)(a1 + *(int *)(a3 + 24)) == *(void *)(a2 + *(int *)(a3 + 24));
}

uint64_t sub_1002045E8()
{
  return sub_100204630(&qword_10163F580, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
}

uint64_t sub_100204630(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100204678()
{
  return sub_100204630(&qword_10163F588, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement);
}

unint64_t sub_1002046C4()
{
  unint64_t result = qword_10163F590;
  if (!qword_10163F590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F590);
  }
  return result;
}

uint64_t sub_100204718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

double MacBeaconConfig.initialNoBeaconDuration.getter()
{
  return *(double *)v0;
}

double MacBeaconConfig.fastRollAdvertisementDuration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t sub_100204798(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  type metadata accessor for ObservedAdvertisement.Location(0);

  return static Date.== infix(_:_:)();
}

uint64_t sub_100204820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v73 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v69 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000588C(&qword_10163F618);
  __chkstk_darwin(v71);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164E760);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v70 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v72 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)&v63 - v13;
  uint64_t v14 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v75 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (double *)((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000588C(&qword_10163F620);
  __chkstk_darwin(v17);
  uint64_t v76 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10163CF50);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  char v22 = (double *)((char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __chkstk_darwin(v20);
  char v25 = (char *)&v63 - v24;
  __chkstk_darwin(v23);
  Swift::String v27 = (char *)&v63 - v26;
  char v28 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return v28 & 1;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v28 = 1;
    }
    if (v28) {
      goto LABEL_50;
    }
  }
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)) {
    goto LABEL_50;
  }
  uint64_t v65 = v7;
  uint64_t v66 = v4;
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a2 + 24);
  if ((v30 & 0x2000000000000000) != 0)
  {
    if ((v32 & 0x2000000000000000) == 0) {
      goto LABEL_50;
    }
    unint64_t v63 = v30 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v64 = v32 & 0xDFFFFFFFFFFFFFFFLL;
    sub_1001A1790(v29, v30);
    sub_1001A1790(v31, v32);
    uint64_t v33 = v29;
    unint64_t v34 = v63;
    unint64_t v36 = v64;
    uint64_t v35 = v31;
  }
  else
  {
    if ((v32 & 0x2000000000000000) != 0) {
      goto LABEL_50;
    }
    sub_1001A1790(v29, v30);
    sub_1001A1790(v31, v32);
    uint64_t v33 = v29;
    unint64_t v34 = v30;
    uint64_t v35 = v31;
    unint64_t v36 = v32;
  }
  LODWORD(v64) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v33, v34, v35, v36);
  sub_1001A1AD8(v31, v32);
  sub_1001A1AD8(v29, v30);
  if ((v64 & 1) == 0) {
    goto LABEL_50;
  }
  uint64_t v38 = v67;
  uint64_t v37 = v68;
  if (*(unsigned __int8 *)(v67 + 32) != *(unsigned __int8 *)(v68 + 32)
    || *(unsigned __int8 *)(v67 + 33) != *(unsigned __int8 *)(v68 + 33))
  {
    goto LABEL_50;
  }
  char v28 = *(unsigned char *)(v68 + 35);
  if (*(unsigned char *)(v67 + 35))
  {
    if (!*(unsigned char *)(v68 + 35)) {
      return v28 & 1;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(v67 + 34) != *(unsigned __int8 *)(v68 + 34)) {
      char v28 = 1;
    }
    if (v28) {
      goto LABEL_50;
    }
  }
  if (*(_DWORD *)(v67 + 36) != *(_DWORD *)(v68 + 36)
    || (uint64_t v39 = type metadata accessor for ObservedAdvertisement(0), (static Date.== infix(_:_:)() & 1) == 0))
  {
LABEL_50:
    char v28 = 0;
    return v28 & 1;
  }
  sub_10001D074(v38 + *(int *)(v39 + 48), (uint64_t)v27, &qword_10163CF50);
  unint64_t v64 = v39;
  sub_10001D074(v37 + *(int *)(v39 + 48), (uint64_t)v25, &qword_10163CF50);
  uint64_t v40 = v76;
  uint64_t v41 = v76 + *(int *)(v17 + 48);
  sub_10001D074((uint64_t)v27, v76, &qword_10163CF50);
  sub_10001D074((uint64_t)v25, v41, &qword_10163CF50);
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v42(v40, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v25, &qword_10163CF50);
    sub_10001DAB4((uint64_t)v27, &qword_10163CF50);
    int v43 = v42(v41, 1, v14);
    uint64_t v44 = v66;
    if (v43 == 1)
    {
      sub_10001DAB4(v76, &qword_10163CF50);
      goto LABEL_27;
    }
LABEL_33:
    uint64_t v51 = &qword_10163F620;
    uint64_t v52 = v76;
LABEL_49:
    sub_10001DAB4(v52, v51);
    goto LABEL_50;
  }
  sub_10001D074(v40, (uint64_t)v22, &qword_10163CF50);
  if (v42(v41, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v25, &qword_10163CF50);
    sub_10001DAB4((uint64_t)v27, &qword_10163CF50);
    sub_10020005C((uint64_t)v22, type metadata accessor for ObservedAdvertisement.Location);
    goto LABEL_33;
  }
  sub_1002054D4(v41, (uint64_t)v16, type metadata accessor for ObservedAdvertisement.Location);
  if (*v22 != *v16 || v22[1] != v16[1] || v22[2] != v16[2])
  {
    sub_10020005C((uint64_t)v16, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v54 = &qword_10163CF50;
    sub_10001DAB4((uint64_t)v25, &qword_10163CF50);
    sub_10001DAB4((uint64_t)v27, &qword_10163CF50);
    sub_10020005C((uint64_t)v22, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v52 = v76;
    goto LABEL_48;
  }
  char v53 = static Date.== infix(_:_:)();
  sub_10020005C((uint64_t)v16, type metadata accessor for ObservedAdvertisement.Location);
  sub_10001DAB4((uint64_t)v25, &qword_10163CF50);
  sub_10001DAB4((uint64_t)v27, &qword_10163CF50);
  sub_10020005C((uint64_t)v22, type metadata accessor for ObservedAdvertisement.Location);
  sub_10001DAB4(v76, &qword_10163CF50);
  uint64_t v44 = v66;
  if ((v53 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_27:
  unint64_t v45 = v64;
  uint64_t v46 = v74;
  sub_10001D074(v38 + *(int *)(v64 + 52), v74, &qword_10164E760);
  uint64_t v47 = v72;
  sub_10001D074(v68 + *(int *)(v45 + 52), v72, &qword_10164E760);
  uint64_t v48 = (uint64_t)v65;
  uint64_t v49 = (uint64_t)&v65[*(int *)(v71 + 48)];
  sub_10001D074(v46, (uint64_t)v65, &qword_10164E760);
  sub_10001D074(v47, v49, &qword_10164E760);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v50(v48, 1, v44) != 1)
  {
    uint64_t v55 = v48;
    uint64_t v56 = v70;
    sub_10001D074(v55, v70, &qword_10164E760);
    if (v50(v49, 1, v44) == 1)
    {
      sub_10001DAB4(v47, &qword_10164E760);
      sub_10001DAB4(v46, &qword_10164E760);
      sub_10020005C(v56, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      goto LABEL_42;
    }
    uint64_t v57 = v69;
    sub_1002054D4(v49, v69, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if ((static UUID.== infix(_:_:)() & 1) != 0
      && (sub_100719E48(*(unsigned char *)(v56 + *(int *)(v44 + 20)), *(unsigned char *)(v57 + *(int *)(v44 + 20))) & 1) != 0)
    {
      uint64_t v58 = *(int *)(v44 + 24);
      uint64_t v59 = *(void *)(v56 + v58);
      uint64_t v60 = v56;
      uint64_t v61 = *(void *)(v57 + v58);
      sub_10020005C(v57, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001DAB4(v47, &qword_10164E760);
      sub_10001DAB4(v46, &qword_10164E760);
      sub_10020005C(v60, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001DAB4((uint64_t)v65, &qword_10164E760);
      if (v59 == v61) {
        goto LABEL_30;
      }
      goto LABEL_50;
    }
    sub_10020005C(v57, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v54 = &qword_10164E760;
    sub_10001DAB4(v47, &qword_10164E760);
    sub_10001DAB4(v46, &qword_10164E760);
    sub_10020005C(v56, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v52 = (uint64_t)v65;
LABEL_48:
    uint64_t v51 = v54;
    goto LABEL_49;
  }
  sub_10001DAB4(v47, &qword_10164E760);
  sub_10001DAB4(v46, &qword_10164E760);
  if (v50(v49, 1, v44) != 1)
  {
LABEL_42:
    uint64_t v51 = &qword_10163F618;
    uint64_t v52 = (uint64_t)v65;
    goto LABEL_49;
  }
  sub_10001DAB4((uint64_t)v65, &qword_10164E760);
LABEL_30:
  char v28 = *(unsigned char *)(v38 + *(int *)(v64 + 56)) ^ *(unsigned char *)(v68 + *(int *)(v64 + 56)) ^ 1;
  return v28 & 1;
}

unint64_t sub_10020518C()
{
  unint64_t result = qword_10163F598;
  if (!qword_10163F598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F598);
  }
  return result;
}

unint64_t sub_1002051E0()
{
  unint64_t result = qword_10163F5A8;
  if (!qword_10163F5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5A8);
  }
  return result;
}

unint64_t sub_100205234()
{
  unint64_t result = qword_10163F5B0;
  if (!qword_10163F5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5B0);
  }
  return result;
}

unint64_t sub_100205288()
{
  unint64_t result = qword_10163F5B8;
  if (!qword_10163F5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5B8);
  }
  return result;
}

unint64_t sub_1002052DC()
{
  unint64_t result = qword_10163F5C0;
  if (!qword_10163F5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5C0);
  }
  return result;
}

unint64_t sub_100205330()
{
  unint64_t result = qword_10163F5C8;
  if (!qword_10163F5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5C8);
  }
  return result;
}

unint64_t sub_100205384()
{
  unint64_t result = qword_10163F5E8;
  if (!qword_10163F5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5E8);
  }
  return result;
}

unint64_t sub_1002053D8()
{
  unint64_t result = qword_10163F5F0;
  if (!qword_10163F5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5F0);
  }
  return result;
}

unint64_t sub_10020542C()
{
  unint64_t result = qword_10163F5F8;
  if (!qword_10163F5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F5F8);
  }
  return result;
}

unint64_t sub_100205480()
{
  unint64_t result = qword_10163F600;
  if (!qword_10163F600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F600);
  }
  return result;
}

uint64_t sub_1002054D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10020553C()
{
  unint64_t result = qword_10163F630;
  if (!qword_10163F630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F630);
  }
  return result;
}

unint64_t sub_100205590()
{
  unint64_t result = qword_10163F638;
  if (!qword_10163F638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F638);
  }
  return result;
}

uint64_t sub_1002055E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10020564C()
{
  unint64_t result = qword_10163F648;
  if (!qword_10163F648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F648);
  }
  return result;
}

unint64_t sub_1002056A0()
{
  unint64_t result = qword_10163F658;
  if (!qword_10163F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F658);
  }
  return result;
}

unsigned char *_s12searchpartyd21ObservedAdvertisementV17ObservationSourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002057C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.Location.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.Location.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ObservedAdvertisement.BeaconIndexInformation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002058C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.BeaconIndexInformation.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ObservedAdvertisement.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002059C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.CodingKeys;
}

unint64_t sub_100205A04()
{
  unint64_t result = qword_10163F668;
  if (!qword_10163F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F668);
  }
  return result;
}

unint64_t sub_100205A5C()
{
  unint64_t result = qword_10163F670;
  if (!qword_10163F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F670);
  }
  return result;
}

unint64_t sub_100205AB4()
{
  unint64_t result = qword_10163F678;
  if (!qword_10163F678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F678);
  }
  return result;
}

unint64_t sub_100205B0C()
{
  unint64_t result = qword_10163F680;
  if (!qword_10163F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F680);
  }
  return result;
}

unint64_t sub_100205B64()
{
  unint64_t result = qword_10163F688;
  if (!qword_10163F688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F688);
  }
  return result;
}

unint64_t sub_100205BBC()
{
  unint64_t result = qword_10163F690;
  if (!qword_10163F690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F690);
  }
  return result;
}

unint64_t sub_100205C14()
{
  unint64_t result = qword_10163F698;
  if (!qword_10163F698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F698);
  }
  return result;
}

unint64_t sub_100205C6C()
{
  unint64_t result = qword_10163F6A0;
  if (!qword_10163F6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F6A0);
  }
  return result;
}

unint64_t sub_100205CC4()
{
  unint64_t result = qword_10163F6A8;
  if (!qword_10163F6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F6A8);
  }
  return result;
}

uint64_t sub_100205D18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449766461 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7369747265766461 && a2 == 0xED0000746E656D65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79654B6172747865 && a2 == 0xEC00000073746942 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1769173874 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x657461446E616373 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x68736F507369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_100206184(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656475746974616CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013EF030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100206348(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for MessagingCapability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100206560);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingCapability()
{
  return &type metadata for MessagingCapability;
}

unint64_t sub_10020659C()
{
  unint64_t result = qword_10163F6B0;
  if (!qword_10163F6B0)
  {
    sub_10000592C(&qword_10163F6B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F6B0);
  }
  return result;
}

void sub_1002065F8(void *a1@<X8>)
{
  *a1 = &off_1015A0B58;
}

unint64_t sub_10020660C()
{
  unint64_t result = qword_10163F6C0;
  if (!qword_10163F6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F6C0);
  }
  return result;
}

uint64_t sub_100206660(void *a1)
{
  id v2 = [a1 recordZoneID];

  if (v2)
  {
    int v3 = (char *)[a1 databaseScope];
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    *(void *)(v4 + 56) = sub_10001D4B0(0, &qword_10163F6F0);
    *(void *)(v4 + 64) = sub_100206F48(&qword_10163F6F8, &qword_10163F6F0);
    *(void *)(v4 + 32) = a1;
    id v5 = a1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if ((unint64_t)(v3 - 2) >= 2)
    {
      if (v3 == (char *)1)
      {
        static os_log_type_t.default.getter();
        return os_log(_:dso:log:_:_:)();
      }
      else
      {
        static os_log_type_t.error.getter();
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_101342130;
        type metadata accessor for Scope(0);
        uint64_t v10 = String.init<A>(describing:)();
        uint64_t v12 = v11;
        *(void *)(v9 + 56) = &type metadata for String;
        *(void *)(v9 + 64) = sub_10000B4CC();
        *(void *)(v9 + 32) = v10;
        *(void *)(v9 + 40) = v12;
        os_log(_:dso:log:_:_:)();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      return QueueSynchronizer.conditionalSync<A>(_:)();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    *(void *)(v7 + 56) = sub_10001D4B0(0, &qword_10163F6F0);
    *(void *)(v7 + 64) = sub_100206F48(&qword_10163F6F8, &qword_10163F6F0);
    *(void *)(v7 + 32) = a1;
    id v8 = a1;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

void sub_1002069FC(void *a1)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  *(void *)(v2 + 56) = sub_10001D4B0(0, &qword_10163F6C8);
  *(void *)(v2 + 64) = sub_100206F48(&qword_10163F6D0, &qword_10163F6C8);
  *(void *)(v2 + 32) = a1;
  id v3 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v4 = [v3 userInfo];
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x100206F38);
  }
  id v5 = v4;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = [self notificationFromRemoteNotificationDictionary:isa];

  if (v21)
  {
    switch((unint64_t)[v21 notificationType])
    {
      case 1uLL:
      case 3uLL:
        goto LABEL_13;
      case 2uLL:
        self;
        uint64_t v11 = swift_dynamicCastObjCClass();
        if (!v11) {
          goto LABEL_13;
        }
        uint64_t v12 = (void *)v11;
        id v21 = v21;
        sub_100206660(v12);
        goto LABEL_11;
      case 4uLL:
        self;
        uint64_t v13 = swift_dynamicCastObjCClass();
        if (v13)
        {
          uint64_t v14 = v13;
          id v15 = v21;
          static os_log_type_t.default.getter();
          uint64_t v16 = swift_allocObject();
          *(_OWORD *)(v16 + 16) = xmmword_101342130;
          *(void *)(v16 + 56) = sub_10001D4B0(0, &qword_10163F6E0);
          *(void *)(v16 + 64) = sub_100206F48(&qword_10163F6E8, &qword_10163F6E0);
          *(void *)(v16 + 32) = v14;
          id v21 = v15;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          QueueSynchronizer.conditionalSync<A>(_:)();
LABEL_11:
        }
        else
        {
LABEL_13:
          static os_log_type_t.error.getter();
          os_log(_:dso:log:_:_:)();
        }

        break;
      default:
        static os_log_type_t.error.getter();
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_101342130;
        type metadata accessor for NotificationType(0);
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v20 = v19;
        *(void *)(v17 + 56) = &type metadata for String;
        *(void *)(v17 + 64) = sub_10000B4CC();
        *(void *)(v17 + 32) = v18;
        *(void *)(v17 + 40) = v20;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        return;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    sub_10000588C(&qword_10163F6D8);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100206F48(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D4B0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100206F98()
{
  return sub_10100CE48(v0);
}

void *sub_100206FB4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for OwnerSharingCircle();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    void v14[2] = v4 + 32;
    id v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 20), v3);
      uint64_t v18 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      void v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void *sub_1002071CC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for MemberSharingCircle();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    void v14[2] = v4 + 32;
    id v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 28), v3);
      uint64_t v18 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      void v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1002073E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D9D8);
  sub_100010324(v0, (uint64_t)qword_10170D9D8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100207468()
{
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_10170D9D8);
}

uint64_t sub_1002074CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 88) = a6;
  *(void *)(v7 + 96) = v6;
  *(unsigned char *)(v7 + 144) = a4;
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a5;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 64) = a2;
  return _swift_task_switch(sub_1002074F8, v6, 0);
}

uint64_t sub_1002074F8()
{
  uint64_t v24 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  unint64_t v1 = v0[11];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D9D8);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[7];
    uint64_t v19 = v0[11];
    uint64_t v20 = v0[10];
    uint64_t v18 = v0[8];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    uint64_t v22 = 0x7972616D6972702ELL;
    unint64_t v23 = 0xEA0000000000282FLL;
    v0[2] = v5;
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 41;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v0[3] = sub_1008FA0F0(v22, v23, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v22 = 0x7972616D6972702ELL;
    unint64_t v23 = 0xEA0000000000282FLL;
    v0[4] = v18;
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v0[5] = sub_1008FA0F0(v22, v23, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    if (v19) {
      uint64_t v11 = v20;
    }
    else {
      uint64_t v11 = 0x6C646E75622D6F6ELL;
    }
    if (v19) {
      unint64_t v12 = v1;
    }
    else {
      unint64_t v12 = 0xE900000000000065;
    }
    swift_bridgeObjectRetain();
    v0[6] = sub_1008FA0F0(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharingService begin fetchSharedBeacons. Index start: %s, End: %s, bundle: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v13 = (void *)swift_task_alloc();
  v0[13] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1002078A4;
  uint64_t v14 = v0[8];
  uint64_t v15 = v0[9];
  uint64_t v16 = v0[7];
  return sub_100207C20(v16, v14, v15);
}

uint64_t sub_1002078A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(v6 + 112) = a1;
  *(void *)(v6 + 120) = a2;
  swift_task_dealloc();
  if (v2)
  {
    Swift::String v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = swift_task_alloc();
    *(void *)(v6 + 128) = v10;
    *(void *)uint64_t v10 = v7;
    *(void *)(v10 + 8) = sub_100207A58;
    uint64_t v11 = *(void *)(v6 + 96);
    char v12 = *(unsigned char *)(v6 + 144);
    long long v13 = *(_OWORD *)(v6 + 80);
    *(void *)(v10 + 64) = v11;
    *(_OWORD *)(v10 + 48) = v13;
    *(unsigned char *)(v10 + 176) = v12;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
    return _swift_task_switch(sub_100210E84, v11, 0);
  }
}

uint64_t sub_100207A58(uint64_t a1)
{
  os_log_type_t v4 = (void *)*v2;
  v4[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[12];
    return _swift_task_switch(sub_100207BB4, v5, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(a1);
  }
}

uint64_t sub_100207BB4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100207C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[88] = v3;
  v4[87] = a3;
  v4[86] = a2;
  v4[85] = a1;
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v4[89] = v5;
  v4[90] = *(void *)(v5 - 8);
  v4[91] = swift_task_alloc();
  v4[92] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HashAlgorithm();
  v4[93] = v6;
  v4[94] = *(void *)(v6 - 8);
  v4[95] = swift_task_alloc();
  sub_10000588C(&qword_10163F758);
  v4[96] = swift_task_alloc();
  v4[97] = swift_task_alloc();
  v4[98] = *(void *)(type metadata accessor for KeyDropFetchItem(0) - 8);
  v4[99] = swift_task_alloc();
  v4[100] = swift_task_alloc();
  v4[101] = sub_10000588C((uint64_t *)&unk_101653D50);
  v4[102] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  v4[103] = v7;
  v4[104] = *(void *)(v7 - 8);
  v4[105] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v4[106] = v8;
  v4[107] = *(void *)(v8 - 8);
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  v4[110] = swift_task_alloc();
  v4[111] = swift_task_alloc();
  v4[112] = swift_task_alloc();
  v4[113] = swift_task_alloc();
  v4[114] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MemberSharingCircle();
  v4[115] = v9;
  v4[116] = *(void *)(v9 - 8);
  v4[117] = swift_task_alloc();
  v4[118] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v4[119] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[120] = v11;
  v4[121] = *(void *)(v11 + 64);
  v4[122] = swift_task_alloc();
  v4[123] = swift_task_alloc();
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  v4[126] = swift_task_alloc();
  v4[127] = swift_task_alloc();
  v4[128] = swift_task_alloc();
  v4[129] = swift_task_alloc();
  return _swift_task_switch(sub_100208094, v3, 0);
}

uint64_t sub_100208094()
{
  uint64_t v1 = *(void *)(v0 + 696);
  *(void *)(v0 + 656) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1040) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 704);
    *(_DWORD *)(v0 + 1680) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1064) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v0 + 1048) = 0u;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v4, v0 + 184);
    uint64_t v5 = *(void *)(v3 + 136);
    *(void *)(v0 + 1072) = v5;
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v6);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v6);
    return _swift_task_switch(sub_100208398, v5, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void *, void *))(v0 + 8);
    return v8(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_100208398()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 1032);
  uint64_t v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 960);
  uint64_t v5 = *(void *)(v0 + 952);
  *(void *)(v0 + 1080) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1088) = v6;
  *(void *)(v0 + 1096) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v3, v2, v5);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1684) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 1104) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 1112) = v10;
  *(void *)(v0 + 1120) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_1002084F0, 0, 0);
}

uint64_t sub_1002084F0()
{
  uint64_t v1 = v0[138];
  uint64_t v2 = v0[135];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[141] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C484;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[142] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  void *v4 = v0;
  v4[1] = sub_100208634;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 79, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_100208634()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1072);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1144) = *(void *)(v1 + 632);
  return _swift_task_switch(sub_1002087D8, v2, 0);
}

uint64_t sub_1002087D8()
{
  uint64_t v1 = v0[129];
  uint64_t v2 = v0[120];
  uint64_t v3 = v0[119];
  uint64_t v4 = v0[88];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[144] = v5;
  v0[145] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  return _swift_task_switch(sub_100208894, v4, 0);
}

uint64_t sub_100208894()
{
  uint64_t v1 = *(void *)(v0 + 1144);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1168) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 944);
    uint64_t v4 = *(void *)(v0 + 928);
    uint64_t v5 = *(void *)(v0 + 920);
    uint64_t v6 = *(void *)(v0 + 704);
    uint64_t v7 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1688) = v7;
    uint64_t v8 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1692) = v8;
    *(void *)(v0 + 1176) = *(void *)(v6 + 128);
    LODWORD(v6) = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1696) = v6;
    *(void *)(v0 + 1184) = *(void *)(v4 + 72);
    uint64_t v9 = *(void *)(v0 + 1048);
    *(void *)(v0 + 1208) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1200) = 0;
    *(void *)(v0 + 1192) = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
    uint64_t v11 = *(void *)(v0 + 1016);
    uint64_t v12 = *(void *)(v0 + 1008);
    uint64_t v13 = *(void *)(v0 + 952);
    uint64_t v14 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    uint64_t v15 = v3 + v8;
    uint64_t v16 = v3 + v7;
    swift_bridgeObjectRetain();
    sub_10025C504(v14, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v10(v11, v16, v13);
    v10(v12, v15, v13);
    sub_10025C56C(v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v17 = sub_100208BC0;
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 1064);
    uint64_t v20 = *(void *)(v0 + 1048);
    sub_100442FEC((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = *(void *)(v0 + 1040);
    uint64_t v22 = *(void *)(v0 + 1056) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
    if (v22 == v21)
    {
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 1704) = enum case for HashAlgorithm.sha256(_:);
      *(void *)(v0 + 1392) = v19;
      *(void *)(v0 + 1384) = 0;
      uint64_t v23 = *(void *)(v0 + 1072);
      uint64_t v24 = *(void *)(v0 + 696) + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v24, v0 + 144);
      uint64_t v25 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v25);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8) + 32))(v25);
      uint64_t v17 = sub_10020BB34;
      uint64_t v18 = v23;
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 1056) + 1;
      *(void *)(v0 + 1064) = v19;
      *(void *)(v0 + 1056) = v27;
      *(void *)(v0 + 1048) = v20;
      uint64_t v28 = *(void *)(v0 + 704);
      sub_10001D010(*(void *)(v0 + 696) + 40 * v27 + 32, v0 + 184);
      uint64_t v29 = *(void *)(v28 + 136);
      *(void *)(v0 + 1072) = v29;
      uint64_t v30 = *(void *)(v0 + 208);
      uint64_t v31 = *(void *)(v0 + 216);
      sub_10001CD44((void *)(v0 + 184), v30);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 32))(v30);
      uint64_t v17 = sub_100208398;
      uint64_t v18 = v29;
    }
  }
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_100208BC0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1176) + 120);
  *(void *)(v0 + 1216) = v1;
  return _swift_task_switch(sub_100208C54, v1, 0);
}

uint64_t sub_100208C54()
{
  uint64_t v1 = *(void *)(v0 + 1216);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1112);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v5 = *(void *)(v0 + 1016);
  uint64_t v6 = *(void *)(v0 + 952);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1684) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1684);
  *(void *)(v0 + 1224) = *(void *)(v1 + 136);
  v3(v4, v5, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1232) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100208D84, 0, 0);
}

uint64_t sub_100208D84()
{
  uint64_t v1 = v0[154];
  uint64_t v2 = v0[153];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[155] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[156] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  void *v4 = v0;
  v4[1] = sub_100208EC8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 75, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C998, v3, v5);
}

uint64_t sub_100208EC8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1256) = *(void *)(v1 + 600);
  return _swift_task_switch(sub_100209050, 0, 0);
}

uint64_t sub_100209050()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[158] = v1;
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[157];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[149];
  sub_100CB9100(v0[157], v0 + 10);
  v0[159] = v7;
  if (v7)
  {
    v0[162] = v7;
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v9 = v0[127];
    uint64_t v10 = v0[126];
    uint64_t v11 = v0[119];
    uint64_t v12 = v0[88];
    swift_bridgeObjectRelease();
    v8(v10, v11);
    v8(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1002097B8;
    uint64_t v14 = v12;
  }
  else
  {
    uint64_t v14 = v0[147];
    uint64_t v13 = sub_10020928C;
  }
  return _swift_task_switch(v13, v14, 0);
}

uint64_t sub_10020928C()
{
  unint64_t v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    unsigned char *v3 = 12;
    swift_willThrow();
    sub_1001300CC(v0 + 10);
    v0[162] = v2;
    BOOL v4 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v5 = v0[127];
    uint64_t v6 = v0[126];
    uint64_t v7 = v0[119];
    uint64_t v8 = v0[88];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1002097B8;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v19 = (void (*)(char *, uint64_t, uint64_t))v0[136];
    uint64_t v20 = v0[127];
    uint64_t v12 = v0[126];
    uint64_t v13 = v0[119];
    uint64_t v14 = (uint64_t *)v0[114];
    uint64_t v15 = v0[106];
    uint64_t v18 = v0[88];
    uint64_t v16 = v0[15];
    sub_1000361E0(v16, v1);
    sub_1001300CC(v0 + 10);
    v19((char *)v14 + *(int *)(v15 + 20), v12, v13);
    *uint64_t v14 = v16;
    v14[1] = v1;
    v11(v12, v13);
    v11(v20, v13);
    uint64_t v9 = sub_100209488;
    uint64_t v10 = v18;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_100209488()
{
  sub_10025C504(*(void *)(v0 + 912), *(void *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A70010(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1208));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A70010(v3 > 1, v4 + 1, 1, v2);
  }
  *(void *)(v0 + 1280) = v2;
  uint64_t v5 = *(void *)(v0 + 1168);
  uint64_t v6 = *(void *)(v0 + 912);
  uint64_t v7 = *(void *)(v0 + 904);
  uint64_t v8 = *(void *)(v0 + 856);
  uint64_t v9 = *(void *)(v0 + 1200) + 1;
  *(void *)(v2 + 16) = v4 + 1;
  int v10 = *(_DWORD *)(v8 + 80);
  *(_DWORD *)(v0 + 1700) = v10;
  uint64_t v11 = *(void *)(v8 + 72);
  *(void *)(v0 + 1288) = v11;
  sub_10025C5CC(v7, v2 + ((v10 + 32) & ~(unint64_t)v10) + v11 * v4, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_10025C56C(v6, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  if (v9 == v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v0 + 1272);
    *(void *)(v0 + 1320) = *(void *)(v0 + 1064);
    *(void *)(v0 + 1312) = 0;
    *(void *)(v0 + 1304) = v12;
    uint64_t v13 = *(void *)(v0 + 1144);
    if (!*(void *)(v13 + 16)) {
      __break(1u);
    }
    uint64_t v14 = *(void *)(v0 + 1072);
    sub_10025C504(v13 + ((*(unsigned __int8 *)(v0 + 1696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1696)), *(void *)(v0 + 936), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v15);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v15);
    uint64_t v17 = sub_100209C84;
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 1272);
    uint64_t v20 = *(void *)(v0 + 1200) + 1;
    *(void *)(v0 + 1208) = v2;
    *(void *)(v0 + 1200) = v20;
    *(void *)(v0 + 1192) = v19;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
    uint64_t v22 = *(void *)(v0 + 1016);
    uint64_t v23 = *(void *)(v0 + 1008);
    uint64_t v24 = *(void *)(v0 + 952);
    uint64_t v25 = *(void *)(v0 + 944);
    uint64_t v26 = v25 + *(int *)(v0 + 1692);
    uint64_t v27 = v25 + *(int *)(v0 + 1688);
    sub_10025C504(*(void *)(v0 + 1144)+ ((*(unsigned __int8 *)(v0 + 1696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1696))+ *(void *)(v0 + 1184) * v20, v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v21(v22, v27, v24);
    v21(v23, v26, v24);
    sub_10025C56C(v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v17 = sub_100208BC0;
    uint64_t v18 = 0;
  }
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_1002097B8()
{
  uint64_t v31 = v0;
  unint64_t v1 = (void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 1064);
  if (qword_101636908 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 1264), (uint64_t)qword_10170D9D8);
  sub_10001D010(v0 + 184, v0 + 304);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
    uint64_t v5 = *(void *)(v0 + 1032);
    uint64_t v6 = *(void *)(v0 + 952);
    uint64_t v29 = v2;
    uint64_t v7 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 576) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 336);
    sub_10001CD44((void *)(v0 + 304), v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v9);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    v27(v5, v6);
    *(void *)(v0 + 584) = sub_1008FA0F0(v10, v12, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = (void *)(v0 + 184);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    *(_WORD *)(v7 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    *(void *)(v0 + 608) = sub_1008FA0F0(v13, v14, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v29;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v15 = *(void *)(v0 + 1040);
  uint64_t v16 = *(void *)(v0 + 1056) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v16 == v15)
  {
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 1704) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1392) = v2;
    *(void *)(v0 + 1384) = 0;
    uint64_t v17 = *(void *)(v0 + 1072);
    uint64_t v18 = *(void *)(v0 + 696) + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v18, v0 + 144);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v20 = *(void *)(v0 + 176);
    sub_10001CD44((void *)(v0 + 144), v19);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v19);
    uint64_t v21 = sub_10020BB34;
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 1056) + 1;
    *(void *)(v0 + 1064) = v2;
    *(void *)(v0 + 1056) = v22;
    *(void *)(v0 + 1048) = 0;
    uint64_t v23 = *(void *)(v0 + 704);
    sub_10001D010(*(void *)(v0 + 696) + 40 * v22 + 32, (uint64_t)v1);
    uint64_t v17 = *(void *)(v23 + 136);
    *(void *)(v0 + 1072) = v17;
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v25 = *(void *)(v0 + 216);
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
    uint64_t v21 = sub_100208398;
  }
  return _swift_task_switch(v21, v17, 0);
}

uint64_t sub_100209C84()
{
  unint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1112);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  uint64_t v3 = *(void *)(v0 + 1072);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v5 = *(void *)(v0 + 1024);
  uint64_t v6 = *(void *)(v0 + 952);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1684) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1684);
  *(void *)(v0 + 1328) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1336) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100209DB4, 0, 0);
}

uint64_t sub_100209DB4()
{
  unint64_t v1 = v0;
  uint64_t v2 = v0[167];
  uint64_t v3 = v1[166];
  uint64_t v4 = (void *)swift_task_alloc();
  v1[168] = v4;
  v4[2] = v3;
  v4[3] = sub_10025C4B4;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[169] = v5;
  void *v5 = v1;
  v5[1] = sub_100209EEC;
  uint64_t v6 = v1[102];
  uint64_t v7 = v1[101];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v4, v7);
}

uint64_t sub_100209EEC()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1152);
  uint64_t v2 = *(void *)(*(void *)v0 + 1032);
  uint64_t v3 = *(void *)(*(void *)v0 + 952);
  uint64_t v4 = *(void *)(*(void *)v0 + 704);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_10020A0D4, v4, 0);
}

uint64_t sub_10020A0D4()
{
  uint64_t v143 = v0;
  uint64_t v2 = (void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 824);
  uint64_t v4 = *(void *)(v0 + 816);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 832) + 48))(v4, 1, v3) == 1)
  {
    sub_10025C56C(*(void *)(v0 + 936), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v4, (uint64_t *)&unk_101653D50);
    unint64_t v5 = *(void *)(v0 + 1312) + 1;
    if (v5 == *(void *)(v0 + 1168))
    {
      uint64_t v6 = *(void *)(v0 + 1304);
      uint64_t v1 = *(void *)(v0 + 1320);
      swift_bridgeObjectRelease();
      sub_100442FEC(*(void *)(v0 + 1280));
LABEL_4:
      uint64_t v7 = *(void *)(v0 + 1040);
      uint64_t v8 = *(void *)(v0 + 1056) + 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        *(_DWORD *)(v0 + 1704) = enum case for HashAlgorithm.sha256(_:);
        *(void *)(v0 + 1392) = v1;
        *(void *)(v0 + 1384) = 0;
        uint64_t v9 = *(void *)(v0 + 1072);
        uint64_t v10 = *(void *)(v0 + 696) + 32;
        swift_bridgeObjectRetain();
        sub_10001D010(v10, v0 + 144);
        uint64_t v11 = *(void *)(v0 + 168);
        uint64_t v12 = *(void *)(v0 + 176);
        sub_10001CD44((void *)(v0 + 144), v11);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v11);
        uint64_t v13 = sub_10020BB34;
        uint64_t v14 = v9;
LABEL_14:
        return _swift_task_switch(v13, v14, 0);
      }
      uint64_t v27 = *(void *)(v0 + 1056) + 1;
      *(void *)(v0 + 1064) = v1;
      *(void *)(v0 + 1056) = v27;
      *(void *)(v0 + 1048) = v6;
      uint64_t v28 = *(void *)(v0 + 704);
      sub_10001D010(*(void *)(v0 + 696) + 40 * v27 + 32, (uint64_t)v2);
      uint64_t v23 = *(void *)(v28 + 136);
      *(void *)(v0 + 1072) = v23;
      uint64_t v29 = *(void *)(v0 + 208);
      uint64_t v30 = *(void *)(v0 + 216);
      sub_10001CD44(v2, v29);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v30 + 8) + 8) + 32))(v29);
      uint64_t v26 = sub_100208398;
LABEL_13:
      uint64_t v13 = v26;
      uint64_t v14 = v23;
      goto LABEL_14;
    }
    *(void *)(v0 + 1312) = v5;
    uint64_t v22 = *(void *)(v0 + 1144);
    if (v5 < *(void *)(v22 + 16))
    {
      uint64_t v23 = *(void *)(v0 + 1072);
      sub_10025C504(v22+ ((*(unsigned __int8 *)(v0 + 1696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1696))+ *(void *)(v0 + 1184) * v5, *(void *)(v0 + 936), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v24 = *(void *)(v0 + 208);
      uint64_t v25 = *(void *)(v0 + 216);
      sub_10001CD44((void *)(v0 + 184), v24);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
      uint64_t v26 = sub_100209C84;
      goto LABEL_13;
    }
LABEL_126:
    __break(1u);
LABEL_127:
    swift_once();
LABEL_18:
    sub_100010324(*(void *)(v0 + 1264), (uint64_t)qword_10170D9D8);
    sub_10001D010((uint64_t)v2, (uint64_t)v141);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      os_log_type_t type = v36;
      uint64_t v37 = *(void *)(v0 + 1032);
      uint64_t v131 = *(void *)(v0 + 952);
      char v132 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
      uint64_t v38 = swift_slowAlloc();
      v142[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 141558531;
      *(void *)(v0 + 576) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2081;
      loga = v35;
      uint64_t v40 = *(void *)(v0 + 328);
      uint64_t v39 = *(void *)(v0 + 336);
      sub_10001CD44(v141, v40);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v39 + 8) + 8) + 32))(v40);
      sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v43 = v42;
      v132(v37, v131);
      *(void *)(v0 + 584) = sub_1008FA0F0(v41, v43, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v141);
      *(_WORD *)(v38 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v44 = Error.localizedDescription.getter();
      *(void *)(v0 + 608) = sub_1008FA0F0(v44, v45, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v141);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v6 = 0;
    goto LABEL_4;
  }
  uint64_t v141 = (void *)(v0 + 304);
  unint64_t v138 = (void **)(v0 + 616);
  __dst = (void *)(v0 + 456);
  uint64_t v15 = *(void *)(v0 + 840);
  sub_10025C5CC(v4, v15, type metadata accessor for SharedBeaconRecord);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  sub_10001CD44((void *)(v0 + 184), v17);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
  uint64_t v18 = *(unsigned __int8 *)(v15 + *(int *)(v3 + 64));
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 216);
  sub_10001CD44((void *)(v0 + 184), v19);
  char v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v19, v20);
  switch(v18)
  {
    case 1:
    case 4:
      if (v21) {
        LOBYTE(v18) = 2;
      }
      else {
        LOBYTE(v18) = 1;
      }
      goto LABEL_22;
    case 2:
      LOBYTE(v18) = 0;
      goto LABEL_22;
    case 3:
LABEL_22:
      char v133 = v18;
      uint64_t v46 = *(void *)(v0 + 1280);
      (*(void (**)(void, void, void))(v0 + 1088))(*(void *)(v0 + 992), *(void *)(v0 + 936) + *(int *)(*(void *)(v0 + 920) + 28), *(void *)(v0 + 952));
      int64_t v47 = *(void *)(v46 + 16);
      uint64_t v48 = _swiftEmptyArrayStorage;
      if (!v47) {
        goto LABEL_98;
      }
      *(void *)(v0 + 616) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000B7930(0, v47, 0);
      uint64_t v49 = 0;
      uint64_t v1 = *(void *)(v0 + 1304);
      int64_t v137 = v47;
      break;
    default:
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
      uint64_t v32 = *(void *)(v0 + 1000);
      uint64_t v33 = *(void *)(v0 + 952);
      os_log_t log = *(os_log_t *)(v0 + 936);
      uint64_t v34 = *(void *)(v0 + 840);
      type metadata accessor for SPBeaconSharingError(0);
      *(void *)(v0 + 672) = 2;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10025C710((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      v31(v32, v33);
      sub_10025C56C(v34, type metadata accessor for SharedBeaconRecord);
      sub_10025C56C((uint64_t)log, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v1 = *(void *)(v0 + 1320);
      if (qword_101636908 == -1) {
        goto LABEL_18;
      }
      goto LABEL_127;
  }
  while (2)
  {
    uint64_t v50 = *(uint64_t **)(v0 + 896);
    uint64_t v51 = *(void *)(v0 + 1280)
        + ((*(unsigned __int8 *)(v0 + 1700) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
        + *(void *)(v0 + 1288) * v49;
    uint64_t v52 = v49 + 1;
    sub_10025C504(v51, (uint64_t)v50, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v53 = *v50;
    unint64_t v54 = v50[1];
    uint64_t v2 = (void *)(v54 >> 62);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    switch(v54 >> 62)
    {
      case 1uLL:
        uint64_t v56 = (int)v53;
        uint64_t v55 = v53 >> 32;
        sub_1000361E0(v53, v54);
        if (v53 >> 32 < (int)v53) {
          goto LABEL_112;
        }
        uint64_t v57 = v53 >> 32;
        uint64_t v58 = (int)v53;
        goto LABEL_30;
      case 2uLL:
        uint64_t v56 = *(void *)(v53 + 16);
        uint64_t v55 = *(void *)(v53 + 24);
        sub_1000361E0(v53, v54);
        if (v55 < v56)
        {
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        uint64_t v58 = *(void *)(v53 + 16);
        uint64_t v57 = *(void *)(v53 + 24);
LABEL_30:
        if (v57 < v55 || v55 < v58) {
          goto LABEL_113;
        }
        if (__OFSUB__(v55, v56)) {
          goto LABEL_114;
        }
        if ((unint64_t)(v55 - v56) < 0x39)
        {
          uint64_t v59 = (size_t *)(v0 + 648);
          switch((int)v2)
          {
            case 1:
              uint64_t v60 = v53 >> 32;
              goto LABEL_45;
            case 2:
              uint64_t v60 = *(void *)(v53 + 24);
              goto LABEL_46;
            default:
              goto LABEL_48;
          }
        }
        uint64_t v60 = v56 + 57;
        if (__OFADD__(v56, 57)) {
          goto LABEL_118;
        }
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v59 = (size_t *)(v0 + 648);
        switch((int)v2)
        {
          case 1:
            uint64_t v62 = (int)v53;
            uint64_t v61 = v53 >> 32;
            break;
          case 2:
            uint64_t v62 = *(void *)(v53 + 16);
            uint64_t v61 = *(void *)(v53 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v62 = 0;
            uint64_t v61 = BYTE6(v54);
            break;
        }
        if (v61 < v60 || v60 < v62) {
          goto LABEL_119;
        }
        uint64_t v63 = 0;
        switch((int)v2)
        {
          case 1:
LABEL_45:
            uint64_t v63 = (int)v53;
            break;
          case 2:
LABEL_46:
            uint64_t v63 = *(void *)(v53 + 16);
            break;
          default:
            break;
        }
        if (v60 < v63) {
          goto LABEL_115;
        }
        break;
      case 3uLL:
        goto LABEL_30;
      default:
        uint64_t v56 = 0;
        uint64_t v58 = 0;
        uint64_t v55 = BYTE6(v54);
        uint64_t v57 = BYTE6(v54);
        goto LABEL_30;
    }
LABEL_48:
    uint64_t v2 = (void *)Data._Representation.subscript.getter();
    unint64_t v65 = v64;
    sub_10001CFB8(v53, v54);
    switch(v65 >> 62)
    {
      case 1uLL:
        LODWORD(v66) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2)) {
          goto LABEL_120;
        }
        uint64_t v66 = (int)v66;
LABEL_53:
        if (v66 != 57)
        {
LABEL_86:
          sub_10001CFB8((uint64_t)v2, v65);
          return _assertionFailure(_:_:file:line:flags:)();
        }
        sub_1000361E0((uint64_t)v2, v65);
        uint64_t v70 = sub_100A948F8((uint64_t)v2, v65);
        if (v1)
        {
          uint64_t v100 = v1;
          uint64_t v101 = v2;
          goto LABEL_103;
        }
        uint64_t v1 = v70;
        *uint64_t v59 = 57;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v71 = __DataStorage.init(length:)();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
            goto LABEL_122;
          }
          swift_allocObject();
          uint64_t v72 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          swift_release();
          uint64_t v71 = v72;
        }
        if (!__DataStorage._bytes.getter()) {
          goto LABEL_130;
        }
        if (__OFSUB__(0, __DataStorage._offset.getter())) {
          goto LABEL_116;
        }
        __DataStorage._length.getter();
        int v73 = CCECCryptorExportKey();
        if (!v73)
        {
          if ((*v59 & 0x8000000000000000) != 0) {
            goto LABEL_117;
          }
          if (*v59 >= 0x39) {
            size_t v74 = 57;
          }
          else {
            size_t v74 = *v59;
          }
          if (!v74)
          {
            swift_release();
            CCECCryptorRelease();
            sub_10001CFB8((uint64_t)v2, v65);
            uint64_t v75 = 0;
            uint64_t v111 = 0;
            unint64_t v76 = 0xC000000000000000;
LABEL_109:
            sub_10013019C();
            uint64_t v122 = swift_allocError();
            *(void *)uint64_t v128 = 28;
            *(void *)(v128 + 8) = v111;
            *(unsigned char *)(v128 + 16) = 0;
            swift_willThrow();
            unint64_t v124 = v76;
            uint64_t v125 = v75;
            goto LABEL_110;
          }
          if (v74 <= 0xE)
          {
            *(void *)(v0 + 462) = 0;
            void *__dst = 0;
            *(unsigned char *)(v0 + 470) = v74;
            swift_retain();
            uint64_t v77 = __DataStorage._bytes.getter();
            uint64_t v136 = v52;
            if (v77)
            {
              uint64_t v78 = __DataStorage._offset.getter();
              uint64_t v79 = -v78;
              if (__OFSUB__(0, v78)) {
                goto LABEL_125;
              }
              uint64_t v80 = v2;
              unint64_t v81 = v65;
              __DataStorage._length.getter();
              memcpy(__dst, (const void *)(v77 + v79), v74);
              uint64_t v77 = *(unsigned __int8 *)(v0 + 468);
              uint64_t v82 = *(unsigned __int8 *)(v0 + 469);
              size_t v74 = *(unsigned __int8 *)(v0 + 470);
            }
            else
            {
              uint64_t v80 = v2;
              unint64_t v81 = v65;
              size_t v74 = v74;
              __DataStorage._length.getter();
              uint64_t v82 = 0;
            }
            uint64_t v75 = *(void *)(v0 + 456);
            uint64_t v83 = *(unsigned int *)(v0 + 464);
            swift_release_n();
            unint64_t v76 = v83 | (v77 << 32) | (v82 << 40) | (v74 << 48);
            unint64_t v65 = v81;
            uint64_t v2 = v80;
            uint64_t v52 = v136;
          }
          else
          {
            uint64_t v75 = v74 << 32;
            unint64_t v76 = v71 | 0x4000000000000000;
          }
          CCECCryptorRelease();
          sub_10001CFB8((uint64_t)v2, v65);
          unint64_t v84 = v76 >> 62;
          switch(v76 >> 62)
          {
            case 1uLL:
              LODWORD(v85) = HIDWORD(v75) - v75;
              if (__OFSUB__(HIDWORD(v75), v75)) {
                goto LABEL_123;
              }
              uint64_t v85 = (int)v85;
LABEL_79:
              if (v85 != 28)
              {
                if (!v84)
                {
                  uint64_t v111 = BYTE6(v76);
                  goto LABEL_109;
                }
                if (v84 == 1)
                {
                  if (!__OFSUB__(HIDWORD(v75), v75))
                  {
                    uint64_t v111 = HIDWORD(v75) - (int)v75;
                    goto LABEL_109;
                  }
                  __break(1u);
                }
                else
                {
                  uint64_t v127 = *(void *)(v75 + 16);
                  uint64_t v126 = *(void *)(v75 + 24);
                  uint64_t v111 = v126 - v127;
                  if (!__OFSUB__(v126, v127)) {
                    goto LABEL_109;
                  }
                }
                __break(1u);
LABEL_130:
                __break(1u);
              }
              uint64_t v88 = (uint64_t)v2;
              uint64_t v89 = v52;
              uint64_t v90 = *(unsigned int *)(v0 + 1680);
              uint64_t v91 = *(void *)(v0 + 896);
              uint64_t v92 = *(void *)(v0 + 760);
              uint64_t v93 = *(void *)(v0 + 752);
              uint64_t v94 = *(void *)(v0 + 744);
              sub_10001CFB8(v88, v65);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 104))(v92, v90, v94);
              uint64_t v141 = (void *)Data.hash(algorithm:)();
              uint64_t v96 = v95;
              (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
              sub_10001CFB8(v75, v76);
              sub_10025C56C(v91, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              uint64_t v48 = *(void **)(v0 + 616);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7930(0, v48[2] + 1, 1);
                uint64_t v48 = *v138;
              }
              uint64_t v49 = v89;
              unint64_t v98 = v48[2];
              unint64_t v97 = v48[3];
              if (v98 >= v97 >> 1)
              {
                sub_1000B7930(v97 > 1, v98 + 1, 1);
                uint64_t v48 = *v138;
              }
              uint64_t v1 = 0;
              uint64_t v48[2] = v98 + 1;
              uint64_t v99 = &v48[2 * v98];
              v99[4] = v141;
              v99[5] = v96;
              if (v137 == v89)
              {
                swift_bridgeObjectRelease();
LABEL_98:
                *(void *)(v0 + 1360) = v48;
                uint64_t v112 = (void *)swift_task_alloc();
                *(void *)(v0 + 1368) = v112;
                *uint64_t v112 = v0;
                v112[1] = sub_10020B5A8;
                uint64_t v113 = *(void *)(v0 + 1000);
                uint64_t v114 = *(void *)(v0 + 992);
                uint64_t v115 = *(void *)(v0 + 800);
                uint64_t v116 = *(void *)(v0 + 688);
                uint64_t v117 = *(void *)(v0 + 680);
                return sub_100212FDC(v115, v113, v133, v114, v117, v116, (uint64_t)v48);
              }
              break;
            case 2uLL:
              uint64_t v87 = *(void *)(v75 + 16);
              uint64_t v86 = *(void *)(v75 + 24);
              BOOL v69 = __OFSUB__(v86, v87);
              uint64_t v85 = v86 - v87;
              if (!v69) {
                goto LABEL_79;
              }
              goto LABEL_124;
            case 3uLL:
              uint64_t v111 = 0;
              goto LABEL_109;
            default:
              uint64_t v85 = BYTE6(v76);
              goto LABEL_79;
          }
          continue;
        }
        int v102 = v73;
        uint64_t v101 = v2;
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        uint64_t v103 = *(void *)(v0 + 776);
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v104 = swift_allocObject();
        *(_OWORD *)(v104 + 16) = xmmword_101342130;
        *(void *)(v104 + 56) = &type metadata for Int32;
        *(void *)(v104 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v104 + 32) = v102;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        CryptoError.init(rawValue:)();
        uint64_t v105 = type metadata accessor for CryptoError();
        sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        uint64_t v100 = swift_allocError();
        uint64_t v107 = v106;
        uint64_t v108 = *(void *)(v105 - 8);
        int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v103, 1, v105);
        uint64_t v110 = *(void *)(v0 + 776);
        if (v109 == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v108 + 104))(v107, enum case for CryptoError.unspecifiedError(_:), v105);
          sub_10001DAB4(v110, &qword_10163F758);
        }
        else
        {
          (*(void (**)(uint64_t, void, uint64_t))(v108 + 32))(v107, *(void *)(v0 + 776), v105);
        }
        swift_willThrow();
        swift_release();
LABEL_103:
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = xmmword_101342130;
        *(void *)(v0 + 624) = v100;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v119 = String.init<A>(describing:)();
        uint64_t v121 = v120;
        *(void *)(v118 + 56) = &type metadata for String;
        *(void *)(v118 + 64) = sub_10000B4CC();
        *(void *)(v118 + 32) = v119;
        *(void *)(v118 + 40) = v121;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v122 = swift_allocError();
        *uint64_t v123 = 0;
        swift_willThrow();
        swift_errorRelease();
        unint64_t v124 = v65;
        uint64_t v125 = (uint64_t)v101;
LABEL_110:
        sub_10001CFB8(v125, v124);
        _StringGuts.grow(_:)(35);
        *(void *)(v0 + 440) = 0;
        *(void *)(v0 + 448) = 0xE000000000000000;
        v129._uint64_t countAndFlagsBits = 0xD000000000000021;
        v129._object = (void *)0x80000001013F3B70;
        String.append(_:)(v129);
        *(void *)(v0 + 640) = v122;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v68 = v2[2];
        uint64_t v67 = v2[3];
        BOOL v69 = __OFSUB__(v67, v68);
        uint64_t v66 = v67 - v68;
        if (!v69) {
          goto LABEL_53;
        }
        goto LABEL_121;
      case 3uLL:
        goto LABEL_86;
      default:
        uint64_t v66 = BYTE6(v65);
        goto LABEL_53;
    }
  }
}

uint64_t sub_10020B5A8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[144];
    uint64_t v4 = v2[125];
    uint64_t v5 = v2[124];
    uint64_t v6 = v2[119];
    uint64_t v7 = v2[88];
    swift_bridgeObjectRelease();
    v3(v5, v6);
    v3(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10020FD10;
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v2[144];
    uint64_t v10 = v2[125];
    uint64_t v11 = v2[124];
    uint64_t v12 = v2[119];
    uint64_t v7 = v2[88];
    swift_bridgeObjectRelease();
    v9(v11, v12);
    v9(v10, v12);
    uint64_t v8 = sub_10020B79C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10020B79C()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1320);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A70044(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1320));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A70044(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 936);
  uint64_t v6 = *(void *)(v0 + 840);
  uint64_t v7 = *(void *)(v0 + 800);
  uint64_t v8 = *(void *)(v0 + 784);
  *(void *)(v2 + 16) = v4 + 1;
  sub_10025C5CC(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  sub_10025C56C(v6, type metadata accessor for SharedBeaconRecord);
  sub_10025C56C(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = *(void *)(v0 + 1376);
  unint64_t v10 = *(void *)(v0 + 1312) + 1;
  if (v10 == *(void *)(v0 + 1168))
  {
    swift_bridgeObjectRelease();
    sub_100442FEC(*(void *)(v0 + 1280));
    uint64_t v11 = *(void *)(v0 + 1040);
    uint64_t v12 = *(void *)(v0 + 1056) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
    if (v12 == v11)
    {
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 1704) = enum case for HashAlgorithm.sha256(_:);
      *(void *)(v0 + 1392) = v2;
      *(void *)(v0 + 1384) = 0;
      uint64_t v13 = *(void *)(v0 + 1072);
      uint64_t v14 = *(void *)(v0 + 696) + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v14, v0 + 144);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v15);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v15);
      uint64_t v17 = sub_10020BB34;
      uint64_t v18 = v13;
      goto LABEL_12;
    }
    uint64_t v24 = *(void *)(v0 + 1056) + 1;
    *(void *)(v0 + 1064) = v2;
    *(void *)(v0 + 1056) = v24;
    *(void *)(v0 + 1048) = v9;
    uint64_t v25 = *(void *)(v0 + 704);
    sub_10001D010(*(void *)(v0 + 696) + 40 * v24 + 32, v0 + 184);
    uint64_t v20 = *(void *)(v25 + 136);
    *(void *)(v0 + 1072) = v20;
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v26);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8) + 32))(v26);
    uint64_t v23 = sub_100208398;
  }
  else
  {
    *(void *)(v0 + 1320) = v2;
    *(void *)(v0 + 1312) = v10;
    *(void *)(v0 + 1304) = v9;
    uint64_t v19 = *(void *)(v0 + 1144);
    if (v10 >= *(void *)(v19 + 16)) {
      __break(1u);
    }
    uint64_t v20 = *(void *)(v0 + 1072);
    sub_10025C504(v19+ ((*(unsigned __int8 *)(v0 + 1696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1696))+ *(void *)(v0 + 1184) * v10, *(void *)(v0 + 936), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v22 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v21);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8) + 32))(v21);
    uint64_t v23 = sub_100209C84;
  }
  uint64_t v17 = v23;
  uint64_t v18 = v20;
LABEL_12:
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_10020BB34()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1112);
  unint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  uint64_t v3 = *(void *)(v0 + 1072);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v5 = *(void *)(v0 + 1024);
  uint64_t v6 = *(void *)(v0 + 952);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1684) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1684);
  unint64_t v8 = (v7 + *(void *)(v0 + 968) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v0 + 1400) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 1408) = v9;
  *(void *)(v9 + 16) = v3;
  v1(v9 + v7, v5, v6);
  *(void *)(v9 + v8) = 0;
  swift_retain();
  return _swift_task_switch(sub_10020BC78, 0, 0);
}

uint64_t sub_10020BC78()
{
  uint64_t v1 = v0[176];
  uint64_t v2 = v0[175];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[177] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C4A4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[178] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  void *v4 = v0;
  v4[1] = sub_10020BDBC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 71, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_10020BDBC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1072);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1432) = *(void *)(v1 + 568);
  return _swift_task_switch(sub_10020BF60, v2, 0);
}

uint64_t sub_10020BF60()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  (*(void (**)(void, void))(v0 + 1152))(*(void *)(v0 + 1032), *(void *)(v0 + 952));
  return _swift_task_switch(sub_10020C004, v1, 0);
}

uint64_t sub_10020C004()
{
  *(void *)(v0 + 1440) = *(void *)(*(void *)(v0 + 1072) + 136);
  swift_retain();
  return _swift_task_switch(sub_10020C0A4, 0, 0);
}

uint64_t sub_10020C0A4()
{
  uint64_t v1 = v0[180];
  uint64_t v2 = v0[134];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[181] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[182] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  void *v4 = v0;
  v4[1] = sub_10020C1E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 68, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10020C1E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 704);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1464) = *(void *)(v1 + 544);
  return _swift_task_switch(sub_10020C388, v2, 0);
}

uint64_t sub_10020C388()
{
  uint64_t v1 = *(void *)(v0 + 1432);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1472) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 720);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 1708) = v4;
    *(void *)(v0 + 1480) = *(void *)(v3 + 72);
    *(void *)(v0 + 1496) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1488) = 0;
    uint64_t v5 = *(void *)(v0 + 1464);
    uint64_t v6 = *(void *)(v0 + 736);
    uint64_t v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    sub_10025C504(v7, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001D010(v0 + 144, v0 + 264);
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 1504) = v8;
    *(void *)(v8 + 16) = v5;
    sub_10001CEB0((long long *)(v0 + 264), v8 + 24);
    swift_retain();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 1512) = v9;
    uint64_t v10 = sub_10000588C((uint64_t *)&unk_101657790);
    *uint64_t v9 = v0;
    v9[1] = sub_10020C824;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_10025CA6C, v8, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v0 + 1392);
    sub_100442FEC((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    uint64_t v12 = *(void *)(v0 + 1040);
    uint64_t v13 = *(void *)(v0 + 1384) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
    if (v13 == v12)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v0 + 656);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v14(v11, v20);
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 1384) + 1;
      *(void *)(v0 + 1392) = v11;
      *(void *)(v0 + 1384) = v15;
      uint64_t v16 = *(void *)(v0 + 1072);
      sub_10001D010(*(void *)(v0 + 696) + 40 * v15 + 32, v0 + 144);
      uint64_t v17 = *(void *)(v0 + 168);
      uint64_t v18 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v17);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v17);
      return _swift_task_switch(sub_10020BB34, v16, 0);
    }
  }
}

uint64_t sub_10020C824()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 704);
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int v4 = sub_100210218;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 704);
    swift_release();
    int v4 = sub_10020C9B4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10020C9B4()
{
  uint64_t v1 = *(uint64_t **)(v0 + 888);
  sub_10001CFB8(*(void *)(v0 + 344), *(void *)(v0 + 352));
  uint64_t v2 = *(void *)(v0 + 360);
  unint64_t v3 = *(void *)(v0 + 368);
  *(void *)(v0 + 1528) = v2;
  *(void *)(v0 + 1536) = v3;
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v4);
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  sub_1000361E0(v2, v3);
  v7(v4, v6);
  *uint64_t v1 = v2;
  v1[1] = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v9 = *(void *)(v0 + 1496);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v9 = sub_100A70010(0, *(void *)(v9 + 16) + 1, 1, v9);
  }
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v11 >= v10 >> 1) {
    unint64_t v9 = sub_100A70010(v10 > 1, v11 + 1, 1, v9);
  }
  *(void *)(v0 + 1544) = v9;
  uint64_t v12 = *(void *)(v0 + 888);
  uint64_t v13 = *(void *)(v0 + 856);
  uint64_t v14 = *(void *)(v0 + 712);
  uint64_t v15 = *(void *)(v0 + 704);
  *(void *)(v9 + 16) = v11 + 1;
  int v16 = *(_DWORD *)(v13 + 80);
  *(_DWORD *)(v0 + 1712) = v16;
  uint64_t v17 = *(void *)(v13 + 72);
  *(void *)(v0 + 1552) = v17;
  sub_10025C5CC(v12, v9 + ((v16 + 32) & ~(unint64_t)v16) + v17 * v11, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  *(void *)(v0 + 1560) = *(void *)(v15 + 128);
  *(_DWORD *)(v0 + 1716) = *(_DWORD *)(v14 + 20);
  *(_DWORD *)(v0 + 1720) = *(_DWORD *)(v14 + 24);
  return _swift_task_switch(sub_10020CBA0, 0, 0);
}

uint64_t sub_10020CBA0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1560) + 120);
  *(void *)(v0 + 1568) = v1;
  return _swift_task_switch(sub_10020CC34, v1, 0);
}

uint64_t sub_10020CC34()
{
  uint64_t v1 = *(void *)(v0 + 1568);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1112);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v5 = *(void *)(v0 + 952);
  uint64_t v6 = *(void *)(v0 + 736) + *(int *)(v0 + 1716);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1684) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1684);
  *(void *)(v0 + 1576) = *(void *)(v1 + 136);
  v3(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1584) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_10020CD6C, 0, 0);
}

uint64_t sub_10020CD6C()
{
  uint64_t v1 = v0[198];
  uint64_t v2 = v0[197];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[199] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[200] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  void *v4 = v0;
  v4[1] = sub_10020CEB0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 65, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C998, v3, v5);
}

uint64_t sub_10020CEB0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1608) = *(void *)(v1 + 520);
  return _swift_task_switch(sub_10020D038, 0, 0);
}

uint64_t sub_10020D038()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[201];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[190];
  sub_100CB9100(v0[201], v0 + 2);
  v0[202] = v7;
  if (v7)
  {
    v0[204] = v7;
    uint64_t v8 = v0[88];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    unint64_t v9 = sub_10020E3C8;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = v0[195];
    unint64_t v9 = sub_10020D22C;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_10020D22C()
{
  unint64_t v1 = *(void *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    unsigned char *v3 = 12;
    swift_willThrow();
    sub_1001300CC((uint64_t *)(v0 + 16));
    *(void *)(v0 + 1632) = v2;
    uint64_t v4 = *(void *)(v0 + 704);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = sub_10020E3C8;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 1088);
    uint64_t v8 = *(void *)(v0 + 952);
    unint64_t v9 = *(uint64_t **)(v0 + 880);
    uint64_t v10 = *(void *)(v0 + 848);
    uint64_t v14 = *(void *)(v0 + 704);
    uint64_t v11 = *(void *)(v0 + 736) + *(int *)(v0 + 1720);
    uint64_t v12 = *(void *)(v0 + 56);
    sub_1000361E0(v12, v1);
    sub_1001300CC((uint64_t *)(v0 + 16));
    v7((char *)v9 + *(int *)(v10 + 20), v11, v8);
    *unint64_t v9 = v12;
    v9[1] = v1;
    uint64_t v5 = sub_10020D3CC;
    uint64_t v6 = v14;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10020D3CC()
{
  uint64_t v1 = *(void *)(v0 + 1544);
  sub_10025C504(*(void *)(v0 + 880), *(void *)(v0 + 872), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  unint64_t v4 = v3 + 1;
  uint64_t v5 = *(void *)(v0 + 1544);
  if (v3 >= v2 >> 1) {
    goto LABEL_101;
  }
  while (2)
  {
    *(void *)(v0 + 1624) = v5;
    uint64_t v6 = *(void *)(v0 + 1552);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 1712);
    unint64_t v8 = *(void *)(v0 + 1536);
    uint64_t v9 = *(void *)(v0 + 1528);
    uint64_t v10 = *(void *)(v0 + 1472);
    uint64_t v11 = *(void *)(v0 + 880);
    uint64_t v12 = *(void *)(v0 + 872);
    uint64_t v13 = *(void *)(v0 + 736);
    uint64_t v14 = *(void *)(v0 + 1488) + 1;
    *(void *)(v5 + 16) = v4;
    sub_10025C5CC(v12, v5 + ((v7 + 32) & ~v7) + v6 * v3, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    sub_10001CFB8(v9, v8);
    sub_10025C56C(v11, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    sub_10025C56C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v14 != v10)
    {
      uint64_t v71 = *(void *)(v0 + 1488) + 1;
      *(void *)(v0 + 1496) = v5;
      *(void *)(v0 + 1488) = v71;
      uint64_t v72 = *(void *)(v0 + 1464);
      sub_10025C504(*(void *)(v0 + 1432)+ ((*(unsigned __int8 *)(v0 + 1708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1708))+ *(void *)(v0 + 1480) * v71, *(void *)(v0 + 736), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001D010(v0 + 144, v0 + 264);
      uint64_t v73 = swift_allocObject();
      *(void *)(v0 + 1504) = v73;
      *(void *)(v73 + 16) = v72;
      sub_10001CEB0((long long *)(v0 + 264), v73 + 24);
      swift_retain();
      size_t v74 = (void *)swift_task_alloc();
      *(void *)(v0 + 1512) = v74;
      uint64_t v75 = sub_10000588C((uint64_t *)&unk_101657790);
      void *v74 = v0;
      v74[1] = sub_10020C824;
      return unsafeBlocking<A>(_:)(v0 + 344, sub_10025CA6C, v73, v75);
    }
    uint64_t v5 = *(void *)(v0 + 712);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1724) = v15;
    uint64_t v16 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1728) = v16;
    *(_DWORD *)(v0 + 1732) = *(_DWORD *)(v5 + 20);
    uint64_t v17 = *(void *)(v0 + 1616);
    *(void *)(v0 + 1648) = *(void *)(v0 + 1392);
    *(void *)(v0 + 1640) = 0;
    uint64_t v18 = *(void *)(v0 + 1432);
    if (!*(void *)(v18 + 16)) {
      goto LABEL_106;
    }
    unint64_t v3 = *(void *)(v0 + 1096);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
    uint64_t v20 = *(void *)(v0 + 984);
    uint64_t v21 = *(void *)(v0 + 952);
    uint64_t v22 = *(void *)(v0 + 728);
    uint64_t v23 = v22 + v15;
    sub_10025C504(v18 + ((*(unsigned __int8 *)(v0 + 1708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1708)), v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v19(v20, v23, v21);
    char v24 = *(unsigned char *)(v22 + v16);
    uint64_t v25 = *(void *)(v0 + 1624);
    uint64_t v26 = *(void *)(v0 + 728);
    (*(void (**)(void, uint64_t, void))(v0 + 1088))(*(void *)(v0 + 976), v26 + *(int *)(v0 + 1732), *(void *)(v0 + 952));
    sub_10025C56C(v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int64_t v27 = *(void *)(v25 + 16);
    uint64_t v28 = _swiftEmptyArrayStorage;
    if (!v27) {
      goto LABEL_82;
    }
    char v104 = v24;
    __dst = (void *)(v0 + 472);
    *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t v105 = (void **)(v0 + 528);
    sub_1000B7930(0, v27, 0);
    uint64_t v29 = 0;
    int64_t v107 = v27;
LABEL_6:
    uint64_t v30 = *(uint64_t **)(v0 + 864);
    uint64_t v31 = *(void *)(v0 + 1624)
        + ((*(unsigned __int8 *)(v0 + 1712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1712))
        + *(void *)(v0 + 1552) * v29;
    uint64_t v14 = v29 + 1;
    sub_10025C504(v31, (uint64_t)v30, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v5 = *v30;
    unint64_t v4 = v30[1];
    uint64_t v9 = v4 >> 62;
    uint64_t v11 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    unint64_t v2 = 0;
    switch(v4 >> 62)
    {
      case 1uLL:
        uint64_t v32 = (int)v5;
        uint64_t v11 = v5 >> 32;
        sub_1000361E0(v5, v4);
        if (v5 >> 32 < (int)v5) {
          goto LABEL_95;
        }
        uint64_t v33 = v5 >> 32;
        unint64_t v2 = (int)v5;
        goto LABEL_12;
      case 2uLL:
        uint64_t v32 = *(void *)(v5 + 16);
        uint64_t v11 = *(void *)(v5 + 24);
        sub_1000361E0(v5, v4);
        if (v11 < v32)
        {
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          uint64_t v5 = sub_100A70010(v2 > 1, v4, 1, v5);
          continue;
        }
        unint64_t v2 = *(void *)(v5 + 16);
        uint64_t v33 = *(void *)(v5 + 24);
LABEL_12:
        if (v33 < v11 || v11 < (uint64_t)v2) {
          goto LABEL_96;
        }
        unint64_t v2 = v11 - v32;
        if (__OFSUB__(v11, v32)) {
          goto LABEL_97;
        }
        if (v2 < 0x39)
        {
          uint64_t v34 = v9;
          uint64_t v9 = v0 + 560;
          switch(v34)
          {
            case 1:
              uint64_t v35 = v5 >> 32;
              goto LABEL_27;
            case 2:
              uint64_t v35 = *(void *)(v5 + 24);
              goto LABEL_28;
            default:
              goto LABEL_30;
          }
        }
        uint64_t v35 = v32 + 57;
        if (__OFADD__(v32, 57))
        {
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        unint64_t v2 = v9;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = v9;
        uint64_t v9 = v0 + 560;
        switch(v38)
        {
          case 1:
            uint64_t v37 = (int)v5;
            uint64_t v36 = v5 >> 32;
            break;
          case 2:
            uint64_t v37 = *(void *)(v5 + 16);
            uint64_t v36 = *(void *)(v5 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v37 = 0;
            uint64_t v36 = BYTE6(v4);
            break;
        }
        if (v36 < v35 || v35 < v37) {
          goto LABEL_103;
        }
        uint64_t v39 = 0;
        switch(v2)
        {
          case 1uLL:
LABEL_27:
            uint64_t v39 = (int)v5;
            break;
          case 2uLL:
LABEL_28:
            uint64_t v39 = *(void *)(v5 + 16);
            break;
          default:
            break;
        }
        if (v35 < v39) {
          goto LABEL_98;
        }
LABEL_30:
        uint64_t v11 = Data._Representation.subscript.getter();
        unint64_t v41 = v40;
        sub_10001CFB8(v5, v4);
        switch(v41 >> 62)
        {
          case 1uLL:
            LODWORD(v42) = HIDWORD(v11) - v11;
            if (__OFSUB__(HIDWORD(v11), v11)) {
              goto LABEL_104;
            }
            uint64_t v42 = (int)v42;
LABEL_35:
            if (v42 != 57)
            {
LABEL_71:
              sub_10001CFB8(v11, v41);
              return _assertionFailure(_:_:file:line:flags:)();
            }
            sub_1000361E0(v11, v41);
            sub_100A948F8(v11, v41);
            if (v17)
            {
              uint64_t v5 = v17;
              uint64_t v9 = v0 + 536;
              goto LABEL_87;
            }
            *(void *)uint64_t v9 = 57;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            unint64_t v4 = __DataStorage.init(length:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v46 = __DataStorage._bytes.getter();
              if (v46)
              {
                unint64_t v3 = v46;
                uint64_t v5 = v4;
                if (__OFSUB__(0, __DataStorage._offset.getter())) {
                  goto LABEL_107;
                }
              }
              swift_allocObject();
              uint64_t v47 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              unint64_t v4 = v47;
            }
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_114;
            }
            uint64_t v5 = v4;
            uint64_t v48 = __DataStorage._offset.getter();
            unint64_t v2 = -v48;
            if (__OFSUB__(0, v48)) {
              goto LABEL_99;
            }
            uint64_t v5 = v4;
            __DataStorage._length.getter();
            int v49 = CCECCryptorExportKey();
            if (v49)
            {
              int v76 = v49;
              unint64_t v77 = v41;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              uint64_t v78 = *(void *)(v0 + 768);
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v79 = swift_allocObject();
              *(_OWORD *)(v79 + 16) = xmmword_101342130;
              *(void *)(v79 + 56) = &type metadata for Int32;
              *(void *)(v79 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v79 + 32) = v76;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              CryptoError.init(rawValue:)();
              uint64_t v80 = type metadata accessor for CryptoError();
              sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              uint64_t v5 = swift_allocError();
              uint64_t v82 = v81;
              uint64_t v83 = *(void *)(v80 - 8);
              int v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v78, 1, v80);
              uint64_t v85 = *(void *)(v0 + 768);
              if (v84 == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v82, enum case for CryptoError.unspecifiedError(_:), v80);
                sub_10001DAB4(v85, &qword_10163F758);
              }
              else
              {
                (*(void (**)(uint64_t, void, uint64_t))(v83 + 32))(v82, *(void *)(v0 + 768), v80);
              }
              swift_willThrow();
              swift_release();
              uint64_t v9 = v0 + 536;
              unint64_t v41 = v77;
LABEL_87:
              uint64_t v14 = v41;
              static os_log_type_t.error.getter();
              if (qword_101636F48 == -1)
              {
LABEL_88:
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v92 = swift_allocObject();
                *(_OWORD *)(v92 + 16) = xmmword_101342130;
                *(void *)uint64_t v9 = v5;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v93 = String.init<A>(describing:)();
                uint64_t v95 = v94;
                *(void *)(v92 + 56) = &type metadata for String;
                *(void *)(v92 + 64) = sub_10000B4CC();
                *(void *)(v92 + 32) = v93;
                *(void *)(v92 + 40) = v95;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v96 = swift_allocError();
                unsigned char *v97 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v98 = v14;
                goto LABEL_93;
              }
LABEL_111:
              swift_once();
              goto LABEL_88;
            }
            unint64_t v2 = *(void *)v9;
            if ((*(void *)v9 & 0x8000000000000000) != 0) {
              goto LABEL_100;
            }
            if (v2 >= 0x39) {
              size_t v50 = 57;
            }
            else {
              size_t v50 = *(void *)v9;
            }
            if (!v50)
            {
              swift_release();
              CCECCryptorRelease();
              sub_10001CFB8(v11, v41);
              uint64_t v5 = 0;
              unint64_t v51 = 0xC000000000000000;
LABEL_92:
              sub_10013019C();
              uint64_t v96 = swift_allocError();
              *(void *)uint64_t v101 = 28;
              *(void *)(v101 + 8) = v50;
              *(unsigned char *)(v101 + 16) = 0;
              swift_willThrow();
              unint64_t v98 = v51;
              uint64_t v11 = v5;
LABEL_93:
              sub_10001CFB8(v11, v98);
              _StringGuts.grow(_:)(35);
              *(void *)(v0 + 424) = 0;
              *(void *)(v0 + 432) = 0xE000000000000000;
              v102._uint64_t countAndFlagsBits = 0xD000000000000021;
              v102._object = (void *)0x80000001013F3B70;
              String.append(_:)(v102);
              *(void *)(v0 + 552) = v96;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
            if (v50 <= 0xE)
            {
              uint64_t v108 = v14;
              uint64_t v14 = v41;
              *(void *)(v0 + 478) = 0;
              void *__dst = 0;
              *(unsigned char *)(v0 + 486) = v50;
              swift_retain();
              uint64_t v52 = __DataStorage._bytes.getter();
              if (v52)
              {
                uint64_t v5 = v4;
                uint64_t v53 = __DataStorage._offset.getter();
                uint64_t v54 = -v53;
                if (__OFSUB__(0, v53)) {
                  goto LABEL_110;
                }
                __DataStorage._length.getter();
                memcpy(__dst, (const void *)(v52 + v54), v50);
                uint64_t v52 = *(unsigned __int8 *)(v0 + 484);
                uint64_t v55 = *(unsigned __int8 *)(v0 + 485);
                size_t v50 = *(unsigned __int8 *)(v0 + 486);
              }
              else
              {
                size_t v50 = v50;
                __DataStorage._length.getter();
                uint64_t v55 = 0;
              }
              uint64_t v5 = *(void *)(v0 + 472);
              uint64_t v9 = *(unsigned int *)(v0 + 480);
              swift_release_n();
              unint64_t v51 = v9 | (v52 << 32) | (v55 << 40) | (v50 << 48);
              unint64_t v41 = v14;
              uint64_t v14 = v108;
            }
            else
            {
              uint64_t v5 = v50 << 32;
              unint64_t v51 = v4 | 0x4000000000000000;
            }
            CCECCryptorRelease();
            sub_10001CFB8(v11, v41);
            unint64_t v56 = v51 >> 62;
            switch(v51 >> 62)
            {
              case 1uLL:
                LODWORD(v57) = HIDWORD(v5) - v5;
                if (__OFSUB__(HIDWORD(v5), v5)) {
                  goto LABEL_108;
                }
                uint64_t v57 = (int)v57;
LABEL_61:
                if (v57 != 28)
                {
                  if (!v56)
                  {
                    size_t v50 = BYTE6(v51);
                    goto LABEL_92;
                  }
                  if (v56 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v5), v5))
                    {
                      size_t v50 = HIDWORD(v5) - (int)v5;
                      goto LABEL_92;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v100 = *(void *)(v5 + 16);
                    uint64_t v99 = *(void *)(v5 + 24);
                    size_t v50 = v99 - v100;
                    if (!__OFSUB__(v99, v100)) {
                      goto LABEL_92;
                    }
                  }
                  __break(1u);
LABEL_114:
                  __break(1u);
                }
                uint64_t v60 = v14;
                uint64_t v61 = *(unsigned int *)(v0 + 1704);
                unint64_t v3 = *(void *)(v0 + 864);
                uint64_t v62 = *(void *)(v0 + 760);
                uint64_t v63 = *(void *)(v0 + 752);
                unint64_t v64 = v41;
                uint64_t v65 = *(void *)(v0 + 744);
                sub_10001CFB8(v11, v64);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 104))(v62, v61, v65);
                uint64_t v109 = Data.hash(algorithm:)();
                uint64_t v67 = v66;
                (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v65);
                sub_10001CFB8(v5, v51);
                sub_10025C56C(v3, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                uint64_t v28 = *(void **)(v0 + 528);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7930(0, v28[2] + 1, 1);
                  uint64_t v28 = *v105;
                }
                uint64_t v29 = v60;
                unint64_t v69 = v28[2];
                unint64_t v68 = v28[3];
                if (v69 >= v68 >> 1)
                {
                  sub_1000B7930(v68 > 1, v69 + 1, 1);
                  uint64_t v28 = *v105;
                }
                uint64_t v17 = 0;
                v28[2] = v69 + 1;
                uint64_t v70 = &v28[2 * v69];
                v70[4] = v109;
                v70[5] = v67;
                if (v107 != v60) {
                  goto LABEL_6;
                }
                swift_bridgeObjectRelease();
                char v24 = v104;
                break;
              case 2uLL:
                uint64_t v59 = *(void *)(v5 + 16);
                uint64_t v58 = *(void *)(v5 + 24);
                BOOL v45 = __OFSUB__(v58, v59);
                uint64_t v57 = v58 - v59;
                if (!v45) {
                  goto LABEL_61;
                }
                goto LABEL_109;
              case 3uLL:
                size_t v50 = 0;
                goto LABEL_92;
              default:
                uint64_t v57 = BYTE6(v51);
                goto LABEL_61;
            }
LABEL_82:
            *(void *)(v0 + 1656) = v28;
            uint64_t v86 = (void *)swift_task_alloc();
            *(void *)(v0 + 1664) = v86;
            *uint64_t v86 = v0;
            v86[1] = sub_10020EA00;
            uint64_t v87 = *(void *)(v0 + 984);
            uint64_t v88 = *(void *)(v0 + 976);
            uint64_t v89 = *(void *)(v0 + 792);
            uint64_t v90 = *(void *)(v0 + 688);
            uint64_t v91 = *(void *)(v0 + 680);
            return sub_100212FDC(v89, v87, 0x4000201u >> (8 * v24), v88, v91, v90, (uint64_t)v28);
          case 2uLL:
            uint64_t v44 = *(void *)(v11 + 16);
            uint64_t v43 = *(void *)(v11 + 24);
            BOOL v45 = __OFSUB__(v43, v44);
            uint64_t v42 = v43 - v44;
            if (!v45) {
              goto LABEL_35;
            }
            goto LABEL_105;
          case 3uLL:
            goto LABEL_71;
          default:
            uint64_t v42 = BYTE6(v41);
            goto LABEL_35;
        }
      case 3uLL:
        goto LABEL_12;
      default:
        uint64_t v32 = 0;
        unint64_t v2 = 0;
        uint64_t v11 = BYTE6(v4);
        uint64_t v33 = BYTE6(v4);
        goto LABEL_12;
    }
  }
}

uint64_t sub_10020E3C8()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0 + 18;
  uint64_t v2 = v0[92];
  sub_10001CFB8(v0[191], v0[192]);
  swift_release();
  sub_10025C56C(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v3 = v0[174];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  uint64_t v29 = v3;
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v28 = v6;
    int64_t v27 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v7 = v0[129];
    uint64_t v8 = v0[119];
    uint64_t v9 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[31];
    uint64_t v10 = v0[32];
    sub_10001CD44(v0 + 28, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    uint64_t v15 = v8;
    uint64_t v3 = v29;
    v27(v7, v15);
    v0[61] = sub_1008FA0F0(v12, v14, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v16, v17, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v28, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[130];
  uint64_t v19 = v0[173] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = v0[82];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v20(v29, v26);
  }
  else
  {
    uint64_t v22 = v0[173] + 1;
    v0[174] = v3;
    v0[173] = v22;
    uint64_t v23 = v0[134];
    sub_10001D010(v0[87] + 40 * v22 + 32, (uint64_t)v1);
    uint64_t v24 = v0[21];
    uint64_t v25 = v0[22];
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
    return _swift_task_switch(sub_10020BB34, v23, 0);
  }
}

uint64_t sub_10020EA00()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1672) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[144];
    uint64_t v4 = v2[123];
    uint64_t v5 = v2[122];
    uint64_t v6 = v2[119];
    uint64_t v7 = v2[88];
    swift_bridgeObjectRelease();
    v3(v5, v6);
    v3(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_100210848;
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v2[144];
    uint64_t v10 = v2[123];
    uint64_t v11 = v2[122];
    uint64_t v12 = v2[119];
    uint64_t v7 = v2[88];
    swift_bridgeObjectRelease();
    v9(v11, v12);
    v9(v10, v12);
    uint64_t v8 = sub_10020EBF4;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10020EBF4()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v3 = *(void *)(v0 + 1648);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_107;
  }
  while (2)
  {
    unint64_t v5 = *(void *)(v3 + 16);
    unint64_t v4 = *(void *)(v3 + 24);
    uint64_t v6 = v5 + 1;
    if (v5 >= v4 >> 1) {
      unint64_t v3 = sub_100A70044(v4 > 1, v5 + 1, 1, v3);
    }
    unint64_t v7 = *(void *)(v0 + 1472);
    uint64_t v8 = *(void *)(v0 + 792);
    uint64_t v9 = *(void *)(v0 + 784);
    uint64_t v10 = *(void *)(v0 + 1640) + 1;
    *(void *)(v3 + 16) = v6;
    sub_10025C5CC(v8, v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v5, type metadata accessor for KeyDropFetchItem);
    if (v10 == v7)
    {
      swift_bridgeObjectRelease();
      sub_100442FEC(*(void *)(v0 + 1624));
      swift_release();
      uint64_t v11 = *(void *)(v0 + 1040);
      uint64_t v12 = *(void *)(v0 + 1384) + 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v103 = *(void *)(v0 + 656);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t))(v0 + 8);
        return v13(v3, v103);
      }
      else
      {
        uint64_t v72 = *(void *)(v0 + 1384) + 1;
        *(void *)(v0 + 1392) = v3;
        *(void *)(v0 + 1384) = v72;
        uint64_t v73 = *(void *)(v0 + 1072);
        sub_10001D010(*(void *)(v0 + 696) + 40 * v72 + 32, v0 + 144);
        uint64_t v74 = *(void *)(v0 + 168);
        uint64_t v75 = *(void *)(v0 + 176);
        sub_10001CD44((void *)(v0 + 144), v74);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v75 + 8) + 8) + 32))(v74);
        return _swift_task_switch(sub_10020BB34, v73, 0);
      }
    }
    uint64_t v15 = *(void *)(v0 + 1672);
    unint64_t v16 = *(void *)(v0 + 1640) + 1;
    *(void *)(v0 + 1648) = v3;
    *(void *)(v0 + 1640) = v16;
    uint64_t v17 = *(void *)(v0 + 1432);
    if (v16 >= *(void *)(v17 + 16)) {
      goto LABEL_112;
    }
    uint64_t v18 = *(int *)(v0 + 1728);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
    uint64_t v20 = *(void *)(v0 + 984);
    uint64_t v21 = *(void *)(v0 + 952);
    uint64_t v22 = *(void *)(v0 + 728);
    uint64_t v23 = v22 + *(int *)(v0 + 1724);
    sub_10025C504(v17+ ((*(unsigned __int8 *)(v0 + 1708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1708))+ *(void *)(v0 + 1480) * v16, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v19(v20, v23, v21);
    char v24 = *(unsigned char *)(v22 + v18);
    uint64_t v25 = *(void *)(v0 + 1624);
    uint64_t v26 = *(void *)(v0 + 728);
    (*(void (**)(void, uint64_t, void))(v0 + 1088))(*(void *)(v0 + 976), v26 + *(int *)(v0 + 1732), *(void *)(v0 + 952));
    sub_10025C56C(v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int64_t v27 = *(void *)(v25 + 16);
    os_log_type_t v28 = _swiftEmptyArrayStorage;
    if (!v27) {
      goto LABEL_88;
    }
    char v104 = v24;
    __dst = (void *)(v0 + 472);
    *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t v105 = (void **)(v0 + 528);
    sub_1000B7930(0, v27, 0);
    unint64_t v29 = 0;
    int64_t v107 = v27;
LABEL_12:
    uint64_t v30 = *(uint64_t **)(v0 + 864);
    uint64_t v31 = *(void *)(v0 + 1624)
        + ((*(unsigned __int8 *)(v0 + 1712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1712))
        + *(void *)(v0 + 1552) * v29;
    unint64_t v1 = v29 + 1;
    sub_10025C504(v31, (uint64_t)v30, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v6 = *v30;
    unint64_t v3 = v30[1];
    unint64_t v7 = v3 >> 62;
    uint64_t v10 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    switch(v3 >> 62)
    {
      case 1uLL:
        uint64_t v32 = (int)v6;
        uint64_t v10 = v6 >> 32;
        sub_1000361E0(v6, v3);
        if (v6 >> 32 < (int)v6) {
          goto LABEL_101;
        }
        uint64_t v33 = v6 >> 32;
        uint64_t v34 = (int)v6;
        goto LABEL_18;
      case 2uLL:
        uint64_t v32 = *(void *)(v6 + 16);
        uint64_t v10 = *(void *)(v6 + 24);
        sub_1000361E0(v6, v3);
        if (v10 < v32)
        {
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          unint64_t v3 = sub_100A70044(0, *(void *)(v3 + 16) + 1, 1, v3);
          continue;
        }
        uint64_t v34 = *(void *)(v6 + 16);
        uint64_t v33 = *(void *)(v6 + 24);
LABEL_18:
        if (v33 < v10 || v10 < v34) {
          goto LABEL_102;
        }
        if (__OFSUB__(v10, v32)) {
          goto LABEL_103;
        }
        if ((unint64_t)(v10 - v32) < 0x39)
        {
          uint64_t v35 = v7;
          unint64_t v7 = v0 + 560;
          switch(v35)
          {
            case 1:
              uint64_t v36 = v6 >> 32;
              goto LABEL_33;
            case 2:
              uint64_t v36 = *(void *)(v6 + 24);
              goto LABEL_34;
            default:
              goto LABEL_36;
          }
        }
        uint64_t v36 = v32 + 57;
        if (__OFADD__(v32, 57))
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
        uint64_t v37 = v7;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = v7;
        unint64_t v7 = v0 + 560;
        switch(v40)
        {
          case 1:
            uint64_t v39 = (int)v6;
            uint64_t v38 = v6 >> 32;
            break;
          case 2:
            uint64_t v39 = *(void *)(v6 + 16);
            uint64_t v38 = *(void *)(v6 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v39 = 0;
            uint64_t v38 = BYTE6(v3);
            break;
        }
        if (v38 < v36 || v36 < v39) {
          goto LABEL_109;
        }
        uint64_t v41 = 0;
        switch(v37)
        {
          case 1:
LABEL_33:
            uint64_t v41 = (int)v6;
            break;
          case 2:
LABEL_34:
            uint64_t v41 = *(void *)(v6 + 16);
            break;
          default:
            break;
        }
        if (v36 < v41) {
          goto LABEL_104;
        }
LABEL_36:
        uint64_t v10 = Data._Representation.subscript.getter();
        unint64_t v43 = v42;
        sub_10001CFB8(v6, v3);
        switch(v43 >> 62)
        {
          case 1uLL:
            LODWORD(v44) = HIDWORD(v10) - v10;
            if (__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_110;
            }
            uint64_t v44 = (int)v44;
LABEL_41:
            if (v44 != 57)
            {
LABEL_77:
              sub_10001CFB8(v10, v43);
              return _assertionFailure(_:_:file:line:flags:)();
            }
            sub_1000361E0(v10, v43);
            sub_100A948F8(v10, v43);
            if (v15)
            {
              uint64_t v6 = v15;
              unint64_t v7 = v0 + 536;
              goto LABEL_93;
            }
            *(void *)unint64_t v7 = 57;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            unint64_t v3 = __DataStorage.init(length:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              if (__DataStorage._bytes.getter())
              {
                uint64_t v6 = v3;
                if (__OFSUB__(0, __DataStorage._offset.getter())) {
                  goto LABEL_113;
                }
              }
              swift_allocObject();
              uint64_t v48 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              unint64_t v3 = v48;
            }
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_120;
            }
            if (__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_105;
            }
            __DataStorage._length.getter();
            int v49 = CCECCryptorExportKey();
            if (v49)
            {
              int v76 = v49;
              unint64_t v77 = v43;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              uint64_t v78 = *(void *)(v0 + 768);
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v79 = swift_allocObject();
              *(_OWORD *)(v79 + 16) = xmmword_101342130;
              *(void *)(v79 + 56) = &type metadata for Int32;
              *(void *)(v79 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v79 + 32) = v76;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              CryptoError.init(rawValue:)();
              uint64_t v80 = type metadata accessor for CryptoError();
              sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              uint64_t v6 = swift_allocError();
              uint64_t v82 = v81;
              uint64_t v83 = *(void *)(v80 - 8);
              int v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v78, 1, v80);
              uint64_t v85 = *(void *)(v0 + 768);
              if (v84 == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v82, enum case for CryptoError.unspecifiedError(_:), v80);
                sub_10001DAB4(v85, &qword_10163F758);
              }
              else
              {
                (*(void (**)(uint64_t, void, uint64_t))(v83 + 32))(v82, *(void *)(v0 + 768), v80);
              }
              swift_willThrow();
              swift_release();
              unint64_t v7 = v0 + 536;
              unint64_t v43 = v77;
LABEL_93:
              unint64_t v1 = v43;
              static os_log_type_t.error.getter();
              if (qword_101636F48 == -1)
              {
LABEL_94:
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v92 = swift_allocObject();
                *(_OWORD *)(v92 + 16) = xmmword_101342130;
                *(void *)unint64_t v7 = v6;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v93 = String.init<A>(describing:)();
                uint64_t v95 = v94;
                *(void *)(v92 + 56) = &type metadata for String;
                *(void *)(v92 + 64) = sub_10000B4CC();
                *(void *)(v92 + 32) = v93;
                *(void *)(v92 + 40) = v95;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v96 = swift_allocError();
                unsigned char *v97 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v98 = v1;
                goto LABEL_99;
              }
LABEL_117:
              swift_once();
              goto LABEL_94;
            }
            if ((*(void *)v7 & 0x8000000000000000) != 0) {
              goto LABEL_106;
            }
            if (*(void *)v7 >= 0x39uLL) {
              size_t v50 = 57;
            }
            else {
              size_t v50 = *(void *)v7;
            }
            if (!v50)
            {
              swift_release();
              CCECCryptorRelease();
              sub_10001CFB8(v10, v43);
              uint64_t v6 = 0;
              unint64_t v51 = 0xC000000000000000;
LABEL_98:
              sub_10013019C();
              uint64_t v96 = swift_allocError();
              *(void *)uint64_t v101 = 28;
              *(void *)(v101 + 8) = v50;
              *(unsigned char *)(v101 + 16) = 0;
              swift_willThrow();
              unint64_t v98 = v51;
              uint64_t v10 = v6;
LABEL_99:
              sub_10001CFB8(v10, v98);
              _StringGuts.grow(_:)(35);
              *(void *)(v0 + 424) = 0;
              *(void *)(v0 + 432) = 0xE000000000000000;
              v102._uint64_t countAndFlagsBits = 0xD000000000000021;
              v102._object = (void *)0x80000001013F3B70;
              String.append(_:)(v102);
              *(void *)(v0 + 552) = v96;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
            if (v50 <= 0xE)
            {
              unint64_t v108 = v1;
              unint64_t v1 = v43;
              *(void *)(v0 + 478) = 0;
              void *__dst = 0;
              *(unsigned char *)(v0 + 486) = v50;
              swift_retain();
              uint64_t v52 = __DataStorage._bytes.getter();
              if (v52)
              {
                uint64_t v6 = v3;
                uint64_t v53 = __DataStorage._offset.getter();
                uint64_t v54 = -v53;
                if (__OFSUB__(0, v53)) {
                  goto LABEL_116;
                }
                __DataStorage._length.getter();
                memcpy(__dst, (const void *)(v52 + v54), v50);
                uint64_t v52 = *(unsigned __int8 *)(v0 + 484);
                uint64_t v55 = *(unsigned __int8 *)(v0 + 485);
                size_t v50 = *(unsigned __int8 *)(v0 + 486);
              }
              else
              {
                size_t v50 = v50;
                __DataStorage._length.getter();
                uint64_t v55 = 0;
              }
              uint64_t v6 = *(void *)(v0 + 472);
              unint64_t v7 = *(unsigned int *)(v0 + 480);
              swift_release_n();
              unint64_t v51 = v7 | (v52 << 32) | (v55 << 40) | (v50 << 48);
              unint64_t v43 = v1;
              unint64_t v1 = v108;
            }
            else
            {
              uint64_t v6 = v50 << 32;
              unint64_t v51 = v3 | 0x4000000000000000;
            }
            CCECCryptorRelease();
            sub_10001CFB8(v10, v43);
            unint64_t v56 = v51 >> 62;
            switch(v51 >> 62)
            {
              case 1uLL:
                LODWORD(v57) = HIDWORD(v6) - v6;
                if (__OFSUB__(HIDWORD(v6), v6)) {
                  goto LABEL_114;
                }
                uint64_t v57 = (int)v57;
LABEL_67:
                if (v57 != 28)
                {
                  if (!v56)
                  {
                    size_t v50 = BYTE6(v51);
                    goto LABEL_98;
                  }
                  if (v56 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v6), v6))
                    {
                      size_t v50 = HIDWORD(v6) - (int)v6;
                      goto LABEL_98;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v100 = *(void *)(v6 + 16);
                    uint64_t v99 = *(void *)(v6 + 24);
                    size_t v50 = v99 - v100;
                    if (!__OFSUB__(v99, v100)) {
                      goto LABEL_98;
                    }
                  }
                  __break(1u);
LABEL_120:
                  __break(1u);
                }
                unint64_t v60 = v1;
                uint64_t v61 = *(unsigned int *)(v0 + 1704);
                uint64_t v62 = *(void *)(v0 + 864);
                uint64_t v63 = *(void *)(v0 + 760);
                uint64_t v64 = *(void *)(v0 + 752);
                unint64_t v65 = v43;
                uint64_t v66 = *(void *)(v0 + 744);
                sub_10001CFB8(v10, v65);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 104))(v63, v61, v66);
                uint64_t v109 = Data.hash(algorithm:)();
                uint64_t v68 = v67;
                (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v66);
                sub_10001CFB8(v6, v51);
                sub_10025C56C(v62, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                os_log_type_t v28 = *(void **)(v0 + 528);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7930(0, v28[2] + 1, 1);
                  os_log_type_t v28 = *v105;
                }
                unint64_t v29 = v60;
                unint64_t v70 = v28[2];
                unint64_t v69 = v28[3];
                if (v70 >= v69 >> 1)
                {
                  sub_1000B7930(v69 > 1, v70 + 1, 1);
                  os_log_type_t v28 = *v105;
                }
                uint64_t v15 = 0;
                v28[2] = v70 + 1;
                uint64_t v71 = &v28[2 * v70];
                v71[4] = v109;
                v71[5] = v68;
                if (v107 != v60) {
                  goto LABEL_12;
                }
                swift_bridgeObjectRelease();
                char v24 = v104;
                break;
              case 2uLL:
                uint64_t v59 = *(void *)(v6 + 16);
                uint64_t v58 = *(void *)(v6 + 24);
                BOOL v47 = __OFSUB__(v58, v59);
                uint64_t v57 = v58 - v59;
                if (!v47) {
                  goto LABEL_67;
                }
                goto LABEL_115;
              case 3uLL:
                size_t v50 = 0;
                goto LABEL_98;
              default:
                uint64_t v57 = BYTE6(v51);
                goto LABEL_67;
            }
LABEL_88:
            *(void *)(v0 + 1656) = v28;
            uint64_t v86 = (void *)swift_task_alloc();
            *(void *)(v0 + 1664) = v86;
            *uint64_t v86 = v0;
            v86[1] = sub_10020EA00;
            uint64_t v87 = *(void *)(v0 + 984);
            uint64_t v88 = *(void *)(v0 + 976);
            uint64_t v89 = *(void *)(v0 + 792);
            uint64_t v90 = *(void *)(v0 + 688);
            uint64_t v91 = *(void *)(v0 + 680);
            return sub_100212FDC(v89, v87, 0x4000201u >> (8 * v24), v88, v91, v90, (uint64_t)v28);
          case 2uLL:
            uint64_t v46 = *(void *)(v10 + 16);
            uint64_t v45 = *(void *)(v10 + 24);
            BOOL v47 = __OFSUB__(v45, v46);
            uint64_t v44 = v45 - v46;
            if (!v47) {
              goto LABEL_41;
            }
            goto LABEL_111;
          case 3uLL:
            goto LABEL_77;
          default:
            uint64_t v44 = BYTE6(v43);
            goto LABEL_41;
        }
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v32 = 0;
        uint64_t v34 = 0;
        uint64_t v10 = BYTE6(v3);
        uint64_t v33 = BYTE6(v3);
        goto LABEL_18;
    }
  }
}

uint64_t sub_10020FD10()
{
  uint64_t v32 = v0;
  unint64_t v1 = (void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 936);
  sub_10025C56C(*(void *)(v0 + 840), type metadata accessor for SharedBeaconRecord);
  sub_10025C56C(v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v3 = *(void *)(v0 + 1320);
  if (qword_101636908 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 1264), (uint64_t)qword_10170D9D8);
  sub_10001D010(v0 + 184, v0 + 304);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    os_log_type_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
    uint64_t v6 = *(void *)(v0 + 1032);
    uint64_t v7 = *(void *)(v0 + 952);
    uint64_t v30 = v3;
    uint64_t v8 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    *(void *)(v0 + 576) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v9 = *(void *)(v0 + 336);
    sub_10001CD44((void *)(v0 + 304), v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    v28(v6, v7);
    *(void *)(v0 + 584) = sub_1008FA0F0(v11, v13, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = (void *)(v0 + 184);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    *(_WORD *)(v8 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    *(void *)(v0 + 608) = sub_1008FA0F0(v14, v15, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v30;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = *(void *)(v0 + 1040);
  uint64_t v17 = *(void *)(v0 + 1056) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v17 == v16)
  {
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 1704) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1392) = v3;
    *(void *)(v0 + 1384) = 0;
    uint64_t v18 = *(void *)(v0 + 1072);
    uint64_t v19 = *(void *)(v0 + 696) + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v19, v0 + 144);
    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    sub_10001CD44((void *)(v0 + 144), v20);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v20);
    uint64_t v22 = sub_10020BB34;
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 1056) + 1;
    *(void *)(v0 + 1064) = v3;
    *(void *)(v0 + 1056) = v23;
    *(void *)(v0 + 1048) = 0;
    uint64_t v24 = *(void *)(v0 + 704);
    sub_10001D010(*(void *)(v0 + 696) + 40 * v23 + 32, (uint64_t)v1);
    uint64_t v18 = *(void *)(v24 + 136);
    *(void *)(v0 + 1072) = v18;
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v26 = *(void *)(v0 + 216);
    sub_10001CD44(v1, v25);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8) + 32))(v25);
    uint64_t v22 = sub_100208398;
  }
  return _swift_task_switch(v22, v18, 0);
}

uint64_t sub_100210218()
{
  uint64_t v30 = v0;
  unint64_t v1 = v0 + 18;
  uint64_t v2 = v0[92];
  swift_release();
  sub_10025C56C(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v3 = v0[174];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v28 = v6;
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[144];
    os_log_t log = v5;
    uint64_t v7 = v0[129];
    uint64_t v8 = v0[119];
    uint64_t v9 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[31];
    uint64_t v10 = v0[32];
    sub_10001CD44(v0 + 28, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    v26(v7, v8);
    v0[61] = sub_1008FA0F0(v12, v14, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v15, v16, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v28, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = v0[130];
  uint64_t v18 = v0[173] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v18 == v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v0[82];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v19(v3, v25);
  }
  else
  {
    uint64_t v21 = v0[173] + 1;
    v0[174] = v3;
    v0[173] = v21;
    uint64_t v22 = v0[134];
    sub_10001D010(v0[87] + 40 * v21 + 32, (uint64_t)v1);
    uint64_t v24 = v0[21];
    uint64_t v23 = v0[22];
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8) + 32))(v24);
    return _swift_task_switch(sub_10020BB34, v22, 0);
  }
}

uint64_t sub_100210848()
{
  unint64_t v29 = v0;
  unint64_t v1 = v0 + 18;
  swift_release();
  uint64_t v2 = v0[206];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v27 = v5;
    uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[144];
    os_log_t log = v4;
    uint64_t v6 = v0[129];
    uint64_t v7 = v0[119];
    uint64_t v8 = swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = v0[31];
    uint64_t v9 = v0[32];
    sub_10001CD44(v0 + 28, v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    v25(v6, v7);
    v0[61] = sub_1008FA0F0(v11, v13, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v8 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v14, v15, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v27, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[130];
  uint64_t v17 = v0[173] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v17 == v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = v0[82];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v18(v2, v24);
  }
  else
  {
    uint64_t v20 = v0[173] + 1;
    v0[174] = v2;
    v0[173] = v20;
    uint64_t v21 = v0[134];
    sub_10001D010(v0[87] + 40 * v20 + 32, (uint64_t)v1);
    uint64_t v23 = v0[21];
    uint64_t v22 = v0[22];
    sub_10001CD44(v1, v23);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8) + 32))(v23);
    return _swift_task_switch(sub_10020BB34, v21, 0);
  }
}

uint64_t sub_100210E58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 48) = a4;
  *(unsigned char *)(v6 + 176) = a3;
  *(void *)(v6 + 32) = a1;
  return _swift_task_switch(sub_100210E84, v5, 0);
}

uint64_t sub_100210E84()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 16);
  if (v1)
  {
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    *(void *)(v0 + 72) = sub_100010324(v2, (uint64_t)qword_10170D9D8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134217984;
      *(void *)(v0 + 24) = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching %ld items.", v5, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v13 = *(void *)(*(void *)(v0 + 64) + 256);
    uint64_t v19 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t))((char *)&dword_1016649E0 + dword_1016649E0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1002111A8;
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 32);
    char v18 = *(unsigned char *)(v0 + 176);
    return v19(v17, v18, v15, v16, v13);
  }
  else
  {
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D9D8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No items to fetch.", v9, 2u);
      swift_slowDealloc();
    }

    unint64_t v10 = sub_10092E178((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v11 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v11(v10);
  }
}

uint64_t sub_1002111A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v5[11] = a1;
  v5[12] = a2;
  v5[13] = a3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v5[8];
    return _swift_task_switch(sub_1002112F4, v9, 0);
  }
}

uint64_t sub_1002112F4()
{
  type metadata accessor for KeyDropInterface();
  uint64_t v1 = swift_allocObject();
  v0[14] = v1;
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[15] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002113B0;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[11];
  return sub_100F3EAC4(v5, v3, v4);
}

uint64_t sub_1002113B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)*v5;
  uint64_t v9 = (void *)*v5;
  unsigned char v8[16] = a2;
  v8[17] = a4;
  v8[18] = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v10 = v8[8];
    return _swift_task_switch(sub_1002117D8, v10, 0);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v8[19] = v11;
    *uint64_t v11 = v9;
    v11[1] = sub_100211550;
    uint64_t v13 = v8[5];
    return sub_100224304((uint64_t)v11, a2, v12, a4, v13);
  }
}

uint64_t sub_100211550(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[8];
    uint64_t v5 = sub_100211850;
  }
  else
  {
    uint64_t v6 = v3[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100211680;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100211680()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    v0[2] = *(void *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetch returning results for %ld beacon(s).", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v0[12], v0[13]);

  uint64_t v5 = v0[20];
  uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_1002117D8()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100211850()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002118E4(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[20] = v5;
  v2[21] = *(void *)(v5 + 64);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v2[26] = v6;
  v2[27] = *(void *)(v6 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(sub_100211AD0, v1, 0);
}

uint64_t sub_100211AD0()
{
  v0[30] = *(void *)(v0[14] + 136);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100211B74;
  uint64_t v2 = v0[13];
  return sub_100E59F38(v2, 0);
}

uint64_t sub_100211B74(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100211C8C, v2, 0);
}

void sub_100211C8C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v5 = v0[26];
    uint64_t v4 = v0[27];
    uint64_t v15 = v5;
    while (v3 < *(void *)(v1 + 16))
    {
      uint64_t v6 = v0[29];
      unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v8 = *(void *)(v4 + 72);
      sub_10025C504(v0[32] + v7 + v8 * v3, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v9 = v0[29];
      if (*(unsigned char *)(v6 + *(int *)(v5 + 36)) == 2)
      {
        sub_10025C56C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        sub_10025C5CC(v9, v0[28], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1000B721C(v10 > 1, v11 + 1, 1);
        }
        uint64_t v12 = v0[28];
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_10025C5CC(v12, (uint64_t)_swiftEmptyArrayStorage + v7 + v11 * v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v5 = v15;
      }
      if (v2 == ++v3) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    v0[33] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[34] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100211EA4;
    uint64_t v14 = v0[13];
    sub_100E5B3AC(v14);
  }
}

uint64_t sub_100211EA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100211FBC, v2, 0);
}

uint64_t sub_100211FBC()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = (char *)sub_100206FB4(*(void *)(v0 + 264));
  swift_release();
  unint64_t v3 = sub_1002071CC(v1);
  swift_bridgeObjectRelease();
  sub_100442D9C((uint64_t)v3);
  *(void *)(v0 + 288) = v2;
  uint64_t v4 = *((void *)v2 + 2);
  *(void *)(v0 + 296) = v4;
  uint64_t v5 = *(void *)(v0 + 160);
  if (v4)
  {
    int v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 456) = v6;
    *(void *)(v0 + 304) = *(void *)(v5 + 72);
    unint64_t v7 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 16);
    *(void *)(v0 + 328) = 0;
    *(void *)(v0 + 336) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 312) = v7;
    *(void *)(v0 + 320) = 0;
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 152);
    *(void *)(v0 + 344) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v8, &v2[(v6 + 32) & ~(unint64_t)v6], v9);
    unint64_t v10 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
    *(void *)(v0 + 352) = v10;
    v10(v8, 0, 1, v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v9) != 1)
    {
      uint64_t v11 = *(void *)(v0 + 192);
      uint64_t v12 = *(void *)(v0 + 200);
      uint64_t v13 = *(void *)(v0 + 152);
      uint64_t v14 = *(void *)(v0 + 160);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      *(void *)(v0 + 360) = v16;
      *(void *)(v0 + 368) = (v14 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v16(v11, v12, v13);
      *(void *)(v0 + 376) = *(void *)(v15 + 128);
      return _swift_task_switch(sub_100212240, 0, 0);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v5 + 56))(*(void *)(v0 + 200), 1, 1, *(void *)(v0 + 152));
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void *))(v0 + 8);
  return v17(_swiftEmptyArrayStorage);
}

uint64_t sub_100212240()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 376) + 120);
  *(void *)(v0 + 384) = v1;
  return _swift_task_switch(sub_100212264, v1, 0);
}

uint64_t sub_100212264()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 360);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 152);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 456) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456);
  *(void *)(v0 + 392) = *(void *)(v1 + 136);
  v3(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 400) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100212358, 0, 0);
}

uint64_t sub_100212358()
{
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  unint64_t v3 = (void *)swift_task_alloc();
  v0[51] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[52] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  void *v4 = v0;
  v4[1] = sub_100212470;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C998, v3, v5);
}

uint64_t sub_100212470()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 424) = *(void *)(v1 + 96);
  return _swift_task_switch(sub_1002125CC, 0, 0);
}

uint64_t sub_1002125CC()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[54] = v1;
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[53];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[40];
  sub_100CB9100(v0[53], v0 + 2);
  v0[55] = v7;
  if (v7)
  {
    v0[56] = v7;
    uint64_t v8 = v0[14];
    uint64_t v9 = sub_100212BAC;
  }
  else
  {
    uint64_t v8 = v0[47];
    uint64_t v9 = sub_100212760;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100212760()
{
  unint64_t v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    unsigned char *v3 = 12;
    swift_willThrow();
    sub_1001300CC(v0 + 2);
    v0[56] = v2;
    uint64_t v4 = v0[14];
    uint64_t v5 = sub_100212BAC;
  }
  else
  {
    uint64_t v6 = (void (*)(char *, uint64_t, uint64_t))v0[39];
    uint64_t v8 = (uint64_t *)v0[18];
    uint64_t v7 = v0[19];
    uint64_t v9 = v0[15];
    uint64_t v13 = v0[14];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[7];
    sub_1000361E0(v11, v1);
    sub_1001300CC(v0 + 2);
    v6((char *)v8 + *(int *)(v9 + 20), v10, v7);
    *uint64_t v8 = v11;
    v8[1] = v1;
    uint64_t v5 = sub_100212890;
    uint64_t v4 = v13;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100212890()
{
  sub_10025C504(*(void *)(v0 + 144), *(void *)(v0 + 136), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 336);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A70010(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 336));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A70010(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 128);
  *(void *)(v2 + 16) = v4 + 1;
  sub_10025C5CC(v8, v2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v4, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_10025C56C(v9, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  uint64_t v11 = *(void *)(v0 + 328) + 1;
  if (v11 == *(void *)(v0 + 296))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 352))(*(void *)(v0 + 200), 1, 1, *(void *)(v0 + 152));
LABEL_8:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v18 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v18(v2);
  }
  *(void *)(v0 + 320) = *(void *)(v0 + 440);
  *(void *)(v0 + 328) = v11;
  uint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 160);
  unint64_t v16 = *(void *)(v0 + 288)
      + ((*(unsigned __int8 *)(v0 + 456) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456))
      + *(void *)(v0 + 304) * v11;
  *(void *)(v0 + 336) = v2;
  *(void *)(v0 + 344) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v12(v13, v16, v14);
  uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
  *(void *)(v0 + 352) = v17;
  v17(v13, 0, 1, v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(v0 + 192);
  uint64_t v21 = *(void *)(v0 + 200);
  uint64_t v22 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  *(void *)(v0 + 360) = v25;
  *(void *)(v0 + 368) = (v23 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v25(v20, v21, v22);
  *(void *)(v0 + 376) = *(void *)(v24 + 128);
  return _swift_task_switch(sub_100212240, 0, 0);
}

uint64_t sub_100212BAC()
{
  uint64_t v35 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  unint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  sub_100010324(*(void *)(v0 + 432), (uint64_t)qword_10170D788);
  v1(v3, v2, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v11 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 160) + 8);
  if (v7)
  {
    uint64_t v33 = *(void *)(v0 + 192);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    *(void *)(v12 + 4) = 1752392040;
    *(_WORD *)(v12 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v12 + 14) = sub_1008FA0F0(v13, v14, &v34);
    swift_bridgeObjectRelease();
    uint64_t v15 = *v11;
    (*v11)(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No own device key for shareId %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();

    v15(v33, v10);
  }
  else
  {
    swift_errorRelease();

    unint64_t v16 = *v11;
    (*v11)(v9, v10);
    v16(v8, v10);
  }
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v18 = *(void *)(v0 + 328) + 1;
  if (v18 == *(void *)(v0 + 296))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 352))(*(void *)(v0 + 200), 1, 1, *(void *)(v0 + 152));
LABEL_9:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v25(v17);
  }
  *(void *)(v0 + 320) = 0;
  *(void *)(v0 + 328) = v18;
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 312);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 160);
  unint64_t v23 = *(void *)(v0 + 288)
      + ((*(unsigned __int8 *)(v0 + 456) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 456))
      + *(void *)(v0 + 304) * v18;
  *(void *)(v0 + 344) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v20, v23, v21);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 352) = v24;
  v24(v20, 0, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1) {
    goto LABEL_9;
  }
  uint64_t v27 = *(void *)(v0 + 192);
  uint64_t v28 = *(void *)(v0 + 200);
  uint64_t v29 = *(void *)(v0 + 152);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v31 = *(void *)(v0 + 112);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  *(void *)(v0 + 360) = v32;
  *(void *)(v0 + 368) = (v30 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v32(v27, v28, v29);
  *(void *)(v0 + 376) = *(void *)(v31 + 128);
  return _swift_task_switch(sub_100212240, 0, 0);
}

uint64_t sub_100212FDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = v7;
  *(unsigned char *)(v8 + 160) = a3;
  *(void *)(v8 + 72) = a1;
  *(void *)(v8 + 80) = a4;
  uint64_t v13 = type metadata accessor for UUID();
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 112) = *(void *)(v13 - 8);
  *(void *)(v8 + 120) = swift_task_alloc();
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v8 + 128) = v14;
  *unint64_t v14 = v8;
  v14[1] = sub_100213100;
  return sub_100213954(a2, a4, a5, a6);
}

uint64_t sub_100213100(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 96);
    return _swift_task_switch(sub_100213250, v7, 0);
  }
}

uint64_t sub_100213250()
{
  uint64_t v57 = v0;
  uint64_t v1 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v1 + 136);
  uint64_t v12 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 120);
  uint64_t v13 = *(void *)(v1 + 104);
  if (v9)
  {
    os_log_type_t v47 = v8;
    os_log_t log = v7;
    unint64_t v51 = (void *)(v1 + 40);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218755;
    int64_t v15 = *(void *)(v10 + 16);
    *(void *)(v1 + 16) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2160;
    *(void *)(v1 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 32) = sub_1008FA0F0(v16, v17, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v46 = (uint8_t *)v14;
    *(_WORD *)(v14 + 32) = 2082;
    if (v15)
    {
      int v49 = (void *)(v1 + 56);
      size_t v50 = (void *)(v1 + 48);
      uint64_t v45 = v1;
      uint64_t v18 = *(void *)(v1 + 136);
      uint64_t v54 = _swiftEmptyArrayStorage;
      sub_1000B6ED0(0, v15, 0);
      uint64_t v19 = v54;
      uint64_t v20 = (unint64_t *)(v18 + 64);
      do
      {
        int64_t v52 = v15;
        uint64_t v21 = *(v20 - 3);
        uint64_t v23 = *(v20 - 2);
        uint64_t v22 = *(v20 - 1);
        unint64_t v24 = *v20;
        *unint64_t v51 = *(v20 - 4);
        sub_1000361E0(v22, v24);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v56 = v25;
        v26._uint64_t countAndFlagsBits = 8250;
        v26._object = (void *)0xE200000000000000;
        String.append(_:)(v26);
        *size_t v50 = v21;
        v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 45;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        *int v49 = v23;
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v22, v24);
        uint64_t v30 = v55;
        uint64_t v31 = v56;
        uint64_t v54 = v19;
        unint64_t v33 = v19[2];
        unint64_t v32 = v19[3];
        if (v33 >= v32 >> 1)
        {
          sub_1000B6ED0(v32 > 1, v33 + 1, 1);
          uint64_t v19 = v54;
        }
        v20 += 5;
        v19[2] = v33 + 1;
        uint64_t v34 = &v19[2 * v33];
        v34[4] = v30;
        v34[5] = v31;
        --v15;
      }
      while (v52 != 1);
      uint64_t v1 = v45;
    }
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 64) = sub_1008FA0F0(v35, v37, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v47, "Found %ld ranges for circle: %{private,mask.hash}s.\nRanges: %{public}s)", v46, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(*(void *)(v1 + 120), *(void *)(v1 + 104));
    swift_bridgeObjectRelease_n();
  }
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v38;
  *uint64_t v38 = v1;
  v38[1] = sub_10021374C;
  uint64_t v39 = *(void *)(v1 + 136);
  uint64_t v40 = *(void *)(v1 + 88);
  uint64_t v41 = *(void *)(v1 + 72);
  uint64_t v42 = *(void *)(v1 + 80);
  char v43 = *(unsigned char *)(v1 + 160);
  return sub_100214484(v41, v39, v42, v43, v40);
}

uint64_t sub_10021374C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v4 = sub_1002138E8;
  }
  else {
    uint64_t v4 = sub_100213878;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100213878()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002138E8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100213954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[23] = a4;
  v5[24] = v4;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[25] = v6;
  v5[26] = *(void *)(v6 - 8);
  v5[27] = swift_task_alloc();
  return _swift_task_switch(sub_100213A1C, v4, 0);
}

uint64_t sub_100213A1C()
{
  uint64_t v39 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  uint64_t v5 = type metadata accessor for Logger();
  v0[28] = sub_100010324(v5, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[26];
  uint64_t v9 = v0[27];
  uint64_t v11 = v0[25];
  if (v8)
  {
    uint64_t v33 = v0[22];
    uint64_t v34 = v0[23];
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558787;
    v0[14] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_1008FA0F0(v13, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v37 = 0x7972616D6972702ELL;
    unint64_t v38 = 0xEA0000000000282FLL;
    v0[16] = v33;
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v0[17] = sub_1008FA0F0(v37, v38, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 32) = 2080;
    uint64_t v37 = 0x7972616D6972702ELL;
    unint64_t v38 = 0xEA0000000000282FLL;
    v0[18] = v34;
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v0[19] = sub_1008FA0F0(v37, v38, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Bundle Decryption for shareId: %{private,mask.hash}s for primary range: %s - %s.", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[27], v0[25]);
  }

  unint64_t v20 = v0[22];
  unint64_t v19 = v0[23];
  v0[12] = v19;
  if (v19 >= v20)
  {
    v0[29] = *(void *)(v0[24] + 128);
    swift_beginAccess();
    v0[30] = _swiftEmptyArrayStorage;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v26 = v0[12];
      v0[10] = 0x7972616D6972702ELL;
      v0[11] = 0xEA0000000000282FLL;
      v0[13] = v26;
      v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      *(void *)(v25 + 4) = sub_1008FA0F0(v0[10], v0[11], &v37);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Create bundle decryption for primaryIndex: %s.", (uint8_t *)v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v29 = v0[12];
    uint64_t v30 = (void *)swift_task_alloc();
    v0[31] = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100214000;
    uint64_t v31 = v0[20];
    uint64_t v32 = v0[21];
    return sub_100CAC664((uint64_t)(v0 + 2), v31, v32, v29);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void *))v0[1];
    return v21(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100214000()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 192);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100214420;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 192);
    uint64_t v4 = sub_100214128;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100214128()
{
  uint64_t v24 = v0;
  sub_10025C6B0(v0 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(v0 + 240);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = sub_100A6FEEC(0, v2[2] + 1, 1, *(void **)(v0 + 240));
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100A6FEEC((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[5 * v4];
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  v5[8] = *(void *)(v0 + 48);
  *((_OWORD *)v5 + 2) = v6;
  *((_OWORD *)v5 + 3) = v7;
  sub_10025C6E0(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  if (v8 && (unint64_t v9 = *(void *)(v0 + 176), v10 = v8 - 1, *(void *)(v0 + 96) = v10, v10 >= v9))
  {
    *(void *)(v0 + 240) = v2;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = *(void *)(v0 + 96);
      *(void *)(v0 + 80) = 0x7972616D6972702ELL;
      *(void *)(v0 + 88) = 0xEA0000000000282FLL;
      *(void *)(v0 + 104) = v16;
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 41;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      *(void *)(v15 + 4) = sub_1008FA0F0(*(void *)(v0 + 80), *(void *)(v0 + 88), &v23);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Create bundle decryption for primaryIndex: %s.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v19 = *(void *)(v0 + 96);
    unint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v20;
    *unint64_t v20 = v0;
    v20[1] = sub_100214000;
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 168);
    return sub_100CAC664(v0 + 16, v21, v22, v19);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void *))(v0 + 8);
    return v11(v2);
  }
}

uint64_t sub_100214420()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100214484(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 248) = a5;
  *(void *)(v6 + 256) = v5;
  *(unsigned char *)(v6 + 612) = a4;
  *(void *)(v6 + 232) = a2;
  *(void *)(v6 + 240) = a3;
  *(void *)(v6 + 224) = a1;
  sub_10000588C(&qword_10163F778);
  *(void *)(v6 + 264) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for KeyDropJoinToken(0);
  *(void *)(v6 + 272) = v7;
  *(void *)(v6 + 280) = *(void *)(v7 - 8);
  *(void *)(v6 + 288) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v6 + 320) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v6 + 328) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 336) = v9;
  *(void *)(v6 + 344) = *(void *)(v9 + 64);
  *(void *)(v6 + 352) = swift_task_alloc();
  *(void *)(v6 + 360) = swift_task_alloc();
  *(void *)(v6 + 368) = swift_task_alloc();
  *(void *)(v6 + 376) = swift_task_alloc();
  *(void *)(v6 + 384) = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v6 + 392) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MemberSharingCircle();
  *(void *)(v6 + 400) = v10;
  *(void *)(v6 + 408) = *(void *)(v10 - 8);
  *(void *)(v6 + 416) = swift_task_alloc();
  *(void *)(v6 + 424) = swift_task_alloc();
  return _swift_task_switch(sub_1002146FC, v5, 0);
}

uint64_t sub_1002146FC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 256) + 136);
  *(void *)(v0 + 432) = v1;
  return _swift_task_switch(sub_100214720, v1, 0);
}

uint64_t sub_100214720()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 240);
  *(void *)(v0 + 440) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 448) = v6;
  *(void *)(v0 + 456) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 608) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 464) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 472) = v10;
  *(void *)(v0 + 480) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100214838, 0, 0);
}

uint64_t sub_100214838()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[55];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[61] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C4D0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[62] = v4;
  void *v4 = v0;
  v4[1] = sub_100214940;
  uint64_t v6 = v0[48];
  uint64_t v5 = v0[49];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_100214940()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100214A90, v1, 0);
}

uint64_t sub_100214A90()
{
  uint64_t v1 = v0[49];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[51] + 48))(v1, 1, v0[50]) == 1)
  {
    uint64_t v2 = v0[54];
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
    return _swift_task_switch(sub_100215808, v2, 0);
  }
  else
  {
    uint64_t v3 = v0[32];
    sub_10025C5CC(v1, v0[53], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v0[63] = *(void *)(v3 + 128);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[64] = v4;
    void *v4 = v0;
    v4[1] = sub_100214BD8;
    uint64_t v5 = v0[30];
    return sub_100C32EB4((uint64_t)(v0 + 2), v5);
  }
}

uint64_t sub_100214BD8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v2[67] = v0;
    uint64_t v3 = v2[32];
    uint64_t v4 = sub_100214DE0;
  }
  else
  {
    uint64_t v3 = v2[63];
    uint64_t v4 = sub_100214D00;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100214D00()
{
  uint64_t v1 = v0[6];
  v0[66] = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = v0[32];
    swift_bridgeObjectRetain();
    sub_1001300CC(v0 + 2);
    uint64_t v3 = sub_100214F00;
    uint64_t v4 = v2;
  }
  else
  {
    sub_100130078();
    uint64_t v5 = swift_allocError();
    unsigned char *v6 = 13;
    swift_willThrow();
    sub_1001300CC(v0 + 2);
    v0[67] = v5;
    uint64_t v4 = v0[32];
    uint64_t v3 = sub_100214DE0;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100214DE0()
{
  sub_10025C56C(*(void *)(v0 + 424), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100214F00()
{
  uint64_t v58 = v0;
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = (void *)swift_task_alloc();
  v3[2] = v2;
  uint64_t v4 = sub_1000A41AC((uint64_t (*)(char *))sub_10025C660, v3, v1);
  swift_task_dealloc();
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v7 = *(void *)(v0 + 424);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v56 = type metadata accessor for Logger();
  sub_100010324(v56, (uint64_t)qword_10170D9D8);
  v5(v8, v10, v9);
  sub_10025C504(v7, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = *(void *)(v0 + 416);
  if (v13)
  {
    uint64_t v15 = *(void *)(v0 + 368);
    os_log_t log = v11;
    uint64_t v16 = *(void *)(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v18 = swift_slowAlloc();
    v57[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558787;
    *(void *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 200) = sub_1008FA0F0(v19, v20, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v15, v16);
    *(_WORD *)(v18 + 22) = 2160;
    *(void *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 32) = 2081;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_1008FA0F0(v22, v23, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10025C56C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, log, v12, "Found member sharing circle %{private,mask.hash}s with owner: %{private,mask.hash}s.", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 336) + 8);
    v21(*(void *)(v0 + 368), *(void *)(v0 + 328));
    sub_10025C56C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  sub_10025C56C(*(void *)(v0 + 424), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  unint64_t v24 = *(void *)(v4 + 16);
  if (v24 >= 2)
  {
    os_log_type_t type = v21;
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
    uint64_t v26 = *(void *)(v0 + 352);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 240);
    sub_100010324(v56, (uint64_t)qword_10170D9D8);
    v25(v26, v28, v27);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v33 = *(void *)(v0 + 328);
    if (v31)
    {
      uint64_t v34 = swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 141558531;
      *(void *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2081;
      sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v35, v36, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      type(v32, v33);
      *(_WORD *)(v34 + 22) = 2048;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Multiple join tokens found for sharingCircleIdentifier: %{private,mask.hash}s, count: %ld.", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      v21(v32, v33);
      swift_bridgeObjectRelease();
    }

    unint64_t v24 = *(void *)(v4 + 16);
  }
  if (v24)
  {
    uint64_t v37 = *(unsigned __int8 *)(*(void *)(v0 + 280) + 80);
    sub_10025C504(v4 + ((v37 + 32) & ~v37), *(void *)(v0 + 264), type metadata accessor for KeyDropJoinToken);
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = 1;
  }
  uint64_t v39 = *(void *)(v0 + 272);
  uint64_t v40 = *(void *)(v0 + 280);
  uint64_t v41 = *(void *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v38, 1, v39);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 264), &qword_10163F778);
    sub_100130078();
    swift_allocError();
    *uint64_t v42 = 13;
    swift_willThrow();
  }
  else
  {
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
    uint64_t v45 = *(void *)(v0 + 328);
    uint64_t v46 = *(void *)(v0 + 288);
    char v53 = *(unsigned char *)(v0 + 612);
    uint64_t v48 = *(void *)(v0 + 240);
    uint64_t v47 = *(void *)(v0 + 248);
    uint64_t v49 = *(void *)(v0 + 224);
    uint64_t v50 = *(void *)(v0 + 232);
    sub_10025C5CC(*(void *)(v0 + 264), v46, type metadata accessor for KeyDropJoinToken);
    v44(v49, v48, v45);
    Item = (int *)type metadata accessor for KeyDropFetchItem(0);
    sub_10025C5CC(v46, v49 + Item[8], type metadata accessor for KeyDropJoinToken);
    *(unsigned char *)(v49 + Item[5]) = v53;
    *(void *)(v49 + Item[6]) = v47;
    *(void *)(v49 + Item[7]) = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

uint64_t sub_100215808()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 240);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 608) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 608);
  *(void *)(v0 + 544) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 552) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_1002158FC, 0, 0);
}

uint64_t sub_1002158FC()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[68];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[70] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C4EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[71] = v4;
  void *v4 = v0;
  v4[1] = sub_100215A04;
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_100215A04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100215B54, v1, 0);
}

uint64_t sub_100215B54()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  if (v3 == 1)
  {
    sub_100130078();
    swift_allocError();
    unsigned char *v4 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    v0[72] = *(void *)(v0[32] + 128);
    unint64_t v7 = (void *)swift_task_alloc();
    v0[73] = v7;
    void *v7 = v0;
    v7[1] = sub_100215D6C;
    uint64_t v8 = v0[30];
    return sub_100C32EB4((uint64_t)(v0 + 10), v8);
  }
}

uint64_t sub_100215D6C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 576);
    return _swift_task_switch(sub_100215F54, v6, 0);
  }
}

uint64_t sub_100215F54()
{
  uint64_t v1 = v0[14];
  v0[18] = v1;
  v0[74] = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[75] = v2;
  if (v2)
  {
    uint64_t v3 = v0[32];
    swift_bridgeObjectRetain();
    sub_1001300CC(v0 + 10);
    return _swift_task_switch(sub_100216100, v3, 0);
  }
  else
  {
    sub_100130078();
    swift_allocError();
    unsigned char *v4 = 13;
    swift_willThrow();
    sub_1001300CC(v0 + 10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100216100()
{
  uint64_t v60 = v0;
  unint64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = _swiftEmptyArrayStorage;
  v59[0] = (uint64_t)_swiftEmptyArrayStorage;
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  do
  {
    uint64_t v5 = *(void *)(v0 + 592);
    if (v1 >= *(void *)(v5 + 16))
    {
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v7 = *(void *)(v2 + 72);
    sub_10025C504(v5 + v6 + v7 * v1, *(void *)(v0 + 304), type metadata accessor for KeyDropJoinToken);
    if (*((void *)p_ivar_base_size + 298) != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 328), (uint64_t)qword_10170DAA0);
    char v8 = static UUID.== infix(_:_:)();
    uint64_t v9 = *(void *)(v0 + 304);
    if (v8)
    {
      sub_10025C5CC(v9, *(void *)(v0 + 296), type metadata accessor for KeyDropJoinToken);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7294(0, v3[2] + 1, 1);
        uint64_t v3 = (void *)v59[0];
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7294(v10 > 1, v11 + 1, 1);
        uint64_t v3 = (void *)v59[0];
      }
      uint64_t v12 = *(void *)(v0 + 296);
      v3[2] = v11 + 1;
      sub_10025C5CC(v12, (uint64_t)v3 + v6 + v11 * v7, type metadata accessor for KeyDropJoinToken);
      p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    }
    else
    {
      sub_10025C56C(v9, type metadata accessor for KeyDropJoinToken);
    }
    ++v1;
  }
  while (v1 != *(void *)(v0 + 600));
  sub_10025C634(v0 + 144);
  if (qword_101636908 == -1) {
    goto LABEL_14;
  }
LABEL_34:
  swift_once();
LABEL_14:
  BOOL v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v58 = type metadata accessor for Logger();
  sub_100010324(v58, (uint64_t)qword_10170D9D8);
  v13(v14, v16, v15);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 360);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 336);
  if (v19)
  {
    uint64_t v23 = swift_slowAlloc();
    v59[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558275;
    *(void *)(v0 + 176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v24, v25, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found owner sharing circle %{private,mask.hash}s for owner.", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(*(void *)(v0 + 360), *(void *)(v0 + 328));
  }

  unint64_t v27 = v3[2];
  if (v27 >= 2)
  {
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
    uint64_t v29 = *(void *)(v0 + 352);
    uint64_t v30 = *(void *)(v0 + 328);
    uint64_t v31 = *(void *)(v0 + 240);
    sub_100010324(v58, (uint64_t)qword_10170D9D8);
    v28(v29, v31, v30);
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 328);
    if (v34)
    {
      uint64_t v57 = v26;
      uint64_t v37 = swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 141558531;
      *(void *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2081;
      sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v38, v39, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v57(v35, v36);
      *(_WORD *)(v37 + 22) = 2048;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Multiple join tokens found for sharingCircleIdentifier: %{private,mask.hash}s, count: %ld.", (uint8_t *)v37, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      v26(v35, v36);
      swift_bridgeObjectRelease();
    }

    unint64_t v27 = v3[2];
  }
  if (v27)
  {
    uint64_t v40 = *(unsigned __int8 *)(*(void *)(v0 + 280) + 80);
    sub_10025C504((uint64_t)v3 + ((v40 + 32) & ~v40), *(void *)(v0 + 264), type metadata accessor for KeyDropJoinToken);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
  }
  uint64_t v42 = *(void *)(v0 + 272);
  uint64_t v43 = *(void *)(v0 + 280);
  uint64_t v44 = *(void *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, v41, 1, v42);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v42) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 264), &qword_10163F778);
    sub_100130078();
    swift_allocError();
    *uint64_t v45 = 13;
    swift_willThrow();
  }
  else
  {
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
    uint64_t v48 = *(void *)(v0 + 328);
    uint64_t v49 = *(void *)(v0 + 288);
    char v56 = *(unsigned char *)(v0 + 612);
    uint64_t v51 = *(void *)(v0 + 240);
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v52 = *(void *)(v0 + 224);
    uint64_t v53 = *(void *)(v0 + 232);
    sub_10025C5CC(*(void *)(v0 + 264), v49, type metadata accessor for KeyDropJoinToken);
    v47(v52, v51, v48);
    Item = (int *)type metadata accessor for KeyDropFetchItem(0);
    sub_10025C5CC(v49, v52 + Item[8], type metadata accessor for KeyDropJoinToken);
    *(unsigned char *)(v52 + Item[5]) = v56;
    *(void *)(v52 + Item[6]) = v50;
    *(void *)(v52 + Item[7]) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_100216A2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 72) = a6;
  *(void *)(v7 + 80) = v6;
  *(void *)(v7 + 56) = a3;
  *(void *)(v7 + 64) = a5;
  *(unsigned char *)(v7 + 264) = a4;
  *(void *)(v7 + 48) = a2;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v7 + 88) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v7 + 96) = v10;
  *(void *)(v7 + 104) = swift_task_alloc();
  uint64_t v11 = sub_10000588C(&qword_10163F788);
  *(void *)(v7 + 112) = v11;
  *(void *)(v7 + 120) = swift_task_alloc();
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  *(void *)(v7 + 160) = swift_task_alloc();
  *(void *)(v7 + 168) = swift_task_alloc();
  *(void *)(v7 + 176) = swift_task_alloc();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v7 + 184) = v12;
  BOOL v13 = *(void (**)(void))(v10 + 16);
  *(void *)(v7 + 192) = v13;
  *(void *)(v7 + 200) = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13();
  *(void *)(v12 + *(int *)(v11 + 48)) = a2;
  return _swift_task_switch(sub_100216BF4, v6, 0);
}

uint64_t sub_100216BF4()
{
  uint64_t v55 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[19];
  os_log_t loga = (os_log_t)v0[21];
  uint64_t v47 = v0[20];
  uint64_t v48 = v0[18];
  uint64_t v51 = v0[17];
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[11];
  unint64_t v53 = v0[9];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170D9D8);
  uint64_t v9 = *(int *)(v6 + 48);
  v2(v4, v3, v7);
  *(void *)(v4 + v9) = v1;
  sub_10001D074(v4, (uint64_t)loga, &qword_10163F788);
  sub_10001D608(v4, v47, &qword_10163F788);
  uint64_t v10 = *(int *)(v6 + 48);
  v2(v5, v3, v7);
  *(void *)(v5 + v10) = v1;
  sub_10001D074(v5, v48, &qword_10163F788);
  sub_10001D608(v5, v51, &qword_10163F788);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v50 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
    uint64_t v13 = v0[21];
    uint64_t v41 = v0[18];
    uint64_t v44 = v0[17];
    uint64_t v38 = v0[16];
    uint64_t v39 = v0[20];
    uint64_t v40 = v0[14];
    os_log_type_t v49 = v12;
    uint64_t v14 = v0[13];
    uint64_t v52 = v0[12];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[7];
    uint64_t v42 = v0[9];
    uint64_t v43 = v0[8];
    os_log_t log = v11;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134218754;
    uint64_t v18 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    v0[2] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v50(v38, v13, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v14, v38, v15);
    sub_10025C710((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v21 = v20;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v37(v14, v15);
    v0[3] = sub_1008FA0F0(v19, v21, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v39, &qword_10163F788);
    sub_10001DAB4(v13, &qword_10163F788);
    *(_WORD *)(v17 + 22) = 2048;
    uint64_t v22 = *(int *)(v40 + 48);
    v50(v38, v41, v15);
    uint64_t v23 = *(void *)(v41 + v22);
    *(void *)(v38 + v22) = v23;
    v37(v38, v15);
    sub_10001DAB4(v41, &qword_10163F788);
    v0[4] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001DAB4(v44, &qword_10163F788);
    *(_WORD *)(v17 + 32) = 2080;
    if (v42) {
      uint64_t v24 = v43;
    }
    else {
      uint64_t v24 = 0x6C646E75622D6F6ELL;
    }
    if (v42) {
      unint64_t v25 = v53;
    }
    else {
      unint64_t v25 = 0xE900000000000065;
    }
    swift_bridgeObjectRetain();
    v0[5] = sub_1008FA0F0(v24, v25, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v49, "BeaconSharingService begin fetchSharedBeacons %ld. Date Interval: %s - %ld days back count, bundle: %s", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = v0[20];
    uint64_t v27 = v0[21];
    uint64_t v28 = v0[17];
    sub_10001DAB4(v0[18], &qword_10163F788);
    swift_bridgeObjectRelease_n();
    sub_10001DAB4(v26, &qword_10163F788);
    sub_10001DAB4(v27, &qword_10163F788);
    sub_10001DAB4(v28, &qword_10163F788);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v29 = v0[15];
  uint64_t v30 = v0[6];
  uint64_t v31 = *(int *)(v0[14] + 48);
  ((void (*)(uint64_t, void, void))v0[24])(v29, v0[23], v0[11]);
  *(void *)(v29 + v31) = v30;
  uint64_t v32 = (void *)swift_task_alloc();
  v0[26] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1002171AC;
  uint64_t v33 = v0[15];
  uint64_t v34 = v0[6];
  uint64_t v35 = v0[7];
  return sub_1002177E4(v33, v34, v35);
}

uint64_t sub_1002171AC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 216) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(void *)(v6 + 80);
    uint64_t v9 = sub_1002175D4;
  }
  else
  {
    uint64_t v10 = *(void *)(v6 + 120);
    uint64_t v11 = *(void *)(v6 + 88);
    uint64_t v12 = *(void *)(v6 + 96);
    *(void *)(v6 + 224) = a2;
    *(void *)(v6 + 232) = a1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v13 = swift_task_alloc();
    *(void *)(v6 + 240) = v13;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = sub_10021735C;
    uint64_t v8 = *(void *)(v6 + 80);
    char v14 = *(unsigned char *)(v6 + 264);
    long long v15 = *(_OWORD *)(v6 + 64);
    *(void *)(v13 + 64) = v8;
    *(_OWORD *)(v13 + 48) = v15;
    *(unsigned char *)(v13 + 176) = v14;
    *(void *)(v13 + 32) = a1;
    *(void *)(v13 + 40) = a2;
    uint64_t v9 = sub_100210E84;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10021735C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[31] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4[10];
  if (v1)
  {
    uint64_t v6 = sub_1002176EC;
  }
  else
  {
    v4[32] = a1;
    uint64_t v6 = sub_1002174D8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002174D8()
{
  sub_10001DAB4(v0[23], &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[32];
  return v1(v2);
}

uint64_t sub_1002175D4()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  sub_10001DAB4(v0[23], &qword_10163F788);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002176EC()
{
  sub_10001DAB4(*(void *)(v0 + 184), &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002177E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[87] = v3;
  v4[86] = a3;
  v4[85] = a2;
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  v4[88] = v7;
  v4[89] = *(void *)(v7 - 8);
  v4[90] = swift_task_alloc();
  v4[91] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HashAlgorithm();
  v4[92] = v8;
  v4[93] = *(void *)(v8 - 8);
  v4[94] = swift_task_alloc();
  sub_10000588C(&qword_10163F758);
  v4[95] = swift_task_alloc();
  v4[96] = swift_task_alloc();
  v4[97] = *(void *)(type metadata accessor for KeyDropFetchItem(0) - 8);
  v4[98] = swift_task_alloc();
  v4[99] = swift_task_alloc();
  v4[100] = sub_10000588C((uint64_t *)&unk_101653D50);
  v4[101] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  v4[102] = v9;
  v4[103] = *(void *)(v9 - 8);
  v4[104] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v4[105] = v10;
  v4[106] = *(void *)(v10 - 8);
  v4[107] = swift_task_alloc();
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  v4[110] = swift_task_alloc();
  v4[111] = swift_task_alloc();
  v4[112] = swift_task_alloc();
  v4[113] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MemberSharingCircle();
  v4[114] = v11;
  v4[115] = *(void *)(v11 - 8);
  v4[116] = swift_task_alloc();
  v4[117] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v4[118] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[119] = v13;
  v4[120] = *(void *)(v13 + 64);
  v4[121] = swift_task_alloc();
  v4[122] = swift_task_alloc();
  v4[123] = swift_task_alloc();
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  v4[126] = swift_task_alloc();
  v4[127] = swift_task_alloc();
  v4[128] = swift_task_alloc();
  uint64_t v14 = sub_10000588C(&qword_10163F788);
  v4[129] = v14;
  v4[130] = swift_task_alloc();
  v4[131] = swift_task_alloc();
  uint64_t v15 = swift_task_alloc();
  v4[132] = v15;
  uint64_t v16 = type metadata accessor for Date();
  v4[133] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[134] = v17;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v4[135] = v18;
  v4[136] = (v17 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v18(v15, a1, v16);
  *(void *)(v15 + *(int *)(v14 + 48)) = a2;
  return _swift_task_switch(sub_100217D30, v3, 0);
}

uint64_t sub_100217D30()
{
  uint64_t v1 = *(void *)(v0 + 688);
  *(void *)(v0 + 656) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1096) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 696);
    *(_DWORD *)(v0 + 1736) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1120) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v0 + 1104) = 0u;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v4, v0 + 184);
    uint64_t v5 = *(void *)(v3 + 136);
    *(void *)(v0 + 1128) = v5;
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v6);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v6);
    return _swift_task_switch(sub_100218070, v5, 0);
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 1056), &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void *, void *))(v0 + 8);
    return v8(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_100218070()
{
  uint64_t v1 = *(void *)(v0 + 1128);
  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  uint64_t v4 = *(void *)(v0 + 952);
  uint64_t v5 = *(void *)(v0 + 944);
  *(void *)(v0 + 1136) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1144) = v6;
  *(void *)(v0 + 1152) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v3, v2, v5);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1740) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 1160) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 1168) = v10;
  *(void *)(v0 + 1176) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_1002181C8, 0, 0);
}

uint64_t sub_1002181C8()
{
  uint64_t v1 = v0[145];
  uint64_t v2 = v0[142];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[148] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C484;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[149] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  void *v4 = v0;
  v4[1] = sub_10021830C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 79, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_10021830C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1128);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1200) = *(void *)(v1 + 632);
  return _swift_task_switch(sub_1002184B0, v2, 0);
}

uint64_t sub_1002184B0()
{
  uint64_t v1 = v0[128];
  uint64_t v2 = v0[119];
  uint64_t v3 = v0[118];
  uint64_t v4 = v0[87];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[151] = v5;
  v0[152] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  return _swift_task_switch(sub_10021856C, v4, 0);
}

uint64_t sub_10021856C()
{
  uint64_t v1 = *(void *)(v0 + 1200);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1224) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 936);
    uint64_t v4 = *(void *)(v0 + 920);
    uint64_t v5 = *(void *)(v0 + 912);
    uint64_t v6 = *(void *)(v0 + 696);
    uint64_t v7 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1744) = v7;
    uint64_t v8 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1748) = v8;
    *(void *)(v0 + 1232) = *(void *)(v6 + 128);
    LODWORD(v6) = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1752) = v6;
    *(void *)(v0 + 1240) = *(void *)(v4 + 72);
    uint64_t v9 = *(void *)(v0 + 1104);
    *(void *)(v0 + 1264) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1256) = 0;
    *(void *)(v0 + 1248) = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
    uint64_t v11 = *(void *)(v0 + 1008);
    uint64_t v12 = *(void *)(v0 + 1000);
    uint64_t v13 = *(void *)(v0 + 944);
    uint64_t v14 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    uint64_t v15 = v3 + v8;
    uint64_t v16 = v3 + v7;
    swift_bridgeObjectRetain();
    sub_10025C504(v14, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v10(v11, v16, v13);
    v10(v12, v15, v13);
    sub_10025C56C(v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v17 = sub_100218898;
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 1120);
    uint64_t v20 = *(void *)(v0 + 1104);
    sub_100442FEC((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = *(void *)(v0 + 1096);
    uint64_t v22 = *(void *)(v0 + 1112) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
    if (v22 == v21)
    {
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 1760) = enum case for HashAlgorithm.sha256(_:);
      *(void *)(v0 + 1448) = v19;
      *(void *)(v0 + 1440) = 0;
      uint64_t v23 = *(void *)(v0 + 1128);
      uint64_t v24 = *(void *)(v0 + 688) + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v24, v0 + 144);
      uint64_t v25 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v25);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8) + 32))(v25);
      uint64_t v17 = sub_10021B884;
      uint64_t v18 = v23;
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 1112) + 1;
      *(void *)(v0 + 1120) = v19;
      *(void *)(v0 + 1112) = v27;
      *(void *)(v0 + 1104) = v20;
      uint64_t v28 = *(void *)(v0 + 696);
      sub_10001D010(*(void *)(v0 + 688) + 40 * v27 + 32, v0 + 184);
      uint64_t v29 = *(void *)(v28 + 136);
      *(void *)(v0 + 1128) = v29;
      uint64_t v30 = *(void *)(v0 + 208);
      uint64_t v31 = *(void *)(v0 + 216);
      sub_10001CD44((void *)(v0 + 184), v30);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 32))(v30);
      uint64_t v17 = sub_100218070;
      uint64_t v18 = v29;
    }
  }
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_100218898()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1232) + 120);
  *(void *)(v0 + 1272) = v1;
  return _swift_task_switch(sub_10021892C, v1, 0);
}

uint64_t sub_10021892C()
{
  uint64_t v1 = *(void *)(v0 + 1272);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1168);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 944);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1740) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1740);
  *(void *)(v0 + 1280) = *(void *)(v1 + 136);
  v3(v4, v5, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1288) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v4, v6);
  swift_retain();
  return _swift_task_switch(sub_100218A5C, 0, 0);
}

uint64_t sub_100218A5C()
{
  uint64_t v1 = v0[161];
  uint64_t v2 = v0[160];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[162] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[163] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  void *v4 = v0;
  v4[1] = sub_100218BA0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 75, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C998, v3, v5);
}

uint64_t sub_100218BA0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1312) = *(void *)(v1 + 600);
  return _swift_task_switch(sub_100218D28, 0, 0);
}

uint64_t sub_100218D28()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[165] = v1;
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[164];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[156];
  sub_100CB9100(v0[164], v0 + 10);
  v0[166] = v7;
  if (v7)
  {
    v0[169] = v7;
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[151];
    uint64_t v9 = v0[126];
    uint64_t v10 = v0[125];
    uint64_t v11 = v0[118];
    uint64_t v12 = v0[87];
    swift_bridgeObjectRelease();
    v8(v10, v11);
    v8(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_100219490;
    uint64_t v14 = v12;
  }
  else
  {
    uint64_t v14 = v0[154];
    uint64_t v13 = sub_100218F64;
  }
  return _swift_task_switch(v13, v14, 0);
}

uint64_t sub_100218F64()
{
  unint64_t v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    unsigned char *v3 = 12;
    swift_willThrow();
    sub_1001300CC(v0 + 10);
    v0[169] = v2;
    BOOL v4 = (void (*)(uint64_t, uint64_t))v0[151];
    uint64_t v5 = v0[126];
    uint64_t v6 = v0[125];
    uint64_t v7 = v0[118];
    uint64_t v8 = v0[87];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_100219490;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[151];
    uint64_t v19 = (void (*)(char *, uint64_t, uint64_t))v0[143];
    uint64_t v20 = v0[126];
    uint64_t v12 = v0[125];
    uint64_t v13 = v0[118];
    uint64_t v14 = (uint64_t *)v0[113];
    uint64_t v15 = v0[105];
    uint64_t v18 = v0[87];
    uint64_t v16 = v0[15];
    sub_1000361E0(v16, v1);
    sub_1001300CC(v0 + 10);
    v19((char *)v14 + *(int *)(v15 + 20), v12, v13);
    *uint64_t v14 = v16;
    v14[1] = v1;
    v11(v12, v13);
    v11(v20, v13);
    uint64_t v9 = sub_100219160;
    uint64_t v10 = v18;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_100219160()
{
  sub_10025C504(*(void *)(v0 + 904), *(void *)(v0 + 896), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1264);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A70010(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1264));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A70010(v3 > 1, v4 + 1, 1, v2);
  }
  *(void *)(v0 + 1336) = v2;
  uint64_t v5 = *(void *)(v0 + 1224);
  uint64_t v6 = *(void *)(v0 + 904);
  uint64_t v7 = *(void *)(v0 + 896);
  uint64_t v8 = *(void *)(v0 + 848);
  uint64_t v9 = *(void *)(v0 + 1256) + 1;
  *(void *)(v2 + 16) = v4 + 1;
  int v10 = *(_DWORD *)(v8 + 80);
  *(_DWORD *)(v0 + 1756) = v10;
  uint64_t v11 = *(void *)(v8 + 72);
  *(void *)(v0 + 1344) = v11;
  sub_10025C5CC(v7, v2 + ((v10 + 32) & ~(unint64_t)v10) + v11 * v4, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_10025C56C(v6, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  if (v9 == v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v0 + 1328);
    *(void *)(v0 + 1376) = *(void *)(v0 + 1120);
    *(void *)(v0 + 1368) = 0;
    *(void *)(v0 + 1360) = v12;
    uint64_t v13 = *(void *)(v0 + 1200);
    if (!*(void *)(v13 + 16)) {
      __break(1u);
    }
    uint64_t v14 = *(void *)(v0 + 1128);
    sub_10025C504(v13 + ((*(unsigned __int8 *)(v0 + 1752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1752)), *(void *)(v0 + 928), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v15);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v15);
    uint64_t v17 = sub_10021995C;
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 1328);
    uint64_t v20 = *(void *)(v0 + 1256) + 1;
    *(void *)(v0 + 1264) = v2;
    *(void *)(v0 + 1256) = v20;
    *(void *)(v0 + 1248) = v19;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
    uint64_t v22 = *(void *)(v0 + 1008);
    uint64_t v23 = *(void *)(v0 + 1000);
    uint64_t v24 = *(void *)(v0 + 944);
    uint64_t v25 = *(void *)(v0 + 936);
    uint64_t v26 = v25 + *(int *)(v0 + 1748);
    uint64_t v27 = v25 + *(int *)(v0 + 1744);
    sub_10025C504(*(void *)(v0 + 1200)+ ((*(unsigned __int8 *)(v0 + 1752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1752))+ *(void *)(v0 + 1240) * v20, v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v21(v22, v27, v24);
    v21(v23, v26, v24);
    sub_10025C56C(v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v17 = sub_100218898;
    uint64_t v18 = 0;
  }
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_100219490()
{
  uint64_t v31 = v0;
  unint64_t v1 = (void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 1120);
  if (qword_101636908 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 1320), (uint64_t)qword_10170D9D8);
  sub_10001D010(v0 + 184, v0 + 304);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
    uint64_t v5 = *(void *)(v0 + 1024);
    uint64_t v6 = *(void *)(v0 + 944);
    uint64_t v29 = v2;
    uint64_t v7 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 576) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 336);
    sub_10001CD44((void *)(v0 + 304), v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v9);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    v27(v5, v6);
    *(void *)(v0 + 584) = sub_1008FA0F0(v10, v12, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = (void *)(v0 + 184);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    *(_WORD *)(v7 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    *(void *)(v0 + 608) = sub_1008FA0F0(v13, v14, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v29;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v15 = *(void *)(v0 + 1096);
  uint64_t v16 = *(void *)(v0 + 1112) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v16 == v15)
  {
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 1760) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1448) = v2;
    *(void *)(v0 + 1440) = 0;
    uint64_t v17 = *(void *)(v0 + 1128);
    uint64_t v18 = *(void *)(v0 + 688) + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v18, v0 + 144);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v20 = *(void *)(v0 + 176);
    sub_10001CD44((void *)(v0 + 144), v19);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v19);
    uint64_t v21 = sub_10021B884;
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 1112) + 1;
    *(void *)(v0 + 1120) = v2;
    *(void *)(v0 + 1112) = v22;
    *(void *)(v0 + 1104) = 0;
    uint64_t v23 = *(void *)(v0 + 696);
    sub_10001D010(*(void *)(v0 + 688) + 40 * v22 + 32, (uint64_t)v1);
    uint64_t v17 = *(void *)(v23 + 136);
    *(void *)(v0 + 1128) = v17;
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v25 = *(void *)(v0 + 216);
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
    uint64_t v21 = sub_100218070;
  }
  return _swift_task_switch(v21, v17, 0);
}

uint64_t sub_10021995C()
{
  unint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1168);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v3 = *(void *)(v0 + 1128);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 1016);
  uint64_t v6 = *(void *)(v0 + 944);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1740) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1740);
  *(void *)(v0 + 1384) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1392) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100219A8C, 0, 0);
}

uint64_t sub_100219A8C()
{
  unint64_t v1 = v0;
  uint64_t v2 = v0[174];
  uint64_t v3 = v1[173];
  uint64_t v4 = (void *)swift_task_alloc();
  v1[175] = v4;
  v4[2] = v3;
  v4[3] = sub_10025C4B4;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[176] = v5;
  void *v5 = v1;
  v5[1] = sub_100219BC4;
  uint64_t v6 = v1[101];
  uint64_t v7 = v1[100];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091084, v4, v7);
}

uint64_t sub_100219BC4()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1208);
  uint64_t v2 = *(void *)(*(void *)v0 + 1024);
  uint64_t v3 = *(void *)(*(void *)v0 + 944);
  uint64_t v4 = *(void *)(*(void *)v0 + 696);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_100219DAC, v4, 0);
}

uint64_t sub_100219DAC()
{
  uint64_t v145 = v0;
  uint64_t v2 = (void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 816);
  uint64_t v4 = *(void *)(v0 + 808);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 824) + 48))(v4, 1, v3) == 1)
  {
    sub_10025C56C(*(void *)(v0 + 928), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v4, (uint64_t *)&unk_101653D50);
    unint64_t v5 = *(void *)(v0 + 1368) + 1;
    if (v5 == *(void *)(v0 + 1224))
    {
      uint64_t v6 = *(void *)(v0 + 1360);
      unint64_t v1 = *(void *)(v0 + 1376);
      swift_bridgeObjectRelease();
      sub_100442FEC(*(void *)(v0 + 1336));
LABEL_4:
      uint64_t v7 = *(void *)(v0 + 1096);
      uint64_t v8 = *(void *)(v0 + 1112) + 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        *(_DWORD *)(v0 + 1760) = enum case for HashAlgorithm.sha256(_:);
        *(void *)(v0 + 1448) = v1;
        *(void *)(v0 + 1440) = 0;
        uint64_t v9 = *(void *)(v0 + 1128);
        uint64_t v10 = *(void *)(v0 + 688) + 32;
        swift_bridgeObjectRetain();
        sub_10001D010(v10, v0 + 144);
        uint64_t v11 = *(void *)(v0 + 168);
        uint64_t v12 = *(void *)(v0 + 176);
        sub_10001CD44((void *)(v0 + 144), v11);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v11);
        uint64_t v13 = sub_10021B884;
        uint64_t v14 = v9;
LABEL_14:
        return _swift_task_switch(v13, v14, 0);
      }
      uint64_t v31 = *(void *)(v0 + 1112) + 1;
      *(void *)(v0 + 1120) = v1;
      *(void *)(v0 + 1112) = v31;
      *(void *)(v0 + 1104) = v6;
      uint64_t v32 = *(void *)(v0 + 696);
      sub_10001D010(*(void *)(v0 + 688) + 40 * v31 + 32, (uint64_t)v2);
      uint64_t v27 = *(void *)(v32 + 136);
      *(void *)(v0 + 1128) = v27;
      uint64_t v34 = *(void *)(v0 + 208);
      uint64_t v33 = *(void *)(v0 + 216);
      sub_10001CD44(v2, v34);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v33 + 8) + 8) + 32))(v34);
      uint64_t v30 = sub_100218070;
LABEL_13:
      uint64_t v13 = v30;
      uint64_t v14 = v27;
      goto LABEL_14;
    }
    *(void *)(v0 + 1368) = v5;
    uint64_t v26 = *(void *)(v0 + 1200);
    if (v5 < *(void *)(v26 + 16))
    {
      uint64_t v27 = *(void *)(v0 + 1128);
      sub_10025C504(v26+ ((*(unsigned __int8 *)(v0 + 1752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1752))+ *(void *)(v0 + 1240) * v5, *(void *)(v0 + 928), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v28 = *(void *)(v0 + 208);
      uint64_t v29 = *(void *)(v0 + 216);
      sub_10001CD44((void *)(v0 + 184), v28);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8) + 32))(v28);
      uint64_t v30 = sub_10021995C;
      goto LABEL_13;
    }
LABEL_126:
    __break(1u);
LABEL_127:
    swift_once();
LABEL_18:
    sub_100010324(*(void *)(v0 + 1320), (uint64_t)qword_10170D9D8);
    uint64_t v2 = (void *)v143;
    sub_10001D010(v143, (uint64_t)v132);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      char v133 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
      os_log_type_t v142 = v41;
      uint64_t v42 = *(void *)(v0 + 1024);
      uint64_t v43 = *(void *)(v0 + 944);
      uint64_t v44 = swift_slowAlloc();
      v144[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 141558531;
      *(void *)(v0 + 576) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 12) = 2081;
      logb = v40;
      uint64_t v46 = *(void *)(v0 + 328);
      uint64_t v45 = *(void *)(v0 + 336);
      sub_10001CD44(v132, v46);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8) + 32))(v46);
      sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v49 = v48;
      v133(v42, v43);
      *(void *)(v0 + 584) = sub_1008FA0F0(v47, v49, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v132);
      *(_WORD *)(v44 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v50 = Error.localizedDescription.getter();
      *(void *)(v0 + 608) = sub_1008FA0F0(v50, v51, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, logb, v142, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v132);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v6 = 0;
    goto LABEL_4;
  }
  char v132 = (void *)(v0 + 304);
  __dst = (void *)(v0 + 456);
  uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v143 = v0 + 184;
  uint64_t v15 = *(void *)(v0 + 984);
  unint64_t v139 = (void **)(v0 + 616);
  uint64_t v16 = *(void *)(v0 + 944);
  uint64_t v141 = (size_t *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 928);
  uint64_t v18 = *(void *)(v0 + 912);
  uint64_t v19 = *(void *)(v0 + 832);
  sub_10025C5CC(v4, v19, type metadata accessor for SharedBeaconRecord);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 216);
  sub_10001CD44(v2, v21);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v21);
  v134(v15, v17 + *(int *)(v18 + 28), v16);
  uint64_t v22 = *(unsigned __int8 *)(v19 + *(int *)(v3 + 64));
  uint64_t v23 = *(void *)(v0 + 208);
  uint64_t v24 = *(void *)(v0 + 216);
  sub_10001CD44(v2, v23);
  char v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v23, v24);
  switch(v22)
  {
    case 1:
    case 4:
      if (v25) {
        LOBYTE(v22) = 2;
      }
      else {
        LOBYTE(v22) = 1;
      }
      goto LABEL_22;
    case 2:
      LOBYTE(v22) = 0;
      goto LABEL_22;
    case 3:
LABEL_22:
      uint64_t v52 = *(void *)(v0 + 1336);
      uint64_t v53 = *(void *)(v0 + 1048);
      uint64_t v54 = *(void *)(v0 + 680);
      uint64_t v55 = *(int *)(*(void *)(v0 + 1032) + 48);
      (*(void (**)(uint64_t, void, void))(v0 + 1080))(v53, *(void *)(v0 + 1056), *(void *)(v0 + 1064));
      *(void *)(v53 + v55) = v54;
      int64_t v56 = *(void *)(v52 + 16);
      uint64_t v57 = _swiftEmptyArrayStorage;
      if (!v56) {
        goto LABEL_98;
      }
      char v135 = v22;
      *(void *)(v0 + 616) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1000B7930(0, v56, 0);
      uint64_t v58 = 0;
      uint64_t v59 = *(void *)(v0 + 1360);
      os_log_t log = (os_log_t)v56;
      break;
    default:
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
      uint64_t v36 = *(void *)(v0 + 992);
      uint64_t v37 = *(void *)(v0 + 984);
      uint64_t v38 = *(void *)(v0 + 944);
      os_log_t loga = *(os_log_t *)(v0 + 928);
      uint64_t v39 = *(void *)(v0 + 832);
      type metadata accessor for SPBeaconSharingError(0);
      *(void *)(v0 + 672) = 2;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10025C710((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      v35(v37, v38);
      v35(v36, v38);
      sub_10025C56C(v39, type metadata accessor for SharedBeaconRecord);
      sub_10025C56C((uint64_t)loga, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v1 = *(void *)(v0 + 1376);
      if (qword_101636908 == -1) {
        goto LABEL_18;
      }
      goto LABEL_127;
  }
  while (2)
  {
    uint64_t v60 = *(uint64_t **)(v0 + 888);
    uint64_t v143 = v58 + 1;
    sub_10025C504(*(void *)(v0 + 1336)+ ((*(unsigned __int8 *)(v0 + 1756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1756))+ *(void *)(v0 + 1344) * v58, (uint64_t)v60, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v61 = *v60;
    unint64_t v1 = v60[1];
    unint64_t v62 = v1 >> 62;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    switch(v1 >> 62)
    {
      case 1uLL:
        uint64_t v64 = (int)v61;
        uint64_t v63 = v61 >> 32;
        sub_1000361E0(v61, v1);
        if (v61 >> 32 < (int)v61) {
          goto LABEL_112;
        }
        uint64_t v65 = v61 >> 32;
        uint64_t v66 = (int)v61;
        goto LABEL_30;
      case 2uLL:
        uint64_t v64 = *(void *)(v61 + 16);
        uint64_t v63 = *(void *)(v61 + 24);
        sub_1000361E0(v61, v1);
        if (v63 < v64)
        {
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        uint64_t v66 = *(void *)(v61 + 16);
        uint64_t v65 = *(void *)(v61 + 24);
LABEL_30:
        if (v65 < v63 || v63 < v66) {
          goto LABEL_113;
        }
        if (__OFSUB__(v63, v64)) {
          goto LABEL_114;
        }
        if ((unint64_t)(v63 - v64) < 0x39)
        {
          switch((int)v62)
          {
            case 1:
              uint64_t v67 = v61 >> 32;
              goto LABEL_45;
            case 2:
              uint64_t v67 = *(void *)(v61 + 24);
              goto LABEL_46;
            default:
              goto LABEL_48;
          }
        }
        uint64_t v67 = v64 + 57;
        if (__OFADD__(v64, 57)) {
          goto LABEL_118;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        switch((int)v62)
        {
          case 1:
            uint64_t v69 = (int)v61;
            uint64_t v68 = v61 >> 32;
            break;
          case 2:
            uint64_t v69 = *(void *)(v61 + 16);
            uint64_t v68 = *(void *)(v61 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v69 = 0;
            uint64_t v68 = BYTE6(v1);
            break;
        }
        if (v68 < v67 || v67 < v69) {
          goto LABEL_119;
        }
        uint64_t v70 = 0;
        switch((int)v62)
        {
          case 1:
LABEL_45:
            uint64_t v70 = (int)v61;
            break;
          case 2:
LABEL_46:
            uint64_t v70 = *(void *)(v61 + 16);
            break;
          default:
            break;
        }
        if (v67 < v70) {
          goto LABEL_115;
        }
        break;
      case 3uLL:
        goto LABEL_30;
      default:
        uint64_t v64 = 0;
        uint64_t v66 = 0;
        uint64_t v63 = BYTE6(v1);
        uint64_t v65 = BYTE6(v1);
        goto LABEL_30;
    }
LABEL_48:
    uint64_t v71 = Data._Representation.subscript.getter();
    unint64_t v73 = v72;
    sub_10001CFB8(v61, v1);
    switch(v73 >> 62)
    {
      case 1uLL:
        LODWORD(v74) = HIDWORD(v71) - v71;
        if (__OFSUB__(HIDWORD(v71), v71)) {
          goto LABEL_120;
        }
        uint64_t v74 = (int)v74;
LABEL_53:
        if (v74 != 57)
        {
LABEL_86:
          sub_10001CFB8(v71, v73);
          return _assertionFailure(_:_:file:line:flags:)();
        }
        sub_1000361E0(v71, v73);
        sub_100A948F8(v71, v73);
        if (v59)
        {
          uint64_t v103 = v59;
          goto LABEL_103;
        }
        *uint64_t v141 = 57;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        unint64_t v1 = __DataStorage.init(length:)();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
            goto LABEL_122;
          }
          swift_allocObject();
          uint64_t v78 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          swift_release();
          unint64_t v1 = v78;
        }
        if (!__DataStorage._bytes.getter()) {
          goto LABEL_130;
        }
        if (__OFSUB__(0, __DataStorage._offset.getter())) {
          goto LABEL_116;
        }
        __DataStorage._length.getter();
        int v79 = CCECCryptorExportKey();
        if (!v79)
        {
          if ((*v141 & 0x8000000000000000) != 0) {
            goto LABEL_117;
          }
          if (*v141 >= 0x39) {
            size_t v80 = 57;
          }
          else {
            size_t v80 = *v141;
          }
          if (!v80)
          {
            swift_release();
            CCECCryptorRelease();
            sub_10001CFB8(v71, v73);
            uint64_t v81 = 0;
            uint64_t v113 = 0;
            unint64_t v1 = 0xC000000000000000;
LABEL_109:
            sub_10013019C();
            uint64_t v124 = swift_allocError();
            *(void *)uint64_t v129 = 28;
            *(void *)(v129 + 8) = v113;
            *(unsigned char *)(v129 + 16) = 0;
            swift_willThrow();
            unint64_t v126 = v1;
            uint64_t v71 = v81;
            goto LABEL_110;
          }
          if (v80 <= 0xE)
          {
            *(void *)(v0 + 462) = 0;
            void *__dst = 0;
            *(unsigned char *)(v0 + 470) = v80;
            swift_retain();
            uint64_t v82 = __DataStorage._bytes.getter();
            if (v82)
            {
              uint64_t v83 = __DataStorage._offset.getter();
              uint64_t v84 = -v83;
              if (__OFSUB__(0, v83)) {
                goto LABEL_125;
              }
              unint64_t v85 = v73;
              __DataStorage._length.getter();
              memcpy(__dst, (const void *)(v82 + v84), v80);
              uint64_t v82 = *(unsigned __int8 *)(v0 + 468);
              uint64_t v86 = *(unsigned __int8 *)(v0 + 469);
              size_t v80 = *(unsigned __int8 *)(v0 + 470);
            }
            else
            {
              unint64_t v85 = v73;
              size_t v80 = v80;
              __DataStorage._length.getter();
              uint64_t v86 = 0;
            }
            uint64_t v81 = *(void *)(v0 + 456);
            uint64_t v87 = *(unsigned int *)(v0 + 464);
            swift_release_n();
            unint64_t v1 = v87 | (v82 << 32) | (v86 << 40) | (v80 << 48);
            unint64_t v73 = v85;
          }
          else
          {
            uint64_t v81 = v80 << 32;
            v1 |= 0x4000000000000000uLL;
          }
          CCECCryptorRelease();
          sub_10001CFB8(v71, v73);
          unint64_t v88 = v1 >> 62;
          switch(v1 >> 62)
          {
            case 1uLL:
              LODWORD(v89) = HIDWORD(v81) - v81;
              if (__OFSUB__(HIDWORD(v81), v81)) {
                goto LABEL_123;
              }
              uint64_t v89 = (int)v89;
LABEL_79:
              if (v89 != 28)
              {
                if (!v88)
                {
                  uint64_t v113 = BYTE6(v1);
                  goto LABEL_109;
                }
                if (v88 == 1)
                {
                  if (!__OFSUB__(HIDWORD(v81), v81))
                  {
                    uint64_t v113 = HIDWORD(v81) - (int)v81;
                    goto LABEL_109;
                  }
                  __break(1u);
                }
                else
                {
                  uint64_t v128 = *(void *)(v81 + 16);
                  uint64_t v127 = *(void *)(v81 + 24);
                  uint64_t v113 = v127 - v128;
                  if (!__OFSUB__(v127, v128)) {
                    goto LABEL_109;
                  }
                }
                __break(1u);
LABEL_130:
                __break(1u);
              }
              uint64_t v92 = *(unsigned int *)(v0 + 1736);
              uint64_t v93 = *(void *)(v0 + 888);
              uint64_t v94 = *(void *)(v0 + 752);
              uint64_t v95 = *(void *)(v0 + 744);
              uint64_t v96 = *(void *)(v0 + 736);
              sub_10001CFB8(v71, v73);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 104))(v94, v92, v96);
              uint64_t v97 = Data.hash(algorithm:)();
              uint64_t v99 = v98;
              (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
              sub_10001CFB8(v81, v1);
              sub_10025C56C(v93, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              uint64_t v57 = *(void **)(v0 + 616);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7930(0, v57[2] + 1, 1);
                uint64_t v57 = *v139;
              }
              uint64_t v58 = v143;
              unint64_t v101 = v57[2];
              unint64_t v100 = v57[3];
              if (v101 >= v100 >> 1)
              {
                sub_1000B7930(v100 > 1, v101 + 1, 1);
                uint64_t v57 = *v139;
              }
              uint64_t v59 = 0;
              uint64_t v57[2] = v101 + 1;
              Swift::String v102 = &v57[2 * v101];
              v102[4] = v97;
              v102[5] = v99;
              if (log == (os_log_t)v143)
              {
                swift_bridgeObjectRelease();
                LOBYTE(v22) = v135;
LABEL_98:
                *(void *)(v0 + 1416) = v57;
                uint64_t v114 = (void *)swift_task_alloc();
                *(void *)(v0 + 1424) = v114;
                *uint64_t v114 = v0;
                v114[1] = sub_10021B2B0;
                uint64_t v115 = *(void *)(v0 + 1048);
                uint64_t v116 = *(void *)(v0 + 992);
                uint64_t v117 = *(void *)(v0 + 984);
                uint64_t v118 = *(void *)(v0 + 792);
                uint64_t v119 = *(void *)(v0 + 680);
                return sub_10022364C(v118, v116, v117, v22, v115, v119, (uint64_t)v57);
              }
              break;
            case 2uLL:
              uint64_t v91 = *(void *)(v81 + 16);
              uint64_t v90 = *(void *)(v81 + 24);
              BOOL v77 = __OFSUB__(v90, v91);
              uint64_t v89 = v90 - v91;
              if (!v77) {
                goto LABEL_79;
              }
              goto LABEL_124;
            case 3uLL:
              uint64_t v113 = 0;
              goto LABEL_109;
            default:
              uint64_t v89 = BYTE6(v1);
              goto LABEL_79;
          }
          continue;
        }
        int v104 = v79;
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        uint64_t v105 = *(void *)(v0 + 768);
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v106 = swift_allocObject();
        *(_OWORD *)(v106 + 16) = xmmword_101342130;
        *(void *)(v106 + 56) = &type metadata for Int32;
        *(void *)(v106 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v106 + 32) = v104;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        CryptoError.init(rawValue:)();
        uint64_t v107 = type metadata accessor for CryptoError();
        sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
        uint64_t v103 = swift_allocError();
        uint64_t v109 = v108;
        uint64_t v110 = *(void *)(v107 - 8);
        int v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v105, 1, v107);
        uint64_t v112 = *(void *)(v0 + 768);
        if (v111 == 1)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v110 + 104))(v109, enum case for CryptoError.unspecifiedError(_:), v107);
          sub_10001DAB4(v112, &qword_10163F758);
        }
        else
        {
          (*(void (**)(uint64_t, void, uint64_t))(v110 + 32))(v109, *(void *)(v0 + 768), v107);
        }
        swift_willThrow();
        swift_release();
LABEL_103:
        static os_log_type_t.error.getter();
        if (qword_101636F48 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v120 = swift_allocObject();
        *(_OWORD *)(v120 + 16) = xmmword_101342130;
        *(void *)(v0 + 624) = v103;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v121 = String.init<A>(describing:)();
        uint64_t v123 = v122;
        *(void *)(v120 + 56) = &type metadata for String;
        *(void *)(v120 + 64) = sub_10000B4CC();
        *(void *)(v120 + 32) = v121;
        *(void *)(v120 + 40) = v123;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v124 = swift_allocError();
        *uint64_t v125 = 0;
        swift_willThrow();
        swift_errorRelease();
        unint64_t v126 = v73;
LABEL_110:
        sub_10001CFB8(v71, v126);
        _StringGuts.grow(_:)(35);
        *(void *)(v0 + 440) = 0;
        *(void *)(v0 + 448) = 0xE000000000000000;
        v130._uint64_t countAndFlagsBits = 0xD000000000000021;
        v130._object = (void *)0x80000001013F3B70;
        String.append(_:)(v130);
        *(void *)(v0 + 640) = v124;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v76 = *(void *)(v71 + 16);
        uint64_t v75 = *(void *)(v71 + 24);
        BOOL v77 = __OFSUB__(v75, v76);
        uint64_t v74 = v75 - v76;
        if (!v77) {
          goto LABEL_53;
        }
        goto LABEL_121;
      case 3uLL:
        goto LABEL_86;
      default:
        uint64_t v74 = BYTE6(v73);
        goto LABEL_53;
    }
  }
}

uint64_t sub_10021B2B0()
{
  uint64_t v2 = (void *)*v1;
  v2[179] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[151];
  if (v0)
  {
    uint64_t v4 = v2[124];
    uint64_t v5 = v2[123];
    uint64_t v6 = v2[118];
    uint64_t v7 = v2[87];
    swift_bridgeObjectRelease();
    v3(v5, v6);
    v3(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10021FBBC;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v10 = v2[134];
    uint64_t v11 = v2[133];
    uint64_t v12 = v2[131];
    uint64_t v13 = v2[124];
    uint64_t v14 = v2[123];
    uint64_t v15 = v2[118];
    uint64_t v16 = v2[87];
    swift_bridgeObjectRelease();
    v3(v14, v15);
    v3(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    uint64_t v8 = sub_10021B4EC;
    uint64_t v9 = v16;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10021B4EC()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1376);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A70044(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1376));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A70044(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 928);
  uint64_t v6 = *(void *)(v0 + 832);
  uint64_t v7 = *(void *)(v0 + 792);
  uint64_t v8 = *(void *)(v0 + 776);
  *(void *)(v2 + 16) = v4 + 1;
  sub_10025C5CC(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  sub_10025C56C(v6, type metadata accessor for SharedBeaconRecord);
  sub_10025C56C(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = *(void *)(v0 + 1432);
  unint64_t v10 = *(void *)(v0 + 1368) + 1;
  if (v10 == *(void *)(v0 + 1224))
  {
    swift_bridgeObjectRelease();
    sub_100442FEC(*(void *)(v0 + 1336));
    uint64_t v11 = *(void *)(v0 + 1096);
    uint64_t v12 = *(void *)(v0 + 1112) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 184);
    if (v12 == v11)
    {
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 1760) = enum case for HashAlgorithm.sha256(_:);
      *(void *)(v0 + 1448) = v2;
      *(void *)(v0 + 1440) = 0;
      uint64_t v13 = *(void *)(v0 + 1128);
      uint64_t v14 = *(void *)(v0 + 688) + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v14, v0 + 144);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v15);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v15);
      uint64_t v17 = sub_10021B884;
      uint64_t v18 = v13;
      goto LABEL_12;
    }
    uint64_t v24 = *(void *)(v0 + 1112) + 1;
    *(void *)(v0 + 1120) = v2;
    *(void *)(v0 + 1112) = v24;
    *(void *)(v0 + 1104) = v9;
    uint64_t v25 = *(void *)(v0 + 696);
    sub_10001D010(*(void *)(v0 + 688) + 40 * v24 + 32, v0 + 184);
    uint64_t v20 = *(void *)(v25 + 136);
    *(void *)(v0 + 1128) = v20;
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v26);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8) + 32))(v26);
    uint64_t v23 = sub_100218070;
  }
  else
  {
    *(void *)(v0 + 1376) = v2;
    *(void *)(v0 + 1368) = v10;
    *(void *)(v0 + 1360) = v9;
    uint64_t v19 = *(void *)(v0 + 1200);
    if (v10 >= *(void *)(v19 + 16)) {
      __break(1u);
    }
    uint64_t v20 = *(void *)(v0 + 1128);
    sub_10025C504(v19+ ((*(unsigned __int8 *)(v0 + 1752) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1752))+ *(void *)(v0 + 1240) * v10, *(void *)(v0 + 928), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v22 = *(void *)(v0 + 216);
    sub_10001CD44((void *)(v0 + 184), v21);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8) + 32))(v21);
    uint64_t v23 = sub_10021995C;
  }
  uint64_t v17 = v23;
  uint64_t v18 = v20;
LABEL_12:
  return _swift_task_switch(v17, v18, 0);
}

uint64_t sub_10021B884()
{
  unint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1168);
  unint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v3 = *(void *)(v0 + 1128);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 1016);
  uint64_t v6 = *(void *)(v0 + 944);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1740) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1740);
  unint64_t v8 = (v7 + *(void *)(v0 + 960) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v0 + 1456) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 1464) = v9;
  *(void *)(v9 + 16) = v3;
  v1(v9 + v7, v5, v6);
  *(void *)(v9 + v8) = 0;
  swift_retain();
  return _swift_task_switch(sub_10021B9C8, 0, 0);
}

uint64_t sub_10021B9C8()
{
  uint64_t v1 = v0[183];
  uint64_t v2 = v0[182];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[184] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C4A4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[185] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  void *v4 = v0;
  v4[1] = sub_10021BB0C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 71, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_10021BB0C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1128);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1488) = *(void *)(v1 + 568);
  return _swift_task_switch(sub_10021BCB0, v2, 0);
}

uint64_t sub_10021BCB0()
{
  uint64_t v1 = *(void *)(v0 + 1128);
  (*(void (**)(void, void))(v0 + 1208))(*(void *)(v0 + 1024), *(void *)(v0 + 944));
  return _swift_task_switch(sub_10021BD54, v1, 0);
}

uint64_t sub_10021BD54()
{
  *(void *)(v0 + 1496) = *(void *)(*(void *)(v0 + 1128) + 136);
  swift_retain();
  return _swift_task_switch(sub_10021BDF4, 0, 0);
}

uint64_t sub_10021BDF4()
{
  uint64_t v1 = v0[187];
  uint64_t v2 = v0[141];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[188] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[189] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  void *v4 = v0;
  v4[1] = sub_10021BF34;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 68, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10021BF34()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 696);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1520) = *(void *)(v1 + 544);
  return _swift_task_switch(sub_10021C0D8, v2, 0);
}

uint64_t sub_10021C0D8()
{
  uint64_t v1 = *(void *)(v0 + 1488);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1528) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 712);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 1764) = v4;
    *(void *)(v0 + 1536) = *(void *)(v3 + 72);
    *(void *)(v0 + 1552) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1544) = 0;
    uint64_t v5 = *(void *)(v0 + 1520);
    uint64_t v6 = *(void *)(v0 + 728);
    uint64_t v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    sub_10025C504(v7, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001D010(v0 + 144, v0 + 264);
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 1560) = v8;
    *(void *)(v8 + 16) = v5;
    sub_10001CEB0((long long *)(v0 + 264), v8 + 24);
    swift_retain();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 1568) = v9;
    uint64_t v10 = sub_10000588C((uint64_t *)&unk_101657790);
    *uint64_t v9 = v0;
    v9[1] = sub_10021C5B4;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_10025C850, v8, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v0 + 1448);
    sub_100442FEC((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    uint64_t v12 = *(void *)(v0 + 1096);
    uint64_t v13 = *(void *)(v0 + 1440) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
    if (v13 == v12)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v0 + 656);
      sub_10001DAB4(*(void *)(v0 + 1056), &qword_10163F788);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v14(v11, v20);
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 1440) + 1;
      *(void *)(v0 + 1448) = v11;
      *(void *)(v0 + 1440) = v15;
      uint64_t v16 = *(void *)(v0 + 1128);
      sub_10001D010(*(void *)(v0 + 688) + 40 * v15 + 32, v0 + 144);
      uint64_t v17 = *(void *)(v0 + 168);
      uint64_t v18 = *(void *)(v0 + 176);
      sub_10001CD44((void *)(v0 + 144), v17);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v17);
      return _swift_task_switch(sub_10021B884, v16, 0);
    }
  }
}

uint64_t sub_10021C5B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1576) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 696);
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int v4 = sub_1002200E8;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 696);
    swift_release();
    int v4 = sub_10021C744;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10021C744()
{
  uint64_t v1 = *(uint64_t **)(v0 + 880);
  sub_10001CFB8(*(void *)(v0 + 344), *(void *)(v0 + 352));
  uint64_t v2 = *(void *)(v0 + 360);
  unint64_t v3 = *(void *)(v0 + 368);
  *(void *)(v0 + 1584) = v2;
  *(void *)(v0 + 1592) = v3;
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v4);
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  sub_1000361E0(v2, v3);
  v7(v4, v6);
  *uint64_t v1 = v2;
  v1[1] = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v9 = *(void *)(v0 + 1552);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v9 = sub_100A70010(0, *(void *)(v9 + 16) + 1, 1, v9);
  }
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v11 >= v10 >> 1) {
    unint64_t v9 = sub_100A70010(v10 > 1, v11 + 1, 1, v9);
  }
  *(void *)(v0 + 1600) = v9;
  uint64_t v12 = *(void *)(v0 + 880);
  uint64_t v13 = *(void *)(v0 + 848);
  uint64_t v14 = *(void *)(v0 + 704);
  uint64_t v15 = *(void *)(v0 + 696);
  *(void *)(v9 + 16) = v11 + 1;
  int v16 = *(_DWORD *)(v13 + 80);
  *(_DWORD *)(v0 + 1768) = v16;
  uint64_t v17 = *(void *)(v13 + 72);
  *(void *)(v0 + 1608) = v17;
  sub_10025C5CC(v12, v9 + ((v16 + 32) & ~(unint64_t)v16) + v17 * v11, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  *(void *)(v0 + 1616) = *(void *)(v15 + 128);
  *(_DWORD *)(v0 + 1772) = *(_DWORD *)(v14 + 20);
  *(_DWORD *)(v0 + 1776) = *(_DWORD *)(v14 + 24);
  return _swift_task_switch(sub_10021C930, 0, 0);
}

uint64_t sub_10021C930()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1616) + 120);
  *(void *)(v0 + 1624) = v1;
  return _swift_task_switch(sub_10021C9C4, v1, 0);
}

uint64_t sub_10021C9C4()
{
  uint64_t v1 = *(void *)(v0 + 1624);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1168);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 944);
  uint64_t v6 = *(void *)(v0 + 728) + *(int *)(v0 + 1772);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 1740) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1740);
  *(void *)(v0 + 1632) = *(void *)(v1 + 136);
  v3(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1640) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_10021CAFC, 0, 0);
}

uint64_t sub_10021CAFC()
{
  uint64_t v1 = v0[205];
  uint64_t v2 = v0[204];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[206] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[207] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  void *v4 = v0;
  v4[1] = sub_10021CC40;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 65, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C998, v3, v5);
}

uint64_t sub_10021CC40()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 1664) = *(void *)(v1 + 520);
  return _swift_task_switch(sub_10021CDC8, 0, 0);
}

uint64_t sub_10021CDC8()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[208];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[197];
  sub_100CB9100(v0[208], v0 + 2);
  v0[209] = v7;
  if (v7)
  {
    v0[211] = v7;
    uint64_t v8 = v0[87];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    unint64_t v9 = sub_10021E180;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = v0[202];
    unint64_t v9 = sub_10021CFBC;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_10021CFBC()
{
  unint64_t v1 = *(void *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    unsigned char *v3 = 12;
    swift_willThrow();
    sub_1001300CC((uint64_t *)(v0 + 16));
    *(void *)(v0 + 1688) = v2;
    uint64_t v4 = *(void *)(v0 + 696);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = sub_10021E180;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 1144);
    uint64_t v8 = *(void *)(v0 + 944);
    unint64_t v9 = *(uint64_t **)(v0 + 872);
    uint64_t v10 = *(void *)(v0 + 840);
    uint64_t v14 = *(void *)(v0 + 696);
    uint64_t v11 = *(void *)(v0 + 728) + *(int *)(v0 + 1776);
    uint64_t v12 = *(void *)(v0 + 56);
    sub_1000361E0(v12, v1);
    sub_1001300CC((uint64_t *)(v0 + 16));
    v7((char *)v9 + *(int *)(v10 + 20), v11, v8);
    *unint64_t v9 = v12;
    v9[1] = v1;
    uint64_t v5 = sub_10021D15C;
    uint64_t v6 = v14;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10021D15C()
{
  uint64_t v1 = *(void *)(v0 + 1600);
  sub_10025C504(*(void *)(v0 + 872), *(void *)(v0 + 864), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  unint64_t v4 = v3 + 1;
  uint64_t v5 = *(void *)(v0 + 1600);
  if (v3 >= v2 >> 1) {
    goto LABEL_101;
  }
  while (2)
  {
    *(void *)(v0 + 1680) = v5;
    uint64_t v6 = *(void *)(v0 + 1608);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 1768);
    unint64_t v8 = *(void *)(v0 + 1592);
    uint64_t v9 = *(void *)(v0 + 1584);
    uint64_t v10 = *(void *)(v0 + 1528);
    uint64_t v11 = *(void *)(v0 + 872);
    uint64_t v12 = *(void *)(v0 + 864);
    uint64_t v13 = *(void *)(v0 + 728);
    uint64_t v14 = *(void *)(v0 + 1544) + 1;
    *(void *)(v5 + 16) = v4;
    sub_10025C5CC(v12, v5 + ((v7 + 32) & ~v7) + v6 * v3, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    sub_10001CFB8(v9, v8);
    sub_10025C56C(v11, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    sub_10025C56C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v14 != v10)
    {
      uint64_t v77 = *(void *)(v0 + 1544) + 1;
      *(void *)(v0 + 1552) = v5;
      *(void *)(v0 + 1544) = v77;
      uint64_t v78 = *(void *)(v0 + 1520);
      sub_10025C504(*(void *)(v0 + 1488)+ ((*(unsigned __int8 *)(v0 + 1764) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1764))+ *(void *)(v0 + 1536) * v77, *(void *)(v0 + 728), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001D010(v0 + 144, v0 + 264);
      uint64_t v79 = swift_allocObject();
      *(void *)(v0 + 1560) = v79;
      *(void *)(v79 + 16) = v78;
      sub_10001CEB0((long long *)(v0 + 264), v79 + 24);
      swift_retain();
      size_t v80 = (void *)swift_task_alloc();
      *(void *)(v0 + 1568) = v80;
      uint64_t v81 = sub_10000588C((uint64_t *)&unk_101657790);
      *size_t v80 = v0;
      v80[1] = sub_10021C5B4;
      return unsafeBlocking<A>(_:)(v0 + 344, sub_10025C850, v79, v81);
    }
    uint64_t v5 = *(void *)(v0 + 704);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1780) = v15;
    uint64_t v16 = *(int *)(v5 + 20);
    *(_DWORD *)(v0 + 1784) = v16;
    uint64_t v17 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1788) = v17;
    uint64_t v18 = *(void *)(v0 + 1672);
    *(void *)(v0 + 1704) = *(void *)(v0 + 1448);
    *(void *)(v0 + 1696) = 0;
    uint64_t v19 = *(void *)(v0 + 1488);
    if (!*(void *)(v19 + 16)) {
      goto LABEL_106;
    }
    uint64_t v114 = v18;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
    uint64_t v21 = *(void *)(v0 + 976);
    uint64_t v22 = *(void *)(v0 + 968);
    uint64_t v23 = *(void *)(v0 + 944);
    uint64_t v24 = *(void *)(v0 + 720);
    uint64_t v25 = v24 + v16;
    uint64_t v26 = v24 + v15;
    sub_10025C504(v19 + ((*(unsigned __int8 *)(v0 + 1764) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1764)), v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v20(v21, v26, v23);
    v20(v22, v25, v23);
    char v27 = *(unsigned char *)(v24 + v17);
    sub_10025C56C(v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v28 = *(void *)(v0 + 1680);
    uint64_t v29 = *(void *)(v0 + 1040);
    uint64_t v30 = *(void *)(v0 + 680);
    uint64_t v31 = *(int *)(*(void *)(v0 + 1032) + 48);
    (*(void (**)(uint64_t, void, void))(v0 + 1080))(v29, *(void *)(v0 + 1056), *(void *)(v0 + 1064));
    *(void *)(v29 + v31) = v30;
    unint64_t v3 = *(void *)(v28 + 16);
    uint64_t v32 = _swiftEmptyArrayStorage;
    if (!v3) {
      goto LABEL_82;
    }
    char v110 = v27;
    __dst = (void *)(v0 + 472);
    *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    int v111 = (void **)(v0 + 528);
    sub_1000B7930(0, v3, 0);
    uint64_t v33 = 0;
    unint64_t v113 = v3;
LABEL_6:
    uint64_t v34 = *(uint64_t **)(v0 + 856);
    uint64_t v35 = *(void *)(v0 + 1680)
        + ((*(unsigned __int8 *)(v0 + 1768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1768))
        + *(void *)(v0 + 1608) * v33;
    uint64_t v14 = v33 + 1;
    sub_10025C504(v35, (uint64_t)v34, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v5 = *v34;
    unint64_t v4 = v34[1];
    uint64_t v9 = v4 >> 62;
    uint64_t v11 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v2 = 0;
    switch(v4 >> 62)
    {
      case 1uLL:
        uint64_t v36 = (int)v5;
        uint64_t v11 = v5 >> 32;
        sub_1000361E0(v5, v4);
        if (v5 >> 32 < (int)v5) {
          goto LABEL_95;
        }
        uint64_t v37 = v5 >> 32;
        unint64_t v2 = (int)v5;
        goto LABEL_12;
      case 2uLL:
        uint64_t v36 = *(void *)(v5 + 16);
        uint64_t v11 = *(void *)(v5 + 24);
        sub_1000361E0(v5, v4);
        if (v11 < v36)
        {
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          uint64_t v5 = sub_100A70010(v2 > 1, v4, 1, v5);
          continue;
        }
        unint64_t v2 = *(void *)(v5 + 16);
        uint64_t v37 = *(void *)(v5 + 24);
LABEL_12:
        if (v37 < v11 || v11 < (uint64_t)v2) {
          goto LABEL_96;
        }
        unint64_t v2 = v11 - v36;
        if (__OFSUB__(v11, v36)) {
          goto LABEL_97;
        }
        if (v2 < 0x39)
        {
          uint64_t v38 = v9;
          uint64_t v9 = v0 + 560;
          switch(v38)
          {
            case 1:
              uint64_t v39 = v5 >> 32;
              goto LABEL_27;
            case 2:
              uint64_t v39 = *(void *)(v5 + 24);
              goto LABEL_28;
            default:
              goto LABEL_30;
          }
        }
        uint64_t v39 = v36 + 57;
        if (__OFADD__(v36, 57))
        {
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        unint64_t v2 = v9;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = v9;
        uint64_t v9 = v0 + 560;
        switch(v42)
        {
          case 1:
            uint64_t v41 = (int)v5;
            uint64_t v40 = v5 >> 32;
            break;
          case 2:
            uint64_t v41 = *(void *)(v5 + 16);
            uint64_t v40 = *(void *)(v5 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v41 = 0;
            uint64_t v40 = BYTE6(v4);
            break;
        }
        if (v40 < v39 || v39 < v41) {
          goto LABEL_103;
        }
        uint64_t v43 = 0;
        switch(v2)
        {
          case 1uLL:
LABEL_27:
            uint64_t v43 = (int)v5;
            break;
          case 2uLL:
LABEL_28:
            uint64_t v43 = *(void *)(v5 + 16);
            break;
          default:
            break;
        }
        if (v39 < v43) {
          goto LABEL_98;
        }
LABEL_30:
        uint64_t v11 = Data._Representation.subscript.getter();
        unint64_t v45 = v44;
        sub_10001CFB8(v5, v4);
        switch(v45 >> 62)
        {
          case 1uLL:
            LODWORD(v46) = HIDWORD(v11) - v11;
            if (__OFSUB__(HIDWORD(v11), v11)) {
              goto LABEL_104;
            }
            uint64_t v46 = (int)v46;
LABEL_35:
            if (v46 != 57)
            {
LABEL_71:
              sub_10001CFB8(v11, v45);
              return _assertionFailure(_:_:file:line:flags:)();
            }
            sub_1000361E0(v11, v45);
            sub_100A948F8(v11, v45);
            if (v114)
            {
              uint64_t v5 = v114;
              uint64_t v9 = v0 + 536;
              goto LABEL_87;
            }
            *(void *)uint64_t v9 = 57;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            unint64_t v4 = __DataStorage.init(length:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v50 = __DataStorage._bytes.getter();
              if (v50)
              {
                unint64_t v3 = v50;
                uint64_t v5 = v4;
                if (__OFSUB__(0, __DataStorage._offset.getter())) {
                  goto LABEL_107;
                }
              }
              swift_allocObject();
              uint64_t v51 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              unint64_t v4 = v51;
            }
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_114;
            }
            uint64_t v5 = v4;
            uint64_t v52 = __DataStorage._offset.getter();
            unint64_t v2 = -v52;
            if (__OFSUB__(0, v52)) {
              goto LABEL_99;
            }
            uint64_t v5 = v4;
            __DataStorage._length.getter();
            int v53 = CCECCryptorExportKey();
            if (v53)
            {
              int v82 = v53;
              unint64_t v83 = v45;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              uint64_t v84 = *(void *)(v0 + 760);
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v85 = swift_allocObject();
              *(_OWORD *)(v85 + 16) = xmmword_101342130;
              *(void *)(v85 + 56) = &type metadata for Int32;
              *(void *)(v85 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v85 + 32) = v82;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              CryptoError.init(rawValue:)();
              uint64_t v86 = type metadata accessor for CryptoError();
              sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              uint64_t v5 = swift_allocError();
              uint64_t v88 = v87;
              uint64_t v89 = *(void *)(v86 - 8);
              int v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v84, 1, v86);
              uint64_t v91 = *(void *)(v0 + 760);
              if (v90 == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v89 + 104))(v88, enum case for CryptoError.unspecifiedError(_:), v86);
                sub_10001DAB4(v91, &qword_10163F758);
              }
              else
              {
                (*(void (**)(uint64_t, void, uint64_t))(v89 + 32))(v88, *(void *)(v0 + 760), v86);
              }
              swift_willThrow();
              swift_release();
              uint64_t v9 = v0 + 536;
              unint64_t v45 = v83;
LABEL_87:
              uint64_t v14 = v45;
              static os_log_type_t.error.getter();
              if (qword_101636F48 == -1)
              {
LABEL_88:
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v98 = swift_allocObject();
                *(_OWORD *)(v98 + 16) = xmmword_101342130;
                *(void *)uint64_t v9 = v5;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v99 = String.init<A>(describing:)();
                uint64_t v101 = v100;
                *(void *)(v98 + 56) = &type metadata for String;
                *(void *)(v98 + 64) = sub_10000B4CC();
                *(void *)(v98 + 32) = v99;
                *(void *)(v98 + 40) = v101;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v102 = swift_allocError();
                *uint64_t v103 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v104 = v14;
                goto LABEL_93;
              }
LABEL_111:
              swift_once();
              goto LABEL_88;
            }
            unint64_t v2 = *(void *)v9;
            if ((*(void *)v9 & 0x8000000000000000) != 0) {
              goto LABEL_100;
            }
            if (v2 >= 0x39) {
              size_t v54 = 57;
            }
            else {
              size_t v54 = *(void *)v9;
            }
            if (!v54)
            {
              swift_release();
              CCECCryptorRelease();
              sub_10001CFB8(v11, v45);
              uint64_t v5 = 0;
              unint64_t v55 = 0xC000000000000000;
LABEL_92:
              sub_10013019C();
              uint64_t v102 = swift_allocError();
              *(void *)uint64_t v107 = 28;
              *(void *)(v107 + 8) = v54;
              *(unsigned char *)(v107 + 16) = 0;
              swift_willThrow();
              unint64_t v104 = v55;
              uint64_t v11 = v5;
LABEL_93:
              sub_10001CFB8(v11, v104);
              _StringGuts.grow(_:)(35);
              *(void *)(v0 + 424) = 0;
              *(void *)(v0 + 432) = 0xE000000000000000;
              v108._uint64_t countAndFlagsBits = 0xD000000000000021;
              v108._object = (void *)0x80000001013F3B70;
              String.append(_:)(v108);
              *(void *)(v0 + 552) = v102;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
            if (v54 <= 0xE)
            {
              uint64_t v115 = v14;
              uint64_t v14 = v45;
              *(void *)(v0 + 478) = 0;
              void *__dst = 0;
              *(unsigned char *)(v0 + 486) = v54;
              swift_retain();
              uint64_t v56 = __DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v5 = v4;
                uint64_t v57 = __DataStorage._offset.getter();
                uint64_t v58 = -v57;
                if (__OFSUB__(0, v57)) {
                  goto LABEL_110;
                }
                __DataStorage._length.getter();
                memcpy(__dst, (const void *)(v56 + v58), v54);
                uint64_t v56 = *(unsigned __int8 *)(v0 + 484);
                uint64_t v59 = *(unsigned __int8 *)(v0 + 485);
                size_t v54 = *(unsigned __int8 *)(v0 + 486);
              }
              else
              {
                size_t v54 = v54;
                __DataStorage._length.getter();
                uint64_t v59 = 0;
              }
              uint64_t v5 = *(void *)(v0 + 472);
              uint64_t v9 = *(unsigned int *)(v0 + 480);
              swift_release_n();
              unint64_t v55 = v9 | (v56 << 32) | (v59 << 40) | (v54 << 48);
              unint64_t v45 = v14;
              uint64_t v14 = v115;
            }
            else
            {
              uint64_t v5 = v54 << 32;
              unint64_t v55 = v4 | 0x4000000000000000;
            }
            CCECCryptorRelease();
            sub_10001CFB8(v11, v45);
            unint64_t v60 = v55 >> 62;
            switch(v55 >> 62)
            {
              case 1uLL:
                LODWORD(v61) = HIDWORD(v5) - v5;
                if (__OFSUB__(HIDWORD(v5), v5)) {
                  goto LABEL_108;
                }
                uint64_t v61 = (int)v61;
LABEL_61:
                if (v61 != 28)
                {
                  if (!v60)
                  {
                    size_t v54 = BYTE6(v55);
                    goto LABEL_92;
                  }
                  if (v60 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v5), v5))
                    {
                      size_t v54 = HIDWORD(v5) - (int)v5;
                      goto LABEL_92;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v106 = *(void *)(v5 + 16);
                    uint64_t v105 = *(void *)(v5 + 24);
                    size_t v54 = v105 - v106;
                    if (!__OFSUB__(v105, v106)) {
                      goto LABEL_92;
                    }
                  }
                  __break(1u);
LABEL_114:
                  __break(1u);
                }
                uint64_t v64 = v14;
                uint64_t v65 = *(unsigned int *)(v0 + 1760);
                uint64_t v66 = *(void *)(v0 + 856);
                uint64_t v67 = *(void *)(v0 + 752);
                uint64_t v68 = *(void *)(v0 + 744);
                unint64_t v69 = v45;
                uint64_t v70 = *(void *)(v0 + 736);
                sub_10001CFB8(v11, v69);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 104))(v67, v65, v70);
                uint64_t v71 = Data.hash(algorithm:)();
                uint64_t v73 = v72;
                (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v70);
                sub_10001CFB8(v5, v55);
                sub_10025C56C(v66, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                uint64_t v32 = *(void **)(v0 + 528);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7930(0, v32[2] + 1, 1);
                  uint64_t v32 = *v111;
                }
                unint64_t v3 = v113;
                uint64_t v33 = v64;
                unint64_t v75 = v32[2];
                unint64_t v74 = v32[3];
                if (v75 >= v74 >> 1)
                {
                  sub_1000B7930(v74 > 1, v75 + 1, 1);
                  uint64_t v32 = *v111;
                }
                uint64_t v114 = 0;
                void v32[2] = v75 + 1;
                uint64_t v76 = &v32[2 * v75];
                v76[4] = v71;
                v76[5] = v73;
                if (v113 != v64) {
                  goto LABEL_6;
                }
                swift_bridgeObjectRelease();
                char v27 = v110;
                break;
              case 2uLL:
                uint64_t v63 = *(void *)(v5 + 16);
                uint64_t v62 = *(void *)(v5 + 24);
                BOOL v49 = __OFSUB__(v62, v63);
                uint64_t v61 = v62 - v63;
                if (!v49) {
                  goto LABEL_61;
                }
                goto LABEL_109;
              case 3uLL:
                size_t v54 = 0;
                goto LABEL_92;
              default:
                uint64_t v61 = BYTE6(v55);
                goto LABEL_61;
            }
LABEL_82:
            *(void *)(v0 + 1712) = v32;
            uint64_t v92 = (void *)swift_task_alloc();
            *(void *)(v0 + 1720) = v92;
            *uint64_t v92 = v0;
            v92[1] = sub_10021E7F8;
            uint64_t v93 = *(void *)(v0 + 1040);
            uint64_t v94 = *(void *)(v0 + 976);
            uint64_t v95 = *(void *)(v0 + 968);
            uint64_t v96 = *(void *)(v0 + 784);
            uint64_t v97 = *(void *)(v0 + 680);
            return sub_10022364C(v96, v94, v95, 0x4000201u >> (8 * v27), v93, v97, (uint64_t)v32);
          case 2uLL:
            uint64_t v48 = *(void *)(v11 + 16);
            uint64_t v47 = *(void *)(v11 + 24);
            BOOL v49 = __OFSUB__(v47, v48);
            uint64_t v46 = v47 - v48;
            if (!v49) {
              goto LABEL_35;
            }
            goto LABEL_105;
          case 3uLL:
            goto LABEL_71;
          default:
            uint64_t v46 = BYTE6(v45);
            goto LABEL_35;
        }
      case 3uLL:
        goto LABEL_12;
      default:
        uint64_t v36 = 0;
        unint64_t v2 = 0;
        uint64_t v11 = BYTE6(v4);
        uint64_t v37 = BYTE6(v4);
        goto LABEL_12;
    }
  }
}